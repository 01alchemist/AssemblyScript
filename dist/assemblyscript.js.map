{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///assemblyscript.js","webpack:///webpack/bootstrap 905f0d41ace1328c4a54","webpack:///./src/module.ts","webpack:///./src/diagnostics.ts","webpack:///./src/program.ts","webpack:///./src/compiler.ts","webpack:///./src/types.ts","webpack:///./src/ast.ts","webpack:///./src/tokenizer.ts","webpack:///(webpack)/buildin/global.js","webpack:///./src/diagnosticMessages.generated.ts","webpack:///./src/util/charcode.ts","webpack:///./src/util/path.ts","webpack:///./src/glue/js/index.ts","webpack:///./std/portable.js","webpack:///external \"binaryen\"","webpack:///./src/builtins.ts","webpack:///./node_modules/long/src/long.js","webpack:///./src/index.ts","webpack:///./src/decompiler.ts","webpack:///./src/parser.ts"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE_14__","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","allocU8Array","u8s","ptr","allocate_memory","length","idx","k","store","allocI32Array","i32s","val","stringLengthUTF8","str","len","u","charCodeAt","allocString","readInt","load","readBuffer","ret","Uint8Array","readString","cp","u1","u2","u3","u4","u5","arr","Array","push","String","fromCodePoints","value","NativeType","compiler_1","_BinaryenTypeNone","_BinaryenTypeInt32","_BinaryenTypeInt64","_BinaryenTypeFloat32","_BinaryenTypeFloat64","_BinaryenTypeUnreachable","_BinaryenTypeAuto","ExpressionId","_BinaryenInvalidId","_BinaryenBlockId","_BinaryenIfId","_BinaryenLoopId","_BinaryenBreakId","_BinaryenSwitchId","_BinaryenCallId","_BinaryenCallImportId","_BinaryenCallIndirectId","_BinaryenGetLocalId","_BinaryenSetLocalId","_BinaryenGetGlobalId","_BinaryenSetGlobalId","_BinaryenLoadId","_BinaryenStoreId","_BinaryenConstId","_BinaryenUnaryId","_BinaryenBinaryId","_BinaryenSelectId","_BinaryenDropId","_BinaryenReturnId","_BinaryenHostId","_BinaryenNopId","_BinaryenUnreachableId","_BinaryenAtomicCmpxchgId","_BinaryenAtomicRMWId","_BinaryenAtomicWaitId","_BinaryenAtomicWakeId","UnaryOp","_BinaryenClzInt32","_BinaryenCtzInt32","_BinaryenPopcntInt32","_BinaryenNegFloat32","_BinaryenAbsFloat32","_BinaryenCeilFloat32","_BinaryenFloorFloat32","_BinaryenTruncFloat32","_BinaryenNearestFloat32","_BinaryenSqrtFloat32","_BinaryenEqZInt32","_BinaryenClzInt64","_BinaryenCtzInt64","_BinaryenPopcntInt64","_BinaryenNegFloat64","_BinaryenAbsFloat64","_BinaryenCeilFloat64","_BinaryenFloorFloat64","_BinaryenTruncFloat64","_BinaryenNearestFloat64","_BinaryenSqrtFloat64","_BinaryenEqZInt64","_BinaryenExtendSInt32","_BinaryenExtendUInt32","_BinaryenWrapInt64","_BinaryenTruncSFloat32ToInt32","_BinaryenTruncSFloat32ToInt64","_BinaryenTruncUFloat32ToInt32","_BinaryenTruncUFloat32ToInt64","_BinaryenTruncSFloat64ToInt32","_BinaryenTruncSFloat64ToInt64","_BinaryenTruncUFloat64ToInt32","_BinaryenTruncUFloat64ToInt64","_BinaryenReinterpretFloat32","_BinaryenReinterpretFloat64","_BinaryenConvertSInt32ToFloat32","_BinaryenConvertSInt32ToFloat64","_BinaryenConvertUInt32ToFloat32","_BinaryenConvertUInt32ToFloat64","_BinaryenConvertSInt64ToFloat32","_BinaryenConvertSInt64ToFloat64","_BinaryenConvertUInt64ToFloat32","_BinaryenConvertUInt64ToFloat64","_BinaryenPromoteFloat32","_BinaryenDemoteFloat64","_BinaryenReinterpretInt32","_BinaryenReinterpretInt64","BinaryOp","_BinaryenAddInt32","_BinaryenSubInt32","_BinaryenMulInt32","_BinaryenDivSInt32","_BinaryenDivUInt32","_BinaryenRemSInt32","_BinaryenRemUInt32","_BinaryenAndInt32","_BinaryenOrInt32","_BinaryenXorInt32","_BinaryenShlInt32","_BinaryenShrUInt32","_BinaryenShrSInt32","_BinaryenRotLInt32","_BinaryenRotRInt32","_BinaryenEqInt32","_BinaryenNeInt32","_BinaryenLtSInt32","_BinaryenLtUInt32","_BinaryenLeSInt32","_BinaryenLeUInt32","_BinaryenGtSInt32","_BinaryenGtUInt32","_BinaryenGeSInt32","_BinaryenGeUInt32","_BinaryenAddInt64","_BinaryenSubInt64","_BinaryenMulInt64","_BinaryenDivSInt64","_BinaryenDivUInt64","_BinaryenRemSInt64","_BinaryenRemUInt64","_BinaryenAndInt64","_BinaryenOrInt64","_BinaryenXorInt64","_BinaryenShlInt64","_BinaryenShrUInt64","_BinaryenShrSInt64","_BinaryenRotLInt64","_BinaryenRotRInt64","_BinaryenEqInt64","_BinaryenNeInt64","_BinaryenLtSInt64","_BinaryenLtUInt64","_BinaryenLeSInt64","_BinaryenLeUInt64","_BinaryenGtSInt64","_BinaryenGtUInt64","_BinaryenGeSInt64","_BinaryenGeUInt64","_BinaryenAddFloat32","_BinaryenSubFloat32","_BinaryenMulFloat32","_BinaryenDivFloat32","_BinaryenCopySignFloat32","_BinaryenMinFloat32","_BinaryenMaxFloat32","_BinaryenEqFloat32","_BinaryenNeFloat32","_BinaryenLtFloat32","_BinaryenLeFloat32","_BinaryenGtFloat32","_BinaryenGeFloat32","_BinaryenAddFloat64","_BinaryenSubFloat64","_BinaryenMulFloat64","_BinaryenDivFloat64","_BinaryenCopySignFloat64","_BinaryenMinFloat64","_BinaryenMaxFloat64","_BinaryenEqFloat64","_BinaryenNeFloat64","_BinaryenLtFloat64","_BinaryenLeFloat64","_BinaryenGtFloat64","_BinaryenGeFloat64","HostOp","_BinaryenPageSize","_BinaryenCurrentMemory","_BinaryenGrowMemory","_BinaryenHasFeature","AtomicRMWOp","_BinaryenAtomicRMWAdd","_BinaryenAtomicRMWSub","_BinaryenAtomicRMWAnd","_BinaryenAtomicRMWOr","_BinaryenAtomicRMWXor","_BinaryenAtomicRMWXchg","MemorySegment","create","buffer","offset","segment","Module","ref","_BinaryenModuleCreate","out","createFrom","cArr","_BinaryenModuleRead","free_memory","changetype","addFunctionType","result","paramTypes","cStr","_BinaryenAddFunctionType","getFunctionTypeBySignature","_BinaryenGetFunctionTypeBySignature","createI32","_BinaryenLiteralInt32","_BinaryenConst","createI64","lo","hi","_BinaryenLiteralInt64","createF32","_BinaryenLiteralFloat32","createF64","_BinaryenLiteralFloat64","createUnary","op","expr","_BinaryenUnary","createBinary","left","right","_BinaryenBinary","createHost","operands","_BinaryenHost","createGetLocal","index","type","_BinaryenGetLocal","createTeeLocal","_BinaryenTeeLocal","createGetGlobal","_BinaryenGetGlobal","createLoad","bytes","signed","_BinaryenLoad","createStore","_BinaryenStore","createAtomicLoad","_BinaryenAtomicLoad","createAtomicStore","_BinaryenAtomicStore","createAtomicRMW","_BinaryenAtomicRMW","createAtomicCmpxchg","expected","replacement","_BinaryenAtomicCmpxchg","createAtomicWait","timeout","expectedType","_BinaryenAtomicWait","createAtomicWake","wakeCount","_BinaryenAtomicWake","createSetLocal","_BinaryenSetLocal","createSetGlobal","_BinaryenSetGlobal","createBlock","label","children","Auto","_BinaryenBlock","createBreak","condition","_BinaryenBreak","createDrop","expression","_BinaryenDrop","createLoop","body","_BinaryenLoop","createIf","ifTrue","ifFalse","_BinaryenIf","createNop","_BinaryenNop","createReturn","_BinaryenReturn","createSelect","_BinaryenSelect","createSwitch","names","defaultName","strs","_BinaryenSwitch","createCall","target","returnType","_BinaryenCall","createCallImport","_BinaryenCallImport","createUnreachable","_BinaryenUnreachable","addGlobal","mutable","initializer","_BinaryenAddGlobal","addFunction","varTypes","_BinaryenAddFunction","removeFunction","_BinaryenRemoveFunction","addFunctionExport","internalName","externalName","cStr1","cStr2","_BinaryenAddFunctionExport","addTableExport","_BinaryenAddTableExport","addMemoryExport","_BinaryenAddMemoryExport","addGlobalExport","_BinaryenAddGlobalExport","removeExport","_BinaryenRemoveExport","addFunctionImport","externalModuleName","externalBaseName","functionType","cStr3","_BinaryenAddFunctionImport","addTableImport","_BinaryenAddTableImport","addMemoryImport","_BinaryenAddMemoryImport","addGlobalImport","globalType","_BinaryenAddGlobalImport","removeImport","_BinaryenRemoveImport","setMemory","initial","maximum","segments","exportName","segs","offs","sizs","Target","WASM64","i64_low","i64_high","cArr1","cArr2","cArr3","_BinaryenSetMemory","setFunctionTable","funcs","_BinaryenSetFunctionTable","setStart","func","_BinaryenSetStart","setOptimizeLevel","level","_BinaryenSetOptimizeLevel","setShrinkLevel","_BinaryenSetShrinkLevel","setDebugInfo","on","_BinaryenSetDebugInfo","optimize","_BinaryenFunctionOptimize","_BinaryenModuleOptimize","runPasses","passes","_BinaryenFunctionRunPasses","_BinaryenModuleRunPasses","validate","_BinaryenModuleValidate","interpret","_BinaryenModuleInterpret","print","_BinaryenModulePrint","printAsmjs","_BinaryenModulePrintAsmjs","toBinary","sourceMapUrl","binaryPtr","sourceMapPtr","_BinaryenModuleAllocateAndWrite","binaryBytes","Binary","output","sourceMap","toText","Error","toAsmjs","dispose","_BinaryenModuleDispose","createRelooper","Relooper","cloneExpression","noSideEffects","maxDepth","i32","MAX_VALUE","nested1","nested2","_BinaryenExpressionGetId","Const","_BinaryenExpressionGetType","I32","_BinaryenConstGetValueI32","I64","_BinaryenConstGetValueI64Low","_BinaryenConstGetValueI64High","F32","_BinaryenConstGetValueF32","F64","_BinaryenConstGetValueF64","GetLocal","_BinaryenGetLocalGetIndex","GetGlobal","globalName","_BinaryenGetGlobalGetName","Load","_BinaryenLoadGetPtr","_BinaryenLoadIsAtomic","_BinaryenLoadGetBytes","_BinaryenLoadGetOffset","_BinaryenLoadIsSigned","_BinaryenLoadGetAlign","Unary","_BinaryenUnaryGetValue","_BinaryenUnaryGetOp","_BinaryenBinaryGetLeft","_BinaryenBinaryGetRight","_BinaryenBinaryGetOp","addDebugInfoFile","_BinaryenModuleAddDebugInfoFileName","getDebugInfoFile","_BinaryenModuleGetDebugInfoFileName","setDebugLocation","fileIndex","lineNumber","columnNumber","_BinaryenFunctionSetDebugLocation","MAX_MEMORY_WASM32","relooper","_RelooperCreate","createStub","addBlock","code","_RelooperAddBlock","addBranch","from","to","_RelooperAddBranch","addBlockWithSwitch","_RelooperAddBlockWithSwitch","addBranchForSwitch","indexes","_RelooperAddBranchForSwitch","renderAndDispose","entry","labelHelper","_RelooperRenderAndDispose","diagnosticCategoryToString","category","DiagnosticCategory","INFO","WARNING","ERROR","diagnosticCategoryToColor","colorBlue","colorYellow","colorRed","formatDiagnosticMessage","message","useColors","showContext","context","range","formatDiagnosticContext","sb","colorReset","toString","source","text","normalizedPath","line","column","join","start","end","charcode_1","isLineBreak","substring","diagnosticMessages_generated_1","diagnosticMessages_generated_2","DiagnosticCode","diagnosticCodeToString","DiagnosticMessage","arg0","arg1","replace","createInfo","createWarning","createError","withRange","DiagnosticEmitter","diagnostics","emitDiagnostic","error","info","warning","__extends","extendStatics","setPrototypeOf","__proto__","b","__","constructor","__values","Symbol","iterator","next","done","__read","r","e","ar","diagnostics_1","types_1","ast_1","module_1","PATH_DELIMITER","PARENT_SUBST","GETTER_PREFIX","SETTER_PREFIX","INSTANCE_DELIMITER","STATIC_DELIMITER","LIBRARY_SUBST","LIBRARY_PREFIX","QueuedExport","QueuedImport","noTypesYet","Map","Program","_super","_this","diagnosticsOffset","elements","types","typeAliases","sources","initialize","options","Type","i8","i16","i64","isizeType","u8","u16","u32","u64","usizeType","bool","f32","f64","void","queuedExports","queuedImports","queuedDerivedClasses","statements","j","statement","kind","NodeKind","CLASSDECLARATION","initializeClass","ENUMDECLARATION","initializeEnum","EXPORT","initializeExports","FUNCTIONDECLARATION","initializeFunction","IMPORT","initializeImports","INTERFACEDECLARATION","initializeInterface","NAMESPACEDECLARATION","initializeNamespace","TYPEDECLARATION","initializeTypeAlias","VARIABLE","initializeVariables","element","queuedImport","tryResolveImport","referencedName","set","splice","referencedNameAlt","Module_0_has_no_exported_member_1","declaration","parent","path","queuedExports_1","queuedExports_1_1","_a","queuedExport","currentExport","isReExport","member","setExportAndCheckLibrary","Cannot_find_name_0","e_1_1","e_1","_b","return","derivedDeclaration","assert","derivedType","extendsType","resolved","resolveIdentifier","ElementKind","CLASS_PROTOTYPE","A_class_may_only_extend_another_class","basePrototype","checkInternalDecorators","isBuiltin","hasDecorator","decorators","ElementFlags","BUILTIN","isLibrary","is","EXPORTED","SOURCE","GLOBAL","has","Duplicate_identifier_0","namespace","fileLevelInternalName","ClassPrototype","isUnmanaged","implementsTypes","Structs_cannot_implement_interfaces","Range","members","Export_declaration_conflicts_with_exported_declaration_of_0","memberDeclarations","memberDeclaration","FIELDDECLARATION","initializeField","METHODDECLARATION","isGetter","hasModifier","ModifierKind","GET","modifiers","SET","initializeAccessor","initializeMethod","instance","resolve","classPrototype","STATIC","staticField","Global","instanceMembers","instanceField","FieldPrototype","CONSTRUCTOR","FunctionPrototype","constructorPrototype","Multiple_constructor_implementations_are_not_allowed","checkOperators","decorator","decoratorKind","Operation_not_supported","numArgs","arguments","firstArg","LITERAL","literalKind","fnIndexedGet","simpleName","fnIndexedSet","fnConcat","fnEquals","String_literal_expected","Expected_0_arguments_but_got_1","propertyName","internalPropertyName","propertyElement","PROPERTY","getterPrototype","setterPrototype","Property","internalStaticName","staticPrototype","internalInstanceName","instancePrototype","enm","Enum","values","initializeEnumValue","EnumValue","initializeExport","internalPath","identifier","referencedElement","seen","Set","add","declarations","initializeImport","namespaceName","indexPart","endsWith","InterfacePrototype","queuedExtendingClasses","parentNamespace","Namespace","alias","global","resolveType","node","contextualTypeArguments","reportNotFound","localName","resolveInclTypeArguments","typeArguments","paramType","instanceKey","typesToString","placeholderType","resolveTypeArguments","typeParameters","typeArgumentNodes","alternativeReportNode","parameterCount","argumentCount","Expected_0_type_arguments_but_got_1","atEnd","contextualFunction","contextualEnum","ENUMVALUE","resolvedElement","ResolvedElement","flow","getScopedLocal","resolvePropertyAccess","propertyAccess","targetExpression","resolveExpression","targetType","LOCAL","FIELD","classType","Property_0_does_not_exist_on_type_1","CLASS","withTarget","base","resolveElementAccess","elementAccess","indexedGet","indexedGetName","FUNCTION_PROTOTYPE","Index_signature_is_missing_in_type_0","PARENTHESIZED","ASSERTION","toType","BINARY","THIS","instanceMethodOf","_this_cannot_be_referenced_in_current_location","SUPER","_super_can_only_be_referenced_in_a_derived_class","IDENTIFIER","PROPERTYACCESS","ELEMENTACCESS","CALL","Element","program","flags","NONE","flag","NAMESPACE","modifierKind","IMPORTED","DECLARE","DECLARED","ENUM","CONST","CONSTANT","constantValue","enum","ConstantValueKind","VariableLikeElement","apply","constantValueKind","withConstantIntegerValue","constantIntegerValue","i64_new","INLINED","withConstantFloatValue","constantFloatValue","LET","SCOPED","READONLY","PUBLIC","PRIVATE","PROTECTED","Parameter","Local","instances","classTypeArguments","GETTER","SETTER","ABSTRACT","GENERIC","INSTANCE","functionTypeArguments","inheritedTypeArguments","inheritedTypeArguments_1","inheritedTypeArguments_1_1","inheritedName","inheritedType","e_2_1","e_2","classDeclaration","classTypeParameters","functionTypeParameters","parameters","typeNode","parameterTypes","parameterDeclaration","parameterType","classInstance","Function","reportNode","resolvedTypeArguments","resolvePartial","partialPrototype","FUNCTION","locals","additionalLocals","breakContext","debugLocations","nextBreakId","breakStack","tempI32s","tempI64s","tempF32s","tempF64s","localIndex","_c","e_3_1","e_3","_d","parameter","parameterName","Flow","addLocal","local","getTempLocal","temps","toNativeType","pop","freeTempLocal","getAndFreeTempLocal","enterBreakContext","id","leaveBreakContext","finalize","debugLocation","debugInfoRef","debugInfoIndex","toTypeString","FIELD_PROTOTYPE","Field","memoryOffset","UNMANAGED","inheritedTypeArguments_2","inheritedTypeArguments_2_1","e_4_1","e_4","baseClass","baseClassType","Structs_cannot_extend_classes_and_vice_versa","Class","currentMemoryOffset","inheritedMember","e_5_1","e_5","_e","partialConstructor","constructorInstance","_f","_g","fieldDeclaration","fieldType","fieldInstance","byteSize","methodPrototype","instanceProperty","e_6_1","e_6","_h","asClass","baseName","baseType","e_7_1","e_7","INTERFACE_PROTOTYPE","Interface","INTERFACE","FlowFlags","scopedLocals","currentFunction","parentFlow","continueLabel","breakLabel","enterBranchOrScope","branchFlow","leaveBranchOrScope","scopedLocal","e_8_1","e_8","addScopedLocal","current","makeSmallIntegerWrap","ShrI32","ShlI32","AndI32","makeIsFalseish","EqzI32","EqzI64","size","EqF32","EqF64","makeIsTrueish","NeI32","NeI64","NeF32","NeF64","builtins_1","program_1","tokenizer_1","Options","WASM32","noTreeShaking","noAssert","noMemory","allocateImpl","freeImpl","usize64","usize32","isize64","isize32","ConversionKind","Compiler","startFunctionBody","currentEnum","currentType","memorySegments","stringSegments","files","compile","startFunctionPrototype","startFunctionInstance","START","startFunction","isEntry","compileSource","typeRef","None","typesToNativeTypes","i64_align","pages","i64_shr_u","compileSourceByPath","normalizedPathWithoutExtension","File_0_not_found","compileClassDeclaration","compileEnumDeclaration","compileFunctionDeclaration","compileNamespaceDeclaration","variableInit","compileVariableStatement","compileExportStatement","previousFunction","compileStatement","compileGlobalDeclaration","compileGlobal","COMPILED","initExpr","resolvedType","Type_0_is_not_assignable_to_type_1","Type_expected","compileExpression","nativeType","initializeInStart","compileInlineConstant","precomputeExpressionRef","Compiling_constant_with_non_constant_initializer_as_mutable","toNativeZero","setExpr","exprType","isTopLevel","isTopLevelExport","programLevelInternalName","compileEnum","previousValue","initInStart","valueDeclaration","AddI32","Cannot_export_a_mutable_global","compileFunctionUsingTypeArguments","compileFunction","An_implementation_cannot_be_declared_in_ambient_contexts","Function_implementation_is_missing_or_not_immediately_following_the_declaration","stmts","compileStatements","allBranchesReturn","A_function_whose_declared_type_is_not_void_must_return_a_value","numParameters","numParametersInclThis","paramIndex","nativeResultType","nativeParamTypes","signatureNameParts","toSignatureString","compileInterfaceDeclaration","compileNamespace","ns","compileClassUsingTypeArguments","internalExportName","functionInstance","functionDeclaration","needsExplicitExport","globalDeclaration","compileClass","addMemorySegment","alignment","i64_add","BLOCK","compileBlockStatement","BREAK","compileBreakStatement","CONTINUE","compileContinueStatement","DO","compileDoStatement","EMPTY","compileEmptyStatement","EXPRESSION","compileExpressionStatement","FOR","compileForStatement","IF","compileIfStatement","RETURN","compileReturnStatement","SWITCH","compileSwitchStatement","THROW","compileThrowStatement","TRY","compileTryStatement","WHILE","compileWhileStatement","addDebugLocation","stmt","stmtReturns","A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement","A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement","previousBreakLabel","previousContinueLabel","incrementor","alwaysReturns","ifTrueReturns","ifFalseReturns","tempLocal","cases","breaks","breakIndex","defaultIndex","case_","EqI32","currentBlock","fallsThrough","nextLabel","isKnownGlobal","initializers","init","_const_declarations_must_be_initialized","compileAssignmentWithValue","contextualType","shift","computeSmallIntegerShift","mask","computeSmallIntegerMask","isWasm64","conversionKind","wrapSmallIntegers","compileAssertionExpression","compileBinaryExpression","compileCallExpression","COMMA","compileCommaExpression","compileElementAccessExpression","FALSE","NULL","TRUE","compileIdentifierExpression","compileLiteralExpression","NEW","compileNewExpression","compileParenthesizedExpression","compilePropertyAccessExpression","TERNARY","compileTernaryExpression","UNARYPOSTFIX","compileUnaryPostfixExpression","UNARYPREFIX","compileUnaryPrefixExpression","convertExpression","precomputeExpression","funcRef","_BinaryenFunctionGetBody","fromType","mod","losesInformation","PromoteF32","DemoteF64","TruncF32ToI64","TruncF32ToI32","TruncF32ToU64","TruncF32ToU32","TruncF64ToI64","TruncF64ToI32","TruncF64ToU64","TruncF64ToU32","ConvertI64ToF32","ConvertU64ToF32","ConvertI32ToF32","ConvertU32ToF32","ConvertI64ToF64","ConvertU64ToF64","ConvertI32ToF64","ConvertU32ToF64","WrapI64","ExtendI32","ExtendU32","Conversion_from_type_0_to_1_possibly_loses_information_and_thus_requires_an_explicit_cast","compound","possiblyOverflows","operator","Token","LESSTHAN","LtI32","LtI64","LtU32","LtU64","LtF32","LtF64","GREATERTHAN","GtI32","GtI64","GtU32","GtU64","GtF32","GtF64","LESSTHAN_EQUALS","LeI32","LeI64","LeU32","LeU64","LeF32","LeF64","GREATERTHAN_EQUALS","GeI32","GeI64","GeU32","GeU64","GeF32","GeF64","EQUALS_EQUALS_EQUALS","EQUALS_EQUALS","EqI64","EXCLAMATION_EQUALS_EQUALS","EXCLAMATION_EQUALS","EQUALS","compileAssignment","PLUS_EQUALS","PLUS","AddI64","AddF32","AddF64","MINUS_EQUALS","MINUS","SubI32","SubI64","SubF32","SubF64","ASTERISK_EQUALS","ASTERISK","MulI32","MulI64","MulF32","MulF64","SLASH_EQUALS","SLASH","DivI32","DivI64","DivU32","DivU64","DivF32","DivF64","PERCENT_EQUALS","PERCENT","RemI32","RemI64","RemU32","RemU64","LESSTHAN_LESSTHAN_EQUALS","LESSTHAN_LESSTHAN","ShlI64","GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN","ShrI64","ShrU32","ShrU64","GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN_GREATERTHAN","AMPERSAND_EQUALS","AMPERSAND","AndI64","BAR_EQUALS","BAR","OrI32","OrI64","CARET_EQUALS","CARET","XorI32","XorI64","AMPERSAND_AMPERSAND","BAR_BAR","valueExpression","elementType","setterInstance","Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property","resolvedIndexedSet","valueWithCorrectType","tee","targetExpr","globalNativeType","isReadonly","elementNativeType","makeCall","getterInstance","resolvedIndexedGet","indexedSet","indexedSetName","elementExpr","elementExpression","Index_signature_in_type_0_only_permits_reading","Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures","functionPrototype","compileCall","numArguments","numArgumentsInclThis","argumentIndex","args","argumentExpressions","thisArg","operandIndex","Expected_at_least_0_arguments_but_got_1","expressions","exprs","compileGetConstant","A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums","implicitNegate","compileStaticArray","elementExpressions","floatValue","intValue","i64_sub","i64_is_i8","i64_is_i16","i64_is_i32","i64_is_u8","i64_is_u16","i64_is_u32","i64_is_bool","i64_is_f32","i64_to_f32","i64_is_f64","i64_to_f64","compileStaticString","stringValue","stringSegment","stringLength","stringBuffer","stringOffset","isStatic","Int32Array","Float32Array","Float64Array","thisExpr","compileAllocate","field","nativeSizeType","Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature","ifThen","ifElse","nativeOne","getValue","operand","PLUS_PLUS","toNativeOne","MINUS_MINUS","setValue","isReference","NegF32","NegF64","EXCLAMATION","TILDE","toNativeNegOne","TYPEOF","TypeKind","TypeFlags","nullableType","ceil","nonNullableType","asFunction","asNullable","kindOnly","setReusableModifiers","reusableModifiers","createModifiers","addModifier","modifier","getModifier","getFirstDecorator","mangleInternalName","asGlobal","VARIABLEDECLARATION","mangleInternalPath","setParent","nodes","setParentOpt","path_1","Node","createType","isNullable","TypeNode","createIdentifierExpression","IdentifierExpression","createArrayLiteralExpression","ArrayLiteralExpression","createAssertionExpression","assertionKind","AssertionExpression","createBinaryExpression","BinaryExpression","createCallExpression","typeArgs","CallExpression","createCommaExpression","CommaExpression","createConstructorExpression","ConstructorExpression","createElementAccessExpression","ElementAccessExpression","createFalseExpression","FalseExpression","createFloatLiteralExpression","FloatLiteralExpression","createIntegerLiteralExpression","IntegerLiteralExpression","createNewExpression","NewExpression","createNullExpression","NullExpression","createParenthesizedExpression","ParenthesizedExpression","createPropertyAccessExpression","PropertyAccessExpression","createRegexpLiteralExpression","pattern","RegexpLiteralExpression","patternFlags","createTernaryExpression","TernaryExpression","createStringLiteralExpression","StringLiteralExpression","createSuperExpression","SuperExpression","createThisExpression","ThisExpression","createTrueExpression","TrueExpression","createUnaryPostfixExpression","UnaryPostfixExpression","createUnaryPrefixExpression","UnaryPrefixExpression","createBlockStatement","BlockStatement","createBreakStatement","BreakStatement","createClassDeclaration","ClassDeclaration","createContinueStatement","ContinueStatement","createDecorator","Decorator","createDoStatement","DoStatement","createEmptyStatement","EmptyStatement","createEnumDeclaration","EnumDeclaration","createEnumValueDeclaration","EnumValueDeclaration","createExportStatement","ExportStatement","normalize","startsWith","createExportImportStatement","ExportImportStatement","createExportMember","elem","ExportMember","createExpressionStatement","ExpressionStatement","createIfStatement","IfStatement","createImportStatement","decls","ImportStatement","createImportStatementWithWildcard","createImportDeclaration","ImportDeclaration","createInterfaceDeclaration","InterfaceDeclaration","createFieldDeclaration","FieldDeclaration","createForStatement","ForStatement","createTypeParameter","TypeParameter","createParameter","parameterKind","createFunctionDeclaration","FunctionDeclaration","createMethodDeclaration","MethodDeclaration","createModifier","Modifier","createNamespaceDeclaration","NamespaceDeclaration","createReturnStatement","ReturnStatement","createSwitchStatement","SwitchStatement","createSwitchCase","SwitchCase","createThrowStatement","ThrowStatement","createTryStatement","catchVariable","catchStatements","finallyStatements","TryStatement","createTypeDeclaration","TypeDeclaration","createVariableStatement","VariableStatement","createVariableDeclaration","VariableDeclaration","createWhileStatement","WhileStatement","TYPE","TYPEPARAMETER","Expression","LiteralKind","LiteralExpression","AssertionKind","UnaryExpression","Statement","SourceKind","Source","tokenizer","sourceKind","ENTRY","LIBRARY","DeclarationStatement","cachedProgramLevelInternalName","cachedFileLevelInternalName","VariableLikeDeclarationStatement","DecoratorKind","DECORATOR","ENUMVALUEDECLARATION","EXPORTIMPORT","EXPORTMEMBER","IMPORTDECLARATION","ParameterKind","PARAMETER","MODIFIER","SWITCHCASE","fromKeyword","AS","ASYNC","AWAIT","CASE","CATCH","DEBUGGER","DEFAULT","DELETE","ELSE","EXTENDS","FINALLY","FROM","IMPLEMENTS","IN","INSTANCEOF","IS","KEYOF","MODULE","OF","PACKAGE","VAR","VOID","WITH","YIELD","INVALID","isAlsoIdentifier","token","a","pos","Tokenizer","tokenPos","markedPos","markedToken","markedTokenPos","nextToken","nextTokenOnNewLine","preferIdentifier","unsafeNext","maxCompoundLength","ENDOFFILE","STRINGLITERAL","OPENPAREN","CLOSEPAREN","ASTERISK_ASTERISK_EQUALS","ASTERISK_ASTERISK","isDecimalDigit","FLOATLITERAL","DOT_DOT_DOT","DOT","closed","_0_expected","testInteger","INTEGERLITERAL","COLON","SEMICOLON","EQUALS_GREATERTHAN","QUESTION","OPENBRACKET","CLOSEBRACKET","OPENBRACE","CLOSEBRACE","AT","isIdentifierStart","isKeywordCharacter","posBefore","isIdentifierPart","keywordText","keywordToken","isWhiteSpace","Invalid_character","peek","checkOnNewLine","tokenBefore","tokenPosBefore","skip","mark","reset","readIdentifier","quote","Unterminated_string_literal","readEscapeSequence","Unexpected_end_of_text","readExtendedUnicodeEscape","readUnicodeEscape","fromCharCode","readRegexpPattern","escaped","Unterminated_regular_expression_literal","readRegexpFlags","Invalid_regular_expression_flags","readInteger","readHexInteger","readBinaryInteger","readOctalInteger","isOctalDigit","Octal_literals_are_not_allowed_in_strict_mode","readDecimalInteger","i64_16","i64_mul","Hexadecimal_digit_expected","i64_10","Digit_expected","i64_8","Octal_digit_expected","i64_2","i64_1","Binary_digit_expected","readFloat","parseFloat","remain","value32","invalid","An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive","Unterminated_Unicode_escape_sequence","g","eval","window","isUnicodeIdentifierStart","isUnicodeIdentifierPart","lookupInUnicodeMap","map","mid","unicodeIdentifierStart","unicodeIdentifierPart","CharCode","separator","ipos","origin","dirname","binaryen","Binaryen","key","_malloc","_free","move_memory","dest","src","_memmove","HEAPU8","previousPrint","x","Long","fromBits","low","high","sub","mul","i64_div","div","i64_div_u","toUnsigned","toSigned","i64_rem","i64_rem_u","i64_and","and","i64_or","or","i64_xor","xor","i64_shl","shl","i64_shr","shr","shru","i64_not","not","fromInt","MIN_VALUE","minSafeF32","fromNumber","MIN_SAFE_INTEGER","maxSafeF32","MAX_SAFE_INTEGER","gte","lte","minSafeF64","maxSafeF64","Math","fround","toNumber","i64_to_string","unsigned","UnreachableError","captureStackTrace","stack","AssertionError","globalScope","defineProperties","writable","EPSILON","clz32","abs","max","min","floor","sqrt","trunc","isTrueish","fromCodePoint","radix","parseInt","compiler","NaN","Infinity","arg2","tempLocal0","tempLocal1","AbsF32","AbsF64","ClzI32","ClzI64","CtzI32","CtzI64","PopcntI32","PopcntI64","RotlI32","RotlI64","RotrI32","RotrI64","MaxF32","MaxF64","MinF32","MinF64","CeilF32","CeilF64","FloorF32","FloorF64","CopysignF32","CopysignF64","NearestF32","NearestF64","ReinterpretF32","ReinterpretF64","ReinterpretI32","ReinterpretI64","SqrtF32","SqrtF64","TruncF32","TruncF64","evaluateConstantOffset","Type_0_is_not_generic","CurrentMemory","GrowMemory","abort","compileAbort","cls","Implementation_0_must_match_the_signature_1","abortPrototype","stringType","abortInstance","isLong","obj","cachedObj","cache","UINT_CACHE","INT_CACHE","isNaN","UZERO","ZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","neg","TWO_PWR_32_DBL","lowBits","highBits","fromString","RangeError","indexOf","radixToPower","pow_dbl","power","fromValue","wasm","WebAssembly","Instance","__isLong__","pow","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","eq","radixLong","rem1","rem","remDiv","intval","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","equals","other","notEquals","neq","ne","lessThan","comp","lt","lessThanOrEqual","le","greaterThan","gt","greaterThanOrEqual","ge","compare","thisNeg","otherNeg","negate","addend","a48","a32","a16","a00","b48","b32","b16","b00","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","divide","divisor","div_u","div_s","approx","res","log2","log","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","parseFile","parser","parser_1","Parser","nextFile","nextDiagnostic","isInfo","isWarning","isError","createOptions","setTarget","setNoTreeShaking","setNoAssert","setNoMemory","setSourceMap","finish","decompile","decompiler","decompiler_1","Decompiler","formatDiagnostic","nativeTypeToType","Unreachable","functionId","decompileFunction","_BinaryenFunctionGetName","_BinaryenFunctionGetNumParams","_BinaryenFunctionGetParam","_BinaryenFunctionGetResult","Block","decompileExpression","nested","string","_BinaryenBlockGetName","_BinaryenBlockGetNumChildren","_BinaryenBlockGetChild","If","_BinaryenIfGetCondition","_BinaryenIfGetIfTrue","_BinaryenIfGetIfFalse","Loop","_BinaryenLoopGetName","_BinaryenLoopGetBody","Break","_BinaryenBreakGetCondition","_BinaryenBreakGetName","Switch","Call","CallImport","CallIndirect","SetLocal","_BinaryenSetLocalGetIndex","_BinaryenSetLocalGetValue","SetGlobal","Store","_BinaryenStoreGetOffset","_BinaryenStoreGetPtr","_BinaryenStoreGetValue","Select","_BinaryenSelectGetIfTrue","_BinaryenSelectGetIfFalse","_BinaryenSelectGetCondition","Drop","_BinaryenDropGetValue","Return","_BinaryenReturnGetValue","Host","_BinaryenHostGetOp","_BinaryenHostGetOperand","Nop","AtomicCmpxchg","AtomicRMW","AtomicWait","AtomicWake","determinePrecedenceStart","determinePrecedence","isRightAssociative","backlog","seenlog","tn","parseTopLevelStatement","isNamespaceMember","parseDecorator","Line_break_not_permitted_here","parseEnum","parseVariable","parseFunction","parseClass","parseNamespace","parseExportImport","parseImport","parseTypeDeclaration","parseExport","_0_modifier_cannot_be_used_here","parseStatement","Decorators_are_not_valid_here","clear","parseType","acceptParenthesized","suppressErrors","startPos","innerType","Identifier_expected","nullable","bracketStart","bracketRange","parseArguments","isDeclare","parseVariableDeclaration","parentModifiers","parentDecorators","Initializers_are_not_allowed_in_ambient_contexts","parseExpression","parseEnumValue","parseReturn","parseTypeParameters","Type_parameter_list_cannot_be_empty","typeParameter","parseTypeParameter","parseParameters","seenRest","seenOptional","reportedRest","param","parseParameter","A_rest_parameter_must_be_last_in_a_parameter_list","A_required_parameter_cannot_follow_an_optional_parameter","OPTIONAL","REST","isRest","isOptional","startRange","A_rest_parameter_cannot_be_optional","A_rest_parameter_cannot_have_an_initializer","Parameter_cannot_have_question_mark_and_initializer","isSetter","A_set_accessor_must_have_exactly_one_parameter","A_set_accessor_parameter_cannot_have_an_initializer","A_get_accessor_cannot_have_parameters","parseClassMember","parentIsDeclare","isConstructor","Type_parameters_cannot_appear_on_a_constructor_declaration","Type_annotation_cannot_appear_on_a_constructor_declaration","A_set_accessor_cannot_have_a_return_type_annotation","retMethod","Constructor_implementation_is_missing","retField","parseExportMember","asIdentifier","skipFrom","parseImportDeclaration","topLevel","parseBreak","parseContinue","parseDoStatement","parseForStatement","parseIfStatement","parseBlockStatement","A_return_statement_can_only_be_used_within_a_function_body","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseWhileStatement","parseExpressionStatement","elseStatement","parseSwitchCase","_case_or_default_expected","parseExpressionStart","The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access","regexpPattern","Expression_expected","tryParseTypeArgumentsBeforeArguments","precedence","nextPrecedence","commaExprs","propertyCall","Precedence"],"mappings":"CAAA,SAAAA,EAAAC,GACA,gBAAAC,UAAA,gBAAAC,QACAA,OAAAD,QAAAD,EAAAG,QAAA,aACA,kBAAAC,gBAAAC,IACAD,QAAA,YAAAJ,GACA,gBAAAC,SACAA,QAAA,eAAAD,EAAAG,QAAA,aAEAJ,EAAA,eAAAC,EAAAD,EAAA,WACC,mBAAAO,WAAAC,KAAA,SAAAC,GACD,MCAgB,UAAUC,GCN1B,QAAAC,GAAAC,GAGA,GAAAC,EAAAD,GACA,MAAAC,GAAAD,GAAAV,OAGA,IAAAC,GAAAU,EAAAD,IACAE,EAAAF,EACAG,GAAA,EACAb,WAUA,OANAQ,GAAAE,GAAAI,KAAAb,EAAAD,QAAAC,IAAAD,QAAAS,GAGAR,EAAAY,GAAA,EAGAZ,EAAAD,QAvBA,GAAAW,KA4DA,OAhCAF,GAAAM,EAAAP,EAGAC,EAAAO,EAAAL,EAGAF,EAAAQ,EAAA,SAAAjB,EAAAkB,EAAAC,GACAV,EAAAW,EAAApB,EAAAkB,IACAG,OAAAC,eAAAtB,EAAAkB,GACAK,cAAA,EACAC,YAAA,EACAC,IAAAN,KAMAV,EAAAiB,EAAA,SAAAzB,GACA,GAAAkB,GAAAlB,KAAA0B,WACA,WAA2B,MAAA1B,GAAA,SAC3B,WAAiC,MAAAA,GAEjC,OADAQ,GAAAQ,EAAAE,EAAA,IAAAA,GACAA,GAIAV,EAAAW,EAAA,SAAAQ,EAAAC,GAAsD,MAAAR,QAAAS,UAAAC,eAAAjB,KAAAc,EAAAC,IAGtDpB,EAAAuB,EAAA,GAGAvB,IAAAwB,EAAA,MDgBM,SAAUhC,EAAQD,EAASS,GAEjC,YEmyBA,SAAAyB,GAAsBC,GACpB,IAAKA,EAAK,MAAO,EAGjB,KAAK,GAFDC,GAAMC,gBAAgBF,EAAIG,QAC1BC,EAAMH,EACDxB,EAAI,EAAG4B,EAAIL,EAAIG,OAAQ1B,EAAI4B,IAAK5B,EACvC6B,MAAUF,IAAOJ,EAAIvB,GACvB,OAAOwB,GAGT,QAAAM,GAAuBC,GACrB,IAAKA,EAAM,MAAO,EAGlB,KAAK,GAFDP,GAAMC,gBAAgBM,EAAKL,QAAU,GACrCC,EAAMH,EACDxB,EAAI,EAAG4B,EAAIG,EAAKL,OAAQ1B,EAAI4B,IAAK5B,EAAG,CAC3C,GAAIgC,GAAMD,EAAK/B,EAEf6B,OAAUF,EAAyB,IAAdK,GACrBH,MAAUF,EAAM,EAAKK,GAAS,EAAK,KACnCH,MAAUF,EAAM,EAAKK,GAAQ,GAAM,KACnCH,MAAUF,EAAM,EAAKK,IAAQ,IAC7BL,GAAO,EAET,MAAOH,GAGT,QAAAS,GAA0BC,GAExB,IAAK,GADDC,GAAM,EACDnC,EAAI,EAAG4B,EAAIM,EAAIR,OAAQ1B,EAAI4B,IAAK5B,EAAG,CAC1C,GAAIoC,GAAIF,EAAIG,WAAWrC,EACnBoC,IAAK,OAAUA,GAAK,OAAUpC,EAAI,EAAI4B,IACxCQ,EAAI,QAAgB,KAAJA,IAAc,IAA6B,KAAtBF,EAAIG,aAAarC,IACpDoC,GAAK,MACLD,EAEFA,GADOC,GAAK,KACL,EACAA,GAAK,MACL,EACAA,GAAK,QACL,EACAA,GAAK,SACL,EAEA,EAEX,MAAOD,GAGT,QAAAG,GAAqBJ,GACnB,GAAW,MAAPA,EAAa,MAAO,EAGxB,KAAK,GAFDV,GAAMC,gBAAgBQ,EAAiBC,GAAO,GAC9CP,EAAMH,EACDxB,EAAI,EAAG4B,EAAIM,EAAIR,OAAQ1B,EAAI4B,IAAK5B,EAAG,CAC1C,GAAIoC,GAAIF,EAAIG,WAAWrC,EACnBoC,IAAK,OAAUA,GAAK,OAAUpC,EAAI,EAAI4B,IACxCQ,EAAI,QAAgB,KAAJA,IAAc,IAA6B,KAAtBF,EAAIG,aAAarC,IACpDoC,GAAK,IACPP,MAAUF,IAAOS,GACVA,GAAK,MACZP,MAAUF,IAAQ,IAASS,IAAM,GACjCP,MAAUF,IAAQ,IAAqB,GAAZS,IAClBA,GAAK,OACdP,MAAUF,IAAQ,IAASS,IAAM,IACjCP,MAAUF,IAAQ,IAASS,IAAO,EAAK,IACvCP,MAAUF,IAAQ,IAAqB,GAAZS,IAClBA,GAAK,SACdP,MAAUF,IAAQ,IAASS,IAAM,IACjCP,MAAUF,IAAQ,IAASS,IAAM,GAAM,IACvCP,MAAUF,IAAQ,IAASS,IAAO,EAAK,IACvCP,MAAUF,IAAQ,IAAqB,GAAZS,IAClBA,GAAK,UACdP,MAAUF,IAAQ,IAASS,IAAM,IACjCP,MAAUF,IAAQ,IAASS,IAAM,GAAM,IACvCP,MAAUF,IAAQ,IAASS,IAAM,GAAM,IACvCP,MAAUF,IAAQ,IAASS,IAAO,EAAK,IACvCP,MAAUF,IAAQ,IAAqB,GAAZS,KAE3BP,MAAUF,IAAQ,IAASS,IAAM,IACjCP,MAAUF,IAAQ,IAASS,IAAM,GAAM,IACvCP,MAAUF,IAAQ,IAASS,IAAM,GAAM,IACvCP,MAAUF,IAAQ,IAASS,IAAM,GAAM,IACvCP,MAAUF,IAAQ,IAASS,IAAO,EAAK,IACvCP,MAAUF,IAAQ,IAAqB,GAAZS,IAI/B,MADAP,OAAUF,EAAK,GACRH,EAGT,QAAAe,GAAwBf,GACtB,MACGgB,MAAShB,GACTgB,KAAShB,EAAM,IAAO,EACtBgB,KAAShB,EAAM,IAAM,GACrBgB,KAAShB,EAAM,IAAM,GAI1B,QAAAiB,GAA2BjB,EAAYE,GAErC,IAAK,GADDgB,GAAM,GAAIC,YAAWjB,GAChB1B,EAAW,EAAGA,EAAI0B,IAAU1B,EACnC0C,EAAI1C,GAAKwC,KAAShB,EAAMxB,EAC1B,OAAO0C,GAGT,QAAAE,GAA2BpB,GACzB,IAAKA,EAAK,MAAO,KAKjB,KAJA,GAEIqB,GACAC,EAASC,EAASC,EAASC,EAASC,EAHpCC,EAAM,GAAIC,OAIPP,EAAKL,KAAShB,MACR,IAALqB,GAINC,EAAuB,GAAlBN,KAAShB,KACK,MAAT,IAALqB,IAILE,EAAuB,GAAlBP,KAAShB,KACK,MAAT,IAALqB,GACHA,GAAY,GAALA,IAAY,GAAOC,GAAM,EAAKC,GAErCC,EAAuB,GAAlBR,KAAShB,KACK,MAAT,IAALqB,GACHA,GAAY,EAALA,IAAW,GAAOC,GAAM,GAAOC,GAAM,EAAKC,GAEjDC,EAAuB,GAAlBT,KAAShB,KACK,MAAT,IAALqB,GACHA,GAAY,EAALA,IAAW,GAAOC,GAAM,GAAOC,GAAM,GAAOC,GAAM,EAAKC,GAE9DC,EAAuB,GAAlBV,KAAShB,KACdqB,GAAY,EAALA,IAAW,GAAOC,GAAM,GAAOC,GAAM,GAAOC,GAAM,GAAOC,GAAM,EAAKC,MAhB/EC,EAAIE,MAAY,GAALR,IAAY,EAAKC,IAL5BK,EAAIE,KAAKR,EAkCb,OAAOS,QAAOC,eAAeJ,GFn7B/B1C,OAAOC,eAAetB,EAAS,cAAgBoE,OAAO,GEjFtD,IAaYC,GAbZC,EAAA7D,EAAA,IAaA,SAAY4D,GACVA,IAAA,KAAOE,qBAAmB,OAC1BF,IAAA,IAAMG,sBAAoB,MAC1BH,IAAA,IAAMI,sBAAoB,MAC1BJ,IAAA,IAAMK,wBAAsB,MAC5BL,IAAA,IAAOM,wBAAsB,MAC7BN,IAAA,YAAcO,4BAA0B,cACxCP,IAAA,KAAOQ,qBAAmB,QAPhBR,EAAArE,EAAAqE,aAAArE,EAAAqE,eAUZ,IAAYS,IAAZ,SAAYA,GACVA,IAAA,QAAUC,sBAAoB,UAC9BD,IAAA,MAAQE,oBAAkB,QAC1BF,IAAA,GAAKG,iBAAe,KACpBH,IAAA,KAAOI,mBAAiB,OACxBJ,IAAA,MAAQK,oBAAkB,QAC1BL,IAAA,OAASM,qBAAmB,SAC5BN,IAAA,KAAOO,mBAAiB,OACxBP,IAAA,WAAaQ,yBAAuB,aACpCR,IAAA,aAAeS,2BAAyB,eACxCT,IAAA,SAAWU,uBAAqB,WAChCV,IAAA,SAAWW,uBAAqB,WAChCX,IAAA,UAAYY,wBAAsB,YAClCZ,IAAA,UAAYa,wBAAsB,YAClCb,IAAA,KAAOc,mBAAiB,OACxBd,IAAA,MAAQe,oBAAkB,QAC1Bf,IAAA,MAAQgB,oBAAkB,QAC1BhB,IAAA,MAAQiB,oBAAkB,QAC1BjB,IAAA,OAASkB,qBAAmB,SAC5BlB,IAAA,OAASmB,qBAAmB,SAC5BnB,IAAA,KAAOoB,mBAAiB,OACxBpB,IAAA,OAASqB,qBAAmB,SAC5BrB,IAAA,KAAOsB,mBAAiB,OACxBtB,IAAA,IAAMuB,kBAAgB,MACtBvB,IAAA,YAAcwB,0BAAwB,cACtCxB,IAAA,cAAgByB,4BAA0B,gBAC1CzB,IAAA,UAAY0B,wBAAsB,YAClC1B,IAAA,WAAa2B,yBAAuB,aACpC3B,IAAA,WAAa4B,yBAAuB,cA5B1B5B,EAAA9E,EAAA8E,eAAA9E,EAAA8E,mBA+BZ,SAAY6B,GACVA,IAAA,OAASC,qBAAmB,SAC5BD,IAAA,OAASE,qBAAmB,SAC5BF,IAAA,UAAYG,wBAAsB,YAClCH,IAAA,OAASI,uBAAqB,SAC9BJ,IAAA,OAASK,uBAAqB,SAC9BL,IAAA,QAAUM,wBAAsB,UAChCN,IAAA,SAAWO,yBAAuB,WAClCP,IAAA,SAAWQ,yBAAuB,WAClCR,IAAA,WAAaS,2BAAyB,aACtCT,IAAA,QAAUU,wBAAsB,UAChCV,IAAA,OAASW,qBAAmB,SAC5BX,IAAA,OAASY,qBAAmB,SAC5BZ,IAAA,OAASa,qBAAmB,SAC5Bb,IAAA,UAAYc,wBAAsB,YAClCd,IAAA,OAASe,uBAAqB,SAC9Bf,IAAA,OAASgB,uBAAqB,SAC9BhB,IAAA,QAAUiB,wBAAsB,UAChCjB,IAAA,SAAWkB,yBAAuB,WAClClB,IAAA,SAAWmB,yBAAuB,WAClCnB,IAAA,WAAaoB,2BAAyB,aACtCpB,IAAA,QAAUqB,wBAAsB,UAChCrB,IAAA,OAASsB,qBAAmB,SAC5BtB,IAAA,UAAYuB,yBAAuB,YACnCvB,IAAA,UAAYwB,yBAAuB,YACnCxB,IAAA,QAAUyB,sBAAoB,UAC9BzB,IAAA,cAAgB0B,iCAA+B,gBAC/C1B,IAAA,cAAgB2B,iCAA+B,gBAC/C3B,IAAA,cAAgB4B,iCAA+B,gBAC/C5B,IAAA,cAAgB6B,iCAA+B,gBAC/C7B,IAAA,cAAgB8B,iCAA+B,gBAC/C9B,IAAA,cAAgB+B,iCAA+B,gBAC/C/B,IAAA,cAAgBgC,iCAA+B,gBAC/ChC,IAAA,cAAgBiC,iCAA+B,gBAC/CjC,IAAA,eAAiBkC,+BAA6B,iBAC9ClC,IAAA,eAAiBmC,+BAA6B,iBAC9CnC,IAAA,gBAAkBoC,mCAAiC,kBACnDpC,IAAA,gBAAkBqC,mCAAiC,kBACnDrC,IAAA,gBAAkBsC,mCAAiC,kBACnDtC,IAAA,gBAAkBuC,mCAAiC,kBACnDvC,IAAA,gBAAkBwC,mCAAiC,kBACnDxC,IAAA,gBAAkByC,mCAAiC,kBACnDzC,IAAA,gBAAkB0C,mCAAiC,kBACnD1C,IAAA,gBAAkB2C,mCAAiC,kBACnD3C,IAAA,WAAa4C,2BAAyB,aACtC5C,IAAA,UAAY6C,0BAAwB,YACpC7C,IAAA,eAAiB8C,6BAA2B,iBAC5C9C,IAAA,eAAiB+C,6BAA2B,kBA/ClC1J,EAAA2G,UAAA3G,EAAA2G,cAmEZ,SAAYgD,GACVA,IAAA,OAASC,qBAAmB,SAC5BD,IAAA,OAASE,qBAAmB,SAC5BF,IAAA,OAASG,qBAAmB,SAC5BH,IAAA,OAASI,sBAAoB,SAC7BJ,IAAA,OAASK,sBAAoB,SAC7BL,IAAA,OAASM,sBAAoB,SAC7BN,IAAA,OAASO,sBAAoB,SAC7BP,IAAA,OAASQ,qBAAmB,SAC5BR,IAAA,MAAQS,oBAAkB,QAC1BT,IAAA,OAASU,qBAAmB,SAC5BV,IAAA,OAASW,qBAAmB,SAC5BX,IAAA,OAASY,sBAAoB,SAC7BZ,IAAA,OAASa,sBAAoB,SAC7Bb,IAAA,QAAUc,sBAAoB,UAC9Bd,IAAA,QAAUe,sBAAoB,UAC9Bf,IAAA,MAAQgB,oBAAkB,QAC1BhB,IAAA,MAAQiB,oBAAkB,QAC1BjB,IAAA,MAAQkB,qBAAmB,QAC3BlB,IAAA,MAAQmB,qBAAmB,QAC3BnB,IAAA,MAAQoB,qBAAmB,QAC3BpB,IAAA,MAAQqB,qBAAmB,QAC3BrB,IAAA,MAAQsB,qBAAmB,QAC3BtB,IAAA,MAAQuB,qBAAmB,QAC3BvB,IAAA,MAAQwB,qBAAmB,QAC3BxB,IAAA,MAAQyB,qBAAmB,QAC3BzB,IAAA,OAAS0B,qBAAmB,SAC5B1B,IAAA,OAAS2B,qBAAmB,SAC5B3B,IAAA,OAAS4B,qBAAmB,SAC5B5B,IAAA,OAAS6B,sBAAoB,SAC7B7B,IAAA,OAAS8B,sBAAoB,SAC7B9B,IAAA,OAAS+B,sBAAoB,SAC7B/B,IAAA,OAASgC,sBAAoB,SAC7BhC,IAAA,OAASiC,qBAAmB,SAC5BjC,IAAA,MAAQkC,oBAAkB,QAC1BlC,IAAA,OAASmC,qBAAmB,SAC5BnC,IAAA,OAASoC,qBAAmB,SAC5BpC,IAAA,OAASqC,sBAAoB,SAC7BrC,IAAA,OAASsC,sBAAoB,SAC7BtC,IAAA,QAAUuC,sBAAoB,UAC9BvC,IAAA,QAAUwC,sBAAoB,UAC9BxC,IAAA,MAAQyC,oBAAkB,QAC1BzC,IAAA,MAAQ0C,oBAAkB,QAC1B1C,IAAA,MAAQ2C,qBAAmB,QAC3B3C,IAAA,MAAQ4C,qBAAmB,QAC3B5C,IAAA,MAAQ6C,qBAAmB,QAC3B7C,IAAA,MAAQ8C,qBAAmB,QAC3B9C,IAAA,MAAQ+C,qBAAmB,QAC3B/C,IAAA,MAAQgD,qBAAmB,QAC3BhD,IAAA,MAAQiD,qBAAmB,QAC3BjD,IAAA,MAAQkD,qBAAmB,QAC3BlD,IAAA,OAASmD,uBAAqB,SAC9BnD,IAAA,OAASoD,uBAAqB,SAC9BpD,IAAA,OAASqD,uBAAqB,SAC9BrD,IAAA,OAASsD,uBAAqB,SAC9BtD,IAAA,YAAcuD,4BAA0B,cACxCvD,IAAA,OAASwD,uBAAqB,SAC9BxD,IAAA,OAASyD,uBAAqB,SAC9BzD,IAAA,MAAQ0D,sBAAoB,QAC5B1D,IAAA,MAAQ2D,sBAAoB,QAC5B3D,IAAA,MAAQ4D,sBAAoB,QAC5B5D,IAAA,MAAQ6D,sBAAoB,QAC5B7D,IAAA,MAAQ8D,sBAAoB,QAC5B9D,IAAA,MAAQ+D,sBAAoB,QAC5B/D,IAAA,OAASgE,uBAAqB,SAC9BhE,IAAA,OAASiE,uBAAqB,SAC9BjE,IAAA,OAASkE,uBAAqB,SAC9BlE,IAAA,OAASmE,uBAAqB,SAC9BnE,IAAA,YAAcoE,4BAA0B,cACxCpE,IAAA,OAASqE,uBAAqB,SAC9BrE,IAAA,OAASsE,uBAAqB,SAC9BtE,IAAA,MAAQuE,sBAAoB,QAC5BvE,IAAA,MAAQwE,sBAAoB,QAC5BxE,IAAA,MAAQyE,sBAAoB,QAC5BzE,IAAA,MAAQ0E,sBAAoB,QAC5B1E,IAAA,MAAQ2E,sBAAoB,QAC5B3E,IAAA,MAAQ4E,sBAAoB,SA5ElBvO,EAAA2J,WAAA3J,EAAA2J,eA+EZ,SAAY6E,GACVA,IAAA,SAAWC,qBAAmB,WAC9BD,IAAA,cAAgBE,0BAAwB,gBACxCF,IAAA,WAAaG,uBAAqB,aAClCH,IAAA,WAAaI,uBAAqB,cAJxB5O,EAAAwO,SAAAxO,EAAAwO,aAWZ,SAAYK,GACVA,IAAA,IAAMC,yBAAuB,MAC7BD,IAAA,IAAME,yBAAuB,MAC7BF,IAAA,IAAMG,yBAAuB,MAC7BH,IAAA,GAAKI,wBAAsB,KAC3BJ,IAAA,IAAMK,yBAAuB,MAC7BL,IAAA,KAAOM,0BAAwB,QANrBnP,EAAA6O,cAAA7O,EAAA6O,gBASZ,IAAAO,GAAA,mBAAAA,MAWA,MANSA,GAAAC,OAAP,SAAcC,EAAoBC,GAChC,GAAIC,GAAU,GAAIJ,EAGlB,OAFAI,GAAQF,OAASA,EACjBE,EAAQD,OAASA,EACVC,GAEXJ,IAXapP,GAAAoP,eAab,IAAAK,GAAA,WA2BE,QAAAA,MA0jBF,MA7kBSA,GAAAJ,OAAP,WACE,GAAIpP,GAAS,GAAIwP,EAGjB,OAFAxP,GAAOyP,IAAMC,wBACb1P,EAAO2P,IAAMvN,gBAAgB,IACtBpC,GAGFwP,EAAAI,WAAP,SAAkBP,GAChB,GAAIQ,GAAO5N,EAAaoN,EACxB,KACE,GAAIrP,GAAS,GAAIwP,EAGhB,OAFDxP,GAAOyP,IAAMK,oBAAoBD,EAAMR,EAAOhN,QAC9CrC,EAAO2P,IAAMvN,gBAAgB,IACrBpC,EF+DN,QE7DF+P,YAAYC,WAAkBH,MAQlCL,EAAA3N,UAAAoO,gBAAA,SAAgBhP,EAAciP,EAAoBC,GAChD,GAAIC,GAAOnN,EAAYhC,GACnB4O,EAAOpN,EAAc0N,EACzB,KACE,MAAOE,0BAAyBhQ,KAAKoP,IAAKW,EAAMF,EAAQL,EAAMM,EAAW9N,QF4DvE,QE1DF0N,YAAYF,GACZE,YAAYK,KAIhBZ,EAAA3N,UAAAyO,2BAAA,SAA2BJ,EAAoBC,GAC7C,GAAIN,GAAOpN,EAAc0N,EACzB,KACE,MAAOI,qCAAoClQ,KAAKoP,IAAKS,EAAQL,EAAMM,EAAW9N,QF4D5E,QE1DF0N,YAAYF,KAMhBL,EAAA3N,UAAA2O,UAAA,SAAUrM,GACR,GAAIwL,GAAMtP,KAAKsP,GAEf,OADAc,uBAAsBd,EAAKxL,GACpBuM,eAAerQ,KAAKoP,IAAKE,IAGlCH,EAAA3N,UAAA8O,UAAA,SAAUC,EAASC,OAAA,KAAAA,MAAA,EACjB,IAAIlB,GAAMtP,KAAKsP,GAEf,OADAmB,uBAAsBnB,EAAKiB,EAAIC,GACxBH,eAAerQ,KAAKoP,IAAKE,IAGlCH,EAAA3N,UAAAkP,UAAA,SAAU5M,GACR,GAAIwL,GAAMtP,KAAKsP,GAEf,OADAqB,yBAAwBrB,EAAKxL,GACtBuM,eAAerQ,KAAKoP,IAAKE,IAGlCH,EAAA3N,UAAAoP,UAAA,SAAU9M,GACR,GAAIwL,GAAMtP,KAAKsP,GAEf,OADAuB,yBAAwBvB,EAAKxL,GACtBuM,eAAerQ,KAAKoP,IAAKE,IAGlCH,EAAA3N,UAAAsP,YAAA,SAAYC,EAAaC,GACvB,MAAOC,gBAAejR,KAAKoP,IAAK2B,EAAIC,IAGtC7B,EAAA3N,UAAA0P,aAAA,SAAaH,EAAcI,EAAqBC,GAC9C,MAAOC,iBAAgBrR,KAAKoP,IAAK2B,EAAII,EAAMC,IAG7CjC,EAAA3N,UAAA8P,WAAA,SAAWP,EAAYnQ,EAA4B2Q,OAA5B,KAAA3Q,MAAA,UAA4B,KAAA2Q,MAAA,KACjD,IAAIxB,GAAOnN,EAAYhC,GACnB4O,EAAOpN,EAAcmP,EACzB,KACE,MAAOC,eAAcxR,KAAKoP,IAAK2B,EAAIhB,EAAMP,EAAM+B,EAA6BA,EAAUvP,OAAS,GFwD7F,QEtDF0N,YAAYF,GACZE,YAAYK,KAIhBZ,EAAA3N,UAAAiQ,eAAA,SAAeC,EAAYC,GACzB,MAAOC,mBAAkB5R,KAAKoP,IAAKsC,EAAOC,IAG5CxC,EAAA3N,UAAAqQ,eAAA,SAAeH,EAAY5N,GACzB,MAAOgO,mBAAkB9R,KAAKoP,IAAKsC,EAAO5N,IAG5CqL,EAAA3N,UAAAuQ,gBAAA,SAAgBnR,EAAc+Q,GAC5B,GAAI5B,GAAOnN,EAAYhC,EACvB,KACE,MAAOoR,oBAAmBhS,KAAKoP,IAAKW,EAAM4B,GFsDxC,QEpDFjC,YAAYK,KAIhBZ,EAAA3N,UAAAyQ,WAAA,SAAWC,EAAcC,EAAcrQ,EAAoB6P,EAAkB1C,GAC3E,WAD2E,KAAAA,MAAA,GACpEmD,cAAcpS,KAAKoP,IAAK8C,EAAOC,EAAS,EAAI,EAAGlD,EAA6BiD,EAAOP,EAAM7P,IAGlGqN,EAAA3N,UAAA6Q,YAAA,SAAYH,EAAcpQ,EAAoBgC,EAAsB6N,EAAkB1C,GACpF,WADoF,KAAAA,MAAA,GAC7EqD,eAAetS,KAAKoP,IAAK8C,EAAOjD,EAA6BiD,EAAOpQ,EAAKgC,EAAO6N,IAGzFxC,EAAA3N,UAAA+Q,iBAAA,SAAiBL,EAAcpQ,EAAoB6P,EAAkB1C,GACnE,WADmE,KAAAA,MAAA,GAC5DuD,oBAAoBxS,KAAKoP,IAAK8C,EAAOjD,EAAQ0C,EAAM7P,IAG5DqN,EAAA3N,UAAAiR,kBAAA,SAAkBP,EAAcpQ,EAAoBgC,EAAsB6N,EAAkB1C,GAC1F,WAD0F,KAAAA,MAAA,GACnFyD,qBAAqB1S,KAAKoP,IAAK8C,EAAOjD,EAAQnN,EAAKgC,EAAO6N,IAGnExC,EAAA3N,UAAAmR,gBAAA,SAAgB5B,EAAiBmB,EAAcjD,EAAenN,EAAoBgC,EAAsB6N,GACtG,MAAOiB,oBAAmB5S,KAAKoP,IAAK2B,EAAImB,EAAOjD,EAAQnN,EAAKgC,EAAO6N,IAGrExC,EAAA3N,UAAAqR,oBAAA,SAAoBX,EAAcjD,EAAenN,EAAoBgR,EAAyBC,EAA4BpB,GACxH,MAAOqB,wBAAuBhT,KAAKoP,IAAK8C,EAAOjD,EAAQnN,EAAKgR,EAAUC,EAAapB,IAGrFxC,EAAA3N,UAAAyR,iBAAA,SAAiBnR,EAAoBgR,EAAyBI,EAAwBC,GACpF,MAAOC,qBAAoBpT,KAAKoP,IAAKtN,EAAKgR,EAAUI,EAASC,IAG/DhE,EAAA3N,UAAA6R,iBAAA,SAAiBvR,EAAoBwR,GACnC,MAAOC,qBAAoBvT,KAAKoP,IAAKtN,EAAKwR,IAK5CnE,EAAA3N,UAAAgS,eAAA,SAAe9B,EAAc5N,GAC3B,MAAO2P,mBAAkBzT,KAAKoP,IAAKsC,EAAO5N,IAG5CqL,EAAA3N,UAAAkS,gBAAA,SAAgB9S,EAAckD,GAC5B,GAAIiM,GAAOnN,EAAYhC,EACvB,KACE,MAAO+S,oBAAmB3T,KAAKoP,IAAKW,EAAMjM,GFgDxC,QE9CF4L,YAAYK,KAIhBZ,EAAA3N,UAAAoS,YAAA,SAAYC,EAAsBC,EAA2BnC,OAAA,KAAAA,MAAmB5N,EAAWgQ,KACzF,IAAIhE,GAAOnN,EAAYiR,GACnBrE,EAAOpN,EAAc0R,EACzB,KACE,MAAOE,gBAAehU,KAAKoP,IAAKW,EAAMP,EAAMsE,EAAS9R,OAAQ2P,GFiD3D,QE/CFjC,YAAYF,GACZE,YAAYK,KAIhBZ,EAAA3N,UAAAyS,YAAA,SAAYJ,EAAsBK,EAA8BpQ,OAA9B,KAAAoQ,MAAA,OAA8B,KAAApQ,MAAA,EAC9D,IAAIiM,GAAOnN,EAAYiR,EACvB,KACE,MAAOM,gBAAenU,KAAKoP,IAAKW,EAAMmE,EAAWpQ,GFmD/C,QEjDF4L,YAAYK,KAIhBZ,EAAA3N,UAAA4S,WAAA,SAAWC,GACT,MAAOC,eAActU,KAAKoP,IAAKiF,IAGjClF,EAAA3N,UAAA+S,WAAA,SAAWV,EAAsBW,GAC/B,GAAIzE,GAAOnN,EAAYiR,EACvB,KACE,MAAOY,eAAczU,KAAKoP,IAAKW,EAAMyE,GFkDnC,QEhDF9E,YAAYK,KAIhBZ,EAAA3N,UAAAkT,SAAA,SAASR,EAA0BS,EAAuBC,GACxD,WADwD,KAAAA,MAAA,GACjDC,YAAY7U,KAAKoP,IAAK8E,EAAWS,EAAQC,IAGlDzF,EAAA3N,UAAAsT,UAAA,WACE,MAAOC,cAAa/U,KAAKoP,MAG3BD,EAAA3N,UAAAwT,aAAA,SAAaX,GACX,WADW,KAAAA,MAAA,GACJY,gBAAgBjV,KAAKoP,IAAKiF,IAGnClF,EAAA3N,UAAA0T,aAAA,SAAaP,EAAuBC,EAAwBV,GAC1D,MAAOiB,iBAAgBnV,KAAKoP,IAAK8E,EAAWS,EAAQC,IAGtDzF,EAAA3N,UAAA4T,aAAA,SAAaC,EAAiBC,EAA4BpB,EAA0BpQ,OAAA,KAAAA,MAAA,EAElF,KAAK,GADDyR,GAAO,GAAI7R,OAAa2R,EAAMrT,QACzB1B,EAAI,EAAG4B,EAASmT,EAAMrT,OAAQ1B,EAAI4B,IAAK5B,EAC9CiV,EAAKjV,GAAKsC,EAAYyS,EAAM/U,GAC9B,IAAIkP,GAAOpN,EAAcmT,GACrBxF,EAAOnN,EAAY0S,EACvB,KACE,MAAOE,iBAAgBxV,KAAKoP,IAAKI,EAAMtN,EAAG6N,EAAMmE,EAAWpQ,GFiDzD,QE7CF,IAFA4L,YAAYK,GACZL,YAAYF,GACPlP,EAAI4B,EAAI,EAAG5B,GAAK,IAAKA,EAAGoP,YAAY6F,EAAKjV,MAIlD6O,EAAA3N,UAAAiU,WAAA,SAAWC,EAAgBnE,EAAkCoE,GAC3D,GAAI5F,GAAOnN,EAAY8S,GACnBlG,EAAOpN,EAAcmP,EACzB,KACE,MAAOqE,eAAc5V,KAAKoP,IAAKW,EAAMP,EAAM+B,GAAYA,EAASvP,QAAU,EAAG2T,GFkD3E,QEhDFjG,YAAYF,GACZE,YAAYK,KAIhBZ,EAAA3N,UAAAqU,iBAAA,SAAiBH,EAAgBnE,EAAkCoE,GACjE,GAAI5F,GAAOnN,EAAY8S,GACnBlG,EAAOpN,EAAcmP,EACzB,KACE,MAAOuE,qBAAoB9V,KAAKoP,IAAKW,EAAMP,EAAM+B,GAAYA,EAASvP,QAAU,EAAG2T,GFkDjF,QEhDFjG,YAAYF,GACZE,YAAYK,KAIhBZ,EAAA3N,UAAAuU,kBAAA,WACE,MAAOC,sBAAqBhW,KAAKoP,MAKnCD,EAAA3N,UAAAyU,UAAA,SAAUrV,EAAc+Q,EAAkBuE,EAAeC,GACvD,GAAIpG,GAAOnN,EAAYhC,EACvB,KACE,MAAOwV,oBAAmBpW,KAAKoP,IAAKW,EAAM4B,EAAMuE,EAAU,EAAI,EAAGC,GFgD/D,QE9CFzG,YAAYK,KAIhBZ,EAAA3N,UAAA6U,YAAA,SAAYzV,EAAc+Q,EAAuB2E,EAAwB9B,GACvE,GAAIzE,GAAOnN,EAAYhC,GACnB4O,EAAOpN,EAAckU,EACzB,KACE,MAAOC,sBAAqBvW,KAAKoP,IAAKW,EAAM4B,EAAMnC,EAAM8G,EAAStU,OAAQwS,GFgDvE,QE9CF9E,YAAYF,GACZE,YAAYK,KAIhBZ,EAAA3N,UAAAgV,eAAA,SAAe5V,GACb,GAAImP,GAAOnN,EAAYhC,EACvB,KACE6V,wBAAwBzW,KAAKoP,IAAKW,GFgDhC,QE9CFL,YAAYK,KAIhBZ,EAAA3N,UAAAkV,kBAAA,SAAkBC,EAAsBC,GACtC,GAAIC,GAAQjU,EAAY+T,GACpBG,EAAQlU,EAAYgU,EACxB,KACE,MAAOG,4BAA2B/W,KAAKoP,IAAKyH,EAAOC,GFgDjD,QE9CFpH,YAAYoH,GACZpH,YAAYmH,KAIhB1H,EAAA3N,UAAAwV,eAAA,SAAeL,EAAsBC,GACnC,GAAIC,GAAQjU,EAAY+T,GACpBG,EAAQlU,EAAYgU,EACxB,KACE,MAAOK,yBAAwBjX,KAAKoP,IAAKyH,EAAOC,GFgD9C,QE9CFpH,YAAYoH,GACZpH,YAAYmH,KAIhB1H,EAAA3N,UAAA0V,gBAAA,SAAgBP,EAAsBC,GACpC,GAAIC,GAAQjU,EAAY+T,GACpBG,EAAQlU,EAAYgU,EACxB,KACE,MAAOO,0BAAyBnX,KAAKoP,IAAKyH,EAAOC,GFgD/C,QE9CFpH,YAAYoH,GACZpH,YAAYmH,KAIhB1H,EAAA3N,UAAA4V,gBAAA,SAAgBT,EAAsBC,GACpC,GAAIC,GAAQjU,EAAY+T,GACpBG,EAAQlU,EAAYgU,EACxB,KACE,MAAOS,0BAAyBrX,KAAKoP,IAAKyH,EAAOC,GFgD/C,QE9CFpH,YAAYoH,GACZpH,YAAYmH,KAIhB1H,EAAA3N,UAAA8V,aAAA,SAAaV,GACX,GAAI7G,GAAOnN,EAAYgU,EACvB,KACEW,sBAAsBvX,KAAKoP,IAAKW,GFgD9B,QE9CFL,YAAYK,KAIhBZ,EAAA3N,UAAAgW,kBAAA,SAAkBb,EAAsBc,EAA4BC,EAA0BC,GAC5F,GAAId,GAAQjU,EAAY+T,GACpBG,EAAQlU,EAAY6U,GACpBG,EAAQhV,EAAY8U,EACxB,KACE,MAAOG,4BAA2B7X,KAAKoP,IAAKyH,EAAOC,EAAOc,EAAOD,GFgD/D,QE9CFjI,YAAYkI,GACZlI,YAAYoH,GACZpH,YAAYmH,KAIhB1H,EAAA3N,UAAAsW,eAAA,SAAenB,EAAsBc,EAA4BC,GAC/D,GAAIb,GAAQjU,EAAY+T,GACpBG,EAAQlU,EAAY6U,GACpBG,EAAQhV,EAAY8U,EACxB,KACE,MAAOK,yBAAwB/X,KAAKoP,IAAKyH,EAAOC,EAAOc,GFgDrD,QE9CFlI,YAAYkI,GACZlI,YAAYoH,GACZpH,YAAYmH,KAIhB1H,EAAA3N,UAAAwW,gBAAA,SAAgBrB,EAAsBc,EAA4BC,GAChE,GAAIb,GAAQjU,EAAY+T,GACpBG,EAAQlU,EAAY6U,GACpBG,EAAQhV,EAAY8U,EACxB,KACE,MAAOO,0BAAyBjY,KAAKoP,IAAKyH,EAAOC,EAAOc,GFgDtD,QE9CFlI,YAAYkI,GACZlI,YAAYoH,GACZpH,YAAYmH,KAIhB1H,EAAA3N,UAAA0W,gBAAA,SAAgBvB,EAAsBc,EAA4BC,EAA0BS,GAC1F,GAAItB,GAAQjU,EAAY+T,GACpBG,EAAQlU,EAAY6U,GACpBG,EAAQhV,EAAY8U,EACxB,KACE,MAAOU,0BAAyBpY,KAAKoP,IAAKyH,EAAOC,EAAOc,EAAOO,GFgD7D,QE9CFzI,YAAYkI,GACZlI,YAAYoH,GACZpH,YAAYmH,KAIhB1H,EAAA3N,UAAA6W,aAAA,SAAa1B,GACX,GAAI5G,GAAOnN,EAAY+T,EACvB,KACE2B,sBAAsBtY,KAAKoP,IAAKW,GFgD9B,QE9CFL,YAAYK,KAIhBZ,EAAA3N,UAAA+W,UAAA,SAAUC,EAAgBC,EAAgBC,EAA2BhD,EAAgBiD,OAAA,KAAAA,MAAA,KAMnF,KAAK,GALD5I,GAAOnN,EAAY+V,GACnBzW,EAAIwW,EAAS1W,OACb4W,EAAO,GAAIlV,OAAaxB,GACxB2W,EAAO,GAAInV,OAAqBxB,GAChC4W,EAAO,GAAIpV,OAAaxB,GACnB5B,EAAI,EAAGA,EAAI4B,IAAK5B,EAAG,CAC1B,GAAI0O,GAAS0J,EAASpY,GAAG0O,OACrBC,EAASyJ,EAASpY,GAAG2O,MACzB2J,GAAKtY,GAAKsB,EAAaoN,GACvB6J,EAAKvY,GAAKoV,GAAU1R,EAAA+U,OAAOC,OACvBhZ,KAAKsQ,UAAU2I,QAAQhK,GAASiK,SAASjK,IACzCjP,KAAKmQ,UAAU8I,QAAQhK,IAC3B6J,EAAKxY,GAAK0O,EAAOhN,OAEnB,GAAImX,GAAQ/W,EAAcwW,GACtBQ,EAAQhX,EAAcyW,GACtBQ,EAAQjX,EAAc0W,EAC1B,KACEQ,mBAAmBtZ,KAAKoP,IAAKoJ,EAASC,EAAS1I,EAAMoJ,EAAOC,EAAOC,EAAOnX,GFiDxE,QE5CF,IAHAwN,YAAY2J,GACZ3J,YAAY0J,GACZ1J,YAAYyJ,GACP7Y,EAAI4B,EAAI,EAAG5B,GAAK,IAAKA,EAAGoP,YAAYkJ,EAAKtY,GAC9CoP,aAAYK,KAIhBZ,EAAA3N,UAAA+X,iBAAA,SAAiBC,GACf,GAAIhK,GAAOpN,EAAcoX,EACzB,KACEC,0BAA0BzZ,KAAKoP,IAAKI,EAAMgK,EAAMxX,QFkD9C,QEhDF0N,YAAYF,KAIhBL,EAAA3N,UAAAkY,SAAA,SAASC,GACPC,kBAAkB5Z,KAAKoP,IAAKuK,IAG9BxK,EAAA3N,UAAAqY,iBAAA,SAAiBC,OAAA,KAAAA,MAAA,GACfC,0BAA0BD,IAG5B3K,EAAA3N,UAAAwY,eAAA,SAAeF,OAAA,KAAAA,MAAA,GACbG,wBAAwBH,IAG1B3K,EAAA3N,UAAA0Y,aAAA,SAAaC,OAAA,KAAAA,OAAA,GACXC,sBAAsBD,IAGxBhL,EAAA3N,UAAA6Y,SAAA,SAASV,OAAA,KAAAA,MAAA,GACHA,EACFW,0BAA0BX,EAAM3Z,KAAKoP,KAErCmL,wBAAwBva,KAAKoP,MAIjCD,EAAA3N,UAAAgZ,UAAA,SAAUC,EAAkBd,OAAA,KAAAA,MAAA,EAG1B,KAAK,GAFDzX,GAAIuY,EAAOzY,OACXqT,EAAQ,GAAI3R,OAAaxB,GACpB5B,EAAI,EAAGA,EAAI4B,IAAK5B,EACvB+U,EAAM/U,GAAKsC,EAAY6X,EAAOna,GAChC,IAAIkP,GAAOpN,EAAciT,EACzB,KACMsE,EACFe,2BAA2Bf,EAAM3Z,KAAKoP,IAAKI,EAAMtN,GAEjDyY,yBAAyB3a,KAAKoP,IAAKI,EAAMtN,GFmDzC,QEhDF,IADAwN,YAAYF,GACLlP,GAAK,IAAKA,EAAGoP,YAAY2F,EAAM/U,MAI1C6O,EAAA3N,UAAAoZ,SAAA,WACE,MAA4C,IAArCC,wBAAwB7a,KAAKoP,MAGtCD,EAAA3N,UAAAsZ,UAAA,WACEC,yBAAyB/a,KAAKoP,MAGhCD,EAAA3N,UAAAwZ,MAAA,WACEC,qBAAqBjb,KAAKoP,MAG5BD,EAAA3N,UAAA0Z,WAAA,WACEC,0BAA0Bnb,KAAKoP,MAGjCD,EAAA3N,UAAA4Z,SAAA,SAASC,GACP,GAAI/L,GAAMtP,KAAKsP,IACXS,EAAOnN,EAAYyY,GACnBC,EAAmB,EACnBC,EAAsB,CAC1B,KACEC,gCAAgClM,EAAKtP,KAAKoP,IAAKW,GAC/CuL,EAAezY,EAAQyM,EACvB,IAAImM,GAAe5Y,EAAQyM,EAAM,EACjCiM,GAAe1Y,EAAQyM,EAAM,EAC7B,IAAItM,GAAM,GAAI0Y,EAGd,OAFA1Y,GAAI2Y,OAAS5Y,EAAWuY,EAAWG,GACnCzY,EAAI4Y,UAAY1Y,EAAWqY,GACpBvY,EFgDL,QE9CE+M,GAAML,YAAYK,GAClBuL,GAAW5L,YAAY4L,GACvBC,GAAc7L,YAAY6L,KAIlCpM,EAAA3N,UAAAqa,OAAA,WACE,KAAM,IAAIC,OAAM,oBAGlB3M,EAAA3N,UAAAua,QAAA,WACE,KAAM,IAAID,OAAM,oBAGlB3M,EAAA3N,UAAAwa,QAAA,WACOhc,KAAKoP,MACV6M,uBAAuBjc,KAAKoP,KAC5BM,YAAY1P,KAAKsP,OAGnBH,EAAA3N,UAAA0a,eAAA,WACE,MAAOC,GAASpN,OAAO/O,OAIzBmP,EAAA3N,UAAA4a,gBAAA,SAAgBpL,EAAqBqL,EAA6BC,GAChE,OADmC,KAAAD,OAAA,OAA6B,KAAAC,MAAgBC,IAAIC,WAChFF,EAAW,EACb,MAAO,EAET,IAAIG,GACAC,CAEJ,QAAQC,yBAAyB3L,IAE/B,IAAKxM,GAAaoY,MAChB,OAAQC,2BAA2B7L,IACjC,IAAKjN,GAAW+Y,IAAK,MAAO9c,MAAKmQ,UAAU4M,0BAA0B/L,GACrE,KAAKjN,GAAWiZ,IAAK,MAAOhd,MAAKsQ,UAAU2M,6BAA6BjM,GAAOkM,8BAA8BlM,GAC7G,KAAKjN,GAAWoZ,IAAK,MAAOnd,MAAK0Q,UAAU0M,0BAA0BpM,GACrE,KAAKjN,GAAWsZ,IAAK,MAAOrd,MAAK4Q,UAAU0M,0BAA0BtM,GACrE,SAAS,KAAM,IAAI8K,OAAM,0BAG7B,IAAKtX,GAAa+Y,SAChB,MAAO3L,mBAAkB5R,KAAKoP,IAAKoO,0BAA0BxM,GAAO6L,2BAA2B7L,GAEjG,KAAKxM,GAAaiZ,UAChB,GAAIC,GAAaC,0BAA0B3M,EAC3C,KAAK0M,EACH,KACF,OAAO1L,oBAAmBhS,KAAKoP,IAAKsO,EAAYb,2BAA2B7L,GAE7E,KAAKxM,GAAaoZ,KAChB,KAAMnB,EAAUzc,KAAKoc,gBAAgByB,oBAAoB7M,GAAOqL,EAAeC,EAAW,IACxF,KACF,OAAOwB,uBAAsB9M,GACzBwB,oBAAoBxS,KAAKoP,IAAK2O,sBAAsB/M,GAAOgN,uBAAuBhN,GAAO6L,2BAA2B7L,GAAOyL,GAC3HrK,cAAcpS,KAAKoP,IAAK2O,sBAAsB/M,GAAOiN,sBAAsBjN,GAAQ,EAAI,EAAGgN,uBAAuBhN,GAAQkN,sBAAsBlN,GAAO6L,2BAA2B7L,GAAOyL,EAE9L,KAAKjY,GAAa2Z,MAChB,KAAM1B,EAAUzc,KAAKoc,gBAAgBgC,uBAAuBpN,GAAOqL,EAAeC,EAAW,IAC3F,KACF,OAAOrL,gBAAejR,KAAKoP,IAAKiP,oBAAoBrN,GAAOyL,EAE7D,KAAKjY,GAAakX,OAChB,KAAMe,EAAUzc,KAAKoc,gBAAgBkC,uBAAuBtN,GAAOqL,EAAeC,EAAW,IAC3F,KACF,MAAMI,EAAU1c,KAAKoc,gBAAgBmC,wBAAwBvN,GAAOqL,EAAeC,EAAW,IAC5F,KACF,OAAOjL,iBAAgBrR,KAAKoP,IAAKoP,qBAAqBxN,GAAOyL,EAASC,GAE1E,MAAO,IAKTvN,EAAA3N,UAAAid,iBAAA,SAAiB7d,GACf,GAAImP,GAAOnN,EAAYhC,EACvB,KACE,MAAO8d,qCAAoC1e,KAAKoP,IAAKW,GFuCnD,QErCFL,YAAYK,KAIhBZ,EAAA3N,UAAAmd,iBAAA,SAAiBjN,GACf,MAAOxO,GAAW0b,oCAAoC5e,KAAKoP,IAAKsC,KAGlEvC,EAAA3N,UAAAqd,iBAAA,SAAiBlF,EAAmB3I,EAAqB8N,EAAkBC,EAAmBC,GAC5FC,kCAAkCtF,EAAM3I,EAAM8N,EAAWC,EAAYC,IA9kBvD7P,EAAA+P,kBAA2B,MAglB7C/P,IArlBazP,GAAAyP,QAulBb,IAAAgN,GAAA,WAmBE,QAAAA,MA0BF,MAxCSA,GAAApN,OAAP,SAAcpP,GACZ,GAAIwf,GAAW,GAAIhD,EAGjB,OAFFgD,GAASxf,OAASA,EAClBwf,EAAS/P,IAAMgQ,kBACND,GAGJhD,EAAAkD,WAAP,SAAkB1f,GAChB,GAAIwf,GAAW,GAAIhD,EAGnB,OAFAgD,GAASxf,OAASA,EAClBwf,EAAS/P,IAAM,EACR+P,GAKThD,EAAA3a,UAAA8d,SAAA,SAASC,GACP,MAAOC,mBAAkBxf,KAAKoP,IAAKmQ,IAGrCpD,EAAA3a,UAAAie,UAAA,SAAUC,EAAwBC,EAAsBzL,EAA8BqL,OAA9B,KAAArL,MAAA,OAA8B,KAAAqL,MAAA,GACpFK,mBAAmBF,EAAMC,EAAIzL,EAAWqL,IAG1CpD,EAAA3a,UAAAqe,mBAAA,SAAmBN,EAAqBrL,GACtC,MAAO4L,6BAA4B9f,KAAKoP,IAAKmQ,EAAMrL,IAGrDiI,EAAA3a,UAAAue,mBAAA,SAAmBL,EAAwBC,EAAsBK,EAAgBT,OAAA,KAAAA,MAAA,EAC/E,IAAI/P,GAAOpN,EAAc4d,EACzB,KACEC,4BAA4BP,EAAMC,EAAInQ,EAAMwQ,EAAQhe,OAAQud,GFkC1D,QEhCF7P,YAAYF,KAIhB2M,EAAA3a,UAAA0e,iBAAA,SAAiBC,EAAyBC,GACxC,MAAOC,2BAA0BrgB,KAAKoP,IAAK+Q,EAAOC,EAAapgB,KAAKL,OAAOyP,MAE/E+M,IA7Cazc,GAAAyc,WA0Ibzc,EAAAmD,UASAnD,EAAAqD,aAOArD,EAAAwD,YA8CA,IAAAwY,GAAA,mBAAAA,MAKA,MAAAA,OFyCM,SAAU/b,EAAQD,EAASS,GAEjC,YG/hCA,SAAAmgB,GAA2CC,GACzC,OAAQA,GACN,IAAKC,GAAmBC,KAAM,MAAO,MACrC,KAAKD,GAAmBE,QAAS,MAAO,SACxC,KAAKF,GAAmBG,MAAO,MAAO,OACtC,SAAS,MAAO,IASpB,QAAAC,GAA0CL,GACxC,OAAQA,GACN,IAAKC,GAAmBC,KAAM,MAAOI,EACrC,KAAKL,GAAmBE,QAAS,MAAOI,EACxC,KAAKN,GAAmBG,MAAO,MAAOI,EACtC,SAAS,MAAO,IAkDpB,QAAAC,GAAwCC,EAA4BC,EAAyBC,OAAzB,KAAAD,OAAA,OAAyB,KAAAC,OAAA,EAE3F,IAAIC,GAAU,EACVH,GAAQI,OAASF,IACnBC,EAAUE,EAAwBL,EAAQI,MAAOH,GAGnD,IAAIK,KAUJ,IATIL,GAAWK,EAAG5d,KAAKid,EAA0BK,EAAQV,WACzDgB,EAAG5d,KAAK2c,EAA2BW,EAAQV,WACvCW,GAAWK,EAAG5d,KAAK6d,GACvBD,EAAG5d,KAAKsd,EAAQ1B,KAAO,IAAO,MAAQ,OACtCgC,EAAG5d,KAAKsd,EAAQ1B,KAAKkC,SAAS,KAC9BF,EAAG5d,KAAK,MACR4d,EAAG5d,KAAKsd,EAAQA,SAGZA,EAAQI,MAAO,CACjB,GAAIA,GAAQJ,EAAQI,KACTA,GAAMK,OAAOC,IACpBR,KACFI,EAAG5d,KAAK,MACR4d,EAAG5d,KAAKyd,IAEVG,EAAG5d,KAAK,MACR4d,EAAG5d,KAAK,QACR4d,EAAG5d,KAAK0d,EAAMK,OAAOE,gBACrBL,EAAG5d,KAAK,KACR4d,EAAG5d,KAAK0d,EAAMQ,KAAKJ,SAAS,KAC5BF,EAAG5d,KAAK,KACR4d,EAAG5d,KAAK0d,EAAMS,OAAOL,SAAS,KAC9BF,EAAG5d,KAAK,KAEV,MAAO4d,GAAGQ,KAAK,IAGjB,QAAAT,GAAwCD,EAAcH,OAAA,KAAAA,OAAA,EAKpD,KAJA,GAAIS,GAAON,EAAMK,OAAOC,KACpBlf,EAAMkf,EAAK3f,OACXggB,EAAQX,EAAMW,MACdC,EAAMZ,EAAMY,IACTD,EAAQ,IAAME,EAAAC,YAAYR,EAAKhf,WAAWqf,EAAQ,KACvDA,GACF,MAAOC,EAAMxf,IAAQyf,EAAAC,YAAYR,EAAKhf,WAAWsf,KAC/CA,GAMF,KALA,GAAIV,IACF,MACAI,EAAKS,UAAUJ,EAAOC,GACtB,OAEKD,EAAQX,EAAMW,OACnBT,EAAG5d,KAAK,KACRqe,GAGF,IADId,GAAWK,EAAG5d,KAAKod,GACnBM,EAAMW,OAASX,EAAMY,IACvBV,EAAG5d,KAAK,SACH,MAAOqe,IAAUX,EAAMY,KAC5BV,EAAG5d,KAAK,IAEV,OADIud,IAAWK,EAAG5d,KAAK6d,GAChBD,EAAGQ,KAAK,IHg6BjBhhB,OAAOC,eAAetB,EAAS,cAAgBoE,OAAO,GGtjCtD,IAAAue,GAAAliB,EAAA,GAKA+hB,EAAA/hB,EAAA,GAKAmiB,EAAAniB,EAAA,EACET,GAAA6iB,eAAAD,EAAAC,eACA7iB,EAAA8iB,uBAAAF,EAAAE,sBAGF,IAAYhC,IAAZ,SAAYA,GACVA,IAAA,eACAA,IAAA,qBACAA,IAAA,kBAHUA,EAAA9gB,EAAA8gB,qBAAA9gB,EAAA8gB,wBAMZ9gB,EAAA4gB,4BASA,IAAMO,GAAoB,QACpBC,EAAsB,QACtBC,EAAmB,QACnBS,EAAqB,MAE3B9hB,GAAAkhB,2BASA,IAAA6B,GAAA,WAOE,QAAAA,GAAYlD,EAAWgB,EAA8BU,GAFrDjhB,KAAAqhB,MAAsB,KAGpBrhB,KAAKuf,KAAOA,EACZvf,KAAKugB,SAAWA,EAChBvgB,KAAKihB,QAAUA,EAkCnB,MA/BSwB,GAAA1T,OAAP,SAAcwQ,EAAsBgB,EAA8BmC,EAA4BC,OAA5B,KAAAD,MAAA,UAA4B,KAAAC,MAAA,KAC5F,IAAI1B,GAAUoB,EAAAG,uBAAuBjD,EAKrC,OAJY,OAARmD,IACFzB,EAAUA,EAAQ2B,QAAQ,MAAOF,IACvB,MAARC,IACF1B,EAAUA,EAAQ2B,QAAQ,MAAOD,IAC5B,GAAIF,GAAkBlD,EAAMgB,EAAUU,IAGxCwB,EAAAI,WAAP,SAAkBtD,EAAsBmD,EAA4BC,GAClE,WADsC,KAAAD,MAAA,UAA4B,KAAAC,MAAA,MAC3DF,EAAkB1T,OAAOwQ,EAAMiB,EAAmBC,KAAMiC,EAAMC,IAGhEF,EAAAK,cAAP,SAAqBvD,EAAsBmD,EAA4BC,GACrE,WADyC,KAAAD,MAAA,UAA4B,KAAAC,MAAA,MAC9DF,EAAkB1T,OAAOwQ,EAAMiB,EAAmBE,QAASgC,EAAMC,IAGnEF,EAAAM,YAAP,SAAmBxD,EAAsBmD,EAA4BC,GACnE,WADuC,KAAAD,MAAA,UAA4B,KAAAC,MAAA,MAC5DF,EAAkB1T,OAAOwQ,EAAMiB,EAAmBG,MAAO+B,EAAMC,IAGxEF,EAAAjhB,UAAAwhB,UAAA,SAAU3B,GAER,MADArhB,MAAKqhB,MAAQA,EACNrhB,MAGTyiB,EAAAjhB,UAAAigB,SAAA,WACE,MAAIzhB,MAAKqhB,MACAf,EAA2BtgB,KAAKugB,UAAY,IAAMvgB,KAAKuf,KAAKkC,SAAS,IAAM,MAASzhB,KAAKihB,QAAU,QAAWjhB,KAAKqhB,MAAMK,OAAOE,eAAiB,MAAQ5hB,KAAKqhB,MAAMW,MAAMP,SAAS,IAAM,IAAMzhB,KAAKqhB,MAAMY,IAAIR,SAAS,IACzNnB,EAA2BtgB,KAAKugB,UAAY,IAAMvgB,KAAKuf,KAAKkC,SAAS,IAAM,KAAOzhB,KAAKihB,SAElGwB,IA5Ca/iB,GAAA+iB,oBA8Cb/iB,EAAAshB,0BAoCAthB,EAAA4hB,yBA2BA,IAAA2B,GAAA,WAKE,QAAAA,GAAYC,OAAA,KAAAA,MAAA,MACVljB,KAAKkjB,YAAcA,GAAiD,GAAIxf,OAqB5E,MAlBEuf,GAAAzhB,UAAA2hB,eAAA,SAAe5D,EAAsBgB,EAA8Bc,EAAcqB,EAA4BC,OAA5B,KAAAD,MAAA,UAA4B,KAAAC,MAAA,KAC3G,IAAI1B,GAAUwB,EAAkB1T,OAAOwQ,EAAMgB,EAAUmC,EAAMC,GAAMK,UAAU3B,EAC7ErhB,MAAKkjB,YAAYvf,KAAKsd,IAKxBgC,EAAAzhB,UAAA4hB,MAAA,SAAM7D,EAAsB8B,EAAcqB,EAA4BC,OAA5B,KAAAD,MAAA,UAA4B,KAAAC,MAAA,MACpE3iB,KAAKmjB,eAAe5D,EAAMiB,EAAmBG,MAAOU,EAAOqB,EAAMC,IAGnEM,EAAAzhB,UAAA6hB,KAAA,SAAK9D,EAAsB8B,EAAcqB,EAA4BC,OAA5B,KAAAD,MAAA,UAA4B,KAAAC,MAAA,MACnE3iB,KAAKmjB,eAAe5D,EAAMiB,EAAmBC,KAAMY,EAAOqB,EAAMC,IAGlEM,EAAAzhB,UAAA8hB,QAAA,SAAQ/D,EAAsB8B,EAAcqB,EAA4BC,OAA5B,KAAAD,MAAA,UAA4B,KAAAC,MAAA,MACtE3iB,KAAKmjB,eAAe5D,EAAMiB,EAAmBE,QAASW,EAAOqB,EAAMC,IAEvEM,IA3BsBvjB,GAAAujB,qBHqlChB,SAAUtjB,EAAQD,EAASS,GAEjC,YAEA,IAAIojB,GAAavjB,MAAQA,KAAKujB,WAAc,WACxC,GAAIC,GAAgBziB,OAAO0iB,iBACpBC,uBAA2BhgB,QAAS,SAAU/C,EAAGgjB,GAAKhjB,EAAE+iB,UAAYC,IACvE,SAAUhjB,EAAGgjB,GAAK,IAAK,GAAIjiB,KAAKiiB,GAAOA,EAAEliB,eAAeC,KAAIf,EAAEe,GAAKiiB,EAAEjiB,IACzE,OAAO,UAAUf,EAAGgjB,GAEhB,QAASC,KAAO5jB,KAAK6jB,YAAcljB,EADnC6iB,EAAc7iB,EAAGgjB,GAEjBhjB,EAAEa,UAAkB,OAANmiB,EAAa5iB,OAAOgO,OAAO4U,IAAMC,EAAGpiB,UAAYmiB,EAAEniB,UAAW,GAAIoiB,QAGnFE,EAAY9jB,MAAQA,KAAK8jB,UAAa,SAAUhjB,GAChD,GAAIL,GAAsB,kBAAXsjB,SAAyBjjB,EAAEijB,OAAOC,UAAW1jB,EAAI,CAChE,OAAIG,GAAUA,EAAED,KAAKM,IAEjBmjB,KAAM,WAEF,MADInjB,IAAKR,GAAKQ,EAAEkB,SAAQlB,MAAI,KACnBgD,MAAOhD,GAAKA,EAAER,KAAM4jB,MAAOpjB,MAI5CqjB,EAAUnkB,MAAQA,KAAKmkB,QAAW,SAAUrjB,EAAGM,GAC/C,GAAIX,GAAsB,kBAAXsjB,SAAyBjjB,EAAEijB,OAAOC,SACjD,KAAKvjB,EAAG,MAAOK,EACf,IAAmBsjB,GAAYC,EAA3B/jB,EAAIG,EAAED,KAAKM,GAAOwjB,IACtB,KACI,UAAc,KAANljB,GAAgBA,KAAM,MAAQgjB,EAAI9jB,EAAE2jB,QAAQC,MAAMI,EAAG3gB,KAAKygB,EAAEtgB,OAExE,MAAOsf,GAASiB,GAAMjB,MAAOA,GAC7B,QACI,IACQgB,IAAMA,EAAEF,OAASzjB,EAAIH,EAAU,SAAIG,EAAED,KAAKF,GAElD,QAAU,GAAI+jB,EAAG,KAAMA,GAAEjB,OAE7B,MAAOkB,GAEXvjB,QAAOC,eAAetB,EAAS,cAAgBoE,OAAO,GItxCtD,IAAAygB,GAAApkB,EAAA,GAMAqkB,EAAArkB,EAAA,GAKAskB,EAAAtkB,EAAA,GAkDAukB,EAAAvkB,EAAA,EAQaT,GAAAilB,eAAiB,IAEjBjlB,EAAAklB,aAAe,KAEfllB,EAAAmlB,cAAgB,OAEhBnlB,EAAAolB,cAAgB,OAEhBplB,EAAAqlB,mBAAqB,IAErBrlB,EAAAslB,iBAAmB,IAEnBtlB,EAAAulB,cAAgB,QAEhBvlB,EAAAwlB,eAAiBxlB,EAAAulB,cAAgBvlB,EAAAilB,cAE9C,IAAAQ,GAAA,mBAAAA,MAIA,MAAAA,MAEAC,EAAA,mBAAAA,MAKA,MAAAA,MAEMC,EAAa,GAAIC,KAGvBC,EAAA,SAAAC,GAkBE,QAAAD,GAAYrC,OAAA,KAAAA,MAAA,KAAZ,IAAAuC,GACED,EAAAhlB,KAAAR,KAAMkjB,IAAYljB,IJgtCd,OI9tCNylB,GAAAC,kBAAyB,EAIzBD,EAAAE,SAAgC,GAAIL,KAEpCG,EAAAG,MAA0BP,EAE1BI,EAAAI,YAAoC,GAAIP,KAExCG,EAAA/lB,QAA+B,GAAI4lB,KAKjCG,EAAKK,WJ+sCML,EItIf,MA7lC6BlC,GAAAgC,EAAAC,GAwB3BD,EAAA/jB,UAAAukB,WAAA,SAAWC,GACThmB,KAAKgmB,QAAUA,EAEfhmB,KAAK4lB,MAAQ,GAAIN,OACd,KAAMd,EAAAyB,KAAKC,KACX,MAAO1B,EAAAyB,KAAKE,MACZ,MAAO3B,EAAAyB,KAAK1J,MACZ,MAAOiI,EAAAyB,KAAKG,MACZ,QAASJ,EAAQK,YACjB,KAAM7B,EAAAyB,KAAKK,KACX,MAAO9B,EAAAyB,KAAKM,MACZ,MAAO/B,EAAAyB,KAAKO,MACZ,MAAOhC,EAAAyB,KAAKQ,MACZ,QAAST,EAAQU,YACjB,OAAQlC,EAAAyB,KAAKU,OACb,MAAOnC,EAAAyB,KAAKW,MACZ,MAAOpC,EAAAyB,KAAKY,MACZ,OAAQrC,EAAAyB,KAAKa,OACb,SAAUtC,EAAAyB,KAAKY,MACf,UAAWrC,EAAAyB,KAAKU,OAQnB,KAAK,GALDI,GAAgB,GAAIzB,KACpB0B,EAAgB,GAAItjB,OACpBujB,EAAuB,GAAIvjB,OAGtBpD,EAAI,EAAG4B,EAAIlC,KAAK8lB,QAAQ9jB,OAAQ1B,EAAI4B,IAAK5B,EAGhD,IAAK,GAFDohB,GAAS1hB,KAAK8lB,QAAQxlB,GACtB4mB,EAAaxF,EAAOwF,WACfC,EAAI,EAAG5mB,EAAI2mB,EAAWllB,OAAQmlB,EAAI5mB,IAAK4mB,EAAG,CACjD,GAAIC,GAAYF,EAAWC,EAC3B,QAAQC,EAAUC,MAEhB,IAAK5C,GAAA6C,SAASC,iBACZvnB,KAAKwnB,gBAAkCJ,EAAWH,EAClD,MAEF,KAAKxC,GAAA6C,SAASG,gBACZznB,KAAK0nB,eAAgCN,EACrC,MAEF,KAAK3C,GAAA6C,SAASK,OACZ3nB,KAAK4nB,kBAAmCR,EAAWL,EACnD,MAEF,KAAKtC,GAAA6C,SAASO,oBACZ7nB,KAAK8nB,mBAAwCV,EAC7C,MAEF,KAAK3C,GAAA6C,SAASS,OACZ/nB,KAAKgoB,kBAAmCZ,EAAWL,EAAeC,EAClE,MAEF,KAAKvC,GAAA6C,SAASW,qBACZjoB,KAAKkoB,oBAA0Cd,EAC/C,MAEF,KAAK3C,GAAA6C,SAASa,qBACZnoB,KAAKooB,oBAA0ChB,EAAWH,EAAsB,KAChF,MAEF,KAAKxC,GAAA6C,SAASe,gBACZroB,KAAKsoB,oBAAqClB,EAC1C,MAEF,KAAK3C,GAAA6C,SAASiB,SACZvoB,KAAKwoB,oBAAuCpB,IAMpD,GAAIqB,EAGJ,KAAKnoB,EAAI,EAAGA,EAAI0mB,EAAchlB,QAAS,CACrC,GAAI0mB,GAAe1B,EAAc1mB,EACjCmoB,GAAUzoB,KAAK2oB,iBAAiBD,EAAaE,eAAgB7B,GACzD0B,GACFzoB,KAAK2lB,SAASkD,IAAIH,EAAa/R,aAAc8R,GAC7CzB,EAAc8B,OAAOxoB,EAAG,KAExBmoB,EAAUzoB,KAAK2oB,iBAAiBD,EAAaK,kBAAmBhC,GAC5D0B,GACFzoB,KAAK2lB,SAASkD,IAAIH,EAAa/R,aAAc8R,GAC7CzB,EAAc8B,OAAOxoB,EAAG,KAExBN,KAAKojB,MAAMmB,EAAAhC,eAAeyG,kCAAmCN,EAAaO,YAAY5H,MAAyBqH,EAAaO,YAAYC,OAAQC,KAAKrlB,MAAO4kB,EAAaO,YAAYrS,aAAa+K,QAChMrhB,IJssCJ,IIhsCJ,IAAuC,GAAA8oB,GAAAtF,EAAAiD,GAAasC,EAAAD,EAAAnF,QAAAoF,EAAAnF,KAAAmF,EAAAD,EAAAnF,OAAA,CAA3C,GAAAqF,GAAAnF,EAAAkF,EAAAvlB,MAAA,GAAC6U,EAAA2Q,EAAA,GAAYC,EAAAD,EAAA,GAChBE,EAAqCD,CACzC,GAAG,CACD,IAAIC,EAAcC,WAQX,EAEFhB,EAAUzoB,KAAK2lB,SAASxkB,IAAIqoB,EAAcZ,mBAC1CH,EAAUzoB,KAAK2lB,SAASxkB,IAAIqoB,EAAcE,OAAO9oB,KAAK+gB,OAEvD3hB,KAAK2pB,yBAAyBhR,EAAY8P,EAASe,EAAcE,OAAO9S,cAExE5W,KAAKojB,MAAMmB,EAAAhC,eAAeqH,mBAAoBL,EAAaG,OAAOrI,MAAOkI,EAAaG,OAAO9oB,KAAK+gB,KACpG,OAfA,GAAI8G,EAAUzoB,KAAKN,QAAQyB,IAAIqoB,EAAcZ,gBAAiB,CAC5D5oB,KAAK2pB,yBAAyBhR,EAAY8P,EAASe,EAAcE,OAAO9S,aACxE,QAEF4S,EAAgBzC,EAAc5lB,IAAIqoB,EAAcZ,kBAE9C5oB,KAAKojB,MAAMmB,EAAAhC,eAAeyG,kCAAmCO,EAAaG,OAAO9S,aAAayK,MAAmDkI,EAAaG,OAAOR,OAAQC,KAAMrlB,MAAOylB,EAAaG,OAAO9S,aAAa+K,YAWxN6H,IJssCP,MAAOK,GAASC,GAAQ1G,MAAOyG,GAC/B,QACI,IACQR,IAAsBA,EAAkBnF,OAAS6F,EAAKX,EAAgBY,SAASD,EAAGvpB,KAAK4oB,GAE/F,QAAU,GAAIU,EAAK,KAAMA,GAAI1G,OIvsCrC,IAAK9iB,EAAI,EAAG4B,EAAI+kB,EAAqBjlB,OAAQ1B,EAAI4B,IAAK5B,EAAG,CACvD,GAAI2pB,GAAqBhD,EAAqB3mB,GAAG2oB,WACjDiB,QAA6B,MAAtBD,EACP,IAAIE,GAAiCF,EAAoBG,WACzDF,QAAsB,MAAfC,EACP,IAAIE,GAAWrqB,KAAKsqB,kBAA6BH,EAAavpB,KAAM,KACpE,IAAIypB,EAAU,CACZ,GAAIA,EAAS5B,QAAQpB,MAAQkD,EAAYC,gBAAiB,CACxDxqB,KAAKojB,MAAMmB,EAAAhC,eAAekI,sCAAkDN,EAAa9I,MACzF,UAEF4F,EAAqB3mB,GAAGoqB,cAAgCL,EAAS5B,SJ6sCjE,GAAIqB,GAAKC,GIvsCPxE,EAAA/jB,UAAAmnB,iBAAR,SAAyBC,EAAwB7B,GAE/C,IADA,GAAI0B,KACD,CACD,GAAIA,EAAUzoB,KAAKN,QAAQyB,IAAIynB,GAC7B,MAAOH,EACT,IAAIc,GAAexC,EAAc5lB,IAAIynB,EACrC,KAAKW,EACH,MAAO,KACT,MAAIA,EAAaE,WAIjB,MAAOzpB,MAAK2lB,SAASxkB,IAAIooB,EAAaX,eAHpCA,GAAiBW,EAAaX,kBAO5BrD,EAAA/jB,UAAAmpB,wBAAR,SAAgClC,EAAkBQ,GAChD,GAAI2B,GAAkBnG,EAAAoG,aAAa,UAAW5B,EAAY6B,WACtDF,IACFnC,EAAQI,IAAIkC,EAAaC,UAEzBvG,EAAAoG,aAAa,SAAU5B,EAAY6B,aAEjC7B,EAAY5H,MAAMK,OAAOuJ,WACzBxC,EAAQyC,GAAGH,EAAaI,YAEtBjB,OAAOjB,EAAYC,QAAQ7B,MAAQ5C,EAAA6C,SAAS8D,QAEpCnC,EAAYC,OAAQ7B,MAAQ5C,EAAA6C,SAASiB,UAC3C2B,OAAcjB,EAAYC,OAAQA,QAAQ7B,MAAQ5C,EAAA6C,SAAS8D,WAIjE3C,EAAQI,IAAIkC,EAAaM,QACrBrrB,KAAK2lB,SAAS2F,IAAIrC,EAAYroB,KAAK+gB,MACrC3hB,KAAKojB,MAAMmB,EAAAhC,eAAegJ,uBAAwBtC,EAAYroB,KAAKygB,MAAOoH,EAAQ9R,eAElF3W,KAAK2lB,SAASkD,IAAII,EAAYroB,KAAK+gB,KAAM8G,GACzCzoB,KAAKN,QAAQmpB,IAAII,EAAYroB,KAAK+gB,KAAM8G,GACpCmC,IACFnC,EAAQ9R,aAAesS,EAAYroB,KAAK+gB,SAKxC4D,EAAA/jB,UAAAgmB,gBAAR,SAAwByB,EAA+BhC,EAAwCuE,OAAA,KAAAA,MAAA,KAC7F,IAAI7U,GAAesS,EAAYwC,qBAC/B,IAAIzrB,KAAK2lB,SAAS2F,IAAI3U,GAEpB,WADA3W,MAAKojB,MAAMmB,EAAAhC,eAAegJ,uBAAwBtC,EAAYroB,KAAKygB,MAAO1K,EAG5E,IAAInV,GAAY,GAAIkqB,GAAe1rB,KAAMipB,EAAYroB,KAAK+gB,KAAMhL,EAAcsS,EAM9E,IALAznB,EAAUgqB,UAAYA,EACtBxrB,KAAK2lB,SAASkD,IAAIlS,EAAcnV,GAEhCxB,KAAK2qB,wBAAwBnpB,EAAWynB,GAEpCxE,EAAAoG,aAAa,YAAa5B,EAAY6B,YACxCtpB,EAAUmqB,aAAc,EACpB1C,EAAY2C,iBAAmB3C,EAAY2C,gBAAgB5pB,QAC7DhC,KAAKojB,MAAMmB,EAAAhC,eAAesJ,oCAAqCpH,EAAAqH,MAAM/J,KAAKkH,EAAYroB,KAAKygB,MAAO4H,EAAY2C,gBAAgB3C,EAAY2C,gBAAgB5pB,OAAS,GAAGqf,YACnK,IAAI4H,EAAY2C,gBAAgB5pB,OACrC,KAAM,IAAI8Z,OAAM,kBAOlB,IAJImN,EAAYmB,aACdnD,EAAqBtjB,KAAKnC,GAGxBgqB,EAAW,CACb,GAAIA,EAAUO,SACZ,GAAIP,EAAUO,QAAQT,IAAIrC,EAAYroB,KAAK+gB,MAEzC,WADA3hB,MAAKojB,MAAMmB,EAAAhC,eAAegJ,uBAAwBtC,EAAYroB,KAAKygB,MAAO1K,OAI5E6U,GAAUO,QAAU,GAAIzG,IAC1BkG,GAAUO,QAAQlD,IAAII,EAAYroB,KAAK+gB,KAAMngB,OAGxC,IAAIA,EAAU0pB,GAAGH,EAAaI,UAAW,CAC9C,GAAInrB,KAAKN,QAAQ4rB,IAAI3U,GAEnB,WADA3W,MAAKojB,MAAMmB,EAAAhC,eAAeyJ,4DAA6D/C,EAAYroB,KAAKygB,MAAO1K,EAGjH3W,MAAKN,QAAQmpB,IAAIlS,EAAcnV,GAKjC,IAAK,GADDyqB,GAAqBhD,EAAY8C,QAC5BzrB,EAAI,EAAG4B,EAAI+pB,EAAmBjqB,OAAQ1B,EAAI4B,IAAK5B,EAAG,CACzD,GAAI4rB,GAAoBD,EAAmB3rB,EAC3C,QAAQ4rB,EAAkB7E,MAExB,IAAK5C,GAAA6C,SAAS6E,iBACZnsB,KAAKosB,gBAAkCF,EAAmB1qB,EAC1D,MAEF,KAAKijB,GAAA6C,SAAS+E,kBACZ,GAAIC,IACCA,EAAW7H,EAAA8H,YAAY9H,EAAA+H,aAAaC,IAAKP,EAAkBQ,aAAejI,EAAA8H,YAAY9H,EAAA+H,aAAaG,IAAKT,EAAkBQ,WAC7H1sB,KAAK4sB,mBAAsCV,EAAmB1qB,EAAW8qB,GAEzEtsB,KAAK6sB,iBAAoCX,EAAmB1qB,EAC9D,MAEF,SACE,KAAM,IAAIsa,OAAM,0BAKtB,GAAIta,EAAU0pB,GAAGH,EAAaM,SAAqC,WAA1BpC,EAAYroB,KAAK+gB,OAAsB3hB,KAAK4lB,MAAM0F,IAAI,UAAW,CACxG,GAAIwB,GAAWtrB,EAAUurB,QAAQ,KAC7BD,IACF9sB,KAAK4lB,MAAMiD,IAAI,SAAUiE,EAASnb,QAIhC4T,EAAA/jB,UAAA4qB,gBAAR,SAAwBnD,EAA+B+D,GACrD,GAAIpsB,GAAOqoB,EAAYroB,KAAK+gB,KACxBhL,EAAesS,EAAYwC,qBAG/B,IAAIhH,EAAA8H,YAAY9H,EAAA+H,aAAaS,OAAQhE,EAAYyD,WAAY,CAC3D,GAAI1sB,KAAK2lB,SAAS2F,IAAI3U,GAEpB,WADA3W,MAAKojB,MAAMmB,EAAAhC,eAAegJ,uBAAwBtC,EAAYroB,KAAKygB,MAAO1K,EAG5E,IAAIqW,EAAejB,SACjB,GAAIiB,EAAejB,QAAQT,IAAI1qB,GAE7B,WADAZ,MAAKojB,MAAMmB,EAAAhC,eAAegJ,uBAAwBtC,EAAYroB,KAAKygB,MAAO1K,OAI5EqW,GAAejB,QAAU,GAAIzG,IAC/B,IAAI4H,GAAc,GAAIC,GAAOntB,KAAMY,EAAM+V,EAAcsS,EAAazE,EAAAyB,KAAKa,KACzEkG,GAAejB,QAAQlD,IAAIjoB,EAAMssB,GACjCltB,KAAK2lB,SAASkD,IAAIlS,EAAcuW,OAG3B,CACL,GAAIF,EAAeI,iBACjB,GAAIJ,EAAeI,gBAAgB9B,IAAI1qB,GAErC,WADAZ,MAAKojB,MAAMmB,EAAAhC,eAAegJ,uBAAwBtC,EAAYroB,KAAKygB,MAAO1K,OAI5EqW,GAAeI,gBAAkB,GAAI9H,IACvC,IAAI+H,GAAgB,GAAIC,GAAeN,EAAgBpsB,EAAM+V,EAAcsS,EAC3E+D,GAAeI,gBAAgBvE,IAAIjoB,EAAMysB,KAIrC9H,EAAA/jB,UAAAqrB,iBAAR,SAAyB5D,EAAgC+D,GACvD,GAAIpsB,GAAOqoB,EAAYroB,KAAK+gB,KACxBhL,EAAesS,EAAYwC,sBAC3BjqB,EAAsC,IAG1C,IAAIijB,EAAA8H,YAAY9H,EAAA+H,aAAaS,OAAQhE,EAAYyD,WAAY,CAG3D,GAFAxC,OAAOjB,EAAYroB,KAAKymB,MAAQ5C,EAAA6C,SAASiG,aAErCvtB,KAAK2lB,SAAS2F,IAAI3U,GAEpB,WADA3W,MAAKojB,MAAMmB,EAAAhC,eAAegJ,uBAAwBtC,EAAYroB,KAAKygB,MAAO1K,EAG5E,IAAIqW,EAAejB,SACjB,GAAIiB,EAAejB,QAAQT,IAAI1qB,GAE7B,WADAZ,MAAKojB,MAAMmB,EAAAhC,eAAegJ,uBAAwBtC,EAAYroB,KAAKygB,MAAO1K,OAI5EqW,GAAejB,QAAU,GAAIzG,IAC/B9jB,GAAY,GAAIgsB,GAAkBxtB,KAAMY,EAAM+V,EAAcsS,EAAa,MACzE+D,EAAejB,QAAQlD,IAAIjoB,EAAMY,GACjCxB,KAAK2lB,SAASkD,IAAIlS,EAAcnV,OAG3B,CACL,GAAIwrB,EAAeI,iBACjB,GAAIJ,EAAeI,gBAAgB9B,IAAI1qB,GAErC,WADAZ,MAAKojB,MAAMmB,EAAAhC,eAAegJ,uBAAwBtC,EAAYroB,KAAKygB,MAAO1K,OAI5EqW,GAAeI,gBAAkB,GAAI9H,IACvC9jB,GAAY,GAAIgsB,GAAkBxtB,KAAMY,EAAM+V,EAAcsS,EAAa+D,GAIrE/D,EAAYroB,KAAKymB,MAAQ5C,EAAA6C,SAASiG,YAChCP,EAAeS,qBACjBztB,KAAKojB,MAAMmB,EAAAhC,eAAemL,qDAAsDzE,EAAYroB,KAAKygB,QAEjG7f,EAAUqnB,IAAIkC,EAAawC,aAC3BP,EAAeS,qBAAuBjsB,GAGxCwrB,EAAeI,gBAAgBvE,IAAIjoB,EAAMY,GAG7CxB,KAAK2tB,eAAe1E,EAAY6B,WAAYtpB,EAAWwrB,IAGjDzH,EAAA/jB,UAAAmsB,eAAR,SAAuB7C,EAAgCtpB,EAA8BwrB,GAInF,GAAIlC,EACF,IAAK,GAAIxqB,GAAI,EAAG4B,EAAI4oB,EAAW9oB,OAAQ1B,EAAI4B,IAAK5B,EAAG,CACjD,GAAIstB,GAAY9C,EAAWxqB,EAC3B,IAA2B,GAAvBstB,EAAUC,cAAyC,CACrD,IAAKrsB,EAAW,CACdxB,KAAKojB,MAAMmB,EAAAhC,eAAeuL,wBAAyBF,EAAUvM,MAC7D,UAEF,GAAI0M,GAAUH,EAAUI,WAAaJ,EAAUI,UAAUhsB,QAAU,CACnE,IAAe,GAAX+rB,EAAc,CAChB,GAAIE,GAA0BL,EAAUI,UAAW,EACnD,IAAIC,EAAS5G,MAAQ5C,EAAA6C,SAAS4G,SAAoD,GAArBD,EAAUE,YACrE,OAAkCF,EAAUnqB,OAE1C,IAAK,KACHkpB,EAAeoB,aAAe5sB,EAAU6sB,UACxC,MAEF,KAAK,MACHrB,EAAesB,aAAe9sB,EAAU6sB,UACxC,MAEF,KAAK,IACHrB,EAAeuB,SAAW/sB,EAAU6sB,UACpC,MAEF,KAAK,KACHrB,EAAewB,SAAWhtB,EAAU6sB,UACpC,MAEF,SACEruB,KAAKojB,MAAMmB,EAAAhC,eAAeuL,wBAAyBG,EAAS5M,WAGhErhB,MAAKojB,MAAMmB,EAAAhC,eAAekM,wBAAyBR,EAAS5M,WAE9DrhB,MAAKojB,MAAMmB,EAAAhC,eAAemM,+BAAgCd,EAAUvM,MAAO,IAAK0M,EAAQtM,SAAS,QACnE,IAAvBmM,EAAUC,eACnB7tB,KAAKojB,MAAMmB,EAAAhC,eAAeuL,wBAAyBF,EAAUvM,SAK7DkE,EAAA/jB,UAAAorB,mBAAR,SAA2B3D,EAAgC+D,EAAgCV,GACzF,GAAIqC,GAAe1F,EAAYroB,KAAK+gB,KAChCiN,EAAuB3F,EAAYwC,sBAEnCoD,EAAkB7uB,KAAK2lB,SAASxkB,IAAIytB,EACxC,IAAIC,GACF,GAAIA,EAAgBxH,MAAQkD,EAAYuE,WAAaxC,EAAsBuC,EAAiBE,gBAA6BF,EAAiBG,iBAExI,WADAhvB,MAAKojB,MAAMmB,EAAAhC,eAAegJ,uBAAwBtC,EAAYroB,KAAKygB,MAAOuN,OAI5EC,GAAkB,GAAII,GAASjvB,KAAM2uB,EAAcC,EAAsB5B,EAE3E,IAAIpsB,IAAQ0rB,EAAW5sB,EAAAmlB,cAAgBnlB,EAAAolB,eAAiB6J,CAGxD,IAAIlK,EAAA8H,YAAY9H,EAAA+H,aAAaS,OAAQhE,EAAYyD,WAAY,CAC3D,GAAIwC,GAAqBlC,EAAerW,aAAejX,EAAAslB,iBAAmBpkB,CAC1E,IAAIZ,KAAK2lB,SAAS2F,IAAI4D,GAEpB,WADAlvB,MAAKojB,MAAMmB,EAAAhC,eAAegJ,uBAAwBtC,EAAYroB,KAAKygB,MAAO6N,EAG5E,IAAIC,GAAkB,GAAI3B,GAAkBxtB,KAAMY,EAAMsuB,EAAoBjG,EAAa,KACrFqD,GACSuC,EAAiBE,gBAAkBI,EAEnCN,EAAiBG,gBAAkBG,EAC3CnC,EAAejB,UAClBiB,EAAejB,QAAU,GAAIzG,MAC/B0H,EAAejB,QAAQlD,IAAI8F,EAAcE,GACzC7uB,KAAK2lB,SAASkD,IAAI+F,EAAsBC,OAGnC,CACL,GAAIO,GAAuBpC,EAAerW,aAAejX,EAAAqlB,mBAAqBnkB,CAC9E,IAAIosB,EAAeI,iBACjB,GAAIJ,EAAeI,gBAAgB9B,IAAI1qB,GAErC,WADAZ,MAAKojB,MAAMmB,EAAAhC,eAAegJ,uBAAwBtC,EAAYroB,KAAKygB,MAAOuN,OAI5E5B,GAAeI,gBAAkB,GAAI9H,IACvC,IAAI+J,GAAoB,GAAI7B,GAAkBxtB,KAAMY,EAAMwuB,EAAsBnG,EAAa+D,EACzFV,GACSuC,EAAiBE,gBAAkBM,EAEnCR,EAAiBG,gBAAkBK,EAChDrC,EAAeI,gBAAgBvE,IAAIjoB,EAAMiuB,GACzC7uB,KAAK2lB,SAASkD,IAAI+F,EAAsBC,KAIpCtJ,EAAA/jB,UAAAkmB,eAAR,SAAuBuB,EAA8BuC,OAAA,KAAAA,MAAA,KACnD,IAAI7U,GAAesS,EAAYwC,qBAC/B,IAAIzrB,KAAK2lB,SAAS2F,IAAI3U,GAEpB,WADA3W,MAAKojB,MAAMmB,EAAAhC,eAAegJ,uBAAwBtC,EAAYroB,KAAKygB,MAAO1K,EAG5E,IAAI2Y,GAAM,GAAIC,GAAKvvB,KAAMipB,EAAYroB,KAAK+gB,KAAMhL,EAAcsS,EAM9D,IALAqG,EAAI9D,UAAYA,EAChBxrB,KAAK2lB,SAASkD,IAAIlS,EAAc2Y,GAEhCtvB,KAAK2qB,wBAAwB2E,EAAKrG,GAE9BuC,EAAW,CACb,GAAIA,EAAUO,SACZ,GAAIP,EAAUO,QAAQT,IAAIrC,EAAYroB,KAAK+gB,MAEzC,WADA3hB,MAAKojB,MAAMmB,EAAAhC,eAAegJ,uBAAwBtC,EAAYroB,KAAKygB,MAAO1K,OAI5E6U,GAAUO,QAAU,GAAIzG,IAC1BkG,GAAUO,QAAQlD,IAAII,EAAYroB,KAAK+gB,KAAM2N,OACxC,IAAIA,EAAIpE,GAAGH,EAAaI,UAAW,CACxC,GAAInrB,KAAKN,QAAQ4rB,IAAI3U,GAEnB,WADA3W,MAAKojB,MAAMmB,EAAAhC,eAAeyJ,4DAA6D/C,EAAYroB,KAAKygB,MAAO1K,EAGjH3W,MAAKN,QAAQmpB,IAAIlS,EAAc2Y,GAIjC,IAAK,GADDE,GAASvG,EAAYuG,OAChBlvB,EAAI,EAAG4B,EAAIstB,EAAOxtB,OAAQ1B,EAAI4B,IAAK5B,EAC1CN,KAAKyvB,oBAAoBD,EAAOlvB,GAAIgvB,IAGhC/J,EAAA/jB,UAAAiuB,oBAAR,SAA4BxG,EAAmCqG,GAC7D,GAAI1uB,GAAOqoB,EAAYroB,KAAK+gB,KACxBhL,EAAesS,EAAYwC,qBAC/B,IAAI6D,EAAIvD,SACN,GAAIuD,EAAIvD,QAAQT,IAAI1qB,GAElB,WADAZ,MAAKojB,MAAMmB,EAAAhC,eAAegJ,uBAAwBtC,EAAYroB,KAAKygB,MAAO1K,OAI5E2Y,GAAIvD,QAAU,GAAIzG,IACpB,IAAIxhB,GAAQ,GAAI4rB,GAAUJ,EAAKtvB,KAAMY,EAAM+V,EAAcsS,EACzDqG,GAAIvD,QAAQlD,IAAIjoB,EAAMkD,IAGhByhB,EAAA/jB,UAAAomB,kBAAR,SAA0BR,EAA4BL,GAEpD,IAAK,GADDgF,GAAU3E,EAAU2E,QACfzrB,EAAI,EAAG4B,EAAI6pB,EAAQ/pB,OAAQ1B,EAAI4B,IAAK5B,EAC3CN,KAAK2vB,iBAAiB5D,EAAQzrB,GAAI8mB,EAAUwI,aAAc7I,IAGtDxB,EAAA/jB,UAAAmoB,yBAAR,SAAiC/oB,EAAc6nB,EAAkBoH,GAC/D7vB,KAAKN,QAAQmpB,IAAIjoB,EAAM6nB,GACnBoH,EAAWxO,MAAMK,OAAOuJ,YACtBjrB,KAAK2lB,SAAS2F,IAAIuE,EAAWlO,MAC/B3hB,KAAKojB,MAAMmB,EAAAhC,eAAeyJ,4DAA6D6D,EAAWxO,MAAOwO,EAAWlO,OAEpH8G,EAAQ9R,aAAekZ,EAAWlO,KAClC3hB,KAAK2lB,SAASkD,IAAIgH,EAAWlO,KAAM8G,MAKjClD,EAAA/jB,UAAAmuB,iBAAR,SAAyBjG,EAAsBkG,EAA6B7I,GAC1E,GAAInQ,GAAe8S,EAAOrI,MAAMK,OAAOkO,aAAelwB,EAAAilB,eAAiB+E,EAAO9S,aAAa+K,IAC3F,IAAI3hB,KAAKN,QAAQ4rB,IAAI1U,GAEnB,WADA5W,MAAKojB,MAAMmB,EAAAhC,eAAeyJ,4DAA6DtC,EAAO9S,aAAayK,MAAOzK,EAGpH,IAAIgS,GACAkH,EACAvG,CAGJ,IAAoB,MAAhBqG,EAAsB,CAIxB,GAHAhH,EAAiBc,EAAOrI,MAAMK,OAAOkO,aAAelwB,EAAAilB,eAAiB+E,EAAO9oB,KAAK+gB,KAG7EmO,EAAoB9vB,KAAK2lB,SAASxkB,IAAIynB,GAExC,WADA5oB,MAAK2pB,yBAAyB/S,EAAckZ,EAAmBpG,EAAO9S,aAKxE,IAAImQ,EAAcuE,IAAI1U,GAEpB,WADA5W,MAAKojB,MAAMmB,EAAAhC,eAAeyJ,4DAA6DtC,EAAO9S,aAAayK,MAAOzK,EAGpH2S,GAAe,GAAIpE,GACnBoE,EAAaE,YAAa,EAC1BF,EAAaX,eAAiBA,EAC9BW,EAAaG,OAASA,EACtB3C,EAAc8B,IAAIjS,EAAc2S,OAG3B,CAIL,GAHAX,EAA0BgH,EAAgBlwB,EAAAilB,eAAiB+E,EAAO9oB,KAAK+gB,KAGnEmO,EAAoB9vB,KAAK2lB,SAASxkB,IAAIynB,GAExC,WADA5oB,MAAK2pB,yBAAyB/S,EAAckZ,EAAmBpG,EAAO9S,aAMxE,KADA,GAAImZ,GAAO,GAAIC,KACRzG,EAAexC,EAAc5lB,IAAIynB,IAAiB,CACvD,IAAIW,EAAaE,WASV,CACL,GAAIqG,EAAoB9vB,KAAK2lB,SAASxkB,IAAIooB,EAAaX,gBAErD,WADA5oB,MAAK2pB,yBAAyB/S,EAAckZ,EAAmBpG,EAAO9S,aAGxE,OAbA,GAAIkZ,EAAoB9vB,KAAKN,QAAQyB,IAAIooB,EAAaX,gBAEpD,WADA5oB,MAAK2pB,yBAAyB/S,EAAckZ,EAAmBpG,EAAO9S,aAIxE,IADAgS,EAAiBW,EAAaX,eAC1BmH,EAAKzE,IAAI/B,GACX,KACFwG,GAAKE,IAAI1G,GAWb,GAAIxC,EAAcuE,IAAI1U,GAEpB,WADA5W,MAAKojB,MAAMmB,EAAAhC,eAAeyJ,4DAA6DtC,EAAO9S,aAAayK,MAAOzK,EAGpH2S,GAAe,GAAIpE,GACnBoE,EAAaE,YAAa,EAC1BF,EAAaX,eAAiBA,EAC9BW,EAAaG,OAASA,EACtB3C,EAAc8B,IAAIjS,EAAc2S,KAI5BhE,EAAA/jB,UAAAsmB,mBAAR,SAA2BmB,EAAkCuC,OAAA,KAAAA,MAAA,KAC3D,IAAI7U,GAAesS,EAAYwC,qBAC/B,IAAIzrB,KAAK2lB,SAAS2F,IAAI3U,GAEpB,WADA3W,MAAKojB,MAAMmB,EAAAhC,eAAegJ,uBAAwBtC,EAAYroB,KAAKygB,MAAO1K,EAG5E,IAAInV,GAAY,GAAIgsB,GAAkBxtB,KAAMipB,EAAYroB,KAAK+gB,KAAMhL,EAAcsS,EAAa,KAM9F,IALAznB,EAAUgqB,UAAYA,EACtBxrB,KAAK2lB,SAASkD,IAAIlS,EAAcnV,GAEhCxB,KAAK2qB,wBAAwBnpB,EAAWynB,GAEpCuC,EAAW,CACb,GAAIA,EAAUO,SACZ,GAAIP,EAAUO,QAAQT,IAAIrC,EAAYroB,KAAK+gB,MAEzC,WADA3hB,MAAKojB,MAAMmB,EAAAhC,eAAegJ,uBAAwBtC,EAAYroB,KAAKygB,MAAO1K,OAI5E6U,GAAUO,QAAU,GAAIzG,IAC1BkG,GAAUO,QAAQlD,IAAII,EAAYroB,KAAK+gB,KAAMngB,OACxC,IAAIA,EAAU0pB,GAAGH,EAAaI,UAAW,CAC9C,GAAInrB,KAAKN,QAAQ4rB,IAAI3U,GAEnB,WADA3W,MAAKojB,MAAMmB,EAAAhC,eAAeyJ,4DAA6D/C,EAAYroB,KAAKygB,MAAO1K,EAGjH3W,MAAKN,QAAQmpB,IAAIlS,EAAcnV,KAI3B+jB,EAAA/jB,UAAAwmB,kBAAR,SAA0BZ,EAA4BL,EAAyCC,GAC7F,GAAIkJ,GAAe9I,EAAU8I,YAC7B,IAAIA,EACF,IAAK,GAAI5vB,GAAI,EAAG4B,EAAIguB,EAAaluB,OAAQ1B,EAAI4B,IAAK5B,EAChDN,KAAKmwB,iBAAiBD,EAAa5vB,GAAI8mB,EAAUwI,aAAc7I,EAAeC,OAC3E,IAAII,EAAUgJ,cAAe,CAClC,GAAIzZ,GAAeyQ,EAAU/F,MAAMK,OAAOkO,aAAe,IAAMxI,EAAUgJ,cAAczO,IACvF,IAAI3hB,KAAK2lB,SAAS2F,IAAI3U,GAEpB,WADA3W,MAAKojB,MAAMmB,EAAAhC,eAAegJ,uBAAwBnE,EAAUgJ,cAAc/O,MAAO1K,EAGnF3W,MAAKojB,MAAMmB,EAAAhC,eAAeuL,wBAAyB1G,EAAU/F,SAIzDkE,EAAA/jB,UAAA2uB,iBAAR,SAAyBlH,EAAgC2G,EAAsB7I,EAAyCC,GACtH,GAAIrQ,GAAesS,EAAYwC,qBAC/B,IAAIzrB,KAAK2lB,SAAS2F,IAAI3U,GAEpB,WADA3W,MAAKojB,MAAMmB,EAAAhC,eAAegJ,uBAAwBtC,EAAYroB,KAAKygB,MAAO1K,EAI5E,IAGI8R,GAHAG,EAAiBgH,EAAelwB,EAAAilB,eAAiBsE,EAAYrS,aAAa+K,IAI9E,IAAI8G,EAAUzoB,KAAKN,QAAQyB,IAAIynB,GAE7B,WADA5oB,MAAK2lB,SAASkD,IAAIlS,EAAc8R,EAKlC,IAAI4H,GAAY3wB,EAAAilB,eAAiB,QAC7B+D,EAAe,GAAItD,EACvBsD,GAAa/R,aAAeA,EACxBiZ,EAAaU,SAASD,IACxB3H,EAAaE,eAAiBA,EAC9BF,EAAaK,kBAAoB6G,EAAaxN,UAAU,EAAGwN,EAAa5tB,OAASquB,EAAUruB,OAAS,GAAKinB,EAAYrS,aAAa+K,OAElI+G,EAAaE,eAAiBA,EAC9BF,EAAaK,kBAAoB6G,EAAeS,EAAY3wB,EAAAilB,eAAiBsE,EAAYrS,aAAa+K,MAExG+G,EAAaO,YAAcA,EAC3BjC,EAAcrjB,KAAK+kB,IAGbnD,EAAA/jB,UAAA0mB,oBAAR,SAA4Be,EAAmCuC,OAAA,KAAAA,MAAA,KAC7D,IAAI7U,GAAesS,EAAYwC,qBAC/B,IAAIzrB,KAAK2lB,SAAS2F,IAAI3U,GAEpB,WADA3W,MAAKojB,MAAMmB,EAAAhC,eAAegJ,uBAAwBtC,EAAYroB,KAAKygB,MAAO1K,EAG5E,IAAInV,GAAY,GAAI+uB,GAAmBvwB,KAAMipB,EAAYroB,KAAK+gB,KAAMhL,EAAcsS,EAMlF,IALAznB,EAAUgqB,UAAYA,EACtBxrB,KAAK2lB,SAASkD,IAAIlS,EAAcnV,GAEhCxB,KAAK2qB,wBAAwBnpB,EAAWynB,GAEpCuC,EAAW,CACb,GAAIA,EAAUO,SACZ,GAAIP,EAAUO,QAAQT,IAAI9pB,EAAUmV,cAElC,WADA3W,MAAKojB,MAAMmB,EAAAhC,eAAegJ,uBAAwBtC,EAAYroB,KAAKygB,MAAO1K,OAI5E6U,GAAUO,QAAU,GAAIzG,IAC1BkG,GAAUO,QAAQlD,IAAIrnB,EAAUmV,aAAcnV,OACzC,IAAIA,EAAU0pB,GAAGH,EAAaI,UAAW,CAC9C,GAAInrB,KAAKN,QAAQ4rB,IAAI3U,GAEnB,WADA3W,MAAKojB,MAAMmB,EAAAhC,eAAeyJ,4DAA6D/C,EAAYroB,KAAKygB,MAAO1K,EAGjH3W,MAAKN,QAAQmpB,IAAIlS,EAAcnV,GAIjC,IAAK,GADDyqB,GAAqBhD,EAAY8C,QAC5BzrB,EAAI,EAAG4B,EAAI+pB,EAAmBjqB,OAAQ1B,EAAI4B,IAAK5B,EAAG,CACzD,GAAI4rB,GAAoBD,EAAmB3rB,EAC3C,QAAQ4rB,EAAkB7E,MAExB,IAAK5C,GAAA6C,SAAS6E,iBACZnsB,KAAKosB,gBAAkCF,EAAmB1qB,EAC1D,MAEF,KAAKijB,GAAA6C,SAAS+E,kBACZ,GAAIC,IACCA,EAAW7H,EAAA8H,YAAY9H,EAAA+H,aAAaC,IAAKP,EAAkBQ,aAAejI,EAAA8H,YAAY9H,EAAA+H,aAAaG,IAAKT,EAAkBQ,WAC7H1sB,KAAK4sB,mBAAsCV,EAAmB1qB,EAAW8qB,GAEzEtsB,KAAK6sB,iBAAoCX,EAAmB1qB,EAC9D,MAEF,SACE,KAAM,IAAIsa,OAAM,gCAKhByJ,EAAA/jB,UAAA4mB,oBAAR,SAA4Ba,EAAmCuH,EAA0CC,OAAA,KAAAA,MAAA,KACvG,IAAI9Z,GAAesS,EAAYwC,sBAE3BD,EAAYxrB,KAAK2lB,SAASxkB,IAAIwV,EAQlC,IAPK6U,IACHA,EAAY,GAAIkF,GAAU1wB,KAAMipB,EAAYroB,KAAK+gB,KAAMhL,EAAcsS,GACrEuC,EAAUA,UAAYiF,EACtBzwB,KAAK2lB,SAASkD,IAAIlS,EAAc6U,GAChCxrB,KAAK2qB,wBAAwBa,EAAWvC,IAGtCwH,EAAiB,CACnB,GAAIA,EAAgB1E,SAClB,GAAI0E,EAAgB1E,QAAQT,IAAIrC,EAAYroB,KAAK+gB,MAE/C,WADA3hB,MAAKojB,MAAMmB,EAAAhC,eAAegJ,uBAAwBtC,EAAYroB,KAAKygB,MAAO1K,OAI5E8Z,GAAgB1E,QAAU,GAAIzG,IAChCmL,GAAgB1E,QAAQlD,IAAII,EAAYroB,KAAK+gB,KAAM6J,OAC9C,IAAIA,EAAUN,GAAGH,EAAaI,UAAW,CAC9C,GAAInrB,KAAKN,QAAQ4rB,IAAI3U,GAEnB,WADA3W,MAAKojB,MAAMmB,EAAAhC,eAAeyJ,4DAA6D/C,EAAYroB,KAAKygB,MAAO1K,EAGjH3W,MAAKN,QAAQmpB,IAAIlS,EAAc6U,GAIjC,IAAK,GADDO,GAAU9C,EAAY8C,QACjBzrB,EAAI,EAAG4B,EAAI6pB,EAAQ/pB,OAAQ1B,EAAI4B,IAAK5B,EAC3C,OAAQyrB,EAAQzrB,GAAG+mB,MAEjB,IAAK5C,GAAA6C,SAASC,iBACZvnB,KAAKwnB,gBAAkCuE,EAAQzrB,GAAIkwB,EAAwBhF,EAC3E,MAEF,KAAK/G,GAAA6C,SAASG,gBACZznB,KAAK0nB,eAAgCqE,EAAQzrB,GAAIkrB,EACjD,MAEF,KAAK/G,GAAA6C,SAASO,oBACZ7nB,KAAK8nB,mBAAwCiE,EAAQzrB,GAAIkrB,EACzD,MAEF,KAAK/G,GAAA6C,SAASW,qBACZjoB,KAAKkoB,oBAA0C6D,EAAQzrB,GAAIkrB,EAC3D,MAEF,KAAK/G,GAAA6C,SAASa,qBACZnoB,KAAKooB,oBAA0C2D,EAAQzrB,GAAIkwB,EAAwBhF,EACnF,MAEF,KAAK/G,GAAA6C,SAASe,gBAGZroB,KAAKojB,MAAMmB,EAAAhC,eAAeuL,wBAAyB/B,EAAQzrB,GAAG+gB,MAC9D,MAEF,KAAKoD,GAAA6C,SAASiB,SACZvoB,KAAKwoB,oBAAuCuD,EAAQzrB,GAAIkrB,EACxD,MAEF,SACE,KAAM,IAAI1P,OAAM,+BAKhByJ,EAAA/jB,UAAA8mB,oBAAR,SAA4BW,EAA8BuC,OAAA,KAAAA,MAAA,KAGxD,IAAI5qB,GAAOqoB,EAAYroB,KAAK+gB,IAC5B,IAAI3hB,KAAK4lB,MAAM0F,IAAI1qB,IAASZ,KAAK6lB,YAAYyF,IAAI1qB,GAE/C,WADAZ,MAAKojB,MAAMmB,EAAAhC,eAAegJ,uBAAwBtC,EAAYroB,KAAKygB,MAAOzgB,EAG5EZ,MAAK6lB,YAAYgD,IAAIjoB,EAAMqoB,EAAY0H,QAGjCpL,EAAA/jB,UAAAgnB,oBAAR,SAA4BpB,EAA8BoE,OAAA,KAAAA,MAAA,KAExD,KAAK,GADD0E,GAAe9I,EAAU8I,aACpB5vB,EAAI,EAAG4B,EAAIguB,EAAaluB,OAAQ1B,EAAI4B,IAAK5B,EAAG,CACnD,GAAI2oB,GAAciH,EAAa5vB,GAC3BqW,EAAesS,EAAYwC,qBAC/B,IAAIzrB,KAAK2lB,SAAS2F,IAAI3U,GACpB3W,KAAKojB,MAAMmB,EAAAhC,eAAegJ,uBAAwBtC,EAAYroB,KAAKygB,MAAO1K,OAD5E,CAKA,GAAIia,GAAS,GAAIzD,GAAOntB,KAAMipB,EAAYroB,KAAK+gB,KAAMhL,EAAcsS,EAAkCzE,EAAAyB,KAAKa,KAM1G,IALA8J,EAAOpF,UAAYA,EACnBxrB,KAAK2lB,SAASkD,IAAIlS,EAAcia,GAEhC5wB,KAAK2qB,wBAAwBiG,EAAQ3H,GAEjCuC,EAAW,CACb,GAAIA,EAAUO,SACZ,GAAIP,EAAUO,QAAQT,IAAIrC,EAAYroB,KAAK+gB,MAAO,CAChD3hB,KAAKojB,MAAMmB,EAAAhC,eAAegJ,uBAAwBtC,EAAYroB,KAAKygB,MAAO1K,EAC1E,eAGF6U,GAAUO,QAAU,GAAIzG,IAC1BkG,GAAUO,QAAQlD,IAAII,EAAYroB,KAAK+gB,KAAMiP,OACpCA,GAAO1F,GAAGH,EAAaI,YAC5BnrB,KAAKN,QAAQ4rB,IAAI3U,GACnB3W,KAAKojB,MAAMmB,EAAAhC,eAAegJ,uBAAwBtC,EAAYroB,KAAKygB,MAAO1K,GAE1E3W,KAAKN,QAAQmpB,IAAIlS,EAAcia,OAMvCrL,EAAA/jB,UAAAqvB,YAAA,SAAYC,EAAgBC,EAAyDC,OAAzD,KAAAD,MAAA,UAAyD,KAAAC,OAAA,EACnF,IAGIvI,GAHA/K,EAAaoT,EAAKlwB,KAAK+gB,KACvBsP,EAAYH,EAAKzP,MAAMK,OAAOkO,aAAelwB,EAAAilB,eAAiBmM,EAAKlwB,KAAK+gB,IAK5E,KAAK8G,EAAUzoB,KAAK2lB,SAASxkB,IAAI8vB,MAAgBxI,EAAUzoB,KAAK2lB,SAASxkB,IAAIuc,IAC3E,OAAQ+K,EAAQpB,MACd,IAAKkD,GAAYC,gBACf,GAAIsC,GAA4BrE,EAASyI,yBAAyBJ,EAAKK,cAAeJ,EAAyB,KAC/G,OAAOjE,GAAWA,EAASnb,KAAO,KAOxC,IAAK,GAFDzP,GAAI4uB,EAAKK,cAAcnvB,OACvB8N,EAAa,GAAIpM,OAAYxB,GACxB5B,EAAI,EAAGA,EAAI4B,IAAK5B,EAAG,CAC1B,GAAI8wB,GAAYpxB,KAAK6wB,YAAYC,EAAKK,cAAc7wB,GAAIywB,EAAyBC,EACjF,KAAKI,EACH,MAAO,KACTthB,GAAWxP,GAAK8wB,EAGlB,GAAIlvB,EAAG,CACL,GAAImvB,GAAc7M,EAAA8M,cAAcxhB,EAC5BuhB,GAAYrvB,SACdivB,GAAa,IAAMI,EAAc,IACjC3T,GAAc,IAAM2T,EAAc,SAE/B,IAAIN,EAAyB,CAClC,GAAIQ,GAAkBR,EAAwB5vB,IAAIuc,EAClD,IAAI6T,EACF,MAAOA,GAGX,GAAI5f,EAGJ,KAAKA,EAAO3R,KAAK4lB,MAAMzkB,IAAI8vB,MAAgBtf,EAAO3R,KAAK4lB,MAAMzkB,IAAIuc,IAC/D,MAAO/L,EAGT,IAAIgf,GAAQ3wB,KAAK6lB,YAAY1kB,IAAIuc,EACjC,OAAIiT,KAAUhf,EAAO3R,KAAK6wB,YAAYF,EAAO,KAAMK,IAC1Crf,GAELqf,GACFhxB,KAAKojB,MAAMmB,EAAAhC,eAAeqH,mBAAoBkH,EAAKlwB,KAAKygB,MAAO3D,GAE1D,OAIT6H,EAAA/jB,UAAAgwB,qBAAA,SAAqBC,EAAiCC,EAAsCX,EAAyDY,OAAzD,KAAAZ,MAAA,UAAyD,KAAAY,MAAA,KACnJ,IAAIC,GAAiBH,EAAezvB,OAChC6vB,EAAgBH,EAAoBA,EAAkB1vB,OAAS,CACnE,IAAI4vB,GAAkBC,EAKpB,MAJIA,GACF7xB,KAAKojB,MAAMmB,EAAAhC,eAAeuP,oCAAqCrN,EAAAqH,MAAM/J,KAAkB2P,EAAmB,GAAGrQ,MAAoBqQ,EAAmBG,EAAgB,GAAGxQ,OAAQuQ,EAAenQ,SAAS,IAAKoQ,EAAcpQ,SAAS,KAC5NkQ,GACP3xB,KAAKojB,MAAMmB,EAAAhC,eAAeuP,oCAAqCH,EAAsBtQ,MAAM0Q,MAAOH,EAAenQ,SAAS,IAAK,KAC1H,IAGT,KAAK,GADD0P,GAAgB,GAAIztB,OAAYkuB,GAC3BtxB,EAAI,EAAGA,EAAIsxB,IAAkBtxB,EAAG,CACvC,GAAIqR,GAAO3R,KAAK6wB,YAAyBa,EAAmBpxB,GAAIywB,GAAyB,EACzF,KAAKpf,EACH,MAAO,KAETwf,GAAc7wB,GAAKqR,EAErB,MAAOwf,IAIT5L,EAAA/jB,UAAA8oB,kBAAA,SAAkBuF,EAAkCmC,EAAqCC,OAAA,KAAAA,MAAA,KACvF,IAEIxJ,GACA+C,EAHA5qB,EAAOivB,EAAWlO,IAOtB,IAAIsQ,GAEF,GAAIA,EAAelG,UAAYtD,EAAUwJ,EAAelG,QAAQ5qB,IAAIP,KAAU6nB,EAAQpB,MAAQkD,EAAY2H,UACxG,OAAQC,IAAoBA,EAAkB,GAAIC,KAAoBvJ,IAAIJ,OAEvE,IAAIuJ,EAAoB,CAG7B,GAAIvJ,EAAUuJ,EAAmBK,KAAKC,eAAe1xB,GACnD,OAAQuxB,IAAoBA,EAAkB,GAAIC,KAAoBvJ,IAAIJ,EAG5E,IAAI+C,EAAYwG,EAAmBxwB,UAAUgqB,UAC3C,GACE,GAAI/C,EAAUzoB,KAAK2lB,SAASxkB,IAAIqqB,EAAU7U,aAAejX,EAAAslB,iBAAmBpkB,GAE1E,OAAQuxB,IAAoBA,EAAkB,GAAIC,KAAoBvJ,IAAIJ,SACrE+C,EAAYA,EAAUA,WAKnC,OAAI/C,EAAUzoB,KAAK2lB,SAASxkB,IAAI0uB,EAAWxO,MAAMK,OAAOkO,aAAelwB,EAAAilB,eAAiB/jB,KAC9EuxB,IAAoBA,EAAkB,GAAIC,KAAoBvJ,IAAIJ,IAGxEA,EAAUzoB,KAAK2lB,SAASxkB,IAAIP,KACtBuxB,IAAoBA,EAAkB,GAAIC,KAAoBvJ,IAAIJ,IAE5EzoB,KAAKojB,MAAMmB,EAAAhC,eAAeqH,mBAAoBiG,EAAWxO,MAAOzgB,GACzD,OAIT2kB,EAAA/jB,UAAA+wB,sBAAA,SAAsBC,EAA0CR,GAE9D,GAAIS,GAAmBD,EAAene,UACtC,MAAM8d,EAAkBnyB,KAAK0yB,kBAAkBD,EAAkBT,IAC/D,MAAO,KACT,IAIIW,GACAjJ,EALAhU,EAASyc,EAAgB1J,QAGzBkG,EAAe6D,EAAejxB,SAASogB,IAK3C,QAAQjM,EAAO2R,MAEb,IAAKkD,GAAYc,OACjB,IAAKd,GAAYqI,MACjB,IAAKrI,GAAYsI,MACf,KAAMF,EAAmCjd,EAAQ/D,MAAMmhB,UAErD,MADA9yB,MAAKojB,MAAMmB,EAAAhC,eAAewQ,oCAAqCP,EAAejxB,SAAS8f,MAAOsN,EAAcgE,EAAWlR,YAChH,IAET/L,GAAgBid,EAAWG,SAC3B,MAEF,KAAKvI,GAAYuE,SACf,GAAIjuB,GAASqpB,OAAkBxU,EAAQqZ,iBAAiBhC,SACxD,KAAKlsB,EACH,MAAO,KACT,MAAM8xB,EAAa9xB,EAAO8U,YAAYmd,UAEpC,MADA9yB,MAAKojB,MAAMmB,EAAAhC,eAAewQ,oCAAqCP,EAAejxB,SAAS8f,MAAOsN,EAAcgE,EAAWlR,YAChH,IAET/L,GAAgBid,EAAWG,UAK/B,OAAQpd,EAAO2R,MAEb,IAAKkD,GAAYC,gBACjB,IAAKD,GAAYyI,MACf,OAAG,CACD,GAAItd,EAAOqW,UAAYrC,EAAShU,EAAOqW,QAAQ5qB,IAAIwtB,IACjD,MAAOwD,GAAgBtJ,IAAIa,GAAQuJ,WAAWvd,EAAQ+c,EAExD,IAAI/c,EAAO2R,MAAQkD,EAAYC,gBAAiB,CAC9C,IAAqB9U,EAAQgV,cAG3B,KAFAhV,GAA0CA,EAAQgV,kBAI/C,IAAIhV,EAAO2R,MAAQkD,EAAYyI,MAMpC,KALA,KAAYtd,EAAQwd,KAGlB,KAFAxd,GAAwBA,EAAQwd,MAMtC,KAEF,SACE,GAAIxd,EAAOqW,UAAYrC,EAAShU,EAAOqW,QAAQ5qB,IAAIwtB,IACjD,MAAOwD,GAAgBtJ,IAAIa,GAAQuJ,WAAWvd,EAAQ+c,GAK5D,MADAzyB,MAAKojB,MAAMmB,EAAAhC,eAAewQ,oCAAqCP,EAAejxB,SAAS8f,MAAOsN,EAAcjZ,EAAOiB,cAC5G,MAGT4O,EAAA/jB,UAAA2xB,qBAAA,SAAqBC,EAAwCpB,GAE3D,GAAIS,GAAmBW,EAAc/e,UACrC,MAAM8d,EAAkBnyB,KAAK0yB,kBAAkBD,EAAkBT,IAC/D,MAAO,KACT,IAAItc,GAASyc,EAAgB1J,OAC7B,QAAQ/S,EAAO2R,MAEb,IAAKkD,GAAYc,OACjB,IAAKd,GAAYqI,MACjB,IAAKrI,GAAYsI,MACf,GAAIlhB,GAA6B+D,EAAQ/D,IACzC,IAAIA,EAAKmhB,UAAW,CAClB,GACIO,GADAC,GAAkB5d,EAAS/D,EAAKmhB,WAAWtxB,UAAU4sB,YAEzD,IAAsB,MAAlBkF,GAA0B5d,EAAOqW,UAAYsH,EAAa3d,EAAOqW,QAAQ5qB,IAAImyB,KAAoBD,EAAWhM,MAAQkD,EAAYgJ,mBAClI,MAAOpB,GAAgBtJ,IAAIwK,GAAYJ,WAAWthB,EAAKmhB,UAAWL,IAK1E,MADAzyB,MAAKojB,MAAMmB,EAAAhC,eAAeiR,qCAAsCf,EAAiBpR,MAAO3L,EAAOiB,cACxF,MAGT4O,EAAA/jB,UAAAkxB,kBAAA,SAAkBre,EAAwB2d,GAGxC,IAFA,GAAIc,GAEGze,EAAWgT,MAAQ5C,EAAA6C,SAASmM,eACjCpf,EAAuCA,EAAYA,UAErD,QAAQA,EAAWgT,MAEjB,IAAK5C,GAAA6C,SAASoM,UACZ,GAAI/hB,GAAO3R,KAAK6wB,YAAkCxc,EAAYsf,OAC9D,OAAIhiB,KAASmhB,EAAYnhB,EAAKmhB,YACpBX,IAAoBA,EAAkB,GAAIC,KAAoBvJ,IAAIiK,GACrE,IAET,KAAKrO,GAAA6C,SAASsM,OAEZ,KAAM,IAAI9X,OAAM,kBAElB,KAAK2I,GAAA6C,SAASuM,KACZ,OAAIf,EAAYd,EAAmB8B,mBACzB3B,IAAoBA,EAAkB,GAAIC,KAAoBvJ,IAAIiK,IAC5E9yB,KAAKojB,MAAMmB,EAAAhC,eAAewR,+CAAgD1f,EAAWgN,OAC9E,KAET,KAAKoD,GAAA6C,SAAS0M,MACZ,OAAKlB,EAAYd,EAAmB8B,oBAAsBhB,EAAYA,EAAUI,OACtEf,IAAoBA,EAAkB,GAAIC,KAAoBvJ,IAAIiK,IAC5E9yB,KAAKojB,MAAMmB,EAAAhC,eAAe0R,iDAAkD5f,EAAWgN,OAChF,KAET,KAAKoD,GAAA6C,SAAS4M,WACZ,MAAOl0B,MAAKsqB,kBAAwCjW,EAAY2d,EAElE,KAAKvN,GAAA6C,SAAS6M,eACZ,MAAOn0B,MAAKuyB,sBAAgDle,EAAY2d,EAE1E,KAAKvN,GAAA6C,SAAS8M,cACZ,MAAOp0B,MAAKmzB,qBAA8C9e,EAAY2d,EAExE,KAAKvN,GAAA6C,SAAS+M,KACZ,GAAIhK,GAAWrqB,KAAK0yB,kBAAmCre,EAAYA,WAAY2d,EAC/E,IAAI3H,EAAU,CACZ,GAAI5B,GAAU4B,EAAS5B,OACvB,IAAIA,GAAWA,EAAQpB,MAAQkD,EAAYgJ,mBAAoB,CAC7D,GAAIzG,GAA+BrE,EAASyI,yBAA0C7c,EAAY8c,cAAe,KAAM9c,EACvH,IAAIyY,GAAYA,EAASnX,WAAWmd,UAClC,OAAQX,IAAoBA,EAAkB,GAAIC,KAAoBvJ,IAAIiE,EAASnX,WAAWmd,aAMxG,MADA9yB,MAAKojB,MAAMmB,EAAAhC,eAAeuL,wBAAyBzZ,EAAWgN,OACvD,MAEXkE,GA7lC6BhB,EAAAtB,kBAAhBvjB,GAAA6lB,SAgmCb,IAAA6M,GAAA,mBAAAA,MAuBA,MAbEA,GAAA5wB,UAAAqnB,IAAA,SAAIJ,GAIF,MAHAzoB,MAAK0V,OAAS,KACd1V,KAAKyyB,iBAAmB,KACxBzyB,KAAKyoB,QAAUA,EACRzoB,MAIToyB,EAAA5wB,UAAAyxB,WAAA,SAAWvd,EAAiB+c,GAG1B,MAFAzyB,MAAK0V,OAASA,EACd1V,KAAKyyB,iBAAmBA,EACjBzyB,MAEXoyB,IAvBa1yB,GAAA0yB,iBA0Bb,IAAID,GAGQ5H,GAAZ,SAAYA,GAEVA,IAAA,mBAEAA,IAAA,iBAEAA,IAAA,eAEAA,IAAA,yBAEAA,IAAA,2CAEAA,IAAA,uBAEAA,IAAA,qCAEAA,IAAA,iBAEAA,IAAA,6CAEAA,IAAA,yBAEAA,IAAA,sCAEAA,IAAA,kBAEAA,IAAA,wBAEAA,IAAA,2BA5BUA,EAAA7qB,EAAA6qB,cAAA7qB,EAAA6qB,gBAgCZ,IAAYQ,IAAZ,SAAYA,GAEVA,IAAA,eAEAA,IAAA,uBAEAA,IAAA,uBAEAA,IAAA,uBAEAA,IAAA,qBAEAA,IAAA,wBAEAA,IAAA,sBAEAA,IAAA,wBAEAA,IAAA,uBAEAA,IAAA,yBAEAA,IAAA,qBAEAA,IAAA,sBAEAA,IAAA,sBAEAA,IAAA,0BAEAA,IAAA,sBAEAA,IAAA,6BAEAA,IAAA,yBAEAA,IAAA,2BAEAA,IAAA,kCAEAA,IAAA,8BAEAA,IAAA,wBAEAA,IAAA,wBA5CUA,EAAArrB,EAAAqrB,eAAArrB,EAAAqrB,iBAgDZ,IAAAuJ,GAAA,WAkBE,QAAAA,GAAsBC,EAAkBlG,EAAoB1X,GAP5D3W,KAAAw0B,MAAsBzJ,EAAa0J,KAEnCz0B,KAAA+rB,QAAsC,KAEtC/rB,KAAAwrB,UAA4B,KAI1BxrB,KAAKu0B,QAAUA,EACfv0B,KAAKquB,WAAaA,EAClBruB,KAAK2W,aAAeA,EAQxB,MAJE2d,GAAA9yB,UAAA0pB,GAAA,SAAGwJ,GAA4B,OAAQ10B,KAAKw0B,MAAQE,IAASA,GAG7DJ,EAAA9yB,UAAAqnB,IAAA,SAAI6L,GAA4B10B,KAAKw0B,OAASE,GAChDJ,IA7BsB50B,GAAA40B,SAgCtB,IAAA5D,GAAA,SAAAlL,GASE,QAAAkL,GAAY6D,EAAkBlG,EAAoB1X,EAAsBsS,GAAxE,GAAAxD,GACED,EAAAhlB,KAAAR,KAAMu0B,EAASlG,EAAY1X,IAAa3W,IAExC,IATFylB,EAAA4B,KAAOkD,EAAYoK,UAQjBlP,EAAKwD,YAAcA,EACfxD,EAAKwD,YAAYyD,UACnB,IAAK,GAAIpsB,GAAI,EAAG4B,EAAIujB,EAAKwD,YAAYyD,UAAU1qB,OAAQ1B,EAAI4B,IAAK5B,EAC9D,OAAQmlB,EAAKwD,YAAYyD,UAAUpsB,GAAGs0B,cACpC,IAAKnQ,GAAA+H,aAAazE,OAAQtC,EAAKoD,IAAIkC,EAAa8J,SAAW,MAC3D,KAAKpQ,GAAA+H,aAAa7E,OAAQlC,EAAKoD,IAAIkC,EAAaI,SAAW,MAC3D,KAAK1G,GAAA+H,aAAasI,QAASrP,EAAKoD,IAAIkC,EAAagK,SAAW,MAC5D,SAAS,KAAM,IAAIjZ,OAAM,uBJ8mC3B,MAAO2J,GIzmCf,MAvB+BlC,GAAAmN,EAAAlL,GAuB/BkL,GAvB+B4D,EAAlB50B,GAAAgxB,WA0Bb,IAAAnB,GAAA,SAAA/J,GAQE,QAAA+J,GAAYgF,EAAkBlG,EAAoB1X,EAAsBsS,GAAxE,GAAAxD,GACED,EAAAhlB,KAAAR,KAAMu0B,EAASlG,EAAY1X,IAAa3W,IAExC,IATFylB,EAAA4B,KAAOkD,EAAYyK,KAQjBvP,EAAKwD,YAAcA,EACfxD,EAAKwD,YAAYyD,UACnB,IAAK,GAAIpsB,GAAI,EAAG4B,EAAIujB,EAAKwD,YAAYyD,UAAU1qB,OAAQ1B,EAAI4B,IAAK5B,EAC9D,OAAQmlB,EAAKwD,YAAYyD,UAAUpsB,GAAGs0B,cACpC,IAAKnQ,GAAA+H,aAAa7E,OAAQlC,EAAKoD,IAAIkC,EAAaI,SAAW,MAC3D,KAAK1G,GAAA+H,aAAazE,OAAQtC,EAAKoD,IAAIkC,EAAa8J,SAAW,MAC3D,KAAKpQ,GAAA+H,aAAasI,QAASrP,EAAKoD,IAAIkC,EAAagK,SAAW,MAC5D,KAAKtQ,GAAA+H,aAAayI,MAAOxP,EAAKoD,IAAIkC,EAAamK,SAAW,MAC1D,SAAS,KAAM,IAAIpZ,OAAM,uBJonC3B,MAAO2J,GI/mCf,MAvB0BlC,GAAAgM,EAAA/J,GAuB1B+J,GAvB0B+E,EAAb50B,GAAA6vB,MA0Bb,IAAAG,GAAA,SAAAlK,GAWE,QAAAkK,GAAYJ,EAAWiF,EAAkBlG,EAAoB1X,EAAsBsS,GAAnF,GAAAxD,GACED,EAAAhlB,KAAAR,KAAMu0B,EAASlG,EAAY1X,IAAa3W,IJ+mCpC,OIznCNylB,GAAA4B,KAAOkD,EAAY2H,UAOnBzM,EAAA0P,cAAqB,EAInB1P,EAAK2P,KAAO9F,EACZ7J,EAAKwD,YAAcA,EJ6mCRxD,EI3mCf,MAhB+BlC,GAAAmM,EAAAlK,GAgB/BkK,GAhB+B4E,EAAlB50B,GAAAgwB,aAkBb,SAAkB2F,GAChBA,IAAA,eACAA,IAAA,qBACAA,IAAA,kBAHgB31B,EAAA21B,oBAAA31B,EAAA21B,sBAMlB,IAAAC,GAAA,SAAA9P,GAAA,QAAA8P,KAAA,GAAA7P,GAAA,OAAAD,KAAA+P,MAAAv1B,KAAAguB,YAAAhuB,IJqnCQ,OI5mCNylB,GAAA+P,kBAAiB,EJ4mCJ/P,EIzlCf,MA5ByClC,GAAA+R,EAAA9P,GAevC8P,EAAA9zB,UAAAi0B,yBAAA,SAAyBllB,EAASC,GAIhC,MAHAxQ,MAAKw1B,kBAAiB,EACtBx1B,KAAK01B,qBAAuBC,QAAQplB,EAAIC,GACxCxQ,KAAK6oB,IAAIkC,EAAamK,SAAWnK,EAAa6K,SACvC51B,MAGTs1B,EAAA9zB,UAAAq0B,uBAAA,SAAuB/xB,GAIrB,MAHA9D,MAAKw1B,kBAAiB,EACtBx1B,KAAK81B,mBAAqBhyB,EAC1B9D,KAAK6oB,IAAIkC,EAAamK,SAAWnK,EAAa6K,SACvC51B,MAEXs1B,GA5ByChB,EAA5B50B,GAAA41B,qBA+Bb,IAAAnI,GAAA,SAAA3H,GAIE,QAAA2H,GAAYoH,EAAkBlG,EAAoB1X,EAAsBsS,EAA+CtX,GAAvH,GAAA8T,GACED,EAAAhlB,KAAAR,KAAMu0B,EAASlG,EAAY1X,IAAa3W,IAExC,IALFylB,EAAA4B,KAAOkD,EAAYc,OAIjB5F,EAAKwD,YAAcA,EACfxD,EAAKwD,YAAYyD,UACnB,IAAK,GAAIpsB,GAAI,EAAG4B,EAAIujB,EAAKwD,YAAYyD,UAAU1qB,OAAQ1B,EAAI4B,IAAK5B,EAC9D,OAAQmlB,EAAKwD,YAAYyD,UAAUpsB,GAAGs0B,cACpC,IAAKnQ,GAAA+H,aAAazE,OAAQtC,EAAKoD,IAAIkC,EAAa8J,SAAW,MAC3D,KAAKpQ,GAAA+H,aAAa7E,OAAQlC,EAAKoD,IAAIkC,EAAaI,SAAW,MAC3D,KAAK1G,GAAA+H,aAAayI,MAAOxP,EAAKoD,IAAIkC,EAAamK,SAAW,MAC1D,KAAKzQ,GAAA+H,aAAauJ,IAAKtQ,EAAKoD,IAAIkC,EAAaiL,OAAS,MACtD,KAAKvR,GAAA+H,aAAasI,QAASrP,EAAKoD,IAAIkC,EAAagK,SAAW,MAC5D,KAAKtQ,GAAA+H,aAAayJ,SAAUxQ,EAAKoD,IAAIpD,EAAKwD,YAAY9S,YAAc4U,EAAamK,SAAWnK,EAAakL,SAAWlL,EAAakL,SAAW,MAC5I,KAAKxR,GAAA+H,aAAa0J,OAClB,IAAKzR,GAAA+H,aAAa2J,QAClB,IAAK1R,GAAA+H,aAAa4J,UAClB,IAAK3R,GAAA+H,aAAaS,OAAQ,KAC1B,SAAS,KAAM,IAAInR,OAAM,uBJwnC3B,MIpnCJ2J,GAAK9T,KAAOA,EJonCD8T,EIlnCf,MA1B4BlC,GAAA4J,EAAA3H,GA0B5B2H,GA1B4BmI,EAAf51B,GAAAytB,QA6Bb,IAAAkJ,GAAA,WAYE,QAAAA,GAAYz1B,EAAc+Q,EAAYwE,OAAA,KAAAA,MAAA,MACpCnW,KAAKY,KAAOA,EACZZ,KAAK2R,KAAOA,EACZ3R,KAAKmW,YAAcA,EAEvB,MAAAkgB,KAjBa32B,GAAA22B,WAoBb,IAAAC,GAAA,SAAA9Q,GAOE,QAAA8Q,GAAY/B,EAAkBlG,EAAoB3c,EAAYC,GAA9D,GAAA8T,GACED,EAAAhlB,KAAAR,KAAMu0B,EAASlG,EAAYA,IAAWruB,IJ4mClC,OIlnCNylB,GAAA4B,KAAOkD,EAAYqI,MAOjBnN,EAAK/T,MAAQA,EACb+T,EAAK9T,KAAOA,EJ0mCD8T,EIxmCf,MAZ2BlC,GAAA+S,EAAA9Q,GAY3B8Q,GAZ2BhB,EAAd51B,GAAA42B,OAeb,IAAA9I,GAAA,SAAAhI,GAcE,QAAAgI,GAAY+G,EAAkBlG,EAAoB1X,EAAsBsS,EAAkC+D,OAAA,KAAAA,MAAA,KAA1G,IAAAvH,GACED,EAAAhlB,KAAAR,KAAMu0B,EAASlG,EAAY1X,IAAa3W,IAExC,IAfFylB,EAAA4B,KAAOkD,EAAYgJ,mBAOnB9N,EAAA8Q,UAAkC,GAAIjR,KAEtCG,EAAA+Q,mBAAoC,KAKlC/Q,EAAKwD,YAAcA,EACfxD,EAAKwD,YAAYyD,UACnB,IAAK,GAAIpsB,GAAI,EAAG4B,EAAIujB,EAAKwD,YAAYyD,UAAU1qB,OAAQ1B,EAAI4B,IAAK5B,EAC9D,OAAQmlB,EAAKwD,YAAYyD,UAAUpsB,GAAGs0B,cACpC,IAAKnQ,GAAA+H,aAAazE,OAAQtC,EAAKoD,IAAIkC,EAAa8J,SAAW,MAC3D,KAAKpQ,GAAA+H,aAAa7E,OAAQlC,EAAKoD,IAAIkC,EAAaI,SAAW,MAC3D,KAAK1G,GAAA+H,aAAasI,QAASrP,EAAKoD,IAAIkC,EAAagK,SAAW,MAC5D,KAAKtQ,GAAA+H,aAAaC,IAAKhH,EAAKoD,IAAIkC,EAAa0L,OAAS,MACtD,KAAKhS,GAAA+H,aAAaG,IAAKlH,EAAKoD,IAAIkC,EAAa2L,OAAS,MACtD,KAAKjS,GAAA+H,aAAaS,OAClB,IAAKxI,GAAA+H,aAAamK,SAClB,IAAKlS,GAAA+H,aAAa2J,QAClB,IAAK1R,GAAA+H,aAAa4J,UAClB,IAAK3R,GAAA+H,aAAa0J,OAAQ,KAC1B,SAAS,KAAM,IAAIpa,OAAM,uBJunC3B,MIpnCA2J,GAAKwD,YAAYwI,eAAezvB,QAClCyjB,EAAKoD,IAAIkC,EAAa6L,UACpBnR,EAAKuH,eAAiBA,IACxBvH,EAAKoD,IAAIkC,EAAa8L,UJinCbpR,EIjgCf,MApJuClC,GAAAiK,EAAAhI,GAuCrCgI,EAAAhsB,UAAAurB,QAAA,SAAQ+J,EAA6C/F,OAA7C,KAAA+F,MAAA,UAA6C,KAAA/F,MAAA,KACnD,IAAIM,GAAcyF,EAAwBtS,EAAA8M,cAAcwF,GAAyB,GAC7EhK,EAAW9sB,KAAKu2B,UAAUp1B,IAAIkwB,EAClC,IAAIvE,EACF,MAAOA,EAET,IAAI7D,GAAcjpB,KAAKipB,YAGnB8N,EAAyBhG,CAE7B,IADAA,EAA0B,GAAIzL,KAC1ByR,EJinCI,IIhnCN,IAA2C,GAAAC,GAAAlT,EAAAiT,GAAsBE,EAAAD,EAAA/S,QAAAgT,EAAA/S,KAAA+S,EAAAD,EAAA/S,OAAA,CAAxD,GAAAqF,GAAAnF,EAAA8S,EAAAnzB,MAAA,GAACozB,EAAA5N,EAAA,GAAe6N,EAAA7N,EAAA,EACvByH,GAAwBlI,IAAIqO,EAAeC,IJqnCvC,MAAOC,GAASC,GAAQjU,MAAOgU,GAC/B,QACI,IACQH,IAA+BA,EAA2B/S,OAAS6F,EAAKiN,EAAyBhN,SAASD,EAAGvpB,KAAKw2B,GAE1H,QAAU,GAAIK,EAAK,KAAMA,GAAIjU,OIxnCzC,GAAI9iB,GAAQ4B,CAGZ,IAAIlC,KAAKw2B,mBAAoB,CAC3B,IAAKx2B,KAAKgtB,eACR,KAAM,IAAIlR,OAAM,wEAClB,IAAIwb,GAAoCt3B,KAAKgtB,eAAgB/D,YACzDsO,EAAsBD,EAAiB7F,cAC3C,KAAKvvB,EAAIlC,KAAKw2B,mBAAmBx0B,SAAWu1B,EAAoBv1B,OAC9D,KAAM,IAAI8Z,OAAM,+BAClB,KAAKxb,EAAI,EAAGA,EAAI4B,IAAK5B,EACnBywB,EAAwBlI,IAAI0O,EAAoBj3B,GAAGM,KAAK+gB,KAAM3hB,KAAKw2B,mBAAmBl2B,IAI1F,GAAIk3B,GAAyBvO,EAAYwI,cACzC,IAAIqF,IAA0B50B,EAAI40B,EAAsB90B,QAAS,CAC/D,GAAIE,GAAKs1B,EAAuBx1B,OAC9B,KAAM,IAAI8Z,OAAM,+BAClB,KAAKxb,EAAI,EAAGA,EAAI4B,IAAK5B,EACnBywB,EAAwBlI,IAAI2O,EAAuBl3B,GAAGM,KAAK+gB,KAAMmV,EAAsBx2B,IAK3F4B,EAAI+mB,EAAYwO,WAAWz1B,MAC3B,IAEI01B,GAFAD,EAAa,GAAI/zB,OAAiBxB,GAClCy1B,EAAiB,GAAIj0B,OAAYxB,EAErC,KAAK5B,EAAI,EAAGA,EAAI4B,IAAK5B,EAAG,CACtB,GAAIs3B,GAAuB3O,EAAYwO,WAAWn3B,EAClDo3B,GAAWxN,OAAO0N,EAAqBjmB,KACvC,IAAIkmB,GAAgB73B,KAAKu0B,QAAQ1D,YAAY6G,EAAU3G,GAAyB,EAChF,KAAI8G,EAIF,MAAO,KAHPJ,GAAWn3B,GAAK,GAAI+1B,GAAUuB,EAAqBh3B,KAAK+gB,KAAMkW,EAAeD,EAAqBzhB,aAClGwhB,EAAer3B,GAAKu3B,EAKxB,GAAIlhB,GAAe3W,KAAK2W,YACpB0a,GAAYrvB,SACd2U,GAAgB,IAAM0a,EAAc,IACtC,IAAIyG,GAA8B,IAClC,IAAI93B,KAAKgtB,kBACP8K,EAAgB93B,KAAKgtB,eAAeD,QAAQ/sB,KAAKw2B,mBAAoBzF,IAEnE,MAAO,KAKX,IAAIpb,EACJ,IAAI3V,KAAKkrB,GAAGH,EAAa2L,SAAW12B,KAAKkrB,GAAGH,EAAawC,aACvD5X,EAAa6O,EAAAyB,KAAKa,SACb,CACL4Q,EAAWxN,OAAOjB,EAAYtT,WAC9B,IAAIhE,GAAO3R,KAAKu0B,QAAQ1D,YAAsB6G,EAAU3G,GAAyB,EACjF,KAAIpf,EAGF,MAAO,KAFPgE,GAAahE,EAQjB,MAHAmb,GAAW,GAAIiL,GAAS/3B,KAAM2W,EAAcmgB,EAAuBW,EAAY9hB,EAAYmiB,GAC3FhL,EAASiE,wBAA0BA,EACnC/wB,KAAKu2B,UAAU1N,IAAIwI,EAAavE,GACzBA,CJunCH,IAAIuK,GAAKtN,GIpnCfyD,EAAAhsB,UAAA0vB,yBAAA,SAAyBQ,EAAsCX,EAAkDiH,GAC/G,GAAIC,GAAuC,IAC3C,QAAIj4B,KAAKkrB,GAAGH,EAAa6L,WACvB1M,OAA4B,MAArBwH,GAAyD,GAA5BA,EAAkB1vB,QACtDi2B,EAAwBj4B,KAAKu0B,QAAQ/C,qBAAqBxxB,KAAKipB,YAAYwI,eAAgBC,EAAmBX,EAAyBiH,IAIlIh4B,KAAK+sB,QAAQkL,EAAuBlH,GAFhC,MAKbvD,EAAAhsB,UAAA02B,eAAA,SAAe1B,GACb,IAAKx2B,KAAKgtB,eACR,KAAM,IAAIlR,OAAM,wEAClB,IAAI0a,GAAsBA,EAAmBx0B,OAAQ,CACnD,GAAIm2B,GAAmB,GAAI3K,GAAkBxtB,KAAKu0B,QAASv0B,KAAKquB,WAAYruB,KAAK2W,aAAc3W,KAAKipB,YAAajpB,KAAKgtB,eAGtH,OAFAmL,GAAiB3D,MAAQx0B,KAAKw0B,MAC9B2D,EAAiB3B,mBAAqBA,EAC/B2B,EAET,MAAOn4B,OAGTwtB,EAAAhsB,UAAAigB,SAAA,WAAqB,MAAOzhB,MAAKquB,YACnCb,GApJuC8G,EAA1B50B,GAAA8tB,mBAuJb,IAAAuK,GAAA,SAAAvS,GA+BE,QAAAuS,GAAYv2B,EAA8BmV,EAAsBwa,EAA8BsG,EAAyB9hB,EAAkBme,GAAzI,GAAArO,GACED,EAAAhlB,KAAAR,KAAMwB,EAAU+yB,QAAS/yB,EAAU6sB,WAAY1X,IAAa3W,IAO5D,IArCFylB,EAAA4B,KAAOkD,EAAY6N,SAanB3S,EAAA4S,OAA4B,GAAI/S,KAEhCG,EAAA6S,oBAEA7S,EAAA8S,aAA8B,KAM9B9S,EAAA+S,eAAiC,KAEzB/S,EAAAgT,YAAmB,EACnBhT,EAAAiT,WAA2B,KAgD3BjT,EAAAkT,SAA2B,KAC3BlT,EAAAmT,SAA2B,KAC3BnT,EAAAoT,SAA2B,KAC3BpT,EAAAqT,SAA2B,KA9CjCrT,EAAKjkB,UAAYA,EACjBikB,EAAK0L,cAAgBA,EACrB1L,EAAKgS,WAAaA,EAClBhS,EAAK9P,WAAaA,EAClB8P,EAAKqO,iBAAmBA,EACxBrO,EAAK+O,MAAQhzB,EAAUgzB,OACjBhzB,EAAU0pB,GAAGH,EAAaC,WAAYxpB,EAAU0pB,GAAGH,EAAagK,UAAY,CAChF,GAAIgE,GAAa,CACjB,IAAIjF,GAGF,GAFA5J,OAAOzE,EAAKyF,GAAGH,EAAa8L,WAC5BpR,EAAK4S,OAAOxP,IAAI,OAAQ,GAAIyN,GAAM90B,EAAU+yB,QAAS,OAAQwE,IAAcjF,EAAiBniB,OACxFmiB,EAAiB/C,wBAAyB,CACvCtL,EAAKsL,0BACRtL,EAAKsL,wBAA0B,GAAIzL,KJymC3B,KIxmCV,IAA2C,GAAAgE,GAAAxF,EAAAgQ,EAAiB/C,yBAAuBhH,EAAAT,EAAArF,QAAA8F,EAAA7F,KAAA6F,EAAAT,EAAArF,OAAA,CAA1E,GAAA+U,GAAA7U,EAAA4F,EAAAjmB,MAAA,GAACozB,EAAA8B,EAAA,GAAe7B,EAAA6B,EAAA,EACvBvT,GAAKsL,wBAAwBlI,IAAIqO,EAAeC,IJ6mCxC,MAAO8B,GAASC,GAAQ9V,MAAO6V,GAC/B,QACI,IACQlP,IAAOA,EAAG7F,OAASiV,EAAK7P,EAAGU,SAASmP,EAAG34B,KAAK8oB,GAEpD,QAAU,GAAI4P,EAAK,KAAMA,GAAI9V,aI/mC7C8G,SAAQzE,EAAKyF,GAAGH,EAAa8L,UAC/B,KAAK,GAAIv2B,GAAI,EAAG4B,EAAIu1B,EAAWz1B,OAAQ1B,EAAI4B,IAAK5B,EAAG,CACjD,GAAI84B,GAAY3B,EAAWn3B,GACvB+4B,EAAgBnP,OAAOkP,EAAUx4B,KAAM,0BAC3C6kB,GAAK4S,OAAOxP,IAAIwQ,EAAe,GAAI/C,GAAM90B,EAAU+yB,QAAS8E,EAAeN,IAAcK,EAAUznB,QJwnCnG,MIrnCJ8T,GAAK4M,KAAOiH,EAAKvqB,OAAO0W,GJqnCbA,CACP,IAAIyT,GAAKC,EIhgCjB,MAhL8B5V,GAAAwU,EAAAvS,GA8D5BuS,EAAAv2B,UAAA+3B,SAAA,SAAS5nB,EAAY/Q,OAAA,KAAAA,MAAA,KAEnB,IAAIm4B,GAAa/4B,KAAKy3B,WAAWz1B,OAAShC,KAAKs4B,iBAAiBt2B,MAC5DhC,MAAKkrB,GAAGH,EAAa8L,WAAWkC,GACpC,IAAIS,GAAQ,GAAIlD,GAAMt2B,KAAKwB,UAAU+yB,QAAS3zB,GAAc,aAAem4B,EAAWtX,SAAS,IAAKsX,EAAYpnB,EAChH,IAAI/Q,EAAM,CACR,GAAIZ,KAAKq4B,OAAO/M,IAAI1qB,GAClB,KAAM,IAAIkb,OAAM,uBAClB9b,MAAKq4B,OAAOxP,IAAIjoB,EAAM44B,GAGxB,MADAx5B,MAAKs4B,iBAAiB30B,KAAKgO,GACpB6nB,GASTzB,EAAAv2B,UAAAi4B,aAAA,SAAa9nB,GACX,GAAI+nB,EACJ,QAAQ/nB,EAAKgoB,gBACX,IAAKjV,GAAA3gB,WAAW+Y,IAAK4c,EAAQ15B,KAAK24B,QAAU,MAC5C,KAAKjU,GAAA3gB,WAAWiZ,IAAK0c,EAAQ15B,KAAK44B,QAAU,MAC5C,KAAKlU,GAAA3gB,WAAWoZ,IAAKuc,EAAQ15B,KAAK64B,QAAU,MAC5C,KAAKnU,GAAA3gB,WAAWsZ,IAAKqc,EAAQ15B,KAAK84B,QAAU,MAC5C,SAAS,KAAM,IAAIhd,OAAM,0BAE3B,GAAI4d,GAASA,EAAM13B,OAAQ,CACzB,GAAIgB,GAAM02B,EAAME,KAEhB,OADA52B,GAAI2O,KAAOA,EACJ3O,EAET,MAAOhD,MAAKu5B,SAAS5nB,IAIvBomB,EAAAv2B,UAAAq4B,cAAA,SAAcL,GACZ,GAAIE,EAEJ,QADAxP,OAAqB,MAAdsP,EAAM7nB,MACE6nB,EAAM7nB,KAAMgoB,gBACzB,IAAKjV,GAAA3gB,WAAW+Y,IAAK4c,EAAQ15B,KAAK24B,WAAa34B,KAAK24B,YAAgB,MACpE,KAAKjU,GAAA3gB,WAAWiZ,IAAK0c,EAAQ15B,KAAK44B,WAAa54B,KAAK44B,YAAgB,MACpE,KAAKlU,GAAA3gB,WAAWoZ,IAAKuc,EAAQ15B,KAAK64B,WAAa74B,KAAK64B,YAAgB,MACpE,KAAKnU,GAAA3gB,WAAWsZ,IAAKqc,EAAQ15B,KAAK84B,WAAa94B,KAAK84B,YAAgB,MACpE,SAAS,KAAM,IAAIhd,OAAM,0BAE3B4d,EAAM/1B,KAAK61B,IAIbzB,EAAAv2B,UAAAs4B,oBAAA,SAAoBnoB,GAClB,GAAI+nB,EACJ,QAAQ/nB,EAAKgoB,gBACX,IAAKjV,GAAA3gB,WAAW+Y,IAAK4c,EAAQ15B,KAAK24B,WAAa34B,KAAK24B,YAAgB,MACpE,KAAKjU,GAAA3gB,WAAWiZ,IAAK0c,EAAQ15B,KAAK44B,WAAa54B,KAAK44B,YAAgB,MACpE,KAAKlU,GAAA3gB,WAAWoZ,IAAKuc,EAAQ15B,KAAK64B,WAAa74B,KAAK64B,YAAgB,MACpE,KAAKnU,GAAA3gB,WAAWsZ,IAAKqc,EAAQ15B,KAAK84B,WAAa94B,KAAK84B,YAAgB,MACpE,SAAS,KAAM,IAAIhd,OAAM,0BAE3B,GAAI4d,EAAM13B,OAAS,EACjB,MAAO03B,GAAMA,EAAM13B,OAAS,EAC9B,IAAIw3B,GAAex5B,KAAKu5B,SAAS5nB,EAEjC,OADA+nB,GAAM/1B,KAAK61B,GACJA,GAITzB,EAAAv2B,UAAAu4B,kBAAA,WACE,GAAIC,GAAKh6B,KAAKy4B,aAKd,OAJKz4B,MAAK04B,WAGR14B,KAAK04B,WAAW/0B,KAAKq2B,GAFrBh6B,KAAK04B,YAAesB,GAGfh6B,KAAKu4B,aAAeyB,EAAGvY,SAAS,KAIzCsW,EAAAv2B,UAAAy4B,kBAAA,WACE/P,OAA0B,MAAnBlqB,KAAK04B,WACZ,IAAI12B,GAAiBhC,KAAK04B,WAAY12B,MACtCkoB,QAAOloB,EAAS,GACRhC,KAAK04B,WAAYkB,MACrB53B,EAAS,EACXhC,KAAKu4B,aAAuBv4B,KAAK04B,WAAY12B,EAAS,GAAGyf,SAAS,KAElEzhB,KAAKu4B,aAAe,KACpBv4B,KAAK04B,WAAa,OAKtBX,EAAAv2B,UAAA04B,SAAA,SAASv6B,EAAgByP,GAKvB,GAJA8a,QAAQlqB,KAAK04B,aAAe14B,KAAK04B,WAAW12B,QAC5ChC,KAAK04B,WAAa,KAClB14B,KAAKu4B,aAAe,KACpBv4B,KAAK24B,SAAW34B,KAAK44B,SAAW54B,KAAK64B,SAAW74B,KAAK84B,SAAW,KAC5D94B,KAAKu0B,QAAQvO,QAAQpK,UAAW,CAClC,GAAI4c,GAAiBx4B,KAAKw4B,cAC1B,IAAIA,EACF,IAAK,GAAIl4B,GAAI,EAAG4B,EAAIs2B,EAAex2B,OAAQ1B,EAAI4B,IAAK5B,EAAG,CACrD,GAAI65B,GAAgB3B,EAAel4B,EACnCX,GAAOkf,iBAAiBzP,EAAK+qB,EAAcC,aAAcD,EAAczY,OAAO2Y,eAAgBF,EAActY,KAAMsY,EAAcrY,SAGtI9hB,KAAKw4B,eAAiB,MAIxBT,EAAAv2B,UAAAigB,SAAA,WAAqB,MAAOzhB,MAAKwB,UAAU6sB,YAG3C0J,EAAAv2B,UAAA84B,aAAA,WAAyB,KAAM,IAAIxe,OAAM,oBAC3Cic,GAhL8BzD,EAAjB50B,GAAAq4B,UAmLb,IAAAzK,GAAA,SAAA9H,GAUE,QAAA8H,GAAYN,EAAgCqB,EAAoB1X,EAAsBsS,GAAtF,GAAAxD,GACED,EAAAhlB,KAAAR,KAAMgtB,EAAeuH,QAASlG,EAAY1X,IAAa3W,IAGvD,IAZFylB,EAAA4B,KAAOkD,EAAYgQ,gBAUjB9U,EAAKuH,eAAiBA,EACtBvH,EAAKwD,YAAcA,EACfxD,EAAKwD,YAAYyD,UACnB,IAAK,GAAIpsB,GAAI,EAAG4B,EAAIujB,EAAKwD,YAAYyD,UAAU1qB,OAAQ1B,EAAI4B,IAAK5B,EAC9D,OAAQmlB,EAAKwD,YAAYyD,UAAUpsB,GAAGs0B,cACpC,IAAKnQ,GAAA+H,aAAa7E,OAAQlC,EAAKoD,IAAIkC,EAAaI,SAAW,MAC3D,KAAK1G,GAAA+H,aAAayJ,SAAUxQ,EAAKoD,IAAIkC,EAAakL,SAAW,MAC7D,KAAKxR,GAAA+H,aAAa2J,QAClB,IAAK1R,GAAA+H,aAAa4J,UAClB,IAAK3R,GAAA+H,aAAa0J,OAClB,IAAKzR,GAAA+H,aAAaS,OAAQ,KAC1B,SAAS,KAAM,IAAInR,OAAM,uBJsoC3B,MAAO2J,GI7nCf,MAhCoClC,GAAA+J,EAAA9H,GA8BlCzkB,OAAAC,eAAIssB,EAAA9rB,UAAA,cJmoCEL,IInoCN,WAAyB,MAA+C,KAAvCnB,KAAKw0B,MAAQzJ,EAAakL,WJooCrDpN,IInoCN,SAAeqC,GAAgBA,EAAIlrB,KAAKw0B,OAASzJ,EAAakL,SAAej2B,KAAKw0B,QAAUzJ,EAAakL,UJuoCnG/0B,YAAY,EACZD,cAAc,IIvoCtBqsB,GAhCoCgH,EAAvB50B,GAAA4tB,gBAmCb,IAAAkN,GAAA,SAAAhV,GAUE,QAAAgV,GAAYh5B,EAA2BmV,EAAsBhF,GAA7D,GAAA8T,GACED,EAAAhlB,KAAAR,KAAMwB,EAAU+yB,QAAS/yB,EAAU6sB,WAAY1X,IAAa3W,IJ0oCxD,OInpCNylB,GAAA4B,KAAOkD,EAAYsI,MAKnBpN,EAAAgV,cAAqB,EAKnBhV,EAAKjkB,UAAYA,EACjBikB,EAAK+O,MAAQhzB,EAAUgzB,MACvB/O,EAAK9T,KAAOA,EJuoCD8T,EIroCf,MAhB2BlC,GAAAiX,EAAAhV,GAgB3BgV,GAhB2BlF,EAAd51B,GAAA86B,OAmBb,IAAAvL,GAAA,SAAAzJ,GAYE,QAAAyJ,GAAYsF,EAAkBlG,EAAoB1X,EAAsBuS,GAAxE,GAAAzD,GACED,EAAAhlB,KAAAR,KAAMu0B,EAASlG,EAAY1X,IAAa3W,IJsoCpC,OIjpCNylB,GAAA4B,KAAOkD,EAAYuE,SAKnBrJ,EAAAsJ,gBAA4C,KAE5CtJ,EAAAuJ,gBAA4C,KAK1CvJ,EAAKyD,OAASA,EJqoCHzD,EInoCf,MAhB8BlC,GAAA0L,EAAAzJ,GAgB9ByJ,GAhB8BqF,EAAjB50B,GAAAuvB,UAmBb,IAAAvD,GAAA,SAAAlG,GAwBE,QAAAkG,GAAY6I,EAAkBlG,EAAoB1X,EAAsBsS,GAAxE,GAAAxD,GACED,EAAAhlB,KAAAR,KAAMu0B,EAASlG,EAAY1X,IAAa3W,IAExC,IAzBFylB,EAAA4B,KAAOkD,EAAYC,gBAKnB/E,EAAA8Q,UAA+B,GAAIjR,KAEnCG,EAAA2H,gBAA8C,KAE9C3H,EAAAiF,cAAuC,KAEvCjF,EAAAgI,qBAAiD,KAGjDhI,EAAA2I,aAA8B,KAE9B3I,EAAA6I,aAA8B,KAE9B7I,EAAA8I,SAA0B,KAE1B9I,EAAA+I,SAA0B,KAIxB/I,EAAKwD,YAAcA,EACfxD,EAAKwD,YAAYyD,UACnB,IAAK,GAAIpsB,GAAI,EAAG4B,EAAIujB,EAAKwD,YAAYyD,UAAU1qB,OAAQ1B,EAAI4B,IAAK5B,EAC9D,OAAQmlB,EAAKwD,YAAYyD,UAAUpsB,GAAGs0B,cACpC,IAAKnQ,GAAA+H,aAAazE,OAAQtC,EAAKoD,IAAIkC,EAAa8J,SAAW,MAC3D,KAAKpQ,GAAA+H,aAAa7E,OAAQlC,EAAKoD,IAAIkC,EAAaI,SAAW,MAC3D,KAAK1G,GAAA+H,aAAasI,QAASrP,EAAKoD,IAAIkC,EAAagK,SAAW,MAC5D,SAAS,KAAM,IAAIjZ,OAAM,uBJ6oC3B,MIzoCA2J,GAAKwD,YAAYwI,eAAezvB,QAClCyjB,EAAKoD,IAAIkC,EAAa6L,SJwoCbnR,EI9/Bf,MAhLoClC,GAAAmI,EAAAlG,GA0ClCzkB,OAAAC,eAAI0qB,EAAAlqB,UAAA,eJwoCEL,IIxoCN,WAA0B,MAAgD,KAAxCnB,KAAKw0B,MAAQzJ,EAAa2P,YJyoCtD7R,IIxoCN,SAAgBqC,GAAgBA,EAAIlrB,KAAKw0B,OAASzJ,EAAa2P,UAAgB16B,KAAKw0B,QAAUzJ,EAAa2P,WJ4oCrGx5B,YAAY,EACZD,cAAc,II3oCpByqB,EAAAlqB,UAAAurB,QAAA,SAAQoE,EAA8BJ,OAAA,KAAAA,MAAA,KACpC,IAAIM,GAAcF,EAAgB3M,EAAA8M,cAAcH,GAAiB,GAC7DrE,EAAW9sB,KAAKu2B,UAAUp1B,IAAIkwB,EAClC,IAAIvE,EACF,MAAOA,EAGT,IAAIiK,GAAyBhG,CAE7B,IADAA,EAA0B,GAAIzL,KAC1ByR,EJ8oCI,II7oCN,IAA2C,GAAA4D,GAAA7W,EAAAiT,GAAsB6D,EAAAD,EAAA1W,QAAA2W,EAAA1W,KAAA0W,EAAAD,EAAA1W,OAAA,CAAxD,GAAAqF,GAAAnF,EAAAyW,EAAA92B,MAAA,GAACozB,EAAA5N,EAAA,GAAe6N,EAAA7N,EAAA,EACvByH,GAAwBlI,IAAIqO,EAAeC,IJkpCvC,MAAO0D,GAASC,GAAQ1X,MAAOyX,GAC/B,QACI,IACQD,IAA+BA,EAA2B1W,OAAS6F,EAAK4Q,EAAyB3Q,SAASD,EAAGvpB,KAAKm6B,GAE1H,QAAU,GAAIG,EAAK,KAAMA,GAAI1X,OIrpCzC,GAAI6F,GAAcjpB,KAAKipB,YACnB8R,EAA0B,IAC9B,IAAI9R,EAAYmB,YAAa,CAC3B,GAAI4Q,GAAgBh7B,KAAKu0B,QAAQ1D,YAAY5H,EAAYmB,YAAa,KACtE,KAAK4Q,EACH,MAAO,KACT,MAAMD,EAAYC,EAAclI,WAE9B,MADA9yB,MAAKu0B,QAAQnR,MAAMmB,EAAAhC,eAAekI,sCAAuCxB,EAAYmB,YAAY/I,OAC1F,IAET,IAAI0Z,EAAUv5B,UAAUmqB,aAAe3rB,KAAK2rB,YAE1C,MADA3rB,MAAKu0B,QAAQnR,MAAMmB,EAAAhC,eAAe0Y,6CAA8CxW,EAAAqH,MAAM/J,KAAKkH,EAAYroB,KAAKygB,MAAO4H,EAAYmB,YAAY/I,QACpI,KAKX,GAAI/gB,GAAQ4B,CACZ,IAAIivB,EAAe,CACjB,IAAKjvB,EAAIivB,EAAcnvB,SAAWinB,EAAYwI,eAAezvB,OAC3D,KAAM,IAAI8Z,OAAM,+BAClB,KAAK,GAAIxb,GAAI,EAAGA,EAAI4B,IAAK5B,EACvBywB,EAAwBlI,IAAII,EAAYwI,eAAenxB,GAAGM,KAAK+gB,KAAMwP,EAAc7wB,QAChF,IAAI2oB,EAAYwI,eAAezvB,OACpC,KAAM,IAAI8Z,OAAM,+BAElB,IAAInF,GAAe3W,KAAK2W,YACpB0a,GAAYrvB,SACd2U,GAAgB,IAAM0a,EAAc,KACtCvE,EAAW,GAAIoO,GAAMl7B,KAAM2W,EAAcwa,EAAe4J,GACxDjO,EAASiE,wBAA0BA,EACnC/wB,KAAKu2B,UAAU1N,IAAIwI,EAAavE,EAEhC,IAAI2N,GAAoB,CACxB,IAAIM,IACFN,EAAeM,EAAUI,oBACrBJ,EAAUhP,SAAS,CAChBe,EAASf,UACZe,EAASf,QAAU,GAAIzG,KJspCjB,KIrpCR,IAA4B,GAAA0T,GAAAlV,EAAAiX,EAAUhP,QAAQyD,UAAQ2J,EAAAH,EAAA/U,QAAAkV,EAAAjV,KAAAiV,EAAAH,EAAA/U,OAAA,CAAjD,GAAImX,GAAejC,EAAAr1B,KACtBgpB,GAASf,QAAQlD,IAAIuS,EAAgB/M,WAAY+M,IJ0pC3C,MAAOC,GAASC,GAAQlY,MAAOiY,GAC/B,QACI,IACQlC,IAAOA,EAAGjV,OAASqX,EAAKvC,EAAGhP,SAASuR,EAAG/6B,KAAKw4B,GAEpD,QAAU,GAAIsC,EAAK,KAAMA,GAAIlY,QI3pC7C,GAAIpjB,KAAKytB,qBAAsB,CAC7B,GAAI+N,GAAqBx7B,KAAKytB,qBAAqByK,eAAe/G,EAC9DqK,KACF1O,EAAS2O,oBAAsBD,EAAmBzO,WAItD,GAAI/sB,KAAKotB,gBJ+pCD,II9pCN,IAAmB,GAAAsO,GAAA5X,EAAA9jB,KAAKotB,gBAAgBoC,UAAQmM,EAAAD,EAAAzX,QAAA0X,EAAAzX,KAAAyX,EAAAD,EAAAzX,OAAA,CAA3C,GAAIyF,GAAMiS,EAAA73B,KACb,QAAQ4lB,EAAOrC,MAEb,IAAKkD,GAAYgQ,gBACVzN,EAASf,UACZe,EAASf,QAAU,GAAIzG,KACzB,IAAIsW,GAAoClS,EAAQT,WAChD,KAAK2S,EAAiBjqB,KACpB,KAAM,IAAImK,OAAM,gBAClB,IAAI+f,GAAY77B,KAAKu0B,QAAQ1D,YAAY+K,EAAiBjqB,KAAMmb,EAASiE,wBACzE,IAAI8K,EAAW,CACb,GAAIC,GAAgB,GAAItB,GAAsB9Q,EAAyBA,EAAQ/S,aAAcklB,EAC7F,QAAQA,EAAUE,UAChB,IAAK,GAAG,KACR,KAAK,GAAsB,EAAftB,KAAoBA,CAAc,MAC9C,KAAK,GAAsB,EAAfA,IAAkBA,EAAoC,GAAL,EAAfA,GAAuB,MACrE,KAAK,GAAsB,EAAfA,IAAkBA,EAAoC,GAAL,EAAfA,GAAuB,MACrE,SAASvQ,QAAO,GAElB4R,EAAcrB,aAAeA,EAC7BA,GAAgBoB,EAAUE,SAC1BjP,EAASf,QAAQlD,IAAIa,EAAO2E,WAAYyN,GAE1C,KAEF,KAAKvR,GAAYgJ,mBACVzG,EAASf,UACZe,EAASf,QAAU,GAAIzG,KACzB,IAAI0W,GAAsCtS,EAAQwO,eAAe/G,EAC7D6K,IACFlP,EAASf,QAAQlD,IAAIa,EAAO2E,WAAY2N,EAC1C,MAEF,KAAKzR,GAAYuE,SACVhC,EAASf,UACZe,EAASf,QAAU,GAAIzG,MACzB4E,OAAkBR,EAAQqF,gBAC1B,IAAIkN,GAAmB,GAAIhN,GAASjvB,KAAKu0B,QAAS7K,EAAO2E,WAAY3E,EAAO/S,aAAc3W,KAC1Fi8B,GAAiBlN,gBAAiDrF,EAAQqF,gBAAiBmJ,eAAe/G,GAC3FzH,EAAQsF,kBACrBiN,EAAiBjN,gBAAiDtF,EAAQsF,gBAAiBkJ,eAAe/G,IAC5GrE,EAASf,QAAQlD,IAAIa,EAAO2E,WAAY4N,EACxC,MAEF,SACE,KAAM,IAAIngB,OAAM,6BAA+B4N,EAAOrC,QJyqCtD,MAAO6U,GAASC,GAAQ/Y,MAAO8Y,GAC/B,QACI,IACQP,IAAOA,EAAGzX,OAASkY,EAAKV,EAAG1R,SAASoS,EAAG57B,KAAKk7B,GAEpD,QAAU,GAAIS,EAAK,KAAMA,GAAI/Y,OIzqCzC,MADA0J,GAASqO,oBAAsBV,EACxB3N,CJ6qCH,IAAIgO,GAAK/Q,EAAIuR,EAAKC,EAAIY,EAAKC,GI1qCjC1Q,EAAAlqB,UAAA0vB,yBAAA,SAAyBQ,EAAsCX,EAAkDY,GAC/G,GAAIsG,GAAuC,IAC3C,IAAIj4B,KAAKkrB,GAAGH,EAAa6L,UAGvB,GAFA1M,OAA4B,MAArBwH,GAAyD,GAA5BA,EAAkB1vB,UACtDi2B,EAAwBj4B,KAAKu0B,QAAQ/C,qBAAqBxxB,KAAKipB,YAAYwI,eAAgBC,EAAmBX,EAAyBY,IAErI,MAAO,UAETzH,QAA4B,MAArBwH,IAA8BA,EAAkB1vB,OACzD,OAAOhC,MAAK+sB,QAAQkL,EAAuBlH,IAG7CrF,EAAAlqB,UAAAigB,SAAA,WAAqB,MAAOzhB,MAAKquB,YACnC3C,GAhLoC4I,EAAvB50B,GAAAgsB,gBAmLb,IAAAwP,GAAA,SAAA1V,GAoBE,QAAA0V,GAAY15B,EAA2BmV,EAAsBwa,EAAqC+B,OAArC,KAAA/B,MAAA,UAAqC,KAAA+B,MAAA,KAAlG,IAAAzN,GACED,EAAAhlB,KAAAR,KAAMwB,EAAU+yB,QAAS/yB,EAAU6sB,WAAY1X,IAAa3W,IAQ5D,IA3BFylB,EAAA4B,KAAOkD,EAAYyI,MAWnBvN,EAAAsL,wBAAmD,KAEnDtL,EAAA0V,oBAA2B,EAE3B1V,EAAAgW,oBAAuC,KAKrChW,EAAKjkB,UAAYA,EACjBikB,EAAK+O,MAAQhzB,EAAUgzB,MACvB/O,EAAK0L,cAAgBA,EACrB1L,EAAK9T,KAAOnQ,EAAU+yB,QAAQvO,QAAQU,UAAU2V,QAAQ5W,GACxDA,EAAKyN,KAAOA,EAGRA,GACEA,EAAKnC,wBAAyB,CAC3BtL,EAAKsL,0BACRtL,EAAKsL,wBAA0B,GAAIzL,KJqqC7B,KIpqCR,IAAiC,GAAAgE,GAAAxF,EAAAoP,EAAKnC,yBAAuBhH,EAAAT,EAAArF,QAAA8F,EAAA7F,KAAA6F,EAAAT,EAAArF,OAAA,CAApD,GAAA+U,GAAA7U,EAAA4F,EAAAjmB,MAAA,GAACw4B,EAAAtD,EAAA,GAAUuD,EAAAvD,EAAA,EAClBvT,GAAKsL,wBAAwBlI,IAAIyT,EAAUC,IJyqCrC,MAAOC,GAASC,GAAQrZ,MAAOoZ,GAC/B,QACI,IACQzS,IAAOA,EAAG7F,OAASiV,EAAK7P,EAAGU,SAASmP,EAAG34B,KAAK8oB,GAEpD,QAAU,GAAImT,EAAK,KAAMA,GAAIrZ,QIzqC7C,GACI9iB,GAAQ4B,EADR+mB,EAAcxD,EAAKjkB,UAAUynB,WAEjC,IAAIA,EAAa,CACf,GAAIwI,GAAiBxI,EAAYwI,cACjC,IAAIN,EAAe,CACjB,IAAKjvB,EAAIivB,EAAcnvB,SAAWyvB,EAAezvB,OAC/C,KAAM,IAAI8Z,OAAM,+BAClB,IAAI5Z,EAGF,IAFKujB,EAAKsL,0BACRtL,EAAKsL,wBAA0B,GAAIzL,MAChChlB,EAAI,EAAGA,EAAI4B,IAAK5B,EACnBmlB,EAAKsL,wBAAwBlI,IAAI4I,EAAenxB,GAAGM,KAAK+gB,KAAMwP,EAAc7wB,QAE3E,IAAImxB,EAAezvB,OACxB,KAAM,IAAI8Z,OAAM,gCJirChB,MAAO2J,EACP,IAAIgX,GAAKtD,EI7qCjB,MA1D2B5V,GAAA2X,EAAA1V,GAyDzB0V,EAAA15B,UAAAigB,SAAA,WAAqB,MAAOzhB,MAAKwB,UAAU6sB,YAC7C6M,GA1D2B5G,EAAd50B,GAAAw7B,OA6Db,IAAA3K,GAAA,SAAA/K,GAQE,QAAA+K,GAAYgE,EAAkBlG,EAAoB1X,EAAsBsS,GAAxE,GAAAxD,GACED,EAAAhlB,KAAAR,KAAMu0B,EAASlG,EAAY1X,EAAcsS,IAAYjpB,IJ8qCjD,OIrrCNylB,GAAA4B,KAAOkD,EAAYmS,oBJqrCNjX,EI5qCf,MAXwClC,GAAAgN,EAAA/K,GAWxC+K,GAXwC7E,EAA3BhsB,GAAA6wB,oBAcb,IAAAoM,GAAA,SAAAnX,GAUE,QAAAmX,GAAYn7B,EAA+BmV,EAAsBwa,EAA4B+B,OAA5B,KAAA/B,cAA4B,KAAA+B,MAAA,KAA7F,IAAAzN,GACED,EAAAhlB,KAAAR,KAAMwB,EAAWmV,EAAcwa,EAAe+B,IAAKlzB,IJ4qC/C,OIrrCNylB,GAAA4B,KAAOkD,EAAYqS,UJqrCNnX,EI1qCf,MAb+BlC,GAAAoZ,EAAAnX,GAa/BmX,GAb+BzB,EAAlBx7B,GAAAi9B,aAgBb,SAAkBE,GAEhBA,IAAA,eAEAA,IAAA,qBAEAA,IAAA,qCAEAA,IAAA,qCAEAA,IAAA,4CAVgBn9B,EAAAm9B,YAAAn9B,EAAAm9B,cAclB,IAAAvD,GAAA,WA0BE,QAAAA,KAbAt5B,KAAA88B,aAAyC,KAoF3C,MAjFSxD,GAAAvqB,OAAP,SAAcguB,GACZ,GAAIC,GAAa,GAAI1D,EAMrB,OALA0D,GAAW9T,OAAS,KACpB8T,EAAWxI,MAAK,EAChBwI,EAAWD,gBAAkBA,EAC7BC,EAAWC,cAAgB,KAC3BD,EAAWE,WAAa,KACjBF,GAMT1D,EAAA93B,UAAA0pB,GAAA,SAAGwJ,GAAyB,OAAQ10B,KAAKw0B,MAAQE,IAASA,GAG1D4E,EAAA93B,UAAAqnB,IAAA,SAAI6L,GAAyB10B,KAAKw0B,OAASE,GAG3C4E,EAAA93B,UAAA27B,mBAAA,WACE,GAAIC,GAAa,GAAI9D,EAMrB,OALA8D,GAAWlU,OAASlpB,KACpBo9B,EAAW5I,MAAQx0B,KAAKw0B,MACxB4I,EAAWL,gBAAkB/8B,KAAK+8B,gBAClCK,EAAWH,cAAgBj9B,KAAKi9B,cAChCG,EAAWF,WAAal9B,KAAKk9B,WACtBE,GAIT9D,EAAA93B,UAAA67B,mBAAA,WACE,GAAInU,GAASgB,OAAOlqB,KAAKkpB,OAGzB,IAAIlpB,KAAK88B,aAAc,CJ6pCf,II5pCN,IAAwB,GAAAxT,GAAAxF,EAAA9jB,KAAK88B,aAAatN,UAAQzF,EAAAT,EAAArF,QAAA8F,EAAA7F,KAAA6F,EAAAT,EAAArF,OAAA,CAA7C,GAAIqZ,GAAWvT,EAAAjmB,KAClB9D,MAAK+8B,gBAAgBlD,cAAcyD,IJiqC/B,MAAOC,GAASC,GAAQpa,MAAOma,GAC/B,QACI,IACQxT,IAAOA,EAAG7F,OAAS8U,EAAK1P,EAAGU,SAASgP,EAAGx4B,KAAK8oB,GAEpD,QAAU,GAAIkU,EAAK,KAAMA,GAAIpa,OIrqCvCpjB,KAAK88B,aAAe,KAWtB,MAPI98B,MAAKkrB,GAAE,IACThC,EAAOL,IAAG,GACR7oB,KAAKkrB,GAAE,IAA+BhC,EAAOgU,YAAcl9B,KAAKk9B,YAClEhU,EAAOL,IAAG,GACR7oB,KAAKkrB,GAAE,IAAkChC,EAAO+T,eAAiBj9B,KAAKi9B,eACxE/T,EAAOL,IAAG,GAELK,CJsqCH,IAAIsU,GAAKxE,GIlqCfM,EAAA93B,UAAAi8B,eAAA,SAAe78B,EAAc+Q,EAAYqmB,GACvC,GAAIsF,GAAct9B,KAAK+8B,gBAAgBtD,aAAa9nB,EACpD,IAAK3R,KAAK88B,cAEL,GAAI98B,KAAK88B,aAAaxR,IAAI1qB,GAE7B,WADAZ,MAAK+8B,gBAAgBxI,QAAQnR,MAAMmB,EAAAhC,eAAegJ,uBAAwByM,EAAW3W,WAFrFrhB,MAAK88B,aAAe,GAAIxX,IAK1BtlB,MAAK88B,aAAajU,IAAIjoB,EAAM08B,IAI9BhE,EAAA93B,UAAA8wB,eAAA,SAAe1xB,GACb,GAAI44B,GACAkE,EAAuB19B,IAC3B,IACE,GAAI09B,EAAQZ,eAAiBtD,EAAQkE,EAAQZ,aAAa37B,IAAIP,IAC5D,MAAO44B,SACFkE,EAAUA,EAAQxU,OAC3B,OAAOlpB,MAAK+8B,gBAAgB1E,OAAOl3B,IAAIP,IAIzC04B,EAAA93B,UAAA04B,SAAA,WAIE,MAHAhQ,QAAsB,MAAflqB,KAAKkpB,OAAgB,mCAC5BlpB,KAAKi9B,cAAgB,KACrBj9B,KAAKk9B,WAAa,KACXl9B,KAAKkrB,GAAE,IAElBoO,IAjGa55B,GAAA45B,QJ2wCP,SAAU35B,EAAQD,EAASS,GAEjC,YKqFA,SAAAw9B,GAAqC3sB,EAAqBW,EAAYhS,GACpE,OAAQgS,EAAK0V,MAEX,OACErW,EAAOrR,EAAOuR,aAAawT,EAAArb,SAASu0B,OAClCj+B,EAAOuR,aAAawT,EAAArb,SAASw0B,OAC3B7sB,EACArR,EAAOwQ,UAAU,KAEnBxQ,EAAOwQ,UAAU,IAEnB,MAEF,QACEa,EAAOrR,EAAOuR,aAAawT,EAAArb,SAASu0B,OAClCj+B,EAAOuR,aAAawT,EAAArb,SAASw0B,OAC3B7sB,EACArR,EAAOwQ,UAAU,KAEnBxQ,EAAOwQ,UAAU,IAEnB,MAEF,QACEa,EAAOrR,EAAOuR,aAAawT,EAAArb,SAASy0B,OAClC9sB,EACArR,EAAOwQ,UAAU,KAEnB,MAEF,QACEa,EAAOrR,EAAOuR,aAAawT,EAAArb,SAASy0B,OAClC9sB,EACArR,EAAOwQ,UAAU,OAEnB,MAEF,SACEa,EAAOrR,EAAOuR,aAAawT,EAAArb,SAASy0B,OAClC9sB,EACArR,EAAOwQ,UAAU,GAEnB,MAEF,SACE,KAAM,IAAI2L,OAAM,0BAEpB,MAAO9K,GAIT,QAAA+sB,GAA+B/sB,EAAqBW,EAAYhS,GAC9D,OAAQgS,EAAK0V,MAEX,QACErW,EAAOrR,EAAOmR,YAAY4T,EAAAre,QAAQ23B,OAAQhtB,EAC1C,MAEF,QACA,OACEA,EAAOrR,EAAOmR,YAAY4T,EAAAre,QAAQ43B,OAAQjtB,EAC1C,MAEF,QAEA,OACEA,EAAOrR,EAAOmR,YAAyB,IAAba,EAAKusB,KAAaxZ,EAAAre,QAAQ43B,OAASvZ,EAAAre,QAAQ23B,OAAQhtB,EAC7E,MAEF,SACEA,EAAOrR,EAAOuR,aAAawT,EAAArb,SAAS80B,MAAOntB,EAAMrR,EAAO+Q,UAAU,GAClE,MAEF,SACEM,EAAOrR,EAAOuR,aAAawT,EAAArb,SAAS+0B,MAAOptB,EAAMrR,EAAOiR,UAAU,GAClE,MAEF,SACE,KAAM,IAAIkL,OAAM,0BAEpB,MAAO9K,GAIT,QAAAqtB,GAA8BrtB,EAAqBW,EAAYhS,GAC7D,OAAQgS,EAAK0V,MAEX,QACErW,EAAOrR,EAAOuR,aAAawT,EAAArb,SAASi1B,MAAOttB,EAAMrR,EAAOwQ,UAAU,GAClE,MAEF,QACA,OACEa,EAAOrR,EAAOuR,aAAawT,EAAArb,SAASk1B,MAAOvtB,EAAMrR,EAAO2Q,UAAU,GAClE,MAEF,QAEA,OACEU,EAAoB,IAAbW,EAAKusB,KACRv+B,EAAOuR,aAAawT,EAAArb,SAASk1B,MAAOvtB,EAAMrR,EAAO2Q,UAAU,IAC3D3Q,EAAOuR,aAAawT,EAAArb,SAASi1B,MAAOttB,EAAMrR,EAAOwQ,UAAU,GAC/D,MAEF,SACEa,EAAOrR,EAAOuR,aAAawT,EAAArb,SAASm1B,MAAOxtB,EAAMrR,EAAO+Q,UAAU,GAClE,MAEF,SACEM,EAAOrR,EAAOuR,aAAawT,EAAArb,SAASo1B,MAAOztB,EAAMrR,EAAOiR,UAAU,GAClE,MAEF,SACE,KAAM,IAAIkL,OAAM,0BAEpB,MAAO9K,GLtMT,GAAIuS,GAAavjB,MAAQA,KAAKujB,WAAc,WACxC,GAAIC,GAAgBziB,OAAO0iB,iBACpBC,uBAA2BhgB,QAAS,SAAU/C,EAAGgjB,GAAKhjB,EAAE+iB,UAAYC,IACvE,SAAUhjB,EAAGgjB,GAAK,IAAK,GAAIjiB,KAAKiiB,GAAOA,EAAEliB,eAAeC,KAAIf,EAAEe,GAAKiiB,EAAEjiB,IACzE,OAAO,UAAUf,EAAGgjB,GAEhB,QAASC,KAAO5jB,KAAK6jB,YAAcljB,EADnC6iB,EAAc7iB,EAAGgjB,GAEjBhjB,EAAEa,UAAkB,OAANmiB,EAAa5iB,OAAOgO,OAAO4U,IAAMC,EAAGpiB,UAAYmiB,EAAEniB,UAAW,GAAIoiB,QAGnFE,EAAY9jB,MAAQA,KAAK8jB,UAAa,SAAUhjB,GAChD,GAAIL,GAAsB,kBAAXsjB,SAAyBjjB,EAAEijB,OAAOC,UAAW1jB,EAAI,CAChE,OAAIG,GAAUA,EAAED,KAAKM,IAEjBmjB,KAAM,WAEF,MADInjB,IAAKR,GAAKQ,EAAEkB,SAAQlB,MAAI,KACnBgD,MAAOhD,GAAKA,EAAER,KAAM4jB,MAAOpjB,KAIhDC,QAAOC,eAAetB,EAAS,cAAgBoE,OAAO,GKn9GtD,IA6HYiV,GA7HZ2lB,EAAAv+B,EAAA,IAMAokB,EAAApkB,EAAA,GAKAukB,EAAAvkB,EAAA,GAaAw+B,EAAAx+B,EAAA,GA2BAy+B,EAAAz+B,EAAA,GAIAskB,EAAAtkB,EAAA,GA6DAqkB,EAAArkB,EAAA,IASA,SAAY4Y,GAEVA,IAAA,mBAEAA,IAAA,oBAJUA,EAAArZ,EAAAqZ,SAAArZ,EAAAqZ,WAQZ,IAAA8lB,GAAA,mBAAAA,KAGE7+B,KAAA0V,OAAiBqD,EAAO+lB,OAExB9+B,KAAA++B,eAAsB,EAEtB/+B,KAAAg/B,UAAiB,EAEjBh/B,KAAAi/B,UAAiB,EAEjBj/B,KAAAk/B,aAAuB,kBAEvBl/B,KAAAm/B,SAAmB,cAEnBn/B,KAAA4b,WAAkB,EAUpB,MAPE7a,QAAAC,eAAI69B,EAAAr9B,UAAA,YLg2GEL,IKh2GN,WAAuB,MAAOnB,MAAK0V,QAAUqD,EAAOC,QLi2G9C9X,YAAY,EACZD,cAAc,IKh2GpBF,OAAAC,eAAI69B,EAAAr9B,UAAA,aLo2GEL,IKp2GN,WAAwB,MAAOnB,MAAK0V,QAAUqD,EAAOC,OAASwL,EAAAyB,KAAKmZ,QAAU5a,EAAAyB,KAAKoZ,SLq2G5En+B,YAAY,EACZD,cAAc,IKp2GpBF,OAAAC,eAAI69B,EAAAr9B,UAAA,aLw2GEL,IKx2GN,WAAwB,MAAOnB,MAAK0V,QAAUqD,EAAOC,OAASwL,EAAAyB,KAAKqZ,QAAU9a,EAAAyB,KAAKsZ,SLy2G5Er+B,YAAY,EACZD,cAAc,IKx2GpBF,OAAAC,eAAI69B,EAAAr9B,UAAA,kBL42GEL,IK52GN,WAAmC,MAAOnB,MAAK0V,QAAUqD,EAAOC,OAAS0L,EAAA3gB,WAAWiZ,IAAM0H,EAAA3gB,WAAW+Y,KL62G/F5b,YAAY,EACZD,cAAc,IK72GtB49B,IAzBan/B,GAAAm/B,WA4Bb,SAAkBW,GAEhBA,IAAA,eAEAA,IAAA,uBAEAA,IAAA,wBANgB9/B,EAAA8/B,iBAAA9/B,EAAA8/B,mBAUlB,IAAAC,GAAA,SAAAja,GAqCE,QAAAia,GAAYlL,EAAkBvO,OAAA,KAAAA,MAAA,KAA9B,IAAAP,GACED,EAAAhlB,KAAAR,KAAMu0B,EAAQrR,cAAYljB,ILg2GtB,OK13GNylB,GAAAia,kBAAqC,GAAIh8B,OAKzC+hB,EAAAka,YAA2B,KAE3Bla,EAAAma,YAAoBpb,EAAAyB,KAAKa,KAKzBrB,EAAAoa,eAAkC,GAAIn8B,OAEtC+hB,EAAAqa,eAA4C,GAAIxa,KAGhDG,EAAAsa,MAAqB,GAAI/P,KAUvBvK,EAAK8O,QAAUA,EACf9O,EAAKO,QAAUA,GAAoB,GAAI6Y,GACvCpZ,EAAKgV,aAAe9E,QAAQlQ,EAAKO,QAAQU,UAAUqV,SAAU,GAC7DtW,EAAK9lB,OAAS+kB,EAAAvV,OAAOJ,SL41GV0W,EKpCf,MAl2G8BlC,GAAAkc,EAAAja,GAgCrBia,EAAAO,QAAP,SAAezL,EAAkBvO,GAC/B,WAD+B,KAAAA,MAAA,MACxB,GAAIyZ,GAASlL,EAASvO,GAASga,WAaxCP,EAAAj+B,UAAAw+B,QAAA,WAGEhgC,KAAKu0B,QAAQxO,WAAW/lB,KAAKgmB,QAG7B,IAAIia,GAAyB/V,OAAOlqB,KAAKu0B,QAAQ5O,SAASxkB,IAAI,SAC9D+oB,QAAO+V,EAAuB5Y,MAAQsX,EAAApU,YAAYgJ,mBAClD,IAAI2M,GAAwB,GAAIvB,GAAA5G,SAA4BkI,EAAwBA,EAAuBtpB,mBAAsB6N,EAAAyB,KAAKa,KAAM,KAC5IoZ,GAAsBrX,IAAI8V,EAAA5T,aAAaoV,OACvCngC,KAAK+8B,gBAAkB/8B,KAAKogC,cAAgBF,CAK5C,KAAK,GAHDpa,GAAU9lB,KAAKu0B,QAAQzO,QAGlBxlB,EAAI,EAAG4B,EAAI4jB,EAAQ9jB,OAAQ1B,EAAI4B,IAAK5B,EACvCwlB,EAAQxlB,GAAG+/B,SAASrgC,KAAKsgC,cAAcxa,EAAQxlB,GAGrD,IAAIN,KAAK0/B,kBAAkB19B,OAAQ,CACjC,GAAIu+B,GAAUvgC,KAAKL,OAAOsQ,2BAA2ByU,EAAA3gB,WAAWy8B,QAC3DD,KAASA,EAAUvgC,KAAKL,OAAOiQ,gBAAgB,IAAK8U,EAAA3gB,WAAWy8B,SACpE,IAAIpxB,EACJpP,MAAKL,OAAO+Z,SACVtK,EAAMpP,KAAKL,OAAO0W,YAAYrW,KAAKogC,cAAc5+B,UAAUmV,aAAc4pB,EAAS/b,EAAAic,mBAAmBzgC,KAAKogC,cAAc9H,kBACtHt4B,KAAKL,OAAOiU,YAAY,KAAM5T,KAAK0/B,qBAGvC1/B,KAAKogC,cAAclG,SAASl6B,KAAKL,OAAQyP,GAI3C,IAAKpP,KAAKgmB,QAAQiZ,SAAU,CAC1B,GAAIxE,GAAez6B,KAAKy6B,YACxBz6B,MAAKy6B,aAAeA,EAAeiG,UAAUjG,EAAcz6B,KAAKgmB,QAAQU,UAAUqV,UAC9E/7B,KAAKgmB,QAAQtQ,QAAUqD,EAAOC,OAChChZ,KAAKL,OAAOsW,UAAU,YAAayO,EAAA3gB,WAAWiZ,KAAK,EAAOhd,KAAKL,OAAO2Q,UAAU2I,QAAQwhB,GAAevhB,SAASuhB,KAEhHz6B,KAAKL,OAAOsW,UAAU,YAAayO,EAAA3gB,WAAW+Y,KAAK,EAAO9c,KAAKL,OAAOwQ,UAAU8I,QAAQwhB,IAG1F,IAAIkG,GAAQC,UAAUF,UAAUjG,EAAc,OAAU9E,QAAQ,GAAI,GACpE31B,MAAKL,OAAO4Y,UAAUU,QAAQ0nB,GAAQjc,EAAAvV,OAAO+P,kBAAyDlf,KAAK6/B,eAAgB7/B,KAAKgmB,QAAQtQ,OAAQ,UAElJ,MAAO1V,MAAKL,QAKd8/B,EAAAj+B,UAAAq/B,oBAAA,SAAoBC,EAAwC9I,GAI1D,IAAK,GAHDlS,GAAU9lB,KAAKu0B,QAAQzO,QAEvBhT,EAAWguB,EAAiC,MACvCxgC,EAAI,EAAG4B,EAAI4jB,EAAQ9jB,OAAQ1B,EAAI4B,IAAK5B,EAAG,CAC9C,GAAIohB,GAASoE,EAAQxlB,EACRohB,GAAOE,cACpB,IAAIF,EAAOE,gBAAkB9O,EAE3B,WADA9S,MAAKsgC,cAAc5e,GAKvB5O,EAAWguB,EAAiC,WAC5C,KAAK,GAAIxgC,GAAI,EAAG4B,EAAI4jB,EAAQ9jB,OAAQ1B,EAAI4B,IAAK5B,EAAG,CAC9C,GAAIohB,GAASoE,EAAQxlB,EACRohB,GAAOE,cACpB,IAAIF,EAAOE,gBAAkB9O,EAE3B,WADA9S,MAAKsgC,cAAc5e,GAKvB5O,EAAW6rB,EAAAzZ,eAAiB4b,EAAiC,KAC7D,KAAK,GAAIxgC,GAAI,EAAG4B,EAAI4jB,EAAQ9jB,OAAQ1B,EAAI4B,IAAK5B,EAAG,CAC9C,GAAIohB,GAASoE,EAAQxlB,EACRohB,GAAOE,cACpB,IAAIF,EAAOE,gBAAkB9O,EAE3B,WADA9S,MAAKsgC,cAAc5e,GAKvB1hB,KAAKojB,MAAMmB,EAAAhC,eAAewe,iBAAkB/I,EAAW3W,MAAOyf,IAGhErB,EAAAj+B,UAAA8+B,cAAA,SAAc5e,GACZ,GAAIqe,GAAQ//B,KAAK+/B,KACjB,KAAIA,EAAMzU,IAAI5J,EAAOE,gBAArB,CAEAme,EAAM9P,IAAIvO,EAAOE,eAMjB,KAAK,GAJDmd,GAAgB/+B,KAAKgmB,QAAQ+Y,cAC7BsB,EAAU3e,EAAO2e,QACjBX,EAAoB1/B,KAAK0/B,kBACzBxY,EAAaxF,EAAOwF,WACf5mB,EAAI,EAAG4B,EAAIglB,EAAWllB,OAAQ1B,EAAI4B,IAAK5B,EAAG,CACjD,GAAI8mB,GAAYF,EAAW5mB,EAC3B,QAAQ8mB,EAAUC,MAEhB,IAAK5C,GAAA6C,SAASC,kBACPwX,GAAiBsB,GAAW5b,EAAA8H,YAAY9H,EAAA+H,aAAa7E,OAA2BP,EAAWsF,cAAmCtF,EAAWqK,eAAezvB,QAC3JhC,KAAKghC,wBAA0C5Z,KACjD,MAEF,KAAK3C,GAAA6C,SAASG,iBACRsX,GAAiBsB,GAAW5b,EAAA8H,YAAY9H,EAAA+H,aAAa7E,OAA0BP,EAAWsF,aAC5F1sB,KAAKihC,uBAAwC7Z,EAC/C,MAEF,KAAK3C,GAAA6C,SAASO,qBACPkX,GAAiBsB,GAAW5b,EAAA8H,YAAY9H,EAAA+H,aAAa7E,OAA8BP,EAAWsF,cAAsCtF,EAAWqK,eAAezvB,QACjKhC,KAAKkhC,2BAAgD9Z,KACvD,MAEF,KAAK3C,GAAA6C,SAASS,OACZ/nB,KAAK6gC,oBAAsCzZ,EAAWxF,eAAkCwF,EAAW+B,KACnG,MAEF,KAAK1E,GAAA6C,SAASa,sBACR4W,GAAiBsB,GAAW5b,EAAA8H,YAAY9H,EAAA+H,aAAa7E,OAA+BP,EAAWsF,aACjG1sB,KAAKmhC,4BAAkD/Z,EACzD,MAEF,KAAK3C,GAAA6C,SAASiB,SACZ,GAAI6Y,GAAephC,KAAKqhC,yBAA4Cja,EAChEga,IAAc1B,EAAkB/7B,KAAKy9B,EACzC,MAEF,KAAK3c,GAAA6C,SAASK,OACuC,MAA7BP,EAAWxF,gBAC/B5hB,KAAK6gC,oBAA8CzZ,EAAWxF,eAA2DwF,EAAW+B,OAClI4V,GAAiBsB,IACnBrgC,KAAKshC,uBAAwCla,EAC/C,MAGF,SACE,GAAIma,GAAmBvhC,KAAK+8B,eAC5B/8B,MAAK+8B,gBAAkB/8B,KAAKogC,aAC5B,IAAIpvB,GAAOhR,KAAKwhC,iBAAiBpa,EACjCpnB,MAAK0/B,kBAAkB/7B,KAAKqN,GAC5BhR,KAAK+8B,gBAAkBwE,MAQ/B9B,EAAAj+B,UAAAigC,yBAAA,SAAyBxY,GACvB,GAAIR,GAAUzoB,KAAKu0B,QAAQ5O,SAASxkB,IAAI8nB,EAAYwC,sBACpD,KAAKhD,GAAWA,EAAQpB,MAAQsX,EAAApU,YAAYc,OAC1C,KAAM,IAAIvP,OAAM,kBAClB,OAAK9b,MAAK0hC,cAAsBjZ,GAEjBA,EADN,MAIXgX,EAAAj+B,UAAAkgC,cAAA,SAAc9Q,GACZ,GAAIA,EAAO1F,GAAGyT,EAAA5T,aAAa4W,WAAa/Q,EAAO1F,GAAGyT,EAAA5T,aAAaC,SAC7D,OAAO,CAET,IAAI/B,GAAc2H,EAAO3H,YACrB2Y,EAA0B,CAC9B,IAAIhR,EAAOjf,MAAQ6S,EAAAyB,KAAKa,KACtB,GAAImC,EAAYtX,KAAM,CACpB,GAAIkwB,GAAe7hC,KAAKu0B,QAAQ1D,YAAY5H,EAAYtX,KACxD,KAAKkwB,EACH,OAAO,CACT,IAAIA,GAAgBrd,EAAAyB,KAAKa,KAEvB,MADA9mB,MAAKojB,MAAMmB,EAAAhC,eAAeuf,mCAAoC7Y,EAAYtX,KAAK0P,MAAO,IAAKwgB,EAAapgB,aACjG,CAETmP,GAAOjf,KAAOkwB,MACT,KAAI5Y,EAAY9S,YASrB,MADAnW,MAAKojB,MAAMmB,EAAAhC,eAAewf,cAAe9Y,EAAYroB,KAAKygB,MAAM0Q,QACzD,CAPP,IADA6P,EAAW5hC,KAAKgiC,kBAAkB/Y,EAAY9S,YAAaqO,EAAAyB,KAAKa,KAAI,GAChE9mB,KAAK4/B,aAAepb,EAAAyB,KAAKa,KAE3B,MADA9mB,MAAKojB,MAAMmB,EAAAhC,eAAeuf,mCAAoC7Y,EAAY9S,YAAYkL,MAAOrhB,KAAK4/B,YAAYne,WAAY,WACnH,CAETmP,GAAOjf,KAAO3R,KAAK4/B,YAOvB,GAAIqC,GAAarR,EAAOjf,KAAKgoB,cAE7B,IAAI/I,EAAO1F,GAAGyT,EAAA5T,aAAagK,UACzB,MAAInE,GAAO1F,GAAGyT,EAAA5T,aAAamK,WACzBl1B,KAAKL,OAAOuY,gBAAgB0Y,EAAOja,aAAcia,EAAOpF,UAAYoF,EAAOpF,UAAU6C,WAAa,MAAOuC,EAAOvC,WAAY4T,GAC5HrR,EAAO/H,IAAI8V,EAAA5T,aAAa4W,WACjB,IAEP3hC,KAAKojB,MAAMmB,EAAAhC,eAAeuL,wBAAyB7E,EAAY5H,QAC1D,EAGT,IAAI6gB,IAAoB,CAEpBtR,GAAO1F,GAAGyT,EAAA5T,aAAa6K,SACzBgM,EAAW5hC,KAAKmiC,sBAAsBvR,EAAQA,EAAOjf,MAEjDsX,EAAY9S,aACTyrB,IACHA,EAAW5hC,KAAKgiC,kBAAkB/Y,EAAY9S,YAAaya,EAAOjf,OAChEgL,yBAAyBilB,IAAald,EAAAlgB,aAAaoY,QACjDgU,EAAO1F,GAAGyT,EAAA5T,aAAamK,WACzB0M,EAAW5hC,KAAKoiC,wBAAwBR,GACpCjlB,yBAAyBilB,IAAald,EAAAlgB,aAAaoY,QACrD5c,KAAKsjB,QAAQiB,EAAAhC,eAAe8f,4DAA6DpZ,EAAY5H,OACrG6gB,GAAoB,IAGtBA,GAAoB,IAGxBN,EAAWhR,EAAOjf,KAAK2wB,aAAatiC,KAAKL,OAG7C,IAAIgX,GAAeia,EAAOja,YAC1B,IAAIurB,EAAmB,CACrBliC,KAAKL,OAAOsW,UAAUU,EAAcsrB,GAAY,EAAMrR,EAAOjf,KAAK2wB,aAAatiC,KAAKL,QACpF,IAAI4iC,GAAUviC,KAAKL,OAAO+T,gBAAgBiD,EAAcirB,EACxD5hC,MAAK0/B,kBAAkB/7B,KAAK4+B,OAE5B,IAAI3R,EAAO1F,GAAGyT,EAAA5T,aAAamK,UAAW,CACpC,GAAIsN,GAAW3lB,2BAA2B+kB,EAC1C,QAAQY,GAEN,IAAK9d,GAAA3gB,WAAW+Y,IACd8T,EAAO4E,kBAAiB,EACxB5E,EAAO8E,qBAAuBC,QAAQ5Y,0BAA0B6kB,GAAW,EAC3E,MAEF,KAAKld,GAAA3gB,WAAWiZ,IACd4T,EAAO4E,kBAAiB,EACxB5E,EAAO8E,qBAAuBC,QAAQ1Y,6BAA6B2kB,GAAW1kB,8BAA8B0kB,GAC5G,MAEF,KAAKld,GAAA3gB,WAAWoZ,IACdyT,EAAO4E,kBAAiB,EACxB5E,EAAOkF,mBAAqB1Y,0BAA0BwkB,EACtD,MAEF,KAAKld,GAAA3gB,WAAWsZ,IACduT,EAAO4E,kBAAiB,EACxB5E,EAAOkF,mBAAqBxY,0BAA0BskB,EACtD,MAEF,SACE,KAAM,IAAI9lB,OAAM,0BAEpB8U,EAAO/H,IAAI8V,EAAA5T,aAAa6K,SACpB3M,EAAYwZ,YACdziC,KAAKL,OAAOsW,UAAUU,EAAcsrB,GAAarR,EAAO1F,GAAGyT,EAAA5T,aAAamK,UAAW0M,GACjF3Y,EAAY5H,MAAMK,OAAO2e,SAAWpX,EAAYyZ,kBAClD1iC,KAAKL,OAAOyX,gBAAgBwZ,EAAOja,aAAcsS,EAAY0Z,8BAE/D3iC,MAAKL,OAAOsW,UAAUU,EAAcsrB,GAAarR,EAAO1F,GAAGyT,EAAA5T,aAAamK,UAAW0M,EAGvF,OADAhR,GAAO/H,IAAI8V,EAAA5T,aAAa4W,WACjB,GAKTlC,EAAAj+B,UAAAy/B,uBAAA,SAAuBhY,GACrB,GAAIR,GAAUzoB,KAAKu0B,QAAQ5O,SAASxkB,IAAI8nB,EAAYwC,sBACpD,KAAKhD,GAAWA,EAAQpB,MAAQsX,EAAApU,YAAYyK,KAC1C,KAAM,IAAIlZ,OAAM,gBAClB,OAAO9b,MAAK4iC,YAAkBna,GAAiBA,EAAU,MAG3DgX,EAAAj+B,UAAAohC,YAAA,SAAYna,GACV,GAAIA,EAAQyC,GAAGyT,EAAA5T,aAAa4W,UAC1B,OAAO,CAGTlZ,GAAQI,IAAI8V,EAAA5T,aAAa4W,UAEzB3hC,KAAK2/B,YAAclX,CACnB,IAAIoa,GAAkC,IACtC,IAAIpa,EAAQsD,QL8zGJ,IK7zGN,IAAmB,GAAAzC,GAAAxF,EAAA2E,EAAQsD,QAAQyD,UAAQzF,EAAAT,EAAArF,QAAA8F,EAAA7F,KAAA6F,EAAAT,EAAArF,OAAA,CAAtC,GAAIyF,GAAMK,EAAAjmB,KACb,IAAI4lB,EAAOrC,MAAQsX,EAAApU,YAAY2H,UAA/B,CAEA,GAAI4Q,IAAc,EACdxgC,EAAiBonB,EACjBqZ,EAAmBzgC,EAAI2mB,WAE3B,IADA3mB,EAAIumB,IAAI8V,EAAA5T,aAAa4W,UACjBr/B,EAAI4oB,GAAGyT,EAAA5T,aAAa6K,SAClBnN,EAAQQ,YAAYyZ,kBACtB1iC,KAAKL,OAAOsW,UAAU3T,EAAIqU,aAAc+N,EAAA3gB,WAAW+Y,KAAK,EAAO9c,KAAKL,OAAOwQ,UAAU7N,EAAI6yB,oBACtF,CACL,GAAIyM,EAyBJ,IAxBImB,EAAiBj/B,OACnB89B,EAAW5hC,KAAKgiC,kBAA8Be,EAAiBj/B,MAAO0gB,EAAAyB,KAAK1J,KACvEI,yBAAyBilB,IAAald,EAAAlgB,aAAaoY,QACrDglB,EAAW5hC,KAAKoiC,wBAAwBR,GACpCjlB,yBAAyBilB,IAAald,EAAAlgB,aAAaoY,QACjD6L,EAAQyC,GAAGyT,EAAA5T,aAAamK,WAC1Bl1B,KAAKsjB,QAAQiB,EAAAhC,eAAe8f,4DAA6DU,EAAiB1hB,OAC5GyhB,GAAc,KAGQ,MAAjBD,EACTjB,EAAW5hC,KAAKL,OAAOwQ,UAAU,GACxB0yB,EAAc3X,GAAGyT,EAAA5T,aAAa6K,SACvCgM,EAAW5hC,KAAKL,OAAOwQ,UAAU0yB,EAAc1N,cAAgB,IAG/DyM,EAAW5hC,KAAKL,OAAOuR,aAAawT,EAAArb,SAAS25B,OAC3ChjC,KAAKL,OAAOoS,gBAAgB8wB,EAAclsB,aAAc+N,EAAA3gB,WAAW+Y,KACnE9c,KAAKL,OAAOwQ,UAAU,IAEpBsY,EAAQyC,GAAGyT,EAAA5T,aAAamK,WAC1Bl1B,KAAKsjB,QAAQiB,EAAAhC,eAAe8f,4DAA6DU,EAAiB1hB,OAC5GyhB,GAAc,GAEZA,EAAa,CACf9iC,KAAKL,OAAOsW,UAAU3T,EAAIqU,aAAc+N,EAAA3gB,WAAW+Y,KAAK,EAAM9c,KAAKL,OAAOwQ,UAAU,GACpF,IAAIoyB,GAAUviC,KAAKL,OAAO+T,gBAAgBpR,EAAIqU,aAAcirB,EAC5D5hC,MAAK0/B,kBAAkB/7B,KAAK4+B,OACvB,CAEL,GADAviC,KAAKL,OAAOsW,UAAU3T,EAAIqU,aAAc+N,EAAA3gB,WAAW+Y,KAAK,EAAO8kB,GAC3D/kB,2BAA2B+kB,IAAald,EAAA3gB,WAAW+Y,IAIrD,KAAM,IAAIhB,OAAM,eAHhBxZ,GAAI6yB,cAAgBpY,0BAA0B6kB,GAC9Ct/B,EAAIumB,IAAI8V,EAAA5T,aAAa6K,UAK3BiN,EAA2BvgC,EAGvBmmB,EAAQQ,YAAY5H,MAAMK,OAAO2e,SAAW5X,EAAQQ,YAAYyZ,mBAC9DhZ,EAAOwB,GAAGyT,EAAA5T,aAAa6K,SACzB51B,KAAKL,OAAOyX,gBAAgBsS,EAAO/S,aAAc+S,EAAO/S,cACjDosB,GACP/iC,KAAKsjB,QAAQiB,EAAAhC,eAAe0gB,+BAAgCF,EAAiB1hB,ULq0G7E,MAAOwI,GAASC,GAAQ1G,MAAOyG,GAC/B,QACI,IACQE,IAAOA,EAAG7F,OAAS8U,EAAK1P,EAAGU,SAASgP,EAAGx4B,KAAK8oB,GAEpD,QAAU,GAAIQ,EAAK,KAAMA,GAAI1G,OKt0GzC,MADApjB,MAAK2/B,YAAc,MACZ,CL00GH,IAAI7V,GAAKkP,GKr0GfyG,EAAAj+B,UAAA0/B,2BAAA,SAA2BjY,EAAkCkI,EAA2BJ,OAAA,KAAAA,MAAA,KACtF,IAAItI,GAAUzoB,KAAKu0B,QAAQ5O,SAASxkB,IAAI8nB,EAAYwC,sBACpD,KAAKhD,GAAWA,EAAQpB,MAAQsX,EAAApU,YAAYgJ,mBAC1C,KAAM,IAAIzX,OAAM,oBAClB,OAAO9b,MAAKkjC,kCAAqDza,EAAS0I,EAAeJ,EAA6CtI,EAASQ,YAAYroB,OAG7J6+B,EAAAj+B,UAAA0hC,kCAAA,SAAkC1hC,EAA8B2vB,EAA2BJ,EAAkDiH,GAC3I,GAAIlL,GAAWtrB,EAAU0vB,yBAAyBC,EAAeJ,EAAyBiH,EAC1F,OAAKlL,IAEE9sB,KAAKmjC,gBAAgBrW,GAAYA,EAD/B,MAIX2S,EAAAj+B,UAAA2hC,gBAAA,SAAgBrW,GACd,GAAIA,EAAS5B,GAAGyT,EAAA5T,aAAa4W,UAC3B,OAAO,CAETzX,SAAQ4C,EAAS5B,GAAGyT,EAAA5T,aAAaC,UAAmC,SAAvB8B,EAASuB,WAEtD,IAAIpF,GAAc6D,EAAStrB,UAAUynB,WACrC,IAAI6D,EAAS5B,GAAGyT,EAAA5T,aAAagK,WAC3B,GAAI9L,EAAY/B,WAEd,MADAlnB,MAAKojB,MAAMmB,EAAAhC,eAAe6gB,yDAA0Dna,EAAYroB,KAAKygB,QAC9F,MAEJ,KAAK4H,EAAY/B,WAEtB,MADAlnB,MAAKojB,MAAMmB,EAAAhC,eAAe8gB,gFAAiFpa,EAAYroB,KAAKygB,QACrH,CAITyL,GAASjE,IAAI8V,EAAA5T,aAAa4W,SAG1B,IAAI2B,GAAgC,IACpC,KAAKxW,EAAS5B,GAAGyT,EAAA5T,aAAagK,UAAW,CACvC,GAAIwM,GAAmBvhC,KAAK+8B,eAC5B/8B,MAAK+8B,gBAAkBjQ,CACvB,IAAI5F,GAAagD,OAAOjB,EAAY/B,WAAY,0BAChDoc,GAAQtjC,KAAKujC,kBAAkBrc,EAE/B,IAAIsc,GAAoBxjC,KAAK+8B,gBAAgB1K,KAAK6H,UAC9CpN,GAASnX,YAAc6O,EAAAyB,KAAKa,MAAS0c,GACvCxjC,KAAKojB,MAAMmB,EAAAhC,eAAekhB,+DAAgEvZ,OAAOjB,EAAYtT,WAAY,wBAAwB0L,OACnJrhB,KAAK+8B,gBAAkBwE,EAIzB,GAAImC,GAAgB5W,EAAS2K,WAAWz1B,OACpC2hC,EAAwB7W,EAASgH,iBAAmB4P,EAAgB,EAAIA,EACxEE,EAAa,EAEbC,EAAmB/W,EAASnX,WAAWgkB,eACvCmK,EAAmB,GAAIpgC,OAAkBigC,GACzCI,EAAqB,GAAIrgC,OAAcigC,EAAwB,EAE/D7W,GAASgH,mBACXgQ,EAAiBF,GAAc5jC,KAAKgmB,QAAQtQ,QAAUqD,EAAOC,OAAS0L,EAAA3gB,WAAWiZ,IAAM0H,EAAA3gB,WAAW+Y,IAClGinB,EAAmBH,KAAgB9W,EAASgH,iBAAiBniB,KAAKqyB,oBAEpE,KAAK,GAAI1jC,GAAI,EAAGA,EAAIojC,IAAiBpjC,EACnCwjC,EAAiBF,GAAc9W,EAAS2K,WAAWn3B,GAAGqR,KAAKgoB,eAC3DoK,EAAmBH,KAAgB9W,EAAS2K,WAAWn3B,GAAGqR,KAAKqyB,mBAEjED,GAAmBH,GAAc9W,EAASnX,WAAWquB,mBACrD,IAAIzD,GAAUvgC,KAAKL,OAAOsQ,2BAA2B4zB,EAAkBC,EAClEvD,KACHA,EAAUvgC,KAAKL,OAAOiQ,gBAAgBm0B,EAAmBhiB,KAAK,IAAK8hB,EAAkBC,GAGvF,IAAI10B,EAWJ,OATEA,GADE0d,EAAS5B,GAAGyT,EAAA5T,aAAagK,UACrB/0B,KAAKL,OAAO6X,kBAAkBsV,EAASnW,aAAcmW,EAAStrB,UAAUgqB,UAAYsB,EAAStrB,UAAUgqB,UAAU6C,WAAa,MAAOvB,EAASuB,WAAYkS,GAE1JvgC,KAAKL,OAAO0W,YAAYyW,EAASnW,aAAc4pB,EAAS/b,EAAAic,mBAAmB3T,EAASwL,kBAAmBt4B,KAAKL,OAAOiU,YAAY,KAAuB0vB,EAAO5e,EAAA3gB,WAAWy8B,OAG5KvX,EAAY5H,MAAMK,OAAO2e,SAAWpX,EAAYyZ,kBAClD1iC,KAAKL,OAAO+W,kBAAkBoW,EAASnW,aAAcsS,EAAYroB,KAAK+gB,MAExEmL,EAASoN,SAASl6B,KAAKL,OAAQyP,IACxB,GAKTqwB,EAAAj+B,UAAA2/B,4BAAA,SAA4BlY,GAG1B,IAAK,GAFD8C,GAAU9C,EAAY8C,QACtBgT,EAAgB/+B,KAAKgmB,QAAQ+Y,cACxBz+B,EAAI,EAAG4B,EAAI6pB,EAAQ/pB,OAAQ1B,EAAI4B,IAAK5B,EAAG,CAC9C,GAAIopB,GAASqC,EAAQzrB,EACrB,QAAQopB,EAAOrC,MAEb,IAAK5C,GAAA6C,SAASC,kBACPwX,IAAiBta,EAAA8H,YAAY9H,EAAA+H,aAAa7E,OAA2B+B,EAAQgD,YAAmChD,EAAQ+H,eAAezvB,QAC1IhC,KAAKghC,wBAA0CtX,KACjD,MAEF,KAAKjF,GAAA6C,SAASW,sBACP8W,IAAiBta,EAAA8H,YAAY9H,EAAA+H,aAAa7E,OAA+B+B,EAAQgD,YAAuChD,EAAQ+H,eAAezvB,QAClJhC,KAAKikC,4BAAkDva,KACzD,MAEF,KAAKjF,GAAA6C,SAASG,iBACRsX,GAAiBta,EAAA8H,YAAY9H,EAAA+H,aAAa7E,OAA0B+B,EAAQgD,aAC9E1sB,KAAKihC,uBAAwCvX,EAC/C,MAEF,KAAKjF,GAAA6C,SAASO,qBACPkX,IAAiBta,EAAA8H,YAAY9H,EAAA+H,aAAa7E,OAA8B+B,EAAQgD,YAAsChD,EAAQ+H,eAAezvB,QAChJhC,KAAKkhC,2BAAgDxX,KACvD,MAEF,KAAKjF,GAAA6C,SAASa,sBACR4W,GAAiBta,EAAA8H,YAAY9H,EAAA+H,aAAa7E,OAA+B+B,EAAQgD,aACnF1sB,KAAKmhC,4BAAkDzX,EACzD,MAEF,KAAKjF,GAAA6C,SAASiB,SACZ,GAAIwW,GAAiBta,EAAA8H,YAAY9H,EAAA+H,aAAa7E,OAA4B+B,EAAQgD,WAAY,CAC5F,GAAI0U,GAAephC,KAAKqhC,yBAA4C3X,GAAQ,EACxE0X,IACFphC,KAAK0/B,kBAAkB/7B,KAAKy9B,GAEhC,KAEF,SACE,KAAM,IAAItlB,OAAM,gCAKxB2jB,EAAAj+B,UAAA0iC,iBAAA,SAAiBC,GACf,GAAKA,EAAGpY,QAAR,CAGA,GAAIgT,GAAgB/+B,KAAKgmB,QAAQ+Y,aLozG7B,KKnzGJ,IAAoB,GAAAzV,GAAAxF,EAAAqgB,EAAGpY,QAAQyD,UAAQzF,EAAAT,EAAArF,QAAA8F,EAAA7F,KAAA6F,EAAAT,EAAArF,OAAA,CAAlC,GAAIwE,GAAOsB,EAAAjmB,KACd,QAAQ2kB,EAAQpB,MAEd,IAAKsX,GAAApU,YAAYC,iBACVuU,IAAkCtW,EAASyC,GAAGyT,EAAA5T,aAAaI,WAAgC1C,EAASyC,GAAGyT,EAAA5T,aAAa6L,UACvH52B,KAAKokC,+BAA+C3b,KACtD,MAEF,KAAKkW,GAAApU,YAAYyK,KACfh1B,KAAK4iC,YAAkBna,EACvB,MAEF,KAAKkW,GAAApU,YAAYgJ,oBACVwL,IAAqCtW,EAASyC,GAAGyT,EAAA5T,aAAaI,WAAmC1C,EAASyC,GAAGyT,EAAA5T,aAAa6L,UAC7H52B,KAAKkjC,kCAAqDza,KAAa,KAA0BA,EAASQ,YAAYroB,KACxH,MAEF,KAAK+9B,GAAApU,YAAYc,OACfrrB,KAAK0hC,cAAsBjZ,EAC3B,MAEF,KAAKkW,GAAApU,YAAYoK,UACf30B,KAAKkkC,iBAA4Bzb,KLqzGnC,MAAO2O,GAASC,GAAQjU,MAAOgU,GAC/B,QACI,IACQrN,IAAOA,EAAG7F,OAAS8U,EAAK1P,EAAGU,SAASgP,EAAGx4B,KAAK8oB,GAEpD,QAAU,GAAI+N,EAAK,KAAMA,GAAIjU,OAEjC,GAAIiU,GAAK2B,IKpzGfyG,EAAAj+B,UAAA8/B,uBAAA,SAAuBla,GAErB,IAAK,GADD2E,GAAU3E,EAAU2E,QACfzrB,EAAI,EAAG4B,EAAI6pB,EAAQ/pB,OAAQ1B,EAAI4B,IAAK5B,EAAG,CAC9C,GAAIopB,GAASqC,EAAQzrB,GACjB+jC,EAAqBjd,EAAU/F,MAAMK,OAAOkO,aAAe+O,EAAAha,eAAiB+E,EAAO9S,aAAa+K,KAChG8G,EAAUzoB,KAAKu0B,QAAQ70B,QAAQyB,IAAIkjC,EACvC,IAAK5b,EAEL,OAAQA,EAAQpB,MAEd,IAAKsX,GAAApU,YAAYC,gBACO/B,EAASyC,GAAGyT,EAAA5T,aAAa6L,UAC7C52B,KAAKokC,+BAA+C3b,KACtD,MAEF,KAAKkW,GAAApU,YAAYyK,KACfh1B,KAAK4iC,YAAkBna,EACvB,MAEF,KAAKkW,GAAApU,YAAYgJ,mBACf,IAAyB9K,EAASyC,GAAGyT,EAAA5T,aAAa6L,UAAYxP,EAAU/F,MAAMK,OAAO2e,QAAS,CAC5F,GAAIiE,GAAmBtkC,KAAKkjC,kCAAqDza,KAAa,KAA0BA,EAASQ,YAAYroB,KAC7I,IAAI0jC,EAAkB,CACpB,GAAIC,GAAsBD,EAAiB9iC,UAAUynB,WACjDsb,IAAuBA,EAAoBC,oBAAoB9a,IACjE1pB,KAAKL,OAAO+W,kBAAkB4tB,EAAiB3tB,aAAc+S,EAAO9S,aAAa+K,OAGvF,KAEF,KAAKgd,GAAApU,YAAYc,OACf,GAAIrrB,KAAK0hC,cAAsBjZ,IAAYrB,EAAU/F,MAAMK,OAAO2e,QAAS,CACzE,GAAIoE,GAA6Bhc,EAASQ,WACtCwb,IAAqBA,EAAkBD,oBAAoB9a,KAChDjB,EAASyC,GAAGyT,EAAA5T,aAAa6K,SAClC51B,KAAKL,OAAOyX,gBAAgBqR,EAAQ9R,aAAc+S,EAAO9S,aAAa+K,MAExE3hB,KAAKsjB,QAAQiB,EAAAhC,eAAe0gB,+BAAgCvZ,EAAOrI,QAGzE,KAEF,KAAKsd,GAAApU,YAAYoK,UACf30B,KAAKkkC,iBAA4Bzb,MAQzCgX,EAAAj+B,UAAAw/B,wBAAA,SAAwB/X,EAA+BkI,EAA2BJ,EAAyDY,OAAzD,KAAAZ,MAAA,UAAyD,KAAAY,MAAA,KACzI,IAAIlJ,GAAUzoB,KAAKu0B,QAAQ5O,SAASxkB,IAAI8nB,EAAYwC,sBACpD,KAAKhD,GAAWA,EAAQpB,MAAQsX,EAAApU,YAAYC,gBAC1C,KAAM,IAAI1O,OAAM,iBAClB9b,MAAKokC,+BAA+C3b,EAAS0I,EAAeJ,EAAyBY,IAGvG8N,EAAAj+B,UAAA4iC,+BAAA,SAA+B5iC,EAA2B2vB,EAA2BJ,EAAyDY,OAAzD,KAAAZ,MAAA,UAAyD,KAAAY,MAAA,KAC5I,IAAI7E,GAAWtrB,EAAU0vB,yBAAyBC,EAAeJ,EAAyBY,EACrF7E,IAEL9sB,KAAK0kC,aAAa5X,IAGpB2S,EAAAj+B,UAAAkjC,aAAA,SAAa5X,GACX,QAAIA,EAAS5B,GAAGyT,EAAA5T,aAAa4W,YAE7B7U,EAASjE,IAAI8V,EAAA5T,aAAa4W,WACnB,IAGTlC,EAAAj+B,UAAAyiC,4BAAA,SAA4Bhb,EAAmCkI,EAA2BJ,EAAyDY,GACjJ,UADwF,KAAAZ,MAAA,UAAyD,KAAAY,MAAA,MAC3I,GAAI7V,OAAM,oBAMlB2jB,EAAAj+B,UAAAmjC,iBAAA,SAAiB31B,EAAoB41B,OAAA,KAAAA,MAAA,EACnC,IAAInK,GAAeiG,UAAU1gC,KAAKy6B,aAAcmK,GAC5C11B,EAAUwV,EAAA5V,cAAcC,OAAOC,EAAQyrB,EAG3C,OAFAz6B,MAAK6/B,eAAel8B,KAAKuL,GACzBlP,KAAKy6B,aAAeoK,QAAQpK,EAAc9E,QAAQ3mB,EAAOhN,OAAQ,IAC1DkN,GAKTuwB,EAAAj+B,UAAAggC,iBAAA,SAAiBpa,GACf,GAAIpW,EACJ,QAAQoW,EAAUC,MAEhB,IAAK5C,GAAA6C,SAASwd,MACZ9zB,EAAOhR,KAAK+kC,sBAAsC3d,EAClD,MAEF,KAAK3C,GAAA6C,SAAS0d,MACZh0B,EAAOhR,KAAKilC,sBAAsC7d,EAClD,MAEF,KAAK3C,GAAA6C,SAAS4d,SACZl0B,EAAOhR,KAAKmlC,yBAA4C/d,EACxD,MAEF,KAAK3C,GAAA6C,SAAS8d,GACZp0B,EAAOhR,KAAKqlC,mBAAgCje,EAC5C,MAEF,KAAK3C,GAAA6C,SAASge,MACZt0B,EAAOhR,KAAKulC,sBAAsCne,EAClD,MAEF,KAAK3C,GAAA6C,SAASke,WACZx0B,EAAOhR,KAAKylC,2BAAgDre,EAC5D,MAEF,KAAK3C,GAAA6C,SAASoe,IACZ10B,EAAOhR,KAAK2lC,oBAAkCve,EAC9C,MAEF,KAAK3C,GAAA6C,SAASse,GACZ50B,EAAOhR,KAAK6lC,mBAAgCze,EAC5C,MAEF,KAAK3C,GAAA6C,SAASwe,OACZ90B,EAAOhR,KAAK+lC,uBAAwC3e,EACpD,MAEF,KAAK3C,GAAA6C,SAAS0e,OACZh1B,EAAOhR,KAAKimC,uBAAwC7e,EACpD,MAEF,KAAK3C,GAAA6C,SAAS4e,MACZl1B,EAAOhR,KAAKmmC,sBAAsC/e,EAClD,MAEF,KAAK3C,GAAA6C,SAAS8e,IACZp1B,EAAOhR,KAAKqmC,oBAAkCjf,EAC9C,MAEF,KAAK3C,GAAA6C,SAASiB,SACZ,GAAI6Y,GAAephC,KAAKqhC,yBAA4Cja,EACpEpW,GAAOowB,GAA8BphC,KAAKL,OAAOmV,WACjD,MAEF,KAAK2P,GAAA6C,SAASgf,MACZt1B,EAAOhR,KAAKumC,sBAAsCnf,EAClD,MAEF,KAAK3C,GAAA6C,SAASe,gBACZ,GAAIroB,KAAK+8B,iBAAmB/8B,KAAKogC,cAC/B,MAAOpgC,MAAKL,OAAOmV,WAGvB,SACE,KAAM,IAAIgH,OAAM,sBAIpB,MADA9b,MAAKwmC,iBAAiBx1B,EAAMoW,EAAU/F,OAC/BrQ,GAGTyuB,EAAAj+B,UAAA+hC,kBAAA,SAAkBrc,GAGhB,IAAK,GAFDhlB,GAAIglB,EAAWllB,OACfshC,EAAQ,GAAI5/B,OAAqBxB,GAC5B5B,EAAI,EAAGA,EAAI4B,IAAK5B,EACvBgjC,EAAMhjC,GAAKN,KAAKwhC,iBAAiBta,EAAW5mB,GAC9C,OAAOgjC,IAGT7D,EAAAj+B,UAAAujC,sBAAA,SAAsB3d,GACpB,GAAIF,GAAaE,EAAUF,UAO3BlnB,MAAK+8B,gBAAgB1K,KAAOryB,KAAK+8B,gBAAgB1K,KAAK8K,oBAEtD,IAAIsJ,GAAOzmC,KAAKL,OAAOiU,YAAY,KAAM5T,KAAKujC,kBAAkBrc,GAAaxC,EAAA3gB,WAAWy8B,MACpFkG,EAAc1mC,KAAK+8B,gBAAgB1K,KAAKnH,GAAE,EAO9C,OAJAlrB,MAAK+8B,gBAAgB1K,KAAOryB,KAAK+8B,gBAAgB1K,KAAKgL,qBAClDqJ,GACF1mC,KAAK+8B,gBAAgB1K,KAAKxJ,IAAG,GAExB4d,GAGThH,EAAAj+B,UAAAyjC,sBAAA,SAAsB7d,GACpB,GAAIA,EAAUvT,MAEZ,MADA7T,MAAKojB,MAAMmB,EAAAhC,eAAeuL,wBAAyB1G,EAAUvT,MAAMwN,OAC5DrhB,KAAKL,OAAOoW,mBAErB,IAAImnB,GAAal9B,KAAK+8B,gBAAgB1K,KAAK6K,UAC3C,OAAkB,OAAdA,GACFl9B,KAAKojB,MAAMmB,EAAAhC,eAAeokB,qFAAsFvf,EAAU/F,OACnHrhB,KAAKL,OAAOoW,sBAErB/V,KAAK+8B,gBAAgB1K,KAAKxJ,IAAG,GACtB7oB,KAAKL,OAAOsU,YAAYipB,KAGjCuC,EAAAj+B,UAAA2jC,yBAAA,SAAyB/d,GACvB,GAAIA,EAAUvT,MAEZ,MADA7T,MAAKojB,MAAMmB,EAAAhC,eAAeuL,wBAAyB1G,EAAUvT,MAAMwN,OAC5DrhB,KAAKL,OAAOoW,mBAGrB,IAAIknB,GAAgBj9B,KAAK+8B,gBAAgB1K,KAAK4K,aAC9C,OAAqB,OAAjBA,GACFj9B,KAAKojB,MAAMmB,EAAAhC,eAAeqkB,8EAA+Exf,EAAU/F,OAC5GrhB,KAAKL,OAAOoW,sBAErB/V,KAAK+8B,gBAAgB1K,KAAKxJ,IAAG,GACtB7oB,KAAKL,OAAOsU,YAAYgpB,KAGjCwC,EAAAj+B,UAAA6jC,mBAAA,SAAmBje,GAIjB,GAAIvT,GAAQ7T,KAAK+8B,gBAAgBhD,oBAC7B8M,EAAqB7mC,KAAK+8B,gBAAgB1K,KAAK6K,WAC/C4J,EAAwB9mC,KAAK+8B,gBAAgB1K,KAAK4K,cAClDC,EAAal9B,KAAK+8B,gBAAgB1K,KAAK6K,WAAa,SAAWrpB,EAC/DopB,EAAgBj9B,KAAK+8B,gBAAgB1K,KAAK4K,cAAgB,YAAcppB,EAExEW,EAAOxU,KAAKwhC,iBAAiBpa,EAAUA,UAG3CpnB,MAAK+8B,gBAAgB1K,KAAK6K,WAAa2J,EACvC7mC,KAAK+8B,gBAAgB1K,KAAK4K,cAAgB6J,CAE1C,IAAI5yB,GAAYlU,KAAKgiC,kBAAkB5a,EAAUlT,UAAWsQ,EAAAyB,KAAK1J,IAIjE,OAFAvc,MAAK+8B,gBAAgB9C,oBAEdj6B,KAAKL,OAAOiU,YAAYspB,GAC7Bl9B,KAAKL,OAAO4U,WAAW0oB,EACrBj9B,KAAKL,OAAOiU,YAAY,MACtBY,EACAxU,KAAKL,OAAOsU,YAAYgpB,EAAe/oB,IACtCwQ,EAAA3gB,WAAWy8B,QACf9b,EAAA3gB,WAAWy8B,OAGhBf,EAAAj+B,UAAA+jC,sBAAA,SAAsBne,GACpB,MAAOpnB,MAAKL,OAAOmV,aAGrB2qB,EAAAj+B,UAAAikC,2BAAA,SAA2Bre,GACzB,GAAIpW,GAAOhR,KAAKgiC,kBAAkB5a,EAAU/S,WAAYmQ,EAAAyB,KAAKa,KAAI,EAKjE,OAJI9mB,MAAK4/B,aAAepb,EAAAyB,KAAKa,OAC3B9V,EAAOhR,KAAKL,OAAOyU,WAAWpD,GAC9BhR,KAAK4/B,YAAcpb,EAAAyB,KAAKa,MAEnB9V,GAGTyuB,EAAAj+B,UAAAmkC,oBAAA,SAAoBve,GAIlB,GAAIhG,GAAUphB,KAAK+8B,gBAAgBhD,mBACnC/5B,MAAK+8B,gBAAgB1K,KAAOryB,KAAK+8B,gBAAgB1K,KAAK8K,oBACtD,IAAID,GAAal9B,KAAK+8B,gBAAgB1K,KAAK6K,WAAa,SAAW9b,EAC/D6b,EAAgBj9B,KAAK+8B,gBAAgB1K,KAAK4K,cAAgB,YAAc7b,EAGxEjL,EAAciR,EAAUjR,YAAcnW,KAAKwhC,iBAA4Bpa,EAAUjR,aAAenW,KAAKL,OAAOmV,YAC5GZ,EAAYkT,EAAUlT,UAAYlU,KAAKgiC,kBAA8B5a,EAAUlT,UAAWsQ,EAAAyB,KAAK1J,KAAOvc,KAAKL,OAAOwQ,UAAU,GAC5H42B,EAAc3f,EAAU2f,YAAc/mC,KAAKgiC,kBAA8B5a,EAAU2f,YAAaviB,EAAAyB,KAAKa,MAAQ9mB,KAAKL,OAAOmV,YACzHN,EAAOxU,KAAKwhC,iBAAiBpa,EAAUA,WACvC4f,GAAiB5f,EAAUlT,WAAalU,KAAK+8B,gBAAgB1K,KAAKnH,GAAE,EAIxElrB,MAAK+8B,gBAAgB1K,KAAOryB,KAAK+8B,gBAAgB1K,KAAKgL,qBACtDr9B,KAAK+8B,gBAAgB9C,mBAErB,IAAIjpB,GAAOhR,KAAKL,OAAOiU,YAAYspB,GACjC/mB,EACAnW,KAAKL,OAAO4U,WAAW0oB,EAAej9B,KAAKL,OAAOiU,YAAY,MAC5D5T,KAAKL,OAAO+U,SAASR,EAAWlU,KAAKL,OAAOiU,YAAY,MACtDY,EACAuyB,EACA/mC,KAAKL,OAAOsU,YAAYgpB,IACvBvY,EAAA3gB,WAAWy8B,QACb9b,EAAA3gB,WAAWy8B,QACb9b,EAAA3gB,WAAWy8B,KAUd,OAPIwG,KACFhnC,KAAK+8B,gBAAgB1K,KAAKxJ,IAAG,GAC7B7X,EAAOhR,KAAKL,OAAOiU,YAAY,MAC7B5C,EACAhR,KAAKL,OAAOoW,uBAGT/E,GAGTyuB,EAAAj+B,UAAAqkC,mBAAA,SAAmBze,GAGjB,GAAIlT,GAAYlU,KAAKgiC,kBAAkB5a,EAAUlT,UAAWsQ,EAAAyB,KAAK1J,IAGjEvc,MAAK+8B,gBAAgB1K,KAAOryB,KAAK+8B,gBAAgB1K,KAAK8K,oBACtD,IAAIxoB,GAAS3U,KAAKwhC,iBAAiBpa,EAAUzS,QACzCsyB,EAAgBjnC,KAAK+8B,gBAAgB1K,KAAKnH,GAAE,EAChDlrB,MAAK+8B,gBAAgB1K,KAAOryB,KAAK+8B,gBAAgB1K,KAAKgL,oBAEtD,IAAIzoB,GAAyB,EACzBsyB,GAAiB,CASrB,OARI9f,GAAUxS,UACZ5U,KAAK+8B,gBAAgB1K,KAAOryB,KAAK+8B,gBAAgB1K,KAAK8K,qBACtDvoB,EAAU5U,KAAKwhC,iBAAiBpa,EAAUxS,SAC1CsyB,EAAiBlnC,KAAK+8B,gBAAgB1K,KAAKnH,GAAE,GAC7ClrB,KAAK+8B,gBAAgB1K,KAAOryB,KAAK+8B,gBAAgB1K,KAAKgL,sBAEpD4J,GAAiBC,GACnBlnC,KAAK+8B,gBAAgB1K,KAAKxJ,IAAG,GACxB7oB,KAAKL,OAAO+U,SAASR,EAAWS,EAAQC,IAGjD6qB,EAAAj+B,UAAAukC,uBAAA,SAAuB3e,GACrB,GAAI/S,GAA4B,CAOhC,OANI+S,GAAUtjB,QACZuQ,EAAarU,KAAKgiC,kBAA8B5a,EAAUtjB,MAAO9D,KAAK+8B,gBAAgBpnB,aAGxF3V,KAAK+8B,gBAAgB1K,KAAKxJ,IAAG,GAEtB7oB,KAAKL,OAAOqV,aAAaX,IAGlCorB,EAAAj+B,UAAAykC,uBAAA,SAAuB7e,GAGrB,GAAIhG,GAAUphB,KAAK+8B,gBAAgBhD,oBAG/BoN,EAAYnnC,KAAK+8B,gBAAgBtD,aAAajV,EAAAyB,KAAK1J,KACnDra,EAAIklB,EAAUggB,MAAMplC,OAGpBqlC,EAAS,GAAI3jC,OAAqB,EAAIxB,EAC1CmlC,GAAO,GAAKrnC,KAAKL,OAAO6T,eAAe2zB,EAAUz1B,MAAO1R,KAAKgiC,kBAAkB5a,EAAUlT,UAAWsQ,EAAAyB,KAAK1J,KAKzG,KAAK,GAFD+qB,GAAa,EACbC,GAAgB,EACXjnC,EAAI,EAAGA,EAAI4B,IAAK5B,EAAG,CAC1B,GAAIknC,GAAQpgB,EAAUggB,MAAM9mC,EACxBknC,GAAM3zB,MACRwzB,EAAOC,KAAgBtnC,KAAKL,OAAOsU,YAAY,OAAS3T,EAAEmhB,SAAS,IAAM,IAAML,EAC7EphB,KAAKL,OAAOuR,aAAawT,EAAArb,SAASo+B,MAChCznC,KAAKL,OAAO8R,eAAe01B,EAAUz1B,MAAOgT,EAAA3gB,WAAW+Y,KACvD9c,KAAKgiC,kBAAkBwF,EAAM3zB,MAAO2Q,EAAAyB,KAAK1J,OAI7CgrB,EAAejnC,EAGnBN,KAAK+8B,gBAAgBlD,cAAcsN,GAGnCE,EAAOC,GAActnC,KAAKL,OAAOsU,aAAaszB,GAAgB,EACxD,OAASA,EAAa9lB,SAAS,IAC/B,SACA,IAAML,EAGZ,IAAIsmB,GAAe1nC,KAAKL,OAAOiU,YAAY,SAAWwN,EAASimB,EAAQ3iB,EAAA3gB,WAAWy8B,MAC9EwG,GAAgB,CACpB,KAAK1mC,EAAI,EAAGA,EAAI4B,IAAK5B,EAAG,CACtBknC,EAAQpgB,EAAUggB,MAAM9mC,EACxB,IAAIC,GAAIinC,EAAMtgB,WAAWllB,OACrBwS,EAAO,GAAI9Q,OAAqB,EAAInD,EACxCiU,GAAK,GAAKkzB,EAGV1nC,KAAK+8B,gBAAgB1K,KAAOryB,KAAK+8B,gBAAgB1K,KAAK8K,oBAKtD,KAAK,GAJDD,GAAal9B,KAAK+8B,gBAAgB1K,KAAK6K,WAAa,SAAW9b,EAE/DumB,EAAernC,GAAK4B,EAAI,EACxB0lC,EAAaD,EAA4B,QAAUrnC,EAAI,GAAGmhB,SAAS,IAAM,IAAML,EAAnD8b,EACvB/V,EAAI,EAAGA,EAAI5mB,IAAK4mB,EACvB3S,EAAK2S,EAAI,GAAKnnB,KAAKwhC,iBAAiBgG,EAAMtgB,WAAWC,GAEjDwgB,IAAgB3nC,KAAK+8B,gBAAgB1K,KAAKnH,GAAE,KAChD8b,GAAgB,GAGlBhnC,KAAK+8B,gBAAgB1K,KAAOryB,KAAK+8B,gBAAgB1K,KAAKgL,qBAEtDqK,EAAe1nC,KAAKL,OAAOiU,YAAYg0B,EAAWpzB,EAAMkQ,EAAA3gB,WAAWy8B,MASrE,MAPAxgC,MAAK+8B,gBAAgB9C,oBAGjBsN,GAAgB,GAAKP,GACvBhnC,KAAK+8B,gBAAgB1K,KAAKxJ,IAAG,GAGxB6e,GAGTjI,EAAAj+B,UAAA2kC,sBAAA,SAAsB/e,GASpB,MANApnB,MAAK+8B,gBAAgB1K,KAAKxJ,IAAG,GAG7B7oB,KAAK+8B,gBAAgB1K,KAAKxJ,IAAG,GAGtB7oB,KAAKL,OAAOoW,qBAGrB0pB,EAAAj+B,UAAA6kC,oBAAA,SAAoBjf,GAClB,KAAM,IAAItL,OAAM,oBASlB2jB,EAAAj+B,UAAA6/B,yBAAA,SAAyBja,EAA8BygB,OAAA,KAAAA,OAAA,EACrD,IAAI3X,GAAe9I,EAAU8I,YAG7B,IAAI2X,GACF7nC,KAAK+8B,iBAAmB/8B,KAAKogC,eAC7BhZ,EAAU8B,QAAU9B,EAAU8B,OAAO7B,MAAQ5C,EAAA6C,SAAS8D,OACrD,CAMD,IAAK,GAAI9qB,GAAI,EAAG4B,EAAIguB,EAAaluB,OAAQ1B,EAAI4B,IAAK5B,EAChDN,KAAKyhC,yBAAyBvR,EAAa5vB,GAC7C,OAAO,GAIT,GAAIwnC,GAAe,GAAIpkC,MACvB,KAAKpD,EAAI,EAAG4B,EAAIguB,EAAaluB,OAAQ1B,EAAI4B,IAAK5B,EAAG,CAC/C,GAAI2oB,GAAciH,EAAa5vB,GAC3BM,EAAOqoB,EAAYroB,KAAK+gB,KACxBhQ,EAAoB,KACpBo2B,EAAsB,CAC1B,IAAI9e,EAAYtX,KAAM,CAEpB,KADAA,EAAO3R,KAAKu0B,QAAQ1D,YAAsB5H,EAAYtX,KAAM3R,KAAK+8B,gBAAgBhM,yBAAyB,IAExG,QACE9H,GAAY9S,cACd4xB,EAAO/nC,KAAKgiC,kBAAkB/Y,EAAY9S,YAAaxE,QACpD,KAAIsX,EAAY9S,YAOhB,CACLnW,KAAKojB,MAAMmB,EAAAhC,eAAewf,cAAe9Y,EAAYroB,KAAKygB,MAAM0Q,MAChE,UAPA,GADAgW,EAAO/nC,KAAKgiC,kBAAkB/Y,EAAY9S,YAAaqO,EAAAyB,KAAKa,KAAI,GAC5D9mB,KAAK4/B,aAAepb,EAAAyB,KAAKa,KAAM,CACjC9mB,KAAKojB,MAAMmB,EAAAhC,eAAeuf,mCAAoC7Y,EAAY5H,MAAOrhB,KAAK4/B,YAAYne,WAAY,SAC9G,UAEF9P,EAAO3R,KAAK4/B,YAKd,GAAInb,EAAA8H,YAAY9H,EAAA+H,aAAayI,MAAOhM,EAAYyD,WAC9C,GAAIqb,EAAM,CAER,GADAA,EAAO/nC,KAAKoiC,wBAAwB2F,GAChCprB,yBAAyBorB,IAASrjB,EAAAlgB,aAAaoY,MAAO,CACxD,GAAI4c,GAAQ,GAAImF,GAAArI,MAAMt2B,KAAKu0B,QAAS3zB,GAAO,EAAG+Q,EAC9C,QAAQkL,2BAA2BkrB,IACjC,IAAKrjB,GAAA3gB,WAAW+Y,IACd0c,EAAQA,EAAM/D,yBAAyB1Y,0BAA0BgrB,GAAO,EACxE,MACF,KAAKrjB,GAAA3gB,WAAWiZ,IACdwc,EAAQA,EAAM/D,yBAAyBxY,6BAA6B8qB,GAAO7qB,8BAA8B6qB,GACzG,MACF,KAAKrjB,GAAA3gB,WAAWoZ,IACdqc,EAAQA,EAAM3D,uBAA4BzY,0BAA0B2qB,GACpE,MACF,KAAKrjB,GAAA3gB,WAAWsZ,IACdmc,EAAQA,EAAM3D,uBAAuBvY,0BAA0ByqB,GAC/D,MACF,SACE,KAAM,IAAIjsB,OAAM,0BAGpB,GAAIghB,GAAe98B,KAAK+8B,gBAAgB1K,KAAKyK,YAC7C,IAAKA,GAEA,GAAIA,EAAaxR,IAAI1qB,GAExB,MADAZ,MAAKojB,MAAMmB,EAAAhC,eAAegJ,uBAAwBtC,EAAYroB,KAAKygB,MAAOzgB,GACnE,MAHPk8B,GAAe98B,KAAK+8B,gBAAgB1K,KAAKyK,aAAe,GAAIxX,IAM9D,OADAwX,GAAajU,IAAIjoB,EAAM44B,GAChB,EAEPx5B,KAAKsjB,QAAQiB,EAAAhC,eAAe8f,4DAA6DpZ,EAAY5H,WAEvGrhB,MAAKojB,MAAMmB,EAAAhC,eAAeylB,wCAAyC/e,EAAY5H,MAE/EoD,GAAA8H,YAAY9H,EAAA+H,aAAauJ,IAAK9M,EAAYyD,WAC5C1sB,KAAK+8B,gBAAgB1K,KAAKoL,eAAe78B,EAAM+Q,EAAMsX,EAAYroB,MAEjEZ,KAAK+8B,gBAAgBxD,SAAS5nB,EAAM/Q,GAClCmnC,GACFD,EAAankC,KAAK3D,KAAKioC,2BAA2Bhf,EAAYroB,KAAMmnC,IAExE,MAAOD,GAAa9lC,OACS,GAAvB8lC,EAAa9lC,OACX8lC,EAAa,GACb9nC,KAAKL,OAAOiU,YAAY,KAAMk0B,EAAcpjB,EAAA3gB,WAAWy8B,MACzD,GAGRf,EAAAj+B,UAAA+kC,sBAAA,SAAsBnf,GAGpB,GAAIlT,GAAYlU,KAAKgiC,kBAAkB5a,EAAUlT,UAAWsQ,EAAAyB,KAAK1J,KAG7D1I,EAAQ7T,KAAK+8B,gBAAgBhD,mBACjC/5B,MAAK+8B,gBAAgB1K,KAAOryB,KAAK+8B,gBAAgB1K,KAAK8K,oBACtD,IAAID,GAAal9B,KAAK+8B,gBAAgB1K,KAAK6K,WAAa,SAAWrpB,EAC/DopB,EAAgBj9B,KAAK+8B,gBAAgB1K,KAAK4K,cAAgB,YAAcppB,EAExEW,EAAOxU,KAAKwhC,iBAAiBpa,EAAUA,UAK3CpnB,MAAK+8B,gBAAgB1K,KAAOryB,KAAK+8B,gBAAgB1K,KAAKgL,qBACtDr9B,KAAK+8B,gBAAgB9C,mBAErB,IAAIjpB,GAAOhR,KAAKL,OAAOiU,YAAYspB,GACjCl9B,KAAKL,OAAO4U,WAAW0oB,EACrBj9B,KAAKL,OAAO+U,SAASR,EAAWlU,KAAKL,OAAOiU,YAAY,MACtDY,EACAxU,KAAKL,OAAOsU,YAAYgpB,IACvBvY,EAAA3gB,WAAWy8B,SAEf9b,EAAA3gB,WAAWy8B,KASd,OAAOxvB,IAMTyuB,EAAAj+B,UAAA2gC,sBAAA,SAAsB1Z,EAA8Byf,GAGlD,OAFAhe,OAAOzB,EAAQyC,GAAGyT,EAAA5T,aAAa6K,UAEvBnN,EAAQ9W,KAAKuZ,GAAE,IAAuBgd,EAAehd,GAAE,IAAuBzC,EAAQ9W,KAAKusB,KAAOgK,EAAehK,MACpHl+B,KAAK4/B,YAAcsI,GAAgB7gB,MACnCrnB,KAAK4/B,YAAcnX,EAAQ9W,MAAM0V,MAGpC,OACA,OACE,GAAI8gB,GAAQ1f,EAAQ9W,KAAKy2B,yBAAyB5jB,EAAAyB,KAAK1J,IACvD,OAAOvc,MAAKL,OAAOwQ,UAAmC,GAAzBsY,EAAQ+M,kBAAiDvc,QAAQwP,EAAQiN,uBAAyByS,GAASA,EAAQ,EAElJ,QACA,OACA,QACE,GAAIE,GAAO5f,EAAQ9W,KAAK22B,wBAAwB9jB,EAAAyB,KAAK1J,IACrD,OAAOvc,MAAKL,OAAOwQ,UAAmC,GAAzBsY,EAAQ+M,kBAAiDvc,QAAQwP,EAAQiN,sBAAwB2S,EAAO,EAEvI,QACA,OACE,MAAOroC,MAAKL,OAAOwQ,UAAmC,GAAzBsY,EAAQ+M,kBAAiDvc,QAAQwP,EAAQiN,sBAAwB,EAEhI,QACA,OACE,IAAKjN,EAAQ8L,QAAQvO,QAAQuiB,SAC3B,MAAOvoC,MAAKL,OAAOwQ,UAAmC,GAAzBsY,EAAQ+M,kBAAiDvc,QAAQwP,EAAQiN,sBAAwB,EAGlI,QACA,OACE,MAAgC,IAAzBjN,EAAQ+M,kBACXx1B,KAAKL,OAAO2Q,UAAU2I,QAAQwP,EAAQiN,sBAAuBxc,SAASuP,EAAQiN,uBAC9E11B,KAAKL,OAAO2Q,UAAU,EAE5B,SACE,MAAOtQ,MAAKL,OAAO+Q,UAAgC+X,EAASqN,mBAE9D,SACE,MAAO91B,MAAKL,OAAOiR,UAAgC6X,EAASqN,mBAE9D,SACE,KAAM,IAAIha,OAAM,4BAItB2jB,EAAAj+B,UAAAwgC,kBAAA,SAAkB3tB,EAAwB6zB,EAAsBM,EAA0DC,OAA1D,KAAAD,MAAA,OAA0D,KAAAC,OAAA,GACxHzoC,KAAK4/B,YAAcsI,CAEnB,IAAIl3B,EACJ,QAAQqD,EAAWgT,MAEjB,IAAK5C,GAAA6C,SAASoM,UACZ1iB,EAAOhR,KAAK0oC,2BAAgDr0B,EAAY6zB,EACxE,MAEF,KAAKzjB,GAAA6C,SAASsM,OACZ5iB,EAAOhR,KAAK2oC,wBAA0Ct0B,EAAY6zB,EAAgBO,EAClF,MAEF,KAAKhkB,GAAA6C,SAAS+M,KACZrjB,EAAOhR,KAAK4oC,sBAAsCv0B,EAAY6zB,EAC9D,MAEF,KAAKzjB,GAAA6C,SAASuhB,MACZ73B,EAAOhR,KAAK8oC,uBAAwCz0B,EAAY6zB,EAChE,MAEF,KAAKzjB,GAAA6C,SAAS8M,cACZpjB,EAAOhR,KAAK+oC,+BAAwD10B,EAAY6zB,EAChF,MAEF,KAAKzjB,GAAA6C,SAAS4M,WACd,IAAKzP,GAAA6C,SAAS0hB,MACd,IAAKvkB,GAAA6C,SAAS2hB,KACd,IAAKxkB,GAAA6C,SAASuM,KACd,IAAKpP,GAAA6C,SAAS4hB,KACZl4B,EAAOhR,KAAKmpC,4BAAkD90B,EAAY6zB,EAC1E,MAEF,KAAKzjB,GAAA6C,SAAS4G,QACZld,EAAOhR,KAAKopC,yBAA4C/0B,EAAY6zB,EACpE,MAEF,KAAKzjB,GAAA6C,SAAS+hB,IACZr4B,EAAOhR,KAAKspC,qBAAoCj1B,EAAY6zB,EAC5D,MAEF,KAAKzjB,GAAA6C,SAASmM,cACZziB,EAAOhR,KAAKupC,+BAAwDl1B,EAAY6zB,EAChF,MAEF,KAAKzjB,GAAA6C,SAAS6M,eACZnjB,EAAOhR,KAAKwpC,gCAA0Dn1B,EAAY6zB,EAClF,MAEF,KAAKzjB,GAAA6C,SAASmiB,QACZz4B,EAAOhR,KAAK0pC,yBAA4Cr1B,EAAY6zB,EACpE,MAEF,KAAKzjB,GAAA6C,SAASqiB,aACZ34B,EAAOhR,KAAK4pC,8BAAsDv1B,EAAY6zB,EAC9E,MAEF,KAAKzjB,GAAA6C,SAASuiB,YACZ74B,EAAOhR,KAAK8pC,6BAAoDz1B,EAAY6zB,EAAgBO,EAC5F,MAEF,SACE,KAAM,IAAI3sB,OAAM,uBASpB,MANkB,IAAd0sB,GAAyCxoC,KAAK4/B,aAAesI,IAC/Dl3B,EAAOhR,KAAK+pC,kBAAkB/4B,EAAMhR,KAAK4/B,YAAasI,EAAgBM,EAAgBn0B,GACtFrU,KAAK4/B,YAAcsI,GAGrBloC,KAAKwmC,iBAAiBx1B,EAAMqD,EAAWgN,OAChCrQ,GAGTyuB,EAAAj+B,UAAAwoC,qBAAA,SAAqB31B,EAAwB6zB,EAAsBM,GACjE,WADiE,KAAAA,MAAA,GAC1DxoC,KAAKoiC,wBAAwBpiC,KAAKgiC,kBAAkB3tB,EAAY6zB,EAAgBM,KAGzF/I,EAAAj+B,UAAA4gC,wBAAA,SAAwBpxB,GACtB,GAAIixB,GAAajiC,KAAK4/B,YAAYjG,eAC9B4G,EAAUvgC,KAAKL,OAAOsQ,2BAA2BgyB,KAEhD1B,KACHA,EAAUvgC,KAAKL,OAAOiQ,gBAAgB5P,KAAK4/B,YAAYoE,oBAAqB/B,MAG9E,IAAIgI,GAAUjqC,KAAKL,OAAO0W,YAAY,eAAgBkqB,KAAavvB,EACnEhR,MAAKL,OAAO6a,WAAY,cAAgByvB,EACxC,IAAIjnC,GAAMknC,yBAAyBD,EAMnC,OALAjqC,MAAKL,OAAO6W,eAAe,gBAKpBxT,GAGTy8B,EAAAj+B,UAAAuoC,kBAAA,SAAkB/4B,EAAqBm5B,EAAgBxW,EAAc6U,EAAgCxQ,GACnG,GAAkB,GAAdwQ,EAEF,MADAte,SAAO,EAAO,0BACPlZ,CAIT,IAAiB,IAAbm5B,EAAS9iB,KAEX,MADArnB,MAAKojB,MAAMmB,EAAAhC,eAAeuf,mCAAoC9J,EAAW3W,MAAO8oB,EAAS1oB,WAAYkS,EAAOlS,YACrGzhB,KAAKL,OAAOoW,mBAIrB,IAAe,IAAX4d,EAAOtM,KACT,MAAOrnB,MAAKL,OAAOyU,WAAWpD,EAEhC,IAAIo5B,GAAMpqC,KAAKL,OACX0qC,GAAmB,CA2HvB,OAzHIF,GAASjf,GAAE,GAGTyI,EAAOzI,GAAE,GACM,IAAbif,EAAS9iB,KAGI,IAAXsM,EAAOtM,OACTrW,EAAOo5B,EAAIt5B,YAAY4T,EAAAre,QAAQikC,WAAYt5B,IAKzB,IAAX2iB,EAAOtM,OAChBgjB,GAAmB,EACnBr5B,EAAOo5B,EAAIt5B,YAAY4T,EAAAre,QAAQkkC,UAAWv5B,IAMnC2iB,EAAOzI,GAAE,IAClBmf,GAAmB,EAGF,IAAbF,EAAS9iB,KACPsM,EAAOzI,GAAE,GACPyI,EAAOzI,GAAE,IACXla,EAAOo5B,EAAIt5B,YAAY4T,EAAAre,QAAQmkC,cAAex5B,IAE9CA,EAAOo5B,EAAIt5B,YAAY4T,EAAAre,QAAQokC,cAAez5B,GAC1C2iB,EAAOzI,GAAE,MACXla,EAAO2sB,EAAqB3sB,EAAM2iB,EAAQ3zB,KAAKL,UAG/Cg0B,EAAOzI,GAAE,IACXla,EAAOo5B,EAAIt5B,YAAY4T,EAAAre,QAAQqkC,cAAe15B,IAE9CA,EAAOo5B,EAAIt5B,YAAY4T,EAAAre,QAAQskC,cAAe35B,GAC1C2iB,EAAOzI,GAAE,MACXla,EAAO2sB,EAAqB3sB,EAAM2iB,EAAQ3zB,KAAKL,UAMjDg0B,EAAOzI,GAAE,GACPyI,EAAOzI,GAAE,IACXla,EAAOo5B,EAAIt5B,YAAY4T,EAAAre,QAAQukC,cAAe55B,IAE9CA,EAAOo5B,EAAIt5B,YAAY4T,EAAAre,QAAQwkC,cAAe75B,GAC1C2iB,EAAOzI,GAAE,MACXla,EAAO2sB,EAAqB3sB,EAAM2iB,EAAQ3zB,KAAKL,UAG/Cg0B,EAAOzI,GAAE,IACXla,EAAOo5B,EAAIt5B,YAAY4T,EAAAre,QAAQykC,cAAe95B,IAE9CA,EAAOo5B,EAAIt5B,YAAY4T,EAAAre,QAAQ0kC,cAAe/5B,GAC1C2iB,EAAOzI,GAAE,MACXla,EAAO2sB,EAAqB3sB,EAAM2iB,EAAQ3zB,KAAKL,YAOvDuqB,OAAmB,GAAZyJ,EAAOa,MAAyB,sBACvCxjB,EAAOhR,KAAKL,OAAOyU,WAAWpD,IAIvBm5B,EAASjf,GAAE,IAAuByI,EAAOzI,GAAE,GAGrC,IAAXyI,EAAOtM,KACL8iB,EAASjf,GAAE,KACbmf,GAAmB,EACnBr5B,EAAOo5B,EAAIt5B,YAAYq5B,EAASjf,GAAE,GAAqBxG,EAAAre,QAAQ2kC,gBAAkBtmB,EAAAre,QAAQ4kC,gBAAiBj6B,KAE1Gq5B,GAAoBF,EAASjf,GAAE,IAC/Bla,EAAOo5B,EAAIt5B,YAAYq5B,EAASjf,GAAE,GAAqBxG,EAAAre,QAAQ6kC,gBAAkBxmB,EAAAre,QAAQ8kC,gBAAiBn6B,IAKxGm5B,EAASjf,GAAE,KACbmf,GAAmB,EACnBr5B,EAAOo5B,EAAIt5B,YAAYq5B,EAASjf,GAAE,GAAqBxG,EAAAre,QAAQ+kC,gBAAkB1mB,EAAAre,QAAQglC,gBAAiBr6B,IAE1GA,EAAOo5B,EAAIt5B,YAAYq5B,EAASjf,GAAE,GAAqBxG,EAAAre,QAAQilC,gBAAkB5mB,EAAAre,QAAQklC,gBAAiBv6B,GAK1Gm5B,EAASjf,GAAE,IAGRyI,EAAOzI,GAAE,MACZmf,GAAmB,EACnBr5B,EAAOo5B,EAAIt5B,YAAY4T,EAAAre,QAAQmlC,QAASx6B,GACpC2iB,EAAOzI,GAAE,MACXla,EAAO2sB,EAAqB3sB,EAAM2iB,EAAQ3zB,KAAKL,UAI1Cg0B,EAAOzI,GAAE,IAClBla,EAAOo5B,EAAIt5B,YAAY6iB,EAAOzI,GAAE,GAAqBxG,EAAAre,QAAQolC,UAAY/mB,EAAAre,QAAQqlC,UAAW16B,GAGnF2iB,EAAOzI,GAAE,MAAsBif,EAASjM,KAAOvK,EAAOuK,MAASiM,EAASjM,MAAQvK,EAAOuK,MAAQiM,EAASjf,GAAE,IAAsByI,EAAOzI,GAAE,MAClJmf,GAAmB,EACnBr5B,EAAO2sB,EAAqB3sB,EAAM2iB,EAAQ3zB,KAAKL,SAM/C0qC,GAAkC,GAAd7B,GACtBxoC,KAAKojB,MAAMmB,EAAAhC,eAAeopB,0FAA2F3T,EAAW3W,MAAO8oB,EAAS1oB,WAAYkS,EAAOlS,YAE9JzQ,GAGTyuB,EAAAj+B,UAAAknC,2BAAA,SAA2Br0B,EAAiC6zB,GAC1D,GAAIvU,GAAS3zB,KAAKu0B,QAAQ1D,YAAYxc,EAAWsf,OAAQ3zB,KAAK+8B,gBAAgBhM,wBAC9E,OAAK4C,GAEE3zB,KAAKgiC,kBAAkB3tB,EAAWA,WAAYsf,EAAM,GADlD3zB,KAAKL,OAAOoW,qBAIvB0pB,EAAAj+B,UAAAmnC,wBAAA,SAAwBt0B,EAA8B6zB,EAAsBO,OAAA,KAAAA,OAAA,EAC1E,IAAIt3B,GACAC,EACA8C,EACAlD,EAEA46B,GAAW,EACXC,GAAoB,EACpB1E,EAA0B,IAE9B,QAAQ9yB,EAAWy3B,UAEjB,IAAKlN,GAAAmN,MAAMC,SAIT,OAHA76B,EAAOnR,KAAKgiC,kBAAkB3tB,EAAWlD,KAAM+2B,GAAkB1jB,EAAAyB,KAAKa,KAAOtC,EAAAyB,KAAK1J,IAAM2rB,EAAc,GACtG92B,EAAQpR,KAAKgiC,kBAAkB3tB,EAAWjD,MAAOpR,KAAK4/B,aAE9C5/B,KAAK4/B,YAAYvY,MAEvB,OACA,OACA,OACErW,EAAOhR,KAAKL,OAAOuR,aAAawT,EAAArb,SAAS4iC,MAAO96B,EAAMC,EACtD,MAEF,QACEJ,EAAOhR,KAAKL,OAAOuR,aAAawT,EAAArb,SAAS6iC,MAAO/6B,EAAMC,EACtD,MAEF,QACEJ,EAAOhR,KAAKL,OAAOuR,aAAalR,KAAKgmB,QAAQtQ,QAAUqD,EAAOC,OAAS0L,EAAArb,SAAS6iC,MAAQxnB,EAAArb,SAAS4iC,MAAO96B,EAAMC,EAC9G,MAEF,QACA,OACA,OACA,QACEJ,EAAOhR,KAAKL,OAAOuR,aAAawT,EAAArb,SAAS8iC,MAAOh7B,EAAMC,EACtD,MAEF,QAEEJ,EAAOhR,KAAKL,OAAOuR,aAAalR,KAAKgmB,QAAQtQ,QAAUqD,EAAOC,OAAS0L,EAAArb,SAAS+iC,MAAQ1nB,EAAArb,SAAS8iC,MAAOh7B,EAAMC,EAC9G,MAEF,QACEJ,EAAOhR,KAAKL,OAAOuR,aAAawT,EAAArb,SAAS+iC,MAAOj7B,EAAMC,EACtD,MAEF,SACEJ,EAAOhR,KAAKL,OAAOuR,aAAawT,EAAArb,SAASgjC,MAAOl7B,EAAMC,EACtD,MAEF,SACEJ,EAAOhR,KAAKL,OAAOuR,aAAawT,EAAArb,SAASijC,MAAOn7B,EAAMC,EACtD,MAEF,SAEE,KADApR,MAAKojB,MAAMmB,EAAAhC,eAAeuL,wBAAyBzZ,EAAWgN,OACxD,GAAIvF,OAAM,0BAEpB9b,KAAK4/B,YAAcpb,EAAAyB,KAAKU,IACxB,MAEF,KAAKiY,GAAAmN,MAAMQ,YAIT,OAHAp7B,EAAOnR,KAAKgiC,kBAAkB3tB,EAAWlD,KAAM+2B,GAAkB1jB,EAAAyB,KAAKa,KAAOtC,EAAAyB,KAAK1J,IAAM2rB,EAAc,GACtG92B,EAAQpR,KAAKgiC,kBAAkB3tB,EAAWjD,MAAOpR,KAAK4/B,aAE9C5/B,KAAK4/B,YAAYvY,MAEvB,OACA,OACA,OACErW,EAAOhR,KAAKL,OAAOuR,aAAawT,EAAArb,SAASmjC,MAAOr7B,EAAMC,EACtD,MAEF,QACEJ,EAAOhR,KAAKL,OAAOuR,aAAalR,KAAKgmB,QAAQtQ,QAAUqD,EAAOC,OAAS0L,EAAArb,SAASojC,MAAQ/nB,EAAArb,SAASmjC,MAAOr7B,EAAMC,EAC9G,MAEF,QACEJ,EAAOhR,KAAKL,OAAOuR,aAAawT,EAAArb,SAASojC,MAAOt7B,EAAMC,EACtD,MAEF,QACA,OACA,OACA,QACEJ,EAAOhR,KAAKL,OAAOuR,aAAawT,EAAArb,SAASqjC,MAAOv7B,EAAMC,EACtD,MAEF,QAEEJ,EAAOhR,KAAKL,OAAOuR,aAAalR,KAAKgmB,QAAQtQ,QAAUqD,EAAOC,OAAS0L,EAAArb,SAASsjC,MAAQjoB,EAAArb,SAASqjC,MAAOv7B,EAAMC,EAC9G,MAEF,QACEJ,EAAOhR,KAAKL,OAAOuR,aAAawT,EAAArb,SAASsjC,MAAOx7B,EAAMC,EACtD,MAEF,SACEJ,EAAOhR,KAAKL,OAAOuR,aAAawT,EAAArb,SAASujC,MAAOz7B,EAAMC,EACtD,MAEF,SACEJ,EAAOhR,KAAKL,OAAOuR,aAAawT,EAAArb,SAASwjC,MAAO17B,EAAMC,EACtD,MAEF,SAEE,KADApR,MAAKojB,MAAMmB,EAAAhC,eAAeuL,wBAAyBzZ,EAAWgN,OACxD,GAAIvF,OAAM,0BAEpB9b,KAAK4/B,YAAcpb,EAAAyB,KAAKU,IACxB,MAEF,KAAKiY,GAAAmN,MAAMe,gBAIT,OAHA37B,EAAOnR,KAAKgiC,kBAAkB3tB,EAAWlD,KAAM+2B,GAAkB1jB,EAAAyB,KAAKa,KAAOtC,EAAAyB,KAAK1J,IAAM2rB,EAAc,GACtG92B,EAAQpR,KAAKgiC,kBAAkB3tB,EAAWjD,MAAOpR,KAAK4/B,aAE9C5/B,KAAK4/B,YAAYvY,MAEvB,OACA,OACA,OACErW,EAAOhR,KAAKL,OAAOuR,aAAawT,EAAArb,SAAS0jC,MAAO57B,EAAMC,EACtD,MAEF,QACEJ,EAAOhR,KAAKL,OAAOuR,aAAalR,KAAKgmB,QAAQtQ,QAAUqD,EAAOC,OAAS0L,EAAArb,SAAS2jC,MAAQtoB,EAAArb,SAAS0jC,MAAO57B,EAAMC,EAC9G,MAEF,QACEJ,EAAOhR,KAAKL,OAAOuR,aAAawT,EAAArb,SAAS2jC,MAAO77B,EAAMC,EACtD,MAEF,QACA,OACA,OACA,QACEJ,EAAOhR,KAAKL,OAAOuR,aAAawT,EAAArb,SAAS4jC,MAAO97B,EAAMC,EACtD,MAEF,QAEEJ,EAAOhR,KAAKL,OAAOuR,aAAalR,KAAKgmB,QAAQtQ,QAAUqD,EAAOC,OAAS0L,EAAArb,SAAS6jC,MAAQxoB,EAAArb,SAAS4jC,MAAO97B,EAAMC,EAC9G,MAEF,QACEJ,EAAOhR,KAAKL,OAAOuR,aAAawT,EAAArb,SAAS6jC,MAAO/7B,EAAMC,EACtD,MAEF,SACEJ,EAAOhR,KAAKL,OAAOuR,aAAawT,EAAArb,SAAS8jC,MAAOh8B,EAAMC,EACtD,MAEF,SACEJ,EAAOhR,KAAKL,OAAOuR,aAAawT,EAAArb,SAAS+jC,MAAOj8B,EAAMC,EACtD,MAEF,SAEE,KADApR,MAAKojB,MAAMmB,EAAAhC,eAAeuL,wBAAyBzZ,EAAWgN,OACxD,GAAIvF,OAAM,0BAEpB9b,KAAK4/B,YAAcpb,EAAAyB,KAAKU,IACxB,MAEF,KAAKiY,GAAAmN,MAAMsB,mBAIT,OAHAl8B,EAAOnR,KAAKgiC,kBAAkB3tB,EAAWlD,KAAM+2B,GAAkB1jB,EAAAyB,KAAKa,KAAOtC,EAAAyB,KAAK1J,IAAM2rB,EAAc,GACtG92B,EAAQpR,KAAKgiC,kBAAkB3tB,EAAWjD,MAAOpR,KAAK4/B,aAE9C5/B,KAAK4/B,YAAYvY,MAEvB,OACA,OACA,OACErW,EAAOhR,KAAKL,OAAOuR,aAAawT,EAAArb,SAASikC,MAAOn8B,EAAMC,EACtD,MAEF,QACEJ,EAAOhR,KAAKL,OAAOuR,aAAalR,KAAKgmB,QAAQtQ,QAAUqD,EAAOC,OAAS0L,EAAArb,SAASkkC,MAAQ7oB,EAAArb,SAASikC,MAAOn8B,EAAMC,EAC9G,MAEF,QACEJ,EAAOhR,KAAKL,OAAOuR,aAAawT,EAAArb,SAASkkC,MAAOp8B,EAAMC,EACtD,MAEF,QACA,OACA,OACA,QACEJ,EAAOhR,KAAKL,OAAOuR,aAAawT,EAAArb,SAASmkC,MAAOr8B,EAAMC,EACtD,MAEF,QAEEJ,EAAOhR,KAAKL,OAAOuR,aAAalR,KAAKgmB,QAAQtQ,QAAUqD,EAAOC,OAAS0L,EAAArb,SAASokC,MAAQ/oB,EAAArb,SAASmkC,MAAOr8B,EAAMC,EAC9G,MAEF,QACEJ,EAAOhR,KAAKL,OAAOuR,aAAawT,EAAArb,SAASokC,MAAOt8B,EAAMC,EACtD,MAEF,SACEJ,EAAOhR,KAAKL,OAAOuR,aAAawT,EAAArb,SAASqkC,MAAOv8B,EAAMC,EACtD,MAEF,SACEJ,EAAOhR,KAAKL,OAAOuR,aAAawT,EAAArb,SAASskC,MAAOx8B,EAAMC,EACtD,MAEF,SAEE,KADApR,MAAKojB,MAAMmB,EAAAhC,eAAeuL,wBAAyBzZ,EAAWgN,OACxD,GAAIvF,OAAM,0BAEpB9b,KAAK4/B,YAAcpb,EAAAyB,KAAKU,IACxB,MAEF,KAAKiY,GAAAmN,MAAM6B,qBAEX,IAAKhP,GAAAmN,MAAM8B,cAST,OAHA18B,EAAOnR,KAAKgiC,kBAAkB3tB,EAAWlD,KAAM+2B,GAAkB1jB,EAAAyB,KAAKa,KAAOtC,EAAAyB,KAAK1J,IAAM2rB,EAAc,GACtG92B,EAAQpR,KAAKgiC,kBAAkB3tB,EAAWjD,MAAOpR,KAAK4/B,aAE9C5/B,KAAK4/B,YAAYvY,MAEvB,OACA,OACA,OACA,OACA,OACA,OACA,QACErW,EAAOhR,KAAKL,OAAOuR,aAAawT,EAAArb,SAASo+B,MAAOt2B,EAAMC,EACtD,MAEF,QAEA,OACEJ,EAAOhR,KAAKL,OAAOuR,aAAalR,KAAKgmB,QAAQtQ,QAAUqD,EAAOC,OAAS0L,EAAArb,SAASykC,MAAQppB,EAAArb,SAASo+B,MAAOt2B,EAAMC,EAC9G,MAEF,QACA,OACEJ,EAAOhR,KAAKL,OAAOuR,aAAawT,EAAArb,SAASykC,MAAO38B,EAAMC,EACtD,MAEF,SACEJ,EAAOhR,KAAKL,OAAOuR,aAAawT,EAAArb,SAAS80B,MAAOhtB,EAAMC,EACtD,MAEF,SACEJ,EAAOhR,KAAKL,OAAOuR,aAAawT,EAAArb,SAAS+0B,MAAOjtB,EAAMC,EACtD,MAEF,SAEE,KADApR,MAAKojB,MAAMmB,EAAAhC,eAAeuL,wBAAyBzZ,EAAWgN,OACxD,GAAIvF,OAAM,0BAEpB9b,KAAK4/B,YAAcpb,EAAAyB,KAAKU,IACxB,MAEF,KAAKiY,GAAAmN,MAAMgC,0BAEX,IAAKnP,GAAAmN,MAAMiC,mBAIT,OAHA78B,EAAOnR,KAAKgiC,kBAAkB3tB,EAAWlD,KAAM+2B,GAAkB1jB,EAAAyB,KAAKa,KAAOtC,EAAAyB,KAAK1J,IAAM2rB,EAAc,GACtG92B,EAAQpR,KAAKgiC,kBAAkB3tB,EAAWjD,MAAOpR,KAAK4/B,aAE9C5/B,KAAK4/B,YAAYvY,MAEvB,OACA,OACA,OACA,OACA,OACA,OACA,QACErW,EAAOhR,KAAKL,OAAOuR,aAAawT,EAAArb,SAASi1B,MAAOntB,EAAMC,EACtD,MAEF,QAEA,OACEJ,EAAOhR,KAAKL,OAAOuR,aAAalR,KAAKgmB,QAAQtQ,QAAUqD,EAAOC,OAAS0L,EAAArb,SAASk1B,MAAQ7Z,EAAArb,SAASi1B,MAAOntB,EAAMC,EAC9G,MAEF,QACA,OACEJ,EAAOhR,KAAKL,OAAOuR,aAAawT,EAAArb,SAASk1B,MAAOptB,EAAMC,EACtD,MAEF,SACEJ,EAAOhR,KAAKL,OAAOuR,aAAawT,EAAArb,SAASm1B,MAAOrtB,EAAMC,EACtD,MAEF,SACEJ,EAAOhR,KAAKL,OAAOuR,aAAawT,EAAArb,SAASo1B,MAAOttB,EAAMC,EACtD,MAEF,SAEE,KADApR,MAAKojB,MAAMmB,EAAAhC,eAAeuL,wBAAyBzZ,EAAWgN,OACxD,GAAIvF,OAAM,0BAEpB9b,KAAK4/B,YAAcpb,EAAAyB,KAAKU,IACxB,MAEF,KAAKiY,GAAAmN,MAAMkC,OACT,MAAOjuC,MAAKkuC,kBAAkB75B,EAAWlD,KAAMkD,EAAWjD,MAAO82B,EAEnE,KAAKtJ,GAAAmN,MAAMoC,YACTvC,GAAW,CACb,KAAKhN,GAAAmN,MAAMqC,KAIT,OAHAj9B,EAAOnR,KAAKgiC,kBAAkB3tB,EAAWlD,KAAM+2B,GAAkB1jB,EAAAyB,KAAKa,KAAOtC,EAAAyB,KAAK1J,IAAM2rB,EAAc,GAAuB,GAC7H92B,EAAQpR,KAAKgiC,kBAAkB3tB,EAAWjD,MAAOpR,KAAK4/B,YAAW,GAA2B,GAEpF5/B,KAAK4/B,YAAYvY,MAEvB,OACA,OACA,OACA,OACA,QACEwkB,GAAoB,CACtB,QACA,OACE76B,EAAOhR,KAAKL,OAAOuR,aAAawT,EAAArb,SAAS25B,OAAQ7xB,EAAMC,EACvD,MAEF,QAEA,OACEJ,EAAOhR,KAAKL,OAAOuR,aAAalR,KAAKgmB,QAAQtQ,QAAUqD,EAAOC,OAAS0L,EAAArb,SAASglC,OAAS3pB,EAAArb,SAAS25B,OAAQ7xB,EAAMC,EAChH,MAEF,QACA,OACEJ,EAAOhR,KAAKL,OAAOuR,aAAawT,EAAArb,SAASglC,OAAQl9B,EAAMC,EACvD,MAEF,SACEJ,EAAOhR,KAAKL,OAAOuR,aAAawT,EAAArb,SAASilC,OAAQn9B,EAAMC,EACvD,MAEF,SACEJ,EAAOhR,KAAKL,OAAOuR,aAAawT,EAAArb,SAASklC,OAAQp9B,EAAMC,EACvD,MAEF,SACE,KAAM,IAAI0K,OAAM,0BAEpB,KAEF,KAAK8iB,GAAAmN,MAAMyC,aACT5C,GAAW,CACb,KAAKhN,GAAAmN,MAAM0C,MAIT,OAHAt9B,EAAOnR,KAAKgiC,kBAAkB3tB,EAAWlD,KAAM+2B,GAAkB1jB,EAAAyB,KAAKa,KAAOtC,EAAAyB,KAAK1J,IAAM2rB,EAAc,GAAuB,GAC7H92B,EAAQpR,KAAKgiC,kBAAkB3tB,EAAWjD,MAAOpR,KAAK4/B,YAAW,GAA2B,GAEpF5/B,KAAK4/B,YAAYvY,MAEvB,OACA,OACA,OACA,OACA,QACEwkB,GAAoB,CACtB,QACA,OACE76B,EAAOhR,KAAKL,OAAOuR,aAAawT,EAAArb,SAASqlC,OAAQv9B,EAAMC,EACvD,MAEF,QAEA,OACEJ,EAAOhR,KAAKL,OAAOuR,aAAalR,KAAKgmB,QAAQtQ,QAAUqD,EAAOC,OAAS0L,EAAArb,SAASslC,OAASjqB,EAAArb,SAASqlC,OAAQv9B,EAAMC,EAChH,MAEF,QACA,OACEJ,EAAOhR,KAAKL,OAAOuR,aAAawT,EAAArb,SAASslC,OAAQx9B,EAAMC,EACvD,MAEF,SACEJ,EAAOhR,KAAKL,OAAOuR,aAAawT,EAAArb,SAASulC,OAAQz9B,EAAMC,EACvD,MAEF,SACEJ,EAAOhR,KAAKL,OAAOuR,aAAawT,EAAArb,SAASwlC,OAAQ19B,EAAMC,EACvD,MAEF,SAEE,KADApR,MAAKojB,MAAMmB,EAAAhC,eAAeuL,wBAAyBzZ,EAAWgN,OACxD,GAAIvF,OAAM,0BAEpB,KAEF,KAAK8iB,GAAAmN,MAAM+C,gBACTlD,GAAW,CACb,KAAKhN,GAAAmN,MAAMgD,SAIT,OAHA59B,EAAOnR,KAAKgiC,kBAAkB3tB,EAAWlD,KAAM+2B,GAAkB1jB,EAAAyB,KAAKa,KAAOtC,EAAAyB,KAAK1J,IAAM2rB,EAAc,GAAuB,GAC7H92B,EAAQpR,KAAKgiC,kBAAkB3tB,EAAWjD,MAAOpR,KAAK4/B,YAAW,GAA2B,GAEpF5/B,KAAK4/B,YAAYvY,MAEvB,OACA,OACA,OACA,OACA,QACEwkB,GAAoB,CAEtB,QACA,OACE76B,EAAOhR,KAAKL,OAAOuR,aAAawT,EAAArb,SAAS2lC,OAAQ79B,EAAMC,EACvD,MAEF,QAEA,OACEJ,EAAOhR,KAAKL,OAAOuR,aAAalR,KAAKgmB,QAAQtQ,QAAUqD,EAAOC,OAAS0L,EAAArb,SAAS4lC,OAASvqB,EAAArb,SAAS2lC,OAAQ79B,EAAMC,EAChH,MAEF,QACA,OACEJ,EAAOhR,KAAKL,OAAOuR,aAAawT,EAAArb,SAAS4lC,OAAQ99B,EAAMC,EACvD,MAEF,SACEJ,EAAOhR,KAAKL,OAAOuR,aAAawT,EAAArb,SAAS6lC,OAAQ/9B,EAAMC,EACvD,MAEF,SACEJ,EAAOhR,KAAKL,OAAOuR,aAAawT,EAAArb,SAAS8lC,OAAQh+B,EAAMC,EACvD,MAEF,SAEE,KADApR,MAAKojB,MAAMmB,EAAAhC,eAAeuL,wBAAyBzZ,EAAWgN,OACxD,GAAIvF,OAAM,0BAEpB,KAEF,KAAK8iB,GAAAmN,MAAMqD,aACTxD,GAAW,CACb,KAAKhN,GAAAmN,MAAMsD,MAIT,OAHAl+B,EAAOnR,KAAKgiC,kBAAkB3tB,EAAWlD,KAAM+2B,GAAkB1jB,EAAAyB,KAAKa,KAAOtC,EAAAyB,KAAK1J,IAAM2rB,EAAc,GACtG92B,EAAQpR,KAAKgiC,kBAAkB3tB,EAAWjD,MAAOpR,KAAK4/B,YAAW,GAEzD5/B,KAAK4/B,YAAYvY,MAEvB,OACA,OACEwkB,GAAoB,CACtB,QACE76B,EAAOhR,KAAKL,OAAOuR,aAAawT,EAAArb,SAASimC,OAAQn+B,EAAMC,EACvD,MAEF,QACEJ,EAAOhR,KAAKL,OAAOuR,aAAalR,KAAKgmB,QAAQtQ,QAAUqD,EAAOC,OAAS0L,EAAArb,SAASkmC,OAAS7qB,EAAArb,SAASimC,OAAQn+B,EAAMC,EAChH,MAEF,QACEJ,EAAOhR,KAAKL,OAAOuR,aAAawT,EAAArb,SAASkmC,OAAQp+B,EAAMC,EACvD,MAEF,QACA,OACA,QACEy6B,GAAoB,CACtB,QACE76B,EAAOhR,KAAKL,OAAOuR,aAAawT,EAAArb,SAASmmC,OAAQr+B,EAAMC,EACvD,MAEF,QAEEJ,EAAOhR,KAAKL,OAAOuR,aAAalR,KAAKgmB,QAAQtQ,QAAUqD,EAAOC,OAAS0L,EAAArb,SAASomC,OAAS/qB,EAAArb,SAASmmC,OAAQr+B,EAAMC,EAChH,MAEF,QACEJ,EAAOhR,KAAKL,OAAOuR,aAAawT,EAAArb,SAASomC,OAAQt+B,EAAMC,EACvD,MAEF,SACEJ,EAAOhR,KAAKL,OAAOuR,aAAawT,EAAArb,SAASqmC,OAAQv+B,EAAMC,EACvD,MAEF,SACEJ,EAAOhR,KAAKL,OAAOuR,aAAawT,EAAArb,SAASsmC,OAAQx+B,EAAMC,EACvD,MAEF,SAEE,KADApR,MAAKojB,MAAMmB,EAAAhC,eAAeuL,wBAAyBzZ,EAAWgN,OACxD,GAAIvF,OAAM,0BAEpB,KAEF,KAAK8iB,GAAAmN,MAAM6D,eACThE,GAAW,CACb,KAAKhN,GAAAmN,MAAM8D,QAIT,OAHA1+B,EAAOnR,KAAKgiC,kBAAkB3tB,EAAWlD,KAAM+2B,GAAkB1jB,EAAAyB,KAAKa,KAAOtC,EAAAyB,KAAK1J,IAAM2rB,EAAc,GACtG92B,EAAQpR,KAAKgiC,kBAAkB3tB,EAAWjD,MAAOpR,KAAK4/B,YAAW,GAEzD5/B,KAAK4/B,YAAYvY,MAEvB,OACA,OACA,OACErW,EAAOhR,KAAKL,OAAOuR,aAAawT,EAAArb,SAASymC,OAAQ3+B,EAAMC,EACvD,MAEF,QACEJ,EAAOhR,KAAKL,OAAOuR,aAAalR,KAAKgmB,QAAQtQ,QAAUqD,EAAOC,OAAS0L,EAAArb,SAAS0mC,OAASrrB,EAAArb,SAASymC,OAAQ3+B,EAAMC,EAChH,MAEF,QACEJ,EAAOhR,KAAKL,OAAOuR,aAAawT,EAAArb,SAAS0mC,OAAQ5+B,EAAMC,EACvD,MAEF,QACA,OACA,OACA,QACEJ,EAAOhR,KAAKL,OAAOuR,aAAawT,EAAArb,SAAS2mC,OAAQ7+B,EAAMC,EACvD,MAEF,QAEEJ,EAAOhR,KAAKL,OAAOuR,aAAalR,KAAKgmB,QAAQtQ,QAAUqD,EAAOC,OAAS0L,EAAArb,SAAS4mC,OAASvrB,EAAArb,SAAS2mC,OAAQ7+B,EAAMC,EAChH,MAEF,QACEJ,EAAOhR,KAAKL,OAAOuR,aAAawT,EAAArb,SAAS4mC,OAAQ9+B,EAAMC,EACvD,MAEF,SACA,QAEEpR,KAAKojB,MAAMmB,EAAAhC,eAAeuL,wBAAyBzZ,EAAWgN,OAC9DrQ,EAAOhR,KAAKL,OAAOoW,mBACnB,MAEF,SAEE,KADA/V,MAAKojB,MAAMmB,EAAAhC,eAAeuL,wBAAyBzZ,EAAWgN,OACxD,GAAIvF,OAAM,0BAEpB,KAEF,KAAK8iB,GAAAmN,MAAMmE,yBACTtE,GAAW,CACb,KAAKhN,GAAAmN,MAAMoE,kBAIT,OAHAh/B,EAAOnR,KAAKgiC,kBAAkB3tB,EAAWlD,KAAM+2B,GAAkB1jB,EAAAyB,KAAKa,KAAOtC,EAAAyB,KAAK1J,IAAM2rB,EAAehd,GAAE,GAAoB1G,EAAAyB,KAAKG,IAAM8hB,EAAc,GAAuB,GAC7K92B,EAAQpR,KAAKgiC,kBAAkB3tB,EAAWjD,MAAOpR,KAAK4/B,YAAW,GAA2B,GAEpF5/B,KAAK4/B,YAAYvY,MAEvB,OACA,OACA,OACA,OACA,QACEwkB,GAAoB,CACtB,SACE76B,EAAOhR,KAAKL,OAAOuR,aAAawT,EAAArb,SAASw0B,OAAQ1sB,EAAMC,EACvD,MAEF,QACA,OACEJ,EAAOhR,KAAKL,OAAOuR,aAAawT,EAAArb,SAAS+mC,OAAQj/B,EAAMC,EACvD,MAEF,QAEA,OACEJ,EAAOhR,KAAKL,OAAOuR,aAAalR,KAAKgmB,QAAQtQ,QAAUqD,EAAOC,OAAS0L,EAAArb,SAAS+mC,OAAS1rB,EAAArb,SAASw0B,OAAQ1sB,EAAMC,EAChH,MAEF,SAEE,KADApR,MAAKojB,MAAMmB,EAAAhC,eAAeuL,wBAAyBzZ,EAAWgN,OACxD,GAAIvF,OAAM,0BAEpB,KAEF,KAAK8iB,GAAAmN,MAAMsE,+BACTzE,GAAW,CACb,KAAKhN,GAAAmN,MAAMuE,wBAIT,OAHAn/B,EAAOnR,KAAKgiC,kBAAkB3tB,EAAWlD,KAAM+2B,GAAkB1jB,EAAAyB,KAAKa,KAAOtC,EAAAyB,KAAK1J,IAAM2rB,EAAehd,GAAE,GAAoB1G,EAAAyB,KAAKG,IAAM8hB,EAAc,GACtJ92B,EAAQpR,KAAKgiC,kBAAkB3tB,EAAWjD,MAAOpR,KAAK4/B,YAAW,GAEzD5/B,KAAK4/B,YAAYvY,MAEvB,QAEErW,EAAOhR,KAAKL,OAAOuR,aAAawT,EAAArb,SAASu0B,OAAQzsB,EAAMC,EACvD,MAEF,QACEJ,EAAOhR,KAAKL,OAAOuR,aAAawT,EAAArb,SAASknC,OAAQp/B,EAAMC,EACvD,MAEF,QACEJ,EAAOhR,KAAKL,OAAOuR,aAAalR,KAAKgmB,QAAQtQ,QAAUqD,EAAOC,OAAS0L,EAAArb,SAASknC,OAAS7rB,EAAArb,SAASu0B,OAAQzsB,EAAMC,EAChH,MAEF,QACA,OACA,QAEA,OACEJ,EAAOhR,KAAKL,OAAOuR,aAAawT,EAAArb,SAASmnC,OAAQr/B,EAAMC,EACvD,MAEF,QACEJ,EAAOhR,KAAKL,OAAOuR,aAAawT,EAAArb,SAASonC,OAAQt/B,EAAMC,EACvD,MAEF,QAEEJ,EAAOhR,KAAKL,OAAOuR,aAAalR,KAAKgmB,QAAQtQ,QAAUqD,EAAOC,OAAS0L,EAAArb,SAASonC,OAAS/rB,EAAArb,SAASmnC,OAAQr/B,EAAMC,EAChH,MAEF,SAEE,KADApR,MAAKojB,MAAMmB,EAAAhC,eAAeuL,wBAAyBzZ,EAAWgN,OACxD,GAAIvF,OAAM,0BAEpB,KAEF,KAAK8iB,GAAAmN,MAAM2E,2CACT9E,GAAW,CACb,KAAKhN,GAAAmN,MAAM4E,oCAIT,OAHAx/B,EAAOnR,KAAKgiC,kBAAkB3tB,EAAWlD,KAAM+2B,GAAkB1jB,EAAAyB,KAAKa,KAAOtC,EAAAyB,KAAK1J,IAAM2rB,GAAkB1jB,EAAAyB,KAAKa,KAAOtC,EAAAyB,KAAKQ,IAAMyhB,EAAc,GAC/I92B,EAAQpR,KAAKgiC,kBAAkB3tB,EAAWjD,MAAOpR,KAAK4/B,YAAW,GAEzD5/B,KAAK4/B,YAAYvY,MAEvB,OACA,OACEwkB,GAAoB,CAEtB,SAEE76B,EAAOhR,KAAKL,OAAOuR,aAAawT,EAAArb,SAASmnC,OAAQr/B,EAAMC,EACvD,MAEF,QACA,OACEJ,EAAOhR,KAAKL,OAAOuR,aAAawT,EAAArb,SAASonC,OAAQt/B,EAAMC,EACvD,MAEF,QAEA,OACEJ,EAAOhR,KAAKL,OAAOuR,aAAalR,KAAKgmB,QAAQtQ,QAAUqD,EAAOC,OAAS0L,EAAArb,SAASonC,OAAS/rB,EAAArb,SAASmnC,OAAQr/B,EAAMC,EAChH,MAEF,SAEE,KADApR,MAAKojB,MAAMmB,EAAAhC,eAAeuL,wBAAyBzZ,EAAWgN,OACxD,GAAIvF,OAAM,0BAEpB,KAEF,KAAK8iB,GAAAmN,MAAM6E,iBACThF,GAAW,CACb,KAAKhN,GAAAmN,MAAM8E,UAIT,OAHA1/B,EAAOnR,KAAKgiC,kBAAkB3tB,EAAWlD,KAAM+2B,GAAkB1jB,EAAAyB,KAAKa,KAAOtC,EAAAyB,KAAK1J,IAAM2rB,EAAehd,GAAE,GAAoB1G,EAAAyB,KAAKG,IAAM8hB,EAAc,GAAuB,GAC7K92B,EAAQpR,KAAKgiC,kBAAkB3tB,EAAWjD,MAAOpR,KAAK4/B,YAAW,GAA2B,GAEpF5/B,KAAK4/B,YAAYvY,MAEvB,OACA,OACA,OACA,OACA,QACEwkB,GAAoB,CACtB,SACE76B,EAAOhR,KAAKL,OAAOuR,aAAawT,EAAArb,SAASy0B,OAAQ3sB,EAAMC,EACvD,MAEF,QACA,OACEJ,EAAOhR,KAAKL,OAAOuR,aAAawT,EAAArb,SAASynC,OAAQ3/B,EAAMC,EACvD,MAEF,QAEA,OACEJ,EAAOhR,KAAKL,OAAOuR,aAAalR,KAAKgmB,QAAQtQ,QAAUqD,EAAOC,OAAS0L,EAAArb,SAASynC,OAASpsB,EAAArb,SAASy0B,OAAQ3sB,EAAMC,EAChH,MAEF,SAEE,KADApR,MAAKojB,MAAMmB,EAAAhC,eAAeuL,wBAAyBzZ,EAAWgN,OACxD,GAAIvF,OAAM,0BAEpB,KAEF,KAAK8iB,GAAAmN,MAAMgF,WACTnF,GAAW,CACb,KAAKhN,GAAAmN,MAAMiF,IAIT,OAHA7/B,EAAOnR,KAAKgiC,kBAAkB3tB,EAAWlD,KAAM+2B,GAAkB1jB,EAAAyB,KAAKa,KAAOtC,EAAAyB,KAAK1J,IAAM2rB,EAAehd,GAAE,GAAoB1G,EAAAyB,KAAKG,IAAM8hB,EAAc,GAAuB,GAC7K92B,EAAQpR,KAAKgiC,kBAAkB3tB,EAAWjD,MAAOpR,KAAK4/B,YAAW,GAA2B,GAEpF5/B,KAAK4/B,YAAYvY,MAEvB,OACA,OACA,OACA,OACA,QACEwkB,GAAoB,CACtB,SACE76B,EAAOhR,KAAKL,OAAOuR,aAAawT,EAAArb,SAAS4nC,MAAO9/B,EAAMC,EACtD,MAEF,QACA,OACEJ,EAAOhR,KAAKL,OAAOuR,aAAawT,EAAArb,SAAS6nC,MAAO//B,EAAMC,EACtD,MAEF,QAEA,OACEJ,EAAOhR,KAAKL,OAAOuR,aAAalR,KAAKgmB,QAAQtQ,QAAUqD,EAAOC,OAAS0L,EAAArb,SAAS6nC,MAAQxsB,EAAArb,SAAS4nC,MAAO9/B,EAAMC,EAC9G,MAEF,SAEE,KADApR,MAAKojB,MAAMmB,EAAAhC,eAAeuL,wBAAyBzZ,EAAWgN,OACxD,GAAIvF,OAAM,0BAEpB,KAEF,KAAK8iB,GAAAmN,MAAMoF,aACTvF,GAAW,CACb,KAAKhN,GAAAmN,MAAMqF,MAIT,OAHAjgC,EAAOnR,KAAKgiC,kBAAkB3tB,EAAWlD,KAAM+2B,GAAkB1jB,EAAAyB,KAAKa,KAAOtC,EAAAyB,KAAK1J,IAAM2rB,EAAehd,GAAE,GAAoB1G,EAAAyB,KAAKG,IAAM8hB,EAAc,GAAuB,GAC7K92B,EAAQpR,KAAKgiC,kBAAkB3tB,EAAWjD,MAAOpR,KAAK4/B,YAAW,GAA2B,GAEpF5/B,KAAK4/B,YAAYvY,MAEvB,OACA,OACA,OACA,OACA,QACEwkB,GAAoB,CACtB,SACE76B,EAAOhR,KAAKL,OAAOuR,aAAawT,EAAArb,SAASgoC,OAAQlgC,EAAMC,EACvD,MAEF,QACA,OACEJ,EAAOhR,KAAKL,OAAOuR,aAAawT,EAAArb,SAASioC,OAAQngC,EAAMC,EACvD,MAEF,QAEA,OACEJ,EAAOhR,KAAKL,OAAOuR,aAAalR,KAAKgmB,QAAQtQ,QAAUqD,EAAOC,OAAS0L,EAAArb,SAASioC,OAAS5sB,EAAArb,SAASgoC,OAAQlgC,EAAMC,EAChH,MAEF,SAEE,KADApR,MAAKojB,MAAMmB,EAAAhC,eAAeuL,wBAAyBzZ,EAAWgN,OACxD,GAAIvF,OAAM,0BAEpB,KAIF,KAAK8iB,GAAAmN,MAAMwF,oBACTpgC,EAAOnR,KAAKgiC,kBAAkB3tB,EAAWlD,KAAM+2B,GAAkB1jB,EAAAyB,KAAKa,KAAOtC,EAAAyB,KAAK1J,IAAM2rB,EAAc,GACtG92B,EAAQpR,KAAKgiC,kBAAkB3tB,EAAWjD,MAAOpR,KAAK4/B,YAAW,GAA2B,GAG5F5uB,EAAOhR,KAAKL,OAAOyc,gBAAgBjL,GAAM,EAAM,GAG1CH,IACHm2B,EAAYnnC,KAAK+8B,gBAAgBjD,oBAAoB95B,KAAK4/B,aAC1DzuB,EAAOnR,KAAKL,OAAOkS,eAAes1B,EAAUz1B,MAAOP,IAGrD06B,EAAoB7rC,KAAK4/B,YAAY1U,GAAG,IACxChX,EAAYmqB,EAAcltB,EAAMnR,KAAK4/B,YAAa5/B,KAAKL,QAIrDqR,EADEA,EACKhR,KAAKL,OAAO+U,SACjBR,EACA9C,EACAJ,GAKKhR,KAAKL,OAAO+U,SACjBR,EACA9C,EACApR,KAAKL,OAAO8R,eAAeyY,OAAOid,EAAW,yBAAyBz1B,MAAO1R,KAAK4/B,YAAYjG,gBAGlG,MAEF,KAAKiF,GAAAmN,MAAMyF,QACTrgC,EAAOnR,KAAKgiC,kBAAkB3tB,EAAWlD,KAAM+2B,GAAkB1jB,EAAAyB,KAAKa,KAAOtC,EAAAyB,KAAK1J,IAAM2rB,EAAc,GACtG92B,EAAQpR,KAAKgiC,kBAAkB3tB,EAAWjD,MAAOpR,KAAK4/B,YAAW,GAA2B,GAG5F5uB,EAAOhR,KAAKL,OAAOyc,gBAAgBjL,GAAM,EAAM,GAG1CH,IACHm2B,EAAYnnC,KAAK+8B,gBAAgBjD,oBAAoB95B,KAAK4/B,aAC1DzuB,EAAOnR,KAAKL,OAAOkS,eAAes1B,EAAUz1B,MAAOP,IAGrD06B,EAAoB7rC,KAAK4/B,YAAY1U,GAAG,IACxChX,EAAYmqB,EAAcltB,EAAMnR,KAAK4/B,YAAa5/B,KAAKL,QAIrDqR,EADEA,EACKhR,KAAKL,OAAO+U,SACjBR,EACAlD,EACAI,GAKKpR,KAAKL,OAAO+U,SACjBR,EACAlU,KAAKL,OAAO8R,eAAeyY,OAAOid,EAAW,yBAAyBz1B,MAAO1R,KAAK4/B,YAAYjG,gBAC9FvoB,EAGJ,MAEF,SAEE,KADApR,MAAKojB,MAAMmB,EAAAhC,eAAeuL,wBAAyBzZ,EAAWgN,OACxD,GAAIvF,OAAM,mBAMpB,MAJI+vB,IAAqBpD,IACvBve,OAAOlqB,KAAK4/B,YAAY1U,GAAG,KAC3Bla,EAAO2sB,EAAqB3sB,EAAMhR,KAAK4/B,YAAa5/B,KAAKL,SAEpDisC,EACH5rC,KAAKioC,2BAA2B5zB,EAAWlD,KAAMH,EAAMk3B,GAAkB1jB,EAAAyB,KAAKa,MAC9E9V,GAGNyuB,EAAAj+B,UAAA0sC,kBAAA,SAAkB75B,EAAwBo9B,EAA6BvJ,GACrE,GAAI7d,GAAWrqB,KAAKu0B,QAAQ7B,kBAAkBre,EAAYrU,KAAK+8B,gBAC/D,KAAK1S,EACH,MAAOrqB,MAAKL,OAAOoW,mBAGrB,IACI27B,GADAjpB,EAAU4B,EAAS5B,OAEvB,QAAQA,EAAQpB,MAEd,IAAKsX,GAAApU,YAAYc,OACf,IAAKrrB,KAAK0hC,cAAsBjZ,GAC9B,MAAOzoB,MAAKL,OAAOoW,mBACrBmU,QAAgBzB,EAAS9W,MAAQ6S,EAAAyB,KAAKa,KAAM,yBAG9C,KAAK6X,GAAApU,YAAYqI,MACjB,IAAK+L,GAAApU,YAAYsI,MACf6e,EAAoCjpB,EAAS9W,IAC7C,MAEF,KAAKgtB,GAAApU,YAAYuE,SACf,GAAIE,GAA6BvG,EAASuG,eAC1C,IAAIA,EAAiB,CACnB,GAAI2iB,GAAiB3iB,EAAgBjC,SACrC,KAAK4kB,EACH,MAAO3xC,MAAKL,OAAOoW,mBACrB27B,GAAcC,EAAela,WAAW,GAAG9lB,IAC3C,OAGF,MADA3R,MAAKojB,MAAMmB,EAAAhC,eAAeqvB,oEAAqEv9B,EAAWgN,MAAkBoH,EAAS9R,cAC9H3W,KAAKL,OAAOoW,mBAErB,KAAK4oB,GAAApU,YAAYgJ,mBACf,GAAIlf,EAAWgT,MAAQ5C,EAAA6C,SAAS8M,cAAe,CAC7ClK,OAAOG,EAAS3U,QAAU2U,EAAS3U,OAAO2R,MAAQsX,EAAApU,YAAYyI,OAASvK,EAAQ4F,YAAsBhE,EAAS3U,OAAQlU,UAAU4sB,aAChI,IAAIyjB,GAAyCppB,EAASsE,QAAQ,KAC9D,IAAI8kB,EAAoB,CACtBH,EAAcG,EAAmBl8B,UACjC,QAIN,QAEE,MADA3V,MAAKojB,MAAMmB,EAAAhC,eAAeuL,wBAAyBzZ,EAAWgN,OACvDrhB,KAAKL,OAAOoW,oBAKvB,MADA/V,MAAK4/B,YAAc8R,EACZ1xC,KAAKioC,2BAA2B5zB,EAAYrU,KAAKgiC,kBAAkByP,EAAiBC,GAAcxJ,GAAkB1jB,EAAAyB,KAAKa,OAGlI2Y,EAAAj+B,UAAAymC,2BAAA,SAA2B5zB,EAAwBy9B,EAAqCC,OAAA,KAAAA,OAAA,EACtF,IAAI1nB,GAAWrqB,KAAKu0B,QAAQ7B,kBAAkBre,EAAYrU,KAAK+8B,gBAC/D,KAAK1S,EACH,MAAOrqB,MAAKL,OAAOoW,mBAErB,IACIoxB,GACA6K,EAFAvpB,EAAU4B,EAAS5B,OAGvB,QAAQA,EAAQpB,MAEd,IAAKsX,GAAApU,YAAYqI,MAEf,MADA5yB,MAAK4/B,YAAcmS,EAActpB,EAAS9W,KAAO6S,EAAAyB,KAAKa,KAC1C2B,EAASyC,GAAGyT,EAAA5T,aAAamK,WACnCl1B,KAAKojB,MAAMmB,EAAAhC,eAAeqvB,oEAAqEv9B,EAAWgN,MAAeoH,EAAS9R,cAC3H3W,KAAKL,OAAOoW,qBAEdg8B,EACH/xC,KAAKL,OAAOkS,eAAuB4W,EAAS/W,MAAOogC,GACnD9xC,KAAKL,OAAO6T,eAAuBiV,EAAS/W,MAAOogC,EAEzD,KAAKnT,GAAApU,YAAYc,OACf,IAAKrrB,KAAK0hC,cAAsBjZ,GAC9B,MAAOzoB,MAAKL,OAAOoW,mBAGrB,IAFAmU,OAAgBzB,EAAS9W,MAAQ6S,EAAAyB,KAAKa,KAAM,0BAC5C9mB,KAAK4/B,YAAcmS,EAAetpB,EAAS9W,KAAO6S,EAAAyB,KAAKa,KAC3C2B,EAASyC,GAAGyT,EAAA5T,aAAamK,UAEnC,MADAl1B,MAAKojB,MAAMmB,EAAAhC,eAAeqvB,oEAAqEv9B,EAAWgN,MAAeoH,EAAS9R,cAC3H3W,KAAKL,OAAOoW,mBAErB,KAAKg8B,EACH,MAAO/xC,MAAKL,OAAO+T,gBAAyB+U,EAAS9R,aAAcm7B,EACrE,IAAIG,GAA4BxpB,EAAS9W,KAAKgoB,cAC9C,OAAO35B,MAAKL,OAAOiU,YAAY,MAC7B5T,KAAKL,OAAO+T,gBAAyB+U,EAAS9R,aAAcm7B,GAC5D9xC,KAAKL,OAAOoS,gBAAyB0W,EAAS9R,aAAcs7B,IAC3DA,EAEL,KAAKtT,GAAApU,YAAYsI,MACf,GAAYpK,EAASjnB,UAAU0wC,WAE7B,MADAlyC,MAAKojB,MAAMmB,EAAAhC,eAAeqvB,oEAAqEv9B,EAAWgN,MAAeoH,EAAS9R,cAC3H3W,KAAKL,OAAOoW,mBAErBmU,QAAoC,MAA7BG,EAASoI,iBAA0B,8BAC1Cuf,EAAahyC,KAAKgiC,kBAA8B3X,EAASoI,iBAAkBzyB,KAAKgmB,QAAQtQ,QAAUqD,EAAOC,OAASwL,EAAAyB,KAAKmZ,QAAU5a,EAAAyB,KAAKoZ,QAAO,GAC7InV,OAAOlqB,KAAK4/B,YAAY9M,UAAW,uBACnC9yB,KAAK4/B,YAAcmS,EAActpB,EAAS9W,KAAO6S,EAAAyB,KAAKa,IACtD,IAAIqrB,GAA4B1pB,EAAS9W,KAAKgoB,cAC9C,OAAKoY,IAEL5K,EAAYnnC,KAAK+8B,gBAAgBjD,oBAA4BrR,EAAS9W,MAC/D3R,KAAKL,OAAOiU,YAAY,MAC7B5T,KAAKL,OAAO6T,eAAe2zB,EAAUz1B,MAAOogC,GAC5C9xC,KAAKL,OAAO0S,YAAoBoW,EAAS9W,KAAKusB,MAAQ,EAAG8T,EAAYhyC,KAAKL,OAAO8R,eAAe01B,EAAUz1B,MAAOygC,GAAoBA,EAA2B1pB,EAASgS,cACzKz6B,KAAKL,OAAO8R,eAAe01B,EAAUz1B,MAAOygC,IAC3CA,IANMnyC,KAAKL,OAAO0S,YAAoBoW,EAAS9W,KAAKusB,MAAQ,EAAG8T,EAAYF,EAAsBK,EAA2B1pB,EAASgS,aAQ1I,KAAKkE,GAAApU,YAAYuE,SACf,GAAIE,GAA6BvG,EAASuG,eAC1C,IAAIA,EAAiB,CACnB,GAAI2iB,GAAiB3iB,EAAgBjC,SACrC,IAAI4kB,EAAgB,CAElB,GADAznB,OAA2C,GAApCynB,EAAela,WAAWz1B,SAC5B+vC,EACH,MAAIJ,GAAezmB,GAAGyT,EAAA5T,aAAa8L,WACjC3M,OAAoC,MAA7BG,EAASoI,kBAChBuf,EAAahyC,KAAKgiC,kBAA8B3X,EAASoI,iBAAkBzyB,KAAKgmB,QAAQtQ,QAAUqD,EAAOC,OAASwL,EAAAyB,KAAKmZ,QAAU5a,EAAAyB,KAAKoZ,QAAO,GAC7InV,OAAOlqB,KAAK4/B,YAAY9M,WACxB9yB,KAAK4/B,YAAcpb,EAAAyB,KAAKa,KACjB9mB,KAAKoyC,SAAST,GAAkBK,EAAYF,MAEnD9xC,KAAK4/B,YAAcpb,EAAAyB,KAAKa,KACjB9mB,KAAKoyC,SAAST,GAAkBG,IAG3C,IAAI/iB,GAA6BtG,EAASsG,eAC1C7E,QAA0B,MAAnB6E,EACP,IAAIsjB,GAAqCtjB,EAAiBhC,SAC1D,IAAIslB,EAEF,MADAnoB,QAA2C,GAApCmoB,EAAe5a,WAAWz1B,QAC7B2vC,EAAezmB,GAAGyT,EAAA5T,aAAa8L,WACjC3M,OAAoC,MAA7BG,EAASoI,kBAChBuf,EAAahyC,KAAKgiC,kBAA8B3X,EAASoI,iBAAkBzyB,KAAKgmB,QAAQtQ,QAAUqD,EAAOC,OAASwL,EAAAyB,KAAKmZ,QAAU5a,EAAAyB,KAAKoZ,QAAO,GAC7InV,OAAOlqB,KAAK4/B,YAAY9M,WACxBqU,EAAYnnC,KAAK+8B,gBAAgBjD,oBAAoBuY,EAAe18B,YAC7D3V,KAAKL,OAAOiU,YAAY,MAC7B5T,KAAKoyC,SAAST,GAAkB3xC,KAAKL,OAAOkS,eAAes1B,EAAUz1B,MAAOsgC,GAAaF,IACzF9xC,KAAKoyC,SAASC,GAAkBryC,KAAKL,OAAO8R,eAAe01B,EAAUz1B,MAAOy1B,EAAUx1B,KAAKgoB,oBACzF35B,KAAK4/B,YAAcyS,EAAe18B,YAAYgkB,iBAE3C35B,KAAKL,OAAOiU,YAAY,MAC7B5T,KAAKoyC,SAAST,GAAkBG,IAChC9xC,KAAKoyC,SAASC,KACZryC,KAAK4/B,YAAcyS,EAAe18B,YAAYgkB,qBAIxD35B,MAAKojB,MAAMmB,EAAAhC,eAAeqvB,oEAAqEv9B,EAAWgN,MAAkBoH,EAAS9R,aACvI,OAAO3W,MAAKL,OAAOoW,mBAErB,KAAK4oB,GAAApU,YAAYgJ,mBACf,GAAIlf,EAAWgT,MAAQ5C,EAAA6C,SAAS8M,cAAe,CAC7ClK,OAAOG,EAAS3U,QAAU2U,EAAS3U,OAAO2R,MAAQsX,EAAApU,YAAYyI,MAC9D,IAAIsf,GAAyC7pB,EAASsE,SACtD,KAAKulB,EACH,MAAOtyC,MAAKL,OAAOoW,mBACrB,IACIw8B,GADAC,EAAyBnoB,EAAS3U,OAAQlU,UAAU8sB,YAExD,IAAsB,MAAlBkkB,GAAkCnoB,EAAS3U,OAAQqW,UAAYwmB,EAA2CloB,EAAS3U,OAAQqW,QAAS5qB,IAAIqxC,KAAoBD,EAAWlrB,MAAQsX,EAAApU,YAAYgJ,mBAAoB,CACjN,GAAIse,GAAyCU,EAAYxlB,SACzD,KAAK8kB,EACH,MAAO7xC,MAAKL,OAAOoW,mBACrBi8B,GAAahyC,KAAKgiC,kBAA8B3X,EAASoI,iBAAkBzyB,KAAKgmB,QAAQtQ,QAAUqD,EAAOC,OAASwL,EAAAyB,KAAKmZ,QAAU5a,EAAAyB,KAAKoZ,QAAO,GAC7InV,OAAOlqB,KAAK4/B,YAAY9M,UACxB,IAAI2f,GAAczyC,KAAKgiC,kBAA4C3tB,EAAYq+B,kBAAmBluB,EAAAyB,KAAK1J,IACvG,OAAKw1B,IAIL/xC,KAAK4/B,YAAc0S,EAAmB38B,WACtCwxB,EAAYnnC,KAAK+8B,gBAAgBjD,oBAAoB95B,KAAK4/B,aACnD5/B,KAAKL,OAAOiU,YAAY,MAC7B5T,KAAKoyC,SAASP,GAAsBG,EAAYS,EAAazyC,KAAKL,OAAOkS,eAAes1B,EAAUz1B,MAAOogC,KACzG9xC,KAAKL,OAAO8R,eAAe01B,EAAUz1B,MAAOy1B,EAAUx1B,KAAKgoB,iBAC1D35B,KAAK4/B,YAAYjG,kBARlB35B,KAAK4/B,YAAciS,EAAmBl8B,WAC/B3V,KAAKoyC,SAASP,GAAsBG,EAAYS,EAAaX,KAUtE,MADA9xC,MAAKojB,MAAMmB,EAAAhC,eAAeowB,+CAAgDt+B,EAAWgN,MAAegJ,EAAS3U,OAAQiB,cAC9G3W,KAAKL,OAAOoW,qBAM3B,MADA/V,MAAKojB,MAAMmB,EAAAhC,eAAeuL,wBAAyBzZ,EAAWgN,OACvDrhB,KAAKL,OAAOoW,qBAGrB0pB,EAAAj+B,UAAAonC,sBAAA,SAAsBv0B,EAA4B6zB,GAChD,GAAI7d,GAAWrqB,KAAKu0B,QAAQ7B,kBAAkBre,EAAWA,WAAYrU,KAAK+8B,gBAC1E,KAAK1S,EACH,MAAOrqB,MAAKL,OAAOoW,mBAErB,IAAI0S,GAAU4B,EAAS5B,OACvB,IAAIA,EAAQpB,MAAQsX,EAAApU,YAAYgJ,mBAE9B,MADAvzB,MAAKojB,MAAMmB,EAAAhC,eAAeqwB,uGAAwGv+B,EAAWgN,MAAOoH,EAAQ9R,cACrJ3W,KAAKL,OAAOoW,mBAGrB,IAAI88B,GAAuCpqB,EACvC6b,EAAoC,IAGxC,IAAIuO,EAAkB3nB,GAAGyT,EAAA5T,aAAaC,SAAU,CAC9C,GAAIiN,GAAuC,IAC3C,IAAI5jB,EAAW8c,cAAe,CAC5B,GAAIjvB,GAAImS,EAAW8c,cAAcnvB,MACjCi2B,GAAwB,GAAIv0B,OAAYxB,EACxC,KAAK,GAAI5B,GAAI,EAAGA,EAAI4B,IAAK5B,EAAG,CAC1B,GAAIuhC,GAAe7hC,KAAKu0B,QAAQ1D,YAAYxc,EAAW8c,cAAc7wB,GAAIN,KAAK+8B,gBAAgBhM,yBAAyB,EACvH,KAAK8Q,EACH,MAAO7hC,MAAKL,OAAOoW,mBACrBkiB,GAAsB33B,GAAKuhC,GAG/B,GAAI7wB,GAAO0tB,EAAAoU,YAAmB9yC,KAAM6yC,EAAmB5a,EAAuB5jB,EAAW2Z,UAAWka,EAAgB7zB,EACpH,OAAKrD,KACHhR,KAAKojB,MAAMmB,EAAAhC,eAAeuL,wBAAyBzZ,EAAWgN,OACvDrhB,KAAKL,OAAOoW,qBAMvB,GAAIuuB,GAAmBuO,EAAkB3hB,yBAAyB7c,EAAW8c,cAAenxB,KAAK+8B,gBAAgBhM,wBAAyB1c,EAC1I,KAAKiwB,EACH,MAAOtkC,MAAKL,OAAOoW,mBAYrB,IAAIg9B,GAAe1+B,EAAW2Z,UAAUhsB,OACpCgxC,EAA4D,MAArC1O,EAAiBxQ,iBAA2Bif,EAAe,EAAIA,EACtFE,EAAgB,EAEhBC,EAAO,GAAIxvC,OAAkBsvC,EAKjC,KAJI1O,EAAiBxQ,mBACnB5J,OAAoC,MAA7BG,EAASoI,kBAChBygB,EAAKD,KAA+B5oB,EAASoI,kBAE1CnyB,EAAI,EAAGA,EAAIyyC,IAAgBzyC,EAC9B4yC,EAAKD,KAAmB5+B,EAAW2Z,UAAU1tB,EAC/C,OAAON,MAAK8yC,YAAYxO,EAAkB4O,EAAM7+B,IAOlDorB,EAAAj+B,UAAAsxC,YAAA,SAAYxO,EAA4B6O,EAAmCnb,EAAkBob,OAAA,KAAAA,MAAA,EAG3F,IAAI3b,GAAa6M,EAAiB7M,WAE9BiM,EAAgBjM,EAAWz1B,OAC3B2hC,EAA6D,MAArCW,EAAiBxQ,iBAA2B4P,EAAgB,EAAIA,EACxFsP,EAAuBG,EAAoBnxC,OAC3C+wC,EAAoD,MAArCzO,EAAiBxQ,iBAA2Bkf,EAAuB,EAAIA,CAI1F,IAHII,GACFJ,IAEEA,EAAuBrP,EAKzB,MAJA3jC,MAAKojB,MAAMmB,EAAAhC,eAAemM,+BAAgCsJ,EAAW3W,MACnEqiB,EAAcjiB,SAAS,IACvBsxB,EAAatxB,SAAS,KAEjBzhB,KAAKL,OAAOoW,mBAErB,IAAIxE,GAAW,GAAI7N,OAAqBigC,GACpC0P,EAAe,EACfJ,EAAgB,CAOpB,KANI3O,EAAiBxQ,mBAEjBviB,EAAS8hC,KADPD,GAGyBpzC,KAAKgiC,kBAAkBmR,EAAoBF,KAAkB3O,EAAiBxQ,iBAAiBniB,OAEvH0hC,EAAe1P,IAAyB0P,EAG7C,GAAIL,EAAuBK,EACzB9hC,EAAS8hC,GAAgBrzC,KAAKgiC,kBAAkBmR,EAAoBF,KAAkBxb,EAAW4b,EAAe3P,EAAgBC,GAAuBhyB,UAGlJ,CACL,GAAIwE,GAAcshB,EAAW4b,EAAe3P,EAAgBC,GAAuBxtB,WACnF,KAAIA,EAWF,MAJAnW,MAAKojB,MAAMmB,EAAAhC,eAAe+wB,wCAAyCtb,EAAW3W,OAC3EgyB,EAAe3P,EAAgBC,GAAuBliB,SAAS,IAChEsxB,EAAatxB,SAAS,KAEjBzhB,KAAKL,OAAOoW,mBAVnBxE,GAAS8hC,GAAgBrzC,KAAKgiC,kBAAkB7rB,EAAashB,EAAW4b,EAAe3P,EAAgBC,GAAuBhyB,MAgBpI,MADA3R,MAAK4/B,YAAc0E,EAAiB3uB,WAC7B3V,KAAKoyC,SAAS9N,EAAkB/yB,IAIzCkuB,EAAAj+B,UAAA4wC,SAAA,SAAS9N,EAA4B/yB,GACnC,WADmC,KAAAA,MAAA,MAC7B+yB,EAAiBpZ,GAAGyT,EAAA5T,aAAa4W,WAAa3hC,KAAKmjC,gBAAgBmB,GAIrEA,EAAiBpZ,GAAGyT,EAAA5T,aAAagK,UAC5B/0B,KAAKL,OAAOkW,iBAAiByuB,EAAiB3tB,aAAcpF,EAAU+yB,EAAiB3uB,WAAWgkB,gBAGpG35B,KAAKL,OAAO8V,WAAW6uB,EAAiB3tB,aAAcpF,EAAU+yB,EAAiB3uB,WAAWgkB,gBAP1F35B,KAAKL,OAAOoW,qBAUvB0pB,EAAAj+B,UAAAsnC,uBAAA,SAAuBz0B,EAA6B6zB,GAIlD,IAAK,GAHDqL,GAAcl/B,EAAWk/B,YACzBrxC,EAAIqxC,EAAYvxC,OAChBwxC,EAAQ,GAAI9vC,OAAqBxB,KAC5B5B,EAAI,EAAGA,EAAI4B,IAAK5B,EACvBkzC,EAAMlzC,GAAKN,KAAKgiC,kBAAkBuR,EAAYjzC,GAAIkkB,EAAAyB,KAAKa,KAEzD,OADA0sB,GAAMlzC,GAAKN,KAAKgiC,kBAAkBuR,EAAYjzC,GAAI4nC,GAC3CloC,KAAKL,OAAOiU,YAAY,KAAM4/B,EAAOxzC,KAAK4/B,YAAYjG,iBAG/D8F,EAAAj+B,UAAAunC,+BAAA,SAA+B10B,EAAqC6zB,GAClE,GAAI7d,GAAWrqB,KAAKu0B,QAAQpB,qBAAqB9e,EAAYrU,KAAK+8B,gBAClE,KAAK1S,EACH,MAAOrqB,MAAKL,OAAOoW,mBACrBmU,QAAOG,EAAS5B,QAAQpB,MAAQsX,EAAApU,YAAYgJ,oBAAsBlJ,EAAS3U,QAAU2U,EAAS3U,OAAO2R,MAAQsX,EAAApU,YAAYyI,MACzH,IAAIlG,GAA+BzC,EAAS5B,QAASsE,QAAQ,KAAc1C,EAAS3U,OAAQqb,wBAC5F,OAAKjE,GAEE9sB,KAAK8yC,YAAYhmB,GAAYzY,EAAWA,WAAYA,EAAWq+B,mBAAqBr+B,GADlFrU,KAAKL,OAAOoW,qBAIvB0pB,EAAAj+B,UAAA2nC,4BAAA,SAA4B90B,EAAkC6zB,GAE5D,OAAQ7zB,EAAWgT,MAEjB,IAAK5C,GAAA6C,SAAS2hB,KACZ,MAAIjpC,MAAKgmB,QAAQtQ,QAAUqD,EAAOC,QAC3BkvB,EAAepV,YAClB5I,OAA0B,GAAnBge,EAAe7gB,MACtBrnB,KAAK4/B,YAAcpb,EAAAyB,KAAKmZ,SAEnBp/B,KAAKL,OAAO2Q,UAAU,KAE1B43B,EAAepV,YAClB5I,OAA0B,GAAnBge,EAAe7gB,MACtBrnB,KAAK4/B,YAAcpb,EAAAyB,KAAKoZ,SAEnBr/B,KAAKL,OAAOwQ,UAAU,GAE/B,KAAKsU,GAAA6C,SAAS4hB,KAEZ,MADAlpC,MAAK4/B,YAAcpb,EAAAyB,KAAKU,KACjB3mB,KAAKL,OAAOwQ,UAAU,EAE/B,KAAKsU,GAAA6C,SAAS0hB,MAEZ,MADAhpC,MAAK4/B,YAAcpb,EAAAyB,KAAKU,KACjB3mB,KAAKL,OAAOwQ,UAAU,EAE/B,KAAKsU,GAAA6C,SAASuM,KACZ,MAAI7zB,MAAK+8B,gBAAgBjJ,kBACvB9zB,KAAK4/B,YAAc5/B,KAAK+8B,gBAAgBjJ,iBAAiBniB,KAClD3R,KAAKL,OAAO8R,eAAe,EAAGzR,KAAK4/B,YAAYjG,kBAExD35B,KAAKojB,MAAMmB,EAAAhC,eAAewR,+CAAgD1f,EAAWgN,OACrFrhB,KAAK4/B,YAAc5/B,KAAKgmB,QAAQtQ,QAAUqD,EAAOC,OAASwL,EAAAyB,KAAKmZ,QAAU5a,EAAAyB,KAAKoZ,QACvEr/B,KAAKL,OAAOoW,oBAErB,KAAK0O,GAAA6C,SAAS0M,MACZ,MAAIh0B,MAAK+8B,gBAAgBjJ,kBAAoB9zB,KAAK+8B,gBAAgBjJ,iBAAiBZ,MACjFlzB,KAAK4/B,YAAc5/B,KAAK+8B,gBAAgBjJ,iBAAiBZ,KAAKvhB,KACvD3R,KAAKL,OAAO8R,eAAe,EAAGzR,KAAK4/B,YAAYjG,kBAExD35B,KAAKojB,MAAMmB,EAAAhC,eAAe0R,iDAAkD5f,EAAWgN,OACvFrhB,KAAK4/B,YAAc5/B,KAAKgmB,QAAQtQ,QAAUqD,EAAOC,OAASwL,EAAAyB,KAAKmZ,QAAU5a,EAAAyB,KAAKoZ,QACvEr/B,KAAKL,OAAOoW,qBAIvB,GAAIsU,GAAWrqB,KAAKu0B,QAAQjK,kBAAkBjW,EAAYrU,KAAK+8B,gBAAiB/8B,KAAK2/B,YACrF,KAAKtV,EACH,MAAOrqB,MAAKL,OAAOoW,mBAErB,IAAI0S,GAAU4B,EAAS5B,OACvB,QAAQA,EAAQpB,MAEd,IAAKsX,GAAApU,YAAYqI,MACf,MAAYnK,GAASyC,GAAGyT,EAAA5T,aAAa6K,SAC5B51B,KAAKmiC,sBAA6B1Z,EAASyf,IACpDhe,OAAezB,EAAS/W,OAAS,GACjC1R,KAAK4/B,YAAsBnX,EAAS9W,KAC7B3R,KAAKL,OAAO8R,eAAuBgX,EAAS/W,MAAO1R,KAAK4/B,YAAYjG,gBAE7E,KAAKgF,GAAApU,YAAYc,OACf,MAAI5C,GAAQyC,GAAGyT,EAAA5T,aAAaC,SACnB0T,EAAA+U,mBAA0BzzC,KAAcyoB,EAASpU,GACrDrU,KAAK0hC,cAAsBjZ,IAEhCyB,OAAgBzB,EAAS9W,MAAQ6S,EAAAyB,KAAKa,MACzB2B,EAASyC,GAAGyT,EAAA5T,aAAa6K,SAC7B51B,KAAKmiC,sBAA8B1Z,EAASyf,IACrDloC,KAAK4/B,YAAuBnX,EAAS9W,KAC9B3R,KAAKL,OAAOoS,gBAAyB0W,EAAS9R,aAAc3W,KAAK4/B,YAAYjG,kBAL3E35B,KAAKL,OAAOoW,mBAOvB,KAAK4oB,GAAApU,YAAY2H,UACf,MAAKzJ,GAAQyC,GAAGyT,EAAA5T,aAAa4W,WAK7B3hC,KAAK4/B,YAAcpb,EAAAyB,KAAK1J,IACRkM,EAASyC,GAAGyT,EAAA5T,aAAa6K,SAChC51B,KAAKL,OAAOwQ,UAAsBsY,EAAS0M,eAC7Cn1B,KAAKL,OAAOoS,gBAA4B0W,EAAS9R,aAAc+N,EAAA3gB,WAAW+Y,OAP/E9c,KAAKojB,MAAMmB,EAAAhC,eAAemxB,+HAAgIr/B,EAAWgN,OACrKrhB,KAAK4/B,YAAcpb,EAAAyB,KAAK1J,IACjBvc,KAAKL,OAAOoW,qBAQzB,MADA/V,MAAKojB,MAAMmB,EAAAhC,eAAeuL,wBAAyBzZ,EAAWgN,OACvDrhB,KAAKL,OAAOoW,qBAGrB0pB,EAAAj+B,UAAA4nC,yBAAA,SAAyB/0B,EAA+B6zB,EAAsByL,GAC5E,WAD4E,KAAAA,OAAA,GACpEt/B,EAAW8Z,aAEjB,OACEjE,QAAQypB,EACR,IAAI7gB,GAAYoV,EAAepV,SAC/B,OAAIA,IAAaA,GAAa9yB,KAAKu0B,QAAQ5O,SAASxkB,IAAI,UAAY2xB,EAAU3B,eAAmD,GAAlC2B,EAAU3B,cAAcnvB,OAC9GhC,KAAK4zC,mBAAmB9gB,EAAU3B,cAAc,GAA6B9c,EAAYw/B,qBAClG7zC,KAAKojB,MAAMmB,EAAAhC,eAAeuL,wBAAyBzZ,EAAWgN,OACvDrhB,KAAKL,OAAOoW,oBAErB,QACE,GAAI+9B,GAAsCz/B,EAAYvQ,KAGtD,OAFI6vC,KACFG,GAAcA,GACZ5L,GAAkB1jB,EAAAyB,KAAKW,IAClB5mB,KAAKL,OAAO+Q,UAAeojC,IACpC9zC,KAAK4/B,YAAcpb,EAAAyB,KAAKY,IACjB7mB,KAAKL,OAAOiR,UAAUkjC,GAG/B,QACE,GAAIC,GAAsC1/B,EAAYvQ,KAGtD,QAFI6vC,IACFI,EAAWC,QAAQre,QAAQ,GAAIoe,IACzB7L,EAAe7gB,MAIrB,OACE,GAAI4sB,UAAUF,GACZ,MAAO/zC,MAAKL,OAAOwQ,UAAU8I,QAAQ86B,GACvC,MAEF,QACE,GAAIG,WAAWH,GACb,MAAO/zC,MAAKL,OAAOwQ,UAAU8I,QAAQ86B,GACvC,MAEF,QACE,GAAII,WAAWJ,GACb,MAAO/zC,MAAKL,OAAOwQ,UAAU8I,QAAQ86B,GACvC,MAEF,QACE,GAAIK,UAAUL,GACZ,MAAO/zC,MAAKL,OAAOwQ,UAAU8I,QAAQ86B,GACvC,MAEF,QACE,GAAIM,WAAWN,GACb,MAAO/zC,MAAKL,OAAOwQ,UAAU8I,QAAQ86B,GACvC,MAEF,QACE,GAAIO,WAAWP,GACb,MAAO/zC,MAAKL,OAAOwQ,UAAU8I,QAAQ86B,GACvC,MAEF,SACE,GAAIQ,YAAYR,GACd,MAAO/zC,MAAKL,OAAOwQ,UAAU8I,QAAQ86B,GACvC,MAEF,QAQA,OACE,IAAK/zC,KAAKgmB,QAAQuiB,SAAU,CAC1B,GAAI+L,WAAWP,GACb,MAAO/zC,MAAKL,OAAOwQ,UAAU8I,QAAQ86B,GACvC,OAEF,MAAO/zC,MAAKL,OAAO2Q,UAAU2I,QAAQ86B,GAAW76B,SAAS66B,GAE3D,QACA,OACE,MAAO/zC,MAAKL,OAAO2Q,UAAU2I,QAAQ86B,GAAW76B,SAAS66B,GAE3D,SACE,GAAIS,WAAWT,GACb,MAAO/zC,MAAKL,OAAO+Q,UAAU+jC,WAAWV,GAC1C,MAEF,SACE,GAAIW,WAAWX,GACb,MAAO/zC,MAAKL,OAAOiR,UAAU+jC,WAAWZ,GAC1C,MAEF,SACE,KAEF,SACE7pB,QAAO,GAMX,MAAIiqB,YAAWJ,IACb/zC,KAAK4/B,YAAcpb,EAAAyB,KAAK1J,IACjBvc,KAAKL,OAAOwQ,UAAU8I,QAAQ86B,MAErC/zC,KAAK4/B,YAAcpb,EAAAyB,KAAKG,IACjBpmB,KAAKL,OAAO2Q,UAAU2I,QAAQ86B,GAAW76B,SAAS66B,IAG7D,QAEE,MADA7pB,SAAQypB,GACD3zC,KAAK40C,oBAA8CvgC,EAAYvQ,OAK1E,KAAM,IAAIgY,OAAM,oBAGlB2jB,EAAAj+B,UAAAozC,oBAAA,SAAoBC,GAClB,GAAIC,GAAsC90C,KAAK8/B,eAAe3+B,IAAI0zC,EAClE,KAAKC,EAAe,CAClB,GAAIC,GAAeF,EAAY7yC,OAC3BgzC,EAAe,GAAI/xC,YAAW,EAAmB,EAAf8xC,EACtCC,GAAa,GAA6B,IAAvBD,EACnBC,EAAa,GAAMD,IAAkB,EAAK,IAC1CC,EAAa,GAAMD,IAAiB,GAAM,IAC1CC,EAAa,GAAMD,IAAiB,GAAM,GAC1C,KAAK,GAAIz0C,GAAI,EAAGA,EAAIy0C,IAAgBz0C,EAClC00C,EAAa,EAAQ,EAAJ10C,GAA6C,IAAnCu0C,EAAYlyC,WAAWrC,GAClD00C,EAAa,EAAQ,EAAJ10C,GAAUu0C,EAAYlyC,WAAWrC,KAAO,EAAK,GAEhEw0C,GAAgB90C,KAAK2kC,iBAAiBqQ,EAAch1C,KAAKgmB,QAAQU,UAAUqV,UAC3E/7B,KAAK8/B,eAAejX,IAAIgsB,EAAaC,GAEvC,GAAIG,GAAeH,EAAc7lC,MAEjC,OADAjP,MAAK4/B,YAAc5/B,KAAKgmB,QAAQU,UAC5B1mB,KAAKgmB,QAAQuiB,SACRvoC,KAAKL,OAAO2Q,UAAU2I,QAAQg8B,GAAe/7B,SAAS+7B,KAC/D/qB,OAAOiqB,WAAWc,IACXj1C,KAAKL,OAAOwQ,UAAU8I,QAAQg8B,MAGvCxV,EAAAj+B,UAAAoyC,mBAAA,SAAmBlC,EAAmB6B,GAGpC,GAII/jB,GAJA0lB,GAAW,EACXhX,EAAOqV,EAAYvxC,OAEnBigC,EAAayP,EAAY/X,cAE7B,QAAQsI,GAEN,IAAKvd,GAAA3gB,WAAW+Y,IACd0S,EAAS7f,WAAkB,GAAIwlC,YAAWjX,GAC1C,MAEF,KAAKxZ,GAAA3gB,WAAWiZ,IACdwS,EAAS7f,WAAkB,GAAIjM,OAAWw6B,GAC1C,MAEF,KAAKxZ,GAAA3gB,WAAWoZ,IACdqS,EAAS7f,WAAkB,GAAIylC,cAAalX,GAC5C,MAEF,KAAKxZ,GAAA3gB,WAAWsZ,IACdmS,EAAS7f,WAAkB,GAAI0lC,cAAanX,GAC5C,MAEF,SACE,KAAM,IAAIpiB,OAAM,0BAKpB,IAAK,GADD9K,GADAwiC,EAAQ,GAAI9vC,OAAqBw6B,GAE5B59B,EAAI,EAAGA,EAAI49B,IAAQ59B,EAE1B,GADAkzC,EAAMlzC,GAAKizC,EAAYjzC,GAAKN,KAAKgiC,kBAA8BuR,EAAYjzC,GAAIoxC,GAAeA,EAAYpP,aAAatiC,KAAKL,QACxHu1C,EACF,GAAIv4B,yBAAyB3L,EAAOhR,KAAKoiC,wBAAwBoR,EAAMlzC,MAAQokB,EAAAlgB,aAAaoY,MAE1F,OADAsN,OAAOrN,2BAA2B7L,IAASixB,GACnCA,GAEN,IAAKvd,GAAA3gB,WAAW+Y,IACdnN,WAAkB6f,GAAQlvB,GAAKyc,0BAA0B/L,EACzD,MAEF,KAAK0T,GAAA3gB,WAAWiZ,IACdrN,WAAkB6f,GAAQlvB,GAAKq1B,QAAQ1Y,6BAA6BjM,GAAOkM,8BAA8BlM,GACzG,MAEF,KAAK0T,GAAA3gB,WAAWoZ,IACdxN,WAAkB6f,GAAQlvB,GAAK8c,0BAA0BpM,EACzD,MAEF,KAAK0T,GAAA3gB,WAAWsZ,IACd1N,WAAkB6f,GAAQlvB,GAAKgd,0BAA0BtM,EACzD,MAEF,SACEkZ,QAAO,OAIXgrB,IAAW,CAYjB,MAAM,IAAIp5B,OAAM,oBAGlB2jB,EAAAj+B,UAAA8nC,qBAAA,SAAqBj1B,EAA2B6zB,GAC9C,GAAI7d,GAAWrqB,KAAKu0B,QAAQ7B,kBAAkBre,EAAWA,WAAYrU,KAAK+8B,gBAC1E,IAAI1S,EACF,GAAIA,EAAS5B,QAAQpB,MAAQsX,EAAApU,YAAYC,gBAAiB,CACxD,GAAIhpB,GAA4B6oB,EAAS5B,QACrCqE,EAAWtrB,EAAU0vB,yBAAyB7c,EAAW8c,cAAe,KAAM9c,EAClF,IAAIyY,EAAU,CACZ,GAAIwoB,GAAW5W,EAAA6W,gBAAuBv1C,KAAM8sB,EAAUzY,GAClDyzB,EAAe,GAAIpkC,OAGnByjC,EAAYnnC,KAAK+8B,gBAAgBtD,aAAaz5B,KAAKgmB,QAAQU,UAI/D,IAHAohB,EAAankC,KAAK3D,KAAKL,OAAO6T,eAAe2zB,EAAUz1B,MAAO4jC,IAG1DxoB,EAASf,QLq7FC,IKp7FZ,IAAmB,GAAAzC,GAAAxF,EAAAgJ,EAASf,QAAQyD,UAAQzF,EAAAT,EAAArF,QAAA8F,EAAA7F,KAAA6F,EAAAT,EAAArF,OAAA,CAAvC,GAAIyF,GAAMK,EAAAjmB,KACb,IAAI4lB,EAAOrC,MAAQsX,EAAApU,YAAYsI,MAAO,CACpC,GAAI2iB,GAAe9rB,EACfkS,EAAmB4Z,EAAMh0C,UAAUynB,WACnCusB,GAAMtqB,GAAGyT,EAAA5T,aAAamK,UACxBhL,QAAO,GACE0R,GAAoBA,EAAiBzlB,aAC9C2xB,EAAankC,KAAK3D,KAAKL,OAAO0S,YAAYmjC,EAAM7jC,KAAKoqB,SACnD/7B,KAAKL,OAAO8R,eAAe01B,EAAUz1B,MAAO1R,KAAKgmB,QAAQyvB,gBACzDz1C,KAAKgiC,kBAAkBpG,EAAiBzlB,YAAaq/B,EAAM7jC,MAC3D6jC,EAAM7jC,KAAKgoB,eACX6b,EAAM/a,iBLw7FF,MAAOxB,GAASC,GAAQ9V,MAAO6V,GAC/B,QACI,IACQlP,IAAOA,EAAG7F,OAAS8U,EAAK1P,EAAGU,SAASgP,EAAGx4B,KAAK8oB,GAEpD,QAAU,GAAI4P,EAAK,KAAMA,GAAI9V,OKt7F/C,GAAIqY,GAAsB3O,EAAS2O,mBAYnC,OAXIA,IACFqM,EAAankC,KAAK3D,KAAK8yC,YAAYrX,EAAqBpnB,EAAW2Z,UAAW3Z,EAC5ErU,KAAKL,OAAO8R,eAAe01B,EAAUz1B,MAAO1R,KAAKgmB,QAAQyvB,kBAI7D3N,EAAankC,KAAK3D,KAAKL,OAAO8R,eAAe01B,EAAUz1B,MAAO1R,KAAKgmB,QAAQyvB,iBAC3Ez1C,KAAK+8B,gBAAgBlD,cAAcsN,GACnCmO,EAAWt1C,KAAKL,OAAOiU,YAAY,KAAMk0B,EAAc9nC,KAAKgmB,QAAQyvB,gBAEpEz1C,KAAK4/B,YAAc9S,EAASnb,KACrB2jC,OAGTt1C,MAAKojB,MAAMmB,EAAAhC,eAAemzB,yEAA0ErhC,EAAWA,WAAWgN,MAE9H,OAAOrhB,MAAKL,OAAOoW,mBLu7Ff,IAAImjB,GAAKF,GKp7FfyG,EAAAj+B,UAAA+nC,+BAAA,SAA+Bl1B,EAAqC6zB,GAElE,MAAOloC,MAAKgiC,kBAAkB3tB,EAAWA,WAAY6zB,EAAc,IAGrEzI,EAAAj+B,UAAAgoC,gCAAA,SAAgChX,EAA0C0V,GACxE,GAAI7d,GAAWrqB,KAAKu0B,QAAQhC,sBAAsBC,EAAgBxyB,KAAK+8B,gBACvE,KAAK1S,EACH,MAAOrqB,MAAKL,OAAOoW,mBAErB,IACIi8B,GADAvpB,EAAU4B,EAAS5B,OAEvB,QAAQA,EAAQpB,MAEd,IAAKsX,GAAApU,YAAYc,OACf,MAAI5C,GAAQyC,GAAGyT,EAAA5T,aAAaC,SACnB0T,EAAA+U,mBAA0BzzC,KAAcyoB,EAAS+J,GACrDxyB,KAAK0hC,cAAsBjZ,IAEhCyB,OAAgBzB,EAAS9W,MAAQ6S,EAAAyB,KAAKa,MACzB2B,EAASyC,GAAGyT,EAAA5T,aAAa6K,SAC7B51B,KAAKmiC,sBAA8B1Z,EAASyf,IACrDloC,KAAK4/B,YAAuBnX,EAAS9W,KAC9B3R,KAAKL,OAAOoS,gBAAyB0W,EAAS9R,aAAc3W,KAAK4/B,YAAYjG,kBAL3E35B,KAAKL,OAAOoW,mBAOvB,KAAK4oB,GAAApU,YAAY2H,UACf,MAAKlyB,MAAK4iC,YAAwBna,EAAS2M,OAE3Cp1B,KAAK4/B,YAAcpb,EAAAyB,KAAK1J,IACRkM,EAASyC,GAAGyT,EAAA5T,aAAa6K,SAChC51B,KAAKL,OAAOwQ,UAAsBsY,EAAS0M,eAC7Cn1B,KAAKL,OAAOoS,gBAA4B0W,EAAS9R,aAAc+N,EAAA3gB,WAAW+Y,MAJxE9c,KAAKL,OAAOoW,mBAMvB,KAAK4oB,GAAApU,YAAYsI,MAMf,MALA3I,QAA0B,MAAnBG,EAAS3U,QAChBwU,OAAoC,MAA7BG,EAASoI,kBAChBvI,OAAezB,EAASgS,cAAgB,GACxCuX,EAAahyC,KAAKgiC,kBAA8B3X,EAASoI,iBAAkBzyB,KAAKgmB,QAAQtQ,QAAUqD,EAAOC,OAASwL,EAAAyB,KAAKmZ,QAAU5a,EAAAyB,KAAKoZ,SACtIr/B,KAAK4/B,YAAsBnX,EAAS9W,KAC7B3R,KAAKL,OAAOsS,WAAmBwW,EAAS9W,KAAKusB,MAAQ,EAAWzV,EAAS9W,KAAKuZ,GAAG,GACtF8mB,EACQvpB,EAAS9W,KAAKgoB,eACdlR,EAASgS,aAGrB,KAAKkE,GAAApU,YAAYuE,SACf,GAAIjuB,GAAoB4nB,EAASsG,eACjC7E,QAAiB,MAAVrpB,EACP,IAAIwxC,GAAqCxxC,EAAQksB,QAAQ,KACzD,KAAKslB,EACH,MAAOryC,MAAKL,OAAOoW,mBAGrB,IAFAmU,OAA2C,GAApCmoB,EAAe5a,WAAWz1B,QACjChC,KAAK4/B,YAAcyS,EAAe18B,WAC9B08B,EAAennB,GAAGyT,EAAA5T,aAAa8L,UAAW,CAC5C,GAAImb,GAAahyC,KAAKgiC,kBAA8B3X,EAASoI,iBAAkBzyB,KAAKgmB,QAAQtQ,QAAUqD,EAAOC,OAASwL,EAAAyB,KAAKmZ,QAAU5a,EAAAyB,KAAKoZ,QAE1I,OADAr/B,MAAK4/B,YAAcyS,EAAe18B,WAC3B3V,KAAKoyC,SAASC,GAAkBL,IAEvC,MAAOhyC,MAAKoyC,SAASC,GAG3B,MADAryC,MAAKojB,MAAMmB,EAAAhC,eAAeuL,wBAAyB0E,EAAenR,OAC3DrhB,KAAKL,OAAOoW,qBAGrB0pB,EAAAj+B,UAAAkoC,yBAAA,SAAyBr1B,EAA+B6zB,GACtD,GAAIh0B,GAAYlU,KAAKgiC,kBAAkB3tB,EAAWH,UAAWsQ,EAAAyB,KAAK1J,KAC9Do5B,EAAS31C,KAAKgiC,kBAAkB3tB,EAAWshC,OAAQzN,GACnD0N,EAAS51C,KAAKgiC,kBAAkB3tB,EAAWuhC,OAAQ1N,EACvD,OAAOloC,MAAKL,OAAO+U,SAASR,EAAWyhC,EAAQC,IAGjDnW,EAAAj+B,UAAAooC,8BAAA,SAA8Bv1B,EAAoC6zB,GAChE,GAKIn3B,GACAkxB,EACA4T,EAJAC,GAHWzhC,EAAWy3B,SAGX9rC,KAAKgiC,kBAAkB3tB,EAAW0hC,QAAS7N,GAAkB1jB,EAAAyB,KAAKa,KAAOtC,EAAAyB,KAAK1J,IAAM2rB,EAAc,GAAuB,IAKpI2D,GAAoB,CAExB,QAAQx3B,EAAWy3B,UAEjB,IAAKlN,GAAAmN,MAAMiK,UACT,OAAQh2C,KAAK4/B,YAAYvY,MAEvB,OACA,OACA,OACA,OACA,QACEwkB,GAAoB,CACtB,SACE96B,EAAK2T,EAAArb,SAAS25B,OACdf,EAAavd,EAAA3gB,WAAW+Y,IACxB+4B,EAAY71C,KAAKL,OAAOwQ,UAAU,EAClC,MAEF,QAEA,OACEY,EAAK/Q,KAAKgmB,QAAQtQ,QAAUqD,EAAOC,OAAS0L,EAAArb,SAASglC,OAAS3pB,EAAArb,SAAS25B,OACvEf,EAAajiC,KAAKgmB,QAAQtQ,QAAUqD,EAAOC,OAAS0L,EAAA3gB,WAAWiZ,IAAM0H,EAAA3gB,WAAW+Y,IAChF+4B,EAAY71C,KAAK4/B,YAAYqW,YAAYj2C,KAAKL,OAC9C,MAEF,QACA,OACEoR,EAAK2T,EAAArb,SAASglC,OACdpM,EAAavd,EAAA3gB,WAAWiZ,IACxB64B,EAAY71C,KAAKL,OAAO2Q,UAAU,EAClC,MAEF,SACES,EAAK2T,EAAArb,SAASilC,OACdrM,EAAavd,EAAA3gB,WAAWoZ,IACxB04B,EAAY71C,KAAKL,OAAO+Q,UAAU,EAClC,MAEF,SACEK,EAAK2T,EAAArb,SAASklC,OACdtM,EAAavd,EAAA3gB,WAAWsZ,IACxBw4B,EAAY71C,KAAKL,OAAOiR,UAAU,EAClC,MAEF,SAEE,KADA5Q,MAAKojB,MAAMmB,EAAAhC,eAAeuL,wBAAyBzZ,EAAWgN,OACxD,GAAIvF,OAAM,0BAEpB,KAEF,KAAK8iB,GAAAmN,MAAMmK,YACT,OAAQl2C,KAAK4/B,YAAYvY,MAEvB,OACA,OACA,OACA,OACA,QACEwkB,GAAoB,CACtB,SACE96B,EAAK2T,EAAArb,SAASqlC,OACdzM,EAAavd,EAAA3gB,WAAW+Y,IACxB+4B,EAAY71C,KAAKL,OAAOwQ,UAAU,EAClC,MAEF,QAEA,OACEY,EAAK/Q,KAAKgmB,QAAQtQ,QAAUqD,EAAOC,OAAS0L,EAAArb,SAASslC,OAASjqB,EAAArb,SAASqlC,OACvEzM,EAAajiC,KAAKgmB,QAAQtQ,QAAUqD,EAAOC,OAAS0L,EAAA3gB,WAAWiZ,IAAM0H,EAAA3gB,WAAW+Y,IAChF+4B,EAAY71C,KAAK4/B,YAAYqW,YAAYj2C,KAAKL,OAC9C,MAEF,QACA,OACEoR,EAAK2T,EAAArb,SAASslC,OACd1M,EAAavd,EAAA3gB,WAAWiZ,IACxB64B,EAAY71C,KAAKL,OAAO2Q,UAAU,EAClC,MAEF,SACES,EAAK2T,EAAArb,SAASulC,OACd3M,EAAavd,EAAA3gB,WAAWoZ,IACxB04B,EAAY71C,KAAKL,OAAO+Q,UAAU,EAClC,MAEF,SACEK,EAAK2T,EAAArb,SAASwlC,OACd5M,EAAavd,EAAA3gB,WAAWsZ,IACxBw4B,EAAY71C,KAAKL,OAAOiR,UAAU,EAClC,MAEF,SAEE,KADA5Q,MAAKojB,MAAMmB,EAAAhC,eAAeuL,wBAAyBzZ,EAAWgN,OACxD,GAAIvF,OAAM,0BAEpB,KAEF,SAEE,KADA9b,MAAKojB,MAAMmB,EAAAhC,eAAeuL,wBAAyBzZ,EAAWgN,OACxD,GAAIvF,OAAM,mCAGpB,GAAIq6B,GACAhP,EAA0B,IAwB9B,OArBIe,IAAkB1jB,EAAAyB,KAAKa,KACzBqvB,EAAWn2C,KAAKL,OAAOuR,aAAaH,EAClC+kC,EACAD,IAKF1O,EAAYnnC,KAAK+8B,gBAAgBtD,aAAaz5B,KAAK4/B,aACnDuW,EAAWn2C,KAAKL,OAAOuR,aAAaH,EAClC/Q,KAAKL,OAAO8R,eAAe01B,EAAUz1B,MAAOuwB,GAC5C4T,IAIAhK,IACF3hB,OAAOlqB,KAAK4/B,YAAY1U,GAAG,KAC3BirB,EAAWxY,EAAqBwY,EAAUn2C,KAAK4/B,YAAa5/B,KAAKL,SAGnEw2C,EAAWn2C,KAAKioC,2BAA2B5zB,EAAW0hC,QAASI,GAAU,GACrEjO,GAAkB1jB,EAAAyB,KAAKa,MACzBoD,QAAQid,GACDgP,IAGTn2C,KAAK4/B,YAAc1V,OAAOid,GAAWx1B,KACrC3R,KAAK+8B,gBAAgBlD,cAAqBsN,GACnCnnC,KAAKL,OAAOiU,YAAY,MAC7B5T,KAAKL,OAAO6T,eAAuB2zB,EAAWz1B,MAAOokC,GACrDK,EACAn2C,KAAKL,OAAO8R,eAAuB01B,EAAWz1B,MAAOuwB,IACpDA,KAGLxC,EAAAj+B,UAAAsoC,6BAAA,SAA6Bz1B,EAAmC6zB,EAAsBO,OAAA,KAAAA,OAAA,EACpF,IAEIz3B,GAFA66B,GAAoB,EACpBD,GAAW,CAGf,QAAQv3B,EAAWy3B,UAEjB,IAAKlN,GAAAmN,MAAMqC,KACT,GAAIpuC,KAAK4/B,YAAYwW,YAEnB,MADAp2C,MAAKojB,MAAMmB,EAAAhC,eAAeuL,wBAAyBzZ,EAAWgN,OACvDrhB,KAAKL,OAAOoW,mBAErB/E,GAAOhR,KAAKgiC,kBAAkB3tB,EAAW0hC,QAAS7N,GAAkB1jB,EAAAyB,KAAKa,KAAOtC,EAAAyB,KAAK1J,IAAM2rB,EAAc,GAAuB,GAChI2D,EAAoB7rC,KAAK4/B,YAAY1U,GAAG,GACxC,MAEF,KAAK0T,GAAAmN,MAAM0C,MACT,GAAIp6B,EAAW0hC,QAAQ1uB,MAAQ5C,EAAA6C,SAAS4G,SACa,GAA/B7Z,EAAW0hC,QAAS5nB,aACW,GAA/B9Z,EAAW0hC,QAAS5nB,YAOxC,OADAnd,EAAOhR,KAAKgiC,kBAAkB3tB,EAAW0hC,QAAS7N,GAAkB1jB,EAAAyB,KAAKa,KAAOtC,EAAAyB,KAAK1J,IAAM2rB,EAAc,GAAuB,GACxHloC,KAAK4/B,YAAYvY,MAEvB,OACA,OACA,OACA,OACA,QACEwkB,GAAoB,CACtB,SACE76B,EAAOhR,KAAKL,OAAOuR,aAAawT,EAAArb,SAASqlC,OAAQ1uC,KAAKL,OAAOwQ,UAAU,GAAIa,EAC3E,MAEF,QACE,GAAIhR,KAAK4/B,YAAYwW,YAEnB,MADAp2C,MAAKojB,MAAMmB,EAAAhC,eAAeuL,wBAAyBzZ,EAAWgN,OACvDrhB,KAAKL,OAAOoW,mBAEvB,QACE/E,EAAOhR,KAAKL,OAAOuR,aAAalR,KAAKgmB,QAAQtQ,QAAUqD,EAAOC,OAAS0L,EAAArb,SAASslC,OAASjqB,EAAArb,SAASqlC,OAAQ1uC,KAAK4/B,YAAY0C,aAAatiC,KAAKL,QAASqR,EACtJ,MAEF,QACA,OACEA,EAAOhR,KAAKL,OAAOuR,aAAawT,EAAArb,SAASslC,OAAQ3uC,KAAKL,OAAO2Q,UAAU,GAAIU,EAC3E,MAEF,SACEA,EAAOhR,KAAKL,OAAOmR,YAAY4T,EAAAre,QAAQgwC,OAAQrlC,EAC/C,MAEF,SACEA,EAAOhR,KAAKL,OAAOmR,YAAY4T,EAAAre,QAAQiwC,OAAQtlC,OAnCnDA,GAAOhR,KAAKopC,yBAA4C/0B,EAAW0hC,QAAS7N,GAAgB,GAC5FloC,KAAKwmC,iBAAiBx1B,EAAMqD,EAAWgN,MAsCzC,MAEF,KAAKud,GAAAmN,MAAMiK,UAIT,OAHApK,GAAW,EACX56B,EAAOhR,KAAKgiC,kBAAkB3tB,EAAW0hC,QAAS7N,GAAkB1jB,EAAAyB,KAAKa,KAAOtC,EAAAyB,KAAK1J,IAAM2rB,EAAc,GAAuB,GAExHloC,KAAK4/B,YAAYvY,MAEvB,OACA,OACA,OACA,OACA,QACEwkB,GAAoB,CACtB,SACE76B,EAAOhR,KAAKL,OAAOuR,aAAawT,EAAArb,SAAS25B,OAAQhyB,EAAMhR,KAAKL,OAAOwQ,UAAU,GAC7E,MAEF,QACE,GAAInQ,KAAK4/B,YAAYwW,YAEnB,MADAp2C,MAAKojB,MAAMmB,EAAAhC,eAAeuL,wBAAyBzZ,EAAWgN,OACvDrhB,KAAKL,OAAOoW,mBAGvB,QACE/E,EAAOhR,KAAKL,OAAOuR,aAAalR,KAAKgmB,QAAQtQ,QAAUqD,EAAOC,OAAS0L,EAAArb,SAASglC,OAAS3pB,EAAArb,SAAS25B,OAAQhyB,EAAMhR,KAAK4/B,YAAYqW,YAAYj2C,KAAKL,QAClJ,MAEF,QACA,OACEqR,EAAOhR,KAAKL,OAAOuR,aAAawT,EAAArb,SAASglC,OAAQr9B,EAAMhR,KAAKL,OAAO2Q,UAAU,GAC7E,MAEF,SACEU,EAAOhR,KAAKL,OAAOuR,aAAawT,EAAArb,SAASilC,OAAQt9B,EAAMhR,KAAKL,OAAO+Q,UAAU,GAC7E,MAEF,SACEM,EAAOhR,KAAKL,OAAOuR,aAAawT,EAAArb,SAASklC,OAAQv9B,EAAMhR,KAAKL,OAAOiR,UAAU,IAGjF,KAEF,KAAKguB,GAAAmN,MAAMmK,YAIT,OAHAtK,GAAW,EACX56B,EAAOhR,KAAKgiC,kBAAkB3tB,EAAW0hC,QAAS7N,GAAkB1jB,EAAAyB,KAAKa,KAAOtC,EAAAyB,KAAK1J,IAAM2rB,EAAc,GAAuB,GAExHloC,KAAK4/B,YAAYvY,MAEvB,OACA,OACA,OACA,OACA,QACEwkB,GAAoB,CAEtB,SACE76B,EAAOhR,KAAKL,OAAOuR,aAAawT,EAAArb,SAASqlC,OAAQ19B,EAAMhR,KAAKL,OAAOwQ,UAAU,GAC7E,MAEF,QACE,GAAInQ,KAAK4/B,YAAYwW,YAEnB,MADAp2C,MAAKojB,MAAMmB,EAAAhC,eAAeuL,wBAAyBzZ,EAAWgN,OACvDrhB,KAAKL,OAAOoW,mBAGvB,QACE/E,EAAOhR,KAAKL,OAAOuR,aAAalR,KAAKgmB,QAAQtQ,QAAUqD,EAAOC,OAAS0L,EAAArb,SAASslC,OAASjqB,EAAArb,SAASqlC,OAAQ19B,EAAMhR,KAAK4/B,YAAYqW,YAAYj2C,KAAKL,QAClJ,MAEF,QACA,OACEqR,EAAOhR,KAAKL,OAAOuR,aAAawT,EAAArb,SAASslC,OAAQ39B,EAAMhR,KAAKL,OAAO2Q,UAAU,GAC7E,MAEF,SACEU,EAAOhR,KAAKL,OAAOuR,aAAawT,EAAArb,SAASulC,OAAQ59B,EAAMhR,KAAKL,OAAO+Q,UAAU,GAC7E,MAEF,SACEM,EAAOhR,KAAKL,OAAOuR,aAAawT,EAAArb,SAASwlC,OAAQ79B,EAAMhR,KAAKL,OAAOiR,UAAU,IAGjF,KAEF,KAAKguB,GAAAmN,MAAMwK,YACTvlC,EAAOhR,KAAKgiC,kBAAkB3tB,EAAW0hC,QAAS7N,GAAkB1jB,EAAAyB,KAAKa,KAAOtC,EAAAyB,KAAK1J,IAAM2rB,EAAc,GACzGl3B,EAAO+sB,EAAe/sB,EAAMhR,KAAK4/B,YAAa5/B,KAAKL,QACnDK,KAAK4/B,YAAcpb,EAAAyB,KAAKU,IACxB,MAEF,KAAKiY,GAAAmN,MAAMyK,MAGT,OAFAxlC,EAAOhR,KAAKgiC,kBAAkB3tB,EAAW0hC,QAAS7N,GAAkB1jB,EAAAyB,KAAKa,KAAOtC,EAAAyB,KAAK1J,IAAM2rB,EAAehd,GAAE,GAAoB1G,EAAAyB,KAAKG,IAAM8hB,EAAgBA,GAAkB1jB,EAAAyB,KAAKa,KAAM,EAAsB,GAA0B,GAEhO9mB,KAAK4/B,YAAYvY,MAEvB,OACA,OACA,OACA,OACA,QACEwkB,GAAoB,CACtB,SACE76B,EAAOhR,KAAKL,OAAOuR,aAAawT,EAAArb,SAASgoC,OAAQrgC,EAAMhR,KAAKL,OAAOwQ,WAAW,GAC9E,MAEF,QACE,GAAInQ,KAAK4/B,YAAYwW,YAEnB,MADAp2C,MAAKojB,MAAMmB,EAAAhC,eAAeuL,wBAAyBzZ,EAAWgN,OACvDrhB,KAAKL,OAAOoW,mBAGvB,QACE/E,EAAOhR,KAAKL,OAAOuR,aAAalR,KAAKgmB,QAAQtQ,QAAUqD,EAAOC,OAAS0L,EAAArb,SAASioC,OAAS5sB,EAAArb,SAASgoC,OAAQrgC,EAAMhR,KAAK4/B,YAAY6W,eAAez2C,KAAKL,QACrJ,MAEF,QACA,OACEqR,EAAOhR,KAAKL,OAAOuR,aAAawT,EAAArb,SAASioC,OAAQtgC,EAAMhR,KAAKL,OAAO2Q,WAAW,GAAI,IAGtF,KAEF,KAAKsuB,GAAAmN,MAAM2K,OAOT,KADA12C,MAAKojB,MAAMmB,EAAAhC,eAAeuL,wBAAyBzZ,EAAWgN,OACxD,GAAIvF,OAAM,kBAElB,SAEE,KADA9b,MAAKojB,MAAMmB,EAAAhC,eAAeuL,wBAAyBzZ,EAAWgN,OACxD,GAAIvF,OAAM,2BAMpB,MAJI+vB,IAAqBpD,IACvBve,OAAOlqB,KAAK4/B,YAAY1U,GAAG,KAC3Bla,EAAO2sB,EAAqB3sB,EAAMhR,KAAK4/B,YAAa5/B,KAAKL,SAEpDisC,EACH5rC,KAAKioC,2BAA2B5zB,EAAW0hC,QAAS/kC,EAAMk3B,GAAkB1jB,EAAAyB,KAAKa,MACjF9V,GAGNyuB,EAAAj+B,UAAAglC,iBAAA,SAAiBx1B,EAAqBqQ,GACpC,GAA8B,MAA1BrhB,KAAKgmB,QAAQpK,UAAmB,CAClC,GAAI8F,GAASL,EAAMK,MACfA,GAAO2Y,eAAiB,IAC1B3Y,EAAO2Y,eAAiBr6B,KAAKL,OAAO8e,iBAAiBiD,EAAOE,iBAC9DP,EAAM+Y,aAAeppB,EAChBhR,KAAK+8B,gBAAgBvE,kBACvBx4B,KAAK+8B,gBAAgBvE,eAAiB,GAAI90B,OAAM,IAAI1B,OAAS,GAChEhC,KAAK+8B,gBAAgBvE,eAAe70B,KAAK0d,KAG/Coe,GAl2G8Blb,EAAAtB,kBAAjBvjB,GAAA+/B,WAu2Gb//B,EAAAi+B,uBAmDAj+B,EAAAq+B,iBAiCAr+B,EAAA2+B,iBL62FM,SAAU1+B,EAAQD,EAASS,GAEjC,YMliMA,SAAAsgC,GAAmC7a,GAGjC,IAAK,GAFD1jB,GAAI0jB,EAAM5jB,OACVgB,EAAM,GAAIU,OAAkBxB,GACvB5B,EAAI,EAAGA,EAAI4B,IAAK5B,EACvB0C,EAAI1C,GAAKslB,EAAMtlB,GAAGq5B,cACpB,OAAO32B,GAIT,QAAAsuB,GAA8B1L,GAC5B,GAAI1jB,GAAI0jB,EAAM5jB,MACd,KAAKE,EACH,MAAO,EAET,KAAK,GADDqf,GAAK,GAAI7d,OAAcxB,GAClB5B,EAAI,EAAGA,EAAI4B,IAAK5B,EACvBihB,EAAGjhB,GAAKslB,EAAMtlB,GAAGmhB,UACnB,OAAOF,GAAGQ,KAAK,MNohMjBhhB,OAAOC,eAAetB,EAAS,cAAgBoE,OAAO,GM98MtD,IAAA4gB,GAAAvkB,EAAA,IAOA,SAAkBw2C,GAGhBA,IAAA,WACAA,IAAA,aACAA,IAAA,aACAA,IAAA,aACAA,IAAA,iBAGAA,IAAA,WACAA,IAAA,aACAA,IAAA,aACAA,IAAA,aACAA,IAAA,iBACAA,IAAA,gBAGAA,IAAA,cACAA,IAAA,cAGAA,IAAA,iBAtBgBj3C,EAAAi3C,WAAAj3C,EAAAi3C,eA0BlB,SAAkBC,GAChBA,IAAA,eAEAA,IAAA,mBAEAA,IAAA,uBAEAA,IAAA,qBAEAA,IAAA,iBAEAA,IAAA,gBAEAA,IAAA,kBAEAA,IAAA,gBAEAA,IAAA,mBAEAA,IAAA,2BAEAA,IAAA,0BArBgBl3C,EAAAk3C,YAAAl3C,EAAAk3C,cAyBlB,IAAA3wB,GAAA,WAoBE,QAAAA,GAAYoB,EAAgBmN,EAAkB0J,GAL9Cl+B,KAAA62C,aAA4B,KAM1B72C,KAAKqnB,KAAOA,EACZrnB,KAAKw0B,MAAQA,EACbx0B,KAAKk+B,KAAOA,EACZl+B,KAAK+7B,SAAgB+a,KAAe5Y,EAAO,GAC3Cl+B,KAAK8yB,UAAY,KACjB9yB,KAAK+2C,gBAAkB/2C,KAmV3B,MA/UEimB,GAAAzkB,UAAA4mC,yBAAA,SAAyBzV,GACvB,MAAOA,GAAWuL,KAAOl+B,KAAKk+B,MAIhCjY,EAAAzkB,UAAA8mC,wBAAA,SAAwB3V,GACtB,OAAQ,IAAOA,EAAWuL,KAAOl+B,KAAKk+B,MAIxCjY,EAAAzkB,UAAA0pB,GAAA,SAAGsJ,GACD,OAAQx0B,KAAKw0B,MAAQA,IAAUA,GAIjCzzB,OAAAC,eAAIilB,EAAAzkB,UAAA,WNm7MEL,IMn7MN,WAAsB,MAAyB,OAAlBnB,KAAK8yB,WNo7M5B5xB,YAAY,EACZD,cAAc,IMn7MpBF,OAAAC,eAAIilB,EAAAzkB,UAAA,cNu7MEL,IMv7MN,WAAyB,MAA4B,OAArBnB,KAAK2X,cNw7M/BzW,YAAY,EACZD,cAAc,IMv7MpBF,OAAAC,eAAIilB,EAAAzkB,UAAA,eN27MEL,IM37MN,WAA0B,MAAyB,OAAlBnB,KAAK8yB,WAA0C,MAArB9yB,KAAK2X,cN47M1DzW,YAAY,EACZD,cAAc,IM17MpBglB,EAAAzkB,UAAA66B,QAAA,SAAQvJ,GACN5I,OAAgB,GAATlqB,KAAKqnB,KACZ,IAAIrkB,GAAM,GAAIijB,GAAKjmB,KAAKqnB,MAAmB,IAAbrnB,KAAKw0B,MAAwB,IAAwBx0B,KAAKk+B,KAExF,OADAl7B,GAAI8vB,UAAYA,EACT9vB,GAITijB,EAAAzkB,UAAAw1C,WAAA,SAAWr/B,GACTuS,OAAgB,GAATlqB,KAAKqnB,OAA2BrnB,KAAKo2C,YAC5C,IAAIpzC,GAAM,GAAIijB,GAAKjmB,KAAKqnB,MAAmB,IAAbrnB,KAAKw0B,MAAwB,IAAwBx0B,KAAKk+B,KAExF,OADAl7B,GAAI2U,aAAeA,EACZ3U,GAITijB,EAAAzkB,UAAAy1C,WAAA,WAQE,MAPA/sB,QAAgB,GAATlqB,KAAKqnB,MACPrnB,KAAK62C,eACR3sB,QAAQlqB,KAAKkrB,GAAE,MAAwBlrB,KAAKo2C,aAC5Cp2C,KAAK62C,aAAe,GAAI5wB,GAAKjmB,KAAKqnB,KAAgB,IAAVrnB,KAAKw0B,MAA4Bx0B,KAAKk+B,MAC9El+B,KAAK62C,aAAa/jB,UAAY9yB,KAAK8yB,UACnC9yB,KAAK62C,aAAal/B,aAAe3X,KAAK2X,cAEjC3X,KAAK62C,cAId5wB,EAAAzkB,UAAAigB,SAAA,SAASy1B,GACP,WADO,KAAAA,OAAA,GACCl3C,KAAKqnB,MACX,OAAkB,MAAO,IACzB,QAAmB,MAAO,KAC1B,QAAmB,MAAO,KAC1B,QAAmB,MAAO,KAC1B,QAAqB,MAAO,OAC5B,QAAkB,MAAO,IACzB,QAAmB,MAAO,KAC1B,QAAmB,MAAO,KAC1B,QAAmB,MAAO,KAC1B,QACE,MAAI6vB,GAAiB,QACdl3C,KAAK8yB,UAAY9yB,KAAK8yB,UAAUrR,WAChCzhB,KAAK2X,aAAe3X,KAAK2X,aAAa2iB,eACtC,OACT,SAAoB,MAAO,MAC3B,SAAmB,MAAO,KAC1B,SAAmB,MAAO,KAC1B,SAAoB,MAAO,MAC3B,SAAwB,MAAfpQ,SAAO,GAAe,KAOnCjE,EAAAzkB,UAAAm4B,aAAA,WACE,OAAQ35B,KAAKqnB,MAEX,QACE,MAAO3C,GAAA3gB,WAAW+Y,GAEpB,QACA,OACE,MAAO4H,GAAA3gB,WAAWiZ,GAEpB,QACA,OACE,MAAoB,KAAbhd,KAAKk+B,KAAaxZ,EAAA3gB,WAAWiZ,IAAM0H,EAAA3gB,WAAW+Y,GAEvD,SACE,MAAO4H,GAAA3gB,WAAWoZ,GAEpB,SACE,MAAOuH,GAAA3gB,WAAWsZ,GAEpB,SACE,MAAOqH,GAAA3gB,WAAWy8B,OAKxBva,EAAAzkB,UAAA8gC,aAAA,SAAa3iC,GACX,OAAQK,KAAKqnB,MAEX,QACE6C,QAAO,EAET,SACE,MAAOvqB,GAAOwQ,UAAU,EAE1B,QACA,OACE,GAAiB,IAAbnQ,KAAKk+B,KACP,MAAOv+B,GAAOwQ,UAAU,EAG5B,QACA,OACE,MAAOxQ,GAAO2Q,UAAU,EAE1B,SACE,MAAO3Q,GAAO+Q,UAAU,EAE1B,SACE,MAAO/Q,GAAOiR,UAAU,KAK9BqV,EAAAzkB,UAAAy0C,YAAA,SAAYt2C,GACV,OAAQK,KAAKqnB,MAEX,QACE6C,QAAO,EAET,SACE,MAAOvqB,GAAOwQ,UAAU,EAE1B,QACA,OACE,GAAiB,IAAbnQ,KAAKk+B,KACP,MAAOv+B,GAAOwQ,UAAU,EAG5B,QACA,OACE,MAAOxQ,GAAO2Q,UAAU,EAE1B,SACE,MAAO3Q,GAAO+Q,UAAU,EAE1B,SACE,MAAO/Q,GAAOiR,UAAU,KAK9BqV,EAAAzkB,UAAAi1C,eAAA,SAAe92C,GACb,OAAQK,KAAKqnB,MAEX,QACE6C,QAAO,EAET,SACE,MAAOvqB,GAAOwQ,WAAW,EAE3B,QACA,OACE,GAAiB,IAAbnQ,KAAKk+B,KACP,MAAOv+B,GAAOwQ,WAAW,EAG7B,QACA,OACE,MAAOxQ,GAAO2Q,WAAW,GAAI,EAE/B,SACE,MAAO3Q,GAAO+Q,WAAW,EAE3B,SACE,MAAO/Q,GAAOiR,WAAW,KAK/BqV,EAAAzkB,UAAAwiC,kBAAA,WACE,OAAQhkC,KAAKqnB,MAEX,QACE,MAAO,GAET,QACA,OACE,MAAO,GAET,QACA,OACE,MAAoB,KAAbrnB,KAAKk+B,KAAa,IAAM,GAEjC,SACE,MAAO,GAET,SACE,MAAO,GAET,SACE,MAAO,MAOGjY,EAAAC,GAAY,GAAID,GAAI,EAClC,IAGmB,GAILA,EAAAE,IAAY,GAAIF,GAAI,EAClC,IAGkB,IAIJA,EAAA1J,IAAY,GAAI0J,GAAI,EAClC,IAEkB,IAIJA,EAAAG,IAAY,GAAIH,GAAI,EAClC,IAGkB,IAIJA,EAAAsZ,QAAgB,GAAItZ,GAAI,EACtC,IAGkB,IAIJA,EAAAqZ,QAAgB,GAAIrZ,GAAI,EACtC,IAIkB,IAIJA,EAAAK,GAAW,GAAIL,GAAI,EACjC,IAGmB,GAILA,EAAAM,IAAY,GAAIN,GAAI,EAClC,IAGkB,IAIJA,EAAAO,IAAY,GAAIP,GAAI,EAClC,IAEkB,IAIJA,EAAAQ,IAAY,GAAIR,GAAI,EAClC,IAGkB,IAIJA,EAAAoZ,QAAgB,GAAIpZ,GAAI,EACtC,IAGkB,IAIJA,EAAAmZ,QAAgB,GAAInZ,GAAI,EACtC,IAIkB,IAIJA,EAAAU,KAAa,GAAIV,GAAI,GACnC,IAGmB,GAILA,EAAAW,IAAY,GAAIX,GAAI,GAClC,IAEkB,IAIJA,EAAAY,IAAY,GAAIZ,GAAI,GAClC,IAGkB,IAIJA,EAAAa,KAAa,GAAIb,GAAI,KAAgC,GACvEA,IA7WavmB,GAAAumB,OAgXbvmB,EAAA+gC,qBASA/gC,EAAA4xB,iBN03MM,SAAU3xB,EAAQD,EAASS,GAEjC,YO1sKA,SAAAg3C,GACEzqB,GAEA0qB,GAAoB1qB,EAItB,QAAA2qB,KACE,GAAIr0C,EAOJ,OANyB,OAArBo0C,IACFp0C,EAAMo0C,GACNA,GAAoB,MAEpBp0C,EAAM,GAAIU,OAAM,GAClBV,EAAIhB,OAAS,EACNgB,EAIT,QAAAs0C,GACEC,EACA7qB,GAKA,MAHiB,OAAbA,IACFA,EAAY2qB,KACd3qB,EAAU/oB,KAAK4zC,GACR7qB,EAIT,QAAA8qB,GACEnwB,EACAqF,GAEA,GAAIA,EACF,IAAK,GAAIpsB,GAAI,EAAG4B,EAAIwqB,EAAU1qB,OAAQ1B,EAAI4B,IAAK5B,EAC7C,GAAIosB,EAAUpsB,GAAGs0B,cAAgBvN,EAC/B,MAAOqF,GAAUpsB,EACvB,OAAO,MAIT,QAAAisB,GACElF,EACAqF,GAEA,MAAuC,OAAhC8qB,EAAYnwB,EAAMqF,GAI3B,QAAA+qB,GACE72C,EACAkqB,GAEA,GAAIA,EACF,IAAK,GAAIxqB,GAAI,EAAG4B,EAAI4oB,EAAW9oB,OAAQ1B,EAAI4B,IAAK5B,EAAG,CACjD,GAAIstB,GAAY9C,EAAWxqB,GACvB+T,EAAauZ,EAAUhtB,IAC3B,IAAIyT,EAAWgT,MAAQC,EAAS4M,YAAqC7f,EAAYsN,MAAQ/gB,EACvF,MAAOgtB,GAEb,MAAO,MAIT,QAAA/C,GACEjqB,EACAkqB,GAEA,MAA8C,OAAvC2sB,EAAkB72C,EAAMkqB,GAIjC,QAAA4sB,GACEzuB,EACA0uB,OAAA,KAAAA,OAAA,EAEA,IAAI/2C,GAAOqoB,EAAYroB,KAAK+gB,KACxBuH,EAASD,EAAYC,MACzB,OAAKA,KAEDD,EAAY5B,MAAQC,EAASswB,qBAAuB1uB,EAAO7B,MAAQC,EAASiB,WACxEW,EAASA,EAAOA,SAEpBA,EAAO7B,MAAQC,EAASC,iBACnBmwB,EAAqCxuB,EAAQyuB,IAClDprB,EAAYC,EAAaS,OAAQhE,EAAYyD,WAAaiS,EAAA3Z,iBAAmB2Z,EAAA5Z,oBAC3EnkB,EACFsoB,EAAO7B,MAAQC,EAASa,sBAAwBe,EAAO7B,MAAQC,EAASG,gBACnEiwB,EAAyCxuB,EAAQyuB,GAAYhZ,EAAA3Z,iBAAmBpkB,EACrF+2C,EACK/2C,EACFqoB,EAAY5H,MAAMK,OAAOkO,aAAe+O,EAAAha,eAAiB/jB,EAZvDA,EAgBX,QAAAi3C,GACE1uB,GAIA,MAFIA,GAAKmH,SAAS,SAChBnH,EAAOA,EAAK/G,UAAU,EAAG+G,EAAKnnB,OAAS,IAClCmnB,EAGT,QAAA2uB,GACEC,EACA7uB,GAEA,IAAK,GAAI5oB,GAAI,EAAG4B,EAAI61C,EAAM/1C,OAAQ1B,EAAI4B,IAAK5B,EACzCy3C,EAAMz3C,GAAG4oB,OAASA,EAGtB,QAAA8uB,GACED,EACA7uB,GAEA,IAAK,GAAI5oB,GAAI,EAAG4B,EAAI61C,EAAM/1C,OAAQ1B,EAAI4B,IAAK5B,EAAG,CAC5C,GAAIwwB,GAAOinB,EAAMz3C,EACbwwB,KACFA,EAAK5H,OAASA,IPslKpB,GAAI3F,GAAavjB,MAAQA,KAAKujB,WAAc,WACxC,GAAIC,GAAgBziB,OAAO0iB,iBACpBC,uBAA2BhgB,QAAS,SAAU/C,EAAGgjB,GAAKhjB,EAAE+iB,UAAYC,IACvE,SAAUhjB,EAAGgjB,GAAK,IAAK,GAAIjiB,KAAKiiB,GAAOA,EAAEliB,eAAeC,KAAIf,EAAEe,GAAKiiB,EAAEjiB,IACzE,OAAO,UAAUf,EAAGgjB,GAEhB,QAASC,KAAO5jB,KAAK6jB,YAAcljB,EADnC6iB,EAAc7iB,EAAGgjB,GAEjBhjB,EAAEa,UAAkB,OAANmiB,EAAa5iB,OAAOgO,OAAO4U,IAAMC,EAAGpiB,UAAYmiB,EAAEniB,UAAW,GAAIoiB,OAGvF7iB,QAAOC,eAAetB,EAAS,cAAgBoE,OAAO,GOn0NtD,IAAA66B,GAAAx+B,EAAA,GAMAy+B,EAAAz+B,EAAA,EAWST,GAAAqsC,MAVPnN,EAAAmN,MAUcrsC,EAAAosB,MARd8S,EAAA9S,KAGF,IAQYxE,GARZ2wB,EAAA93C,EAAA,KAQA,SAAYmnB,GAEVA,IAAA,mBAGAA,IAAA,eACAA,IAAA,iCAGAA,IAAA,2BACAA,IAAA,yBACAA,IAAA,mBACAA,IAAA,eACAA,IAAA,iBACAA,IAAA,iCACAA,IAAA,iBACAA,IAAA,sBACAA,IAAA,cACAA,IAAA,gBACAA,IAAA,kCACAA,IAAA,oCACAA,IAAA,sBACAA,IAAA,kBACAA,IAAA,gBACAA,IAAA,gBACAA,IAAA,8BACAA,IAAA,gCACAA,IAAA,8BAGAA,IAAA,kBACAA,IAAA,kBACAA,IAAA,wBACAA,IAAA,YACAA,IAAA,kBACAA,IAAA,oBACAA,IAAA,gCACAA,IAAA,4BACAA,IAAA,cACAA,IAAA,YACAA,IAAA,oBACAA,IAAA,oBACAA,IAAA,oBACAA,IAAA,kBACAA,IAAA,cACAA,IAAA,wBACAA,IAAA,kBAGAA,IAAA,wCACAA,IAAA,sCACAA,IAAA,gDACAA,IAAA,wCACAA,IAAA,8CACAA,IAAA,0CACAA,IAAA,gDACAA,IAAA,0CACAA,IAAA,gDACAA,IAAA,sCACAA,IAAA,8CAGAA,IAAA,0BACAA,IAAA,gCACAA,IAAA,wBACAA,IAAA,0BACAA,IAAA,6BAlEUA,EAAA5nB,EAAA4nB,WAAA5nB,EAAA4nB,aAsEZ,IAAA4wB,GAAA,mBAAAA,KAOEl4C,KAAAkpB,OAAsB,KA0xBxB,MAtxBSgvB,GAAAC,WAAP,SACEtoB,EACAsB,EACAinB,EACA/2B,GAEA,GAAI1P,GAAO,GAAI0mC,EAKf,OAJA1mC,GAAK0P,MAAQA,EACb1P,EAAK/Q,KAAOivB,EACZle,EAAKwf,cAAgBA,EACrBxf,EAAKymC,WAAaA,EACXzmC,GAKFumC,EAAAI,2BAAP,SACE13C,EACAygB,GAEA,GAAIrQ,GAAO,GAAIunC,EAGf,OAFAvnC,GAAKqQ,MAAQA,EACbrQ,EAAK2Q,KAAO/gB,EACLoQ,GAGFknC,EAAAM,6BAAP,SACE7yB,EACAtE,GAEA,GAAIrQ,GAAO,GAAIynC,EAGf,OAFAznC,GAAKqQ,MAAQA,EACbrQ,EAAK6iC,mBAAqBluB,EAAUqyB,EAAaryB,EAAU3U,GACpDA,GAGFknC,EAAAQ,0BAAP,SACEC,EACAtkC,EACAsf,EACAtS,GAEA,GAAIrQ,GAAO,GAAI4nC,EAKf,OAJA5nC,GAAKqQ,MAAQA,EACbrQ,EAAK2nC,cAAgBA,EACrB3nC,EAAKqD,WAAaA,EAAYA,EAAW6U,OAASlY,EAClDA,EAAK2iB,OAASA,EAAQA,EAAOzK,OAASlY,EAC/BA,GAGFknC,EAAAW,uBAAP,SACE/M,EACA36B,EACAC,EACAiQ,GAEA,GAAIrQ,GAAO,GAAI8nC,EAKf,OAJA9nC,GAAKqQ,MAAQA,EACbrQ,EAAK86B,SAAWA,EAChB96B,EAAKG,KAAOA,EAAMA,EAAK+X,OAASlY,EAChCA,EAAKI,MAAQA,EAAOA,EAAM8X,OAASlY,EAC5BA,GAGFknC,EAAAa,qBAAP,SACE1kC,EACA2kC,EACA9F,EACA7xB,GAEA,GAAIrQ,GAAO,GAAIioC,EAKf,OAJAjoC,GAAKqQ,MAAQA,EACbrQ,EAAKqD,WAAaA,EAAYA,EAAW6U,OAASlY,EAClDA,EAAKmgB,cAAgB6nB,EAAcA,GAAUlB,EAAUkB,EAAUhoC,GACjEA,EAAKgd,UAAYklB,EAAM4E,EAAU5E,EAAMliC,GAChCA,GAGFknC,EAAAgB,sBAAP,SACE3F,EACAlyB,GAEA,GAAIrQ,GAAO,GAAImoC,EAGf,OAFAnoC,GAAKqQ,MAAQA,EACbrQ,EAAKuiC,YAAcA,EAAauE,EAAUvE,EAAaviC,GAChDA,GAGFknC,EAAAkB,4BAAP,SACE/3B,GAEA,GAAIrQ,GAAO,GAAIqoC,EAEf,OADAroC,GAAKqQ,MAAQA,EACNrQ,GAGFknC,EAAAoB,8BAAP,SACEjlC,EACAoU,EACApH,GAEA,GAAIrQ,GAAO,GAAIuoC,EAIf,OAHAvoC,GAAKqQ,MAAQA,EACbrQ,EAAKqD,WAAaA,EAAYA,EAAW6U,OAASlY,EAClDA,EAAK0hC,kBAAoBjqB,EAASA,EAAQS,OAASlY,EAC5CA,GAGFknC,EAAAsB,sBAAP,SACEn4B,GAEA,GAAIrQ,GAAO,GAAIyoC,EAEf,OADAzoC,GAAKqQ,MAAQA,EACNrQ,GAGFknC,EAAAwB,6BAAP,SACE51C,EACAud,GAEA,GAAIrQ,GAAO,GAAI2oC,EAGf,OAFA3oC,GAAKqQ,MAAQA,EACbrQ,EAAKlN,MAAQA,EACNkN,GAGFknC,EAAA0B,+BAAP,SACE91C,EACAud,GAEA,GAAIrQ,GAAO,GAAI6oC,EAGf,OAFA7oC,GAAKqQ,MAAQA,EACbrQ,EAAKlN,MAAQA,EACNkN,GAGFknC,EAAA4B,oBAAP,SACEzlC,EACA2kC,EACA9F,EACA7xB,GAEA,GAAIrQ,GAAO,GAAI+oC,EAKf,OAJA/oC,GAAKqQ,MAAQA,EACbrQ,EAAKqD,WAAaA,EAAYA,EAAW6U,OAASlY,EAClDA,EAAKmgB,cAAgB6nB,EAAcA,GAAUlB,EAAUkB,EAAUhoC,GACjEA,EAAKgd,UAAYklB,EAAM4E,EAAU5E,EAAMliC,GAChCA,GAGFknC,EAAA8B,qBAAP,SACE34B,GAEA,GAAIrQ,GAAO,GAAIipC,EAEf,OADAjpC,GAAKqQ,MAAQA,EACNrQ,GAGFknC,EAAAgC,8BAAP,SACE7lC,EACAgN,GAEA,GAAIrQ,GAAO,GAAImpC,EAGf,OAFAnpC,GAAKqQ,MAAQA,EACbrQ,EAAKqD,WAAaA,EAAYA,EAAW6U,OAASlY,EAC3CA,GAGFknC,EAAAkC,+BAAP,SACE/lC,EACA9S,EACA8f,GAEA,GAAIrQ,GAAO,GAAIqpC,EAIf,OAHArpC,GAAKqQ,MAAQA,EACbrQ,EAAKqD,WAAaA,EAAYA,EAAW6U,OAASlY,EAClDA,EAAKzP,SAAWA,EAAUA,EAAS2nB,OAASlY,EACrCA,GAGFknC,EAAAoC,8BAAP,SACEC,EACA/lB,EACAnT,GAEA,GAAIrQ,GAAO,GAAIwpC,EAIf,OAHAxpC,GAAKqQ,MAAQA,EACbrQ,EAAKupC,QAAUA,EACfvpC,EAAKypC,aAAejmB,EACbxjB,GAGFknC,EAAAwC,wBAAP,SACExmC,EACAyhC,EACAC,EACAv0B,GAEA,GAAIrQ,GAAO,GAAI2pC,EAKf,OAJA3pC,GAAKqQ,MAAQA,EACbrQ,EAAKkD,UAAYA,EAAWA,EAAUgV,OAASlY,EAC/CA,EAAK2kC,OAASA,EAAQA,EAAOzsB,OAASlY,EACtCA,EAAK4kC,OAASA,EAAQA,EAAO1sB,OAASlY,EAC/BA,GAGFknC,EAAA0C,8BAAP,SACE92C,EACAud,GAEA,GAAIrQ,GAAO,GAAI6pC,EAGf,OAFA7pC,GAAKqQ,MAAQA,EACbrQ,EAAKlN,MAAQA,EACNkN,GAGFknC,EAAA4C,sBAAP,SACEz5B,GAEA,GAAIrQ,GAAO,GAAI+pC,EAEf,OADA/pC,GAAKqQ,MAAQA,EACNrQ,GAGFknC,EAAA8C,qBAAP,SACE35B,GAEA,GAAIrQ,GAAO,GAAIiqC,EAEf,OADAjqC,GAAKqQ,MAAQA,EACNrQ,GAGFknC,EAAAgD,qBAAP,SACE75B,GAEA,GAAIrQ,GAAO,GAAImqC,EAEf,OADAnqC,GAAKqQ,MAAQA,EACNrQ,GAGFknC,EAAAkD,6BAAP,SACEtP,EACAiK,EACA10B,GAEA,GAAIrQ,GAAO,GAAIqqC,EAIf,OAHArqC,GAAKqQ,MAAQA,EACbrQ,EAAK86B,SAAWA,EAChB96B,EAAK+kC,QAAUA,EAASA,EAAQ7sB,OAASlY,EAClCA,GAGFknC,EAAAoD,4BAAP,SACExP,EACAiK,EACA10B,GAEA,GAAIrQ,GAAO,GAAIuqC,EAIf,OAHAvqC,GAAKqQ,MAAQA,EACbrQ,EAAK86B,SAAWA,EAChB96B,EAAK+kC,QAAUA,EAASA,EAAQ7sB,OAASlY,EAClCA,GAKFknC,EAAAsD,qBAAP,SACEt0B,EACA7F,GAEA,GAAIolB,GAAO,GAAIgV,GAGf,OAFAhV,GAAKplB,MAAQA,EACbolB,EAAKvf,WAAaA,EAAY4wB,EAAU5wB,EAAYuf,GAC7CA,GAGFyR,EAAAwD,qBAAP,SACE7nC,EACAwN,GAEA,GAAIolB,GAAO,GAAIkV,GAGf,OAFAlV,GAAKplB,MAAQA,EACbolB,EAAK5yB,MAAQA,EAAWA,IAAOA,EAAMqV,OAASud,GACvCA,GAGFyR,EAAA0D,uBAAP,SACE/rB,EACA4B,EACArH,EACAwB,EACAG,EACAW,EACA5B,EACAzJ,GAEA,GAAIolB,GAAO,GAAIoV,GASf,OARApV,GAAKplB,MAAQA,EACbolB,EAAK7lC,KAAOivB,EAAYA,EAAW3G,OAASud,EAC5CA,EAAKhV,eAAiBA,EAAgBqmB,EAAUrmB,EAAgBgV,GAChEA,EAAKrc,YAAcA,EAAiBA,IAAaA,EAAYlB,OAASud,GACtEA,EAAK7a,gBAAkBA,EAAiBksB,EAAUlsB,EAAiB6a,GACnEA,EAAK1a,QAAUA,EAAS+rB,EAAU/rB,EAAS0a,GAC3CA,EAAK/Z,UAAYA,EAAeA,GAAWorB,EAAUprB,EAAW+Z,GAChEA,EAAK3b,WAAaA,EAAgBA,GAAYgtB,EAAUhtB,EAAY2b,GAC7DA,GAGFyR,EAAA4D,wBAAP,SACEjoC,EACAwN,GAEA,GAAIolB,GAAO,GAAIsV,GAGf,OAFAtV,GAAKplB,MAAQA,EACbolB,EAAK5yB,MAAQA,EAAWA,IAAOA,EAAMqV,OAASud,GACvCA,GAGFyR,EAAA8D,gBAAP,SACE3nC,EACA6+B,EACA7xB,GAEA,GAAIolB,GAAO,GAAIwV,GAIf,IAHAxV,EAAKplB,MAAQA,EACbolB,EAAK7lC,KAAOyT,EAAYA,EAAW6U,OAASud,EAC5CA,EAAKzY,UAAYklB,EAAUA,GAAM4E,EAAU5E,EAAMzM,GAC7CpyB,EAAWgT,MAAQC,EAAS4M,WAC9B,OAA+B7f,EAAYsN,MACzC,IAAK,SAAU8kB,EAAK5Y,cAAa,CAAyB,MAC1D,KAAK,WAAY4Y,EAAK5Y,cAAa,CAA2B,MAC9D,KAAK,YAAa4Y,EAAK5Y,cAAa,CAA4B,MAChE,KAAK,SAAU4Y,EAAK5Y,cAAa,CAAyB,MAC1D,SAAS4Y,EAAK5Y,cAAa,MAG7B4Y,GAAK5Y,cAAa,CACpB,OAAO4Y,IAGFyR,EAAAgE,kBAAP,SACE90B,EACAlT,EACAmN,GAEA,GAAIolB,GAAO,GAAI0V,GAIf,OAHA1V,GAAKplB,MAAQA,EACbolB,EAAKrf,UAAYA,EAAWA,EAAU8B,OAASud,EAC/CA,EAAKvyB,UAAYA,EAAWA,EAAUgV,OAASud,EACxCA,GAGFyR,EAAAkE,qBAAP,SACE/6B,GAEA,GAAIolB,GAAO,GAAI4V,GAEf,OADA5V,GAAKplB,MAAQA,EACNolB,GAGFyR,EAAAoE,sBAAP,SACE17C,EACAmrB,EACAW,EACA5B,EACAzJ,GAEA,GAAIolB,GAAO,GAAI8V,GAMf,OALA9V,GAAKplB,MAAQA,EACbolB,EAAK7lC,KAAOA,EAAMA,EAAKsoB,OAASud,EAChCA,EAAKjX,OAASzD,EAAS+rB,EAAU/rB,EAAS0a,GAC1CA,EAAK/Z,UAAYA,EAAeA,GAAWorB,EAAUprB,EAAW+Z,GAChEA,EAAK3b,WAAaA,EAAgBA,GAAYgtB,EAAUhtB,EAAY2b,GAC7DA,GAGFyR,EAAAsE,2BAAP,SACE57C,EACAkD,EACAud,GAEA,GAAIolB,GAAO,GAAIgW,GAIf,OAHAhW,GAAKplB,MAAQA,EACbolB,EAAK7lC,KAAOA,EAAMA,EAAKsoB,OAASud,EAChCA,EAAK3iC,MAAQA,EAAWA,IAAOA,EAAMolB,OAASud,GACvCA,GAGFyR,EAAAwE,sBAAP,SACE3wB,EACA5C,EACAuD,EACArL,GAEA,GAAIolB,GAAO,GAAIkW,GAIf,IAHAlW,EAAKplB,MAAQA,EACbolB,EAAK1a,QAAUA,EAAS+rB,EAAU/rB,EAAS0a,GAC3CA,EAAKtd,KAAOA,EACRA,EAAM,CACR,GAAIvH,GAAiBq2B,EAAA2E,UAAczzB,EAAKrlB,MACpCqlB,GAAKrlB,MAAM+4C,WAAW,KACxBpW,EAAK7kB,eAAiBq2B,EAAAlrB,QACpBnL,EACAP,EAAMK,OAAOE,gBAGf6kB,EAAK7kB,eAAiBA,EACxB6kB,EAAK7W,aAAeioB,EAAmBpR,EAAK7kB,oBAE5C6kB,GAAK7kB,eAAiB,KACtB6kB,EAAK7W,aAAe,IAGtB,OADA6W,GAAK/Z,UAAYA,EAAeA,GAAWorB,EAAUprB,EAAW+Z,GACzDA,GAGFyR,EAAA4E,4BAAP,SACEl8C,EACAgW,EACAyK,GAEA,GAAIolB,GAAO,GAAIsW,GAIf,OAHAtW,GAAKplB,MAAQA,EACbolB,EAAK7lC,KAAOA,EAAMA,EAAKsoB,OAASud,EAChCA,EAAK7vB,aAAeA,EAAcA,EAAasS,OAASud,EACjDA,GAGFyR,EAAA8E,mBAAP,SACEp8C,EACAgW,EACAyK,GAEA,GAAI47B,GAAO,GAAIC,GAQf,OAPAD,GAAK57B,MAAQA,EACb47B,EAAKr8C,KAAOA,EAAMA,EAAKsoB,OAAS+zB,EAC3BrmC,EAGHA,EAAasS,OAAS+zB,EAFtBrmC,EAAehW,EAGjBq8C,EAAKrmC,aAAeA,EACbqmC,GAGF/E,EAAAiF,0BAAP,SACE9oC,GAEA,GAAIoyB,GAAO,GAAI2W,GAGf,OAFA3W,GAAKplB,MAAQhN,EAAWgN,MACxBolB,EAAKpyB,WAAaA,EAAYA,EAAW6U,OAASud,EAC3CA,GAGFyR,EAAAmF,kBAAP,SACEnpC,EACAS,EACAC,EACAyM,GAEA,GAAIolB,GAAO,GAAI6W,GAKf,OAJA7W,GAAKplB,MAAQA,EACbolB,EAAKvyB,UAAYA,EAAWA,EAAUgV,OAASud,EAC/CA,EAAK9xB,OAASA,EAAQA,EAAOuU,OAASud,EACtCA,EAAK7xB,QAAUA,EAAaA,IAASA,EAAQsU,OAASud,GAC/CA,GAGFyR,EAAAqF,sBAAP,SACEC,EACAr0B,EACA9H,GAEA,GAAIolB,GAAO,GAAIgX,GACfhX,GAAKplB,MAAQA,EACbolB,EAAKvW,aAAestB,EAAWA,GAAO1F,EAAU0F,EAAO/W,GACvDA,EAAKrW,cAAgB,KACrBqW,EAAKtd,KAAOA,CACZ,IAAIvH,GAAiBq2B,EAAA2E,UAAczzB,EAAKrlB,MASxC,OARIqlB,GAAKrlB,MAAM+4C,WAAW,KACxBpW,EAAK7kB,eAAiBq2B,EAAAlrB,QACpBnL,EACAP,EAAMK,OAAOE,gBAGf6kB,EAAK7kB,eAAiBA,EACxB6kB,EAAK7W,aAAeioB,EAAmBpR,EAAK7kB,gBACrC6kB,GAGFyR,EAAAwF,kCAAP,SACE7tB,EACA1G,EACA9H,GAEA,GAAIolB,GAAO,GAAIgX,GAUf,OATAhX,GAAKplB,MAAQA,EACbolB,EAAKvW,aAAe,KACpBuW,EAAKrW,cAAgBP,EACrB4W,EAAKtd,KAAOA,EACZsd,EAAK7kB,eAAiBq2B,EAAAlrB,QACpBkrB,EAAA2E,UAAczzB,EAAKrlB,OACnBud,EAAMK,OAAOE,gBAEf6kB,EAAK7W,aAAeioB,EAAmBpR,EAAK7kB,gBACrC6kB,GAGFyR,EAAAyF,wBAAP,SACE/mC,EACAhW,EACAygB,GAEA,GAAI47B,GAAO,GAAIW,GAQf,OAPAX,GAAK57B,MAAQA,EACb47B,EAAKrmC,aAAeA,EAAcA,EAAasS,OAAS+zB,EACnDr8C,EAGHA,EAAKsoB,OAAS+zB,EAFdr8C,EAAOgW,EAGTqmC,EAAKr8C,KAAOA,EACLq8C,GAGF/E,EAAA2F,2BAAP,SACEj9C,EACAwpB,EACA2B,EACAW,EACArL,GAEA,GAAIolB,GAAO,GAAIqX,GAMf,OALArX,GAAKplB,MAAQA,EACbolB,EAAK7lC,KAAOA,EAAMA,EAAKsoB,OAASud,EAChCA,EAAKrc,YAAcA,EAAiBA,IAAaA,EAAYlB,OAASud,GACtEA,EAAK1a,QAAUA,EAAS+rB,EAAU/rB,EAAS0a,GAC3CA,EAAK/Z,UAAYA,EAAeA,GAAWorB,EAAUprB,EAAW+Z,GACzDA,GAGFyR,EAAA6F,uBAAP,SACEn9C,EACA+Q,EACAwE,EACAuW,EACA5B,EACAzJ,GAEA,GAAIolB,GAAO,GAAIuX,GAOf,OANAvX,GAAKplB,MAAQA,EACbolB,EAAK7lC,KAAOA,EAAMA,EAAKsoB,OAASud,EAChCA,EAAK90B,KAAOA,EAAUA,IAAMA,EAAKuX,OAASud,GAC1CA,EAAKtwB,YAAcA,EAAiBA,IAAaA,EAAY+S,OAASud,GACtEA,EAAK/Z,UAAYA,EAAeA,GAAWorB,EAAUprB,EAAW+Z,GAChEA,EAAK3b,WAAaA,EAAgBA,GAAYgtB,EAAUhtB,EAAY2b,GAC7DA,GAGFyR,EAAA+F,mBAAP,SACE9nC,EACAjC,EACA6yB,EACA3f,EACA/F,GAEA,GAAIolB,GAAO,GAAIyX,GAMf,OALAzX,GAAKplB,MAAQA,EACbolB,EAAKtwB,YAAcA,EAAiBA,IAAaA,EAAY+S,OAASud,GACtEA,EAAKvyB,UAAYA,EAAeA,IAAWA,EAAUgV,OAASud,GAC9DA,EAAKM,YAAcA,EAAiBA,IAAaA,EAAY7d,OAASud,GACtEA,EAAKrf,UAAYA,EAAWA,EAAU8B,OAASud,EACxCA,GAGFyR,EAAAiG,oBAAP,SACEv9C,EACAwpB,EACA/I,GAEA,GAAI47B,GAAO,GAAImB,EAIf,OAHAnB,GAAK57B,MAAQA,EACb47B,EAAKr8C,KAAOA,EAAMA,EAAKsoB,OAAS+zB,EAChCA,EAAK7yB,YAAcA,EAAiBA,IAAaA,EAAYlB,OAAS+zB,GAC/DA,GAGF/E,EAAAmG,gBAAP,SACEz9C,EACA+Q,EACAwE,EACAkR,EACAhG,GAEA,GAAI47B,GAAO,GAAI5mB,GAMf,OALA4mB,GAAK57B,MAAQA,EACb47B,EAAKr8C,KAAOA,EAAMA,EAAKsoB,OAAS+zB,EAChCA,EAAKtrC,KAAOA,EAAUA,IAAMA,EAAKuX,OAAS+zB,GAC1CA,EAAK9mC,YAAcA,EAAiBA,IAAaA,EAAY+S,OAAS+zB,GACtEA,EAAKqB,cAAgBj3B,EACd41B,GAGF/E,EAAAqG,0BAAP,SACE39C,EACA6wB,EACAgG,EACA9hB,EACAuR,EACAwF,EACA5B,EACAzJ,GAEA,GAAIolB,GAAO,GAAI+X,GASf,OARA/X,GAAKplB,MAAQA,EACbolB,EAAK7lC,KAAOA,EAAMA,EAAKsoB,OAASud,EAChCA,EAAKhV,eAAiBA,EAAgBqmB,EAAUrmB,EAAgBgV,GAChEA,EAAKhP,WAAaA,EAAYqgB,EAAUrgB,EAAYgP,GACpDA,EAAK9wB,WAAaA,EAAgBA,IAAYA,EAAWuT,OAASud,GAClEA,EAAKvf,WAAaA,EAAgBA,GAAY4wB,EAAU5wB,EAAYuf,GACpEA,EAAK/Z,UAAYA,EAAeA,GAAWorB,EAAUprB,EAAW+Z,GAChEA,EAAK3b,WAAaA,EAAgBA,GAAYgtB,EAAUhtB,EAAY2b,GAC7DA,GAGFyR,EAAAuG,wBAAP,SACE79C,EACA6wB,EACAgG,EACA9hB,EACAuR,EACAwF,EACA5B,EACAzJ,GAEA,GAAIolB,GAAO,GAAIiY,GASf,OARAjY,GAAKplB,MAAQA,EACbolB,EAAK7lC,KAAOA,EAAMA,EAAKsoB,OAASud,EAChCA,EAAKhV,eAAiBA,EAAgBqmB,EAAUrmB,EAAgBgV,GAChEA,EAAKhP,WAAaA,EAAYqgB,EAAUrgB,EAAYgP,GACpDA,EAAK9wB,WAAaA,EAAgBA,IAAYA,EAAWuT,OAASud,GAClEA,EAAKvf,WAAaA,EAAgBA,GAAY4wB,EAAU5wB,EAAYuf,GACpEA,EAAK/Z,UAAYA,EAAeA,GAAWorB,EAAUprB,EAAW+Z,GAChEA,EAAK3b,WAAaA,EAAgBA,GAAYgtB,EAAUhtB,EAAY2b,GAC7DA,GAGFyR,EAAAyG,eAAP,SAAsBt3B,EAAoBhG,GACxC,GAAI47B,GAAO,GAAI2B,GAGf,OAFA3B,GAAK57B,MAAQA,EACb47B,EAAKroB,aAAevN,EACb41B,GAGF/E,EAAA2G,2BAAP,SACEj+C,EACAmrB,EACAW,EACA5B,EACAzJ,GAEA,GAAIolB,GAAO,GAAIqY,GAMf,OALArY,GAAKplB,MAAQA,EACbolB,EAAK7lC,KAAOA,EAAMA,EAAKsoB,OAASud,EAChCA,EAAK1a,QAAUA,EAAS+rB,EAAU/rB,EAAS0a,GAC3CA,EAAK/Z,UAAYA,EAAeA,GAAWorB,EAAUprB,EAAW+Z,GAChEA,EAAK3b,WAAaA,EAAgBA,GAAYgtB,EAAUhtB,EAAY2b,GAC7DA,GAGFyR,EAAA6G,sBAAP,SACEj7C,EACAud,GAEA,GAAIolB,GAAO,GAAIuY,GAGf,OAFAvY,GAAKplB,MAAQA,EACbolB,EAAK3iC,MAAQA,EAAWA,IAAOA,EAAMolB,OAASud,GACvCA,GAGFyR,EAAA+G,sBAAP,SACE/qC,EACAkzB,EACA/lB,GAEA,GAAIolB,GAAO,GAAIyY,GAIf,OAHAzY,GAAKplB,MAAQA,EACbolB,EAAKvyB,UAAYA,EAAWA,EAAUgV,OAASud,EAC/CA,EAAKW,MAAQA,EAAO0Q,EAAU1Q,EAAOX,GAC9BA,GAGFyR,EAAAiH,iBAAP,SACEtrC,EACAqT,EACA7F,GAEA,GAAI47B,GAAO,GAAImC,GAIf,OAHAnC,GAAK57B,MAAQA,EACb47B,EAAKppC,MAAQA,EAAWA,IAAOA,EAAMqV,OAAS+zB,GAC9CA,EAAK/1B,WAAaA,EAAY4wB,EAAU5wB,EAAY+1B,GAC7CA,GAGF/E,EAAAmH,qBAAP,SACEv7C,EACAud,GAEA,GAAIolB,GAAO,GAAI6Y,GAGf,OAFA7Y,GAAKplB,MAAQA,EACbolB,EAAK3iC,MAAQA,EAAOA,EAAMolB,OAASud,EAC5BA,GAGFyR,EAAAqH,mBAAP,SACEr4B,EACAs4B,EACAC,EACAC,EACAr+B,GAEA,GAAIolB,GAAO,GAAIkZ,GASf,OARAlZ,GAAKplB,MAAQA,EACbolB,EAAKvf,WAAaA,EAAY4wB,EAAU5wB,EAAYuf,GACpDA,EAAK+Y,cAAgBA,EACjBA,IAAeA,EAAct2B,OAASud,GAC1CA,EAAKgZ,gBAAkBA,EACnBA,GAAiB3H,EAAU2H,EAAiBhZ,GAChDA,EAAKiZ,kBAAoBA,EACrBA,GAAmB5H,EAAU4H,EAAmBjZ,GAC7CA,GAGFyR,EAAA0H,sBAAP,SACEh/C,EACA+vB,EACAjE,EACA5B,EACAzJ,GAEA,GAAIolB,GAAO,GAAIoZ,GAMf,OALApZ,GAAKplB,MAAQA,EACbolB,EAAK7lC,KAAOA,EAAMA,EAAKsoB,OAASud,EAChCA,EAAK9V,MAAQA,EAAOA,EAAMzH,OAASud,EACnCA,EAAK/Z,UAAYA,EAAeA,GAAWorB,EAAUprB,EAAW+Z,GAChEA,EAAK3b,WAAaA,EAAgBA,GAAYgtB,EAAUhtB,EAAY2b,GAC7DA,GAGFyR,EAAA4H,wBAAP,SACE5vB,EACAxD,EACA5B,EACAzJ,GAEA,GAAIolB,GAAO,GAAIsZ,GAKf,OAJAtZ,GAAKplB,MAAQA,EACbolB,EAAKvW,aAAeA,EAAc4nB,EAAU5nB,EAAcuW,GAC1DA,EAAK/Z,UAAYA,EAAeA,GAAWorB,EAAUprB,EAAW+Z,GAChEA,EAAK3b,WAAaA,EAAgBA,GAAYgtB,EAAUhtB,EAAY2b,GAC7DA,GAGFyR,EAAA8H,0BAAP,SACEp/C,EACA+Q,EACAwE,EACAuW,EACA5B,EACAzJ,GAEA,GAAI47B,GAAO,GAAIgD,GAOf,OANAhD,GAAK57B,MAAQA,EACb47B,EAAKr8C,KAAOA,EAAMA,EAAKsoB,OAAS+zB,EAChCA,EAAKtrC,KAAOA,EAAUA,IAAMA,EAAKuX,OAAS+zB,GAC1CA,EAAK9mC,YAAcA,EAAiBA,IAAaA,EAAY+S,OAAS+zB,GACtEA,EAAKvwB,UAAYA,EACjBuwB,EAAKnyB,WAAaA,EACXmyB,GAGF/E,EAAAgI,qBAAP,SACEhsC,EACAkT,EACA/F,GAEA,GAAIolB,GAAO,GAAI0Z,GAIf,OAHA1Z,GAAKplB,MAAQA,EACbolB,EAAKvyB,UAAYA,EAAWA,EAAUgV,OAASud,EAC/CA,EAAKrf,UAAYA,EAAWA,EAAU8B,OAASud,EACxCA,GAEXyR,IAjyBsBx4C,GAAAw4C,MAsyBtB,IAAAG,GAAA,SAAA7yB,GAAA,QAAA6yB,KAAA,GAAA5yB,GAAA,OAAAD,KAAA+P,MAAAv1B,KAAAguB,YAAAhuB,IP0pNQ,OOzpNNylB,GAAA4B,KAAOC,EAAS84B,KPypNH36B,EOjpNf,MAT8BlC,GAAA80B,EAAA7yB,GAS9B6yB,GAT8BH,EAAjBx4C,GAAA24C,UAYb,IAAA+F,GAAA,SAAA54B,GAAA,QAAA44B,KAAA,GAAA34B,GAAA,OAAAD,KAAA+P,MAAAv1B,KAAAguB,YAAAhuB,IPypNQ,OOxpNNylB,GAAA4B,KAAOC,EAAS+4B,cPwpNH56B,EOlpNf,MAPmClC,GAAA66B,EAAA54B,GAOnC44B,GAPmClG,EAAtBx4C,GAAA0+C,eAYb,IAAAkC,GAAA,SAAA96B,GAAA,QAAA86B,KPupNQ,MAAkB,QAAX96B,GAAmBA,EAAO+P,MAAMv1B,KAAMguB,YAAchuB,KOvpNnB,MAAPujB,GAAA+8B,EAAA96B,GAAO86B,GAAPpI,EAAnBx4C,GAAA4gD,YAGtB,IAAA/H,GAAA,SAAA/yB,GAAA,QAAA+yB,KAAA,GAAA9yB,GAAA,OAAAD,KAAA+P,MAAAv1B,KAAAguB,YAAAhuB,IP+pNQ,OO9pNNylB,GAAA4B,KAAOC,EAAS4M,WP8pNHzO,EO1pNf,MAL0ClC,GAAAg1B,EAAA/yB,GAK1C+yB,GAL0C+H,EAA7B5gD,GAAA64C,wBAQb,SAAkBgI,GAChBA,IAAA,iBACAA,IAAA,qBACAA,IAAA,mBACAA,IAAA,mBACAA,IAAA,iBACAA,IAAA,oBANgB7gD,EAAA6gD,cAAA7gD,EAAA6gD,gBAUlB,IAAAC,GAAA,SAAAh7B,GAAA,QAAAg7B,KAAA,GAAA/6B,GAAA,OAAAD,KAAA+P,MAAAv1B,KAAAguB,YAAAhuB,IPkqNQ,OOjqNNylB,GAAA4B,KAAOC,EAAS4G,QPiqNHzI,EO7pNf,MALgDlC,GAAAi9B,EAAAh7B,GAKhDg7B,GALgDF,EAA1B5gD,GAAA8gD,mBAQtB,IAAA/H,GAAA,SAAAjzB,GAAA,QAAAizB,KAAA,GAAAhzB,GAAA,OAAAD,KAAA+P,MAAAv1B,KAAAguB,YAAAhuB,IPqqNQ,OOpqNNylB,GAAA0I,YAAW,EPoqNE1I,EOhqNf,MAL4ClC,GAAAk1B,EAAAjzB,GAK5CizB,GAL4C+H,EAA/B9gD,GAAA+4C,0BAQb,SAAkBgI,GAChBA,IAAA,mBACAA,IAAA,YAFgB/gD,EAAA+gD,gBAAA/gD,EAAA+gD,kBAMlB,IAAA7H,GAAA,SAAApzB,GAAA,QAAAozB,KAAA,GAAAnzB,GAAA,OAAAD,KAAA+P,MAAAv1B,KAAAguB,YAAAhuB,IPwqNQ,OOvqNNylB,GAAA4B,KAAOC,EAASoM,UPuqNHjO,EO/pNf,MATyClC,GAAAq1B,EAAApzB,GASzCozB,GATyC0H,EAA5B5gD,GAAAk5C,qBAYb,IAAAE,GAAA,SAAAtzB,GAAA,QAAAszB,KAAA,GAAArzB,GAAA,OAAAD,KAAA+P,MAAAv1B,KAAAguB,YAAAhuB,IPuqNQ,OOtqNNylB,GAAA4B,KAAOC,EAASsM,OPsqNHnO,EO9pNf,MATsClC,GAAAu1B,EAAAtzB,GAStCszB,GATsCwH,EAAzB5gD,GAAAo5C,kBAYb,IAAAG,GAAA,SAAAzzB,GAAA,QAAAyzB,KAAA,GAAAxzB,GAAA,OAAAD,KAAA+P,MAAAv1B,KAAAguB,YAAAhuB,IPsqNQ,OOrqNNylB,GAAA4B,KAAOC,EAAS+M,KPqqNH5O,EO7pNf,MAToClC,GAAA01B,EAAAzzB,GASpCyzB,GAToCqH,EAAvB5gD,GAAAu5C,gBAYb,IAAAE,GAAA,SAAA3zB,GAAA,QAAA2zB,KAAA,GAAA1zB,GAAA,OAAAD,KAAA+P,MAAAv1B,KAAAguB,YAAAhuB,IPqqNQ,OOpqNNylB,GAAA4B,KAAOC,EAASuhB,MPoqNHpjB,EOhqNf,MALqClC,GAAA41B,EAAA3zB,GAKrC2zB,GALqCmH,EAAxB5gD,GAAAy5C,iBAQb,IAAAE,GAAA,SAAA7zB,GAAA,QAAA6zB,KAAA,GAAA5zB,GAAA,OAAAD,KAAA+P,MAAAv1B,KAAAguB,YAAAhuB,IPyqNQ,OOxqNNylB,GAAA4B,KAAOC,EAASiG,YAChB9H,EAAA9D,KAAO,cPuqNM8D,EOtqNf,MAH2ClC,GAAA81B,EAAA7zB,GAG3C6zB,GAH2Cd,EAA9B74C,GAAA25C,uBAMb,IAAAE,GAAA,SAAA/zB,GAAA,QAAA+zB,KAAA,GAAA9zB,GAAA,OAAAD,KAAA+P,MAAAv1B,KAAAguB,YAAAhuB,IP8qNQ,OO7qNNylB,GAAA4B,KAAOC,EAAS8M,cP6qNH3O,EOvqNf,MAP6ClC,GAAAg2B,EAAA/zB,GAO7C+zB,GAP6C+G,EAAhC5gD,GAAA65C,yBAUb,IAAAI,GAAA,SAAAn0B,GAAA,QAAAm0B,KAAA,GAAAl0B,GAAA,OAAAD,KAAA+P,MAAAv1B,KAAAguB,YAAAhuB,IP+qNQ,OO9qNNylB,GAAA0I,YAAW,EP8qNE1I,EO1qNf,MAL4ClC,GAAAo2B,EAAAn0B,GAK5Cm0B,GAL4C6G,EAA/B9gD,GAAAi6C,wBAQb,IAAAE,GAAA,SAAAr0B,GAAA,QAAAq0B,KAAA,GAAAp0B,GAAA,OAAAD,KAAA+P,MAAAv1B,KAAAguB,YAAAhuB,IPkrNQ,OOjrNNylB,GAAA0I,YAAW,EPirNE1I,EO7qNf,MAL8ClC,GAAAs2B,EAAAr0B,GAK9Cq0B,GAL8C2G,EAAjC9gD,GAAAm6C,0BAQb,IAAAE,GAAA,SAAAv0B,GAAA,QAAAu0B,KAAA,GAAAt0B,GAAA,OAAAD,KAAA+P,MAAAv1B,KAAAguB,YAAAhuB,IPqrNQ,OOprNNylB,GAAA4B,KAAOC,EAAS+hB,IPorNH5jB,EOnrNf,MAFmClC,GAAAw2B,EAAAv0B,GAEnCu0B,GAFmCd,EAAtBv5C,GAAAq6C,eAKb,IAAAE,GAAA,SAAAz0B,GAAA,QAAAy0B,KAAA,GAAAx0B,GAAA,OAAAD,KAAA+P,MAAAv1B,KAAAguB,YAAAhuB,IP4rNQ,OO3rNNylB,GAAA4B,KAAOC,EAAS2hB,KAChBxjB,EAAA9D,KAAO,OP0rNM8D,EOzrNf,MAHoClC,GAAA02B,EAAAz0B,GAGpCy0B,GAHoC1B,EAAvB74C,GAAAu6C,gBAMb,IAAAE,GAAA,SAAA30B,GAAA,QAAA20B,KAAA,GAAA10B,GAAA,OAAAD,KAAA+P,MAAAv1B,KAAAguB,YAAAhuB,IPisNQ,OOhsNNylB,GAAA4B,KAAOC,EAASmM,cPgsNHhO,EO5rNf,MAL6ClC,GAAA42B,EAAA30B,GAK7C20B,GAL6CmG,EAAhC5gD,GAAAy6C,yBAQb,IAAAE,GAAA,SAAA70B,GAAA,QAAA60B,KAAA,GAAA50B,GAAA,OAAAD,KAAA+P,MAAAv1B,KAAAguB,YAAAhuB,IPosNQ,OOnsNNylB,GAAA4B,KAAOC,EAAS6M,ePmsNH1O,EO7rNf,MAP8ClC,GAAA82B,EAAA70B,GAO9C60B,GAP8CiG,EAAjC5gD,GAAA26C,0BAUb,IAAAG,GAAA,SAAAh1B,GAAA,QAAAg1B,KAAA,GAAA/0B,GAAA,OAAAD,KAAA+P,MAAAv1B,KAAAguB,YAAAhuB,IPqsNQ,OOpsNNylB,GAAA0I,YAAW,EPosNE1I,EO9rNf,MAP6ClC,GAAAi3B,EAAAh1B,GAO7Cg1B,GAP6CgG,EAAhC9gD,GAAA86C,yBAUb,IAAAG,GAAA,SAAAn1B,GAAA,QAAAm1B,KAAA,GAAAl1B,GAAA,OAAAD,KAAA+P,MAAAv1B,KAAAguB,YAAAhuB,IPssNQ,OOrsNNylB,GAAA4B,KAAOC,EAASmiB,QPqsNHhkB,EO7rNf,MATuClC,GAAAo3B,EAAAn1B,GASvCm1B,GATuC2F,EAA1B5gD,GAAAi7C,mBAYb,IAAAE,GAAA,SAAAr1B,GAAA,QAAAq1B,KAAA,GAAAp1B,GAAA,OAAAD,KAAA+P,MAAAv1B,KAAAguB,YAAAhuB,IPqsNQ,OOpsNNylB,GAAA0I,YAAW,EPosNE1I,EOhsNf,MAL6ClC,GAAAs3B,EAAAr1B,GAK7Cq1B,GAL6C2F,EAAhC9gD,GAAAm7C,yBAQb,IAAAE,GAAA,SAAAv1B,GAAA,QAAAu1B,KAAA,GAAAt1B,GAAA,OAAAD,KAAA+P,MAAAv1B,KAAAguB,YAAAhuB,IPysNQ,OOxsNNylB,GAAA4B,KAAOC,EAAS0M,MAChBvO,EAAA9D,KAAO,QPusNM8D,EOtsNf,MAHqClC,GAAAw3B,EAAAv1B,GAGrCu1B,GAHqCxC,EAAxB74C,GAAAq7C,iBAMb,IAAAE,GAAA,SAAAz1B,GAAA,QAAAy1B,KAAA,GAAAx1B,GAAA,OAAAD,KAAA+P,MAAAv1B,KAAAguB,YAAAhuB,IP+sNQ,OO9sNNylB,GAAA4B,KAAOC,EAASuM,KAChBpO,EAAA9D,KAAO,OP6sNM8D,EO5sNf,MAHoClC,GAAA03B,EAAAz1B,GAGpCy1B,GAHoC1C,EAAvB74C,GAAAu7C,gBAMb,IAAAE,GAAA,SAAA31B,GAAA,QAAA21B,KAAA,GAAA11B,GAAA,OAAAD,KAAA+P,MAAAv1B,KAAAguB,YAAAhuB,IPqtNQ,OOptNNylB,GAAA4B,KAAOC,EAAS4hB,KAChBzjB,EAAA9D,KAAO,OPmtNM8D,EOltNf,MAHoClC,GAAA43B,EAAA31B,GAGpC21B,GAHoC5C,EAAvB74C,GAAAy7C,gBAMb,IAAA1B,GAAA,SAAAj0B,GAAA,QAAAi0B,KAAA,GAAAh0B,GAAA,OAAAD,KAAA+P,MAAAv1B,KAAAguB,YAAAhuB,IP2tNQ,OO1tNNylB,GAAA4B,KAAOC,EAAS0hB,MAChBvjB,EAAA9D,KAAO,QPytNM8D,EOxtNf,MAHqClC,GAAAk2B,EAAAj0B,GAGrCi0B,GAHqClB,EAAxB74C,GAAA+5C,iBAMb,IAAAiH,GAAA,SAAAl7B,GAAA,QAAAk7B,KP8tNQ,MAAkB,QAAXl7B,GAAmBA,EAAO+P,MAAMv1B,KAAMguB,YAAchuB,KOxtNnE,MAN8CujB,GAAAm9B,EAAAl7B,GAM9Ck7B,GAN8CJ,EAAxB5gD,GAAAghD,iBAStB,IAAArF,GAAA,SAAA71B,GAAA,QAAA61B,KAAA,GAAA51B,GAAA,OAAAD,KAAA+P,MAAAv1B,KAAAguB,YAAAhuB,IPguNQ,OO/tNNylB,GAAA4B,KAAOC,EAASqiB,aP+tNHlkB,EO9tNf,MAF4ClC,GAAA83B,EAAA71B,GAE5C61B,GAF4CqF,EAA/BhhD,GAAA27C,wBAKb,IAAAE,GAAA,SAAA/1B,GAAA,QAAA+1B,KAAA,GAAA91B,GAAA,OAAAD,KAAA+P,MAAAv1B,KAAAguB,YAAAhuB,IPsuNQ,OOruNNylB,GAAA4B,KAAOC,EAASuiB,YPquNHpkB,EOpuNf,MAF2ClC,GAAAg4B,EAAA/1B,GAE3C+1B,GAF2CmF,EAA9BhhD,GAAA67C,uBAOb,IAAY/uB,IAAZ,SAAYA,GACVA,IAAA,iBACAA,IAAA,iBACAA,IAAA,aACAA,IAAA,qBACAA,IAAA,mBACAA,IAAA,mBACAA,IAAA,mBACAA,IAAA,uBACAA,IAAA,mBACAA,IAAA,qBACAA,IAAA,0BACAA,IAAA,wBACAA,IAAA,cACAA,IAAA,eAdUA,EAAA9sB,EAAA8sB,eAAA9sB,EAAA8sB,iBAkBZ,IAAAm0B,GAAA,SAAAn7B,GAAA,QAAAm7B,KPyuNQ,MAAkB,QAAXn7B,GAAmBA,EAAO+P,MAAMv1B,KAAMguB,YAAchuB,KOzuNpB,MAAPujB,GAAAo9B,EAAAn7B,GAAOm7B,GAAPzI,EAAlBx4C,GAAAihD,WAGtB,IAAYC,IAAZ,SAAYA,GAEVA,IAAA,qBAEAA,IAAA,iBAEAA,IAAA,sBANUA,EAAAlhD,EAAAkhD,aAAAlhD,EAAAkhD,eAUZ,IAAAC,GAAA,SAAAr7B,GAoBE,QAAAq7B,GAAYj/B,EAAwBD,EAAc0F,GAAlD,GAAA5B,GACED,EAAAhlB,KAAAR,OAAOA,IPwuNH,OO5vNNylB,GAAA4B,KAAOC,EAAS8D,OAChB3F,EAAAyD,OAAS,KAaTzD,EAAAq7B,UAA8B,KAE9Br7B,EAAA4U,gBAAuB,EAKrB5U,EAAKs7B,WAAa15B,EAClB5B,EAAK7D,eAAiBA,EACtB6D,EAAKmK,aAAeioB,EAAmBpyB,EAAK7D,gBAC5C6D,EAAKyB,WAAa,GAAIxjB,OACtB+hB,EAAKpE,MAAQ,GAAIud,GAAA9S,MAAMrG,EAAM,EAAG9D,EAAK3f,QACrCyjB,EAAK9D,KAAOA,EPkuND8D,EO3tNf,MAlC4BlC,GAAAs9B,EAAAr7B,GA+B1BzkB,OAAAC,eAAI6/C,EAAAr/C,UAAA,WPkuNEL,IOluNN,WAAsB,MAAOnB,MAAK+gD,YAAcH,EAAWI,OPmuNrD9/C,YAAY,EACZD,cAAc,IOluNpBF,OAAAC,eAAI6/C,EAAAr/C,UAAA,aPsuNEL,IOtuNN,WAAwB,MAAOnB,MAAK+gD,YAAcH,EAAWK,SPuuNvD//C,YAAY,EACZD,cAAc,IOvuNtB4/C,GAlC4B3I,EAAfx4C,GAAAmhD,QAqCb,IAAAK,GAAA,SAAA17B,GAAA,QAAA07B,KAAA,GAAAz7B,GAAA,OAAAD,KAAA+P,MAAAv1B,KAAAguB,YAAAhuB,IPkvNQ,OO3uNNylB,GAAAqF,WAAiC,KAEvBrF,EAAA07B,+BAAgD,KAChD17B,EAAA27B,4BAA6C,KPwuN1C37B,EO1qNf,MAxEmDlC,GAAA29B,EAAA17B,GAajDzkB,OAAAC,eAAIkgD,EAAA1/C,UAAA,4BPyuNEL,IOzuNN,WAGE,MAFKnB,MAAKmhD,iCACRnhD,KAAKmhD,+BAAiCzJ,EAAmB13C,MAAM,IAC1DA,KAAKmhD,gCP2uNRjgD,YAAY,EACZD,cAAc,IOxuNpBF,OAAAC,eAAIkgD,EAAA1/C,UAAA,yBP4uNEL,IO5uNN,WAGE,MAFKnB,MAAKohD,8BACRphD,KAAKohD,4BAA8B1J,EAAmB13C,MAAM,IACvDA,KAAKohD,6BP8uNRlgD,YAAY,EACZD,cAAc,IO3uNpBF,OAAAC,eAAIkgD,EAAA1/C,UAAA,cP+uNEL,IO/uNN,WACE,GAAI+nB,GAASlpB,KAAKkpB,MAClB,SAAKA,MAEDA,EAAO7B,MAAQC,EAASiB,YACpBW,EAASA,EAAOA,UAEjBA,EAAO7B,MAAQC,EAAS8D,SPivN3BlqB,YAAY,EACZD,cAAc,IO9uNpBF,OAAAC,eAAIkgD,EAAA1/C,UAAA,oBPkvNEL,IOlvNN,WACE,GAAI+nB,GAASlpB,KAAKkpB,MAClB,SAAKA,MAEDA,EAAO7B,MAAQC,EAASiB,YACpBW,EAASA,EAAOA,WAEpBA,EAAO7B,MAAQC,EAASa,qBAExBoE,EAAYC,EAAa7E,OAAQ3nB,KAAK0sB,YACfxD,EAAQwZ,iBAE/BxZ,EAAO7B,MAAQC,EAASC,iBAExBgF,EAAYC,EAAaS,OAAQjtB,KAAK0sB,YACnBxD,EAAQwZ,iBAG7BxZ,EAAO7B,MAAQC,EAAS8D,QACxBmB,EAAYC,EAAa7E,OAAQ3nB,KAAK0sB,cP+uNpCxrB,YAAY,EACZD,cAAc,IO3uNpBigD,EAAA1/C,UAAAgjC,oBAAA,SAAoB9a,GAIlB,MACEA,GAAO9oB,KAAK+gB,MAAQ+H,EAAO9S,aAAa+K,MACxC3hB,KAAKqhB,MAAMK,QAAUgI,EAAOrI,MAAMK,SACjC1hB,KAAK0iC,kBAGZwe,GAxEmDP,EAA7BjhD,GAAAwhD,sBA2EtB,IAAAG,GAAA,SAAA77B,GAAA,QAAA67B,KPivNQ,MAAkB,QAAX77B,GAAmBA,EAAO+P,MAAMv1B,KAAMguB,YAAchuB,KO3uNnE,MAN+DujB,GAAA89B,EAAA77B,GAM/D67B,GAN+DH,EAAzCxhD,GAAA2hD,kCAStB,IAAA5F,IAAA,SAAAj2B,GAAA,QAAAi2B,KAAA,GAAAh2B,GAAA,OAAAD,KAAA+P,MAAAv1B,KAAAguB,YAAAhuB,IPmvNQ,OOlvNNylB,GAAA4B,KAAOC,EAASwd,MPkvNHrf,EO9uNf,MALoClC,GAAAk4B,EAAAj2B,GAKpCi2B,GALoCkF,EAAvBjhD,GAAA+7C,iBAQb,IAAAE,IAAA,SAAAn2B,GAAA,QAAAm2B,KAAA,GAAAl2B,GAAA,OAAAD,KAAA+P,MAAAv1B,KAAAguB,YAAAhuB,IPsvNQ,OOrvNNylB,GAAA4B,KAAOC,EAAS0d,MPqvNHvf,EOjvNf,MALoClC,GAAAo4B,EAAAn2B,GAKpCm2B,GALoCgF,EAAvBjhD,GAAAi8C,iBAQb,IAAAE,IAAA,SAAAr2B,GAAA,QAAAq2B,KAAA,GAAAp2B,GAAA,OAAAD,KAAA+P,MAAAv1B,KAAAguB,YAAAhuB,IPyvNQ,OOxvNNylB,GAAA4B,KAAOC,EAASC,iBPwvNH9B,EO9uNf,MAXsClC,GAAAs4B,EAAAr2B,GAWtCq2B,GAXsCqF,EAAzBxhD,GAAAm8C,mBAcb,IAAAE,IAAA,SAAAv2B,GAAA,QAAAu2B,KAAA,GAAAt2B,GAAA,OAAAD,KAAA+P,MAAAv1B,KAAAguB,YAAAhuB,IPsvNQ,OOrvNNylB,GAAA4B,KAAOC,EAAS4d,SPqvNHzf,EOjvNf,MALuClC,GAAAw4B,EAAAv2B,GAKvCu2B,GALuC4E,EAA1BjhD,GAAAq8C,sBAQb,SAAkBuF,GAChBA,IAAA,mBACAA,IAAA,mBACAA,IAAA,uBACAA,IAAA,yBACAA,IAAA,oBALgB5hD,EAAA4hD,gBAAA5hD,EAAA4hD,kBASlB,IAAArF,IAAA,SAAAz2B,GAAA,QAAAy2B,KAAA,GAAAx2B,GAAA,OAAAD,KAAA+P,MAAAv1B,KAAAguB,YAAAhuB,IPyvNQ,OOxvNNylB,GAAA4B,KAAOC,EAASi6B,UPwvNH97B,EOhvNf,MAT+BlC,GAAA04B,EAAAz2B,GAS/By2B,GAT+B0E,EAAlBjhD,GAAAu8C,YAYb,IAAAE,IAAA,SAAA32B,GAAA,QAAA22B,KAAA,GAAA12B,GAAA,OAAAD,KAAA+P,MAAAv1B,KAAAguB,YAAAhuB,IPwvNQ,OOvvNNylB,GAAA4B,KAAOC,EAAS8d,GPuvNH3f,EOjvNf,MAPiClC,GAAA44B,EAAA32B,GAOjC22B,GAPiCwE,EAApBjhD,GAAAy8C,cAUb,IAAAE,IAAA,SAAA72B,GAAA,QAAA62B,KAAA,GAAA52B,GAAA,OAAAD,KAAA+P,MAAAv1B,KAAAguB,YAAAhuB,IPyvNQ,OOxvNNylB,GAAA4B,KAAOC,EAASge,MPwvNH7f,EOvvNf,MAFoClC,GAAA84B,EAAA72B,GAEpC62B,GAFoCsE,EAAvBjhD,GAAA28C,iBAKb,IAAAE,IAAA,SAAA/2B,GAAA,QAAA+2B,KAAA,GAAA92B,GAAA,OAAAD,KAAA+P,MAAAv1B,KAAAguB,YAAAhuB,IP+vNQ,OO9vNNylB,GAAA4B,KAAOC,EAASG,gBP8vNHhC,EO1vNf,MALqClC,GAAAg5B,EAAA/2B,GAKrC+2B,GALqC2E,EAAxBxhD,GAAA68C,kBAQb,IAAAE,IAAA,SAAAj3B,GAAA,QAAAi3B,KAAA,GAAAh3B,GAAA,OAAAD,KAAA+P,MAAAv1B,KAAAguB,YAAAhuB,IPmwNQ,OOlwNNylB,GAAA4B,KAAOC,EAASk6B,qBAChB/7B,EAAAiH,UAAY,KPiwNCjH,EO5vNf,MAP0ClC,GAAAk5B,EAAAj3B,GAO1Ci3B,GAP0CyE,EAA7BxhD,GAAA+8C,uBAUb,IAAAM,IAAA,SAAAv3B,GAAA,QAAAu3B,KAAA,GAAAt3B,GAAA,OAAAD,KAAA+P,MAAAv1B,KAAAguB,YAAAhuB,IPowNQ,OOnwNNylB,GAAA4B,KAAOC,EAASm6B,aPmwNHh8B,EO7vNf,MAP2ClC,GAAAw5B,EAAAv3B,GAO3Cu3B,GAP2C7E,EAA9Bx4C,GAAAq9C,wBAUb,IAAAG,IAAA,SAAA13B,GAAA,QAAA03B,KAAA,GAAAz3B,GAAA,OAAAD,KAAA+P,MAAAv1B,KAAAguB,YAAAhuB,IPqwNQ,OOpwNNylB,GAAA4B,KAAOC,EAASo6B,aPowNHj8B,EO9vNf,MAPkClC,GAAA25B,EAAA13B,GAOlC03B,GAPkChF,EAArBx4C,GAAAw9C,eAUb,IAAAP,IAAA,SAAAn3B,GAAA,QAAAm3B,KAAA,GAAAl3B,GAAA,OAAAD,KAAA+P,MAAAv1B,KAAAguB,YAAAhuB,IPswNQ,OOrwNNylB,GAAA4B,KAAOC,EAASK,OPqwNHlC,EOzvNf,MAbqClC,GAAAo5B,EAAAn3B,GAarCm3B,GAbqCgE,EAAxBjhD,GAAAi9C,kBAgBb,IAAAS,IAAA,SAAA53B,GAAA,QAAA43B,KAAA,GAAA33B,GAAA,OAAAD,KAAA+P,MAAAv1B,KAAAguB,YAAAhuB,IPiwNQ,OOhwNNylB,GAAA4B,KAAOC,EAASke,WPgwNH/f,EO5vNf,MALyClC,GAAA65B,EAAA53B,GAKzC43B,GALyCuD,EAA5BjhD,GAAA09C,sBAQb,IAAAY,IAAA,SAAAx4B,GAAA,QAAAw4B,KAAA,GAAAv4B,GAAA,OAAAD,KAAA+P,MAAAv1B,KAAAguB,YAAAhuB,IPowNQ,OOnwNNylB,GAAA4B,KAAOC,EAAS6E,iBPmwNH1G,EOlwNf,MAFsClC,GAAAy6B,EAAAx4B,GAEtCw4B,GAFsCqD,EAAzB3hD,GAAAs+C,mBAKb,IAAAE,IAAA,SAAA14B,GAAA,QAAA04B,KAAA,GAAAz4B,GAAA,OAAAD,KAAA+P,MAAAv1B,KAAAguB,YAAAhuB,IP0wNQ,OOzwNNylB,GAAA4B,KAAOC,EAASoe,IPywNHjgB,EO5vNf,MAdkClC,GAAA26B,EAAA14B,GAclC04B,GAdkCyC,EAArBjhD,GAAAw+C,eAiBb,IAAAM,IAAA,SAAAh5B,GAAA,QAAAg5B,KAAA,GAAA/4B,GAAA,OAAAD,KAAA+P,MAAAv1B,KAAAguB,YAAAhuB,IPowNQ,OOnwNNylB,GAAA4B,KAAOC,EAASO,oBPmwNHpC,EOzvNf,MAXyClC,GAAAi7B,EAAAh5B,GAWzCg5B,GAXyC0C,EAA5BxhD,GAAA8+C,sBAcb,IAAAlB,IAAA,SAAA93B,GAAA,QAAA83B,KAAA,GAAA73B,GAAA,OAAAD,KAAA+P,MAAAv1B,KAAAguB,YAAAhuB,IPiwNQ,OOhwNNylB,GAAA4B,KAAOC,EAASse,GPgwNHngB,EOxvNf,MATiClC,GAAA+5B,EAAA93B,GASjC83B,GATiCqD,EAApBjhD,GAAA49C,cAYb,IAAAM,IAAA,SAAAp4B,GAAA,QAAAo4B,KAAA,GAAAn4B,GAAA,OAAAD,KAAA+P,MAAAv1B,KAAAguB,YAAAhuB,IPiwNQ,OOhwNNylB,GAAA4B,KAAOC,EAASq6B,kBAChBl8B,EAAAiH,UAAY,KP+vNCjH,EO3vNf,MANuClC,GAAAq6B,EAAAp4B,GAMvCo4B,GANuCsD,EAA1BxhD,GAAAk+C,oBASb,IAAAH,IAAA,SAAAj4B,GAAA,QAAAi4B,KAAA,GAAAh4B,GAAA,OAAAD,KAAA+P,MAAAv1B,KAAAguB,YAAAhuB,IPmwNQ,OOlwNNylB,GAAA4B,KAAOC,EAASS,OPkwNHtC,EOtvNf,MAbqClC,GAAAk6B,EAAAj4B,GAarCi4B,GAbqCkD,EAAxBjhD,GAAA+9C,kBAgBb,IAAAK,IAAA,SAAAt4B,GAAA,QAAAs4B,KAAA,GAAAr4B,GAAA,OAAAD,KAAA+P,MAAAv1B,KAAAguB,YAAAhuB,IP8vNQ,OO7vNNylB,GAAA4B,KAAOC,EAASW,qBP6vNHxC,EO5vNf,MAF0ClC,GAAAu6B,EAAAt4B,GAE1Cs4B,GAF0CjC,GAA7Bn8C,GAAAo+C,uBAKb,IAAAY,IAAA,SAAAl5B,GAAA,QAAAk5B,KAAA,GAAAj5B,GAAA,OAAAD,KAAA+P,MAAAv1B,KAAAguB,YAAAhuB,IPowNQ,OOnwNNylB,GAAA4B,KAAOC,EAAS+E,kBPmwNH5G,EOlwNf,MAFuClC,GAAAm7B,EAAAl5B,GAEvCk5B,GAFuCF,GAA1B9+C,GAAAg/C,oBAKb,IAAAI,IAAA,SAAAt5B,GAAA,QAAAs5B,KAAA,GAAAr5B,GAAA,OAAAD,KAAA+P,MAAAv1B,KAAAguB,YAAAhuB,IP0wNQ,OOzwNNylB,GAAA4B,KAAOC,EAASa,qBPywNH1C,EOrwNf,MAL0ClC,GAAAu7B,EAAAt5B,GAK1Cs5B,GAL0CoC,EAA7BxhD,GAAAo/C,yBAQb,SAAY8C,GAEVA,IAAA,qBAEAA,IAAA,uBAEAA,IAAA,gBANUliD,EAAAkiD,gBAAAliD,EAAAkiD,kBAUZ,IAAAvrB,IAAA,SAAA7Q,GAAA,QAAA6Q,KAAA,GAAA5Q,GAAA,OAAAD,KAAA+P,MAAAv1B,KAAAguB,YAAAhuB,IP6wNQ,OO5wNNylB,GAAA4B,KAAOC,EAASu6B,UP4wNHp8B,EOlwNf,MAX+BlC,GAAA8S,EAAA7Q,GAW/B6Q,GAX+B6hB,EAAlBx4C,GAAA22B,YAcb,IAAAuoB,IAAA,SAAAp5B,GAAA,QAAAo5B,KAAA,GAAAn5B,GAAA,OAAAD,KAAA+P,MAAAv1B,KAAAguB,YAAAhuB,IP0wNQ,OOzwNNylB,GAAA4B,KAAOC,EAASw6B,SPywNHr8B,EOrwNf,MAL8BlC,GAAAq7B,EAAAp5B,GAK9Bo5B,GAL8B1G,EAAjBx4C,GAAAk/C,WAQb,IAAAI,IAAA,SAAAx5B,GAAA,QAAAw5B,KAAA,GAAAv5B,GAAA,OAAAD,KAAA+P,MAAAv1B,KAAAguB,YAAAhuB,IP6wNQ,OO5wNNylB,GAAA4B,KAAOC,EAASwe,OP4wNHrgB,EOxwNf,MALqClC,GAAAy7B,EAAAx5B,GAKrCw5B,GALqC2B,EAAxBjhD,GAAAs/C,kBAQb,IAAAI,IAAA,SAAA55B,GAAA,QAAA45B,KAAA,GAAA35B,GAAA,OAAAD,KAAA+P,MAAAv1B,KAAAguB,YAAAhuB,IPgxNQ,OO/wNNylB,GAAA4B,KAAOC,EAASy6B,WP+wNHt8B,EOzwNf,MAPgClC,GAAA67B,EAAA55B,GAOhC45B,GAPgClH,EAAnBx4C,GAAA0/C,aAUb,IAAAF,IAAA,SAAA15B,GAAA,QAAA05B,KAAA,GAAAz5B,GAAA,OAAAD,KAAA+P,MAAAv1B,KAAAguB,YAAAhuB,IPixNQ,OOhxNNylB,GAAA4B,KAAOC,EAAS0e,OPgxNHvgB,EO1wNf,MAPqClC,GAAA27B,EAAA15B,GAOrC05B,GAPqCyB,EAAxBjhD,GAAAw/C,kBAUb,IAAAI,IAAA,SAAA95B,GAAA,QAAA85B,KAAA,GAAA75B,GAAA,OAAAD,KAAA+P,MAAAv1B,KAAAguB,YAAAhuB,IPkxNQ,OOjxNNylB,GAAA4B,KAAOC,EAAS4e,MPixNHzgB,EO7wNf,MALoClC,GAAA+7B,EAAA95B,GAKpC85B,GALoCqB,EAAvBjhD,GAAA4/C,iBAQb,IAAAK,IAAA,SAAAn6B,GAAA,QAAAm6B,KAAA,GAAAl6B,GAAA,OAAAD,KAAA+P,MAAAv1B,KAAAguB,YAAAhuB,IPqxNQ,OOpxNNylB,GAAA4B,KAAOC,EAAS8e,IPoxNH3gB,EO1wNf,MAXkClC,GAAAo8B,EAAAn6B,GAWlCm6B,GAXkCgB,EAArBjhD,GAAAigD,eAcb,IAAAE,IAAA,SAAAr6B,GAAA,QAAAq6B,KAAA,GAAAp6B,GAAA,OAAAD,KAAA+P,MAAAv1B,KAAAguB,YAAAhuB,IPkxNQ,OOjxNNylB,GAAA4B,KAAOC,EAASe,gBPixNH5C,EO7wNf,MALqClC,GAAAs8B,EAAAr6B,GAKrCq6B,GALqCqB,EAAxBxhD,GAAAmgD,kBAQb,IAAAI,IAAA,SAAAz6B,GAAA,QAAAy6B,KAAA,GAAAx6B,GAAA,OAAAD,KAAA+P,MAAAv1B,KAAAguB,YAAAhuB,IPqxNQ,OOpxNNylB,GAAA4B,KAAOC,EAASswB,oBPoxNHnyB,EOhxNf,MALyClC,GAAA08B,EAAAz6B,GAKzCy6B,GALyCoB,EAA5B3hD,GAAAugD,sBAQb,IAAAF,IAAA,SAAAv6B,GAAA,QAAAu6B,KAAA,GAAAt6B,GAAA,OAAAD,KAAA+P,MAAAv1B,KAAAguB,YAAAhuB,IPwxNQ,OOvxNNylB,GAAA4B,KAAOC,EAASiB,SPuxNH9C,EO/wNf,MATuClC,GAAAw8B,EAAAv6B,GASvCu6B,GATuCY,EAA1BjhD,GAAAqgD,oBAYb,IAAAI,IAAA,SAAA36B,GAAA,QAAA26B,KAAA,GAAA16B,GAAA,OAAAD,KAAA+P,MAAAv1B,KAAAguB,YAAAhuB,IPuxNQ,OOtxNNylB,GAAA4B,KAAOC,EAASgf,MPsxNH7gB,EOhxNf,MAPoClC,GAAA48B,EAAA36B,GAOpC26B,GAPoCQ,EAAvBjhD,GAAAygD,iBAUb,IAAI/I,IAAuC,IAE3C13C,GAAAy3C,uBAOAz3C,EAAA23C,kBAYA33C,EAAA43C,cAWA53C,EAAA83C,cAYA93C,EAAA6sB,cAQA7sB,EAAA+3C,oBAeA/3C,EAAAmrB,eAQAnrB,EAAAg4C,qBAuBAh4C,EAAAm4C,sBPmxNM,SAAUl4C,EAAQD,EAASS,GAEjC,YAqBA,IAAIojB,GAAavjB,MAAQA,KAAKujB,WAAc,WACxC,GAAIC,GAAgBziB,OAAO0iB,iBACpBC,uBAA2BhgB,QAAS,SAAU/C,EAAGgjB,GAAKhjB,EAAE+iB,UAAYC,IACvE,SAAUhjB,EAAGgjB,GAAK,IAAK,GAAIjiB,KAAKiiB,GAAOA,EAAEliB,eAAeC,KAAIf,EAAEe,GAAKiiB,EAAEjiB,IACzE,OAAO,UAAUf,EAAGgjB,GAEhB,QAASC,KAAO5jB,KAAK6jB,YAAcljB,EADnC6iB,EAAc7iB,EAAGgjB,GAEjBhjB,EAAEa,UAAkB,OAANmiB,EAAa5iB,OAAOgO,OAAO4U,IAAMC,EAAGpiB,UAAYmiB,EAAEniB,UAAW,GAAIoiB,OAGvF7iB,QAAOC,eAAetB,EAAS,cAAgBoE,OAAO,GQ9+QtD,IAsBYioC,GAtBZxnB,EAAApkB,EAAA,GAUA+hB,EAAA/hB,EAAA,IAYA,SAAY4rC,GAKVA,IAAA,uBACAA,IAAA,WACAA,IAAA,iBACAA,IAAA,iBACAA,IAAA,iBACAA,IAAA,eACAA,IAAA,iBACAA,IAAA,iBACAA,IAAA,iBACAA,IAAA,uBACAA,IAAA,8BACAA,IAAA,wBACAA,IAAA,sBACAA,IAAA,sBACAA,IAAA,oBACAA,IAAA,YACAA,IAAA,gBACAA,IAAA,gBACAA,IAAA,oBACAA,IAAA,sBACAA,IAAA,kBACAA,IAAA,sBACAA,IAAA,cACAA,IAAA,gBACAA,IAAA,wBACAA,IAAA,cACAA,IAAA,YACAA,IAAA,4BACAA,IAAA,oBACAA,IAAA,YACAA,IAAA,4BACAA,IAAA,0BACAA,IAAA,YACAA,IAAA,kBACAA,IAAA,cACAA,IAAA,oBACAA,IAAA,0BACAA,IAAA,cACAA,IAAA,gBACAA,IAAA,YACAA,IAAA,sBACAA,IAAA,sBACAA,IAAA,0BACAA,IAAA,oBACAA,IAAA,wBACAA,IAAA,oBACAA,IAAA,cACAA,IAAA,oBACAA,IAAA,kBACAA,IAAA,oBACAA,IAAA,gBACAA,IAAA,kBACAA,IAAA,gBACAA,IAAA,cACAA,IAAA,gBACAA,IAAA,oBACAA,IAAA,cACAA,IAAA,gBACAA,IAAA,kBACAA,IAAA,gBACAA,IAAA,kBAIAA,IAAA,0BACAA,IAAA,4BACAA,IAAA,0BACAA,IAAA,4BACAA,IAAA,8BACAA,IAAA,gCACAA,IAAA,cACAA,IAAA,8BACAA,IAAA,0BACAA,IAAA,kBACAA,IAAA,wBACAA,IAAA,8BACAA,IAAA,sCACAA,IAAA,4CACAA,IAAA,kCACAA,IAAA,4CACAA,IAAA,gDACAA,IAAA,0DACAA,IAAA,4CACAA,IAAA,gBACAA,IAAA,kBACAA,IAAA,0CACAA,IAAA,wBACAA,IAAA,kBACAA,IAAA,sBACAA,IAAA,0BACAA,IAAA,8BACAA,IAAA,0CACAA,IAAA,sDACAA,IAAA,8EACAA,IAAA,0BACAA,IAAA,cACAA,IAAA,kBACAA,IAAA,8BACAA,IAAA,kBACAA,IAAA,8CACAA,IAAA,sBACAA,IAAA,wBACAA,IAAA,kBACAA,IAAA,qBACAA,IAAA,+BACAA,IAAA,iCACAA,IAAA,uCACAA,IAAA,yDACAA,IAAA,iCACAA,IAAA,qCACAA,IAAA,yDACAA,IAAA,qEACAA,IAAA,6FACAA,IAAA,yCACAA,IAAA,6BACAA,IAAA,iCACAA,IAAA,aAIAA,IAAA,6BACAA,IAAA,mCACAA,IAAA,qCACAA,IAAA,iCAIAA,IAAA,uBACAA,IAAA,4BArIUA,EAAArsC,EAAAqsC,QAAArsC,EAAAqsC,WAwIZ,SAAiBA,GAEf,QAAAiW,GAA4BrgC,GAC1B,OAAQA,GACN,IAAK,WAAY,MAAOoqB,GAAMpV,QAC9B,KAAK,KAAM,MAAOoV,GAAMkW,EACxB,KAAK,QAAS,MAAOlW,GAAMmW,KAC3B,KAAK,QAAS,MAAOnW,GAAMoW,KAC3B,KAAK,QAAS,MAAOpW,GAAM/G,KAC3B,KAAK,OAAQ,MAAO+G,GAAMqW,IAC1B,KAAK,QAAS,MAAOrW,GAAMsW,KAC3B,KAAK,QAAS,MAAOtW,GAAM/Y,KAC3B,KAAK,WAAY,MAAO+Y,GAAM7G,QAC9B,KAAK,QAAS,MAAO6G,GAAM9W,KAC3B,KAAK,cAAe,MAAO8W,GAAMxe,WACjC,KAAK,WAAY,MAAOwe,GAAMuW,QAC9B,KAAK,UAAW,MAAOvW,GAAMjX,OAC7B,KAAK,UAAW,MAAOiX,GAAMwW,OAC7B,KAAK,SAAU,MAAOxW,GAAMyW,MAC5B,KAAK,KAAM,MAAOzW,GAAM3G,EACxB,KAAK,OAAQ,MAAO2G,GAAM0W,IAC1B,KAAK,OAAQ,MAAO1W,GAAM/W,IAC1B,KAAK,SAAU,MAAO+W,GAAMpkB,MAC5B,KAAK,UAAW,MAAOokB,GAAM2W,OAC7B,KAAK,QAAS,MAAO3W,GAAM/C,KAC3B,KAAK,UAAW,MAAO+C,GAAM4W,OAC7B,KAAK,MAAO,MAAO5W,GAAMrG,GACzB,KAAK,OAAQ,MAAOqG,GAAM6W,IAC1B,KAAK,WAAY,MAAO7W,GAAM3T,QAC9B,KAAK,MAAO,MAAO2T,GAAMtf,GACzB,KAAK,KAAM,MAAOsf,GAAMnG,EACxB,KAAK,aAAc,MAAOmG,GAAM8W,UAChC,KAAK,SAAU,MAAO9W,GAAMhkB,MAC5B,KAAK,KAAM,MAAOgkB,GAAM+W,EACxB,KAAK,aAAc,MAAO/W,GAAMgX,UAChC,KAAK,YAAa,MAAOhX,GAAMnP,SAC/B,KAAK,KAAM,MAAOmP,GAAMiX,EACxB,KAAK,QAAS,MAAOjX,GAAMkX,KAC3B,KAAK,MAAO,MAAOlX,GAAMhW,GACzB,KAAK,SAAU,MAAOgW,GAAMmX,MAC5B,KAAK,YAAa,MAAOnX,GAAMpX,SAC/B,KAAK,MAAO,MAAOoX,GAAM1C,GACzB,KAAK,OAAQ,MAAO0C,GAAM9C,IAC1B,KAAK,KAAM,MAAO8C,GAAMoX,EACxB,KAAK,UAAW,MAAOpX,GAAMqX,OAC7B,KAAK,UAAW,MAAOrX,GAAM5V,OAC7B,KAAK,YAAa,MAAO4V,GAAM3V,SAC/B,KAAK,SAAU,MAAO2V,GAAM7V,MAC5B,KAAK,WAAY,MAAO6V,GAAM9V,QAC9B,KAAK,SAAU,MAAO8V,GAAMjG,MAC5B,KAAK,MAAO,MAAOiG,GAAMpf,GACzB,KAAK,SAAU,MAAOof,GAAM9e,MAC5B,KAAK,QAAS,MAAO8e,GAAM/X,KAC3B,KAAK,SAAU,MAAO+X,GAAM/F,MAC5B,KAAK,OAAQ,MAAO+F,GAAMlY,IAC1B,KAAK,QAAS,MAAOkY,GAAM7F,KAC3B,KAAK,OAAQ,MAAO6F,GAAM7C,IAC1B,KAAK,MAAO,MAAO6C,GAAM3F,GACzB,KAAK,OAAQ,MAAO2F,GAAMqU,IAC1B,KAAK,SAAU,MAAOrU,GAAM2K,MAC5B,KAAK,MAAO,MAAO3K,GAAMsX,GACzB,KAAK,OAAQ,MAAOtX,GAAMuX,IAC1B,KAAK,QAAS,MAAOvX,GAAMzF,KAC3B,KAAK,OAAQ,MAAOyF,GAAMwX,IAC1B,KAAK,QAAS,MAAOxX,GAAMyX,KAC3B,SAAS,MAAOzX,GAAM0X,SAI1B,QAAAC,GAAiCC,GAC/B,OAAQA,GACN,IAAK5X,GAAMpV,SACX,IAAKoV,GAAMkW,GACX,IAAKlW,GAAMxe,YACX,IAAKwe,GAAMjX,QACX,IAAKiX,GAAMyW,OACX,IAAKzW,GAAM6W,KACX,IAAK7W,GAAMtf,IACX,IAAKsf,GAAMiX,GACX,IAAKjX,GAAMkX,MACX,IAAKlX,GAAMmX,OACX,IAAKnX,GAAMpX,UACX,IAAKoX,GAAM9V,SACX,IAAK8V,GAAMpf,IACX,IAAKof,GAAMqU,KACT,OAAO,CACT,SACE,OAAO,GArFGrU,EAAAiW,YAAWA,EAmEXjW,EAAA2X,iBAAgBA,GArEjB3X,EAAArsC,EAAAqsC,QAAArsC,EAAAqsC,UA4FjB,IAAAjgB,GAAA,WAUE,QAAAA,GAAYpK,EAAgBM,EAAYC,GAyCxCjiB,KAAAo6B,aAAsB,EAxCpBp6B,KAAK0hB,OAASA,EACd1hB,KAAKgiB,MAAQA,EACbhiB,KAAKiiB,IAAMA,EAuCf,MApCS6J,GAAA/J,KAAP,SAAY6hC,EAAUjgC,GACpB,GAAIigC,EAAEliC,QAAUiC,EAAEjC,OAChB,KAAM,IAAI5F,OAAM,kBAClB,OAAO,IAAIgQ,GAAM83B,EAAEliC,OAAQkiC,EAAE5hC,MAAQ2B,EAAE3B,MAAQ4hC,EAAE5hC,MAAQ2B,EAAE3B,MAAO4hC,EAAE3hC,IAAM0B,EAAE1B,IAAM2hC,EAAE3hC,IAAM0B,EAAE1B,MAG9FlhB,OAAAC,eAAI8qB,EAAAtqB,UAAA,WR68QEL,IQ78QN,WAAuB,MAAO,IAAI2qB,GAAM9rB,KAAK0hB,OAAQ1hB,KAAKgiB,MAAOhiB,KAAKgiB,QR88QhE9gB,YAAY,EACZD,cAAc,IQ98QpBF,OAAAC,eAAI8qB,EAAAtqB,UAAA,SRi9QEL,IQj9QN,WAAqB,MAAO,IAAI2qB,GAAM9rB,KAAK0hB,OAAQ1hB,KAAKiiB,IAAKjiB,KAAKiiB,MRk9Q5D/gB,YAAY,EACZD,cAAc,IQj9QpBF,OAAAC,eAAI8qB,EAAAtqB,UAAA,QRo9QEL,IQp9QN,WAIE,IAHA,GAAIwgB,GAAO3hB,KAAK0hB,OAAOC,KACnBkiC,EAAM7jD,KAAKgiB,MACXH,EAAO,EACJgiC,KAAQ,GACW,IAApBliC,EAAKhf,WAAWkhD,IAClBhiC,GACJ,OAAOA,IRs9QH3gB,YAAY,EACZD,cAAc,IQp9QpBF,OAAAC,eAAI8qB,EAAAtqB,UAAA,URu9QEL,IQv9QN,WAIE,IAHA,GAAIwgB,GAAO3hB,KAAK0hB,OAAOC,KACnBkiC,EAAM7jD,KAAKgiB,MACXF,EAAS,EACN+hC,KAAQ,GACW,IAApBliC,EAAKhf,WAAWkhD,IAEpB/hC,GAEF,OAAOA,IRy9QH5gB,YAAY,EACZD,cAAc,IQv9QpB6qB,EAAAtqB,UAAAigB,SAAA,WACE,MAAOzhB,MAAK0hB,OAAOC,KAAKS,UAAUpiB,KAAKgiB,MAAOhiB,KAAKiiB,MAIvD6J,IApDapsB,GAAAosB,OAwDb,IAAAg4B,GAAA,SAAAt+B,GAgBE,QAAAs+B,GAAYpiC,EAAgBwB,OAAA,KAAAA,MAAA,KAA5B,IAAAuC,GACED,EAAAhlB,KAAAR,KAAMkjB,IAAYljB,IAdpBylB,GAAAxD,IAAW,EAEXwD,EAAAo+B,IAAW,EACXp+B,EAAAk+B,OAAgB,EAChBl+B,EAAAs+B,SAAgB,EAEhBt+B,EAAAu+B,UAAiB,EACjBv+B,EAAAw+B,aAAsB,EACtBx+B,EAAAy+B,eAAsB,EAEtBz+B,EAAA0+B,WAAoB,EACpB1+B,EAAA2+B,oBAA2B,EAIzB3+B,EAAK/D,OAASA,EACd+D,EAAKo+B,IAAM,EACXp+B,EAAKxD,IAAMP,EAAOC,KAAK3f,OACvByjB,EAAKvC,YAAcA,GAA4B,GAAIxf,MAEnD,IAAIie,GAAOD,EAAOC,IAOlB,IAJI8D,EAAKo+B,IAAMp+B,EAAKxD,KAAgC,OAAzBN,EAAKhf,WAAW8iB,EAAKo+B,QAC5Cp+B,EAAKo+B,IAGLp+B,EAAKo+B,IAAM,EAAIp+B,EAAKxD,KAAgC,IAAzBN,EAAKhf,WAAW8iB,EAAKo+B,MAAsD,IAA7BliC,EAAKhf,WAAW8iB,EAAKo+B,IAAM,GAEtG,IADAp+B,EAAKo+B,KAAO,EACLp+B,EAAKo+B,IAAMp+B,EAAKxD,KAAgC,IAAzBN,EAAKhf,WAAW8iB,EAAKo+B,QAC/Cp+B,EAAKo+B,GRk9QP,OAAOp+B,GQ1rPf,MAzzB+BlC,GAAAugC,EAAAt+B,GAsC7Bs+B,EAAAtiD,UAAAyiB,KAAA,SAAKogC,GAEH,WAFG,KAAAA,OAAA,GACHrkD,KAAKmkD,WAAa,EACXnkD,KAAK2jD,MAAQ3jD,KAAKskD,WAAWD,IAG9BP,EAAAtiD,UAAA8iD,WAAR,SAAmBD,EAAgCE,OAAhC,KAAAF,OAAA,OAAgC,KAAAE,MAAyBhoC,IAAIC,UAE9E,KADA,GAAImF,GAAO3hB,KAAK0hB,OAAOC,OACV,CACX,GAAI3hB,KAAK6jD,KAAO7jD,KAAKiiB,IACnB,MAAO8pB,GAAMyY,SAEfxkD,MAAK+jD,SAAW/jD,KAAK6jD,GACrB,IAAInjD,GAAIihB,EAAKhf,WAAW3C,KAAK6jD,IAC7B,QAAQnjD,GAEN,UACQV,KAAK6jD,IAAM7jD,KAAKiiB,KAAgC,IAAzBN,EAAKhf,WAAW3C,KAAK6jD,QAC9C7jD,KAAK6jD,GACT,MAEF,SACA,OACA,QACA,QACA,UACI7jD,KAAK6jD,GACP,MAEF,SAEE,QADE7jD,KAAK6jD,IACHU,EAAoB,GAAKvkD,KAAK6jD,IAAM7jD,KAAKiiB,KAAgC,IAAzBN,EAAKhf,WAAW3C,KAAK6jD,QACrE7jD,KAAK6jD,IACHU,EAAoB,GAAKvkD,KAAK6jD,IAAM7jD,KAAKiiB,KAAgC,IAAzBN,EAAKhf,WAAW3C,KAAK6jD,QACrE7jD,KAAK6jD,IACA9X,EAAMgC,2BAERhC,EAAMiC,oBAERjC,EAAMwK,WAEf,SACA,QACA,QACE,MAAOxK,GAAM0Y,aAEf,SAEE,QADEzkD,KAAK6jD,IACHU,EAAoB,GAAKvkD,KAAK6jD,IAAM7jD,KAAKiiB,KAAgC,IAAzBN,EAAKhf,WAAW3C,KAAK6jD,QACrE7jD,KAAK6jD,IACA9X,EAAM6D,gBAER7D,EAAM8D,OAEf,SAEE,KADE7vC,KAAK6jD,IACHU,EAAoB,GAAKvkD,KAAK6jD,IAAM7jD,KAAKiiB,IAAK,CAChD,GAA6B,IAAzBN,EAAKhf,WAAW3C,KAAK6jD,KAEvB,QADE7jD,KAAK6jD,IACA9X,EAAMwF,mBAEf,IAA6B,IAAzB5vB,EAAKhf,WAAW3C,KAAK6jD,KAEvB,QADE7jD,KAAK6jD,IACA9X,EAAM6E,iBAGjB,MAAO7E,GAAM8E,SAEf,SAEE,QADE7wC,KAAK6jD,IACA9X,EAAM2Y,SAEf,SAEE,QADE1kD,KAAK6jD,IACA9X,EAAM4Y,UAEf,SAEE,KADE3kD,KAAK6jD,IACHU,EAAoB,GAAKvkD,KAAK6jD,IAAM7jD,KAAKiiB,IAAK,CAChD,GAA6B,IAAzBN,EAAKhf,WAAW3C,KAAK6jD,KAEvB,QADE7jD,KAAK6jD,IACA9X,EAAM+C,eAEf,IAA6B,IAAzBntB,EAAKhf,WAAW3C,KAAK6jD,KAEvB,QADE7jD,KAAK6jD,IACHU,EAAoB,GAAKvkD,KAAK6jD,IAAM7jD,KAAKiiB,KAAgC,IAAzBN,EAAKhf,WAAW3C,KAAK6jD,QACrE7jD,KAAK6jD,IACA9X,EAAM6Y,0BAER7Y,EAAM8Y,kBAGjB,MAAO9Y,GAAMgD,QAEf,SAEE,KADE/uC,KAAK6jD,IACHU,EAAoB,GAAKvkD,KAAK6jD,IAAM7jD,KAAKiiB,IAAK,CAChD,GAA6B,IAAzBN,EAAKhf,WAAW3C,KAAK6jD,KAEvB,QADE7jD,KAAK6jD,IACA9X,EAAMiK,SAEf,IAA6B,IAAzBr0B,EAAKhf,WAAW3C,KAAK6jD,KAEvB,QADE7jD,KAAK6jD,IACA9X,EAAMoC,YAGjB,MAAOpC,GAAMqC,IAEf,SAEE,QADEpuC,KAAK6jD,IACA9X,EAAMlD,KAEf,SAEE,KADE7oC,KAAK6jD,IACHU,EAAoB,GAAKvkD,KAAK6jD,IAAM7jD,KAAKiiB,IAAK,CAChD,GAA6B,IAAzBN,EAAKhf,WAAW3C,KAAK6jD,KAEvB,QADE7jD,KAAK6jD,IACA9X,EAAMmK,WAEf,IAA6B,IAAzBv0B,EAAKhf,WAAW3C,KAAK6jD,KAEvB,QADE7jD,KAAK6jD,IACA9X,EAAMyC,aAGjB,MAAOzC,GAAM0C,KAEf,SAEE,KADEzuC,KAAK6jD,IACHU,EAAoB,GAAKvkD,KAAK6jD,IAAM7jD,KAAKiiB,IAAK,CAChD,GAAIC,EAAA4iC,eAAenjC,EAAKhf,WAAW3C,KAAK6jD,MAEtC,QADE7jD,KAAK6jD,IACA9X,EAAMgZ,YAEf,IAAIR,EAAoB,GAA8B,IAAzB5iC,EAAKhf,WAAW3C,KAAK6jD,MAAwB7jD,KAAK6jD,IAAM,EAAI7jD,KAAKiiB,KAAoC,IAA7BN,EAAKhf,WAAW3C,KAAK6jD,IAAM,GAE9H,MADA7jD,MAAK6jD,KAAO,EACL9X,EAAMiZ,YAGjB,MAAOjZ,GAAMkZ,GAEf,SAEE,KADEjlD,KAAK6jD,IACHU,EAAoB,GAAKvkD,KAAK6jD,IAAM7jD,KAAKiiB,IAAK,CAChD,GAA6B,IAAzBN,EAAKhf,WAAW3C,KAAK6jD,KAAwB,CAI/C,IAHI7jD,KAAK6jD,IAAM,EAAI7jD,KAAKiiB,KAAON,EAAKhf,WAAW3C,KAAK6jD,IAAM,KAGjD7jD,KAAK6jD,IAAM7jD,KAAKiiB,MACnBC,EAAAC,YAAYR,EAAKhf,WAAW3C,KAAK6jD,QAGvC,SAEF,GAA6B,IAAzBliC,EAAKhf,WAAW3C,KAAK6jD,KAA2B,CAElD,IADA,GAAIqB,IAAS,IACJllD,KAAK6jD,IAAM7jD,KAAKiiB,KAEvB,GAAK,KADLvhB,EAAIihB,EAAKhf,WAAW3C,KAAK6jD,OACK7jD,KAAK6jD,IAAM,EAAI7jD,KAAKiiB,KAAoC,IAA7BN,EAAKhf,WAAW3C,KAAK6jD,IAAM,GAAsB,CACxG7jD,KAAK6jD,KAAO,EACZqB,GAAS,CACT,OAGCA,GACHllD,KAAKojB,MAAMmB,EAAAhC,eAAe4iC,YAAanlD,KAAKqhB,MAAMrhB,KAAK6jD,KAAM,KAC/D,UAEF,GAA6B,IAAzBliC,EAAKhf,WAAW3C,KAAK6jD,KAEvB,QADE7jD,KAAK6jD,IACA9X,EAAMqD,aAGjB,MAAOrD,GAAMsD,KAEf,SACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACE,MAAOrvC,MAAKolD,cACRrZ,EAAMsZ,eACNtZ,EAAMgZ,YAEZ,SAEE,QADE/kD,KAAK6jD,IACA9X,EAAMuZ,KAEf,SAEE,QADEtlD,KAAK6jD,IACA9X,EAAMwZ,SAEf,SAEE,KADEvlD,KAAK6jD,IACHU,EAAoB,GAAKvkD,KAAK6jD,IAAM7jD,KAAKiiB,IAAK,CAChD,GAA6B,IAAzBN,EAAKhf,WAAW3C,KAAK6jD,KAEvB,QADE7jD,KAAK6jD,IACHU,EAAoB,GAAKvkD,KAAK6jD,IAAM7jD,KAAKiiB,KAAgC,IAAzBN,EAAKhf,WAAW3C,KAAK6jD,QACrE7jD,KAAK6jD,IACA9X,EAAMmE,0BAERnE,EAAMoE,iBAEf,IAA6B,IAAzBxuB,EAAKhf,WAAW3C,KAAK6jD,KAEvB,QADE7jD,KAAK6jD,IACA9X,EAAMe,gBAGjB,MAAOf,GAAMC,QAEf,SAEE,KADEhsC,KAAK6jD,IACHU,EAAoB,GAAKvkD,KAAK6jD,IAAM7jD,KAAKiiB,IAAK,CAChD,GAA6B,IAAzBN,EAAKhf,WAAW3C,KAAK6jD,KAEvB,QADE7jD,KAAK6jD,IACHU,EAAoB,GAAKvkD,KAAK6jD,IAAM7jD,KAAKiiB,KAAgC,IAAzBN,EAAKhf,WAAW3C,KAAK6jD,QACrE7jD,KAAK6jD,IACA9X,EAAM6B,sBAER7B,EAAM8B,aAEf,IAA6B,IAAzBlsB,EAAKhf,WAAW3C,KAAK6jD,KAEvB,QADE7jD,KAAK6jD,IACA9X,EAAMyZ,mBAGjB,MAAOzZ,GAAMkC,MAEf,SAEE,KADEjuC,KAAK6jD,IACHU,EAAoB,GAAKvkD,KAAK6jD,IAAM7jD,KAAKiiB,IAAK,CAChD,GAA6B,IAAzBN,EAAKhf,WAAW3C,KAAK6jD,KAA8B,CAErD,KADE7jD,KAAK6jD,IACHU,EAAoB,GAAKvkD,KAAK6jD,IAAM7jD,KAAKiiB,IAAK,CAChD,GAA6B,IAAzBN,EAAKhf,WAAW3C,KAAK6jD,KAEvB,QADE7jD,KAAK6jD,IACHU,EAAoB,GAAKvkD,KAAK6jD,IAAM7jD,KAAKiiB,KAAgC,IAAzBN,EAAKhf,WAAW3C,KAAK6jD,QACrE7jD,KAAK6jD,IACA9X,EAAM2E,4CAER3E,EAAM4E,mCAEf,IAA6B,IAAzBhvB,EAAKhf,WAAW3C,KAAK6jD,KAEvB,QADE7jD,KAAK6jD,IACA9X,EAAMsE,+BAGjB,MAAOtE,GAAMuE,wBAEf,GAA6B,IAAzB3uB,EAAKhf,WAAW3C,KAAK6jD,KAEvB,QADE7jD,KAAK6jD,IACA9X,EAAMsB,mBAGjB,MAAOtB,GAAMQ,WAEf,SAEE,QADEvsC,KAAK6jD,IACA9X,EAAM0Z,QAEf,SAEE,QADEzlD,KAAK6jD,IACA9X,EAAM2Z,WAEf,SAEE,QADE1lD,KAAK6jD,IACA9X,EAAM4Z,YAEf,SAEE,QADE3lD,KAAK6jD,IACHU,EAAoB,GAAKvkD,KAAK6jD,IAAM7jD,KAAKiiB,KAAgC,IAAzBN,EAAKhf,WAAW3C,KAAK6jD,QACrE7jD,KAAK6jD,IACA9X,EAAMoF,cAERpF,EAAMqF,KAEf,UAEE,QADEpxC,KAAK6jD,IACA9X,EAAM6Z,SAEf,UAEE,KADE5lD,KAAK6jD,IACHU,EAAoB,GAAKvkD,KAAK6jD,IAAM7jD,KAAKiiB,IAAK,CAChD,GAA6B,KAAzBN,EAAKhf,WAAW3C,KAAK6jD,KAEvB,QADE7jD,KAAK6jD,IACA9X,EAAMyF,OAEf,IAA6B,IAAzB7vB,EAAKhf,WAAW3C,KAAK6jD,KAEvB,QADE7jD,KAAK6jD,IACA9X,EAAMgF,WAGjB,MAAOhF,GAAMiF,GAEf,UAEE,QADEhxC,KAAK6jD,IACA9X,EAAM8Z,UAEf,UAEE,QADE7lD,KAAK6jD,IACA9X,EAAMyK,KAEf,SAEE,QADEx2C,KAAK6jD,IACA9X,EAAM+Z,EAEf,SACE,GAAI5jC,EAAA6jC,kBAAkBrlD,GAAI,CACxB,GAAIwhB,EAAA8jC,mBAAmBtlD,GAAI,CAEzB,IADA,GAAIulD,GAAYjmD,KAAK6jD,MACZ7jD,KAAK6jD,IAAM7jD,KAAKiiB,KAAOC,EAAAgkC,iBAAiBxlD,EAAIihB,EAAKhf,WAAW3C,KAAK6jD,OACxE,IAAK3hC,EAAA8jC,mBAAmBtlD,GAEtB,MADAV,MAAK6jD,IAAMoC,EACJla,EAAM7X,UAGjB,IAAIiyB,GAAcxkC,EAAKS,UAAU6jC,EAAWjmD,KAAK6jD,KAC7CuC,EAAera,EAAMiW,YAAYmE,EACrC,MAAIC,GAAgBra,EAAM0X,SAAaY,GAAoBtY,EAAM2X,iBAAiB0C,IAChF,MAAOA,EACTpmD,MAAK6jD,IAAMoC,EAEb,MAAOla,GAAM7X,WACR,GAAIhS,EAAAmkC,aAAa3lD,GAAI,GACxBV,KAAK6jD,GACP,OAIF,MAFA7jD,MAAKojB,MAAMmB,EAAAhC,eAAe+jC,kBAAmBtmD,KAAKqhB,MAAMrhB,KAAK6jD,IAAK7jD,KAAK6jD,IAAM,MAC3E7jD,KAAK6jD,IACA9X,EAAM0X,WAKrBK,EAAAtiD,UAAA+kD,KAAA,SAAKC,EAA8BnC,EAAgCE,OAA9D,KAAAiC,OAAA,OAA8B,KAAAnC,OAAA,OAAgC,KAAAE,MAAyBhoC,IAAIC,UAC9F,IAAImF,GAAO3hB,KAAK0hB,OAAOC,IACvB,IAAI3hB,KAAKmkD,UAAY,EAAG,CACtB,GAAI8B,GAAYjmD,KAAK6jD,IACjB4C,EAAczmD,KAAK2jD,MACnB+C,EAAiB1mD,KAAK+jD,QAE1B,IADA/jD,KAAKmkD,UAAYnkD,KAAKskD,WAAWD,EAAkBE,GAC/CiC,EAEF,IADAxmD,KAAKokD,oBAAqB,IACjBpkD,KAAK+jD,SAAWkC,GACvB,GAAI/jC,EAAAC,YAAYR,EAAKhf,WAAW3C,KAAK+jD,WAAY,CAC/C/jD,KAAKokD,oBAAqB,CAC1B,OAINpkD,KAAK6jD,IAAMoC,EACXjmD,KAAK2jD,MAAQ8C,EACbzmD,KAAK+jD,SAAW2C,EAElB,MAAO1mD,MAAKmkD,WAGdL,EAAAtiD,UAAAmlD,KAAA,SAAKhD,GACH,GAAIsC,GAAYjmD,KAAK6jD,IACjB4C,EAAczmD,KAAK2jD,MACnB+C,EAAiB1mD,KAAK+jD,SACtBQ,EAAoBhoC,IAAIC,SAC5B,QAAQmnC,GACN,IAAK5X,GAAMQ,YACTgY,EAAoB,EAGxB,OAAKvkD,KAAK2jD,MAAQ3jD,KAAKskD,WAAWX,GAAS5X,EAAM7X,WAAYqwB,KAAuBZ,GAClF3jD,KAAKmkD,WAAa,GACX,IAEPnkD,KAAK6jD,IAAMoC,EACXjmD,KAAK2jD,MAAQ8C,EACbzmD,KAAK+jD,SAAW2C,GACT,IAeX5C,EAAAtiD,UAAAolD,KAAA,WACE5mD,KAAKgkD,UAAYhkD,KAAK6jD,IACtB7jD,KAAKikD,YAAcjkD,KAAK2jD,MACxB3jD,KAAKkkD,eAAiBlkD,KAAK+jD,UAG7BD,EAAAtiD,UAAAqlD,MAAA,WACE7mD,KAAK6jD,IAAM7jD,KAAKgkD,UAChBhkD,KAAK2jD,MAAQ3jD,KAAKikD,YAClBjkD,KAAK+jD,SAAW/jD,KAAKkkD,eACrBlkD,KAAKmkD,WAAa,GAGpBL,EAAAtiD,UAAA6f,MAAA,SAAMW,EAAiBC,GAMrB,WANI,KAAAD,OAAc,OAAG,KAAAC,OAAY,GAC7BD,EAAQ,GACVA,EAAQhiB,KAAK+jD,SACb9hC,EAAMjiB,KAAK6jD,KACF5hC,EAAM,IACfA,EAAMD,GACD,GAAI8J,GAAM9rB,KAAK0hB,OAAQM,EAAOC,IAGvC6hC,EAAAtiD,UAAAslD,eAAA,WAGE,IAFA,GAAInlC,GAAO3hB,KAAK0hB,OAAOC,KACnBK,EAAQhiB,KAAK6jD,MACR7jD,KAAK6jD,IAAM7jD,KAAKiiB,KAAOC,EAAAgkC,iBAAiBvkC,EAAKhf,WAAW3C,KAAK6jD,QACtE,MAAOliC,GAAKS,UAAUJ,EAAOhiB,KAAK6jD,MAGpCC,EAAAtiD,UAAA0B,WAAA,WAKE,IAJA,GAAIye,GAAO3hB,KAAK0hB,OAAOC,KACnBolC,EAAQplC,EAAKhf,WAAW3C,KAAK6jD,OAC7B7hC,EAAQhiB,KAAK6jD,IACbh0C,EAAS,KACA,CACX,GAAI7P,KAAK6jD,KAAO7jD,KAAKiiB,IAAK,CACxBpS,GAAU8R,EAAKS,UAAUJ,EAAOhiB,KAAK6jD,KACrC7jD,KAAKojB,MAAMmB,EAAAhC,eAAeykC,4BAA6BhnD,KAAKqhB,MAAMW,EAAQ,EAAGhiB,KAAKiiB,KAClF,OAEF,GAAIvhB,GAAIihB,EAAKhf,WAAW3C,KAAK6jD,IAC7B,IAAInjD,GAAKqmD,EAAO,CACdl3C,GAAU8R,EAAKS,UAAUJ,EAAOhiB,KAAK6jD,MACrC,OAEF,GAAK,IAADnjD,EAAJ,CAMA,GAAIwhB,EAAAC,YAAYzhB,GAAI,CAClBmP,GAAU8R,EAAKS,UAAUJ,EAAOhiB,KAAK6jD,KACrC7jD,KAAKojB,MAAMmB,EAAAhC,eAAeykC,4BAA6BhnD,KAAKqhB,MAAMW,EAAQ,EAAGhiB,KAAK6jD,KAClF,SAEA7jD,KAAK6jD,QAVLh0C,IAAU8R,EAAKS,UAAUJ,EAAOhiB,KAAK6jD,KACrCh0C,GAAU7P,KAAKinD,qBACfjlC,EAAQhiB,KAAK6jD,IAUjB,MAAOh0C,IAGTi0C,EAAAtiD,UAAAylD,mBAAA,WACE,KAAMjnD,KAAK6jD,KAAO7jD,KAAKiiB,IAErB,MADAjiB,MAAKojB,MAAMmB,EAAAhC,eAAe2kC,uBAAwBlnD,KAAKqhB,MAAMrhB,KAAKiiB,MAC3D,EAGT,IAAIN,GAAO3hB,KAAK0hB,OAAOC,KACnBjhB,EAAIihB,EAAKhf,WAAW3C,KAAK6jD,MAC7B,QAAQnjD,GAEN,QACE,MAAO,IAET,SACE,MAAO,IAET,UACE,MAAO,IAET,UACE,MAAO,IAET,UACE,MAAO,IAET,UACE,MAAO,IAET,UACE,MAAO,IAET,SACE,MAAO,GAET,SACE,MAAO,GAET,UACE,MAAIV,MAAK6jD,IAAM7jD,KAAKiiB,KAAgC,KAAzBN,EAAKhf,WAAW3C,KAAK6jD,QAC5C7jD,KAAK6jD,IACA7jD,KAAKmnD,6BAEPnnD,KAAKonD,mBAGd,SACMpnD,KAAK6jD,IAAM7jD,KAAKiiB,KAAgC,IAAzBN,EAAKhf,WAAW3C,KAAK6jD,QAC5C7jD,KAAK6jD,GAGX,SACA,UACA,UACE,MAAO,EACT,SACE,MAAOjgD,QAAOyjD,aAAa3mD,KAIjCojD,EAAAtiD,UAAA8lD,kBAAA,WAIE,IAHA,GAAI3lC,GAAO3hB,KAAK0hB,OAAOC,KACnBK,EAAQhiB,KAAK6jD,IACb0D,GAAU,IACD,CACX,GAAIvnD,KAAK6jD,KAAO7jD,KAAKiiB,IAAK,CACxBjiB,KAAKojB,MAAMmB,EAAAhC,eAAeilC,wCAAyCxnD,KAAKqhB,MAAMW,EAAOhiB,KAAKiiB,KAC1F,OAEF,GAA6B,IAAzBN,EAAKhf,WAAW3C,KAAK6jD,KAAzB,CAKA,GAAInjD,GAAIihB,EAAKhf,WAAW3C,KAAK6jD,IAC7B,IAAK,IAADnjD,IAAwB6mD,EAC1B,KACF,IAAIrlC,EAAAC,YAAYzhB,GAAI,CAClBV,KAAKojB,MAAMmB,EAAAhC,eAAeilC,wCAAyCxnD,KAAKqhB,MAAMW,EAAOhiB,KAAK6jD,KAC1F,SAEA7jD,KAAK6jD,IACP0D,GAAU,QAZNvnD,KAAK6jD,IACP0D,GAAU,EAad,MAAO5lC,GAAKS,UAAUJ,EAAOhiB,KAAK6jD,MAGpCC,EAAAtiD,UAAAimD,gBAAA,WAIE,IAHA,GAAI9lC,GAAO3hB,KAAK0hB,OAAOC,KACnBK,EAAQhiB,KAAK6jD,IACbrvB,EAAQ,EACLx0B,KAAK6jD,IAAM7jD,KAAKiiB,KAAK,CAC1B,GAAIvhB,GAASihB,EAAKhf,WAAW3C,KAAK6jD,IAClC,KAAK3hC,EAAAgkC,iBAAiBxlD,GACpB,KAEF,UADEV,KAAK6jD,IACCnjD,GAGN,SACE8zB,GAAiB,EAARA,GAAa,EAAI,CAC1B,MACF,UACEA,GAAiB,EAARA,GAAa,EAAI,CAC1B,MACF,UACEA,GAAiB,EAARA,GAAa,EAAI,CAC1B,MAEF,SACEA,GAAS,GAMf,OAFc,GAAVA,GACFx0B,KAAKojB,MAAMmB,EAAAhC,eAAemlC,iCAAkC1nD,KAAKqhB,MAAMW,EAAOhiB,KAAK6jD,MAC9EliC,EAAKS,UAAUJ,EAAOhiB,KAAK6jD,MAGpCC,EAAAtiD,UAAA4jD,YAAA,WACE,GAAIzjC,GAAO3hB,KAAK0hB,OAAOC,IACvB,IAA6B,IAAzBA,EAAKhf,WAAW3C,KAAK6jD,MAAuB7jD,KAAK6jD,IAAM,EAAI7jD,KAAKiiB,IAClE,OAAQN,EAAKhf,WAAW3C,KAAK6jD,IAAM,IACjC,QACA,SACA,QACA,QACA,QACA,SACE,OAAO,EAIb,IADA,GAAIA,GAAM7jD,KAAK6jD,IACRA,EAAM7jD,KAAKiiB,KAAK,CACrB,GAAIvhB,GAAIihB,EAAKhf,WAAWkhD,EACxB,IAAK,IAADnjD,GAAsB,IAADA,GAAoB,KAADA,EAC1C,OAAO,CACT,IAAIA,EAAC,IAAkBA,EAAC,GACtB,KACFmjD,KAEF,OAAO,GAGTC,EAAAtiD,UAAAmmD,YAAA,WACE,GAAIhmC,GAAO3hB,KAAK0hB,OAAOC,IACvB,IAA6B,IAAzBA,EAAKhf,WAAW3C,KAAK6jD,MAAuB7jD,KAAK6jD,IAAM,EAAI7jD,KAAKiiB,IAAK,CACvE,OAAQN,EAAKhf,WAAW3C,KAAK6jD,IAAM,IACjC,QACA,SAEE,MADA7jD,MAAK6jD,KAAO,EACL7jD,KAAK4nD,gBACd,SACA,QAEE,MADA5nD,MAAK6jD,KAAO,EACL7jD,KAAK6nD,mBACd,SACA,SAEE,MADA7nD,MAAK6jD,KAAO,EACL7jD,KAAK8nD,mBAEhB,GAAI5lC,EAAA6lC,aAAapmC,EAAKhf,WAAW3C,KAAK6jD,IAAM,IAAK,CAC/C,GAAI7hC,GAAQhiB,KAAK6jD,MACf7jD,KAAK6jD,GACP,IAAI//C,GAAQ9D,KAAK8nD,kBAEjB,OADA9nD,MAAKojB,MAAMmB,EAAAhC,eAAeylC,8CAA+ChoD,KAAKqhB,MAAMW,EAAOhiB,KAAK6jD,MACzF//C,GAGX,MAAO9D,MAAKioD,sBAGdnE,EAAAtiD,UAAAomD,eAAA,WAKE,IAJA,GAAIjmC,GAAO3hB,KAAK0hB,OAAOC,KACnBK,EAAQhiB,KAAK6jD,IACb//C,EAAQ6xB,QAAQ,EAAG,GACnBuyB,EAASvyB,QAAQ,GAAI,GAClB31B,KAAK6jD,IAAM7jD,KAAKiiB,KAAK,CAC1B,GAAIvhB,GAAIihB,EAAKhf,WAAW3C,KAAK6jD,IAC7B,IAAInjD,GAAC,IAAmBA,GAAC,GAEvBoD,EAAQ+gC,QAAQsjB,QAAQrkD,EAAOokD,GAASvyB,QAAQj1B,EAAC,GAAgB,QAC3D,IAAIA,GAAC,IAAkBA,GAAC,GAE9BoD,EAAQ+gC,QAAQsjB,QAAQrkD,EAAOokD,GAASvyB,QAAQ,GAAKj1B,EAAC,GAAe,QAChE,MAAIA,GAAC,IAAkBA,GAAC,KAI7B,KAFAoD,GAAQ+gC,QAAQsjB,QAAQrkD,EAAOokD,GAASvyB,QAAQ,GAAKj1B,EAAC,GAAe,MAGrEV,KAAK6jD,IAIT,MAFI7jD,MAAK6jD,KAAO7hC,GACdhiB,KAAKojB,MAAMmB,EAAAhC,eAAe6lC,2BAA4BpoD,KAAKqhB,MAAMW,IAC5Dle,GAGTggD,EAAAtiD,UAAAymD,mBAAA,WAKE,IAJA,GAAItmC,GAAO3hB,KAAK0hB,OAAOC,KACnBK,EAAQhiB,KAAK6jD,IACb//C,EAAQ6xB,QAAQ,EAAG,GACnB0yB,EAAS1yB,QAAQ,GAAI,GAClB31B,KAAK6jD,IAAM7jD,KAAKiiB,KAAK,CAC1B,GAAIvhB,GAAIihB,EAAKhf,WAAW3C,KAAK6jD,IAC7B,MAAInjD,GAAC,IAAmBA,GAAC,IAIvB,KAFAoD,GAAQ+gC,QAAQsjB,QAAQrkD,EAAOukD,GAAS1yB,QAAQj1B,EAAC,GAAgB,MAGjEV,KAAK6jD,IAIT,MAFI7jD,MAAK6jD,KAAO7hC,GACdhiB,KAAKojB,MAAMmB,EAAAhC,eAAe+lC,eAAgBtoD,KAAKqhB,MAAMW,IAChDle,GAGTggD,EAAAtiD,UAAAsmD,iBAAA,WAKE,IAJA,GAAInmC,GAAO3hB,KAAK0hB,OAAOC,KACnBK,EAAQhiB,KAAK6jD,IACb//C,EAAQ6xB,QAAQ,EAAG,GACnB4yB,EAAQ5yB,QAAQ,EAAG,GAChB31B,KAAK6jD,IAAM7jD,KAAKiiB,KAAK,CAC1B,GAAIvhB,GAAIihB,EAAKhf,WAAW3C,KAAK6jD,IAC7B,MAAInjD,GAAC,IAAmBA,GAAC,IAIvB,KAFAoD,GAAQ+gC,QAAQsjB,QAAQrkD,EAAOykD,GAAQ5yB,QAAQj1B,EAAC,GAAgB,MAGhEV,KAAK6jD,IAIT,MAFI7jD,MAAK6jD,KAAO7hC,GACdhiB,KAAKojB,MAAMmB,EAAAhC,eAAeimC,qBAAsBxoD,KAAKqhB,MAAMW,IACtDle,GAGTggD,EAAAtiD,UAAAqmD,kBAAA,WAME,IALA,GAAIlmC,GAAO3hB,KAAK0hB,OAAOC,KACnBK,EAAQhiB,KAAK6jD,IACb//C,EAAQ6xB,QAAQ,EAAG,GACnB8yB,EAAQ9yB,QAAQ,EAAG,GACnB+yB,EAAQ/yB,QAAQ,EAAG,GAChB31B,KAAK6jD,IAAM7jD,KAAKiiB,KAAK,CAC1B,GAAIvhB,GAAIihB,EAAKhf,WAAW3C,KAAK6jD,IAC7B,IAAK,IAADnjD,EAEFoD,EAAQqkD,QAAQrkD,EAAO2kD,OAClB,IAAK,IAAD/nD,EAIT,KAFAoD,GAAQ+gC,QAAQsjB,QAAQrkD,EAAO2kD,GAAQC,KAGvC1oD,KAAK6jD,IAIT,MAFI7jD,MAAK6jD,KAAO7hC,GACdhiB,KAAKojB,MAAMmB,EAAAhC,eAAeomC,sBAAuB3oD,KAAKqhB,MAAMW,IACvDle,GAGTggD,EAAAtiD,UAAAonD,UAAA,WAGE,IAFA,GAAI5mC,GAAQhiB,KAAK6jD,IACbliC,EAAO3hB,KAAK0hB,OAAOC,KAChB3hB,KAAK6jD,IAAM7jD,KAAKiiB,KAAOC,EAAA4iC,eAAenjC,EAAKhf,WAAW3C,KAAK6jD,SAC9D7jD,KAAK6jD,GACT,IAAI7jD,KAAK6jD,IAAM7jD,KAAKiiB,KAAgC,IAAzBN,EAAKhf,WAAW3C,KAAK6jD,KAE9C,MADE7jD,KAAK6jD,IACA7jD,KAAK6jD,IAAM7jD,KAAKiiB,KAAOC,EAAA4iC,eAAenjC,EAAKhf,WAAW3C,KAAK6jD,SAC9D7jD,KAAK6jD,GAEX,IAAI7jD,KAAK6jD,IAAM7jD,KAAKiiB,IAAK,CACvB,GAAIvhB,GAAIihB,EAAKhf,WAAW3C,KAAK6jD,IAC7B,IAAK,IAADnjD,GAAoB,KAADA,EAGrB,MAFMV,KAAK6jD,IAAM7jD,KAAKiiB,MAAiC,IAAzBN,EAAKhf,WAAW3C,KAAK6jD,MAAmD,IAAzBliC,EAAKhf,WAAW3C,KAAK6jD,OAA0B3hC,EAAA4iC,eAAenjC,EAAKhf,WAAW3C,KAAK6jD,IAAM,OAClK7jD,KAAK6jD,IACF7jD,KAAK6jD,IAAM7jD,KAAKiiB,KAAOC,EAAA4iC,eAAenjC,EAAKhf,WAAW3C,KAAK6jD,SAC9D7jD,KAAK6jD,IAGb,MAAOgF,YAAWlnC,EAAKS,UAAUJ,EAAOhiB,KAAK6jD,OAG/CC,EAAAtiD,UAAA4lD,kBAAA,WAIE,IAHA,GAAI0B,GAAS,EACThlD,EAAQ,EACR6d,EAAO3hB,KAAK0hB,OAAOC,KAChB3hB,KAAK6jD,IAAM7jD,KAAKiiB,KAAK,CAC1B,GAAIvhB,GAAIihB,EAAKhf,WAAW3C,KAAK6jD,MAC7B,IAAInjD,GAAC,IAAmBA,GAAC,GACvBoD,EAAgB,GAARA,EAAapD,EAAC,OACnB,IAAIA,GAAC,IAAkBA,GAAC,GAC3BoD,EAAgB,GAARA,EAAa,GAAKpD,EAAC,OACxB,MAAIA,GAAC,IAAkBA,GAAC,KAI3B,MADAV,MAAKojB,MAAMmB,EAAAhC,eAAe6lC,2BAA4BpoD,KAAKqhB,MAAMrhB,KAAK6jD,IAAM,EAAG7jD,KAAK6jD,MAC7E,EAHP//C,GAAgB,GAARA,EAAa,GAAKpD,EAAC,GAK7B,GAAgB,KAAVooD,EACJ,MAEJ,MAAIA,IACF9oD,KAAKojB,MAAMmB,EAAAhC,eAAe2kC,uBAAwBlnD,KAAKqhB,MAAMrhB,KAAK6jD,MAC3D,IAEFjgD,OAAOyjD,aAAavjD,IAGrBggD,EAAAtiD,UAAA2lD,0BAAR,WACE,GAAInlC,GAAQhiB,KAAK6jD,IACb//C,EAAQ9D,KAAK4nD,iBACbmB,EAAU9vC,QAAQnV,GAClBklD,GAAU,CAEd9+B,SAAQhR,SAASpV,IACbilD,EAAU,UACZ/oD,KAAKojB,MAAMmB,EAAAhC,eAAe0mC,4EAA6EjpD,KAAKqhB,MAAMW,EAAOhiB,KAAK6jD,MAC9HmF,GAAU,EAGZ,IAAIrnC,GAAO3hB,KAAK0hB,OAAOC,IAWvB,OAVI3hB,MAAK6jD,KAAO7jD,KAAKiiB,KACnBjiB,KAAKojB,MAAMmB,EAAAhC,eAAe2kC,uBAAwBlnD,KAAKqhB,MAAMW,EAAOhiB,KAAKiiB,MACzE+mC,GAAU,GACwB,KAAzBrnC,EAAKhf,WAAW3C,KAAK6jD,OAC5B7jD,KAAK6jD,KAEP7jD,KAAKojB,MAAMmB,EAAAhC,eAAe2mC,qCAAsClpD,KAAKqhB,MAAMW,EAAOhiB,KAAK6jD,MACvFmF,GAAU,GAGRA,EACK,GACFD,EAAU,MACbnlD,OAAOyjD,aAAa0B,GACpBnlD,OAAOyjD,aAA+C,QAA/B0B,EAAU,OAAS,KAAO,IAAuBA,EAAU,OAAS,KAAO,QAE1GjF,GAzzB+Bv/B,EAAAtB,kBAAlBvjB,GAAAokD,aR8tSP,SAAUnkD,EAAQD,GSpiTxB,GAAAypD,EAGAA,GAAA,WACA,MAAAnpD,QAGA,KAEAmpD,KAAApxB,SAAA,qBAAAqxB,MAAA,QACC,MAAA/kC,GAED,gBAAAglC,UACAF,EAAAE,QAOA1pD,EAAAD,QAAAypD,GT2iTM,SAAUxpD,EAAQD,EAASS,GAEjC,YU/9SA,SAAAqiB,GAAuCjD,GACrC,OAAQA,GACN,IAAK,KAAK,MAAO,0BACjB,KAAK,KAAK,MAAO,sBACjB,KAAK,KAAK,MAAO,oGACjB,KAAK,KAAK,MAAO,qGACjB,KAAK,KAAK,MAAO,6CACjB,KAAK,KAAK,MAAO,mDACjB,KAAK,KAAK,MAAO,sCACjB,KAAK,KAAK,MAAO,iCACjB,KAAK,KAAK,MAAO,8DACjB,KAAK,KAAK,MAAO,+CACjB,KAAK,KAAK,MAAO,sCACjB,KAAK,KAAK,MAAO,mCACjB,KAAK,KAAK,MAAO,sDACjB,KAAK,MAAM,MAAO,8BAClB,KAAK,MAAM,MAAO,sBAClB,KAAK,MAAM,MAAO,iBAClB,KAAK,MAAM,MAAO,2CAClB,KAAK,MAAM,MAAO,6BAClB,KAAK,MAAM,MAAO,mBAClB,KAAK,MAAM,MAAO,oDAClB,KAAK,MAAM,MAAO,sDAClB,KAAK,MAAM,MAAO,2DAClB,KAAK,MAAM,MAAO,oCAClB,KAAK,MAAM,MAAO,iDAClB,KAAK,MAAM,MAAO,mDAClB,KAAK,MAAM,MAAO,qCAClB,KAAK,MAAM,MAAO,sCAClB,KAAK,MAAM,MAAO,8CAClB,KAAK,MAAM,MAAO,mDAClB,KAAK,MAAM,MAAO,wDAClB,KAAK,MAAM,MAAO,0CAClB,KAAK,MAAM,MAAO,6DAClB,KAAK,MAAM,MAAO,6DAClB,KAAK,MAAM,MAAO,0CAClB,KAAK,MAAM,MAAO,wDAClB,KAAK,MAAM,MAAO,sCAClB,KAAK,MAAM,MAAO,kFAClB,KAAK,MAAM,MAAO,yFAClB,KAAK,MAAM,MAAO,+DAClB,KAAK,MAAM,MAAO,sBAClB,KAAK,MAAM,MAAO,gBAClB,KAAK,MAAM,MAAO,0EAClB,KAAK,MAAM,MAAO,wBAClB,KAAK,MAAM,MAAO,gDAClB,KAAK,MAAM,MAAO,iBAClB,KAAK,MAAM,MAAO,6BAClB,KAAK,MAAM,MAAO,yBAClB,KAAK,MAAM,MAAO,oBAClB,KAAK,MAAM,MAAO,+BAClB,KAAK,MAAM,MAAO,yBAClB,KAAK,MAAM,MAAO,0BAClB,KAAK,MAAM,MAAO,gCAClB,KAAK,MAAM,MAAO,uBAClB,KAAK,MAAM,MAAO,2CAClB,KAAK,MAAM,MAAO,0CAClB,KAAK,MAAM,MAAO,wBAClB,KAAK,MAAM,MAAO,uBAClB,KAAK,MAAM,MAAO,2DAClB,KAAK,MAAM,MAAO,8EAClB,KAAK,MAAM,MAAO,uCAClB,KAAK,MAAM,MAAO,gCAClB,KAAK,MAAM,MAAO,kFAClB,KAAK,MAAM,MAAO,wCAClB,KAAK,MAAM,MAAO,6BAClB,KAAK,MAAM,MAAO,yBAClB,KAAK,MAAM,MAAO,4CAClB,KAAK,MAAM,MAAO,mDAClB,KAAK,MAAM,MAAO,4BAClB,KAAK,MAAM,MAAO,6CAClB,KAAK,MAAM,MAAO,2CAClB,KAAK,MAAM,MAAO,kDAClB,KAAK,MAAM,MAAO,oDAClB,KAAK,MAAM,MAAO,8CAClB,KAAK,MAAM,MAAO,8GAClB,KAAK,MAAM,MAAO,6EAClB,KAAK,MAAM,MAAO,mEAClB,KAAK,MAAM,MAAO,4FAClB,KAAK,MAAM,MAAO,yFAClB,KAAK,MAAM,MAAO,mDAClB,KAAK,MAAM,MAAO,wCAClB,KAAK,MAAM,MAAO,kFAClB,KAAK,MAAM,MAAO,uDAClB,KAAK,MAAM,MAAO,oCAClB,KAAK,MAAM,MAAO,kEAClB,KAAK,MAAM,MAAO,0EAClB,KAAK,MAAM,MAAO,sEAClB,KAAK,MAAM,MAAO,qDAClB,KAAK,MAAM,MAAO,sCAClB,KAAK,MAAM,MAAO,+CAClB,KAAK,MAAM,MAAO,2CAClB,KAAK,MAAM,MAAO,kIAClB,KAAK,MAAM,MAAO,+CAClB,KAAK,MAAM,MAAO,uBAClB,SAAS,MAAO,IVm4SpBxe,OAAOC,eAAetB,EAAS,cAAgBoE,OAAO,KUlkTtD,SAAYye,GACVA,IAAA,uDACAA,IAAA,+CACAA,IAAA,2LACAA,IAAA,6LACAA,IAAA,6EACAA,IAAA,yFACAA,IAAA,uEACAA,IAAA,qEACAA,IAAA,+HACAA,IAAA,iGACAA,IAAA,+EACAA,IAAA,yEACAA,IAAA,+FACAA,IAAA,gEACAA,IAAA,gDACAA,IAAA,gCACAA,IAAA,0FACAA,IAAA,8DACAA,IAAA,0CACAA,IAAA,4GACAA,IAAA,gHACAA,IAAA,0HACAA,IAAA,4EACAA,IAAA,sGACAA,IAAA,0GACAA,IAAA,wEACAA,IAAA,gFACAA,IAAA,gGACAA,IAAA,sGACAA,IAAA,gHACAA,IAAA,oFACAA,IAAA,8HACAA,IAAA,8HACAA,IAAA,wFACAA,IAAA,gHACAA,IAAA,gFACAA,IAAA,oKACAA,IAAA,kLACAA,IAAA,8HACAA,IAAA,gDACAA,IAAA,oCACAA,IAAA,gJACAA,IAAA,4CACAA,IAAA,oGACAA,IAAA,sCACAA,IAAA,8DACAA,IAAA,sDACAA,IAAA,4CACAA,IAAA,4DACAA,IAAA,sDACAA,IAAA,wDACAA,IAAA,oEACAA,IAAA,kDACAA,IAAA,wFACAA,IAAA,wFACAA,IAAA,oDACAA,IAAA,kDACAA,IAAA,0HACAA,IAAA,gKACAA,IAAA,kFACAA,IAAA,oEACAA,IAAA,kKACAA,IAAA,oFACAA,IAAA,sDACAA,IAAA,8CACAA,IAAA,4EACAA,IAAA,4FACAA,IAAA,oDACAA,IAAA,8EACAA,IAAA,kFACAA,IAAA,sGACAA,IAAA,0GACAA,IAAA,gFACAA,IAAA,sNACAA,IAAA,0JACAA,IAAA,sIACAA,IAAA,4LACAA,IAAA,sLACAA,IAAA,oGACAA,IAAA,oFACAA,IAAA,wKACAA,IAAA,kHACAA,IAAA,4EACAA,IAAA,gIACAA,IAAA,gJACAA,IAAA,gJACAA,IAAA,sGACAA,IAAA,sEACAA,IAAA,wFACAA,IAAA,gFACAA,IAAA,sQACAA,IAAA,kFACAA,IAAA,2CA7FU7iB,EAAA6iB,iBAAA7iB,EAAA6iB,oBAgGZ7iB,EAAA8iB,0BV0qTM,SAAU7iB,EAAQD,EAASS,GAEjC,YWpoTA,SAAAgiB,GAA4BzhB,GAC1B,OAAQA,GACN,QACA,QACA,UACA,UACE,OAAO,CACT,SACE,OAAO,GAKb,QAAA2lD,GAA6B3lD,GAC3B,OAAQA,GACN,QACA,OACA,QACA,QACA,SACA,SACA,UACA,UACA,UACA,WACA,WACE,OAAO,CACT,SACE,MAAOA,IAAC,MAAuBA,GAAC,MAKtC,QAAAokD,GAA+BpkD,GAC7B,MAAOA,IAAC,IAAmBA,GAAC,GAI9B,QAAAqnD,GAA6BrnD,GAC3B,MAAOA,IAAC,IAAmBA,GAAC,GAI9B,QAAAqlD,GAAkCrlD,GAChC,MAAOA,IAAC,IAAkBA,GAAC,IACpBA,GAAC,IAAkBA,GAAC,KACnB,IAADA,GACC,IAADA,GACAA,EAAI,KAAQ4oD,EAAyB5oD,GAI9C,QAAAslD,GAAmCtlD,GACjC,MAAOA,IAAC,IAAkBA,GAAC,IAI7B,QAAAwlD,GAAiCxlD,GAC/B,MAAOA,IAAC,IAAkBA,GAAC,IACpBA,GAAC,IAAkBA,GAAC,KACpBA,GAAC,IAAmBA,GAAC,IACpB,IAADA,GACC,IAADA,GACAA,EAAI,KAAQ6oD,EAAwB7oD,GA4I7C,QAAA8oD,GAA4BjqC,EAAWkqC,GACrC,GAAIlqC,EAAOkqC,EAAI,GACb,OAAO,CAMT,KAJA,GAEIC,GAFAn5C,EAAK,EACLC,EAAKi5C,EAAIznD,OAGNuO,EAAK,EAAIC,GAAI,CAGlB,GAFAk5C,EAAMn5C,GAAMC,EAAKD,GAAM,EACvBm5C,GAAOA,EAAM,EACTD,EAAIC,IAAQnqC,GAAQA,GAAQkqC,EAAIC,EAAM,GACxC,OAAO,CACLnqC,GAAOkqC,EAAIC,GACbl5C,EAAKk5C,EAELn5C,EAAKm5C,EAAM,EAEf,OAAO,EAGT,QAAAJ,GAAkC/pC,GAChC,QAAOA,EAAO,GAAKA,EAAO,QACnBiqC,EAAmBjqC,EAAaoqC,GAGzC,QAAAJ,GAAiChqC,GAC/B,QAAOA,EAAO,GAAKA,EAAO,QACnBiqC,EAAmBjqC,EAAaqqC,GXg6SzC7oD,OAAOC,eAAetB,EAAS,cAAgBoE,OAAO,KW9wTtD,SAAkB+lD,GAEhBA,IAAA,eACAA,IAAA,wBACAA,IAAA,oCACAA,IAAA,oCACAA,IAAA,8CACAA,IAAA,yBAEAA,IAAA,kBACAA,IAAA,yCACAA,IAAA,sBACAA,IAAA,sBACAA,IAAA,wBACAA,IAAA,wBACAA,IAAA,wCACAA,IAAA,sCACAA,IAAA,oCACAA,IAAA,gCACAA,IAAA,0CACAA,IAAA,4BACAA,IAAA,4BACAA,IAAA,sCACAA,IAAA,8CACAA,IAAA,2CACAA,IAAA,4CACAA,IAAA,oBAEAA,IAAA,UAEAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YAEAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WAEAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UAEAA,IAAA,0BACAA,IAAA,wBACAA,IAAA,YACAA,IAAA,0BACAA,IAAA,wBACAA,IAAA,eACAA,IAAA,kBACAA,IAAA,6BACAA,IAAA,gCACAA,IAAA,4BACAA,IAAA,kBACAA,IAAA,kBACAA,IAAA,oBACAA,IAAA,cACAA,IAAA,8BACAA,IAAA,oBACAA,IAAA,8BACAA,IAAA,8BACAA,IAAA,gBACAA,IAAA,wBACAA,IAAA,kBACAA,IAAA,2BACAA,IAAA,8BACAA,IAAA,0BACAA,IAAA,sBACAA,IAAA,gBACAA,IAAA,wBACAA,IAAA,0BACAA,IAAA,8BACAA,IAAA,kBACAA,IAAA,mBAEAA,IAAA,yBACAA,IAAA,wBACAA,IAAA,qCACAA,IAAA,aACAA,IAAA,+BAnIgBnqD,EAAAmqD,WAAAnqD,EAAAmqD,cAuIlBnqD,EAAAyiB,cAaAziB,EAAA2mD,eAoBA3mD,EAAAolD,iBAKAplD,EAAAqoD,eAKAroD,EAAAqmD,oBASArmD,EAAAsmD,qBAKAtmD,EAAAwmD,kBAUA,IAAMyD,IACJ,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEtCC,GACJ,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KACxB,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MA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","file":"assemblyscript.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"binaryen\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"binaryen\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"assemblyscript\"] = factory(require(\"binaryen\"));\n\telse\n\t\troot[\"assemblyscript\"] = factory(root[\"binaryen\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE_14__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"binaryen\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"binaryen\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"assemblyscript\"] = factory(require(\"binaryen\"));\n\telse\n\t\troot[\"assemblyscript\"] = factory(root[\"binaryen\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE_14__) {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 11);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar compiler_1 = __webpack_require__(3);\r\nvar NativeType;\r\n(function (NativeType) {\r\n    NativeType[NativeType[\"None\"] = _BinaryenTypeNone()] = \"None\";\r\n    NativeType[NativeType[\"I32\"] = _BinaryenTypeInt32()] = \"I32\";\r\n    NativeType[NativeType[\"I64\"] = _BinaryenTypeInt64()] = \"I64\";\r\n    NativeType[NativeType[\"F32\"] = _BinaryenTypeFloat32()] = \"F32\";\r\n    NativeType[NativeType[\"F64\"] = _BinaryenTypeFloat64()] = \"F64\";\r\n    NativeType[NativeType[\"Unreachable\"] = _BinaryenTypeUnreachable()] = \"Unreachable\";\r\n    NativeType[NativeType[\"Auto\"] = _BinaryenTypeAuto()] = \"Auto\";\r\n})(NativeType = exports.NativeType || (exports.NativeType = {}));\r\nvar ExpressionId;\r\n(function (ExpressionId) {\r\n    ExpressionId[ExpressionId[\"Invalid\"] = _BinaryenInvalidId()] = \"Invalid\";\r\n    ExpressionId[ExpressionId[\"Block\"] = _BinaryenBlockId()] = \"Block\";\r\n    ExpressionId[ExpressionId[\"If\"] = _BinaryenIfId()] = \"If\";\r\n    ExpressionId[ExpressionId[\"Loop\"] = _BinaryenLoopId()] = \"Loop\";\r\n    ExpressionId[ExpressionId[\"Break\"] = _BinaryenBreakId()] = \"Break\";\r\n    ExpressionId[ExpressionId[\"Switch\"] = _BinaryenSwitchId()] = \"Switch\";\r\n    ExpressionId[ExpressionId[\"Call\"] = _BinaryenCallId()] = \"Call\";\r\n    ExpressionId[ExpressionId[\"CallImport\"] = _BinaryenCallImportId()] = \"CallImport\";\r\n    ExpressionId[ExpressionId[\"CallIndirect\"] = _BinaryenCallIndirectId()] = \"CallIndirect\";\r\n    ExpressionId[ExpressionId[\"GetLocal\"] = _BinaryenGetLocalId()] = \"GetLocal\";\r\n    ExpressionId[ExpressionId[\"SetLocal\"] = _BinaryenSetLocalId()] = \"SetLocal\";\r\n    ExpressionId[ExpressionId[\"GetGlobal\"] = _BinaryenGetGlobalId()] = \"GetGlobal\";\r\n    ExpressionId[ExpressionId[\"SetGlobal\"] = _BinaryenSetGlobalId()] = \"SetGlobal\";\r\n    ExpressionId[ExpressionId[\"Load\"] = _BinaryenLoadId()] = \"Load\";\r\n    ExpressionId[ExpressionId[\"Store\"] = _BinaryenStoreId()] = \"Store\";\r\n    ExpressionId[ExpressionId[\"Const\"] = _BinaryenConstId()] = \"Const\";\r\n    ExpressionId[ExpressionId[\"Unary\"] = _BinaryenUnaryId()] = \"Unary\";\r\n    ExpressionId[ExpressionId[\"Binary\"] = _BinaryenBinaryId()] = \"Binary\";\r\n    ExpressionId[ExpressionId[\"Select\"] = _BinaryenSelectId()] = \"Select\";\r\n    ExpressionId[ExpressionId[\"Drop\"] = _BinaryenDropId()] = \"Drop\";\r\n    ExpressionId[ExpressionId[\"Return\"] = _BinaryenReturnId()] = \"Return\";\r\n    ExpressionId[ExpressionId[\"Host\"] = _BinaryenHostId()] = \"Host\";\r\n    ExpressionId[ExpressionId[\"Nop\"] = _BinaryenNopId()] = \"Nop\";\r\n    ExpressionId[ExpressionId[\"Unreachable\"] = _BinaryenUnreachableId()] = \"Unreachable\";\r\n    ExpressionId[ExpressionId[\"AtomicCmpxchg\"] = _BinaryenAtomicCmpxchgId()] = \"AtomicCmpxchg\";\r\n    ExpressionId[ExpressionId[\"AtomicRMW\"] = _BinaryenAtomicRMWId()] = \"AtomicRMW\";\r\n    ExpressionId[ExpressionId[\"AtomicWait\"] = _BinaryenAtomicWaitId()] = \"AtomicWait\";\r\n    ExpressionId[ExpressionId[\"AtomicWake\"] = _BinaryenAtomicWakeId()] = \"AtomicWake\";\r\n})(ExpressionId = exports.ExpressionId || (exports.ExpressionId = {}));\r\nvar UnaryOp;\r\n(function (UnaryOp) {\r\n    UnaryOp[UnaryOp[\"ClzI32\"] = _BinaryenClzInt32()] = \"ClzI32\";\r\n    UnaryOp[UnaryOp[\"CtzI32\"] = _BinaryenCtzInt32()] = \"CtzI32\";\r\n    UnaryOp[UnaryOp[\"PopcntI32\"] = _BinaryenPopcntInt32()] = \"PopcntI32\";\r\n    UnaryOp[UnaryOp[\"NegF32\"] = _BinaryenNegFloat32()] = \"NegF32\";\r\n    UnaryOp[UnaryOp[\"AbsF32\"] = _BinaryenAbsFloat32()] = \"AbsF32\";\r\n    UnaryOp[UnaryOp[\"CeilF32\"] = _BinaryenCeilFloat32()] = \"CeilF32\";\r\n    UnaryOp[UnaryOp[\"FloorF32\"] = _BinaryenFloorFloat32()] = \"FloorF32\";\r\n    UnaryOp[UnaryOp[\"TruncF32\"] = _BinaryenTruncFloat32()] = \"TruncF32\";\r\n    UnaryOp[UnaryOp[\"NearestF32\"] = _BinaryenNearestFloat32()] = \"NearestF32\";\r\n    UnaryOp[UnaryOp[\"SqrtF32\"] = _BinaryenSqrtFloat32()] = \"SqrtF32\";\r\n    UnaryOp[UnaryOp[\"EqzI32\"] = _BinaryenEqZInt32()] = \"EqzI32\";\r\n    UnaryOp[UnaryOp[\"ClzI64\"] = _BinaryenClzInt64()] = \"ClzI64\";\r\n    UnaryOp[UnaryOp[\"CtzI64\"] = _BinaryenCtzInt64()] = \"CtzI64\";\r\n    UnaryOp[UnaryOp[\"PopcntI64\"] = _BinaryenPopcntInt64()] = \"PopcntI64\";\r\n    UnaryOp[UnaryOp[\"NegF64\"] = _BinaryenNegFloat64()] = \"NegF64\";\r\n    UnaryOp[UnaryOp[\"AbsF64\"] = _BinaryenAbsFloat64()] = \"AbsF64\";\r\n    UnaryOp[UnaryOp[\"CeilF64\"] = _BinaryenCeilFloat64()] = \"CeilF64\";\r\n    UnaryOp[UnaryOp[\"FloorF64\"] = _BinaryenFloorFloat64()] = \"FloorF64\";\r\n    UnaryOp[UnaryOp[\"TruncF64\"] = _BinaryenTruncFloat64()] = \"TruncF64\";\r\n    UnaryOp[UnaryOp[\"NearestF64\"] = _BinaryenNearestFloat64()] = \"NearestF64\";\r\n    UnaryOp[UnaryOp[\"SqrtF64\"] = _BinaryenSqrtFloat64()] = \"SqrtF64\";\r\n    UnaryOp[UnaryOp[\"EqzI64\"] = _BinaryenEqZInt64()] = \"EqzI64\";\r\n    UnaryOp[UnaryOp[\"ExtendI32\"] = _BinaryenExtendSInt32()] = \"ExtendI32\";\r\n    UnaryOp[UnaryOp[\"ExtendU32\"] = _BinaryenExtendUInt32()] = \"ExtendU32\";\r\n    UnaryOp[UnaryOp[\"WrapI64\"] = _BinaryenWrapInt64()] = \"WrapI64\";\r\n    UnaryOp[UnaryOp[\"TruncF32ToI32\"] = _BinaryenTruncSFloat32ToInt32()] = \"TruncF32ToI32\";\r\n    UnaryOp[UnaryOp[\"TruncF32ToI64\"] = _BinaryenTruncSFloat32ToInt64()] = \"TruncF32ToI64\";\r\n    UnaryOp[UnaryOp[\"TruncF32ToU32\"] = _BinaryenTruncUFloat32ToInt32()] = \"TruncF32ToU32\";\r\n    UnaryOp[UnaryOp[\"TruncF32ToU64\"] = _BinaryenTruncUFloat32ToInt64()] = \"TruncF32ToU64\";\r\n    UnaryOp[UnaryOp[\"TruncF64ToI32\"] = _BinaryenTruncSFloat64ToInt32()] = \"TruncF64ToI32\";\r\n    UnaryOp[UnaryOp[\"TruncF64ToI64\"] = _BinaryenTruncSFloat64ToInt64()] = \"TruncF64ToI64\";\r\n    UnaryOp[UnaryOp[\"TruncF64ToU32\"] = _BinaryenTruncUFloat64ToInt32()] = \"TruncF64ToU32\";\r\n    UnaryOp[UnaryOp[\"TruncF64ToU64\"] = _BinaryenTruncUFloat64ToInt64()] = \"TruncF64ToU64\";\r\n    UnaryOp[UnaryOp[\"ReinterpretF32\"] = _BinaryenReinterpretFloat32()] = \"ReinterpretF32\";\r\n    UnaryOp[UnaryOp[\"ReinterpretF64\"] = _BinaryenReinterpretFloat64()] = \"ReinterpretF64\";\r\n    UnaryOp[UnaryOp[\"ConvertI32ToF32\"] = _BinaryenConvertSInt32ToFloat32()] = \"ConvertI32ToF32\";\r\n    UnaryOp[UnaryOp[\"ConvertI32ToF64\"] = _BinaryenConvertSInt32ToFloat64()] = \"ConvertI32ToF64\";\r\n    UnaryOp[UnaryOp[\"ConvertU32ToF32\"] = _BinaryenConvertUInt32ToFloat32()] = \"ConvertU32ToF32\";\r\n    UnaryOp[UnaryOp[\"ConvertU32ToF64\"] = _BinaryenConvertUInt32ToFloat64()] = \"ConvertU32ToF64\";\r\n    UnaryOp[UnaryOp[\"ConvertI64ToF32\"] = _BinaryenConvertSInt64ToFloat32()] = \"ConvertI64ToF32\";\r\n    UnaryOp[UnaryOp[\"ConvertI64ToF64\"] = _BinaryenConvertSInt64ToFloat64()] = \"ConvertI64ToF64\";\r\n    UnaryOp[UnaryOp[\"ConvertU64ToF32\"] = _BinaryenConvertUInt64ToFloat32()] = \"ConvertU64ToF32\";\r\n    UnaryOp[UnaryOp[\"ConvertU64ToF64\"] = _BinaryenConvertUInt64ToFloat64()] = \"ConvertU64ToF64\";\r\n    UnaryOp[UnaryOp[\"PromoteF32\"] = _BinaryenPromoteFloat32()] = \"PromoteF32\";\r\n    UnaryOp[UnaryOp[\"DemoteF64\"] = _BinaryenDemoteFloat64()] = \"DemoteF64\";\r\n    UnaryOp[UnaryOp[\"ReinterpretI32\"] = _BinaryenReinterpretInt32()] = \"ReinterpretI32\";\r\n    UnaryOp[UnaryOp[\"ReinterpretI64\"] = _BinaryenReinterpretInt64()] = \"ReinterpretI64\";\r\n    // see: https://github.com/WebAssembly/threads/blob/master/proposals/threads/Overview.md#new-sign-extending-operators\r\n    // ExtendI8ToI32 =_BinaryenExtendS8Int32()\r\n    // ExtendI16ToI32 = _BinaryenExtendS16Int32()\r\n    // ExtendI8ToI64 = _BinaryenExtendS8Int64() // operand is I64\r\n    // ExtendI16ToI64 = _BinaryenExtendS16Int64()\r\n    // ExtendI32ToI64 = _BinaryenExtendS32Int64()\r\n    // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions/blob/master/proposals/nontrapping-float-to-int-conversion/Overview.md#design\r\n    // TruncF32ToI32Sat\r\n    // TruncF32ToU32Sat\r\n    // TruncF64ToI32Sat\r\n    // TruncF64ToU32Sat\r\n    // TruncF32ToI64Sat\r\n    // TruncF32ToU64Sat\r\n    // TruncF64ToI64Sat\r\n    // TruncF64ToU64Sat\r\n})(UnaryOp = exports.UnaryOp || (exports.UnaryOp = {}));\r\nvar BinaryOp;\r\n(function (BinaryOp) {\r\n    BinaryOp[BinaryOp[\"AddI32\"] = _BinaryenAddInt32()] = \"AddI32\";\r\n    BinaryOp[BinaryOp[\"SubI32\"] = _BinaryenSubInt32()] = \"SubI32\";\r\n    BinaryOp[BinaryOp[\"MulI32\"] = _BinaryenMulInt32()] = \"MulI32\";\r\n    BinaryOp[BinaryOp[\"DivI32\"] = _BinaryenDivSInt32()] = \"DivI32\";\r\n    BinaryOp[BinaryOp[\"DivU32\"] = _BinaryenDivUInt32()] = \"DivU32\";\r\n    BinaryOp[BinaryOp[\"RemI32\"] = _BinaryenRemSInt32()] = \"RemI32\";\r\n    BinaryOp[BinaryOp[\"RemU32\"] = _BinaryenRemUInt32()] = \"RemU32\";\r\n    BinaryOp[BinaryOp[\"AndI32\"] = _BinaryenAndInt32()] = \"AndI32\";\r\n    BinaryOp[BinaryOp[\"OrI32\"] = _BinaryenOrInt32()] = \"OrI32\";\r\n    BinaryOp[BinaryOp[\"XorI32\"] = _BinaryenXorInt32()] = \"XorI32\";\r\n    BinaryOp[BinaryOp[\"ShlI32\"] = _BinaryenShlInt32()] = \"ShlI32\";\r\n    BinaryOp[BinaryOp[\"ShrU32\"] = _BinaryenShrUInt32()] = \"ShrU32\";\r\n    BinaryOp[BinaryOp[\"ShrI32\"] = _BinaryenShrSInt32()] = \"ShrI32\";\r\n    BinaryOp[BinaryOp[\"RotlI32\"] = _BinaryenRotLInt32()] = \"RotlI32\";\r\n    BinaryOp[BinaryOp[\"RotrI32\"] = _BinaryenRotRInt32()] = \"RotrI32\";\r\n    BinaryOp[BinaryOp[\"EqI32\"] = _BinaryenEqInt32()] = \"EqI32\";\r\n    BinaryOp[BinaryOp[\"NeI32\"] = _BinaryenNeInt32()] = \"NeI32\";\r\n    BinaryOp[BinaryOp[\"LtI32\"] = _BinaryenLtSInt32()] = \"LtI32\";\r\n    BinaryOp[BinaryOp[\"LtU32\"] = _BinaryenLtUInt32()] = \"LtU32\";\r\n    BinaryOp[BinaryOp[\"LeI32\"] = _BinaryenLeSInt32()] = \"LeI32\";\r\n    BinaryOp[BinaryOp[\"LeU32\"] = _BinaryenLeUInt32()] = \"LeU32\";\r\n    BinaryOp[BinaryOp[\"GtI32\"] = _BinaryenGtSInt32()] = \"GtI32\";\r\n    BinaryOp[BinaryOp[\"GtU32\"] = _BinaryenGtUInt32()] = \"GtU32\";\r\n    BinaryOp[BinaryOp[\"GeI32\"] = _BinaryenGeSInt32()] = \"GeI32\";\r\n    BinaryOp[BinaryOp[\"GeU32\"] = _BinaryenGeUInt32()] = \"GeU32\";\r\n    BinaryOp[BinaryOp[\"AddI64\"] = _BinaryenAddInt64()] = \"AddI64\";\r\n    BinaryOp[BinaryOp[\"SubI64\"] = _BinaryenSubInt64()] = \"SubI64\";\r\n    BinaryOp[BinaryOp[\"MulI64\"] = _BinaryenMulInt64()] = \"MulI64\";\r\n    BinaryOp[BinaryOp[\"DivI64\"] = _BinaryenDivSInt64()] = \"DivI64\";\r\n    BinaryOp[BinaryOp[\"DivU64\"] = _BinaryenDivUInt64()] = \"DivU64\";\r\n    BinaryOp[BinaryOp[\"RemI64\"] = _BinaryenRemSInt64()] = \"RemI64\";\r\n    BinaryOp[BinaryOp[\"RemU64\"] = _BinaryenRemUInt64()] = \"RemU64\";\r\n    BinaryOp[BinaryOp[\"AndI64\"] = _BinaryenAndInt64()] = \"AndI64\";\r\n    BinaryOp[BinaryOp[\"OrI64\"] = _BinaryenOrInt64()] = \"OrI64\";\r\n    BinaryOp[BinaryOp[\"XorI64\"] = _BinaryenXorInt64()] = \"XorI64\";\r\n    BinaryOp[BinaryOp[\"ShlI64\"] = _BinaryenShlInt64()] = \"ShlI64\";\r\n    BinaryOp[BinaryOp[\"ShrU64\"] = _BinaryenShrUInt64()] = \"ShrU64\";\r\n    BinaryOp[BinaryOp[\"ShrI64\"] = _BinaryenShrSInt64()] = \"ShrI64\";\r\n    BinaryOp[BinaryOp[\"RotlI64\"] = _BinaryenRotLInt64()] = \"RotlI64\";\r\n    BinaryOp[BinaryOp[\"RotrI64\"] = _BinaryenRotRInt64()] = \"RotrI64\";\r\n    BinaryOp[BinaryOp[\"EqI64\"] = _BinaryenEqInt64()] = \"EqI64\";\r\n    BinaryOp[BinaryOp[\"NeI64\"] = _BinaryenNeInt64()] = \"NeI64\";\r\n    BinaryOp[BinaryOp[\"LtI64\"] = _BinaryenLtSInt64()] = \"LtI64\";\r\n    BinaryOp[BinaryOp[\"LtU64\"] = _BinaryenLtUInt64()] = \"LtU64\";\r\n    BinaryOp[BinaryOp[\"LeI64\"] = _BinaryenLeSInt64()] = \"LeI64\";\r\n    BinaryOp[BinaryOp[\"LeU64\"] = _BinaryenLeUInt64()] = \"LeU64\";\r\n    BinaryOp[BinaryOp[\"GtI64\"] = _BinaryenGtSInt64()] = \"GtI64\";\r\n    BinaryOp[BinaryOp[\"GtU64\"] = _BinaryenGtUInt64()] = \"GtU64\";\r\n    BinaryOp[BinaryOp[\"GeI64\"] = _BinaryenGeSInt64()] = \"GeI64\";\r\n    BinaryOp[BinaryOp[\"GeU64\"] = _BinaryenGeUInt64()] = \"GeU64\";\r\n    BinaryOp[BinaryOp[\"AddF32\"] = _BinaryenAddFloat32()] = \"AddF32\";\r\n    BinaryOp[BinaryOp[\"SubF32\"] = _BinaryenSubFloat32()] = \"SubF32\";\r\n    BinaryOp[BinaryOp[\"MulF32\"] = _BinaryenMulFloat32()] = \"MulF32\";\r\n    BinaryOp[BinaryOp[\"DivF32\"] = _BinaryenDivFloat32()] = \"DivF32\";\r\n    BinaryOp[BinaryOp[\"CopysignF32\"] = _BinaryenCopySignFloat32()] = \"CopysignF32\";\r\n    BinaryOp[BinaryOp[\"MinF32\"] = _BinaryenMinFloat32()] = \"MinF32\";\r\n    BinaryOp[BinaryOp[\"MaxF32\"] = _BinaryenMaxFloat32()] = \"MaxF32\";\r\n    BinaryOp[BinaryOp[\"EqF32\"] = _BinaryenEqFloat32()] = \"EqF32\";\r\n    BinaryOp[BinaryOp[\"NeF32\"] = _BinaryenNeFloat32()] = \"NeF32\";\r\n    BinaryOp[BinaryOp[\"LtF32\"] = _BinaryenLtFloat32()] = \"LtF32\";\r\n    BinaryOp[BinaryOp[\"LeF32\"] = _BinaryenLeFloat32()] = \"LeF32\";\r\n    BinaryOp[BinaryOp[\"GtF32\"] = _BinaryenGtFloat32()] = \"GtF32\";\r\n    BinaryOp[BinaryOp[\"GeF32\"] = _BinaryenGeFloat32()] = \"GeF32\";\r\n    BinaryOp[BinaryOp[\"AddF64\"] = _BinaryenAddFloat64()] = \"AddF64\";\r\n    BinaryOp[BinaryOp[\"SubF64\"] = _BinaryenSubFloat64()] = \"SubF64\";\r\n    BinaryOp[BinaryOp[\"MulF64\"] = _BinaryenMulFloat64()] = \"MulF64\";\r\n    BinaryOp[BinaryOp[\"DivF64\"] = _BinaryenDivFloat64()] = \"DivF64\";\r\n    BinaryOp[BinaryOp[\"CopysignF64\"] = _BinaryenCopySignFloat64()] = \"CopysignF64\";\r\n    BinaryOp[BinaryOp[\"MinF64\"] = _BinaryenMinFloat64()] = \"MinF64\";\r\n    BinaryOp[BinaryOp[\"MaxF64\"] = _BinaryenMaxFloat64()] = \"MaxF64\";\r\n    BinaryOp[BinaryOp[\"EqF64\"] = _BinaryenEqFloat64()] = \"EqF64\";\r\n    BinaryOp[BinaryOp[\"NeF64\"] = _BinaryenNeFloat64()] = \"NeF64\";\r\n    BinaryOp[BinaryOp[\"LtF64\"] = _BinaryenLtFloat64()] = \"LtF64\";\r\n    BinaryOp[BinaryOp[\"LeF64\"] = _BinaryenLeFloat64()] = \"LeF64\";\r\n    BinaryOp[BinaryOp[\"GtF64\"] = _BinaryenGtFloat64()] = \"GtF64\";\r\n    BinaryOp[BinaryOp[\"GeF64\"] = _BinaryenGeFloat64()] = \"GeF64\";\r\n})(BinaryOp = exports.BinaryOp || (exports.BinaryOp = {}));\r\nvar HostOp;\r\n(function (HostOp) {\r\n    HostOp[HostOp[\"PageSize\"] = _BinaryenPageSize()] = \"PageSize\";\r\n    HostOp[HostOp[\"CurrentMemory\"] = _BinaryenCurrentMemory()] = \"CurrentMemory\";\r\n    HostOp[HostOp[\"GrowMemory\"] = _BinaryenGrowMemory()] = \"GrowMemory\";\r\n    HostOp[HostOp[\"HasFeature\"] = _BinaryenHasFeature()] = \"HasFeature\";\r\n    // see: https://github.com/WebAssembly/bulk-memory-operations/blob/master/proposals/bulk-memory-operations/Overview.md#design\r\n    // MoveMemory\r\n    // SetMemory\r\n})(HostOp = exports.HostOp || (exports.HostOp = {}));\r\nvar AtomicRMWOp;\r\n(function (AtomicRMWOp) {\r\n    AtomicRMWOp[AtomicRMWOp[\"Add\"] = _BinaryenAtomicRMWAdd()] = \"Add\";\r\n    AtomicRMWOp[AtomicRMWOp[\"Sub\"] = _BinaryenAtomicRMWSub()] = \"Sub\";\r\n    AtomicRMWOp[AtomicRMWOp[\"And\"] = _BinaryenAtomicRMWAnd()] = \"And\";\r\n    AtomicRMWOp[AtomicRMWOp[\"Or\"] = _BinaryenAtomicRMWOr()] = \"Or\";\r\n    AtomicRMWOp[AtomicRMWOp[\"Xor\"] = _BinaryenAtomicRMWXor()] = \"Xor\";\r\n    AtomicRMWOp[AtomicRMWOp[\"Xchg\"] = _BinaryenAtomicRMWXchg()] = \"Xchg\";\r\n})(AtomicRMWOp = exports.AtomicRMWOp || (exports.AtomicRMWOp = {}));\r\nvar MemorySegment = /** @class */ (function () {\r\n    function MemorySegment() {\r\n    }\r\n    MemorySegment.create = function (buffer, offset) {\r\n        var segment = new MemorySegment();\r\n        segment.buffer = buffer;\r\n        segment.offset = offset;\r\n        return segment;\r\n    };\r\n    return MemorySegment;\r\n}());\r\nexports.MemorySegment = MemorySegment;\r\nvar Module = /** @class */ (function () {\r\n    function Module() {\r\n    }\r\n    // TODO: static readonly MAX_MEMORY_WASM64\r\n    Module.create = function () {\r\n        var module = new Module();\r\n        module.ref = _BinaryenModuleCreate();\r\n        module.out = allocate_memory(16);\r\n        return module;\r\n    };\r\n    Module.createFrom = function (buffer) {\r\n        var cArr = allocU8Array(buffer);\r\n        try {\r\n            var module = new Module();\r\n            module.ref = _BinaryenModuleRead(cArr, buffer.length);\r\n            module.out = allocate_memory(3 * 8); // LLVM C-ABI, max used is 3 * usize\r\n            return module;\r\n        }\r\n        finally {\r\n            free_memory(changetype(cArr));\r\n        }\r\n    };\r\n    // types\r\n    Module.prototype.addFunctionType = function (name, result, paramTypes) {\r\n        var cStr = allocString(name);\r\n        var cArr = allocI32Array(paramTypes);\r\n        try {\r\n            return _BinaryenAddFunctionType(this.ref, cStr, result, cArr, paramTypes.length);\r\n        }\r\n        finally {\r\n            free_memory(cArr);\r\n            free_memory(cStr);\r\n        }\r\n    };\r\n    Module.prototype.getFunctionTypeBySignature = function (result, paramTypes) {\r\n        var cArr = allocI32Array(paramTypes);\r\n        try {\r\n            return _BinaryenGetFunctionTypeBySignature(this.ref, result, cArr, paramTypes.length);\r\n        }\r\n        finally {\r\n            free_memory(cArr);\r\n        }\r\n    };\r\n    // expressions\r\n    Module.prototype.createI32 = function (value) {\r\n        var out = this.out;\r\n        _BinaryenLiteralInt32(out, value);\r\n        return _BinaryenConst(this.ref, out);\r\n    };\r\n    Module.prototype.createI64 = function (lo, hi) {\r\n        if (hi === void 0) { hi = 0; }\r\n        var out = this.out;\r\n        _BinaryenLiteralInt64(out, lo, hi);\r\n        return _BinaryenConst(this.ref, out);\r\n    };\r\n    Module.prototype.createF32 = function (value) {\r\n        var out = this.out;\r\n        _BinaryenLiteralFloat32(out, value);\r\n        return _BinaryenConst(this.ref, out);\r\n    };\r\n    Module.prototype.createF64 = function (value) {\r\n        var out = this.out;\r\n        _BinaryenLiteralFloat64(out, value);\r\n        return _BinaryenConst(this.ref, out);\r\n    };\r\n    Module.prototype.createUnary = function (op, expr) {\r\n        return _BinaryenUnary(this.ref, op, expr);\r\n    };\r\n    Module.prototype.createBinary = function (op, left, right) {\r\n        return _BinaryenBinary(this.ref, op, left, right);\r\n    };\r\n    Module.prototype.createHost = function (op, name, operands) {\r\n        if (name === void 0) { name = null; }\r\n        if (operands === void 0) { operands = null; }\r\n        var cStr = allocString(name);\r\n        var cArr = allocI32Array(operands);\r\n        try {\r\n            return _BinaryenHost(this.ref, op, cStr, cArr, operands ? operands.length : 0);\r\n        }\r\n        finally {\r\n            free_memory(cArr);\r\n            free_memory(cStr);\r\n        }\r\n    };\r\n    Module.prototype.createGetLocal = function (index, type) {\r\n        return _BinaryenGetLocal(this.ref, index, type);\r\n    };\r\n    Module.prototype.createTeeLocal = function (index, value) {\r\n        return _BinaryenTeeLocal(this.ref, index, value);\r\n    };\r\n    Module.prototype.createGetGlobal = function (name, type) {\r\n        var cStr = allocString(name);\r\n        try {\r\n            return _BinaryenGetGlobal(this.ref, cStr, type);\r\n        }\r\n        finally {\r\n            free_memory(cStr);\r\n        }\r\n    };\r\n    Module.prototype.createLoad = function (bytes, signed, ptr, type, offset) {\r\n        if (offset === void 0) { offset = 0; }\r\n        return _BinaryenLoad(this.ref, bytes, signed ? 1 : 0, offset, /* always aligned */ bytes, type, ptr);\r\n    };\r\n    Module.prototype.createStore = function (bytes, ptr, value, type, offset) {\r\n        if (offset === void 0) { offset = 0; }\r\n        return _BinaryenStore(this.ref, bytes, offset, /* always aligned */ bytes, ptr, value, type);\r\n    };\r\n    Module.prototype.createAtomicLoad = function (bytes, ptr, type, offset) {\r\n        if (offset === void 0) { offset = 0; }\r\n        return _BinaryenAtomicLoad(this.ref, bytes, offset, type, ptr);\r\n    };\r\n    Module.prototype.createAtomicStore = function (bytes, ptr, value, type, offset) {\r\n        if (offset === void 0) { offset = 0; }\r\n        return _BinaryenAtomicStore(this.ref, bytes, offset, ptr, value, type);\r\n    };\r\n    Module.prototype.createAtomicRMW = function (op, bytes, offset, ptr, value, type) {\r\n        return _BinaryenAtomicRMW(this.ref, op, bytes, offset, ptr, value, type);\r\n    };\r\n    Module.prototype.createAtomicCmpxchg = function (bytes, offset, ptr, expected, replacement, type) {\r\n        return _BinaryenAtomicCmpxchg(this.ref, bytes, offset, ptr, expected, replacement, type);\r\n    };\r\n    Module.prototype.createAtomicWait = function (ptr, expected, timeout, expectedType) {\r\n        return _BinaryenAtomicWait(this.ref, ptr, expected, timeout, expectedType);\r\n    };\r\n    Module.prototype.createAtomicWake = function (ptr, wakeCount) {\r\n        return _BinaryenAtomicWake(this.ref, ptr, wakeCount);\r\n    };\r\n    // statements\r\n    Module.prototype.createSetLocal = function (index, value) {\r\n        return _BinaryenSetLocal(this.ref, index, value);\r\n    };\r\n    Module.prototype.createSetGlobal = function (name, value) {\r\n        var cStr = allocString(name);\r\n        try {\r\n            return _BinaryenSetGlobal(this.ref, cStr, value);\r\n        }\r\n        finally {\r\n            free_memory(cStr);\r\n        }\r\n    };\r\n    Module.prototype.createBlock = function (label, children, type) {\r\n        if (type === void 0) { type = NativeType.Auto; }\r\n        var cStr = allocString(label);\r\n        var cArr = allocI32Array(children);\r\n        try {\r\n            return _BinaryenBlock(this.ref, cStr, cArr, children.length, type);\r\n        }\r\n        finally {\r\n            free_memory(cArr);\r\n            free_memory(cStr);\r\n        }\r\n    };\r\n    Module.prototype.createBreak = function (label, condition, value) {\r\n        if (condition === void 0) { condition = 0; }\r\n        if (value === void 0) { value = 0; }\r\n        var cStr = allocString(label);\r\n        try {\r\n            return _BinaryenBreak(this.ref, cStr, condition, value);\r\n        }\r\n        finally {\r\n            free_memory(cStr);\r\n        }\r\n    };\r\n    Module.prototype.createDrop = function (expression) {\r\n        return _BinaryenDrop(this.ref, expression);\r\n    };\r\n    Module.prototype.createLoop = function (label, body) {\r\n        var cStr = allocString(label);\r\n        try {\r\n            return _BinaryenLoop(this.ref, cStr, body);\r\n        }\r\n        finally {\r\n            free_memory(cStr);\r\n        }\r\n    };\r\n    Module.prototype.createIf = function (condition, ifTrue, ifFalse) {\r\n        if (ifFalse === void 0) { ifFalse = 0; }\r\n        return _BinaryenIf(this.ref, condition, ifTrue, ifFalse);\r\n    };\r\n    Module.prototype.createNop = function () {\r\n        return _BinaryenNop(this.ref);\r\n    };\r\n    Module.prototype.createReturn = function (expression) {\r\n        if (expression === void 0) { expression = 0; }\r\n        return _BinaryenReturn(this.ref, expression);\r\n    };\r\n    Module.prototype.createSelect = function (ifTrue, ifFalse, condition) {\r\n        return _BinaryenSelect(this.ref, condition, ifTrue, ifFalse);\r\n    };\r\n    Module.prototype.createSwitch = function (names, defaultName, condition, value) {\r\n        if (value === void 0) { value = 0; }\r\n        var strs = new Array(names.length);\r\n        for (var i = 0, k = names.length; i < k; ++i)\r\n            strs[i] = allocString(names[i]);\r\n        var cArr = allocI32Array(strs);\r\n        var cStr = allocString(defaultName);\r\n        try {\r\n            return _BinaryenSwitch(this.ref, cArr, k, cStr, condition, value);\r\n        }\r\n        finally {\r\n            free_memory(cStr);\r\n            free_memory(cArr);\r\n            for (i = k - 1; i >= 0; --i)\r\n                free_memory(strs[i]);\r\n        }\r\n    };\r\n    Module.prototype.createCall = function (target, operands, returnType) {\r\n        var cStr = allocString(target);\r\n        var cArr = allocI32Array(operands);\r\n        try {\r\n            return _BinaryenCall(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\r\n        }\r\n        finally {\r\n            free_memory(cArr);\r\n            free_memory(cStr);\r\n        }\r\n    };\r\n    Module.prototype.createCallImport = function (target, operands, returnType) {\r\n        var cStr = allocString(target);\r\n        var cArr = allocI32Array(operands);\r\n        try {\r\n            return _BinaryenCallImport(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\r\n        }\r\n        finally {\r\n            free_memory(cArr);\r\n            free_memory(cStr);\r\n        }\r\n    };\r\n    Module.prototype.createUnreachable = function () {\r\n        return _BinaryenUnreachable(this.ref);\r\n    };\r\n    // meta\r\n    Module.prototype.addGlobal = function (name, type, mutable, initializer) {\r\n        var cStr = allocString(name);\r\n        try {\r\n            return _BinaryenAddGlobal(this.ref, cStr, type, mutable ? 1 : 0, initializer);\r\n        }\r\n        finally {\r\n            free_memory(cStr);\r\n        }\r\n    };\r\n    Module.prototype.addFunction = function (name, type, varTypes, body) {\r\n        var cStr = allocString(name);\r\n        var cArr = allocI32Array(varTypes);\r\n        try {\r\n            return _BinaryenAddFunction(this.ref, cStr, type, cArr, varTypes.length, body);\r\n        }\r\n        finally {\r\n            free_memory(cArr);\r\n            free_memory(cStr);\r\n        }\r\n    };\r\n    Module.prototype.removeFunction = function (name) {\r\n        var cStr = allocString(name);\r\n        try {\r\n            _BinaryenRemoveFunction(this.ref, cStr);\r\n        }\r\n        finally {\r\n            free_memory(cStr);\r\n        }\r\n    };\r\n    Module.prototype.addFunctionExport = function (internalName, externalName) {\r\n        var cStr1 = allocString(internalName);\r\n        var cStr2 = allocString(externalName);\r\n        try {\r\n            return _BinaryenAddFunctionExport(this.ref, cStr1, cStr2);\r\n        }\r\n        finally {\r\n            free_memory(cStr2);\r\n            free_memory(cStr1);\r\n        }\r\n    };\r\n    Module.prototype.addTableExport = function (internalName, externalName) {\r\n        var cStr1 = allocString(internalName);\r\n        var cStr2 = allocString(externalName);\r\n        try {\r\n            return _BinaryenAddTableExport(this.ref, cStr1, cStr2);\r\n        }\r\n        finally {\r\n            free_memory(cStr2);\r\n            free_memory(cStr1);\r\n        }\r\n    };\r\n    Module.prototype.addMemoryExport = function (internalName, externalName) {\r\n        var cStr1 = allocString(internalName);\r\n        var cStr2 = allocString(externalName);\r\n        try {\r\n            return _BinaryenAddMemoryExport(this.ref, cStr1, cStr2);\r\n        }\r\n        finally {\r\n            free_memory(cStr2);\r\n            free_memory(cStr1);\r\n        }\r\n    };\r\n    Module.prototype.addGlobalExport = function (internalName, externalName) {\r\n        var cStr1 = allocString(internalName);\r\n        var cStr2 = allocString(externalName);\r\n        try {\r\n            return _BinaryenAddGlobalExport(this.ref, cStr1, cStr2);\r\n        }\r\n        finally {\r\n            free_memory(cStr2);\r\n            free_memory(cStr1);\r\n        }\r\n    };\r\n    Module.prototype.removeExport = function (externalName) {\r\n        var cStr = allocString(externalName);\r\n        try {\r\n            _BinaryenRemoveExport(this.ref, cStr);\r\n        }\r\n        finally {\r\n            free_memory(cStr);\r\n        }\r\n    };\r\n    Module.prototype.addFunctionImport = function (internalName, externalModuleName, externalBaseName, functionType) {\r\n        var cStr1 = allocString(internalName);\r\n        var cStr2 = allocString(externalModuleName);\r\n        var cStr3 = allocString(externalBaseName);\r\n        try {\r\n            return _BinaryenAddFunctionImport(this.ref, cStr1, cStr2, cStr3, functionType);\r\n        }\r\n        finally {\r\n            free_memory(cStr3);\r\n            free_memory(cStr2);\r\n            free_memory(cStr1);\r\n        }\r\n    };\r\n    Module.prototype.addTableImport = function (internalName, externalModuleName, externalBaseName) {\r\n        var cStr1 = allocString(internalName);\r\n        var cStr2 = allocString(externalModuleName);\r\n        var cStr3 = allocString(externalBaseName);\r\n        try {\r\n            return _BinaryenAddTableImport(this.ref, cStr1, cStr2, cStr3);\r\n        }\r\n        finally {\r\n            free_memory(cStr3);\r\n            free_memory(cStr2);\r\n            free_memory(cStr1);\r\n        }\r\n    };\r\n    Module.prototype.addMemoryImport = function (internalName, externalModuleName, externalBaseName) {\r\n        var cStr1 = allocString(internalName);\r\n        var cStr2 = allocString(externalModuleName);\r\n        var cStr3 = allocString(externalBaseName);\r\n        try {\r\n            return _BinaryenAddMemoryImport(this.ref, cStr1, cStr2, cStr3);\r\n        }\r\n        finally {\r\n            free_memory(cStr3);\r\n            free_memory(cStr2);\r\n            free_memory(cStr1);\r\n        }\r\n    };\r\n    Module.prototype.addGlobalImport = function (internalName, externalModuleName, externalBaseName, globalType) {\r\n        var cStr1 = allocString(internalName);\r\n        var cStr2 = allocString(externalModuleName);\r\n        var cStr3 = allocString(externalBaseName);\r\n        try {\r\n            return _BinaryenAddGlobalImport(this.ref, cStr1, cStr2, cStr3, globalType);\r\n        }\r\n        finally {\r\n            free_memory(cStr3);\r\n            free_memory(cStr2);\r\n            free_memory(cStr1);\r\n        }\r\n    };\r\n    Module.prototype.removeImport = function (internalName) {\r\n        var cStr = allocString(internalName);\r\n        try {\r\n            _BinaryenRemoveImport(this.ref, cStr);\r\n        }\r\n        finally {\r\n            free_memory(cStr);\r\n        }\r\n    };\r\n    Module.prototype.setMemory = function (initial, maximum, segments, target, exportName) {\r\n        if (exportName === void 0) { exportName = null; }\r\n        var cStr = allocString(exportName);\r\n        var k = segments.length;\r\n        var segs = new Array(k);\r\n        var offs = new Array(k);\r\n        var sizs = new Array(k);\r\n        for (var i = 0; i < k; ++i) {\r\n            var buffer = segments[i].buffer;\r\n            var offset = segments[i].offset;\r\n            segs[i] = allocU8Array(buffer);\r\n            offs[i] = target == compiler_1.Target.WASM64\r\n                ? this.createI64(i64_low(offset), i64_high(offset))\r\n                : this.createI32(i64_low(offset));\r\n            sizs[i] = buffer.length;\r\n        }\r\n        var cArr1 = allocI32Array(segs);\r\n        var cArr2 = allocI32Array(offs);\r\n        var cArr3 = allocI32Array(sizs);\r\n        try {\r\n            _BinaryenSetMemory(this.ref, initial, maximum, cStr, cArr1, cArr2, cArr3, k);\r\n        }\r\n        finally {\r\n            free_memory(cArr3);\r\n            free_memory(cArr2);\r\n            free_memory(cArr1);\r\n            for (i = k - 1; i >= 0; --i)\r\n                free_memory(segs[i]);\r\n            free_memory(cStr);\r\n        }\r\n    };\r\n    Module.prototype.setFunctionTable = function (funcs) {\r\n        var cArr = allocI32Array(funcs);\r\n        try {\r\n            _BinaryenSetFunctionTable(this.ref, cArr, funcs.length);\r\n        }\r\n        finally {\r\n            free_memory(cArr);\r\n        }\r\n    };\r\n    Module.prototype.setStart = function (func) {\r\n        _BinaryenSetStart(this.ref, func);\r\n    };\r\n    Module.prototype.setOptimizeLevel = function (level) {\r\n        if (level === void 0) { level = 2; }\r\n        _BinaryenSetOptimizeLevel(level);\r\n    };\r\n    Module.prototype.setShrinkLevel = function (level) {\r\n        if (level === void 0) { level = 1; }\r\n        _BinaryenSetShrinkLevel(level);\r\n    };\r\n    Module.prototype.setDebugInfo = function (on) {\r\n        if (on === void 0) { on = false; }\r\n        _BinaryenSetDebugInfo(on);\r\n    };\r\n    Module.prototype.optimize = function (func) {\r\n        if (func === void 0) { func = 0; }\r\n        if (func) {\r\n            _BinaryenFunctionOptimize(func, this.ref);\r\n        }\r\n        else {\r\n            _BinaryenModuleOptimize(this.ref);\r\n        }\r\n    };\r\n    Module.prototype.runPasses = function (passes, func) {\r\n        if (func === void 0) { func = 0; }\r\n        var k = passes.length;\r\n        var names = new Array(k);\r\n        for (var i = 0; i < k; ++i)\r\n            names[i] = allocString(passes[i]);\r\n        var cArr = allocI32Array(names);\r\n        try {\r\n            if (func)\r\n                _BinaryenFunctionRunPasses(func, this.ref, cArr, k);\r\n            else\r\n                _BinaryenModuleRunPasses(this.ref, cArr, k);\r\n        }\r\n        finally {\r\n            free_memory(cArr);\r\n            for (; i >= 0; --i)\r\n                free_memory(names[i]);\r\n        }\r\n    };\r\n    Module.prototype.validate = function () {\r\n        return _BinaryenModuleValidate(this.ref) == 1;\r\n    };\r\n    Module.prototype.interpret = function () {\r\n        _BinaryenModuleInterpret(this.ref);\r\n    };\r\n    Module.prototype.print = function () {\r\n        _BinaryenModulePrint(this.ref);\r\n    };\r\n    Module.prototype.printAsmjs = function () {\r\n        _BinaryenModulePrintAsmjs(this.ref);\r\n    };\r\n    Module.prototype.toBinary = function (sourceMapUrl) {\r\n        var out = this.out;\r\n        var cStr = allocString(sourceMapUrl);\r\n        var binaryPtr = 0;\r\n        var sourceMapPtr = 0;\r\n        try {\r\n            _BinaryenModuleAllocateAndWrite(out, this.ref, cStr);\r\n            binaryPtr = readInt(out);\r\n            var binaryBytes = readInt(out + 4);\r\n            sourceMapPtr = readInt(out + 4 * 2);\r\n            var ret = new Binary();\r\n            ret.output = readBuffer(binaryPtr, binaryBytes);\r\n            ret.sourceMap = readString(sourceMapPtr);\r\n            return ret;\r\n        }\r\n        finally {\r\n            if (cStr)\r\n                free_memory(cStr);\r\n            if (binaryPtr)\r\n                free_memory(binaryPtr);\r\n            if (sourceMapPtr)\r\n                free_memory(sourceMapPtr);\r\n        }\r\n    };\r\n    Module.prototype.toText = function () {\r\n        throw new Error(\"not implemented\"); // JS glue overrides this\r\n    };\r\n    Module.prototype.toAsmjs = function () {\r\n        throw new Error(\"not implemented\"); // JS glue overrides this\r\n    };\r\n    Module.prototype.dispose = function () {\r\n        if (!this.ref)\r\n            return; // sic\r\n        _BinaryenModuleDispose(this.ref);\r\n        free_memory(this.out);\r\n    };\r\n    Module.prototype.createRelooper = function () {\r\n        return Relooper.create(this);\r\n    };\r\n    // currently supports side effect free expressions only\r\n    Module.prototype.cloneExpression = function (expr, noSideEffects, maxDepth) {\r\n        if (noSideEffects === void 0) { noSideEffects = false; }\r\n        if (maxDepth === void 0) { maxDepth = i32.MAX_VALUE; }\r\n        if (maxDepth < 0)\r\n            return 0;\r\n        var nested1, nested2;\r\n        switch (_BinaryenExpressionGetId(expr)) {\r\n            case ExpressionId.Const:\r\n                switch (_BinaryenExpressionGetType(expr)) {\r\n                    case NativeType.I32: return this.createI32(_BinaryenConstGetValueI32(expr));\r\n                    case NativeType.I64: return this.createI64(_BinaryenConstGetValueI64Low(expr), _BinaryenConstGetValueI64High(expr));\r\n                    case NativeType.F32: return this.createF32(_BinaryenConstGetValueF32(expr));\r\n                    case NativeType.F64: return this.createF64(_BinaryenConstGetValueF64(expr));\r\n                    default: throw new Error(\"concrete type expected\");\r\n                }\r\n            case ExpressionId.GetLocal:\r\n                return _BinaryenGetLocal(this.ref, _BinaryenGetLocalGetIndex(expr), _BinaryenExpressionGetType(expr));\r\n            case ExpressionId.GetGlobal:\r\n                var globalName = _BinaryenGetGlobalGetName(expr);\r\n                if (!globalName)\r\n                    break;\r\n                return _BinaryenGetGlobal(this.ref, globalName, _BinaryenExpressionGetType(expr));\r\n            case ExpressionId.Load:\r\n                if (!(nested1 = this.cloneExpression(_BinaryenLoadGetPtr(expr), noSideEffects, maxDepth - 1)))\r\n                    break;\r\n                return _BinaryenLoadIsAtomic(expr)\r\n                    ? _BinaryenAtomicLoad(this.ref, _BinaryenLoadGetBytes(expr), _BinaryenLoadGetOffset(expr), _BinaryenExpressionGetType(expr), nested1)\r\n                    : _BinaryenLoad(this.ref, _BinaryenLoadGetBytes(expr), _BinaryenLoadIsSigned(expr) ? 1 : 0, _BinaryenLoadGetOffset(expr), _BinaryenLoadGetAlign(expr), _BinaryenExpressionGetType(expr), nested1);\r\n            case ExpressionId.Unary:\r\n                if (!(nested1 = this.cloneExpression(_BinaryenUnaryGetValue(expr), noSideEffects, maxDepth - 1)))\r\n                    break;\r\n                return _BinaryenUnary(this.ref, _BinaryenUnaryGetOp(expr), nested1);\r\n            case ExpressionId.Binary:\r\n                if (!(nested1 = this.cloneExpression(_BinaryenBinaryGetLeft(expr), noSideEffects, maxDepth - 1)))\r\n                    break;\r\n                if (!(nested2 = this.cloneExpression(_BinaryenBinaryGetRight(expr), noSideEffects, maxDepth - 1)))\r\n                    break;\r\n                return _BinaryenBinary(this.ref, _BinaryenBinaryGetOp(expr), nested1, nested2);\r\n        }\r\n        return 0;\r\n    };\r\n    // source map generation\r\n    Module.prototype.addDebugInfoFile = function (name) {\r\n        var cStr = allocString(name);\r\n        try {\r\n            return _BinaryenModuleAddDebugInfoFileName(this.ref, cStr);\r\n        }\r\n        finally {\r\n            free_memory(cStr);\r\n        }\r\n    };\r\n    Module.prototype.getDebugInfoFile = function (index) {\r\n        return readString(_BinaryenModuleGetDebugInfoFileName(this.ref, index));\r\n    };\r\n    Module.prototype.setDebugLocation = function (func, expr, fileIndex, lineNumber, columnNumber) {\r\n        _BinaryenFunctionSetDebugLocation(func, expr, fileIndex, lineNumber, columnNumber);\r\n    };\r\n    Module.MAX_MEMORY_WASM32 = 0xffff;\r\n    return Module;\r\n}());\r\nexports.Module = Module;\r\nvar Relooper = /** @class */ (function () {\r\n    function Relooper() {\r\n    }\r\n    Relooper.create = function (module) {\r\n        var relooper = new Relooper();\r\n        relooper.module = module;\r\n        relooper.ref = _RelooperCreate();\r\n        return relooper;\r\n    };\r\n    Relooper.createStub = function (module) {\r\n        var relooper = new Relooper();\r\n        relooper.module = module;\r\n        relooper.ref = 0;\r\n        return relooper;\r\n    };\r\n    Relooper.prototype.addBlock = function (code) {\r\n        return _RelooperAddBlock(this.ref, code);\r\n    };\r\n    Relooper.prototype.addBranch = function (from, to, condition, code) {\r\n        if (condition === void 0) { condition = 0; }\r\n        if (code === void 0) { code = 0; }\r\n        _RelooperAddBranch(from, to, condition, code);\r\n    };\r\n    Relooper.prototype.addBlockWithSwitch = function (code, condition) {\r\n        return _RelooperAddBlockWithSwitch(this.ref, code, condition);\r\n    };\r\n    Relooper.prototype.addBranchForSwitch = function (from, to, indexes, code) {\r\n        if (code === void 0) { code = 0; }\r\n        var cArr = allocI32Array(indexes);\r\n        try {\r\n            _RelooperAddBranchForSwitch(from, to, cArr, indexes.length, code);\r\n        }\r\n        finally {\r\n            free_memory(cArr);\r\n        }\r\n    };\r\n    Relooper.prototype.renderAndDispose = function (entry, labelHelper) {\r\n        return _RelooperRenderAndDispose(this.ref, entry, labelHelper, this.module.ref);\r\n    };\r\n    return Relooper;\r\n}());\r\nexports.Relooper = Relooper;\r\n// helpers\r\n// can't do stack allocation here: STACKTOP is a global in WASM but a hidden variable in asm.js\r\nfunction allocU8Array(u8s) {\r\n    if (!u8s)\r\n        return 0;\r\n    var ptr = allocate_memory(u8s.length);\r\n    var idx = ptr;\r\n    for (var i = 0, k = u8s.length; i < k; ++i)\r\n        store(idx++, u8s[i]);\r\n    return ptr;\r\n}\r\nfunction allocI32Array(i32s) {\r\n    if (!i32s)\r\n        return 0;\r\n    var ptr = allocate_memory(i32s.length << 2);\r\n    var idx = ptr;\r\n    for (var i = 0, k = i32s.length; i < k; ++i) {\r\n        var val = i32s[i];\r\n        // store<i32>(idx, val) is not portable\r\n        store(idx, (val & 0xff));\r\n        store(idx + 1, ((val >> 8) & 0xff));\r\n        store(idx + 2, ((val >> 16) & 0xff));\r\n        store(idx + 3, (val >>> 24));\r\n        idx += 4;\r\n    }\r\n    return ptr;\r\n}\r\nfunction stringLengthUTF8(str) {\r\n    var len = 0;\r\n    for (var i = 0, k = str.length; i < k; ++i) {\r\n        var u = str.charCodeAt(i);\r\n        if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k)\r\n            u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\r\n        if (u <= 0x7F)\r\n            ++len;\r\n        else if (u <= 0x7FF)\r\n            len += 2;\r\n        else if (u <= 0xFFFF)\r\n            len += 3;\r\n        else if (u <= 0x1FFFFF)\r\n            len += 4;\r\n        else if (u <= 0x3FFFFFF)\r\n            len += 5;\r\n        else\r\n            len += 6;\r\n    }\r\n    return len;\r\n}\r\nfunction allocString(str) {\r\n    if (str == null)\r\n        return 0;\r\n    var ptr = allocate_memory(stringLengthUTF8(str) + 1);\r\n    var idx = ptr;\r\n    for (var i = 0, k = str.length; i < k; ++i) {\r\n        var u = str.charCodeAt(i);\r\n        if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k)\r\n            u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\r\n        if (u <= 0x7F)\r\n            store(idx++, u);\r\n        else if (u <= 0x7FF) {\r\n            store(idx++, (0xC0 | (u >>> 6)));\r\n            store(idx++, (0x80 | (u & 63)));\r\n        }\r\n        else if (u <= 0xFFFF) {\r\n            store(idx++, (0xE0 | (u >>> 12)));\r\n            store(idx++, (0x80 | ((u >>> 6) & 63)));\r\n            store(idx++, (0x80 | (u & 63)));\r\n        }\r\n        else if (u <= 0x1FFFFF) {\r\n            store(idx++, (0xF0 | (u >>> 18)));\r\n            store(idx++, (0x80 | ((u >>> 12) & 63)));\r\n            store(idx++, (0x80 | ((u >>> 6) & 63)));\r\n            store(idx++, (0x80 | (u & 63)));\r\n        }\r\n        else if (u <= 0x3FFFFFF) {\r\n            store(idx++, (0xF8 | (u >>> 24)));\r\n            store(idx++, (0x80 | ((u >>> 18) & 63)));\r\n            store(idx++, (0x80 | ((u >>> 12) & 63)));\r\n            store(idx++, (0x80 | ((u >>> 6) & 63)));\r\n            store(idx++, (0x80 | (u & 63)));\r\n        }\r\n        else {\r\n            store(idx++, (0xFC | (u >>> 30)));\r\n            store(idx++, (0x80 | ((u >>> 24) & 63)));\r\n            store(idx++, (0x80 | ((u >>> 18) & 63)));\r\n            store(idx++, (0x80 | ((u >>> 12) & 63)));\r\n            store(idx++, (0x80 | ((u >>> 6) & 63)));\r\n            store(idx++, (0x80 | (u & 63)));\r\n        }\r\n    }\r\n    store(idx, 0);\r\n    return ptr;\r\n}\r\nfunction readInt(ptr) {\r\n    return (load(ptr) |\r\n        (load(ptr + 1) << 8) |\r\n        (load(ptr + 2) << 16) |\r\n        (load(ptr + 3) << 24));\r\n}\r\nexports.readInt = readInt;\r\nfunction readBuffer(ptr, length) {\r\n    var ret = new Uint8Array(length);\r\n    for (var i = 0; i < length; ++i)\r\n        ret[i] = load(ptr + i);\r\n    return ret;\r\n}\r\nexports.readBuffer = readBuffer;\r\nfunction readString(ptr) {\r\n    if (!ptr)\r\n        return null;\r\n    var arr = new Array();\r\n    // the following is based on Emscripten's UTF8ArrayToString\r\n    var cp;\r\n    var u1, u2, u3, u4, u5;\r\n    while (cp = load(ptr++)) {\r\n        if (!(cp & 0x80)) {\r\n            arr.push(cp);\r\n            continue;\r\n        }\r\n        u1 = load(ptr++) & 63;\r\n        if ((cp & 0xE0) == 0xC0) {\r\n            arr.push(((cp & 31) << 6) | u1);\r\n            continue;\r\n        }\r\n        u2 = load(ptr++) & 63;\r\n        if ((cp & 0xF0) == 0xE0) {\r\n            cp = ((cp & 15) << 12) | (u1 << 6) | u2;\r\n        }\r\n        else {\r\n            u3 = load(ptr++) & 63;\r\n            if ((cp & 0xF8) == 0xF0) {\r\n                cp = ((cp & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\r\n            }\r\n            else {\r\n                u4 = load(ptr++) & 63;\r\n                if ((cp & 0xFC) == 0xF8) {\r\n                    cp = ((cp & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;\r\n                }\r\n                else {\r\n                    u5 = load(ptr++) & 63;\r\n                    cp = ((cp & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;\r\n                }\r\n            }\r\n        }\r\n        // if (cp < 0x10000) {\r\n        //   arr.push(cp);\r\n        // } else {\r\n        //   var ch = cp - 0x10000;\r\n        //   arr.push(0xD800 | (ch >> 10));\r\n        //   arr.push(0xDC00 | (ch & 0x3FF));\r\n        // }\r\n    }\r\n    // return String.fromCharCodes(arr);\r\n    return String.fromCodePoints(arr);\r\n}\r\nexports.readString = readString;\r\n/** Result structure of {@link Module#toBinary}. */\r\nvar Binary = /** @class */ (function () {\r\n    function Binary() {\r\n    }\r\n    return Binary;\r\n}());\r\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar diagnosticMessages_generated_1 = __webpack_require__(8);\r\nvar charcode_1 = __webpack_require__(9);\r\nvar diagnosticMessages_generated_2 = __webpack_require__(8);\r\nexports.DiagnosticCode = diagnosticMessages_generated_2.DiagnosticCode;\r\nexports.diagnosticCodeToString = diagnosticMessages_generated_2.diagnosticCodeToString;\r\nvar DiagnosticCategory;\r\n(function (DiagnosticCategory) {\r\n    DiagnosticCategory[DiagnosticCategory[\"INFO\"] = 0] = \"INFO\";\r\n    DiagnosticCategory[DiagnosticCategory[\"WARNING\"] = 1] = \"WARNING\";\r\n    DiagnosticCategory[DiagnosticCategory[\"ERROR\"] = 2] = \"ERROR\";\r\n})(DiagnosticCategory = exports.DiagnosticCategory || (exports.DiagnosticCategory = {}));\r\nfunction diagnosticCategoryToString(category) {\r\n    switch (category) {\r\n        case DiagnosticCategory.INFO: return \"INFO\";\r\n        case DiagnosticCategory.WARNING: return \"WARNING\";\r\n        case DiagnosticCategory.ERROR: return \"ERROR\";\r\n        default: return \"\";\r\n    }\r\n}\r\nexports.diagnosticCategoryToString = diagnosticCategoryToString;\r\nvar colorBlue = \"\\u001b[93m\";\r\nvar colorYellow = \"\\u001b[93m\";\r\nvar colorRed = \"\\u001b[91m\";\r\nvar colorReset = \"\\u001b[0m\";\r\nfunction diagnosticCategoryToColor(category) {\r\n    switch (category) {\r\n        case DiagnosticCategory.INFO: return colorBlue;\r\n        case DiagnosticCategory.WARNING: return colorYellow;\r\n        case DiagnosticCategory.ERROR: return colorRed;\r\n        default: return \"\";\r\n    }\r\n}\r\nexports.diagnosticCategoryToColor = diagnosticCategoryToColor;\r\nvar DiagnosticMessage = /** @class */ (function () {\r\n    function DiagnosticMessage(code, category, message) {\r\n        this.range = null;\r\n        this.code = code;\r\n        this.category = category;\r\n        this.message = message;\r\n    }\r\n    DiagnosticMessage.create = function (code, category, arg0, arg1) {\r\n        if (arg0 === void 0) { arg0 = null; }\r\n        if (arg1 === void 0) { arg1 = null; }\r\n        var message = diagnosticMessages_generated_1.diagnosticCodeToString(code);\r\n        if (arg0 != null)\r\n            message = message.replace(\"{0}\", arg0);\r\n        if (arg1 != null)\r\n            message = message.replace(\"{1}\", arg1);\r\n        return new DiagnosticMessage(code, category, message);\r\n    };\r\n    DiagnosticMessage.createInfo = function (code, arg0, arg1) {\r\n        if (arg0 === void 0) { arg0 = null; }\r\n        if (arg1 === void 0) { arg1 = null; }\r\n        return DiagnosticMessage.create(code, DiagnosticCategory.INFO, arg0, arg1);\r\n    };\r\n    DiagnosticMessage.createWarning = function (code, arg0, arg1) {\r\n        if (arg0 === void 0) { arg0 = null; }\r\n        if (arg1 === void 0) { arg1 = null; }\r\n        return DiagnosticMessage.create(code, DiagnosticCategory.WARNING, arg0, arg1);\r\n    };\r\n    DiagnosticMessage.createError = function (code, arg0, arg1) {\r\n        if (arg0 === void 0) { arg0 = null; }\r\n        if (arg1 === void 0) { arg1 = null; }\r\n        return DiagnosticMessage.create(code, DiagnosticCategory.ERROR, arg0, arg1);\r\n    };\r\n    DiagnosticMessage.prototype.withRange = function (range) {\r\n        this.range = range;\r\n        return this;\r\n    };\r\n    DiagnosticMessage.prototype.toString = function () {\r\n        if (this.range)\r\n            return diagnosticCategoryToString(this.category) + \" \" + this.code.toString(10) + \": \\\"\" + this.message + \"\\\" in \" + this.range.source.normalizedPath + \" @ \" + this.range.start.toString(10) + \",\" + this.range.end.toString(10);\r\n        return diagnosticCategoryToString(this.category) + \" \" + this.code.toString(10) + \": \" + this.message;\r\n    };\r\n    return DiagnosticMessage;\r\n}());\r\nexports.DiagnosticMessage = DiagnosticMessage;\r\nfunction formatDiagnosticMessage(message, useColors, showContext) {\r\n    if (useColors === void 0) { useColors = false; }\r\n    if (showContext === void 0) { showContext = false; }\r\n    // format context first (uses same string builder)\r\n    var context = \"\";\r\n    if (message.range && showContext)\r\n        context = formatDiagnosticContext(message.range, useColors);\r\n    // general information\r\n    var sb = [];\r\n    if (useColors)\r\n        sb.push(diagnosticCategoryToColor(message.category));\r\n    sb.push(diagnosticCategoryToString(message.category));\r\n    if (useColors)\r\n        sb.push(colorReset);\r\n    sb.push(message.code < 1000 ? \" AS\" : \" TS\");\r\n    sb.push(message.code.toString(10));\r\n    sb.push(\": \");\r\n    sb.push(message.message);\r\n    // range information if available\r\n    if (message.range) {\r\n        var range = message.range;\r\n        var text = range.source.text;\r\n        if (showContext) {\r\n            sb.push(\"\\n\");\r\n            sb.push(context);\r\n        }\r\n        sb.push(\"\\n\");\r\n        sb.push(\" in \");\r\n        sb.push(range.source.normalizedPath);\r\n        sb.push(\"(\");\r\n        sb.push(range.line.toString(10));\r\n        sb.push(\",\");\r\n        sb.push(range.column.toString(10));\r\n        sb.push(\")\");\r\n    }\r\n    return sb.join(\"\");\r\n}\r\nexports.formatDiagnosticMessage = formatDiagnosticMessage;\r\nfunction formatDiagnosticContext(range, useColors) {\r\n    if (useColors === void 0) { useColors = false; }\r\n    var text = range.source.text;\r\n    var len = text.length;\r\n    var start = range.start;\r\n    var end = range.end;\r\n    while (start > 0 && !charcode_1.isLineBreak(text.charCodeAt(start - 1)))\r\n        start--;\r\n    while (end < len && !charcode_1.isLineBreak(text.charCodeAt(end)))\r\n        end++;\r\n    var sb = [\r\n        \"\\n \",\r\n        text.substring(start, end),\r\n        \"\\n \"\r\n    ];\r\n    while (start < range.start) {\r\n        sb.push(\" \");\r\n        start++;\r\n    }\r\n    if (useColors)\r\n        sb.push(colorRed);\r\n    if (range.start == range.end) {\r\n        sb.push(\"^\");\r\n    }\r\n    else\r\n        while (start++ < range.end)\r\n            sb.push(\"~\");\r\n    if (useColors)\r\n        sb.push(colorReset);\r\n    return sb.join(\"\");\r\n}\r\nexports.formatDiagnosticContext = formatDiagnosticContext;\r\nvar DiagnosticEmitter = /** @class */ (function () {\r\n    // silentDiagnostics: bool = false;\r\n    function DiagnosticEmitter(diagnostics) {\r\n        if (diagnostics === void 0) { diagnostics = null; }\r\n        this.diagnostics = diagnostics ? diagnostics : new Array();\r\n    }\r\n    DiagnosticEmitter.prototype.emitDiagnostic = function (code, category, range, arg0, arg1) {\r\n        if (arg0 === void 0) { arg0 = null; }\r\n        if (arg1 === void 0) { arg1 = null; }\r\n        var message = DiagnosticMessage.create(code, category, arg0, arg1).withRange(range);\r\n        this.diagnostics.push(message);\r\n        // console.log(formatDiagnosticMessage(message, true, true) + \"\\n\"); // temporary\r\n        // console.log(<string>new Error(\"stack\").stack);\r\n    };\r\n    DiagnosticEmitter.prototype.error = function (code, range, arg0, arg1) {\r\n        if (arg0 === void 0) { arg0 = null; }\r\n        if (arg1 === void 0) { arg1 = null; }\r\n        this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, arg0, arg1);\r\n    };\r\n    DiagnosticEmitter.prototype.info = function (code, range, arg0, arg1) {\r\n        if (arg0 === void 0) { arg0 = null; }\r\n        if (arg1 === void 0) { arg1 = null; }\r\n        this.emitDiagnostic(code, DiagnosticCategory.INFO, range, arg0, arg1);\r\n    };\r\n    DiagnosticEmitter.prototype.warning = function (code, range, arg0, arg1) {\r\n        if (arg0 === void 0) { arg0 = null; }\r\n        if (arg1 === void 0) { arg1 = null; }\r\n        this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, arg0, arg1);\r\n    };\r\n    return DiagnosticEmitter;\r\n}());\r\nexports.DiagnosticEmitter = DiagnosticEmitter;\r\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar __values = (this && this.__values) || function (o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n};\r\nvar __read = (this && this.__read) || function (o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar diagnostics_1 = __webpack_require__(1);\r\nvar types_1 = __webpack_require__(4);\r\nvar ast_1 = __webpack_require__(5);\r\nvar module_1 = __webpack_require__(0);\r\n/** Path delimiter inserted between file system levels. */\r\nexports.PATH_DELIMITER = \"/\";\r\n/** Substitution used to indicate the parent directory. */\r\nexports.PARENT_SUBST = \"..\";\r\n/** Function name prefix used for getters. */\r\nexports.GETTER_PREFIX = \"get:\";\r\n/** Function name prefix used for setters. */\r\nexports.SETTER_PREFIX = \"set:\";\r\n/** Delimiter used between class names and instance members. */\r\nexports.INSTANCE_DELIMITER = \"#\";\r\n/** Delimiter used between class and namespace names and static members. */\r\nexports.STATIC_DELIMITER = \".\";\r\n/** Substitution used to indicate a library directory. */\r\nexports.LIBRARY_SUBST = \"(lib)\";\r\n/** Library directory prefix. */\r\nexports.LIBRARY_PREFIX = exports.LIBRARY_SUBST + exports.PATH_DELIMITER;\r\nvar QueuedExport = /** @class */ (function () {\r\n    function QueuedExport() {\r\n    }\r\n    return QueuedExport;\r\n}());\r\nvar QueuedImport = /** @class */ (function () {\r\n    function QueuedImport() {\r\n    }\r\n    return QueuedImport;\r\n}());\r\nvar noTypesYet = new Map();\r\n/** Represents an AssemblyScript program. */\r\nvar Program = /** @class */ (function (_super) {\r\n    __extends(Program, _super);\r\n    /** Constructs a new program, optionally inheriting parser diagnostics. */\r\n    function Program(diagnostics) {\r\n        if (diagnostics === void 0) { diagnostics = null; }\r\n        var _this = _super.call(this, diagnostics) || this;\r\n        /** Diagnostic offset used where sequentially obtaining the next diagnostic. */\r\n        _this.diagnosticsOffset = 0;\r\n        /** Elements by internal name. */\r\n        _this.elements = new Map();\r\n        /** Types by internal name. */\r\n        _this.types = noTypesYet;\r\n        /** Declared type aliases. */\r\n        _this.typeAliases = new Map();\r\n        /** Exports of individual files by exported internal name. Not global exports. */\r\n        _this.exports = new Map();\r\n        _this.sources = [];\r\n        return _this;\r\n    }\r\n    /** Initializes the program and its elements prior to compilation. */\r\n    Program.prototype.initialize = function (options) {\r\n        this.options = options;\r\n        this.types = new Map([\r\n            [\"i8\", types_1.Type.i8],\r\n            [\"i16\", types_1.Type.i16],\r\n            [\"i32\", types_1.Type.i32],\r\n            [\"i64\", types_1.Type.i64],\r\n            [\"isize\", options.isizeType],\r\n            [\"u8\", types_1.Type.u8],\r\n            [\"u16\", types_1.Type.u16],\r\n            [\"u32\", types_1.Type.u32],\r\n            [\"u64\", types_1.Type.u64],\r\n            [\"usize\", options.usizeType],\r\n            [\"bool\", types_1.Type.bool],\r\n            [\"f32\", types_1.Type.f32],\r\n            [\"f64\", types_1.Type.f64],\r\n            [\"void\", types_1.Type.void],\r\n            [\"number\", types_1.Type.f64],\r\n            [\"boolean\", types_1.Type.bool]\r\n        ]);\r\n        var queuedExports = new Map();\r\n        var queuedImports = new Array();\r\n        var queuedDerivedClasses = new Array();\r\n        // build initial lookup maps of internal names to declarations\r\n        for (var i = 0, k = this.sources.length; i < k; ++i) {\r\n            var source = this.sources[i];\r\n            var statements = source.statements;\r\n            for (var j = 0, l = statements.length; j < l; ++j) {\r\n                var statement = statements[j];\r\n                switch (statement.kind) {\r\n                    case ast_1.NodeKind.CLASSDECLARATION:\r\n                        this.initializeClass(statement, queuedDerivedClasses);\r\n                        break;\r\n                    case ast_1.NodeKind.ENUMDECLARATION:\r\n                        this.initializeEnum(statement);\r\n                        break;\r\n                    case ast_1.NodeKind.EXPORT:\r\n                        this.initializeExports(statement, queuedExports);\r\n                        break;\r\n                    case ast_1.NodeKind.FUNCTIONDECLARATION:\r\n                        this.initializeFunction(statement);\r\n                        break;\r\n                    case ast_1.NodeKind.IMPORT:\r\n                        this.initializeImports(statement, queuedExports, queuedImports);\r\n                        break;\r\n                    case ast_1.NodeKind.INTERFACEDECLARATION:\r\n                        this.initializeInterface(statement);\r\n                        break;\r\n                    case ast_1.NodeKind.NAMESPACEDECLARATION:\r\n                        this.initializeNamespace(statement, queuedDerivedClasses, null);\r\n                        break;\r\n                    case ast_1.NodeKind.TYPEDECLARATION:\r\n                        this.initializeTypeAlias(statement);\r\n                        break;\r\n                    case ast_1.NodeKind.VARIABLE:\r\n                        this.initializeVariables(statement);\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        var element;\r\n        // queued imports should be resolvable now through traversing exports and queued exports\r\n        for (i = 0; i < queuedImports.length;) {\r\n            var queuedImport = queuedImports[i];\r\n            element = this.tryResolveImport(queuedImport.referencedName, queuedExports);\r\n            if (element) {\r\n                this.elements.set(queuedImport.internalName, element);\r\n                queuedImports.splice(i, 1);\r\n            }\r\n            else {\r\n                element = this.tryResolveImport(queuedImport.referencedNameAlt, queuedExports);\r\n                if (element) {\r\n                    this.elements.set(queuedImport.internalName, element);\r\n                    queuedImports.splice(i, 1);\r\n                }\r\n                else {\r\n                    this.error(diagnostics_1.DiagnosticCode.Module_0_has_no_exported_member_1, queuedImport.declaration.range, queuedImport.declaration.parent.path.value, queuedImport.declaration.externalName.text);\r\n                    ++i;\r\n                }\r\n            }\r\n        }\r\n        try {\r\n            // queued exports should be resolvable now that imports are finalized\r\n            for (var queuedExports_1 = __values(queuedExports), queuedExports_1_1 = queuedExports_1.next(); !queuedExports_1_1.done; queuedExports_1_1 = queuedExports_1.next()) {\r\n                var _a = __read(queuedExports_1_1.value, 2), exportName = _a[0], queuedExport = _a[1];\r\n                var currentExport = queuedExport; // nullable below\r\n                do {\r\n                    if (currentExport.isReExport) {\r\n                        if (element = this.exports.get(currentExport.referencedName)) {\r\n                            this.setExportAndCheckLibrary(exportName, element, currentExport.member.externalName);\r\n                            break;\r\n                        }\r\n                        currentExport = queuedExports.get(currentExport.referencedName);\r\n                        if (!currentExport)\r\n                            this.error(diagnostics_1.DiagnosticCode.Module_0_has_no_exported_member_1, queuedExport.member.externalName.range, queuedExport.member.parent.path.value, queuedExport.member.externalName.text);\r\n                    }\r\n                    else {\r\n                        if ((element = this.elements.get(currentExport.referencedName)) || // normal export\r\n                            (element = this.elements.get(currentExport.member.name.text)) // library re-export\r\n                        )\r\n                            this.setExportAndCheckLibrary(exportName, element, currentExport.member.externalName);\r\n                        else\r\n                            this.error(diagnostics_1.DiagnosticCode.Cannot_find_name_0, queuedExport.member.range, queuedExport.member.name.text);\r\n                        break;\r\n                    }\r\n                } while (currentExport);\r\n            }\r\n        }\r\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\r\n        finally {\r\n            try {\r\n                if (queuedExports_1_1 && !queuedExports_1_1.done && (_b = queuedExports_1.return)) _b.call(queuedExports_1);\r\n            }\r\n            finally { if (e_1) throw e_1.error; }\r\n        }\r\n        // resolve base prototypes of derived classes\r\n        for (i = 0, k = queuedDerivedClasses.length; i < k; ++i) {\r\n            var derivedDeclaration = queuedDerivedClasses[i].declaration;\r\n            assert(derivedDeclaration != null);\r\n            var derivedType = derivedDeclaration.extendsType;\r\n            assert(derivedType != null);\r\n            var resolved = this.resolveIdentifier(derivedType.name, null); // reports\r\n            if (resolved) {\r\n                if (resolved.element.kind != ElementKind.CLASS_PROTOTYPE) {\r\n                    this.error(diagnostics_1.DiagnosticCode.A_class_may_only_extend_another_class, derivedType.range);\r\n                    continue;\r\n                }\r\n                queuedDerivedClasses[i].basePrototype = resolved.element;\r\n            }\r\n        }\r\n        var e_1, _b;\r\n    };\r\n    /** Tries to resolve an import by traversing exports and queued exports. */\r\n    Program.prototype.tryResolveImport = function (referencedName, queuedExports) {\r\n        var element;\r\n        do {\r\n            if (element = this.exports.get(referencedName))\r\n                return element;\r\n            var queuedExport = queuedExports.get(referencedName);\r\n            if (!queuedExport)\r\n                return null;\r\n            if (queuedExport.isReExport) {\r\n                referencedName = queuedExport.referencedName;\r\n                continue;\r\n            }\r\n            return this.elements.get(queuedExport.referencedName);\r\n        } while (true);\r\n    };\r\n    Program.prototype.checkInternalDecorators = function (element, declaration) {\r\n        var isBuiltin = ast_1.hasDecorator(\"builtin\", declaration.decorators);\r\n        if (isBuiltin)\r\n            element.set(ElementFlags.BUILTIN);\r\n        if (ast_1.hasDecorator(\"global\", declaration.decorators) ||\r\n            (declaration.range.source.isLibrary &&\r\n                element.is(ElementFlags.EXPORTED) &&\r\n                (assert(declaration.parent).kind == ast_1.NodeKind.SOURCE ||\r\n                    declaration.parent.kind == ast_1.NodeKind.VARIABLE &&\r\n                        assert(declaration.parent.parent).kind == ast_1.NodeKind.SOURCE))) {\r\n            element.set(ElementFlags.GLOBAL);\r\n            if (this.elements.has(declaration.name.text))\r\n                this.error(diagnostics_1.DiagnosticCode.Duplicate_identifier_0, declaration.name.range, element.internalName);\r\n            else {\r\n                this.elements.set(declaration.name.text, element);\r\n                this.exports.set(declaration.name.text, element);\r\n                if (isBuiltin)\r\n                    element.internalName = declaration.name.text;\r\n            }\r\n        }\r\n    };\r\n    Program.prototype.initializeClass = function (declaration, queuedDerivedClasses, namespace) {\r\n        if (namespace === void 0) { namespace = null; }\r\n        var internalName = declaration.fileLevelInternalName;\r\n        if (this.elements.has(internalName)) {\r\n            this.error(diagnostics_1.DiagnosticCode.Duplicate_identifier_0, declaration.name.range, internalName);\r\n            return;\r\n        }\r\n        var prototype = new ClassPrototype(this, declaration.name.text, internalName, declaration);\r\n        prototype.namespace = namespace;\r\n        this.elements.set(internalName, prototype);\r\n        this.checkInternalDecorators(prototype, declaration);\r\n        if (ast_1.hasDecorator(\"unmanaged\", declaration.decorators)) {\r\n            prototype.isUnmanaged = true;\r\n            if (declaration.implementsTypes && declaration.implementsTypes.length)\r\n                this.error(diagnostics_1.DiagnosticCode.Structs_cannot_implement_interfaces, ast_1.Range.join(declaration.name.range, declaration.implementsTypes[declaration.implementsTypes.length - 1].range));\r\n        }\r\n        else if (declaration.implementsTypes.length)\r\n            throw new Error(\"not implemented\");\r\n        // remember classes that extend another one\r\n        if (declaration.extendsType)\r\n            queuedDerivedClasses.push(prototype);\r\n        // add as namespace member if applicable\r\n        if (namespace) {\r\n            if (namespace.members) {\r\n                if (namespace.members.has(declaration.name.text)) {\r\n                    this.error(diagnostics_1.DiagnosticCode.Duplicate_identifier_0, declaration.name.range, internalName);\r\n                    return;\r\n                }\r\n            }\r\n            else\r\n                namespace.members = new Map();\r\n            namespace.members.set(declaration.name.text, prototype);\r\n            // otherwise add to file-level exports if exported\r\n        }\r\n        else if (prototype.is(ElementFlags.EXPORTED)) {\r\n            if (this.exports.has(internalName)) {\r\n                this.error(diagnostics_1.DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0, declaration.name.range, internalName);\r\n                return;\r\n            }\r\n            this.exports.set(internalName, prototype);\r\n        }\r\n        // initialize members\r\n        var memberDeclarations = declaration.members;\r\n        for (var i = 0, k = memberDeclarations.length; i < k; ++i) {\r\n            var memberDeclaration = memberDeclarations[i];\r\n            switch (memberDeclaration.kind) {\r\n                case ast_1.NodeKind.FIELDDECLARATION:\r\n                    this.initializeField(memberDeclaration, prototype);\r\n                    break;\r\n                case ast_1.NodeKind.METHODDECLARATION:\r\n                    var isGetter;\r\n                    if ((isGetter = ast_1.hasModifier(ast_1.ModifierKind.GET, memberDeclaration.modifiers)) || ast_1.hasModifier(ast_1.ModifierKind.SET, memberDeclaration.modifiers))\r\n                        this.initializeAccessor(memberDeclaration, prototype, isGetter);\r\n                    else\r\n                        this.initializeMethod(memberDeclaration, prototype);\r\n                    break;\r\n                default:\r\n                    throw new Error(\"class member expected\");\r\n            }\r\n        }\r\n        // check and possibly register string type\r\n        if (prototype.is(ElementFlags.GLOBAL) && declaration.name.text === \"String\" && !this.types.has(\"string\")) {\r\n            var instance = prototype.resolve(null);\r\n            if (instance)\r\n                this.types.set(\"string\", instance.type);\r\n        }\r\n    };\r\n    Program.prototype.initializeField = function (declaration, classPrototype) {\r\n        var name = declaration.name.text;\r\n        var internalName = declaration.fileLevelInternalName;\r\n        // static fields become global variables\r\n        if (ast_1.hasModifier(ast_1.ModifierKind.STATIC, declaration.modifiers)) {\r\n            if (this.elements.has(internalName)) {\r\n                this.error(diagnostics_1.DiagnosticCode.Duplicate_identifier_0, declaration.name.range, internalName);\r\n                return;\r\n            }\r\n            if (classPrototype.members) {\r\n                if (classPrototype.members.has(name)) {\r\n                    this.error(diagnostics_1.DiagnosticCode.Duplicate_identifier_0, declaration.name.range, internalName);\r\n                    return;\r\n                }\r\n            }\r\n            else\r\n                classPrototype.members = new Map();\r\n            var staticField = new Global(this, name, internalName, declaration, types_1.Type.void);\r\n            classPrototype.members.set(name, staticField);\r\n            this.elements.set(internalName, staticField);\r\n            // instance fields are remembered until resolved\r\n        }\r\n        else {\r\n            if (classPrototype.instanceMembers) {\r\n                if (classPrototype.instanceMembers.has(name)) {\r\n                    this.error(diagnostics_1.DiagnosticCode.Duplicate_identifier_0, declaration.name.range, internalName);\r\n                    return;\r\n                }\r\n            }\r\n            else\r\n                classPrototype.instanceMembers = new Map();\r\n            var instanceField = new FieldPrototype(classPrototype, name, internalName, declaration);\r\n            classPrototype.instanceMembers.set(name, instanceField);\r\n        }\r\n    };\r\n    Program.prototype.initializeMethod = function (declaration, classPrototype) {\r\n        var name = declaration.name.text;\r\n        var internalName = declaration.fileLevelInternalName;\r\n        var prototype = null;\r\n        // static methods become global functions\r\n        if (ast_1.hasModifier(ast_1.ModifierKind.STATIC, declaration.modifiers)) {\r\n            assert(declaration.name.kind != ast_1.NodeKind.CONSTRUCTOR);\r\n            if (this.elements.has(internalName)) {\r\n                this.error(diagnostics_1.DiagnosticCode.Duplicate_identifier_0, declaration.name.range, internalName);\r\n                return;\r\n            }\r\n            if (classPrototype.members) {\r\n                if (classPrototype.members.has(name)) {\r\n                    this.error(diagnostics_1.DiagnosticCode.Duplicate_identifier_0, declaration.name.range, internalName);\r\n                    return;\r\n                }\r\n            }\r\n            else\r\n                classPrototype.members = new Map();\r\n            prototype = new FunctionPrototype(this, name, internalName, declaration, null);\r\n            classPrototype.members.set(name, prototype);\r\n            this.elements.set(internalName, prototype);\r\n            // instance methods are remembered until resolved\r\n        }\r\n        else {\r\n            if (classPrototype.instanceMembers) {\r\n                if (classPrototype.instanceMembers.has(name)) {\r\n                    this.error(diagnostics_1.DiagnosticCode.Duplicate_identifier_0, declaration.name.range, internalName);\r\n                    return;\r\n                }\r\n            }\r\n            else\r\n                classPrototype.instanceMembers = new Map();\r\n            prototype = new FunctionPrototype(this, name, internalName, declaration, classPrototype);\r\n            // if (classPrototype.isUnmanaged && instancePrototype.isAbstract) {\r\n            //   this.error( Unmanaged classes cannot declare abstract methods. );\r\n            // }\r\n            if (declaration.name.kind == ast_1.NodeKind.CONSTRUCTOR) {\r\n                if (classPrototype.constructorPrototype)\r\n                    this.error(diagnostics_1.DiagnosticCode.Multiple_constructor_implementations_are_not_allowed, declaration.name.range);\r\n                else {\r\n                    prototype.set(ElementFlags.CONSTRUCTOR);\r\n                    classPrototype.constructorPrototype = prototype;\r\n                }\r\n            }\r\n            else\r\n                classPrototype.instanceMembers.set(name, prototype);\r\n        }\r\n        this.checkOperators(declaration.decorators, prototype, classPrototype);\r\n    };\r\n    Program.prototype.checkOperators = function (decorators, prototype, classPrototype) {\r\n        // handle operator annotations. operators are either instance methods taking a second argument of the\r\n        // instance's type or static methods taking two arguments of the instance's type. return values vary\r\n        // depending on the operation.\r\n        if (decorators) {\r\n            for (var i = 0, k = decorators.length; i < k; ++i) {\r\n                var decorator = decorators[i];\r\n                if (decorator.decoratorKind == 2 /* OPERATOR */) {\r\n                    if (!prototype) {\r\n                        this.error(diagnostics_1.DiagnosticCode.Operation_not_supported, decorator.range);\r\n                        continue;\r\n                    }\r\n                    var numArgs = decorator.arguments && decorator.arguments.length || 0;\r\n                    if (numArgs == 1) {\r\n                        var firstArg = decorator.arguments[0];\r\n                        if (firstArg.kind == ast_1.NodeKind.LITERAL && firstArg.literalKind == 2 /* STRING */) {\r\n                            switch (firstArg.value) {\r\n                                case \"[]\":\r\n                                    classPrototype.fnIndexedGet = prototype.simpleName;\r\n                                    break;\r\n                                case \"[]=\":\r\n                                    classPrototype.fnIndexedSet = prototype.simpleName;\r\n                                    break;\r\n                                case \"+\":\r\n                                    classPrototype.fnConcat = prototype.simpleName;\r\n                                    break;\r\n                                case \"==\":\r\n                                    classPrototype.fnEquals = prototype.simpleName;\r\n                                    break;\r\n                                default:\r\n                                    this.error(diagnostics_1.DiagnosticCode.Operation_not_supported, firstArg.range);\r\n                            }\r\n                        }\r\n                        else\r\n                            this.error(diagnostics_1.DiagnosticCode.String_literal_expected, firstArg.range);\r\n                    }\r\n                    else\r\n                        this.error(diagnostics_1.DiagnosticCode.Expected_0_arguments_but_got_1, decorator.range, \"1\", numArgs.toString(0));\r\n                }\r\n                else if (decorator.decoratorKind != 0 /* CUSTOM */)\r\n                    this.error(diagnostics_1.DiagnosticCode.Operation_not_supported, decorator.range);\r\n            }\r\n        }\r\n    };\r\n    Program.prototype.initializeAccessor = function (declaration, classPrototype, isGetter) {\r\n        var propertyName = declaration.name.text;\r\n        var internalPropertyName = declaration.fileLevelInternalName;\r\n        var propertyElement = this.elements.get(internalPropertyName);\r\n        if (propertyElement) {\r\n            if (propertyElement.kind != ElementKind.PROPERTY || (isGetter ? propertyElement.getterPrototype : propertyElement.setterPrototype)) {\r\n                this.error(diagnostics_1.DiagnosticCode.Duplicate_identifier_0, declaration.name.range, internalPropertyName);\r\n                return;\r\n            }\r\n        }\r\n        else\r\n            propertyElement = new Property(this, propertyName, internalPropertyName, classPrototype);\r\n        var name = (isGetter ? exports.GETTER_PREFIX : exports.SETTER_PREFIX) + propertyName;\r\n        // static accessors become global functions\r\n        if (ast_1.hasModifier(ast_1.ModifierKind.STATIC, declaration.modifiers)) {\r\n            var internalStaticName = classPrototype.internalName + exports.STATIC_DELIMITER + name;\r\n            if (this.elements.has(internalStaticName)) {\r\n                this.error(diagnostics_1.DiagnosticCode.Duplicate_identifier_0, declaration.name.range, internalStaticName);\r\n                return;\r\n            }\r\n            var staticPrototype = new FunctionPrototype(this, name, internalStaticName, declaration, null);\r\n            if (isGetter)\r\n                propertyElement.getterPrototype = staticPrototype;\r\n            else\r\n                propertyElement.setterPrototype = staticPrototype;\r\n            if (!classPrototype.members)\r\n                classPrototype.members = new Map();\r\n            classPrototype.members.set(propertyName, propertyElement); // checked above\r\n            this.elements.set(internalPropertyName, propertyElement);\r\n            // instance accessors are remembered until resolved\r\n        }\r\n        else {\r\n            var internalInstanceName = classPrototype.internalName + exports.INSTANCE_DELIMITER + name;\r\n            if (classPrototype.instanceMembers) {\r\n                if (classPrototype.instanceMembers.has(name)) {\r\n                    this.error(diagnostics_1.DiagnosticCode.Duplicate_identifier_0, declaration.name.range, internalPropertyName);\r\n                    return;\r\n                }\r\n            }\r\n            else\r\n                classPrototype.instanceMembers = new Map();\r\n            var instancePrototype = new FunctionPrototype(this, name, internalInstanceName, declaration, classPrototype);\r\n            if (isGetter)\r\n                propertyElement.getterPrototype = instancePrototype;\r\n            else\r\n                propertyElement.setterPrototype = instancePrototype;\r\n            classPrototype.instanceMembers.set(name, propertyElement);\r\n            this.elements.set(internalPropertyName, propertyElement);\r\n        }\r\n    };\r\n    Program.prototype.initializeEnum = function (declaration, namespace) {\r\n        if (namespace === void 0) { namespace = null; }\r\n        var internalName = declaration.fileLevelInternalName;\r\n        if (this.elements.has(internalName)) {\r\n            this.error(diagnostics_1.DiagnosticCode.Duplicate_identifier_0, declaration.name.range, internalName);\r\n            return;\r\n        }\r\n        var enm = new Enum(this, declaration.name.text, internalName, declaration);\r\n        enm.namespace = namespace;\r\n        this.elements.set(internalName, enm);\r\n        this.checkInternalDecorators(enm, declaration);\r\n        if (namespace) {\r\n            if (namespace.members) {\r\n                if (namespace.members.has(declaration.name.text)) {\r\n                    this.error(diagnostics_1.DiagnosticCode.Duplicate_identifier_0, declaration.name.range, internalName);\r\n                    return;\r\n                }\r\n            }\r\n            else\r\n                namespace.members = new Map();\r\n            namespace.members.set(declaration.name.text, enm);\r\n        }\r\n        else if (enm.is(ElementFlags.EXPORTED)) {\r\n            if (this.exports.has(internalName)) {\r\n                this.error(diagnostics_1.DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0, declaration.name.range, internalName);\r\n                return;\r\n            }\r\n            this.exports.set(internalName, enm);\r\n        }\r\n        var values = declaration.values;\r\n        for (var i = 0, k = values.length; i < k; ++i)\r\n            this.initializeEnumValue(values[i], enm);\r\n    };\r\n    Program.prototype.initializeEnumValue = function (declaration, enm) {\r\n        var name = declaration.name.text;\r\n        var internalName = declaration.fileLevelInternalName;\r\n        if (enm.members) {\r\n            if (enm.members.has(name)) {\r\n                this.error(diagnostics_1.DiagnosticCode.Duplicate_identifier_0, declaration.name.range, internalName);\r\n                return;\r\n            }\r\n        }\r\n        else\r\n            enm.members = new Map();\r\n        var value = new EnumValue(enm, this, name, internalName, declaration);\r\n        enm.members.set(name, value);\r\n    };\r\n    Program.prototype.initializeExports = function (statement, queuedExports) {\r\n        var members = statement.members;\r\n        for (var i = 0, k = members.length; i < k; ++i)\r\n            this.initializeExport(members[i], statement.internalPath, queuedExports);\r\n    };\r\n    Program.prototype.setExportAndCheckLibrary = function (name, element, identifier) {\r\n        this.exports.set(name, element);\r\n        if (identifier.range.source.isLibrary) {\r\n            if (this.elements.has(identifier.text))\r\n                this.error(diagnostics_1.DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0, identifier.range, identifier.text);\r\n            else {\r\n                element.internalName = identifier.text;\r\n                this.elements.set(identifier.text, element);\r\n            }\r\n        }\r\n    };\r\n    Program.prototype.initializeExport = function (member, internalPath, queuedExports) {\r\n        var externalName = member.range.source.internalPath + exports.PATH_DELIMITER + member.externalName.text;\r\n        if (this.exports.has(externalName)) {\r\n            this.error(diagnostics_1.DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0, member.externalName.range, externalName);\r\n            return;\r\n        }\r\n        var referencedName;\r\n        var referencedElement;\r\n        var queuedExport;\r\n        // export local element\r\n        if (internalPath == null) {\r\n            referencedName = member.range.source.internalPath + exports.PATH_DELIMITER + member.name.text;\r\n            // resolve right away if the element exists\r\n            if (referencedElement = this.elements.get(referencedName)) {\r\n                this.setExportAndCheckLibrary(externalName, referencedElement, member.externalName);\r\n                return;\r\n            }\r\n            // otherwise queue it\r\n            if (queuedExports.has(externalName)) {\r\n                this.error(diagnostics_1.DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0, member.externalName.range, externalName);\r\n                return;\r\n            }\r\n            queuedExport = new QueuedExport();\r\n            queuedExport.isReExport = false;\r\n            queuedExport.referencedName = referencedName; // -> internal name\r\n            queuedExport.member = member;\r\n            queuedExports.set(externalName, queuedExport);\r\n            // export external element\r\n        }\r\n        else {\r\n            referencedName = internalPath + exports.PATH_DELIMITER + member.name.text;\r\n            // resolve right away if the export exists\r\n            if (referencedElement = this.elements.get(referencedName)) {\r\n                this.setExportAndCheckLibrary(externalName, referencedElement, member.externalName);\r\n                return;\r\n            }\r\n            // walk already known queued exports\r\n            var seen = new Set();\r\n            while (queuedExport = queuedExports.get(referencedName)) {\r\n                if (queuedExport.isReExport) {\r\n                    if (referencedElement = this.exports.get(queuedExport.referencedName)) {\r\n                        this.setExportAndCheckLibrary(externalName, referencedElement, member.externalName);\r\n                        return;\r\n                    }\r\n                    referencedName = queuedExport.referencedName;\r\n                    if (seen.has(queuedExport))\r\n                        break;\r\n                    seen.add(queuedExport);\r\n                }\r\n                else {\r\n                    if (referencedElement = this.elements.get(queuedExport.referencedName)) {\r\n                        this.setExportAndCheckLibrary(externalName, referencedElement, member.externalName);\r\n                        return;\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n            // otherwise queue it\r\n            if (queuedExports.has(externalName)) {\r\n                this.error(diagnostics_1.DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0, member.externalName.range, externalName);\r\n                return;\r\n            }\r\n            queuedExport = new QueuedExport();\r\n            queuedExport.isReExport = true;\r\n            queuedExport.referencedName = referencedName; // -> export name\r\n            queuedExport.member = member;\r\n            queuedExports.set(externalName, queuedExport);\r\n        }\r\n    };\r\n    Program.prototype.initializeFunction = function (declaration, namespace) {\r\n        if (namespace === void 0) { namespace = null; }\r\n        var internalName = declaration.fileLevelInternalName;\r\n        if (this.elements.has(internalName)) {\r\n            this.error(diagnostics_1.DiagnosticCode.Duplicate_identifier_0, declaration.name.range, internalName);\r\n            return;\r\n        }\r\n        var prototype = new FunctionPrototype(this, declaration.name.text, internalName, declaration, null);\r\n        prototype.namespace = namespace;\r\n        this.elements.set(internalName, prototype);\r\n        this.checkInternalDecorators(prototype, declaration);\r\n        if (namespace) {\r\n            if (namespace.members) {\r\n                if (namespace.members.has(declaration.name.text)) {\r\n                    this.error(diagnostics_1.DiagnosticCode.Duplicate_identifier_0, declaration.name.range, internalName);\r\n                    return;\r\n                }\r\n            }\r\n            else\r\n                namespace.members = new Map();\r\n            namespace.members.set(declaration.name.text, prototype);\r\n        }\r\n        else if (prototype.is(ElementFlags.EXPORTED)) {\r\n            if (this.exports.has(internalName)) {\r\n                this.error(diagnostics_1.DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0, declaration.name.range, internalName);\r\n                return;\r\n            }\r\n            this.exports.set(internalName, prototype);\r\n        }\r\n    };\r\n    Program.prototype.initializeImports = function (statement, queuedExports, queuedImports) {\r\n        var declarations = statement.declarations;\r\n        if (declarations) {\r\n            for (var i = 0, k = declarations.length; i < k; ++i)\r\n                this.initializeImport(declarations[i], statement.internalPath, queuedExports, queuedImports);\r\n        }\r\n        else if (statement.namespaceName) {\r\n            var internalName = statement.range.source.internalPath + \"/\" + statement.namespaceName.text;\r\n            if (this.elements.has(internalName)) {\r\n                this.error(diagnostics_1.DiagnosticCode.Duplicate_identifier_0, statement.namespaceName.range, internalName);\r\n                return;\r\n            }\r\n            this.error(diagnostics_1.DiagnosticCode.Operation_not_supported, statement.range); // TODO\r\n        }\r\n    };\r\n    Program.prototype.initializeImport = function (declaration, internalPath, queuedExports, queuedImports) {\r\n        var internalName = declaration.fileLevelInternalName;\r\n        if (this.elements.has(internalName)) {\r\n            this.error(diagnostics_1.DiagnosticCode.Duplicate_identifier_0, declaration.name.range, internalName);\r\n            return;\r\n        }\r\n        var referencedName = internalPath + exports.PATH_DELIMITER + declaration.externalName.text;\r\n        // resolve right away if the exact export exists\r\n        var element;\r\n        if (element = this.exports.get(referencedName)) {\r\n            this.elements.set(internalName, element);\r\n            return;\r\n        }\r\n        // otherwise queue it\r\n        var indexPart = exports.PATH_DELIMITER + \"index\";\r\n        var queuedImport = new QueuedImport();\r\n        queuedImport.internalName = internalName;\r\n        if (internalPath.endsWith(indexPart)) {\r\n            queuedImport.referencedName = referencedName; // try exact first\r\n            queuedImport.referencedNameAlt = internalPath.substring(0, internalPath.length - indexPart.length + 1) + declaration.externalName.text;\r\n        }\r\n        else {\r\n            queuedImport.referencedName = referencedName; // try exact first\r\n            queuedImport.referencedNameAlt = internalPath + indexPart + exports.PATH_DELIMITER + declaration.externalName.text;\r\n        }\r\n        queuedImport.declaration = declaration;\r\n        queuedImports.push(queuedImport);\r\n    };\r\n    Program.prototype.initializeInterface = function (declaration, namespace) {\r\n        if (namespace === void 0) { namespace = null; }\r\n        var internalName = declaration.fileLevelInternalName;\r\n        if (this.elements.has(internalName)) {\r\n            this.error(diagnostics_1.DiagnosticCode.Duplicate_identifier_0, declaration.name.range, internalName);\r\n            return;\r\n        }\r\n        var prototype = new InterfacePrototype(this, declaration.name.text, internalName, declaration);\r\n        prototype.namespace = namespace;\r\n        this.elements.set(internalName, prototype);\r\n        this.checkInternalDecorators(prototype, declaration);\r\n        if (namespace) {\r\n            if (namespace.members) {\r\n                if (namespace.members.has(prototype.internalName)) {\r\n                    this.error(diagnostics_1.DiagnosticCode.Duplicate_identifier_0, declaration.name.range, internalName);\r\n                    return;\r\n                }\r\n            }\r\n            else\r\n                namespace.members = new Map();\r\n            namespace.members.set(prototype.internalName, prototype);\r\n        }\r\n        else if (prototype.is(ElementFlags.EXPORTED)) {\r\n            if (this.exports.has(internalName)) {\r\n                this.error(diagnostics_1.DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0, declaration.name.range, internalName);\r\n                return;\r\n            }\r\n            this.exports.set(internalName, prototype);\r\n        }\r\n        var memberDeclarations = declaration.members;\r\n        for (var i = 0, k = memberDeclarations.length; i < k; ++i) {\r\n            var memberDeclaration = memberDeclarations[i];\r\n            switch (memberDeclaration.kind) {\r\n                case ast_1.NodeKind.FIELDDECLARATION:\r\n                    this.initializeField(memberDeclaration, prototype);\r\n                    break;\r\n                case ast_1.NodeKind.METHODDECLARATION:\r\n                    var isGetter;\r\n                    if ((isGetter = ast_1.hasModifier(ast_1.ModifierKind.GET, memberDeclaration.modifiers)) || ast_1.hasModifier(ast_1.ModifierKind.SET, memberDeclaration.modifiers))\r\n                        this.initializeAccessor(memberDeclaration, prototype, isGetter);\r\n                    else\r\n                        this.initializeMethod(memberDeclaration, prototype);\r\n                    break;\r\n                default:\r\n                    throw new Error(\"interface member expected\");\r\n            }\r\n        }\r\n    };\r\n    Program.prototype.initializeNamespace = function (declaration, queuedExtendingClasses, parentNamespace) {\r\n        if (parentNamespace === void 0) { parentNamespace = null; }\r\n        var internalName = declaration.fileLevelInternalName;\r\n        var namespace = this.elements.get(internalName);\r\n        if (!namespace) {\r\n            namespace = new Namespace(this, declaration.name.text, internalName, declaration);\r\n            namespace.namespace = parentNamespace;\r\n            this.elements.set(internalName, namespace);\r\n            this.checkInternalDecorators(namespace, declaration);\r\n        }\r\n        if (parentNamespace) {\r\n            if (parentNamespace.members) {\r\n                if (parentNamespace.members.has(declaration.name.text)) {\r\n                    this.error(diagnostics_1.DiagnosticCode.Duplicate_identifier_0, declaration.name.range, internalName);\r\n                    return;\r\n                }\r\n            }\r\n            else\r\n                parentNamespace.members = new Map();\r\n            parentNamespace.members.set(declaration.name.text, namespace);\r\n        }\r\n        else if (namespace.is(ElementFlags.EXPORTED)) {\r\n            if (this.exports.has(internalName)) {\r\n                this.error(diagnostics_1.DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0, declaration.name.range, internalName);\r\n                return;\r\n            }\r\n            this.exports.set(internalName, namespace);\r\n        }\r\n        var members = declaration.members;\r\n        for (var i = 0, k = members.length; i < k; ++i) {\r\n            switch (members[i].kind) {\r\n                case ast_1.NodeKind.CLASSDECLARATION:\r\n                    this.initializeClass(members[i], queuedExtendingClasses, namespace);\r\n                    break;\r\n                case ast_1.NodeKind.ENUMDECLARATION:\r\n                    this.initializeEnum(members[i], namespace);\r\n                    break;\r\n                case ast_1.NodeKind.FUNCTIONDECLARATION:\r\n                    this.initializeFunction(members[i], namespace);\r\n                    break;\r\n                case ast_1.NodeKind.INTERFACEDECLARATION:\r\n                    this.initializeInterface(members[i], namespace);\r\n                    break;\r\n                case ast_1.NodeKind.NAMESPACEDECLARATION:\r\n                    this.initializeNamespace(members[i], queuedExtendingClasses, namespace);\r\n                    break;\r\n                case ast_1.NodeKind.TYPEDECLARATION:\r\n                    // this.initializeTypeAlias(<TypeDeclaration>members[i], namespace);\r\n                    // TODO: what about namespaced types?\r\n                    this.error(diagnostics_1.DiagnosticCode.Operation_not_supported, members[i].range);\r\n                    break;\r\n                case ast_1.NodeKind.VARIABLE:\r\n                    this.initializeVariables(members[i], namespace);\r\n                    break;\r\n                default:\r\n                    throw new Error(\"namespace member expected\");\r\n            }\r\n        }\r\n    };\r\n    Program.prototype.initializeTypeAlias = function (declaration, namespace) {\r\n        if (namespace === void 0) { namespace = null; }\r\n        // type aliases are program globals\r\n        // TODO: what about namespaced types?\r\n        var name = declaration.name.text;\r\n        if (this.types.has(name) || this.typeAliases.has(name)) {\r\n            this.error(diagnostics_1.DiagnosticCode.Duplicate_identifier_0, declaration.name.range, name);\r\n            return;\r\n        }\r\n        this.typeAliases.set(name, declaration.alias);\r\n    };\r\n    Program.prototype.initializeVariables = function (statement, namespace) {\r\n        if (namespace === void 0) { namespace = null; }\r\n        var declarations = statement.declarations;\r\n        for (var i = 0, k = declarations.length; i < k; ++i) {\r\n            var declaration = declarations[i];\r\n            var internalName = declaration.fileLevelInternalName;\r\n            if (this.elements.has(internalName)) {\r\n                this.error(diagnostics_1.DiagnosticCode.Duplicate_identifier_0, declaration.name.range, internalName);\r\n                continue;\r\n            }\r\n            var global = new Global(this, declaration.name.text, internalName, declaration, /* resolved later */ types_1.Type.void);\r\n            global.namespace = namespace;\r\n            this.elements.set(internalName, global);\r\n            this.checkInternalDecorators(global, declaration);\r\n            if (namespace) {\r\n                if (namespace.members) {\r\n                    if (namespace.members.has(declaration.name.text)) {\r\n                        this.error(diagnostics_1.DiagnosticCode.Duplicate_identifier_0, declaration.name.range, internalName);\r\n                        continue;\r\n                    }\r\n                }\r\n                else\r\n                    namespace.members = new Map();\r\n                namespace.members.set(declaration.name.text, global);\r\n            }\r\n            else if (global.is(ElementFlags.EXPORTED)) {\r\n                if (this.exports.has(internalName))\r\n                    this.error(diagnostics_1.DiagnosticCode.Duplicate_identifier_0, declaration.name.range, internalName);\r\n                else\r\n                    this.exports.set(internalName, global);\r\n            }\r\n        }\r\n    };\r\n    /** Resolves a {@link TypeNode} to a concrete {@link Type}. */\r\n    Program.prototype.resolveType = function (node, contextualTypeArguments, reportNotFound) {\r\n        if (contextualTypeArguments === void 0) { contextualTypeArguments = null; }\r\n        if (reportNotFound === void 0) { reportNotFound = true; }\r\n        var globalName = node.name.text;\r\n        var localName = node.range.source.internalPath + exports.PATH_DELIMITER + node.name.text;\r\n        var element;\r\n        // check file-global / program-global element\r\n        if ((element = this.elements.get(localName)) || (element = this.elements.get(globalName))) {\r\n            switch (element.kind) {\r\n                case ElementKind.CLASS_PROTOTYPE:\r\n                    var instance = element.resolveInclTypeArguments(node.typeArguments, contextualTypeArguments, null); // reports\r\n                    return instance ? instance.type : null;\r\n            }\r\n        }\r\n        // resolve parameters\r\n        var k = node.typeArguments.length;\r\n        var paramTypes = new Array(k);\r\n        for (var i = 0; i < k; ++i) {\r\n            var paramType = this.resolveType(node.typeArguments[i], contextualTypeArguments, reportNotFound);\r\n            if (!paramType)\r\n                return null;\r\n            paramTypes[i] = paramType;\r\n        }\r\n        if (k) {\r\n            var instanceKey = types_1.typesToString(paramTypes);\r\n            if (instanceKey.length) {\r\n                localName += \"<\" + instanceKey + \">\";\r\n                globalName += \"<\" + instanceKey + \">\";\r\n            }\r\n        }\r\n        else if (contextualTypeArguments) {\r\n            var placeholderType = contextualTypeArguments.get(globalName);\r\n            if (placeholderType)\r\n                return placeholderType;\r\n        }\r\n        var type;\r\n        // check file-global / program-global type\r\n        if ((type = this.types.get(localName)) || (type = this.types.get(globalName)))\r\n            return type;\r\n        // check type alias\r\n        var alias = this.typeAliases.get(globalName);\r\n        if (alias && (type = this.resolveType(alias, null, reportNotFound)))\r\n            return type;\r\n        if (reportNotFound)\r\n            this.error(diagnostics_1.DiagnosticCode.Cannot_find_name_0, node.name.range, globalName);\r\n        return null;\r\n    };\r\n    /** Resolves an array of type parameters to concrete types. */\r\n    Program.prototype.resolveTypeArguments = function (typeParameters, typeArgumentNodes, contextualTypeArguments, alternativeReportNode) {\r\n        if (contextualTypeArguments === void 0) { contextualTypeArguments = null; }\r\n        if (alternativeReportNode === void 0) { alternativeReportNode = null; }\r\n        var parameterCount = typeParameters.length;\r\n        var argumentCount = typeArgumentNodes ? typeArgumentNodes.length : 0;\r\n        if (parameterCount != argumentCount) {\r\n            if (argumentCount)\r\n                this.error(diagnostics_1.DiagnosticCode.Expected_0_type_arguments_but_got_1, ast_1.Range.join(typeArgumentNodes[0].range, typeArgumentNodes[argumentCount - 1].range), parameterCount.toString(10), argumentCount.toString(10));\r\n            else if (alternativeReportNode)\r\n                this.error(diagnostics_1.DiagnosticCode.Expected_0_type_arguments_but_got_1, alternativeReportNode.range.atEnd, parameterCount.toString(10), \"0\");\r\n            return null;\r\n        }\r\n        var typeArguments = new Array(parameterCount);\r\n        for (var i = 0; i < parameterCount; ++i) {\r\n            var type = this.resolveType(typeArgumentNodes[i], contextualTypeArguments, true); // reports\r\n            if (!type)\r\n                return null;\r\n            // TODO: check extendsType\r\n            typeArguments[i] = type;\r\n        }\r\n        return typeArguments;\r\n    };\r\n    /** Resolves an identifier to the element it refers to. */\r\n    Program.prototype.resolveIdentifier = function (identifier, contextualFunction, contextualEnum) {\r\n        if (contextualEnum === void 0) { contextualEnum = null; }\r\n        var name = identifier.text;\r\n        var element;\r\n        var namespace;\r\n        var reference;\r\n        // check siblings\r\n        if (contextualEnum) {\r\n            if (contextualEnum.members && (element = contextualEnum.members.get(name)) && element.kind == ElementKind.ENUMVALUE)\r\n                return (resolvedElement || (resolvedElement = new ResolvedElement())).set(element);\r\n        }\r\n        else if (contextualFunction) {\r\n            // check locals\r\n            if (element = contextualFunction.flow.getScopedLocal(name))\r\n                return (resolvedElement || (resolvedElement = new ResolvedElement())).set(element);\r\n            // search contextual parent namespaces if applicable\r\n            if (namespace = contextualFunction.prototype.namespace) {\r\n                do {\r\n                    if (element = this.elements.get(namespace.internalName + exports.STATIC_DELIMITER + name))\r\n                        // if ((namespace.members && (element = namespace.members.get(name))) || (element = this.elements.get(namespace.internalName + STATIC_DELIMITER + name)))\r\n                        return (resolvedElement || (resolvedElement = new ResolvedElement())).set(element);\r\n                } while (namespace = namespace.namespace);\r\n            }\r\n        }\r\n        // search current file\r\n        if (element = this.elements.get(identifier.range.source.internalPath + exports.PATH_DELIMITER + name))\r\n            return (resolvedElement || (resolvedElement = new ResolvedElement())).set(element);\r\n        // search global scope\r\n        if (element = this.elements.get(name))\r\n            return (resolvedElement || (resolvedElement = new ResolvedElement())).set(element);\r\n        this.error(diagnostics_1.DiagnosticCode.Cannot_find_name_0, identifier.range, name);\r\n        return null;\r\n    };\r\n    /** Resolves a property access to the element it refers to. */\r\n    Program.prototype.resolvePropertyAccess = function (propertyAccess, contextualFunction) {\r\n        // start by resolving the lhs target (expression before the last dot)\r\n        var targetExpression = propertyAccess.expression;\r\n        if (!(resolvedElement = this.resolveExpression(targetExpression, contextualFunction)))\r\n            return null;\r\n        var target = resolvedElement.element;\r\n        // at this point we know exactly what the target is, so look up the element within\r\n        var propertyName = propertyAccess.property.text;\r\n        var targetType;\r\n        var member;\r\n        // Resolve variable-likes to their class type first\r\n        switch (target.kind) {\r\n            case ElementKind.GLOBAL:\r\n            case ElementKind.LOCAL:\r\n            case ElementKind.FIELD:\r\n                if (!(targetType = target.type).classType) {\r\n                    this.error(diagnostics_1.DiagnosticCode.Property_0_does_not_exist_on_type_1, propertyAccess.property.range, propertyName, targetType.toString());\r\n                    return null;\r\n                }\r\n                target = targetType.classType;\r\n                break;\r\n            case ElementKind.PROPERTY:\r\n                var getter = assert(target.getterPrototype).resolve(); // reports\r\n                if (!getter)\r\n                    return null;\r\n                if (!(targetType = getter.returnType).classType) {\r\n                    this.error(diagnostics_1.DiagnosticCode.Property_0_does_not_exist_on_type_1, propertyAccess.property.range, propertyName, targetType.toString());\r\n                    return null;\r\n                }\r\n                target = targetType.classType;\r\n                break;\r\n        }\r\n        // Look up the member within\r\n        switch (target.kind) {\r\n            case ElementKind.CLASS_PROTOTYPE:\r\n            case ElementKind.CLASS:\r\n                do {\r\n                    if (target.members && (member = target.members.get(propertyName)))\r\n                        return resolvedElement.set(member).withTarget(target, targetExpression);\r\n                    // check inherited static members on the base prototype while target is a class prototype\r\n                    if (target.kind == ElementKind.CLASS_PROTOTYPE) {\r\n                        if (target.basePrototype)\r\n                            target = target.basePrototype;\r\n                        else\r\n                            break;\r\n                        // or inherited instance members on the cbase class while target is a class instance\r\n                    }\r\n                    else if (target.kind == ElementKind.CLASS) {\r\n                        if (target.base)\r\n                            target = target.base;\r\n                        else\r\n                            break;\r\n                    }\r\n                    else\r\n                        break;\r\n                } while (true);\r\n                break;\r\n            default:// enums or other namespace-like elements\r\n                if (target.members && (member = target.members.get(propertyName)))\r\n                    return resolvedElement.set(member).withTarget(target, targetExpression);\r\n                break;\r\n        }\r\n        this.error(diagnostics_1.DiagnosticCode.Property_0_does_not_exist_on_type_1, propertyAccess.property.range, propertyName, target.internalName);\r\n        return null;\r\n    };\r\n    Program.prototype.resolveElementAccess = function (elementAccess, contextualFunction) {\r\n        // start by resolving the lhs target (expression before the last dot)\r\n        var targetExpression = elementAccess.expression;\r\n        if (!(resolvedElement = this.resolveExpression(targetExpression, contextualFunction)))\r\n            return null;\r\n        var target = resolvedElement.element;\r\n        switch (target.kind) {\r\n            case ElementKind.GLOBAL:\r\n            case ElementKind.LOCAL:\r\n            case ElementKind.FIELD:\r\n                var type = target.type;\r\n                if (type.classType) {\r\n                    var indexedGetName = (target = type.classType).prototype.fnIndexedGet;\r\n                    var indexedGet;\r\n                    if (indexedGetName != null && target.members && (indexedGet = target.members.get(indexedGetName)) && indexedGet.kind == ElementKind.FUNCTION_PROTOTYPE)\r\n                        return resolvedElement.set(indexedGet).withTarget(type.classType, targetExpression);\r\n                }\r\n                break;\r\n        }\r\n        this.error(diagnostics_1.DiagnosticCode.Index_signature_is_missing_in_type_0, targetExpression.range, target.internalName);\r\n        return null;\r\n    };\r\n    Program.prototype.resolveExpression = function (expression, contextualFunction) {\r\n        var classType;\r\n        while (expression.kind == ast_1.NodeKind.PARENTHESIZED)\r\n            expression = expression.expression;\r\n        switch (expression.kind) {\r\n            case ast_1.NodeKind.ASSERTION:\r\n                var type = this.resolveType(expression.toType); // reports\r\n                if (type && (classType = type.classType))\r\n                    return (resolvedElement || (resolvedElement = new ResolvedElement())).set(classType);\r\n                return null;\r\n            case ast_1.NodeKind.BINARY:\r\n                // TODO: string concatenation, mostly\r\n                throw new Error(\"not implemented\");\r\n            case ast_1.NodeKind.THIS:// -> Class\r\n                if (classType = contextualFunction.instanceMethodOf)\r\n                    return (resolvedElement || (resolvedElement = new ResolvedElement())).set(classType);\r\n                this.error(diagnostics_1.DiagnosticCode._this_cannot_be_referenced_in_current_location, expression.range);\r\n                return null;\r\n            case ast_1.NodeKind.SUPER:// -> Class\r\n                if ((classType = contextualFunction.instanceMethodOf) && (classType = classType.base))\r\n                    return (resolvedElement || (resolvedElement = new ResolvedElement())).set(classType);\r\n                this.error(diagnostics_1.DiagnosticCode._super_can_only_be_referenced_in_a_derived_class, expression.range);\r\n                return null;\r\n            case ast_1.NodeKind.IDENTIFIER:\r\n                return this.resolveIdentifier(expression, contextualFunction);\r\n            case ast_1.NodeKind.PROPERTYACCESS:\r\n                return this.resolvePropertyAccess(expression, contextualFunction);\r\n            case ast_1.NodeKind.ELEMENTACCESS:\r\n                return this.resolveElementAccess(expression, contextualFunction);\r\n            case ast_1.NodeKind.CALL:\r\n                var resolved = this.resolveExpression(expression.expression, contextualFunction);\r\n                if (resolved) {\r\n                    var element = resolved.element;\r\n                    if (element && element.kind == ElementKind.FUNCTION_PROTOTYPE) {\r\n                        var instance = element.resolveInclTypeArguments(expression.typeArguments, null, expression);\r\n                        if (instance && instance.returnType.classType)\r\n                            return (resolvedElement || (resolvedElement = new ResolvedElement())).set(instance.returnType.classType);\r\n                    }\r\n                }\r\n                break;\r\n        }\r\n        this.error(diagnostics_1.DiagnosticCode.Operation_not_supported, expression.range);\r\n        return null;\r\n    };\r\n    return Program;\r\n}(diagnostics_1.DiagnosticEmitter));\r\nexports.Program = Program;\r\n/** Common result structure returned when calling any of the resolve functions on a {@link Program}. */\r\nvar ResolvedElement = /** @class */ (function () {\r\n    function ResolvedElement() {\r\n    }\r\n    /** Clears the target and sets the resolved element. */\r\n    ResolvedElement.prototype.set = function (element) {\r\n        this.target = null;\r\n        this.targetExpression = null;\r\n        this.element = element;\r\n        return this;\r\n    };\r\n    /** Sets the resolved target in addition to the previously set element. */\r\n    ResolvedElement.prototype.withTarget = function (target, targetExpression) {\r\n        this.target = target;\r\n        this.targetExpression = targetExpression;\r\n        return this;\r\n    };\r\n    return ResolvedElement;\r\n}());\r\nexports.ResolvedElement = ResolvedElement;\r\n// Cached result structure instance\r\nvar resolvedElement;\r\n/** Indicates the specific kind of an {@link Element}. */\r\nvar ElementKind;\r\n(function (ElementKind) {\r\n    /** A {@link Global}. */\r\n    ElementKind[ElementKind[\"GLOBAL\"] = 0] = \"GLOBAL\";\r\n    /** A {@link Local}. */\r\n    ElementKind[ElementKind[\"LOCAL\"] = 1] = \"LOCAL\";\r\n    /** An {@link Enum}. */\r\n    ElementKind[ElementKind[\"ENUM\"] = 2] = \"ENUM\";\r\n    /** An {@link EnumValue}. */\r\n    ElementKind[ElementKind[\"ENUMVALUE\"] = 3] = \"ENUMVALUE\";\r\n    /** A {@link FunctionPrototype}. */\r\n    ElementKind[ElementKind[\"FUNCTION_PROTOTYPE\"] = 4] = \"FUNCTION_PROTOTYPE\";\r\n    /** A {@link Function}. */\r\n    ElementKind[ElementKind[\"FUNCTION\"] = 5] = \"FUNCTION\";\r\n    /** A {@link ClassPrototype}. */\r\n    ElementKind[ElementKind[\"CLASS_PROTOTYPE\"] = 6] = \"CLASS_PROTOTYPE\";\r\n    /** A {@link Class}. */\r\n    ElementKind[ElementKind[\"CLASS\"] = 7] = \"CLASS\";\r\n    /** An {@link InterfacePrototype}. */\r\n    ElementKind[ElementKind[\"INTERFACE_PROTOTYPE\"] = 8] = \"INTERFACE_PROTOTYPE\";\r\n    /** An {@link Interface}. */\r\n    ElementKind[ElementKind[\"INTERFACE\"] = 9] = \"INTERFACE\";\r\n    /** A {@link FieldPrototype}. */\r\n    ElementKind[ElementKind[\"FIELD_PROTOTYPE\"] = 10] = \"FIELD_PROTOTYPE\";\r\n    /** A {@link Field}. */\r\n    ElementKind[ElementKind[\"FIELD\"] = 11] = \"FIELD\";\r\n    /** A {@link Property}. */\r\n    ElementKind[ElementKind[\"PROPERTY\"] = 12] = \"PROPERTY\";\r\n    /** A {@link Namespace}. */\r\n    ElementKind[ElementKind[\"NAMESPACE\"] = 13] = \"NAMESPACE\";\r\n})(ElementKind = exports.ElementKind || (exports.ElementKind = {}));\r\n/** Indicates traits of an {@link Element}. */\r\nvar ElementFlags;\r\n(function (ElementFlags) {\r\n    /** No flags set. */\r\n    ElementFlags[ElementFlags[\"NONE\"] = 0] = \"NONE\";\r\n    /** Is compiled. */\r\n    ElementFlags[ElementFlags[\"COMPILED\"] = 1] = \"COMPILED\";\r\n    /** Is an import. */\r\n    ElementFlags[ElementFlags[\"IMPORTED\"] = 2] = \"IMPORTED\";\r\n    /** Is an export. */\r\n    ElementFlags[ElementFlags[\"EXPORTED\"] = 4] = \"EXPORTED\";\r\n    /** Is built-in. */\r\n    ElementFlags[ElementFlags[\"BUILTIN\"] = 8] = \"BUILTIN\";\r\n    /** Is declared. */\r\n    ElementFlags[ElementFlags[\"DECLARED\"] = 16] = \"DECLARED\";\r\n    /** Is generic. */\r\n    ElementFlags[ElementFlags[\"GENERIC\"] = 32] = \"GENERIC\";\r\n    /** Is constant. */\r\n    ElementFlags[ElementFlags[\"CONSTANT\"] = 64] = \"CONSTANT\";\r\n    /** Has a constant value and is therefore inlined. */\r\n    ElementFlags[ElementFlags[\"INLINED\"] = 128] = \"INLINED\";\r\n    /** Is instance member. */\r\n    ElementFlags[ElementFlags[\"INSTANCE\"] = 256] = \"INSTANCE\";\r\n    /** Is getter. */\r\n    ElementFlags[ElementFlags[\"GETTER\"] = 512] = \"GETTER\";\r\n    /** Is setter. */\r\n    ElementFlags[ElementFlags[\"SETTER\"] = 1024] = \"SETTER\";\r\n    /** Is global. */\r\n    ElementFlags[ElementFlags[\"GLOBAL\"] = 2048] = \"GLOBAL\";\r\n    /** Is read-only. */\r\n    ElementFlags[ElementFlags[\"READONLY\"] = 4096] = \"READONLY\";\r\n    /** Is a public member. */\r\n    ElementFlags[ElementFlags[\"PUBLIC\"] = 8192] = \"PUBLIC\";\r\n    /** Is a protected member. */\r\n    ElementFlags[ElementFlags[\"PROTECTED\"] = 16384] = \"PROTECTED\";\r\n    /** Is a private member. */\r\n    ElementFlags[ElementFlags[\"PRIVATE\"] = 32768] = \"PRIVATE\";\r\n    /** Is an abstract member. */\r\n    ElementFlags[ElementFlags[\"ABSTRACT\"] = 65536] = \"ABSTRACT\";\r\n    /** Is a constructor. */\r\n    ElementFlags[ElementFlags[\"CONSTRUCTOR\"] = 131072] = \"CONSTRUCTOR\";\r\n    /** Is an unmanaged class with limited capabilites. */\r\n    ElementFlags[ElementFlags[\"UNMANAGED\"] = 262144] = \"UNMANAGED\";\r\n    /** Is scoped. */\r\n    ElementFlags[ElementFlags[\"SCOPED\"] = 524288] = \"SCOPED\";\r\n    /** Is the start function. */\r\n    ElementFlags[ElementFlags[\"START\"] = 1048576] = \"START\";\r\n})(ElementFlags = exports.ElementFlags || (exports.ElementFlags = {}));\r\n/** Base class of all program elements. */\r\nvar Element = /** @class */ (function () {\r\n    /** Constructs a new element, linking it to its containing {@link Program}. */\r\n    function Element(program, simpleName, internalName) {\r\n        /** Element flags. */\r\n        this.flags = ElementFlags.NONE;\r\n        /** Namespaced member elements. */\r\n        this.members = null;\r\n        /** Parent namespace, if applicable. */\r\n        this.namespace = null;\r\n        this.program = program;\r\n        this.simpleName = simpleName;\r\n        this.internalName = internalName;\r\n    }\r\n    /** Tests if this element has a specific flag or flags. */\r\n    Element.prototype.is = function (flag) { return (this.flags & flag) == flag; };\r\n    /** Sets a specific flag or flags. */\r\n    Element.prototype.set = function (flag) { this.flags |= flag; };\r\n    return Element;\r\n}());\r\nexports.Element = Element;\r\n/** A namespace. */\r\nvar Namespace = /** @class */ (function (_super) {\r\n    __extends(Namespace, _super);\r\n    /** Constructs a new namespace. */\r\n    function Namespace(program, simpleName, internalName, declaration) {\r\n        var _this = _super.call(this, program, simpleName, internalName) || this;\r\n        // All elements have namespace semantics. This is an explicitly declared one.\r\n        _this.kind = ElementKind.NAMESPACE;\r\n        _this.declaration = declaration;\r\n        if (_this.declaration.modifiers) {\r\n            for (var i = 0, k = _this.declaration.modifiers.length; i < k; ++i) {\r\n                switch (_this.declaration.modifiers[i].modifierKind) {\r\n                    case ast_1.ModifierKind.IMPORT:\r\n                        _this.set(ElementFlags.IMPORTED);\r\n                        break;\r\n                    case ast_1.ModifierKind.EXPORT:\r\n                        _this.set(ElementFlags.EXPORTED);\r\n                        break;\r\n                    case ast_1.ModifierKind.DECLARE:\r\n                        _this.set(ElementFlags.DECLARED);\r\n                        break;\r\n                    default: throw new Error(\"unexpected modifier\");\r\n                }\r\n            }\r\n        }\r\n        return _this;\r\n    }\r\n    return Namespace;\r\n}(Element));\r\nexports.Namespace = Namespace;\r\n/** An enum. */\r\nvar Enum = /** @class */ (function (_super) {\r\n    __extends(Enum, _super);\r\n    /** Constructs a new enum. */\r\n    function Enum(program, simpleName, internalName, declaration) {\r\n        var _this = _super.call(this, program, simpleName, internalName) || this;\r\n        _this.kind = ElementKind.ENUM;\r\n        _this.declaration = declaration;\r\n        if (_this.declaration.modifiers) {\r\n            for (var i = 0, k = _this.declaration.modifiers.length; i < k; ++i) {\r\n                switch (_this.declaration.modifiers[i].modifierKind) {\r\n                    case ast_1.ModifierKind.EXPORT:\r\n                        _this.set(ElementFlags.EXPORTED);\r\n                        break;\r\n                    case ast_1.ModifierKind.IMPORT:\r\n                        _this.set(ElementFlags.IMPORTED);\r\n                        break;\r\n                    case ast_1.ModifierKind.DECLARE:\r\n                        _this.set(ElementFlags.DECLARED);\r\n                        break;\r\n                    case ast_1.ModifierKind.CONST:\r\n                        _this.set(ElementFlags.CONSTANT);\r\n                        break;\r\n                    default: throw new Error(\"unexpected modifier\");\r\n                }\r\n            }\r\n        }\r\n        return _this;\r\n    }\r\n    return Enum;\r\n}(Element));\r\nexports.Enum = Enum;\r\n/** An enum value. */\r\nvar EnumValue = /** @class */ (function (_super) {\r\n    __extends(EnumValue, _super);\r\n    function EnumValue(enm, program, simpleName, internalName, declaration) {\r\n        var _this = _super.call(this, program, simpleName, internalName) || this;\r\n        _this.kind = ElementKind.ENUMVALUE;\r\n        /** Constant value, if applicable. */\r\n        _this.constantValue = 0;\r\n        _this.enum = enm;\r\n        _this.declaration = declaration;\r\n        return _this;\r\n    }\r\n    return EnumValue;\r\n}(Element));\r\nexports.EnumValue = EnumValue;\r\nvar ConstantValueKind;\r\n(function (ConstantValueKind) {\r\n    ConstantValueKind[ConstantValueKind[\"NONE\"] = 0] = \"NONE\";\r\n    ConstantValueKind[ConstantValueKind[\"INTEGER\"] = 1] = \"INTEGER\";\r\n    ConstantValueKind[ConstantValueKind[\"FLOAT\"] = 2] = \"FLOAT\";\r\n})(ConstantValueKind = exports.ConstantValueKind || (exports.ConstantValueKind = {}));\r\nvar VariableLikeElement = /** @class */ (function (_super) {\r\n    __extends(VariableLikeElement, _super);\r\n    function VariableLikeElement() {\r\n        // kind varies\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        /** Constant value kind. */\r\n        _this.constantValueKind = 0 /* NONE */;\r\n        return _this;\r\n    }\r\n    VariableLikeElement.prototype.withConstantIntegerValue = function (lo, hi) {\r\n        this.constantValueKind = 1 /* INTEGER */;\r\n        this.constantIntegerValue = i64_new(lo, hi);\r\n        this.set(ElementFlags.CONSTANT | ElementFlags.INLINED);\r\n        return this;\r\n    };\r\n    VariableLikeElement.prototype.withConstantFloatValue = function (value) {\r\n        this.constantValueKind = 2 /* FLOAT */;\r\n        this.constantFloatValue = value;\r\n        this.set(ElementFlags.CONSTANT | ElementFlags.INLINED);\r\n        return this;\r\n    };\r\n    return VariableLikeElement;\r\n}(Element));\r\nexports.VariableLikeElement = VariableLikeElement;\r\n/** A global variable. */\r\nvar Global = /** @class */ (function (_super) {\r\n    __extends(Global, _super);\r\n    function Global(program, simpleName, internalName, declaration, type) {\r\n        var _this = _super.call(this, program, simpleName, internalName) || this;\r\n        _this.kind = ElementKind.GLOBAL;\r\n        _this.declaration = declaration;\r\n        if (_this.declaration.modifiers) {\r\n            for (var i = 0, k = _this.declaration.modifiers.length; i < k; ++i) {\r\n                switch (_this.declaration.modifiers[i].modifierKind) {\r\n                    case ast_1.ModifierKind.IMPORT:\r\n                        _this.set(ElementFlags.IMPORTED);\r\n                        break;\r\n                    case ast_1.ModifierKind.EXPORT:\r\n                        _this.set(ElementFlags.EXPORTED);\r\n                        break;\r\n                    case ast_1.ModifierKind.CONST:\r\n                        _this.set(ElementFlags.CONSTANT);\r\n                        break;\r\n                    case ast_1.ModifierKind.LET:\r\n                        _this.set(ElementFlags.SCOPED);\r\n                        break;\r\n                    case ast_1.ModifierKind.DECLARE:\r\n                        _this.set(ElementFlags.DECLARED);\r\n                        break;\r\n                    case ast_1.ModifierKind.READONLY:\r\n                        _this.set(_this.declaration.initializer ? ElementFlags.CONSTANT | ElementFlags.READONLY : ElementFlags.READONLY);\r\n                        break;\r\n                    case ast_1.ModifierKind.PUBLIC:\r\n                    case ast_1.ModifierKind.PRIVATE:\r\n                    case ast_1.ModifierKind.PROTECTED:\r\n                    case ast_1.ModifierKind.STATIC: break; // static fields become globals\r\n                    default: throw new Error(\"unexpected modifier\");\r\n                }\r\n            }\r\n        }\r\n        _this.type = type; // resolved later if `void`\r\n        return _this;\r\n    }\r\n    return Global;\r\n}(VariableLikeElement));\r\nexports.Global = Global;\r\n/** A function parameter. */\r\nvar Parameter = /** @class */ (function () {\r\n    /** Constructs a new function parameter. */\r\n    function Parameter(name, type, initializer) {\r\n        if (initializer === void 0) { initializer = null; }\r\n        this.name = name;\r\n        this.type = type;\r\n        this.initializer = initializer;\r\n    }\r\n    return Parameter;\r\n}());\r\nexports.Parameter = Parameter;\r\n/** A function local. */\r\nvar Local = /** @class */ (function (_super) {\r\n    __extends(Local, _super);\r\n    function Local(program, simpleName, index, type) {\r\n        var _this = _super.call(this, program, simpleName, simpleName) || this;\r\n        _this.kind = ElementKind.LOCAL;\r\n        _this.index = index;\r\n        _this.type = type;\r\n        return _this;\r\n    }\r\n    return Local;\r\n}(VariableLikeElement));\r\nexports.Local = Local;\r\n/** A yet unresolved function prototype. */\r\nvar FunctionPrototype = /** @class */ (function (_super) {\r\n    __extends(FunctionPrototype, _super);\r\n    /** Constructs a new function prototype. */\r\n    function FunctionPrototype(program, simpleName, internalName, declaration, classPrototype) {\r\n        if (classPrototype === void 0) { classPrototype = null; }\r\n        var _this = _super.call(this, program, simpleName, internalName) || this;\r\n        _this.kind = ElementKind.FUNCTION_PROTOTYPE;\r\n        /** Resolved instances. */\r\n        _this.instances = new Map();\r\n        /** Class type arguments, if a partially resolved method of a generic class. */\r\n        _this.classTypeArguments = null;\r\n        _this.declaration = declaration;\r\n        if (_this.declaration.modifiers)\r\n            for (var i = 0, k = _this.declaration.modifiers.length; i < k; ++i) {\r\n                switch (_this.declaration.modifiers[i].modifierKind) {\r\n                    case ast_1.ModifierKind.IMPORT:\r\n                        _this.set(ElementFlags.IMPORTED);\r\n                        break;\r\n                    case ast_1.ModifierKind.EXPORT:\r\n                        _this.set(ElementFlags.EXPORTED);\r\n                        break;\r\n                    case ast_1.ModifierKind.DECLARE:\r\n                        _this.set(ElementFlags.DECLARED);\r\n                        break;\r\n                    case ast_1.ModifierKind.GET:\r\n                        _this.set(ElementFlags.GETTER);\r\n                        break;\r\n                    case ast_1.ModifierKind.SET:\r\n                        _this.set(ElementFlags.SETTER);\r\n                        break;\r\n                    case ast_1.ModifierKind.STATIC:\r\n                    case ast_1.ModifierKind.ABSTRACT:\r\n                    case ast_1.ModifierKind.PRIVATE:\r\n                    case ast_1.ModifierKind.PROTECTED:\r\n                    case ast_1.ModifierKind.PUBLIC: break; // already handled\r\n                    default: throw new Error(\"unexpected modifier\");\r\n                }\r\n            }\r\n        if (_this.declaration.typeParameters.length)\r\n            _this.set(ElementFlags.GENERIC);\r\n        if (_this.classPrototype = classPrototype)\r\n            _this.set(ElementFlags.INSTANCE);\r\n        return _this;\r\n    }\r\n    FunctionPrototype.prototype.resolve = function (functionTypeArguments, contextualTypeArguments) {\r\n        if (functionTypeArguments === void 0) { functionTypeArguments = null; }\r\n        if (contextualTypeArguments === void 0) { contextualTypeArguments = null; }\r\n        var instanceKey = functionTypeArguments ? types_1.typesToString(functionTypeArguments) : \"\";\r\n        var instance = this.instances.get(instanceKey);\r\n        if (instance)\r\n            return instance;\r\n        var declaration = this.declaration;\r\n        // inherit contextual type arguments\r\n        var inheritedTypeArguments = contextualTypeArguments;\r\n        contextualTypeArguments = new Map();\r\n        if (inheritedTypeArguments)\r\n            try {\r\n                for (var inheritedTypeArguments_1 = __values(inheritedTypeArguments), inheritedTypeArguments_1_1 = inheritedTypeArguments_1.next(); !inheritedTypeArguments_1_1.done; inheritedTypeArguments_1_1 = inheritedTypeArguments_1.next()) {\r\n                    var _a = __read(inheritedTypeArguments_1_1.value, 2), inheritedName = _a[0], inheritedType = _a[1];\r\n                    contextualTypeArguments.set(inheritedName, inheritedType);\r\n                }\r\n            }\r\n            catch (e_2_1) { e_2 = { error: e_2_1 }; }\r\n            finally {\r\n                try {\r\n                    if (inheritedTypeArguments_1_1 && !inheritedTypeArguments_1_1.done && (_b = inheritedTypeArguments_1.return)) _b.call(inheritedTypeArguments_1);\r\n                }\r\n                finally { if (e_2) throw e_2.error; }\r\n            }\r\n        var i, k;\r\n        // inherit class type arguments if a partially resolved instance method (classTypeArguments is set)\r\n        if (this.classTypeArguments) {\r\n            if (!this.classPrototype)\r\n                throw new Error(\"partially resolved instance method must reference its class prototype\");\r\n            var classDeclaration = this.classPrototype.declaration;\r\n            var classTypeParameters = classDeclaration.typeParameters;\r\n            if ((k = this.classTypeArguments.length) != classTypeParameters.length)\r\n                throw new Error(\"type argument count mismatch\");\r\n            for (i = 0; i < k; ++i)\r\n                contextualTypeArguments.set(classTypeParameters[i].name.text, this.classTypeArguments[i]);\r\n        }\r\n        // override call specific contextual type arguments\r\n        var functionTypeParameters = declaration.typeParameters;\r\n        if (functionTypeArguments && (k = functionTypeArguments.length)) {\r\n            if (k != functionTypeParameters.length)\r\n                throw new Error(\"type argument count mismatch\");\r\n            for (i = 0; i < k; ++i)\r\n                contextualTypeArguments.set(functionTypeParameters[i].name.text, functionTypeArguments[i]);\r\n        }\r\n        // resolve parameters\r\n        // TODO: 'this' type\r\n        k = declaration.parameters.length;\r\n        var parameters = new Array(k);\r\n        var parameterTypes = new Array(k);\r\n        var typeNode;\r\n        for (i = 0; i < k; ++i) {\r\n            var parameterDeclaration = declaration.parameters[i];\r\n            typeNode = assert(parameterDeclaration.type);\r\n            var parameterType = this.program.resolveType(typeNode, contextualTypeArguments, true); // reports\r\n            if (parameterType) {\r\n                parameters[i] = new Parameter(parameterDeclaration.name.text, parameterType, parameterDeclaration.initializer);\r\n                parameterTypes[i] = parameterType;\r\n            }\r\n            else\r\n                return null;\r\n        }\r\n        var internalName = this.internalName;\r\n        if (instanceKey.length)\r\n            internalName += \"<\" + instanceKey + \">\";\r\n        var classInstance = null;\r\n        if (this.classPrototype) {\r\n            classInstance = this.classPrototype.resolve(this.classTypeArguments, contextualTypeArguments); // reports\r\n            if (!classInstance)\r\n                return null;\r\n        }\r\n        // resolve return type\r\n        // TODO: 'this' type\r\n        var returnType;\r\n        if (this.is(ElementFlags.SETTER) || this.is(ElementFlags.CONSTRUCTOR)) {\r\n            returnType = types_1.Type.void; // not annotated\r\n        }\r\n        else {\r\n            typeNode = assert(declaration.returnType);\r\n            var type = this.program.resolveType(typeNode, contextualTypeArguments, true); // reports\r\n            if (type)\r\n                returnType = type;\r\n            else\r\n                return null;\r\n        }\r\n        instance = new Function(this, internalName, functionTypeArguments, parameters, returnType, classInstance);\r\n        instance.contextualTypeArguments = contextualTypeArguments;\r\n        this.instances.set(instanceKey, instance);\r\n        return instance;\r\n        var e_2, _b;\r\n    };\r\n    FunctionPrototype.prototype.resolveInclTypeArguments = function (typeArgumentNodes, contextualTypeArguments, reportNode) {\r\n        var resolvedTypeArguments = null;\r\n        if (this.is(ElementFlags.GENERIC)) {\r\n            assert(typeArgumentNodes != null && typeArgumentNodes.length != 0);\r\n            resolvedTypeArguments = this.program.resolveTypeArguments(this.declaration.typeParameters, typeArgumentNodes, contextualTypeArguments, reportNode);\r\n            if (!resolvedTypeArguments)\r\n                return null;\r\n        }\r\n        return this.resolve(resolvedTypeArguments, contextualTypeArguments);\r\n    };\r\n    FunctionPrototype.prototype.resolvePartial = function (classTypeArguments) {\r\n        if (!this.classPrototype)\r\n            throw new Error(\"partially resolved instance method must reference its class prototype\");\r\n        if (classTypeArguments && classTypeArguments.length) {\r\n            var partialPrototype = new FunctionPrototype(this.program, this.simpleName, this.internalName, this.declaration, this.classPrototype);\r\n            partialPrototype.flags = this.flags;\r\n            partialPrototype.classTypeArguments = classTypeArguments;\r\n            return partialPrototype;\r\n        }\r\n        return this; // no need to clone\r\n    };\r\n    FunctionPrototype.prototype.toString = function () { return this.simpleName; };\r\n    return FunctionPrototype;\r\n}(Element));\r\nexports.FunctionPrototype = FunctionPrototype;\r\n/** A resolved function. */\r\nvar Function = /** @class */ (function (_super) {\r\n    __extends(Function, _super);\r\n    /** Constructs a new concrete function. */\r\n    function Function(prototype, internalName, typeArguments, parameters, returnType, instanceMethodOf) {\r\n        var _this = _super.call(this, prototype.program, prototype.simpleName, internalName) || this;\r\n        _this.kind = ElementKind.FUNCTION;\r\n        /** Map of locals by name. */\r\n        _this.locals = new Map();\r\n        /** List of additional non-parameter locals. */\r\n        _this.additionalLocals = [];\r\n        /** Current break context label. */\r\n        _this.breakContext = null;\r\n        /** Remembered debug locations. */\r\n        _this.debugLocations = null;\r\n        _this.nextBreakId = 0;\r\n        _this.breakStack = null;\r\n        _this.tempI32s = null;\r\n        _this.tempI64s = null;\r\n        _this.tempF32s = null;\r\n        _this.tempF64s = null;\r\n        _this.prototype = prototype;\r\n        _this.typeArguments = typeArguments;\r\n        _this.parameters = parameters;\r\n        _this.returnType = returnType;\r\n        _this.instanceMethodOf = instanceMethodOf;\r\n        _this.flags = prototype.flags;\r\n        if (!(prototype.is(ElementFlags.BUILTIN) || prototype.is(ElementFlags.DECLARED))) {\r\n            var localIndex = 0;\r\n            if (instanceMethodOf) {\r\n                assert(_this.is(ElementFlags.INSTANCE)); // internal error\r\n                _this.locals.set(\"this\", new Local(prototype.program, \"this\", localIndex++, instanceMethodOf.type));\r\n                if (instanceMethodOf.contextualTypeArguments) {\r\n                    if (!_this.contextualTypeArguments)\r\n                        _this.contextualTypeArguments = new Map();\r\n                    try {\r\n                        for (var _a = __values(instanceMethodOf.contextualTypeArguments), _b = _a.next(); !_b.done; _b = _a.next()) {\r\n                            var _c = __read(_b.value, 2), inheritedName = _c[0], inheritedType = _c[1];\r\n                            _this.contextualTypeArguments.set(inheritedName, inheritedType);\r\n                        }\r\n                    }\r\n                    catch (e_3_1) { e_3 = { error: e_3_1 }; }\r\n                    finally {\r\n                        try {\r\n                            if (_b && !_b.done && (_d = _a.return)) _d.call(_a);\r\n                        }\r\n                        finally { if (e_3) throw e_3.error; }\r\n                    }\r\n                }\r\n            }\r\n            else\r\n                assert(!_this.is(ElementFlags.INSTANCE)); // internal error\r\n            for (var i = 0, k = parameters.length; i < k; ++i) {\r\n                var parameter = parameters[i];\r\n                var parameterName = assert(parameter.name, \"parameter must be named\"); // not a builtin or declared\r\n                _this.locals.set(parameterName, new Local(prototype.program, parameterName, localIndex++, parameter.type));\r\n            }\r\n        }\r\n        _this.flow = Flow.create(_this);\r\n        return _this;\r\n        var e_3, _d;\r\n    }\r\n    /** Adds a local of the specified type, with an optional name. */\r\n    Function.prototype.addLocal = function (type, name) {\r\n        if (name === void 0) { name = null; }\r\n        // if it has a name, check previously as this method will throw otherwise\r\n        var localIndex = this.parameters.length + this.additionalLocals.length;\r\n        if (this.is(ElementFlags.INSTANCE))\r\n            localIndex++; // plus 'this'\r\n        var local = new Local(this.prototype.program, name ? name : \"anonymous$\" + localIndex.toString(10), localIndex, type);\r\n        if (name) {\r\n            if (this.locals.has(name))\r\n                throw new Error(\"duplicate local name\");\r\n            this.locals.set(name, local);\r\n        }\r\n        this.additionalLocals.push(type);\r\n        return local;\r\n    };\r\n    /** Gets a free temporary local of the specified type. */\r\n    Function.prototype.getTempLocal = function (type) {\r\n        var temps;\r\n        switch (type.toNativeType()) {\r\n            case module_1.NativeType.I32:\r\n                temps = this.tempI32s;\r\n                break;\r\n            case module_1.NativeType.I64:\r\n                temps = this.tempI64s;\r\n                break;\r\n            case module_1.NativeType.F32:\r\n                temps = this.tempF32s;\r\n                break;\r\n            case module_1.NativeType.F64:\r\n                temps = this.tempF64s;\r\n                break;\r\n            default: throw new Error(\"concrete type expected\");\r\n        }\r\n        if (temps && temps.length) {\r\n            var ret = temps.pop();\r\n            ret.type = type;\r\n            return ret;\r\n        }\r\n        return this.addLocal(type);\r\n    };\r\n    /** Frees the temporary local for reuse. */\r\n    Function.prototype.freeTempLocal = function (local) {\r\n        var temps;\r\n        assert(local.type != null); // internal error\r\n        switch (local.type.toNativeType()) {\r\n            case module_1.NativeType.I32:\r\n                temps = this.tempI32s || (this.tempI32s = []);\r\n                break;\r\n            case module_1.NativeType.I64:\r\n                temps = this.tempI64s || (this.tempI64s = []);\r\n                break;\r\n            case module_1.NativeType.F32:\r\n                temps = this.tempF32s || (this.tempF32s = []);\r\n                break;\r\n            case module_1.NativeType.F64:\r\n                temps = this.tempF64s || (this.tempF64s = []);\r\n                break;\r\n            default: throw new Error(\"concrete type expected\");\r\n        }\r\n        temps.push(local);\r\n    };\r\n    /** Gets and immediately frees a temporary local of the specified type. */\r\n    Function.prototype.getAndFreeTempLocal = function (type) {\r\n        var temps;\r\n        switch (type.toNativeType()) {\r\n            case module_1.NativeType.I32:\r\n                temps = this.tempI32s || (this.tempI32s = []);\r\n                break;\r\n            case module_1.NativeType.I64:\r\n                temps = this.tempI64s || (this.tempI64s = []);\r\n                break;\r\n            case module_1.NativeType.F32:\r\n                temps = this.tempF32s || (this.tempF32s = []);\r\n                break;\r\n            case module_1.NativeType.F64:\r\n                temps = this.tempF64s || (this.tempF64s = []);\r\n                break;\r\n            default: throw new Error(\"concrete type expected\");\r\n        }\r\n        if (temps.length > 0)\r\n            return temps[temps.length - 1];\r\n        var local = this.addLocal(type);\r\n        temps.push(local);\r\n        return local;\r\n    };\r\n    /** Enters a(nother) break context. */\r\n    Function.prototype.enterBreakContext = function () {\r\n        var id = this.nextBreakId++;\r\n        if (!this.breakStack)\r\n            this.breakStack = [id];\r\n        else\r\n            this.breakStack.push(id);\r\n        return this.breakContext = id.toString(10);\r\n    };\r\n    /** Leaves the current break context. */\r\n    Function.prototype.leaveBreakContext = function () {\r\n        assert(this.breakStack != null);\r\n        var length = this.breakStack.length;\r\n        assert(length > 0);\r\n        this.breakStack.pop();\r\n        if (length > 1) {\r\n            this.breakContext = this.breakStack[length - 2].toString(10);\r\n        }\r\n        else {\r\n            this.breakContext = null;\r\n            this.breakStack = null;\r\n        }\r\n    };\r\n    /** Finalizes the function once compiled, releasing no longer needed resources. */\r\n    Function.prototype.finalize = function (module, ref) {\r\n        assert(!this.breakStack || !this.breakStack.length); // internal error\r\n        this.breakStack = null;\r\n        this.breakContext = null;\r\n        this.tempI32s = this.tempI64s = this.tempF32s = this.tempF64s = null;\r\n        if (this.program.options.sourceMap) {\r\n            var debugLocations = this.debugLocations;\r\n            if (debugLocations)\r\n                for (var i = 0, k = debugLocations.length; i < k; ++i) {\r\n                    var debugLocation = debugLocations[i];\r\n                    module.setDebugLocation(ref, debugLocation.debugInfoRef, debugLocation.source.debugInfoIndex, debugLocation.line, debugLocation.column);\r\n                }\r\n        }\r\n        this.debugLocations = null;\r\n    };\r\n    /** Returns the TypeScript representation of this function. */\r\n    Function.prototype.toString = function () { return this.prototype.simpleName; };\r\n    /** Returns the function type TypeScript representation of this function.*/\r\n    Function.prototype.toTypeString = function () { throw new Error(\"not implemented\"); };\r\n    return Function;\r\n}(Element));\r\nexports.Function = Function;\r\n/** A yet unresolved instance field prototype. */\r\nvar FieldPrototype = /** @class */ (function (_super) {\r\n    __extends(FieldPrototype, _super);\r\n    /** Constructs a new field prototype. */\r\n    function FieldPrototype(classPrototype, simpleName, internalName, declaration) {\r\n        var _this = _super.call(this, classPrototype.program, simpleName, internalName) || this;\r\n        _this.kind = ElementKind.FIELD_PROTOTYPE;\r\n        _this.classPrototype = classPrototype;\r\n        _this.declaration = declaration;\r\n        if (_this.declaration.modifiers) {\r\n            for (var i = 0, k = _this.declaration.modifiers.length; i < k; ++i) {\r\n                switch (_this.declaration.modifiers[i].modifierKind) {\r\n                    case ast_1.ModifierKind.EXPORT:\r\n                        _this.set(ElementFlags.EXPORTED);\r\n                        break;\r\n                    case ast_1.ModifierKind.READONLY:\r\n                        _this.set(ElementFlags.READONLY);\r\n                        break;\r\n                    case ast_1.ModifierKind.PRIVATE:\r\n                    case ast_1.ModifierKind.PROTECTED:\r\n                    case ast_1.ModifierKind.PUBLIC:\r\n                    case ast_1.ModifierKind.STATIC: break; // already handled\r\n                    default: throw new Error(\"unexpected modifier\");\r\n                }\r\n            }\r\n        }\r\n        return _this;\r\n    }\r\n    Object.defineProperty(FieldPrototype.prototype, \"isReadonly\", {\r\n        /** Whether the field is read-only or not. */\r\n        get: function () { return (this.flags & ElementFlags.READONLY) != 0; },\r\n        set: function (is) { if (is)\r\n            this.flags |= ElementFlags.READONLY;\r\n        else\r\n            this.flags &= ~ElementFlags.READONLY; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return FieldPrototype;\r\n}(Element));\r\nexports.FieldPrototype = FieldPrototype;\r\n/** A resolved instance field. */\r\nvar Field = /** @class */ (function (_super) {\r\n    __extends(Field, _super);\r\n    /** Constructs a new field. */\r\n    function Field(prototype, internalName, type) {\r\n        var _this = _super.call(this, prototype.program, prototype.simpleName, internalName) || this;\r\n        _this.kind = ElementKind.FIELD;\r\n        /** Field memory offset, if an instance field. */\r\n        _this.memoryOffset = -1;\r\n        _this.prototype = prototype;\r\n        _this.flags = prototype.flags;\r\n        _this.type = type;\r\n        return _this;\r\n    }\r\n    return Field;\r\n}(VariableLikeElement));\r\nexports.Field = Field;\r\n/** A property comprised of a getter and a setter function. */\r\nvar Property = /** @class */ (function (_super) {\r\n    __extends(Property, _super);\r\n    /** Constructs a new property prototype. */\r\n    function Property(program, simpleName, internalName, parent) {\r\n        var _this = _super.call(this, program, simpleName, internalName) || this;\r\n        _this.kind = ElementKind.PROPERTY;\r\n        /** Getter prototype. */\r\n        _this.getterPrototype = null;\r\n        /** Setter prototype. */\r\n        _this.setterPrototype = null;\r\n        _this.parent = parent;\r\n        return _this;\r\n    }\r\n    return Property;\r\n}(Element));\r\nexports.Property = Property;\r\n/** A yet unresolved class prototype. */\r\nvar ClassPrototype = /** @class */ (function (_super) {\r\n    __extends(ClassPrototype, _super);\r\n    function ClassPrototype(program, simpleName, internalName, declaration) {\r\n        var _this = _super.call(this, program, simpleName, internalName) || this;\r\n        _this.kind = ElementKind.CLASS_PROTOTYPE;\r\n        /** Resolved instances. */\r\n        _this.instances = new Map();\r\n        /** Instance member prototypes. */\r\n        _this.instanceMembers = null;\r\n        /** Base class prototype, if applicable. */\r\n        _this.basePrototype = null; // set in Program#initialize\r\n        /** Constructor prototype. */\r\n        _this.constructorPrototype = null;\r\n        /** Overloaded indexed get method, if any. */\r\n        _this.fnIndexedGet = null;\r\n        /** Overloaded indexed set method, if any. */\r\n        _this.fnIndexedSet = null;\r\n        /** Overloaded concatenation method, if any. */\r\n        _this.fnConcat = null;\r\n        /** Overloaded equality comparison method, if any. */\r\n        _this.fnEquals = null;\r\n        _this.declaration = declaration;\r\n        if (_this.declaration.modifiers) {\r\n            for (var i = 0, k = _this.declaration.modifiers.length; i < k; ++i) {\r\n                switch (_this.declaration.modifiers[i].modifierKind) {\r\n                    case ast_1.ModifierKind.IMPORT:\r\n                        _this.set(ElementFlags.IMPORTED);\r\n                        break;\r\n                    case ast_1.ModifierKind.EXPORT:\r\n                        _this.set(ElementFlags.EXPORTED);\r\n                        break;\r\n                    case ast_1.ModifierKind.DECLARE:\r\n                        _this.set(ElementFlags.DECLARED);\r\n                        break;\r\n                    default: throw new Error(\"unexpected modifier\");\r\n                }\r\n            }\r\n        }\r\n        if (_this.declaration.typeParameters.length)\r\n            _this.set(ElementFlags.GENERIC);\r\n        return _this;\r\n    }\r\n    Object.defineProperty(ClassPrototype.prototype, \"isUnmanaged\", {\r\n        /** Whether an unamanaged class or not. */\r\n        get: function () { return (this.flags & ElementFlags.UNMANAGED) != 0; },\r\n        set: function (is) { if (is)\r\n            this.flags |= ElementFlags.UNMANAGED;\r\n        else\r\n            this.flags &= ~ElementFlags.UNMANAGED; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    ClassPrototype.prototype.resolve = function (typeArguments, contextualTypeArguments) {\r\n        if (contextualTypeArguments === void 0) { contextualTypeArguments = null; }\r\n        var instanceKey = typeArguments ? types_1.typesToString(typeArguments) : \"\";\r\n        var instance = this.instances.get(instanceKey);\r\n        if (instance)\r\n            return instance;\r\n        // inherit contextual type arguments\r\n        var inheritedTypeArguments = contextualTypeArguments;\r\n        contextualTypeArguments = new Map();\r\n        if (inheritedTypeArguments)\r\n            try {\r\n                for (var inheritedTypeArguments_2 = __values(inheritedTypeArguments), inheritedTypeArguments_2_1 = inheritedTypeArguments_2.next(); !inheritedTypeArguments_2_1.done; inheritedTypeArguments_2_1 = inheritedTypeArguments_2.next()) {\r\n                    var _a = __read(inheritedTypeArguments_2_1.value, 2), inheritedName = _a[0], inheritedType = _a[1];\r\n                    contextualTypeArguments.set(inheritedName, inheritedType);\r\n                }\r\n            }\r\n            catch (e_4_1) { e_4 = { error: e_4_1 }; }\r\n            finally {\r\n                try {\r\n                    if (inheritedTypeArguments_2_1 && !inheritedTypeArguments_2_1.done && (_b = inheritedTypeArguments_2.return)) _b.call(inheritedTypeArguments_2);\r\n                }\r\n                finally { if (e_4) throw e_4.error; }\r\n            }\r\n        var declaration = this.declaration;\r\n        var baseClass = null;\r\n        if (declaration.extendsType) {\r\n            var baseClassType = this.program.resolveType(declaration.extendsType, null); // reports\r\n            if (!baseClassType)\r\n                return null;\r\n            if (!(baseClass = baseClassType.classType)) {\r\n                this.program.error(diagnostics_1.DiagnosticCode.A_class_may_only_extend_another_class, declaration.extendsType.range);\r\n                return null;\r\n            }\r\n            if (baseClass.prototype.isUnmanaged != this.isUnmanaged) {\r\n                this.program.error(diagnostics_1.DiagnosticCode.Structs_cannot_extend_classes_and_vice_versa, ast_1.Range.join(declaration.name.range, declaration.extendsType.range));\r\n                return null;\r\n            }\r\n        }\r\n        // override call specific contextual type arguments if provided\r\n        var i, k;\r\n        if (typeArguments) {\r\n            if ((k = typeArguments.length) != declaration.typeParameters.length)\r\n                throw new Error(\"type argument count mismatch\");\r\n            for (var i = 0; i < k; ++i)\r\n                contextualTypeArguments.set(declaration.typeParameters[i].name.text, typeArguments[i]);\r\n        }\r\n        else if (declaration.typeParameters.length)\r\n            throw new Error(\"type argument count mismatch\");\r\n        var internalName = this.internalName;\r\n        if (instanceKey.length)\r\n            internalName += \"<\" + instanceKey + \">\";\r\n        instance = new Class(this, internalName, typeArguments, baseClass);\r\n        instance.contextualTypeArguments = contextualTypeArguments;\r\n        this.instances.set(instanceKey, instance);\r\n        var memoryOffset = 0;\r\n        if (baseClass) {\r\n            memoryOffset = baseClass.currentMemoryOffset;\r\n            if (baseClass.members) {\r\n                if (!instance.members)\r\n                    instance.members = new Map();\r\n                try {\r\n                    for (var _c = __values(baseClass.members.values()), _d = _c.next(); !_d.done; _d = _c.next()) {\r\n                        var inheritedMember = _d.value;\r\n                        instance.members.set(inheritedMember.simpleName, inheritedMember);\r\n                    }\r\n                }\r\n                catch (e_5_1) { e_5 = { error: e_5_1 }; }\r\n                finally {\r\n                    try {\r\n                        if (_d && !_d.done && (_e = _c.return)) _e.call(_c);\r\n                    }\r\n                    finally { if (e_5) throw e_5.error; }\r\n                }\r\n            }\r\n        }\r\n        if (this.constructorPrototype) {\r\n            var partialConstructor = this.constructorPrototype.resolvePartial(typeArguments); // reports\r\n            if (partialConstructor)\r\n                instance.constructorInstance = partialConstructor.resolve(); // reports\r\n            // TODO: ^ doesn't know the return type, hence returns null\r\n        }\r\n        if (this.instanceMembers)\r\n            try {\r\n                for (var _f = __values(this.instanceMembers.values()), _g = _f.next(); !_g.done; _g = _f.next()) {\r\n                    var member = _g.value;\r\n                    switch (member.kind) {\r\n                        case ElementKind.FIELD_PROTOTYPE:// fields are layed out in advance\r\n                            if (!instance.members)\r\n                                instance.members = new Map();\r\n                            var fieldDeclaration = member.declaration;\r\n                            if (!fieldDeclaration.type)\r\n                                throw new Error(\"type expected\"); // TODO: check if parent class defines a type for it already\r\n                            var fieldType = this.program.resolveType(fieldDeclaration.type, instance.contextualTypeArguments); // reports\r\n                            if (fieldType) {\r\n                                var fieldInstance = new Field(member, member.internalName, fieldType);\r\n                                switch (fieldType.byteSize) {\r\n                                    case 1: break;\r\n                                    case 2:\r\n                                        if (memoryOffset & 1)\r\n                                            ++memoryOffset;\r\n                                        break;\r\n                                    case 4:\r\n                                        if (memoryOffset & 3)\r\n                                            memoryOffset = (memoryOffset | 3) + 1;\r\n                                        break;\r\n                                    case 8:\r\n                                        if (memoryOffset & 7)\r\n                                            memoryOffset = (memoryOffset | 7) + 1;\r\n                                        break;\r\n                                    default: assert(false);\r\n                                }\r\n                                fieldInstance.memoryOffset = memoryOffset;\r\n                                memoryOffset += fieldType.byteSize;\r\n                                instance.members.set(member.simpleName, fieldInstance);\r\n                            }\r\n                            break;\r\n                        case ElementKind.FUNCTION_PROTOTYPE:// instance methods remain partially resolved prototypes until compiled\r\n                            if (!instance.members)\r\n                                instance.members = new Map();\r\n                            var methodPrototype = member.resolvePartial(typeArguments); // reports\r\n                            if (methodPrototype)\r\n                                instance.members.set(member.simpleName, methodPrototype);\r\n                            break;\r\n                        case ElementKind.PROPERTY:// instance properties are cloned with partially resolved getters and setters\r\n                            if (!instance.members)\r\n                                instance.members = new Map();\r\n                            assert(member.getterPrototype);\r\n                            var instanceProperty = new Property(this.program, member.simpleName, member.internalName, this);\r\n                            instanceProperty.getterPrototype = member.getterPrototype.resolvePartial(typeArguments);\r\n                            if (member.setterPrototype)\r\n                                instanceProperty.setterPrototype = member.setterPrototype.resolvePartial(typeArguments);\r\n                            instance.members.set(member.simpleName, instanceProperty);\r\n                            break;\r\n                        default:\r\n                            throw new Error(\"instance member expected: \" + member.kind);\r\n                    }\r\n                }\r\n            }\r\n            catch (e_6_1) { e_6 = { error: e_6_1 }; }\r\n            finally {\r\n                try {\r\n                    if (_g && !_g.done && (_h = _f.return)) _h.call(_f);\r\n                }\r\n                finally { if (e_6) throw e_6.error; }\r\n            }\r\n        instance.currentMemoryOffset = memoryOffset; // sizeof<this>() is its byte size in memory\r\n        return instance;\r\n        var e_4, _b, e_5, _e, e_6, _h;\r\n    };\r\n    ClassPrototype.prototype.resolveInclTypeArguments = function (typeArgumentNodes, contextualTypeArguments, alternativeReportNode) {\r\n        var resolvedTypeArguments = null;\r\n        if (this.is(ElementFlags.GENERIC)) {\r\n            assert(typeArgumentNodes != null && typeArgumentNodes.length != 0);\r\n            resolvedTypeArguments = this.program.resolveTypeArguments(this.declaration.typeParameters, typeArgumentNodes, contextualTypeArguments, alternativeReportNode);\r\n            if (!resolvedTypeArguments)\r\n                return null;\r\n        }\r\n        else\r\n            assert(typeArgumentNodes == null || !typeArgumentNodes.length);\r\n        return this.resolve(resolvedTypeArguments, contextualTypeArguments);\r\n    };\r\n    ClassPrototype.prototype.toString = function () { return this.simpleName; };\r\n    return ClassPrototype;\r\n}(Element));\r\nexports.ClassPrototype = ClassPrototype;\r\n/** A resolved class. */\r\nvar Class = /** @class */ (function (_super) {\r\n    __extends(Class, _super);\r\n    /** Constructs a new class. */\r\n    function Class(prototype, internalName, typeArguments, base) {\r\n        if (typeArguments === void 0) { typeArguments = null; }\r\n        if (base === void 0) { base = null; }\r\n        var _this = _super.call(this, prototype.program, prototype.simpleName, internalName) || this;\r\n        _this.kind = ElementKind.CLASS;\r\n        /** Contextual type arguments for fields and methods. */\r\n        _this.contextualTypeArguments = null;\r\n        /** Current member memory offset. */\r\n        _this.currentMemoryOffset = 0;\r\n        /** Constructor instance. */\r\n        _this.constructorInstance = null;\r\n        _this.prototype = prototype;\r\n        _this.flags = prototype.flags;\r\n        _this.typeArguments = typeArguments;\r\n        _this.type = prototype.program.options.usizeType.asClass(_this);\r\n        _this.base = base;\r\n        // inherit static members and contextual type arguments from base class\r\n        if (base) {\r\n            if (base.contextualTypeArguments) {\r\n                if (!_this.contextualTypeArguments)\r\n                    _this.contextualTypeArguments = new Map();\r\n                try {\r\n                    for (var _a = __values(base.contextualTypeArguments), _b = _a.next(); !_b.done; _b = _a.next()) {\r\n                        var _c = __read(_b.value, 2), baseName = _c[0], baseType = _c[1];\r\n                        _this.contextualTypeArguments.set(baseName, baseType);\r\n                    }\r\n                }\r\n                catch (e_7_1) { e_7 = { error: e_7_1 }; }\r\n                finally {\r\n                    try {\r\n                        if (_b && !_b.done && (_d = _a.return)) _d.call(_a);\r\n                    }\r\n                    finally { if (e_7) throw e_7.error; }\r\n                }\r\n            }\r\n        }\r\n        // apply instance-specific contextual type arguments\r\n        var declaration = _this.prototype.declaration;\r\n        var i, k;\r\n        if (declaration) {\r\n            var typeParameters = declaration.typeParameters;\r\n            if (typeArguments) {\r\n                if ((k = typeArguments.length) != typeParameters.length)\r\n                    throw new Error(\"type argument count mismatch\");\r\n                if (k) {\r\n                    if (!_this.contextualTypeArguments)\r\n                        _this.contextualTypeArguments = new Map();\r\n                    for (i = 0; i < k; ++i)\r\n                        _this.contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\r\n                }\r\n            }\r\n            else if (typeParameters.length)\r\n                throw new Error(\"type argument count mismatch\");\r\n        }\r\n        return _this;\r\n        var e_7, _d;\r\n    }\r\n    Class.prototype.toString = function () { return this.prototype.simpleName; };\r\n    return Class;\r\n}(Element));\r\nexports.Class = Class;\r\n/** A yet unresolved interface. */\r\nvar InterfacePrototype = /** @class */ (function (_super) {\r\n    __extends(InterfacePrototype, _super);\r\n    /** Constructs a new interface prototype. */\r\n    function InterfacePrototype(program, simpleName, internalName, declaration) {\r\n        var _this = _super.call(this, program, simpleName, internalName, declaration) || this;\r\n        _this.kind = ElementKind.INTERFACE_PROTOTYPE;\r\n        return _this;\r\n    }\r\n    return InterfacePrototype;\r\n}(ClassPrototype));\r\nexports.InterfacePrototype = InterfacePrototype;\r\n/** A resolved interface. */\r\nvar Interface = /** @class */ (function (_super) {\r\n    __extends(Interface, _super);\r\n    /** Constructs a new interface. */\r\n    function Interface(prototype, internalName, typeArguments, base) {\r\n        if (typeArguments === void 0) { typeArguments = []; }\r\n        if (base === void 0) { base = null; }\r\n        var _this = _super.call(this, prototype, internalName, typeArguments, base) || this;\r\n        _this.kind = ElementKind.INTERFACE;\r\n        return _this;\r\n    }\r\n    return Interface;\r\n}(Class));\r\nexports.Interface = Interface;\r\n/** Control flow flags indicating specific conditions. */\r\nvar FlowFlags;\r\n(function (FlowFlags) {\r\n    /** No specific conditions. */\r\n    FlowFlags[FlowFlags[\"NONE\"] = 0] = \"NONE\";\r\n    /** This branch always returns. */\r\n    FlowFlags[FlowFlags[\"RETURNS\"] = 1] = \"RETURNS\";\r\n    /** This branch possibly throws. */\r\n    FlowFlags[FlowFlags[\"POSSIBLY_THROWS\"] = 2] = \"POSSIBLY_THROWS\";\r\n    /** This branch possible breaks. */\r\n    FlowFlags[FlowFlags[\"POSSIBLY_BREAKS\"] = 4] = \"POSSIBLY_BREAKS\";\r\n    /** This branch possible continues. */\r\n    FlowFlags[FlowFlags[\"POSSIBLY_CONTINUES\"] = 8] = \"POSSIBLY_CONTINUES\";\r\n})(FlowFlags = exports.FlowFlags || (exports.FlowFlags = {}));\r\n/** A control flow evaluator. */\r\nvar Flow = /** @class */ (function () {\r\n    function Flow() {\r\n        /** Scoped local variables. */\r\n        this.scopedLocals = null;\r\n    }\r\n    /** Creates the parent flow of the specified function. */\r\n    Flow.create = function (currentFunction) {\r\n        var parentFlow = new Flow();\r\n        parentFlow.parent = null;\r\n        parentFlow.flags = 0 /* NONE */;\r\n        parentFlow.currentFunction = currentFunction;\r\n        parentFlow.continueLabel = null;\r\n        parentFlow.breakLabel = null;\r\n        return parentFlow;\r\n    };\r\n    /** Tests if this flow has the specified flag or flags. */\r\n    Flow.prototype.is = function (flag) { return (this.flags & flag) == flag; };\r\n    /** Sets the specified flag or flags. */\r\n    Flow.prototype.set = function (flag) { this.flags |= flag; };\r\n    /** Enters a new branch or scope and returns the new flow. */\r\n    Flow.prototype.enterBranchOrScope = function () {\r\n        var branchFlow = new Flow();\r\n        branchFlow.parent = this;\r\n        branchFlow.flags = this.flags;\r\n        branchFlow.currentFunction = this.currentFunction;\r\n        branchFlow.continueLabel = this.continueLabel;\r\n        branchFlow.breakLabel = this.breakLabel;\r\n        return branchFlow;\r\n    };\r\n    /** Leaves the current branch or scope and returns the parent flow. */\r\n    Flow.prototype.leaveBranchOrScope = function () {\r\n        var parent = assert(this.parent);\r\n        // Free block-scoped locals\r\n        if (this.scopedLocals) {\r\n            try {\r\n                for (var _a = __values(this.scopedLocals.values()), _b = _a.next(); !_b.done; _b = _a.next()) {\r\n                    var scopedLocal = _b.value;\r\n                    this.currentFunction.freeTempLocal(scopedLocal);\r\n                }\r\n            }\r\n            catch (e_8_1) { e_8 = { error: e_8_1 }; }\r\n            finally {\r\n                try {\r\n                    if (_b && !_b.done && (_c = _a.return)) _c.call(_a);\r\n                }\r\n                finally { if (e_8) throw e_8.error; }\r\n            }\r\n            this.scopedLocals = null;\r\n        }\r\n        // Propagate flags to parent\r\n        if (this.is(2 /* POSSIBLY_THROWS */))\r\n            parent.set(2 /* POSSIBLY_THROWS */);\r\n        if (this.is(4 /* POSSIBLY_BREAKS */) && parent.breakLabel == this.breakLabel)\r\n            parent.set(4 /* POSSIBLY_BREAKS */);\r\n        if (this.is(8 /* POSSIBLY_CONTINUES */) && parent.continueLabel == this.continueLabel)\r\n            parent.set(8 /* POSSIBLY_CONTINUES */);\r\n        return parent;\r\n        var e_8, _c;\r\n    };\r\n    /** Adds a new scoped local of the specified name. */\r\n    Flow.prototype.addScopedLocal = function (name, type, reportNode) {\r\n        var scopedLocal = this.currentFunction.getTempLocal(type);\r\n        if (!this.scopedLocals)\r\n            this.scopedLocals = new Map();\r\n        else if (this.scopedLocals.has(name)) {\r\n            this.currentFunction.program.error(diagnostics_1.DiagnosticCode.Duplicate_identifier_0, reportNode.range);\r\n            return;\r\n        }\r\n        this.scopedLocals.set(name, scopedLocal);\r\n    };\r\n    /** Gets the local of the specified name in the current scope. */\r\n    Flow.prototype.getScopedLocal = function (name) {\r\n        var local;\r\n        var current = this;\r\n        do {\r\n            if (current.scopedLocals && (local = current.scopedLocals.get(name)))\r\n                return local;\r\n        } while (current = current.parent);\r\n        return this.currentFunction.locals.get(name);\r\n    };\r\n    /** Finalizes this flow. Must be the topmost parent flow of the function. */\r\n    Flow.prototype.finalize = function () {\r\n        assert(this.parent == null, \"must be the topmost parent flow\");\r\n        this.continueLabel = null;\r\n        this.breakLabel = null;\r\n        return this.is(1 /* RETURNS */);\r\n    };\r\n    return Flow;\r\n}());\r\nexports.Flow = Flow;\r\n\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar __values = (this && this.__values) || function (o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar builtins_1 = __webpack_require__(15);\r\nvar diagnostics_1 = __webpack_require__(1);\r\nvar module_1 = __webpack_require__(0);\r\nvar program_1 = __webpack_require__(2);\r\nvar tokenizer_1 = __webpack_require__(6);\r\nvar ast_1 = __webpack_require__(5);\r\nvar types_1 = __webpack_require__(4);\r\n/** Compilation target. */\r\nvar Target;\r\n(function (Target) {\r\n    /** WebAssembly with 32-bit pointers. */\r\n    Target[Target[\"WASM32\"] = 0] = \"WASM32\";\r\n    /** WebAssembly with 64-bit pointers. Experimental and not supported by any runtime yet. */\r\n    Target[Target[\"WASM64\"] = 1] = \"WASM64\";\r\n})(Target = exports.Target || (exports.Target = {}));\r\n/** Compiler options. */\r\nvar Options = /** @class */ (function () {\r\n    function Options() {\r\n        /** WebAssembly target. Defaults to {@link Target.WASM32}. */\r\n        this.target = Target.WASM32;\r\n        /** If true, compiles everything instead of just reachable code. */\r\n        this.noTreeShaking = false;\r\n        /** If true, replaces assertions with nops. */\r\n        this.noAssert = false;\r\n        /** If true, does not set up a memory. */\r\n        this.noMemory = false;\r\n        /** Memory allocation implementation to use. */\r\n        this.allocateImpl = \"allocate_memory\";\r\n        /** Memory freeing implementation to use. */\r\n        this.freeImpl = \"free_memory\";\r\n        /** If true, generates information necessary for source maps. */\r\n        this.sourceMap = false;\r\n    }\r\n    Object.defineProperty(Options.prototype, \"isWasm64\", {\r\n        /** Tests if the target is WASM64 or, otherwise, WASM32. */\r\n        get: function () { return this.target == Target.WASM64; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Options.prototype, \"usizeType\", {\r\n        /** Gets the unsigned size type matching the target. */\r\n        get: function () { return this.target == Target.WASM64 ? types_1.Type.usize64 : types_1.Type.usize32; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Options.prototype, \"isizeType\", {\r\n        /** Gets the signed size type matching the target. */\r\n        get: function () { return this.target == Target.WASM64 ? types_1.Type.isize64 : types_1.Type.isize32; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Options.prototype, \"nativeSizeType\", {\r\n        /** Gets the native size type matching the target. */\r\n        get: function () { return this.target == Target.WASM64 ? module_1.NativeType.I64 : module_1.NativeType.I32; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return Options;\r\n}());\r\nexports.Options = Options;\r\n/** Indicates the desired kind of a conversion. */\r\nvar ConversionKind;\r\n(function (ConversionKind) {\r\n    /** No conversion. */\r\n    ConversionKind[ConversionKind[\"NONE\"] = 0] = \"NONE\";\r\n    /** Implicit conversion. */\r\n    ConversionKind[ConversionKind[\"IMPLICIT\"] = 1] = \"IMPLICIT\";\r\n    /** Explicit conversion. */\r\n    ConversionKind[ConversionKind[\"EXPLICIT\"] = 2] = \"EXPLICIT\";\r\n})(ConversionKind = exports.ConversionKind || (exports.ConversionKind = {}));\r\n/** Compiler interface. */\r\nvar Compiler = /** @class */ (function (_super) {\r\n    __extends(Compiler, _super);\r\n    /** Constructs a new compiler for a {@link Program} using the specified options. */\r\n    function Compiler(program, options) {\r\n        if (options === void 0) { options = null; }\r\n        var _this = _super.call(this, program.diagnostics) || this;\r\n        /** Start function statements. */\r\n        _this.startFunctionBody = new Array();\r\n        /** Current enum in compilation. */\r\n        _this.currentEnum = null;\r\n        /** Current type in compilation. */\r\n        _this.currentType = types_1.Type.void;\r\n        /** Memory segments being compiled. */\r\n        _this.memorySegments = new Array();\r\n        /** Map of already compiled static string segments. */\r\n        _this.stringSegments = new Map();\r\n        /** Already processed file names. */\r\n        _this.files = new Set();\r\n        _this.program = program;\r\n        _this.options = options ? options : new Options();\r\n        _this.memoryOffset = i64_new(_this.options.usizeType.byteSize, 0); // leave space for `null`\r\n        _this.module = module_1.Module.create();\r\n        return _this;\r\n    }\r\n    /** Compiles a {@link Program} to a {@link Module} using the specified options. */\r\n    Compiler.compile = function (program, options) {\r\n        if (options === void 0) { options = null; }\r\n        return new Compiler(program, options).compile();\r\n    };\r\n    /** Performs compilation of the underlying {@link Program} to a {@link Module}. */\r\n    Compiler.prototype.compile = function () {\r\n        // initialize lookup maps, built-ins, imports, exports, etc.\r\n        this.program.initialize(this.options);\r\n        // set up the start function wrapping top-level statements, of all files.\r\n        var startFunctionPrototype = assert(this.program.elements.get(\"start\"));\r\n        assert(startFunctionPrototype.kind == program_1.ElementKind.FUNCTION_PROTOTYPE);\r\n        var startFunctionInstance = new program_1.Function(startFunctionPrototype, startFunctionPrototype.internalName, [], [], types_1.Type.void, null);\r\n        startFunctionInstance.set(program_1.ElementFlags.START);\r\n        this.currentFunction = this.startFunction = startFunctionInstance;\r\n        var sources = this.program.sources;\r\n        // compile entry file(s) while traversing to reachable elements\r\n        for (var i = 0, k = sources.length; i < k; ++i)\r\n            if (sources[i].isEntry)\r\n                this.compileSource(sources[i]);\r\n        // compile the start function if not empty\r\n        if (this.startFunctionBody.length) {\r\n            var typeRef = this.module.getFunctionTypeBySignature(module_1.NativeType.None, []);\r\n            if (!typeRef)\r\n                typeRef = this.module.addFunctionType(\"v\", module_1.NativeType.None, []);\r\n            var ref;\r\n            this.module.setStart(ref = this.module.addFunction(this.startFunction.prototype.internalName, typeRef, types_1.typesToNativeTypes(this.startFunction.additionalLocals), this.module.createBlock(null, this.startFunctionBody)));\r\n            this.startFunction.finalize(this.module, ref);\r\n        }\r\n        // set up static memory segments and the heap base pointer\r\n        if (!this.options.noMemory) {\r\n            var memoryOffset = this.memoryOffset;\r\n            this.memoryOffset = memoryOffset = i64_align(memoryOffset, this.options.usizeType.byteSize);\r\n            if (this.options.target == Target.WASM64)\r\n                this.module.addGlobal(\"HEAP_BASE\", module_1.NativeType.I64, false, this.module.createI64(i64_low(memoryOffset), i64_high(memoryOffset)));\r\n            else\r\n                this.module.addGlobal(\"HEAP_BASE\", module_1.NativeType.I32, false, this.module.createI32(i64_low(memoryOffset)));\r\n            // determine initial page size\r\n            var pages = i64_shr_u(i64_align(memoryOffset, 0x10000), i64_new(16, 0));\r\n            this.module.setMemory(i64_low(pages), module_1.Module.MAX_MEMORY_WASM32 /* TODO: not WASM64 compatible yet */, this.memorySegments, this.options.target, \"memory\");\r\n        }\r\n        return this.module;\r\n    };\r\n    // sources\r\n    Compiler.prototype.compileSourceByPath = function (normalizedPathWithoutExtension, reportNode) {\r\n        var sources = this.program.sources;\r\n        var expected = normalizedPathWithoutExtension + \".ts\";\r\n        for (var i = 0, k = sources.length; i < k; ++i) {\r\n            var source = sources[i];\r\n            var actual = source.normalizedPath;\r\n            if (source.normalizedPath == expected) {\r\n                this.compileSource(source);\r\n                return;\r\n            }\r\n        }\r\n        expected = normalizedPathWithoutExtension + \"/index.ts\";\r\n        for (var i = 0, k = sources.length; i < k; ++i) {\r\n            var source = sources[i];\r\n            var actual = source.normalizedPath;\r\n            if (source.normalizedPath == expected) {\r\n                this.compileSource(source);\r\n                return;\r\n            }\r\n        }\r\n        expected = program_1.LIBRARY_PREFIX + normalizedPathWithoutExtension + \".ts\";\r\n        for (var i = 0, k = sources.length; i < k; ++i) {\r\n            var source = sources[i];\r\n            var actual = source.normalizedPath;\r\n            if (source.normalizedPath == expected) {\r\n                this.compileSource(source);\r\n                return;\r\n            }\r\n        }\r\n        this.error(diagnostics_1.DiagnosticCode.File_0_not_found, reportNode.range, normalizedPathWithoutExtension);\r\n    };\r\n    Compiler.prototype.compileSource = function (source) {\r\n        var files = this.files;\r\n        if (files.has(source.normalizedPath))\r\n            return;\r\n        files.add(source.normalizedPath);\r\n        var noTreeShaking = this.options.noTreeShaking;\r\n        var isEntry = source.isEntry;\r\n        var startFunctionBody = this.startFunctionBody;\r\n        var statements = source.statements;\r\n        for (var i = 0, k = statements.length; i < k; ++i) {\r\n            var statement = statements[i];\r\n            switch (statement.kind) {\r\n                case ast_1.NodeKind.CLASSDECLARATION:\r\n                    if ((noTreeShaking || isEntry && ast_1.hasModifier(ast_1.ModifierKind.EXPORT, statement.modifiers)) && !statement.typeParameters.length)\r\n                        this.compileClassDeclaration(statement, []);\r\n                    break;\r\n                case ast_1.NodeKind.ENUMDECLARATION:\r\n                    if (noTreeShaking || isEntry && ast_1.hasModifier(ast_1.ModifierKind.EXPORT, statement.modifiers))\r\n                        this.compileEnumDeclaration(statement);\r\n                    break;\r\n                case ast_1.NodeKind.FUNCTIONDECLARATION:\r\n                    if ((noTreeShaking || isEntry && ast_1.hasModifier(ast_1.ModifierKind.EXPORT, statement.modifiers)) && !statement.typeParameters.length)\r\n                        this.compileFunctionDeclaration(statement, []);\r\n                    break;\r\n                case ast_1.NodeKind.IMPORT:\r\n                    this.compileSourceByPath(statement.normalizedPath, statement.path);\r\n                    break;\r\n                case ast_1.NodeKind.NAMESPACEDECLARATION:\r\n                    if (noTreeShaking || isEntry && ast_1.hasModifier(ast_1.ModifierKind.EXPORT, statement.modifiers))\r\n                        this.compileNamespaceDeclaration(statement);\r\n                    break;\r\n                case ast_1.NodeKind.VARIABLE:// global, always compiled because initializers might have side effects\r\n                    var variableInit = this.compileVariableStatement(statement);\r\n                    if (variableInit)\r\n                        startFunctionBody.push(variableInit);\r\n                    break;\r\n                case ast_1.NodeKind.EXPORT:\r\n                    if (statement.normalizedPath != null)\r\n                        this.compileSourceByPath(statement.normalizedPath, statement.path);\r\n                    if (noTreeShaking || isEntry)\r\n                        this.compileExportStatement(statement);\r\n                    break;\r\n                // otherwise a top-level statement that is part of the start function's body\r\n                default:\r\n                    var previousFunction = this.currentFunction;\r\n                    this.currentFunction = this.startFunction;\r\n                    var expr = this.compileStatement(statement);\r\n                    this.startFunctionBody.push(expr);\r\n                    this.currentFunction = previousFunction;\r\n                    break;\r\n            }\r\n        }\r\n    };\r\n    // globals\r\n    Compiler.prototype.compileGlobalDeclaration = function (declaration) {\r\n        var element = this.program.elements.get(declaration.fileLevelInternalName);\r\n        if (!element || element.kind != program_1.ElementKind.GLOBAL)\r\n            throw new Error(\"global expected\");\r\n        if (!this.compileGlobal(element))\r\n            return null;\r\n        return element;\r\n    };\r\n    Compiler.prototype.compileGlobal = function (global) {\r\n        if (global.is(program_1.ElementFlags.COMPILED) || global.is(program_1.ElementFlags.BUILTIN))\r\n            return true;\r\n        var declaration = global.declaration;\r\n        var initExpr = 0;\r\n        if (global.type == types_1.Type.void) {\r\n            if (declaration.type) {\r\n                var resolvedType = this.program.resolveType(declaration.type); // reports\r\n                if (!resolvedType)\r\n                    return false;\r\n                if (resolvedType == types_1.Type.void) {\r\n                    this.error(diagnostics_1.DiagnosticCode.Type_0_is_not_assignable_to_type_1, declaration.type.range, \"*\", resolvedType.toString());\r\n                    return false;\r\n                }\r\n                global.type = resolvedType;\r\n            }\r\n            else if (declaration.initializer) {\r\n                initExpr = this.compileExpression(declaration.initializer, types_1.Type.void, 0 /* NONE */); // reports\r\n                if (this.currentType == types_1.Type.void) {\r\n                    this.error(diagnostics_1.DiagnosticCode.Type_0_is_not_assignable_to_type_1, declaration.initializer.range, this.currentType.toString(), \"<auto>\");\r\n                    return false;\r\n                }\r\n                global.type = this.currentType;\r\n            }\r\n            else {\r\n                this.error(diagnostics_1.DiagnosticCode.Type_expected, declaration.name.range.atEnd);\r\n                return false;\r\n            }\r\n        }\r\n        var nativeType = global.type.toNativeType();\r\n        if (global.is(program_1.ElementFlags.DECLARED)) {\r\n            if (global.is(program_1.ElementFlags.CONSTANT)) {\r\n                this.module.addGlobalImport(global.internalName, global.namespace ? global.namespace.simpleName : \"env\", global.simpleName, nativeType);\r\n                global.set(program_1.ElementFlags.COMPILED);\r\n                return true;\r\n            }\r\n            else\r\n                this.error(diagnostics_1.DiagnosticCode.Operation_not_supported, declaration.range);\r\n            return false;\r\n        }\r\n        var initializeInStart = false;\r\n        if (global.is(program_1.ElementFlags.INLINED)) {\r\n            initExpr = this.compileInlineConstant(global, global.type);\r\n        }\r\n        else {\r\n            if (declaration.initializer) {\r\n                if (!initExpr)\r\n                    initExpr = this.compileExpression(declaration.initializer, global.type);\r\n                if (_BinaryenExpressionGetId(initExpr) != module_1.ExpressionId.Const) {\r\n                    if (global.is(program_1.ElementFlags.CONSTANT)) {\r\n                        initExpr = this.precomputeExpressionRef(initExpr);\r\n                        if (_BinaryenExpressionGetId(initExpr) != module_1.ExpressionId.Const) {\r\n                            this.warning(diagnostics_1.DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable, declaration.range);\r\n                            initializeInStart = true;\r\n                        }\r\n                    }\r\n                    else\r\n                        initializeInStart = true;\r\n                }\r\n            }\r\n            else\r\n                initExpr = global.type.toNativeZero(this.module);\r\n        }\r\n        var internalName = global.internalName;\r\n        if (initializeInStart) {\r\n            this.module.addGlobal(internalName, nativeType, true, global.type.toNativeZero(this.module));\r\n            var setExpr = this.module.createSetGlobal(internalName, initExpr);\r\n            this.startFunctionBody.push(setExpr);\r\n        }\r\n        else {\r\n            if (global.is(program_1.ElementFlags.CONSTANT)) {\r\n                var exprType = _BinaryenExpressionGetType(initExpr);\r\n                switch (exprType) {\r\n                    case module_1.NativeType.I32:\r\n                        global.constantValueKind = 1 /* INTEGER */;\r\n                        global.constantIntegerValue = i64_new(_BinaryenConstGetValueI32(initExpr), 0);\r\n                        break;\r\n                    case module_1.NativeType.I64:\r\n                        global.constantValueKind = 1 /* INTEGER */;\r\n                        global.constantIntegerValue = i64_new(_BinaryenConstGetValueI64Low(initExpr), _BinaryenConstGetValueI64High(initExpr));\r\n                        break;\r\n                    case module_1.NativeType.F32:\r\n                        global.constantValueKind = 2 /* FLOAT */;\r\n                        global.constantFloatValue = _BinaryenConstGetValueF32(initExpr);\r\n                        break;\r\n                    case module_1.NativeType.F64:\r\n                        global.constantValueKind = 2 /* FLOAT */;\r\n                        global.constantFloatValue = _BinaryenConstGetValueF64(initExpr);\r\n                        break;\r\n                    default:\r\n                        throw new Error(\"concrete type expected\");\r\n                }\r\n                global.set(program_1.ElementFlags.INLINED);\r\n                if (declaration.isTopLevel)\r\n                    this.module.addGlobal(internalName, nativeType, !global.is(program_1.ElementFlags.CONSTANT), initExpr);\r\n                if (declaration.range.source.isEntry && declaration.isTopLevelExport)\r\n                    this.module.addGlobalExport(global.internalName, declaration.programLevelInternalName);\r\n            }\r\n            else\r\n                this.module.addGlobal(internalName, nativeType, !global.is(program_1.ElementFlags.CONSTANT), initExpr);\r\n        }\r\n        global.set(program_1.ElementFlags.COMPILED);\r\n        return true;\r\n    };\r\n    // enums\r\n    Compiler.prototype.compileEnumDeclaration = function (declaration) {\r\n        var element = this.program.elements.get(declaration.fileLevelInternalName);\r\n        if (!element || element.kind != program_1.ElementKind.ENUM)\r\n            throw new Error(\"enum expected\");\r\n        return this.compileEnum(element) ? element : null;\r\n    };\r\n    Compiler.prototype.compileEnum = function (element) {\r\n        if (element.is(program_1.ElementFlags.COMPILED))\r\n            return true;\r\n        // members might reference each other, triggering another compile\r\n        element.set(program_1.ElementFlags.COMPILED);\r\n        this.currentEnum = element;\r\n        var previousValue = null;\r\n        if (element.members)\r\n            try {\r\n                for (var _a = __values(element.members.values()), _b = _a.next(); !_b.done; _b = _a.next()) {\r\n                    var member = _b.value;\r\n                    if (member.kind != program_1.ElementKind.ENUMVALUE)\r\n                        continue;\r\n                    var initInStart = false;\r\n                    var val = member;\r\n                    var valueDeclaration = val.declaration;\r\n                    val.set(program_1.ElementFlags.COMPILED);\r\n                    if (val.is(program_1.ElementFlags.INLINED)) {\r\n                        if (element.declaration.isTopLevelExport)\r\n                            this.module.addGlobal(val.internalName, module_1.NativeType.I32, false, this.module.createI32(val.constantValue));\r\n                    }\r\n                    else {\r\n                        var initExpr;\r\n                        if (valueDeclaration.value) {\r\n                            initExpr = this.compileExpression(valueDeclaration.value, types_1.Type.i32);\r\n                            if (_BinaryenExpressionGetId(initExpr) != module_1.ExpressionId.Const) {\r\n                                initExpr = this.precomputeExpressionRef(initExpr);\r\n                                if (_BinaryenExpressionGetId(initExpr) != module_1.ExpressionId.Const) {\r\n                                    if (element.is(program_1.ElementFlags.CONSTANT))\r\n                                        this.warning(diagnostics_1.DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable, valueDeclaration.range);\r\n                                    initInStart = true;\r\n                                }\r\n                            }\r\n                        }\r\n                        else if (previousValue == null) {\r\n                            initExpr = this.module.createI32(0);\r\n                        }\r\n                        else if (previousValue.is(program_1.ElementFlags.INLINED)) {\r\n                            initExpr = this.module.createI32(previousValue.constantValue + 1);\r\n                        }\r\n                        else {\r\n                            // in TypeScript this errors with TS1061, but actually we can do:\r\n                            initExpr = this.module.createBinary(module_1.BinaryOp.AddI32, this.module.createGetGlobal(previousValue.internalName, module_1.NativeType.I32), this.module.createI32(1));\r\n                            if (element.is(program_1.ElementFlags.CONSTANT))\r\n                                this.warning(diagnostics_1.DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable, valueDeclaration.range);\r\n                            initInStart = true;\r\n                        }\r\n                        if (initInStart) {\r\n                            this.module.addGlobal(val.internalName, module_1.NativeType.I32, true, this.module.createI32(0));\r\n                            var setExpr = this.module.createSetGlobal(val.internalName, initExpr);\r\n                            this.startFunctionBody.push(setExpr);\r\n                        }\r\n                        else {\r\n                            this.module.addGlobal(val.internalName, module_1.NativeType.I32, false, initExpr);\r\n                            if (_BinaryenExpressionGetType(initExpr) == module_1.NativeType.I32) {\r\n                                val.constantValue = _BinaryenConstGetValueI32(initExpr);\r\n                                val.set(program_1.ElementFlags.INLINED);\r\n                            }\r\n                            else\r\n                                throw new Error(\"i32 expected\");\r\n                        }\r\n                    }\r\n                    previousValue = val;\r\n                    // export values if the enum is exported\r\n                    if (element.declaration.range.source.isEntry && element.declaration.isTopLevelExport) {\r\n                        if (member.is(program_1.ElementFlags.INLINED))\r\n                            this.module.addGlobalExport(member.internalName, member.internalName);\r\n                        else if (valueDeclaration)\r\n                            this.warning(diagnostics_1.DiagnosticCode.Cannot_export_a_mutable_global, valueDeclaration.range);\r\n                    }\r\n                }\r\n            }\r\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\r\n            finally {\r\n                try {\r\n                    if (_b && !_b.done && (_c = _a.return)) _c.call(_a);\r\n                }\r\n                finally { if (e_1) throw e_1.error; }\r\n            }\r\n        this.currentEnum = null;\r\n        return true;\r\n        var e_1, _c;\r\n    };\r\n    // functions\r\n    Compiler.prototype.compileFunctionDeclaration = function (declaration, typeArguments, contextualTypeArguments) {\r\n        if (contextualTypeArguments === void 0) { contextualTypeArguments = null; }\r\n        var element = this.program.elements.get(declaration.fileLevelInternalName);\r\n        if (!element || element.kind != program_1.ElementKind.FUNCTION_PROTOTYPE)\r\n            throw new Error(\"function expected\");\r\n        return this.compileFunctionUsingTypeArguments(element, typeArguments, contextualTypeArguments, element.declaration.name); // reports\r\n    };\r\n    Compiler.prototype.compileFunctionUsingTypeArguments = function (prototype, typeArguments, contextualTypeArguments, reportNode) {\r\n        var instance = prototype.resolveInclTypeArguments(typeArguments, contextualTypeArguments, reportNode); // reports\r\n        if (!instance)\r\n            return null;\r\n        return this.compileFunction(instance) ? instance : null;\r\n    };\r\n    Compiler.prototype.compileFunction = function (instance) {\r\n        if (instance.is(program_1.ElementFlags.COMPILED))\r\n            return true;\r\n        assert(!instance.is(program_1.ElementFlags.BUILTIN) || instance.simpleName == \"abort\");\r\n        var declaration = instance.prototype.declaration;\r\n        if (instance.is(program_1.ElementFlags.DECLARED)) {\r\n            if (declaration.statements) {\r\n                this.error(diagnostics_1.DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts, declaration.name.range);\r\n                return false;\r\n            }\r\n        }\r\n        else if (!declaration.statements) {\r\n            this.error(diagnostics_1.DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration, declaration.name.range);\r\n            return false;\r\n        }\r\n        // might trigger compilation of other functions referring to this one\r\n        instance.set(program_1.ElementFlags.COMPILED);\r\n        // compile statements\r\n        var stmts = null;\r\n        if (!instance.is(program_1.ElementFlags.DECLARED)) {\r\n            var previousFunction = this.currentFunction;\r\n            this.currentFunction = instance;\r\n            var statements = assert(declaration.statements, \"implementation expected\");\r\n            stmts = this.compileStatements(statements);\r\n            // make sure the top-level branch or all child branches return\r\n            var allBranchesReturn = this.currentFunction.flow.finalize();\r\n            if (instance.returnType != types_1.Type.void && !allBranchesReturn)\r\n                this.error(diagnostics_1.DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value, assert(declaration.returnType, \"return type expected\").range);\r\n            this.currentFunction = previousFunction;\r\n        }\r\n        // create the function type\r\n        var numParameters = instance.parameters.length;\r\n        var numParametersInclThis = instance.instanceMethodOf ? numParameters + 1 : numParameters;\r\n        var paramIndex = 0;\r\n        var nativeResultType = instance.returnType.toNativeType();\r\n        var nativeParamTypes = new Array(numParametersInclThis);\r\n        var signatureNameParts = new Array(numParametersInclThis + 1);\r\n        if (instance.instanceMethodOf) {\r\n            nativeParamTypes[paramIndex] = this.options.target == Target.WASM64 ? module_1.NativeType.I64 : module_1.NativeType.I32;\r\n            signatureNameParts[paramIndex++] = instance.instanceMethodOf.type.toSignatureString();\r\n        }\r\n        for (var i = 0; i < numParameters; ++i) {\r\n            nativeParamTypes[paramIndex] = instance.parameters[i].type.toNativeType();\r\n            signatureNameParts[paramIndex++] = instance.parameters[i].type.toSignatureString();\r\n        }\r\n        signatureNameParts[paramIndex] = instance.returnType.toSignatureString();\r\n        var typeRef = this.module.getFunctionTypeBySignature(nativeResultType, nativeParamTypes);\r\n        if (!typeRef)\r\n            typeRef = this.module.addFunctionType(signatureNameParts.join(\"\"), nativeResultType, nativeParamTypes);\r\n        // create the function\r\n        var ref;\r\n        if (instance.is(program_1.ElementFlags.DECLARED))\r\n            ref = this.module.addFunctionImport(instance.internalName, instance.prototype.namespace ? instance.prototype.namespace.simpleName : \"env\", instance.simpleName, typeRef);\r\n        else\r\n            ref = this.module.addFunction(instance.internalName, typeRef, types_1.typesToNativeTypes(instance.additionalLocals), this.module.createBlock(null, stmts, module_1.NativeType.None));\r\n        // check module export\r\n        if (declaration.range.source.isEntry && declaration.isTopLevelExport)\r\n            this.module.addFunctionExport(instance.internalName, declaration.name.text);\r\n        instance.finalize(this.module, ref);\r\n        return true;\r\n    };\r\n    // namespaces\r\n    Compiler.prototype.compileNamespaceDeclaration = function (declaration) {\r\n        var members = declaration.members;\r\n        var noTreeShaking = this.options.noTreeShaking;\r\n        for (var i = 0, k = members.length; i < k; ++i) {\r\n            var member = members[i];\r\n            switch (member.kind) {\r\n                case ast_1.NodeKind.CLASSDECLARATION:\r\n                    if ((noTreeShaking || ast_1.hasModifier(ast_1.ModifierKind.EXPORT, member.modifiers)) && !member.typeParameters.length)\r\n                        this.compileClassDeclaration(member, []);\r\n                    break;\r\n                case ast_1.NodeKind.INTERFACEDECLARATION:\r\n                    if ((noTreeShaking || ast_1.hasModifier(ast_1.ModifierKind.EXPORT, member.modifiers)) && !member.typeParameters.length)\r\n                        this.compileInterfaceDeclaration(member, []);\r\n                    break;\r\n                case ast_1.NodeKind.ENUMDECLARATION:\r\n                    if (noTreeShaking || ast_1.hasModifier(ast_1.ModifierKind.EXPORT, member.modifiers))\r\n                        this.compileEnumDeclaration(member);\r\n                    break;\r\n                case ast_1.NodeKind.FUNCTIONDECLARATION:\r\n                    if ((noTreeShaking || ast_1.hasModifier(ast_1.ModifierKind.EXPORT, member.modifiers)) && !member.typeParameters.length)\r\n                        this.compileFunctionDeclaration(member, []);\r\n                    break;\r\n                case ast_1.NodeKind.NAMESPACEDECLARATION:\r\n                    if (noTreeShaking || ast_1.hasModifier(ast_1.ModifierKind.EXPORT, member.modifiers))\r\n                        this.compileNamespaceDeclaration(member);\r\n                    break;\r\n                case ast_1.NodeKind.VARIABLE:\r\n                    if (noTreeShaking || ast_1.hasModifier(ast_1.ModifierKind.EXPORT, member.modifiers)) {\r\n                        var variableInit = this.compileVariableStatement(member, true);\r\n                        if (variableInit)\r\n                            this.startFunctionBody.push(variableInit);\r\n                    }\r\n                    break;\r\n                default:\r\n                    throw new Error(\"namespace member expected\");\r\n            }\r\n        }\r\n    };\r\n    Compiler.prototype.compileNamespace = function (ns) {\r\n        if (!ns.members)\r\n            return;\r\n        var noTreeShaking = this.options.noTreeShaking;\r\n        try {\r\n            for (var _a = __values(ns.members.values()), _b = _a.next(); !_b.done; _b = _a.next()) {\r\n                var element = _b.value;\r\n                switch (element.kind) {\r\n                    case program_1.ElementKind.CLASS_PROTOTYPE:\r\n                        if ((noTreeShaking || element.is(program_1.ElementFlags.EXPORTED)) && !element.is(program_1.ElementFlags.GENERIC))\r\n                            this.compileClassUsingTypeArguments(element, []);\r\n                        break;\r\n                    case program_1.ElementKind.ENUM:\r\n                        this.compileEnum(element);\r\n                        break;\r\n                    case program_1.ElementKind.FUNCTION_PROTOTYPE:\r\n                        if ((noTreeShaking || element.is(program_1.ElementFlags.EXPORTED)) && !element.is(program_1.ElementFlags.GENERIC))\r\n                            this.compileFunctionUsingTypeArguments(element, [], null, element.declaration.name);\r\n                        break;\r\n                    case program_1.ElementKind.GLOBAL:\r\n                        this.compileGlobal(element);\r\n                        break;\r\n                    case program_1.ElementKind.NAMESPACE:\r\n                        this.compileNamespace(element);\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        catch (e_2_1) { e_2 = { error: e_2_1 }; }\r\n        finally {\r\n            try {\r\n                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);\r\n            }\r\n            finally { if (e_2) throw e_2.error; }\r\n        }\r\n        var e_2, _c;\r\n    };\r\n    // exports\r\n    Compiler.prototype.compileExportStatement = function (statement) {\r\n        var members = statement.members;\r\n        for (var i = 0, k = members.length; i < k; ++i) {\r\n            var member = members[i];\r\n            var internalExportName = statement.range.source.internalPath + program_1.PATH_DELIMITER + member.externalName.text;\r\n            var element = this.program.exports.get(internalExportName);\r\n            if (!element)\r\n                continue;\r\n            switch (element.kind) {\r\n                case program_1.ElementKind.CLASS_PROTOTYPE:\r\n                    if (!element.is(program_1.ElementFlags.GENERIC))\r\n                        this.compileClassUsingTypeArguments(element, []);\r\n                    break;\r\n                case program_1.ElementKind.ENUM:\r\n                    this.compileEnum(element);\r\n                    break;\r\n                case program_1.ElementKind.FUNCTION_PROTOTYPE:\r\n                    if (!element.is(program_1.ElementFlags.GENERIC) && statement.range.source.isEntry) {\r\n                        var functionInstance = this.compileFunctionUsingTypeArguments(element, [], null, element.declaration.name);\r\n                        if (functionInstance) {\r\n                            var functionDeclaration = functionInstance.prototype.declaration;\r\n                            if (functionDeclaration && functionDeclaration.needsExplicitExport(member))\r\n                                this.module.addFunctionExport(functionInstance.internalName, member.externalName.text);\r\n                        }\r\n                    }\r\n                    break;\r\n                case program_1.ElementKind.GLOBAL:\r\n                    if (this.compileGlobal(element) && statement.range.source.isEntry) {\r\n                        var globalDeclaration = element.declaration;\r\n                        if (globalDeclaration && globalDeclaration.needsExplicitExport(member)) {\r\n                            if (element.is(program_1.ElementFlags.INLINED))\r\n                                this.module.addGlobalExport(element.internalName, member.externalName.text);\r\n                            else\r\n                                this.warning(diagnostics_1.DiagnosticCode.Cannot_export_a_mutable_global, member.range);\r\n                        }\r\n                    }\r\n                    break;\r\n                case program_1.ElementKind.NAMESPACE:\r\n                    this.compileNamespace(element);\r\n                    break;\r\n            }\r\n        }\r\n    };\r\n    // classes\r\n    Compiler.prototype.compileClassDeclaration = function (declaration, typeArguments, contextualTypeArguments, alternativeReportNode) {\r\n        if (contextualTypeArguments === void 0) { contextualTypeArguments = null; }\r\n        if (alternativeReportNode === void 0) { alternativeReportNode = null; }\r\n        var element = this.program.elements.get(declaration.fileLevelInternalName);\r\n        if (!element || element.kind != program_1.ElementKind.CLASS_PROTOTYPE)\r\n            throw new Error(\"class expected\");\r\n        this.compileClassUsingTypeArguments(element, typeArguments, contextualTypeArguments, alternativeReportNode);\r\n    };\r\n    Compiler.prototype.compileClassUsingTypeArguments = function (prototype, typeArguments, contextualTypeArguments, alternativeReportNode) {\r\n        if (contextualTypeArguments === void 0) { contextualTypeArguments = null; }\r\n        if (alternativeReportNode === void 0) { alternativeReportNode = null; }\r\n        var instance = prototype.resolveInclTypeArguments(typeArguments, contextualTypeArguments, alternativeReportNode);\r\n        if (!instance)\r\n            return;\r\n        this.compileClass(instance);\r\n    };\r\n    Compiler.prototype.compileClass = function (instance) {\r\n        if (instance.is(program_1.ElementFlags.COMPILED))\r\n            return true;\r\n        instance.set(program_1.ElementFlags.COMPILED);\r\n        return true;\r\n    };\r\n    Compiler.prototype.compileInterfaceDeclaration = function (declaration, typeArguments, contextualTypeArguments, alternativeReportNode) {\r\n        if (contextualTypeArguments === void 0) { contextualTypeArguments = null; }\r\n        if (alternativeReportNode === void 0) { alternativeReportNode = null; }\r\n        throw new Error(\"not implemented\");\r\n    };\r\n    // memory\r\n    /** Adds a static memory segment with the specified data.  */\r\n    Compiler.prototype.addMemorySegment = function (buffer, alignment) {\r\n        if (alignment === void 0) { alignment = 8; }\r\n        var memoryOffset = i64_align(this.memoryOffset, alignment);\r\n        var segment = module_1.MemorySegment.create(buffer, memoryOffset);\r\n        this.memorySegments.push(segment);\r\n        this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length, 0));\r\n        return segment;\r\n    };\r\n    // statements\r\n    Compiler.prototype.compileStatement = function (statement) {\r\n        var expr;\r\n        switch (statement.kind) {\r\n            case ast_1.NodeKind.BLOCK:\r\n                expr = this.compileBlockStatement(statement);\r\n                break;\r\n            case ast_1.NodeKind.BREAK:\r\n                expr = this.compileBreakStatement(statement);\r\n                break;\r\n            case ast_1.NodeKind.CONTINUE:\r\n                expr = this.compileContinueStatement(statement);\r\n                break;\r\n            case ast_1.NodeKind.DO:\r\n                expr = this.compileDoStatement(statement);\r\n                break;\r\n            case ast_1.NodeKind.EMPTY:\r\n                expr = this.compileEmptyStatement(statement);\r\n                break;\r\n            case ast_1.NodeKind.EXPRESSION:\r\n                expr = this.compileExpressionStatement(statement);\r\n                break;\r\n            case ast_1.NodeKind.FOR:\r\n                expr = this.compileForStatement(statement);\r\n                break;\r\n            case ast_1.NodeKind.IF:\r\n                expr = this.compileIfStatement(statement);\r\n                break;\r\n            case ast_1.NodeKind.RETURN:\r\n                expr = this.compileReturnStatement(statement);\r\n                break;\r\n            case ast_1.NodeKind.SWITCH:\r\n                expr = this.compileSwitchStatement(statement);\r\n                break;\r\n            case ast_1.NodeKind.THROW:\r\n                expr = this.compileThrowStatement(statement);\r\n                break;\r\n            case ast_1.NodeKind.TRY:\r\n                expr = this.compileTryStatement(statement);\r\n                break;\r\n            case ast_1.NodeKind.VARIABLE:\r\n                var variableInit = this.compileVariableStatement(statement);\r\n                expr = variableInit ? variableInit : this.module.createNop();\r\n                break;\r\n            case ast_1.NodeKind.WHILE:\r\n                expr = this.compileWhileStatement(statement);\r\n                break;\r\n            case ast_1.NodeKind.TYPEDECLARATION:\r\n                if (this.currentFunction == this.startFunction)\r\n                    return this.module.createNop();\r\n            // fall-through: must be top-level; function bodies are not guaranteed to be evaluated\r\n            default:\r\n                throw new Error(\"statement expected\");\r\n        }\r\n        this.addDebugLocation(expr, statement.range);\r\n        return expr;\r\n    };\r\n    Compiler.prototype.compileStatements = function (statements) {\r\n        var k = statements.length;\r\n        var stmts = new Array(k);\r\n        for (var i = 0; i < k; ++i)\r\n            stmts[i] = this.compileStatement(statements[i]);\r\n        return stmts; // array of 0-es in noEmit-mode\r\n    };\r\n    Compiler.prototype.compileBlockStatement = function (statement) {\r\n        var statements = statement.statements;\r\n        // NOTE that we could optimize this to a NOP if empty or unwrap a single\r\n        // statement, but that's not what the source told us to do and left to the\r\n        // optimizer.\r\n        // Not actually a branch, but can contain its own scoped variables.\r\n        this.currentFunction.flow = this.currentFunction.flow.enterBranchOrScope();\r\n        var stmt = this.module.createBlock(null, this.compileStatements(statements), module_1.NativeType.None);\r\n        var stmtReturns = this.currentFunction.flow.is(1 /* RETURNS */);\r\n        // Switch back to the parent flow\r\n        this.currentFunction.flow = this.currentFunction.flow.leaveBranchOrScope();\r\n        if (stmtReturns)\r\n            this.currentFunction.flow.set(1 /* RETURNS */);\r\n        return stmt;\r\n    };\r\n    Compiler.prototype.compileBreakStatement = function (statement) {\r\n        if (statement.label) {\r\n            this.error(diagnostics_1.DiagnosticCode.Operation_not_supported, statement.label.range);\r\n            return this.module.createUnreachable();\r\n        }\r\n        var breakLabel = this.currentFunction.flow.breakLabel;\r\n        if (breakLabel == null) {\r\n            this.error(diagnostics_1.DiagnosticCode.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement, statement.range);\r\n            return this.module.createUnreachable();\r\n        }\r\n        this.currentFunction.flow.set(4 /* POSSIBLY_BREAKS */);\r\n        return this.module.createBreak(breakLabel);\r\n    };\r\n    Compiler.prototype.compileContinueStatement = function (statement) {\r\n        if (statement.label) {\r\n            this.error(diagnostics_1.DiagnosticCode.Operation_not_supported, statement.label.range);\r\n            return this.module.createUnreachable();\r\n        }\r\n        // Check if 'continue' is allowed here\r\n        var continueLabel = this.currentFunction.flow.continueLabel;\r\n        if (continueLabel == null) {\r\n            this.error(diagnostics_1.DiagnosticCode.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement, statement.range);\r\n            return this.module.createUnreachable();\r\n        }\r\n        this.currentFunction.flow.set(8 /* POSSIBLY_CONTINUES */);\r\n        return this.module.createBreak(continueLabel);\r\n    };\r\n    Compiler.prototype.compileDoStatement = function (statement) {\r\n        // A do statement does not initiate a new branch because it is executed at\r\n        // least once, but has its own break and continue labels.\r\n        var label = this.currentFunction.enterBreakContext();\r\n        var previousBreakLabel = this.currentFunction.flow.breakLabel;\r\n        var previousContinueLabel = this.currentFunction.flow.continueLabel;\r\n        var breakLabel = this.currentFunction.flow.breakLabel = \"break|\" + label;\r\n        var continueLabel = this.currentFunction.flow.continueLabel = \"continue|\" + label;\r\n        var body = this.compileStatement(statement.statement);\r\n        // Reset to the previous break and continue labels, if any.\r\n        this.currentFunction.flow.breakLabel = previousBreakLabel;\r\n        this.currentFunction.flow.continueLabel = previousContinueLabel;\r\n        var condition = this.compileExpression(statement.condition, types_1.Type.i32);\r\n        this.currentFunction.leaveBreakContext();\r\n        return this.module.createBlock(breakLabel, [\r\n            this.module.createLoop(continueLabel, this.module.createBlock(null, [\r\n                body,\r\n                this.module.createBreak(continueLabel, condition)\r\n            ], module_1.NativeType.None))\r\n        ], module_1.NativeType.None);\r\n    };\r\n    Compiler.prototype.compileEmptyStatement = function (statement) {\r\n        return this.module.createNop();\r\n    };\r\n    Compiler.prototype.compileExpressionStatement = function (statement) {\r\n        var expr = this.compileExpression(statement.expression, types_1.Type.void, 0 /* NONE */);\r\n        if (this.currentType != types_1.Type.void) {\r\n            expr = this.module.createDrop(expr);\r\n            this.currentType = types_1.Type.void;\r\n        }\r\n        return expr;\r\n    };\r\n    Compiler.prototype.compileForStatement = function (statement) {\r\n        // A for statement initiates a new branch with its own scoped variables\r\n        // possibly declared in its initializer, and break context.\r\n        var context = this.currentFunction.enterBreakContext();\r\n        this.currentFunction.flow = this.currentFunction.flow.enterBranchOrScope();\r\n        var breakLabel = this.currentFunction.flow.breakLabel = \"break|\" + context;\r\n        var continueLabel = this.currentFunction.flow.continueLabel = \"continue|\" + context;\r\n        // Compile in correct order\r\n        var initializer = statement.initializer ? this.compileStatement(statement.initializer) : this.module.createNop();\r\n        var condition = statement.condition ? this.compileExpression(statement.condition, types_1.Type.i32) : this.module.createI32(1);\r\n        var incrementor = statement.incrementor ? this.compileExpression(statement.incrementor, types_1.Type.void) : this.module.createNop();\r\n        var body = this.compileStatement(statement.statement);\r\n        var alwaysReturns = !statement.condition && this.currentFunction.flow.is(1 /* RETURNS */);\r\n        // TODO: check other always-true conditions as well, not just omitted\r\n        // Switch back to the parent flow\r\n        this.currentFunction.flow = this.currentFunction.flow.leaveBranchOrScope();\r\n        this.currentFunction.leaveBreakContext();\r\n        var expr = this.module.createBlock(breakLabel, [\r\n            initializer,\r\n            this.module.createLoop(continueLabel, this.module.createBlock(null, [\r\n                this.module.createIf(condition, this.module.createBlock(null, [\r\n                    body,\r\n                    incrementor,\r\n                    this.module.createBreak(continueLabel)\r\n                ], module_1.NativeType.None))\r\n            ], module_1.NativeType.None))\r\n        ], module_1.NativeType.None);\r\n        // If the loop is guaranteed to run and return, propagate that and append a hint\r\n        if (alwaysReturns) {\r\n            this.currentFunction.flow.set(1 /* RETURNS */);\r\n            expr = this.module.createBlock(null, [\r\n                expr,\r\n                this.module.createUnreachable()\r\n            ]);\r\n        }\r\n        return expr;\r\n    };\r\n    Compiler.prototype.compileIfStatement = function (statement) {\r\n        // The condition doesn't initiate a branch yet\r\n        var condition = this.compileExpression(statement.condition, types_1.Type.i32);\r\n        // Each arm initiates a branch\r\n        this.currentFunction.flow = this.currentFunction.flow.enterBranchOrScope();\r\n        var ifTrue = this.compileStatement(statement.ifTrue);\r\n        var ifTrueReturns = this.currentFunction.flow.is(1 /* RETURNS */);\r\n        this.currentFunction.flow = this.currentFunction.flow.leaveBranchOrScope();\r\n        var ifFalse = 0;\r\n        var ifFalseReturns = false;\r\n        if (statement.ifFalse) {\r\n            this.currentFunction.flow = this.currentFunction.flow.enterBranchOrScope();\r\n            ifFalse = this.compileStatement(statement.ifFalse);\r\n            ifFalseReturns = this.currentFunction.flow.is(1 /* RETURNS */);\r\n            this.currentFunction.flow = this.currentFunction.flow.leaveBranchOrScope();\r\n        }\r\n        if (ifTrueReturns && ifFalseReturns)\r\n            this.currentFunction.flow.set(1 /* RETURNS */);\r\n        return this.module.createIf(condition, ifTrue, ifFalse);\r\n    };\r\n    Compiler.prototype.compileReturnStatement = function (statement) {\r\n        var expression = 0;\r\n        if (statement.value)\r\n            expression = this.compileExpression(statement.value, this.currentFunction.returnType);\r\n        // Remember that this flow returns\r\n        this.currentFunction.flow.set(1 /* RETURNS */);\r\n        return this.module.createReturn(expression);\r\n    };\r\n    Compiler.prototype.compileSwitchStatement = function (statement) {\r\n        // Everything within a switch uses the same break context\r\n        var context = this.currentFunction.enterBreakContext();\r\n        // introduce a local for evaluating the condition (exactly once)\r\n        var tempLocal = this.currentFunction.getTempLocal(types_1.Type.i32);\r\n        var k = statement.cases.length;\r\n        // Prepend initializer to inner block. Does not initiate a new branch, yet.\r\n        var breaks = new Array(1 + k);\r\n        breaks[0] = this.module.createSetLocal(tempLocal.index, this.compileExpression(statement.condition, types_1.Type.i32)); // initializer\r\n        // make one br_if per (possibly dynamic) labeled case (binaryen optimizes to br_table where possible)\r\n        var breakIndex = 1;\r\n        var defaultIndex = -1;\r\n        for (var i = 0; i < k; ++i) {\r\n            var case_ = statement.cases[i];\r\n            if (case_.label) {\r\n                breaks[breakIndex++] = this.module.createBreak(\"case\" + i.toString(10) + \"|\" + context, this.module.createBinary(module_1.BinaryOp.EqI32, this.module.createGetLocal(tempLocal.index, module_1.NativeType.I32), this.compileExpression(case_.label, types_1.Type.i32)));\r\n            }\r\n            else\r\n                defaultIndex = i;\r\n        }\r\n        this.currentFunction.freeTempLocal(tempLocal);\r\n        // otherwise br to default respectively out of the switch if there is no default case\r\n        breaks[breakIndex] = this.module.createBreak((defaultIndex >= 0\r\n            ? \"case\" + defaultIndex.toString(10)\r\n            : \"break\") + \"|\" + context);\r\n        // nest blocks in order\r\n        var currentBlock = this.module.createBlock(\"case0|\" + context, breaks, module_1.NativeType.None);\r\n        var alwaysReturns = true;\r\n        for (i = 0; i < k; ++i) {\r\n            case_ = statement.cases[i];\r\n            var l = case_.statements.length;\r\n            var body = new Array(1 + l);\r\n            body[0] = currentBlock;\r\n            // Each switch case initiates a new branch\r\n            this.currentFunction.flow = this.currentFunction.flow.enterBranchOrScope();\r\n            var breakLabel = this.currentFunction.flow.breakLabel = \"break|\" + context;\r\n            var fallsThrough = i != k - 1;\r\n            var nextLabel = !fallsThrough ? breakLabel : \"case\" + (i + 1).toString(10) + \"|\" + context;\r\n            for (var j = 0; j < l; ++j) {\r\n                body[j + 1] = this.compileStatement(case_.statements[j]);\r\n            }\r\n            if (!(fallsThrough || this.currentFunction.flow.is(1 /* RETURNS */)))\r\n                alwaysReturns = false; // ignore fall-throughs\r\n            // Switch back to the parent flow\r\n            this.currentFunction.flow = this.currentFunction.flow.leaveBranchOrScope();\r\n            currentBlock = this.module.createBlock(nextLabel, body, module_1.NativeType.None);\r\n        }\r\n        this.currentFunction.leaveBreakContext();\r\n        // If the switch has a default and always returns, propagate that\r\n        if (defaultIndex >= 0 && alwaysReturns) {\r\n            this.currentFunction.flow.set(1 /* RETURNS */);\r\n            // Binaryen understands that so we don't need a hint\r\n        }\r\n        return currentBlock;\r\n    };\r\n    Compiler.prototype.compileThrowStatement = function (statement) {\r\n        // Remember that this branch possibly throws\r\n        this.currentFunction.flow.set(2 /* POSSIBLY_THROWS */);\r\n        // FIXME: without try-catch it is safe to assume RETURNS as well for now\r\n        this.currentFunction.flow.set(1 /* RETURNS */);\r\n        // TODO: requires exception-handling spec.\r\n        return this.module.createUnreachable();\r\n    };\r\n    Compiler.prototype.compileTryStatement = function (statement) {\r\n        throw new Error(\"not implemented\");\r\n        // can't yet support something like: try { return ... } finally { ... }\r\n        // worthwhile to investigate lowering returns to block results (here)?\r\n    };\r\n    /**\r\n     * Compiles a variable statement. Returns `0` if an initializer is not\r\n     * necessary.\r\n     */\r\n    Compiler.prototype.compileVariableStatement = function (statement, isKnownGlobal) {\r\n        if (isKnownGlobal === void 0) { isKnownGlobal = false; }\r\n        var declarations = statement.declarations;\r\n        // top-level variables and constants become globals\r\n        if (isKnownGlobal || (this.currentFunction == this.startFunction &&\r\n            statement.parent && statement.parent.kind == ast_1.NodeKind.SOURCE)) {\r\n            // NOTE that the above condition also covers top-level variables declared with 'let', even\r\n            // though such variables could also become start function locals if, and only if, not used\r\n            // within any function declared in the same source, which is unknown at this point. the only\r\n            // efficient way to deal with this would be to keep track of all occasions it is used and\r\n            // replace these instructions afterwards, dynamically. (TOOD: what about a Binaryen pass?)\r\n            for (var i = 0, k = declarations.length; i < k; ++i)\r\n                this.compileGlobalDeclaration(declarations[i]);\r\n            return 0;\r\n        }\r\n        // other variables become locals\r\n        var initializers = new Array();\r\n        for (i = 0, k = declarations.length; i < k; ++i) {\r\n            var declaration = declarations[i];\r\n            var name = declaration.name.text;\r\n            var type = null;\r\n            var init = 0;\r\n            if (declaration.type) {\r\n                type = this.program.resolveType(declaration.type, this.currentFunction.contextualTypeArguments, true); // reports\r\n                if (!type)\r\n                    continue;\r\n                if (declaration.initializer)\r\n                    init = this.compileExpression(declaration.initializer, type); // reports\r\n            }\r\n            else if (declaration.initializer) {\r\n                init = this.compileExpression(declaration.initializer, types_1.Type.void, 0 /* NONE */); // reports\r\n                if (this.currentType == types_1.Type.void) {\r\n                    this.error(diagnostics_1.DiagnosticCode.Type_0_is_not_assignable_to_type_1, declaration.range, this.currentType.toString(), \"<auto>\");\r\n                    continue;\r\n                }\r\n                type = this.currentType;\r\n            }\r\n            else {\r\n                this.error(diagnostics_1.DiagnosticCode.Type_expected, declaration.name.range.atEnd);\r\n                continue;\r\n            }\r\n            if (ast_1.hasModifier(ast_1.ModifierKind.CONST, declaration.modifiers)) {\r\n                if (init) {\r\n                    init = this.precomputeExpressionRef(init);\r\n                    if (_BinaryenExpressionGetId(init) == module_1.ExpressionId.Const) {\r\n                        var local = new program_1.Local(this.program, name, -1, type);\r\n                        switch (_BinaryenExpressionGetType(init)) {\r\n                            case module_1.NativeType.I32:\r\n                                local = local.withConstantIntegerValue(_BinaryenConstGetValueI32(init), 0);\r\n                                break;\r\n                            case module_1.NativeType.I64:\r\n                                local = local.withConstantIntegerValue(_BinaryenConstGetValueI64Low(init), _BinaryenConstGetValueI64High(init));\r\n                                break;\r\n                            case module_1.NativeType.F32:\r\n                                local = local.withConstantFloatValue(_BinaryenConstGetValueF32(init));\r\n                                break;\r\n                            case module_1.NativeType.F64:\r\n                                local = local.withConstantFloatValue(_BinaryenConstGetValueF64(init));\r\n                                break;\r\n                            default:\r\n                                throw new Error(\"concrete type expected\");\r\n                        }\r\n                        // Create a virtual local that doesn't actually exist in WebAssembly\r\n                        var scopedLocals = this.currentFunction.flow.scopedLocals;\r\n                        if (!scopedLocals)\r\n                            scopedLocals = this.currentFunction.flow.scopedLocals = new Map();\r\n                        else if (scopedLocals.has(name)) {\r\n                            this.error(diagnostics_1.DiagnosticCode.Duplicate_identifier_0, declaration.name.range, name);\r\n                            return 0;\r\n                        }\r\n                        scopedLocals.set(name, local);\r\n                        return 0;\r\n                    }\r\n                    else\r\n                        this.warning(diagnostics_1.DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable, declaration.range);\r\n                }\r\n                else\r\n                    this.error(diagnostics_1.DiagnosticCode._const_declarations_must_be_initialized, declaration.range);\r\n            }\r\n            if (ast_1.hasModifier(ast_1.ModifierKind.LET, declaration.modifiers))\r\n                this.currentFunction.flow.addScopedLocal(name, type, declaration.name); // reports\r\n            else\r\n                this.currentFunction.addLocal(type, name); // reports\r\n            if (init)\r\n                initializers.push(this.compileAssignmentWithValue(declaration.name, init));\r\n        }\r\n        return initializers.length // we can unwrap these here because the\r\n            ? initializers.length == 1 // source didn't tell us exactly what to do\r\n                ? initializers[0]\r\n                : this.module.createBlock(null, initializers, module_1.NativeType.None)\r\n            : 0;\r\n    };\r\n    Compiler.prototype.compileWhileStatement = function (statement) {\r\n        // The condition does not yet initialize a branch\r\n        var condition = this.compileExpression(statement.condition, types_1.Type.i32);\r\n        // Statements initiate a new branch with its own break context\r\n        var label = this.currentFunction.enterBreakContext();\r\n        this.currentFunction.flow = this.currentFunction.flow.enterBranchOrScope();\r\n        var breakLabel = this.currentFunction.flow.breakLabel = \"break|\" + label;\r\n        var continueLabel = this.currentFunction.flow.continueLabel = \"continue|\" + label;\r\n        var body = this.compileStatement(statement.statement);\r\n        var alwaysReturns = false && this.currentFunction.flow.is(1 /* RETURNS */);\r\n        // TODO: evaluate possible always-true conditions\r\n        // Switch back to the parent flow\r\n        this.currentFunction.flow = this.currentFunction.flow.leaveBranchOrScope();\r\n        this.currentFunction.leaveBreakContext();\r\n        var expr = this.module.createBlock(breakLabel, [\r\n            this.module.createLoop(continueLabel, this.module.createIf(condition, this.module.createBlock(null, [\r\n                body,\r\n                this.module.createBreak(continueLabel)\r\n            ], module_1.NativeType.None)))\r\n        ], module_1.NativeType.None);\r\n        // If the loop is guaranteed to run and return, propagate that and append a hint\r\n        if (alwaysReturns) {\r\n            expr = this.module.createBlock(null, [\r\n                expr,\r\n                this.module.createUnreachable()\r\n            ]);\r\n        }\r\n        return expr;\r\n    };\r\n    // expressions\r\n    /** Compiles an inlined constant value of a variable-like element. */\r\n    Compiler.prototype.compileInlineConstant = function (element, contextualType) {\r\n        assert(element.is(program_1.ElementFlags.INLINED));\r\n        switch (element.type.is(4 /* INTEGER */) && contextualType.is(4 /* INTEGER */) && element.type.size < contextualType.size\r\n            ? (this.currentType = contextualType).kind // essentially precomputes a (sign-)extension\r\n            : (this.currentType = element.type).kind) {\r\n            case 0 /* I8 */:\r\n            case 1 /* I16 */:\r\n                var shift = element.type.computeSmallIntegerShift(types_1.Type.i32);\r\n                return this.module.createI32(element.constantValueKind == 1 /* INTEGER */ ? i64_low(element.constantIntegerValue) << shift >> shift : 0);\r\n            case 5 /* U8 */:\r\n            case 6 /* U16 */:\r\n            case 10 /* BOOL */:\r\n                var mask = element.type.computeSmallIntegerMask(types_1.Type.i32);\r\n                return this.module.createI32(element.constantValueKind == 1 /* INTEGER */ ? i64_low(element.constantIntegerValue) & mask : 0);\r\n            case 2 /* I32 */:\r\n            case 7 /* U32 */:\r\n                return this.module.createI32(element.constantValueKind == 1 /* INTEGER */ ? i64_low(element.constantIntegerValue) : 0);\r\n            case 4 /* ISIZE */:\r\n            case 9 /* USIZE */:\r\n                if (!element.program.options.isWasm64)\r\n                    return this.module.createI32(element.constantValueKind == 1 /* INTEGER */ ? i64_low(element.constantIntegerValue) : 0);\r\n            // fall-through\r\n            case 3 /* I64 */:\r\n            case 8 /* U64 */:\r\n                return element.constantValueKind == 1 /* INTEGER */\r\n                    ? this.module.createI64(i64_low(element.constantIntegerValue), i64_high(element.constantIntegerValue))\r\n                    : this.module.createI64(0);\r\n            case 11 /* F32 */:\r\n                return this.module.createF32(element.constantFloatValue); // safe because it's a 'number' in JS\r\n            case 12 /* F64 */:\r\n                return this.module.createF64(element.constantFloatValue);\r\n            default:\r\n                throw new Error(\"concrete type expected\");\r\n        }\r\n    };\r\n    Compiler.prototype.compileExpression = function (expression, contextualType, conversionKind, wrapSmallIntegers) {\r\n        if (conversionKind === void 0) { conversionKind = 1 /* IMPLICIT */; }\r\n        if (wrapSmallIntegers === void 0) { wrapSmallIntegers = true; }\r\n        this.currentType = contextualType;\r\n        var expr;\r\n        switch (expression.kind) {\r\n            case ast_1.NodeKind.ASSERTION:\r\n                expr = this.compileAssertionExpression(expression, contextualType);\r\n                break;\r\n            case ast_1.NodeKind.BINARY:\r\n                expr = this.compileBinaryExpression(expression, contextualType, wrapSmallIntegers);\r\n                break;\r\n            case ast_1.NodeKind.CALL:\r\n                expr = this.compileCallExpression(expression, contextualType);\r\n                break;\r\n            case ast_1.NodeKind.COMMA:\r\n                expr = this.compileCommaExpression(expression, contextualType);\r\n                break;\r\n            case ast_1.NodeKind.ELEMENTACCESS:\r\n                expr = this.compileElementAccessExpression(expression, contextualType);\r\n                break;\r\n            case ast_1.NodeKind.IDENTIFIER:\r\n            case ast_1.NodeKind.FALSE:\r\n            case ast_1.NodeKind.NULL:\r\n            case ast_1.NodeKind.THIS:\r\n            case ast_1.NodeKind.TRUE:\r\n                expr = this.compileIdentifierExpression(expression, contextualType);\r\n                break;\r\n            case ast_1.NodeKind.LITERAL:\r\n                expr = this.compileLiteralExpression(expression, contextualType);\r\n                break;\r\n            case ast_1.NodeKind.NEW:\r\n                expr = this.compileNewExpression(expression, contextualType);\r\n                break;\r\n            case ast_1.NodeKind.PARENTHESIZED:\r\n                expr = this.compileParenthesizedExpression(expression, contextualType);\r\n                break;\r\n            case ast_1.NodeKind.PROPERTYACCESS:\r\n                expr = this.compilePropertyAccessExpression(expression, contextualType);\r\n                break;\r\n            case ast_1.NodeKind.TERNARY:\r\n                expr = this.compileTernaryExpression(expression, contextualType);\r\n                break;\r\n            case ast_1.NodeKind.UNARYPOSTFIX:\r\n                expr = this.compileUnaryPostfixExpression(expression, contextualType);\r\n                break;\r\n            case ast_1.NodeKind.UNARYPREFIX:\r\n                expr = this.compileUnaryPrefixExpression(expression, contextualType, wrapSmallIntegers);\r\n                break;\r\n            default:\r\n                throw new Error(\"expression expected\");\r\n        }\r\n        if (conversionKind != 0 /* NONE */ && this.currentType != contextualType) {\r\n            expr = this.convertExpression(expr, this.currentType, contextualType, conversionKind, expression);\r\n            this.currentType = contextualType;\r\n        }\r\n        this.addDebugLocation(expr, expression.range);\r\n        return expr;\r\n    };\r\n    Compiler.prototype.precomputeExpression = function (expression, contextualType, conversionKind) {\r\n        if (conversionKind === void 0) { conversionKind = 1 /* IMPLICIT */; }\r\n        return this.precomputeExpressionRef(this.compileExpression(expression, contextualType, conversionKind));\r\n    };\r\n    Compiler.prototype.precomputeExpressionRef = function (expr) {\r\n        var nativeType = this.currentType.toNativeType();\r\n        var typeRef = this.module.getFunctionTypeBySignature(nativeType, []);\r\n        var typeRefAdded = false;\r\n        if (!typeRef) {\r\n            typeRef = this.module.addFunctionType(this.currentType.toSignatureString(), nativeType, []);\r\n            typeRefAdded = true;\r\n        }\r\n        var funcRef = this.module.addFunction(\"__precompute\", typeRef, [], expr);\r\n        this.module.runPasses([\"precompute\"], funcRef);\r\n        var ret = _BinaryenFunctionGetBody(funcRef);\r\n        this.module.removeFunction(\"__precompute\");\r\n        if (typeRefAdded) {\r\n            // TODO: also remove the function type somehow if no longer used or make the C-API accept\r\n            // a `null` typeRef, using an implicit type.\r\n        }\r\n        return ret;\r\n    };\r\n    Compiler.prototype.convertExpression = function (expr, fromType, toType, conversionKind, reportNode) {\r\n        if (conversionKind == 0 /* NONE */) {\r\n            assert(false, \"concrete type expected\");\r\n            return expr;\r\n        }\r\n        // void to any\r\n        if (fromType.kind == 13 /* VOID */) {\r\n            this.error(diagnostics_1.DiagnosticCode.Type_0_is_not_assignable_to_type_1, reportNode.range, fromType.toString(), toType.toString());\r\n            return this.module.createUnreachable();\r\n        }\r\n        // any to void\r\n        if (toType.kind == 13 /* VOID */)\r\n            return this.module.createDrop(expr);\r\n        var mod = this.module;\r\n        var losesInformation = false;\r\n        if (fromType.is(8 /* FLOAT */)) {\r\n            // float to float\r\n            if (toType.is(8 /* FLOAT */)) {\r\n                if (fromType.kind == 11 /* F32 */) {\r\n                    // f32 to f64\r\n                    if (toType.kind == 12 /* F64 */)\r\n                        expr = mod.createUnary(module_1.UnaryOp.PromoteF32, expr);\r\n                    // otherwise f32 to f32\r\n                    // f64 to f32\r\n                }\r\n                else if (toType.kind == 11 /* F32 */) {\r\n                    losesInformation = true;\r\n                    expr = mod.createUnary(module_1.UnaryOp.DemoteF64, expr);\r\n                }\r\n                // otherwise f64 to f64\r\n                // float to int\r\n            }\r\n            else if (toType.is(4 /* INTEGER */)) {\r\n                losesInformation = true;\r\n                // f32 to int\r\n                if (fromType.kind == 11 /* F32 */) {\r\n                    if (toType.is(1 /* SIGNED */)) {\r\n                        if (toType.is(64 /* LONG */))\r\n                            expr = mod.createUnary(module_1.UnaryOp.TruncF32ToI64, expr);\r\n                        else {\r\n                            expr = mod.createUnary(module_1.UnaryOp.TruncF32ToI32, expr);\r\n                            if (toType.is(32 /* SMALL */))\r\n                                expr = makeSmallIntegerWrap(expr, toType, this.module);\r\n                        }\r\n                    }\r\n                    else {\r\n                        if (toType.is(64 /* LONG */))\r\n                            expr = mod.createUnary(module_1.UnaryOp.TruncF32ToU64, expr);\r\n                        else {\r\n                            expr = mod.createUnary(module_1.UnaryOp.TruncF32ToU32, expr);\r\n                            if (toType.is(32 /* SMALL */))\r\n                                expr = makeSmallIntegerWrap(expr, toType, this.module);\r\n                        }\r\n                    }\r\n                    // f64 to int\r\n                }\r\n                else {\r\n                    if (toType.is(1 /* SIGNED */)) {\r\n                        if (toType.is(64 /* LONG */))\r\n                            expr = mod.createUnary(module_1.UnaryOp.TruncF64ToI64, expr);\r\n                        else {\r\n                            expr = mod.createUnary(module_1.UnaryOp.TruncF64ToI32, expr);\r\n                            if (toType.is(32 /* SMALL */))\r\n                                expr = makeSmallIntegerWrap(expr, toType, this.module);\r\n                        }\r\n                    }\r\n                    else {\r\n                        if (toType.is(64 /* LONG */))\r\n                            expr = mod.createUnary(module_1.UnaryOp.TruncF64ToU64, expr);\r\n                        else {\r\n                            expr = mod.createUnary(module_1.UnaryOp.TruncF64ToU32, expr);\r\n                            if (toType.is(32 /* SMALL */))\r\n                                expr = makeSmallIntegerWrap(expr, toType, this.module);\r\n                        }\r\n                    }\r\n                }\r\n                // float to void\r\n            }\r\n            else {\r\n                assert(toType.flags == 0 /* NONE */, \"void type expected\");\r\n                expr = this.module.createDrop(expr);\r\n            }\r\n            // int to float\r\n        }\r\n        else if (fromType.is(4 /* INTEGER */) && toType.is(8 /* FLOAT */)) {\r\n            // int to f32\r\n            if (toType.kind == 11 /* F32 */) {\r\n                if (fromType.is(64 /* LONG */)) {\r\n                    losesInformation = true;\r\n                    expr = mod.createUnary(fromType.is(1 /* SIGNED */) ? module_1.UnaryOp.ConvertI64ToF32 : module_1.UnaryOp.ConvertU64ToF32, expr);\r\n                }\r\n                else {\r\n                    losesInformation = !fromType.is(32 /* SMALL */);\r\n                    expr = mod.createUnary(fromType.is(1 /* SIGNED */) ? module_1.UnaryOp.ConvertI32ToF32 : module_1.UnaryOp.ConvertU32ToF32, expr);\r\n                }\r\n                // int to f64\r\n            }\r\n            else {\r\n                if (fromType.is(64 /* LONG */)) {\r\n                    losesInformation = true;\r\n                    expr = mod.createUnary(fromType.is(1 /* SIGNED */) ? module_1.UnaryOp.ConvertI64ToF64 : module_1.UnaryOp.ConvertU64ToF64, expr);\r\n                }\r\n                else\r\n                    expr = mod.createUnary(fromType.is(1 /* SIGNED */) ? module_1.UnaryOp.ConvertI32ToF64 : module_1.UnaryOp.ConvertU32ToF64, expr);\r\n            }\r\n            // int to int\r\n        }\r\n        else {\r\n            if (fromType.is(64 /* LONG */)) {\r\n                // i64 to i32\r\n                if (!toType.is(64 /* LONG */)) {\r\n                    losesInformation = true;\r\n                    expr = mod.createUnary(module_1.UnaryOp.WrapI64, expr); // discards upper bits\r\n                    if (toType.is(32 /* SMALL */))\r\n                        expr = makeSmallIntegerWrap(expr, toType, this.module);\r\n                }\r\n                // i32 to i64\r\n            }\r\n            else if (toType.is(64 /* LONG */)) {\r\n                expr = mod.createUnary(toType.is(1 /* SIGNED */) ? module_1.UnaryOp.ExtendI32 : module_1.UnaryOp.ExtendU32, expr);\r\n                // i32 or smaller to even smaller or same size int with change of sign\r\n            }\r\n            else if (toType.is(32 /* SMALL */) && (fromType.size > toType.size || (fromType.size == toType.size && fromType.is(1 /* SIGNED */) != toType.is(1 /* SIGNED */)))) {\r\n                losesInformation = true;\r\n                expr = makeSmallIntegerWrap(expr, toType, this.module);\r\n            }\r\n            // otherwise (smaller) i32/u32 to (same size) i32/u32\r\n        }\r\n        if (losesInformation && conversionKind == 1 /* IMPLICIT */)\r\n            this.error(diagnostics_1.DiagnosticCode.Conversion_from_type_0_to_1_possibly_loses_information_and_thus_requires_an_explicit_cast, reportNode.range, fromType.toString(), toType.toString());\r\n        return expr;\r\n    };\r\n    Compiler.prototype.compileAssertionExpression = function (expression, contextualType) {\r\n        var toType = this.program.resolveType(expression.toType, this.currentFunction.contextualTypeArguments); // reports\r\n        if (!toType)\r\n            return this.module.createUnreachable();\r\n        return this.compileExpression(expression.expression, toType, 2 /* EXPLICIT */);\r\n    };\r\n    Compiler.prototype.compileBinaryExpression = function (expression, contextualType, wrapSmallIntegers) {\r\n        if (wrapSmallIntegers === void 0) { wrapSmallIntegers = true; }\r\n        var left;\r\n        var right;\r\n        var condition;\r\n        var expr;\r\n        var compound = false;\r\n        var possiblyOverflows = false;\r\n        var tempLocal = null;\r\n        switch (expression.operator) {\r\n            case tokenizer_1.Token.LESSTHAN:\r\n                left = this.compileExpression(expression.left, contextualType == types_1.Type.void ? types_1.Type.i32 : contextualType, 0 /* NONE */);\r\n                right = this.compileExpression(expression.right, this.currentType);\r\n                switch (this.currentType.kind) {\r\n                    case 0 /* I8 */:\r\n                    case 1 /* I16 */:\r\n                    case 2 /* I32 */:\r\n                        expr = this.module.createBinary(module_1.BinaryOp.LtI32, left, right);\r\n                        break;\r\n                    case 3 /* I64 */:\r\n                        expr = this.module.createBinary(module_1.BinaryOp.LtI64, left, right);\r\n                        break;\r\n                    case 4 /* ISIZE */:\r\n                        expr = this.module.createBinary(this.options.target == Target.WASM64 ? module_1.BinaryOp.LtI64 : module_1.BinaryOp.LtI32, left, right);\r\n                        break;\r\n                    case 5 /* U8 */:\r\n                    case 6 /* U16 */:\r\n                    case 7 /* U32 */:\r\n                    case 10 /* BOOL */:\r\n                        expr = this.module.createBinary(module_1.BinaryOp.LtU32, left, right);\r\n                        break;\r\n                    case 9 /* USIZE */:\r\n                        // TODO: check operator overload\r\n                        expr = this.module.createBinary(this.options.target == Target.WASM64 ? module_1.BinaryOp.LtU64 : module_1.BinaryOp.LtU32, left, right);\r\n                        break;\r\n                    case 8 /* U64 */:\r\n                        expr = this.module.createBinary(module_1.BinaryOp.LtU64, left, right);\r\n                        break;\r\n                    case 11 /* F32 */:\r\n                        expr = this.module.createBinary(module_1.BinaryOp.LtF32, left, right);\r\n                        break;\r\n                    case 12 /* F64 */:\r\n                        expr = this.module.createBinary(module_1.BinaryOp.LtF64, left, right);\r\n                        break;\r\n                    default:\r\n                        this.error(diagnostics_1.DiagnosticCode.Operation_not_supported, expression.range);\r\n                        throw new Error(\"concrete type expected\");\r\n                }\r\n                this.currentType = types_1.Type.bool;\r\n                break;\r\n            case tokenizer_1.Token.GREATERTHAN:\r\n                left = this.compileExpression(expression.left, contextualType == types_1.Type.void ? types_1.Type.i32 : contextualType, 0 /* NONE */);\r\n                right = this.compileExpression(expression.right, this.currentType);\r\n                switch (this.currentType.kind) {\r\n                    case 0 /* I8 */:\r\n                    case 1 /* I16 */:\r\n                    case 2 /* I32 */:\r\n                        expr = this.module.createBinary(module_1.BinaryOp.GtI32, left, right);\r\n                        break;\r\n                    case 4 /* ISIZE */:\r\n                        expr = this.module.createBinary(this.options.target == Target.WASM64 ? module_1.BinaryOp.GtI64 : module_1.BinaryOp.GtI32, left, right);\r\n                        break;\r\n                    case 3 /* I64 */:\r\n                        expr = this.module.createBinary(module_1.BinaryOp.GtI64, left, right);\r\n                        break;\r\n                    case 5 /* U8 */:\r\n                    case 6 /* U16 */:\r\n                    case 7 /* U32 */:\r\n                    case 10 /* BOOL */:\r\n                        expr = this.module.createBinary(module_1.BinaryOp.GtU32, left, right);\r\n                        break;\r\n                    case 9 /* USIZE */:\r\n                        // TODO: check operator overload\r\n                        expr = this.module.createBinary(this.options.target == Target.WASM64 ? module_1.BinaryOp.GtU64 : module_1.BinaryOp.GtU32, left, right);\r\n                        break;\r\n                    case 8 /* U64 */:\r\n                        expr = this.module.createBinary(module_1.BinaryOp.GtU64, left, right);\r\n                        break;\r\n                    case 11 /* F32 */:\r\n                        expr = this.module.createBinary(module_1.BinaryOp.GtF32, left, right);\r\n                        break;\r\n                    case 12 /* F64 */:\r\n                        expr = this.module.createBinary(module_1.BinaryOp.GtF64, left, right);\r\n                        break;\r\n                    default:\r\n                        this.error(diagnostics_1.DiagnosticCode.Operation_not_supported, expression.range);\r\n                        throw new Error(\"concrete type expected\");\r\n                }\r\n                this.currentType = types_1.Type.bool;\r\n                break;\r\n            case tokenizer_1.Token.LESSTHAN_EQUALS:\r\n                left = this.compileExpression(expression.left, contextualType == types_1.Type.void ? types_1.Type.i32 : contextualType, 0 /* NONE */);\r\n                right = this.compileExpression(expression.right, this.currentType);\r\n                switch (this.currentType.kind) {\r\n                    case 0 /* I8 */:\r\n                    case 1 /* I16 */:\r\n                    case 2 /* I32 */:\r\n                        expr = this.module.createBinary(module_1.BinaryOp.LeI32, left, right);\r\n                        break;\r\n                    case 4 /* ISIZE */:\r\n                        expr = this.module.createBinary(this.options.target == Target.WASM64 ? module_1.BinaryOp.LeI64 : module_1.BinaryOp.LeI32, left, right);\r\n                        break;\r\n                    case 3 /* I64 */:\r\n                        expr = this.module.createBinary(module_1.BinaryOp.LeI64, left, right);\r\n                        break;\r\n                    case 5 /* U8 */:\r\n                    case 6 /* U16 */:\r\n                    case 7 /* U32 */:\r\n                    case 10 /* BOOL */:\r\n                        expr = this.module.createBinary(module_1.BinaryOp.LeU32, left, right);\r\n                        break;\r\n                    case 9 /* USIZE */:\r\n                        // TODO: check operator overload\r\n                        expr = this.module.createBinary(this.options.target == Target.WASM64 ? module_1.BinaryOp.LeU64 : module_1.BinaryOp.LeU32, left, right);\r\n                        break;\r\n                    case 8 /* U64 */:\r\n                        expr = this.module.createBinary(module_1.BinaryOp.LeU64, left, right);\r\n                        break;\r\n                    case 11 /* F32 */:\r\n                        expr = this.module.createBinary(module_1.BinaryOp.LeF32, left, right);\r\n                        break;\r\n                    case 12 /* F64 */:\r\n                        expr = this.module.createBinary(module_1.BinaryOp.LeF64, left, right);\r\n                        break;\r\n                    default:\r\n                        this.error(diagnostics_1.DiagnosticCode.Operation_not_supported, expression.range);\r\n                        throw new Error(\"concrete type expected\");\r\n                }\r\n                this.currentType = types_1.Type.bool;\r\n                break;\r\n            case tokenizer_1.Token.GREATERTHAN_EQUALS:\r\n                left = this.compileExpression(expression.left, contextualType == types_1.Type.void ? types_1.Type.i32 : contextualType, 0 /* NONE */);\r\n                right = this.compileExpression(expression.right, this.currentType);\r\n                switch (this.currentType.kind) {\r\n                    case 0 /* I8 */:\r\n                    case 1 /* I16 */:\r\n                    case 2 /* I32 */:\r\n                        expr = this.module.createBinary(module_1.BinaryOp.GeI32, left, right);\r\n                        break;\r\n                    case 4 /* ISIZE */:\r\n                        expr = this.module.createBinary(this.options.target == Target.WASM64 ? module_1.BinaryOp.GeI64 : module_1.BinaryOp.GeI32, left, right);\r\n                        break;\r\n                    case 3 /* I64 */:\r\n                        expr = this.module.createBinary(module_1.BinaryOp.GeI64, left, right);\r\n                        break;\r\n                    case 5 /* U8 */:\r\n                    case 6 /* U16 */:\r\n                    case 7 /* U32 */:\r\n                    case 10 /* BOOL */:\r\n                        expr = this.module.createBinary(module_1.BinaryOp.GeU32, left, right);\r\n                        break;\r\n                    case 9 /* USIZE */:\r\n                        // TODO: check operator overload\r\n                        expr = this.module.createBinary(this.options.target == Target.WASM64 ? module_1.BinaryOp.GeU64 : module_1.BinaryOp.GeU32, left, right);\r\n                        break;\r\n                    case 8 /* U64 */:\r\n                        expr = this.module.createBinary(module_1.BinaryOp.GeU64, left, right);\r\n                        break;\r\n                    case 11 /* F32 */:\r\n                        expr = this.module.createBinary(module_1.BinaryOp.GeF32, left, right);\r\n                        break;\r\n                    case 12 /* F64 */:\r\n                        expr = this.module.createBinary(module_1.BinaryOp.GeF64, left, right);\r\n                        break;\r\n                    default:\r\n                        this.error(diagnostics_1.DiagnosticCode.Operation_not_supported, expression.range);\r\n                        throw new Error(\"concrete type expected\");\r\n                }\r\n                this.currentType = types_1.Type.bool;\r\n                break;\r\n            case tokenizer_1.Token.EQUALS_EQUALS_EQUALS:\r\n            // TODO?\r\n            case tokenizer_1.Token.EQUALS_EQUALS:\r\n                // NOTE that this favors correctness, in terms of emitting a binary expression, over\r\n                // checking for a possible use of unary EQZ. while the most classic of all optimizations,\r\n                // that's not what the source told us to do. for reference, `!left` emits unary EQZ.\r\n                left = this.compileExpression(expression.left, contextualType == types_1.Type.void ? types_1.Type.i32 : contextualType, 0 /* NONE */);\r\n                right = this.compileExpression(expression.right, this.currentType);\r\n                switch (this.currentType.kind) {\r\n                    case 0 /* I8 */:\r\n                    case 1 /* I16 */:\r\n                    case 2 /* I32 */:\r\n                    case 5 /* U8 */:\r\n                    case 6 /* U16 */:\r\n                    case 7 /* U32 */:\r\n                    case 10 /* BOOL */:\r\n                        expr = this.module.createBinary(module_1.BinaryOp.EqI32, left, right);\r\n                        break;\r\n                    case 9 /* USIZE */:\r\n                    // TODO: check operator overload\r\n                    case 4 /* ISIZE */:\r\n                        expr = this.module.createBinary(this.options.target == Target.WASM64 ? module_1.BinaryOp.EqI64 : module_1.BinaryOp.EqI32, left, right);\r\n                        break;\r\n                    case 3 /* I64 */:\r\n                    case 8 /* U64 */:\r\n                        expr = this.module.createBinary(module_1.BinaryOp.EqI64, left, right);\r\n                        break;\r\n                    case 11 /* F32 */:\r\n                        expr = this.module.createBinary(module_1.BinaryOp.EqF32, left, right);\r\n                        break;\r\n                    case 12 /* F64 */:\r\n                        expr = this.module.createBinary(module_1.BinaryOp.EqF64, left, right);\r\n                        break;\r\n                    default:\r\n                        this.error(diagnostics_1.DiagnosticCode.Operation_not_supported, expression.range);\r\n                        throw new Error(\"concrete type expected\");\r\n                }\r\n                this.currentType = types_1.Type.bool;\r\n                break;\r\n            case tokenizer_1.Token.EXCLAMATION_EQUALS_EQUALS:\r\n            // TODO?\r\n            case tokenizer_1.Token.EXCLAMATION_EQUALS:\r\n                left = this.compileExpression(expression.left, contextualType == types_1.Type.void ? types_1.Type.i32 : contextualType, 0 /* NONE */);\r\n                right = this.compileExpression(expression.right, this.currentType);\r\n                switch (this.currentType.kind) {\r\n                    case 0 /* I8 */:\r\n                    case 1 /* I16 */:\r\n                    case 2 /* I32 */:\r\n                    case 5 /* U8 */:\r\n                    case 6 /* U16 */:\r\n                    case 7 /* U32 */:\r\n                    case 10 /* BOOL */:\r\n                        expr = this.module.createBinary(module_1.BinaryOp.NeI32, left, right);\r\n                        break;\r\n                    case 9 /* USIZE */:\r\n                    // TODO: check operator overload\r\n                    case 4 /* ISIZE */:\r\n                        expr = this.module.createBinary(this.options.target == Target.WASM64 ? module_1.BinaryOp.NeI64 : module_1.BinaryOp.NeI32, left, right);\r\n                        break;\r\n                    case 3 /* I64 */:\r\n                    case 8 /* U64 */:\r\n                        expr = this.module.createBinary(module_1.BinaryOp.NeI64, left, right);\r\n                        break;\r\n                    case 11 /* F32 */:\r\n                        expr = this.module.createBinary(module_1.BinaryOp.NeF32, left, right);\r\n                        break;\r\n                    case 12 /* F64 */:\r\n                        expr = this.module.createBinary(module_1.BinaryOp.NeF64, left, right);\r\n                        break;\r\n                    default:\r\n                        this.error(diagnostics_1.DiagnosticCode.Operation_not_supported, expression.range);\r\n                        throw new Error(\"concrete type expected\");\r\n                }\r\n                this.currentType = types_1.Type.bool;\r\n                break;\r\n            case tokenizer_1.Token.EQUALS:\r\n                return this.compileAssignment(expression.left, expression.right, contextualType);\r\n            case tokenizer_1.Token.PLUS_EQUALS:\r\n                compound = true;\r\n            case tokenizer_1.Token.PLUS:// retains low bits of small integers\r\n                left = this.compileExpression(expression.left, contextualType == types_1.Type.void ? types_1.Type.i32 : contextualType, 0 /* NONE */, false);\r\n                right = this.compileExpression(expression.right, this.currentType, 1 /* IMPLICIT */, false);\r\n                switch (this.currentType.kind) {\r\n                    case 0 /* I8 */:\r\n                    case 1 /* I16 */:\r\n                    case 5 /* U8 */:\r\n                    case 6 /* U16 */:\r\n                    case 10 /* BOOL */:\r\n                        possiblyOverflows = true;\r\n                    case 2 /* I32 */:\r\n                    case 7 /* U32 */:\r\n                        expr = this.module.createBinary(module_1.BinaryOp.AddI32, left, right);\r\n                        break;\r\n                    case 9 /* USIZE */:\r\n                    // TODO: check operator overload\r\n                    case 4 /* ISIZE */:\r\n                        expr = this.module.createBinary(this.options.target == Target.WASM64 ? module_1.BinaryOp.AddI64 : module_1.BinaryOp.AddI32, left, right);\r\n                        break;\r\n                    case 3 /* I64 */:\r\n                    case 8 /* U64 */:\r\n                        expr = this.module.createBinary(module_1.BinaryOp.AddI64, left, right);\r\n                        break;\r\n                    case 11 /* F32 */:\r\n                        expr = this.module.createBinary(module_1.BinaryOp.AddF32, left, right);\r\n                        break;\r\n                    case 12 /* F64 */:\r\n                        expr = this.module.createBinary(module_1.BinaryOp.AddF64, left, right);\r\n                        break;\r\n                    default:\r\n                        throw new Error(\"concrete type expected\");\r\n                }\r\n                break;\r\n            case tokenizer_1.Token.MINUS_EQUALS:\r\n                compound = true;\r\n            case tokenizer_1.Token.MINUS:// retains low bits of small integers\r\n                left = this.compileExpression(expression.left, contextualType == types_1.Type.void ? types_1.Type.i32 : contextualType, 0 /* NONE */, false);\r\n                right = this.compileExpression(expression.right, this.currentType, 1 /* IMPLICIT */, false);\r\n                switch (this.currentType.kind) {\r\n                    case 0 /* I8 */:\r\n                    case 1 /* I16 */:\r\n                    case 5 /* U8 */:\r\n                    case 6 /* U16 */:\r\n                    case 10 /* BOOL */:\r\n                        possiblyOverflows = true;\r\n                    case 2 /* I32 */:\r\n                    case 7 /* U32 */:\r\n                        expr = this.module.createBinary(module_1.BinaryOp.SubI32, left, right);\r\n                        break;\r\n                    case 9 /* USIZE */:\r\n                    // TODO: check operator overload\r\n                    case 4 /* ISIZE */:\r\n                        expr = this.module.createBinary(this.options.target == Target.WASM64 ? module_1.BinaryOp.SubI64 : module_1.BinaryOp.SubI32, left, right);\r\n                        break;\r\n                    case 3 /* I64 */:\r\n                    case 8 /* U64 */:\r\n                        expr = this.module.createBinary(module_1.BinaryOp.SubI64, left, right);\r\n                        break;\r\n                    case 11 /* F32 */:\r\n                        expr = this.module.createBinary(module_1.BinaryOp.SubF32, left, right);\r\n                        break;\r\n                    case 12 /* F64 */:\r\n                        expr = this.module.createBinary(module_1.BinaryOp.SubF64, left, right);\r\n                        break;\r\n                    default:\r\n                        this.error(diagnostics_1.DiagnosticCode.Operation_not_supported, expression.range);\r\n                        throw new Error(\"concrete type expected\");\r\n                }\r\n                break;\r\n            case tokenizer_1.Token.ASTERISK_EQUALS:\r\n                compound = true;\r\n            case tokenizer_1.Token.ASTERISK:// retains low bits of small integers\r\n                left = this.compileExpression(expression.left, contextualType == types_1.Type.void ? types_1.Type.i32 : contextualType, 0 /* NONE */, false);\r\n                right = this.compileExpression(expression.right, this.currentType, 1 /* IMPLICIT */, false);\r\n                switch (this.currentType.kind) {\r\n                    case 0 /* I8 */:\r\n                    case 1 /* I16 */:\r\n                    case 5 /* U8 */:\r\n                    case 6 /* U16 */:\r\n                    case 10 /* BOOL */:\r\n                        possiblyOverflows = true;\r\n                    // fall-through\r\n                    case 2 /* I32 */:\r\n                    case 7 /* U32 */:\r\n                        expr = this.module.createBinary(module_1.BinaryOp.MulI32, left, right);\r\n                        break;\r\n                    case 9 /* USIZE */:\r\n                    // TODO: check operator overload\r\n                    case 4 /* ISIZE */:\r\n                        expr = this.module.createBinary(this.options.target == Target.WASM64 ? module_1.BinaryOp.MulI64 : module_1.BinaryOp.MulI32, left, right);\r\n                        break;\r\n                    case 3 /* I64 */:\r\n                    case 8 /* U64 */:\r\n                        expr = this.module.createBinary(module_1.BinaryOp.MulI64, left, right);\r\n                        break;\r\n                    case 11 /* F32 */:\r\n                        expr = this.module.createBinary(module_1.BinaryOp.MulF32, left, right);\r\n                        break;\r\n                    case 12 /* F64 */:\r\n                        expr = this.module.createBinary(module_1.BinaryOp.MulF64, left, right);\r\n                        break;\r\n                    default:\r\n                        this.error(diagnostics_1.DiagnosticCode.Operation_not_supported, expression.range);\r\n                        throw new Error(\"concrete type expected\");\r\n                }\r\n                break;\r\n            case tokenizer_1.Token.SLASH_EQUALS:\r\n                compound = true;\r\n            case tokenizer_1.Token.SLASH:// TODO: when can division remain unwrapped? does it overflow?\r\n                left = this.compileExpression(expression.left, contextualType == types_1.Type.void ? types_1.Type.i32 : contextualType, 0 /* NONE */);\r\n                right = this.compileExpression(expression.right, this.currentType, 1 /* IMPLICIT */);\r\n                switch (this.currentType.kind) {\r\n                    case 0 /* I8 */:\r\n                    case 1 /* I16 */:\r\n                        possiblyOverflows = true;\r\n                    case 2 /* I32 */:\r\n                        expr = this.module.createBinary(module_1.BinaryOp.DivI32, left, right);\r\n                        break;\r\n                    case 4 /* ISIZE */:\r\n                        expr = this.module.createBinary(this.options.target == Target.WASM64 ? module_1.BinaryOp.DivI64 : module_1.BinaryOp.DivI32, left, right);\r\n                        break;\r\n                    case 3 /* I64 */:\r\n                        expr = this.module.createBinary(module_1.BinaryOp.DivI64, left, right);\r\n                        break;\r\n                    case 5 /* U8 */:\r\n                    case 6 /* U16 */:\r\n                    case 10 /* BOOL */:\r\n                        possiblyOverflows = true;\r\n                    case 7 /* U32 */:\r\n                        expr = this.module.createBinary(module_1.BinaryOp.DivU32, left, right);\r\n                        break;\r\n                    case 9 /* USIZE */:\r\n                        // TODO: check operator overload\r\n                        expr = this.module.createBinary(this.options.target == Target.WASM64 ? module_1.BinaryOp.DivU64 : module_1.BinaryOp.DivU32, left, right);\r\n                        break;\r\n                    case 8 /* U64 */:\r\n                        expr = this.module.createBinary(module_1.BinaryOp.DivU64, left, right);\r\n                        break;\r\n                    case 11 /* F32 */:\r\n                        expr = this.module.createBinary(module_1.BinaryOp.DivF32, left, right);\r\n                        break;\r\n                    case 12 /* F64 */:\r\n                        expr = this.module.createBinary(module_1.BinaryOp.DivF64, left, right);\r\n                        break;\r\n                    default:\r\n                        this.error(diagnostics_1.DiagnosticCode.Operation_not_supported, expression.range);\r\n                        throw new Error(\"concrete type expected\");\r\n                }\r\n                break;\r\n            case tokenizer_1.Token.PERCENT_EQUALS:\r\n                compound = true;\r\n            case tokenizer_1.Token.PERCENT:// TODO: when can remainder remain unwrapped? may it overflow?\r\n                left = this.compileExpression(expression.left, contextualType == types_1.Type.void ? types_1.Type.i32 : contextualType, 0 /* NONE */);\r\n                right = this.compileExpression(expression.right, this.currentType, 1 /* IMPLICIT */);\r\n                switch (this.currentType.kind) {\r\n                    case 0 /* I8 */:\r\n                    case 1 /* I16 */:\r\n                    case 2 /* I32 */:\r\n                        expr = this.module.createBinary(module_1.BinaryOp.RemI32, left, right);\r\n                        break;\r\n                    case 4 /* ISIZE */:\r\n                        expr = this.module.createBinary(this.options.target == Target.WASM64 ? module_1.BinaryOp.RemI64 : module_1.BinaryOp.RemI32, left, right);\r\n                        break;\r\n                    case 3 /* I64 */:\r\n                        expr = this.module.createBinary(module_1.BinaryOp.RemI64, left, right);\r\n                        break;\r\n                    case 5 /* U8 */:\r\n                    case 6 /* U16 */:\r\n                    case 7 /* U32 */:\r\n                    case 10 /* BOOL */:\r\n                        expr = this.module.createBinary(module_1.BinaryOp.RemU32, left, right);\r\n                        break;\r\n                    case 9 /* USIZE */:\r\n                        // TODO: check operator overload\r\n                        expr = this.module.createBinary(this.options.target == Target.WASM64 ? module_1.BinaryOp.RemU64 : module_1.BinaryOp.RemU32, left, right);\r\n                        break;\r\n                    case 8 /* U64 */:\r\n                        expr = this.module.createBinary(module_1.BinaryOp.RemU64, left, right);\r\n                        break;\r\n                    case 11 /* F32 */:\r\n                    case 12 /* F64 */:\r\n                        // TODO: internal fmod, possibly simply imported from JS\r\n                        this.error(diagnostics_1.DiagnosticCode.Operation_not_supported, expression.range);\r\n                        expr = this.module.createUnreachable();\r\n                        break;\r\n                    default:\r\n                        this.error(diagnostics_1.DiagnosticCode.Operation_not_supported, expression.range);\r\n                        throw new Error(\"concrete type expected\");\r\n                }\r\n                break;\r\n            case tokenizer_1.Token.LESSTHAN_LESSTHAN_EQUALS:\r\n                compound = true;\r\n            case tokenizer_1.Token.LESSTHAN_LESSTHAN:// retains low bits of small integers\r\n                left = this.compileExpression(expression.left, contextualType == types_1.Type.void ? types_1.Type.i32 : contextualType.is(8 /* FLOAT */) ? types_1.Type.i64 : contextualType, 0 /* NONE */, false);\r\n                right = this.compileExpression(expression.right, this.currentType, 1 /* IMPLICIT */, false);\r\n                switch (this.currentType.kind) {\r\n                    case 0 /* I8 */:\r\n                    case 1 /* I16 */:\r\n                    case 5 /* U8 */:\r\n                    case 6 /* U16 */:\r\n                    case 10 /* BOOL */:\r\n                        possiblyOverflows = true;\r\n                    default:\r\n                        expr = this.module.createBinary(module_1.BinaryOp.ShlI32, left, right);\r\n                        break;\r\n                    case 3 /* I64 */:\r\n                    case 8 /* U64 */:\r\n                        expr = this.module.createBinary(module_1.BinaryOp.ShlI64, left, right);\r\n                        break;\r\n                    case 9 /* USIZE */:\r\n                    // TODO: check operator overload\r\n                    case 4 /* ISIZE */:\r\n                        expr = this.module.createBinary(this.options.target == Target.WASM64 ? module_1.BinaryOp.ShlI64 : module_1.BinaryOp.ShlI32, left, right);\r\n                        break;\r\n                    case 13 /* VOID */:\r\n                        this.error(diagnostics_1.DiagnosticCode.Operation_not_supported, expression.range);\r\n                        throw new Error(\"concrete type expected\");\r\n                }\r\n                break;\r\n            case tokenizer_1.Token.GREATERTHAN_GREATERTHAN_EQUALS:\r\n                compound = true;\r\n            case tokenizer_1.Token.GREATERTHAN_GREATERTHAN:// must wrap small integers\r\n                left = this.compileExpression(expression.left, contextualType == types_1.Type.void ? types_1.Type.i32 : contextualType.is(8 /* FLOAT */) ? types_1.Type.i64 : contextualType, 0 /* NONE */);\r\n                right = this.compileExpression(expression.right, this.currentType, 1 /* IMPLICIT */);\r\n                switch (this.currentType.kind) {\r\n                    default:\r\n                        // assumes signed shr on signed small integers does not overflow\r\n                        expr = this.module.createBinary(module_1.BinaryOp.ShrI32, left, right);\r\n                        break;\r\n                    case 3 /* I64 */:\r\n                        expr = this.module.createBinary(module_1.BinaryOp.ShrI64, left, right);\r\n                        break;\r\n                    case 4 /* ISIZE */:\r\n                        expr = this.module.createBinary(this.options.target == Target.WASM64 ? module_1.BinaryOp.ShrI64 : module_1.BinaryOp.ShrI32, left, right);\r\n                        break;\r\n                    case 5 /* U8 */:\r\n                    case 6 /* U16 */:\r\n                    case 10 /* BOOL */:\r\n                    // assumes unsigned shr on unsigned small integers does not overflow\r\n                    case 7 /* U32 */:\r\n                        expr = this.module.createBinary(module_1.BinaryOp.ShrU32, left, right);\r\n                        break;\r\n                    case 8 /* U64 */:\r\n                        expr = this.module.createBinary(module_1.BinaryOp.ShrU64, left, right);\r\n                        break;\r\n                    case 9 /* USIZE */:\r\n                        // TODO: check operator overload\r\n                        expr = this.module.createBinary(this.options.target == Target.WASM64 ? module_1.BinaryOp.ShrU64 : module_1.BinaryOp.ShrU32, left, right);\r\n                        break;\r\n                    case 13 /* VOID */:\r\n                        this.error(diagnostics_1.DiagnosticCode.Operation_not_supported, expression.range);\r\n                        throw new Error(\"concrete type expected\");\r\n                }\r\n                break;\r\n            case tokenizer_1.Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\r\n                compound = true;\r\n            case tokenizer_1.Token.GREATERTHAN_GREATERTHAN_GREATERTHAN:// modifies low bits of small integers if unsigned\r\n                left = this.compileExpression(expression.left, contextualType == types_1.Type.void ? types_1.Type.i32 : contextualType == types_1.Type.void ? types_1.Type.u64 : contextualType, 0 /* NONE */);\r\n                right = this.compileExpression(expression.right, this.currentType, 1 /* IMPLICIT */);\r\n                switch (this.currentType.kind) {\r\n                    case 0 /* I8 */:\r\n                    case 1 /* I16 */:\r\n                        possiblyOverflows = true;\r\n                    // fall-through\r\n                    default:\r\n                        // assumes that unsigned shr on unsigned small integers does not overflow\r\n                        expr = this.module.createBinary(module_1.BinaryOp.ShrU32, left, right);\r\n                        break;\r\n                    case 3 /* I64 */:\r\n                    case 8 /* U64 */:\r\n                        expr = this.module.createBinary(module_1.BinaryOp.ShrU64, left, right);\r\n                        break;\r\n                    case 9 /* USIZE */:\r\n                    // TODO: check operator overload\r\n                    case 4 /* ISIZE */:\r\n                        expr = this.module.createBinary(this.options.target == Target.WASM64 ? module_1.BinaryOp.ShrU64 : module_1.BinaryOp.ShrU32, left, right);\r\n                        break;\r\n                    case 13 /* VOID */:\r\n                        this.error(diagnostics_1.DiagnosticCode.Operation_not_supported, expression.range);\r\n                        throw new Error(\"concrete type expected\");\r\n                }\r\n                break;\r\n            case tokenizer_1.Token.AMPERSAND_EQUALS:\r\n                compound = true;\r\n            case tokenizer_1.Token.AMPERSAND:// retains low bits of small integers\r\n                left = this.compileExpression(expression.left, contextualType == types_1.Type.void ? types_1.Type.i32 : contextualType.is(8 /* FLOAT */) ? types_1.Type.i64 : contextualType, 0 /* NONE */, false);\r\n                right = this.compileExpression(expression.right, this.currentType, 1 /* IMPLICIT */, false);\r\n                switch (this.currentType.kind) {\r\n                    case 0 /* I8 */:\r\n                    case 1 /* I16 */:\r\n                    case 5 /* U8 */:\r\n                    case 6 /* U16 */:\r\n                    case 10 /* BOOL */:\r\n                        possiblyOverflows = true; // if left or right already did\r\n                    default:\r\n                        expr = this.module.createBinary(module_1.BinaryOp.AndI32, left, right);\r\n                        break;\r\n                    case 3 /* I64 */:\r\n                    case 8 /* U64 */:\r\n                        expr = this.module.createBinary(module_1.BinaryOp.AndI64, left, right);\r\n                        break;\r\n                    case 9 /* USIZE */:\r\n                    // TODO: check operator overload\r\n                    case 4 /* ISIZE */:\r\n                        expr = this.module.createBinary(this.options.target == Target.WASM64 ? module_1.BinaryOp.AndI64 : module_1.BinaryOp.AndI32, left, right);\r\n                        break;\r\n                    case 13 /* VOID */:\r\n                        this.error(diagnostics_1.DiagnosticCode.Operation_not_supported, expression.range);\r\n                        throw new Error(\"concrete type expected\");\r\n                }\r\n                break;\r\n            case tokenizer_1.Token.BAR_EQUALS:\r\n                compound = true;\r\n            case tokenizer_1.Token.BAR:// retains low bits of small integers\r\n                left = this.compileExpression(expression.left, contextualType == types_1.Type.void ? types_1.Type.i32 : contextualType.is(8 /* FLOAT */) ? types_1.Type.i64 : contextualType, 0 /* NONE */, false);\r\n                right = this.compileExpression(expression.right, this.currentType, 1 /* IMPLICIT */, false);\r\n                switch (this.currentType.kind) {\r\n                    case 0 /* I8 */:\r\n                    case 1 /* I16 */:\r\n                    case 5 /* U8 */:\r\n                    case 6 /* U16 */:\r\n                    case 10 /* BOOL */:\r\n                        possiblyOverflows = true; // if left or right already did\r\n                    default:\r\n                        expr = this.module.createBinary(module_1.BinaryOp.OrI32, left, right);\r\n                        break;\r\n                    case 3 /* I64 */:\r\n                    case 8 /* U64 */:\r\n                        expr = this.module.createBinary(module_1.BinaryOp.OrI64, left, right);\r\n                        break;\r\n                    case 9 /* USIZE */:\r\n                    // TODO: check operator overload\r\n                    case 4 /* ISIZE */:\r\n                        expr = this.module.createBinary(this.options.target == Target.WASM64 ? module_1.BinaryOp.OrI64 : module_1.BinaryOp.OrI32, left, right);\r\n                        break;\r\n                    case 13 /* VOID */:\r\n                        this.error(diagnostics_1.DiagnosticCode.Operation_not_supported, expression.range);\r\n                        throw new Error(\"concrete type expected\");\r\n                }\r\n                break;\r\n            case tokenizer_1.Token.CARET_EQUALS:\r\n                compound = true;\r\n            case tokenizer_1.Token.CARET:// retains low bits of small integers\r\n                left = this.compileExpression(expression.left, contextualType == types_1.Type.void ? types_1.Type.i32 : contextualType.is(8 /* FLOAT */) ? types_1.Type.i64 : contextualType, 0 /* NONE */, false);\r\n                right = this.compileExpression(expression.right, this.currentType, 1 /* IMPLICIT */, false);\r\n                switch (this.currentType.kind) {\r\n                    case 0 /* I8 */:\r\n                    case 1 /* I16 */:\r\n                    case 5 /* U8 */:\r\n                    case 6 /* U16 */:\r\n                    case 10 /* BOOL */:\r\n                        possiblyOverflows = true; // if left or right already did\r\n                    default:\r\n                        expr = this.module.createBinary(module_1.BinaryOp.XorI32, left, right);\r\n                        break;\r\n                    case 3 /* I64 */:\r\n                    case 8 /* U64 */:\r\n                        expr = this.module.createBinary(module_1.BinaryOp.XorI64, left, right);\r\n                        break;\r\n                    case 9 /* USIZE */:\r\n                    // TODO: check operator overload\r\n                    case 4 /* ISIZE */:\r\n                        expr = this.module.createBinary(this.options.target == Target.WASM64 ? module_1.BinaryOp.XorI64 : module_1.BinaryOp.XorI32, left, right);\r\n                        break;\r\n                    case 13 /* VOID */:\r\n                        this.error(diagnostics_1.DiagnosticCode.Operation_not_supported, expression.range);\r\n                        throw new Error(\"concrete type expected\");\r\n                }\r\n                break;\r\n            // logical (no overloading)\r\n            case tokenizer_1.Token.AMPERSAND_AMPERSAND:// left && right\r\n                left = this.compileExpression(expression.left, contextualType == types_1.Type.void ? types_1.Type.i32 : contextualType, 0 /* NONE */);\r\n                right = this.compileExpression(expression.right, this.currentType, 1 /* IMPLICIT */, false);\r\n                // clone left if free of side effects\r\n                expr = this.module.cloneExpression(left, true, 0);\r\n                // if not possible, tee left to a temp. local\r\n                if (!expr) {\r\n                    tempLocal = this.currentFunction.getAndFreeTempLocal(this.currentType);\r\n                    left = this.module.createTeeLocal(tempLocal.index, left);\r\n                }\r\n                possiblyOverflows = this.currentType.is(32 /* SMALL */ | 4 /* INTEGER */);\r\n                condition = makeIsTrueish(left, this.currentType, this.module);\r\n                // simplify when cloning left without side effects was successful\r\n                if (expr)\r\n                    expr = this.module.createIf(condition, // left\r\n                    right, // ? right\r\n                    expr // : cloned left\r\n                    );\r\n                else {\r\n                    expr = this.module.createIf(condition, right, this.module.createGetLocal(assert(tempLocal, \"tempLocal must be set\").index, this.currentType.toNativeType()));\r\n                }\r\n                break;\r\n            case tokenizer_1.Token.BAR_BAR:// left || right\r\n                left = this.compileExpression(expression.left, contextualType == types_1.Type.void ? types_1.Type.i32 : contextualType, 0 /* NONE */);\r\n                right = this.compileExpression(expression.right, this.currentType, 1 /* IMPLICIT */, false);\r\n                // clone left if free of side effects\r\n                expr = this.module.cloneExpression(left, true, 0);\r\n                // if not possible, tee left to a temp. local\r\n                if (!expr) {\r\n                    tempLocal = this.currentFunction.getAndFreeTempLocal(this.currentType);\r\n                    left = this.module.createTeeLocal(tempLocal.index, left);\r\n                }\r\n                possiblyOverflows = this.currentType.is(32 /* SMALL */ | 4 /* INTEGER */); // if right already did\r\n                condition = makeIsTrueish(left, this.currentType, this.module);\r\n                // simplify when cloning left without side effects was successful\r\n                if (expr)\r\n                    expr = this.module.createIf(condition, // left\r\n                    expr, // ? cloned left\r\n                    right // : right\r\n                    );\r\n                else {\r\n                    expr = this.module.createIf(condition, this.module.createGetLocal(assert(tempLocal, \"tempLocal must be set\").index, this.currentType.toNativeType()), right);\r\n                }\r\n                break;\r\n            default:\r\n                this.error(diagnostics_1.DiagnosticCode.Operation_not_supported, expression.range);\r\n                throw new Error(\"not implemented\");\r\n        }\r\n        if (possiblyOverflows && wrapSmallIntegers) {\r\n            assert(this.currentType.is(32 /* SMALL */ | 4 /* INTEGER */)), \"small integer type expected\";\r\n            expr = makeSmallIntegerWrap(expr, this.currentType, this.module);\r\n        }\r\n        return compound\r\n            ? this.compileAssignmentWithValue(expression.left, expr, contextualType != types_1.Type.void)\r\n            : expr;\r\n    };\r\n    Compiler.prototype.compileAssignment = function (expression, valueExpression, contextualType) {\r\n        var resolved = this.program.resolveExpression(expression, this.currentFunction); // reports\r\n        if (!resolved)\r\n            return this.module.createUnreachable();\r\n        // to compile just the value, we need to know the target's type\r\n        var element = resolved.element;\r\n        var elementType;\r\n        switch (element.kind) {\r\n            case program_1.ElementKind.GLOBAL:\r\n                if (!this.compileGlobal(element))\r\n                    return this.module.createUnreachable();\r\n                assert(element.type != types_1.Type.void, \"concrete type expected\");\r\n            // fall-through\r\n            case program_1.ElementKind.LOCAL:\r\n            case program_1.ElementKind.FIELD:\r\n                elementType = element.type;\r\n                break;\r\n            case program_1.ElementKind.PROPERTY:\r\n                var setterPrototype = element.setterPrototype;\r\n                if (setterPrototype) {\r\n                    var setterInstance = setterPrototype.resolve(); // reports\r\n                    if (!setterInstance)\r\n                        return this.module.createUnreachable();\r\n                    elementType = setterInstance.parameters[0].type;\r\n                    break;\r\n                }\r\n                this.error(diagnostics_1.DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property, expression.range, element.internalName);\r\n                return this.module.createUnreachable();\r\n            case program_1.ElementKind.FUNCTION_PROTOTYPE:\r\n                if (expression.kind == ast_1.NodeKind.ELEMENTACCESS) {\r\n                    assert(resolved.target && resolved.target.kind == program_1.ElementKind.CLASS && element.simpleName == resolved.target.prototype.fnIndexedGet);\r\n                    var resolvedIndexedSet = element.resolve(null);\r\n                    if (resolvedIndexedSet) {\r\n                        elementType = resolvedIndexedSet.returnType;\r\n                        break;\r\n                    }\r\n                }\r\n            // fall-through\r\n            default:\r\n                this.error(diagnostics_1.DiagnosticCode.Operation_not_supported, expression.range);\r\n                return this.module.createUnreachable();\r\n        }\r\n        // now compile the value and do the assignment\r\n        this.currentType = elementType;\r\n        return this.compileAssignmentWithValue(expression, this.compileExpression(valueExpression, elementType), contextualType != types_1.Type.void);\r\n    };\r\n    Compiler.prototype.compileAssignmentWithValue = function (expression, valueWithCorrectType, tee) {\r\n        if (tee === void 0) { tee = false; }\r\n        var resolved = this.program.resolveExpression(expression, this.currentFunction); // reports\r\n        if (!resolved)\r\n            return this.module.createUnreachable();\r\n        var element = resolved.element;\r\n        var tempLocal;\r\n        var targetExpr;\r\n        switch (element.kind) {\r\n            case program_1.ElementKind.LOCAL:\r\n                this.currentType = tee ? element.type : types_1.Type.void;\r\n                if (element.is(program_1.ElementFlags.CONSTANT)) {\r\n                    this.error(diagnostics_1.DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property, expression.range, element.internalName);\r\n                    return this.module.createUnreachable();\r\n                }\r\n                return tee\r\n                    ? this.module.createTeeLocal(element.index, valueWithCorrectType)\r\n                    : this.module.createSetLocal(element.index, valueWithCorrectType);\r\n            case program_1.ElementKind.GLOBAL:\r\n                if (!this.compileGlobal(element))\r\n                    return this.module.createUnreachable();\r\n                assert(element.type != types_1.Type.void, \"concrete type expected\");\r\n                this.currentType = tee ? element.type : types_1.Type.void;\r\n                if (element.is(program_1.ElementFlags.CONSTANT)) {\r\n                    this.error(diagnostics_1.DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property, expression.range, element.internalName);\r\n                    return this.module.createUnreachable();\r\n                }\r\n                if (!tee)\r\n                    return this.module.createSetGlobal(element.internalName, valueWithCorrectType);\r\n                var globalNativeType = element.type.toNativeType();\r\n                return this.module.createBlock(null, [\r\n                    this.module.createSetGlobal(element.internalName, valueWithCorrectType),\r\n                    this.module.createGetGlobal(element.internalName, globalNativeType)\r\n                ], globalNativeType);\r\n            case program_1.ElementKind.FIELD:\r\n                if (element.prototype.isReadonly) {\r\n                    this.error(diagnostics_1.DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property, expression.range, element.internalName);\r\n                    return this.module.createUnreachable();\r\n                }\r\n                assert(resolved.targetExpression != null, \"target expression expected\");\r\n                targetExpr = this.compileExpression(resolved.targetExpression, this.options.target == Target.WASM64 ? types_1.Type.usize64 : types_1.Type.usize32, 0 /* NONE */);\r\n                assert(this.currentType.classType, \"class type expected\");\r\n                this.currentType = tee ? element.type : types_1.Type.void;\r\n                var elementNativeType = element.type.toNativeType();\r\n                if (!tee)\r\n                    return this.module.createStore(element.type.size >> 3, targetExpr, valueWithCorrectType, elementNativeType, element.memoryOffset);\r\n                tempLocal = this.currentFunction.getAndFreeTempLocal(element.type);\r\n                return this.module.createBlock(null, [\r\n                    this.module.createSetLocal(tempLocal.index, valueWithCorrectType),\r\n                    this.module.createStore(element.type.size >> 3, targetExpr, this.module.createGetLocal(tempLocal.index, elementNativeType), elementNativeType, element.memoryOffset),\r\n                    this.module.createGetLocal(tempLocal.index, elementNativeType)\r\n                ], elementNativeType);\r\n            case program_1.ElementKind.PROPERTY:\r\n                var setterPrototype = element.setterPrototype;\r\n                if (setterPrototype) {\r\n                    var setterInstance = setterPrototype.resolve(); // reports\r\n                    if (setterInstance) {\r\n                        assert(setterInstance.parameters.length == 1);\r\n                        if (!tee) {\r\n                            if (setterInstance.is(program_1.ElementFlags.INSTANCE)) {\r\n                                assert(resolved.targetExpression != null);\r\n                                targetExpr = this.compileExpression(resolved.targetExpression, this.options.target == Target.WASM64 ? types_1.Type.usize64 : types_1.Type.usize32, 0 /* NONE */);\r\n                                assert(this.currentType.classType);\r\n                                this.currentType = types_1.Type.void;\r\n                                return this.makeCall(setterInstance, [targetExpr, valueWithCorrectType]);\r\n                            }\r\n                            else {\r\n                                this.currentType = types_1.Type.void;\r\n                                return this.makeCall(setterInstance, [valueWithCorrectType]);\r\n                            }\r\n                        }\r\n                        var getterPrototype = element.getterPrototype;\r\n                        assert(getterPrototype != null);\r\n                        var getterInstance = getterPrototype.resolve(); // reports\r\n                        if (getterInstance) {\r\n                            assert(getterInstance.parameters.length == 0);\r\n                            if (setterInstance.is(program_1.ElementFlags.INSTANCE)) {\r\n                                assert(resolved.targetExpression != null);\r\n                                targetExpr = this.compileExpression(resolved.targetExpression, this.options.target == Target.WASM64 ? types_1.Type.usize64 : types_1.Type.usize32, 0 /* NONE */);\r\n                                assert(this.currentType.classType);\r\n                                tempLocal = this.currentFunction.getAndFreeTempLocal(getterInstance.returnType);\r\n                                return this.module.createBlock(null, [\r\n                                    this.makeCall(setterInstance, [this.module.createTeeLocal(tempLocal.index, targetExpr), valueWithCorrectType]),\r\n                                    this.makeCall(getterInstance, [this.module.createGetLocal(tempLocal.index, tempLocal.type.toNativeType())])\r\n                                ], (this.currentType = getterInstance.returnType).toNativeType());\r\n                            }\r\n                            else\r\n                                return this.module.createBlock(null, [\r\n                                    this.makeCall(setterInstance, [valueWithCorrectType]),\r\n                                    this.makeCall(getterInstance)\r\n                                ], (this.currentType = getterInstance.returnType).toNativeType());\r\n                        }\r\n                    }\r\n                }\r\n                else\r\n                    this.error(diagnostics_1.DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property, expression.range, element.internalName);\r\n                return this.module.createUnreachable();\r\n            case program_1.ElementKind.FUNCTION_PROTOTYPE:\r\n                if (expression.kind == ast_1.NodeKind.ELEMENTACCESS) {\r\n                    assert(resolved.target && resolved.target.kind == program_1.ElementKind.CLASS);\r\n                    var resolvedIndexedGet = element.resolve();\r\n                    if (!resolvedIndexedGet)\r\n                        return this.module.createUnreachable();\r\n                    var indexedSetName = resolved.target.prototype.fnIndexedSet;\r\n                    var indexedSet;\r\n                    if (indexedSetName != null && resolved.target.members && (indexedSet = resolved.target.members.get(indexedSetName)) && indexedSet.kind == program_1.ElementKind.FUNCTION_PROTOTYPE) {\r\n                        var resolvedIndexedSet = indexedSet.resolve();\r\n                        if (!resolvedIndexedSet)\r\n                            return this.module.createUnreachable();\r\n                        targetExpr = this.compileExpression(resolved.targetExpression, this.options.target == Target.WASM64 ? types_1.Type.usize64 : types_1.Type.usize32, 0 /* NONE */);\r\n                        assert(this.currentType.classType);\r\n                        var elementExpr = this.compileExpression(expression.elementExpression, types_1.Type.i32);\r\n                        if (!tee) {\r\n                            this.currentType = resolvedIndexedSet.returnType;\r\n                            return this.makeCall(resolvedIndexedSet, [targetExpr, elementExpr, valueWithCorrectType]);\r\n                        }\r\n                        this.currentType = resolvedIndexedGet.returnType;\r\n                        tempLocal = this.currentFunction.getAndFreeTempLocal(this.currentType);\r\n                        return this.module.createBlock(null, [\r\n                            this.makeCall(resolvedIndexedSet, [targetExpr, elementExpr, this.module.createTeeLocal(tempLocal.index, valueWithCorrectType)]),\r\n                            this.module.createGetLocal(tempLocal.index, tempLocal.type.toNativeType()) // TODO: could be different from an actual __get (needs 2 temp locals)\r\n                        ], this.currentType.toNativeType());\r\n                    }\r\n                    else {\r\n                        this.error(diagnostics_1.DiagnosticCode.Index_signature_in_type_0_only_permits_reading, expression.range, resolved.target.internalName);\r\n                        return this.module.createUnreachable();\r\n                    }\r\n                }\r\n        }\r\n        this.error(diagnostics_1.DiagnosticCode.Operation_not_supported, expression.range);\r\n        return this.module.createUnreachable();\r\n    };\r\n    Compiler.prototype.compileCallExpression = function (expression, contextualType) {\r\n        var resolved = this.program.resolveExpression(expression.expression, this.currentFunction); // reports\r\n        if (!resolved)\r\n            return this.module.createUnreachable();\r\n        var element = resolved.element;\r\n        if (element.kind != program_1.ElementKind.FUNCTION_PROTOTYPE) {\r\n            this.error(diagnostics_1.DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures, expression.range, element.internalName);\r\n            return this.module.createUnreachable();\r\n        }\r\n        var functionPrototype = element;\r\n        var functionInstance = null;\r\n        // TODO: generalize?\r\n        if (functionPrototype.is(program_1.ElementFlags.BUILTIN)) {\r\n            var resolvedTypeArguments = null;\r\n            if (expression.typeArguments) {\r\n                var k = expression.typeArguments.length;\r\n                resolvedTypeArguments = new Array(k);\r\n                for (var i = 0; i < k; ++i) {\r\n                    var resolvedType = this.program.resolveType(expression.typeArguments[i], this.currentFunction.contextualTypeArguments, true); // reports\r\n                    if (!resolvedType)\r\n                        return this.module.createUnreachable();\r\n                    resolvedTypeArguments[i] = resolvedType;\r\n                }\r\n            }\r\n            var expr = builtins_1.compileCall(this, functionPrototype, resolvedTypeArguments, expression.arguments, contextualType, expression);\r\n            if (!expr) {\r\n                this.error(diagnostics_1.DiagnosticCode.Operation_not_supported, expression.range);\r\n                return this.module.createUnreachable();\r\n            }\r\n            return expr;\r\n        }\r\n        // TODO: infer type arguments from parameter types if omitted\r\n        var functionInstance = functionPrototype.resolveInclTypeArguments(expression.typeArguments, this.currentFunction.contextualTypeArguments, expression); // reports\r\n        if (!functionInstance)\r\n            return this.module.createUnreachable();\r\n        // TODO: generalize? (see above)\r\n        /* if (functionInstance.is(ElementFlags.BUILTIN)) {\r\n          var expr = compileBuiltinCall(this, functionPrototype, functionInstance.typeArguments, expression.arguments, contextualType, expression);\r\n          if (!expr) {\r\n            this.error(DiagnosticCode.Operation_not_supported, expression.range);\r\n            return this.module.createUnreachable();\r\n          }\r\n          return expr;\r\n        } */\r\n        var numArguments = expression.arguments.length;\r\n        var numArgumentsInclThis = functionInstance.instanceMethodOf != null ? numArguments + 1 : numArguments;\r\n        var argumentIndex = 0;\r\n        var args = new Array(numArgumentsInclThis);\r\n        if (functionInstance.instanceMethodOf) {\r\n            assert(resolved.targetExpression != null);\r\n            args[argumentIndex++] = resolved.targetExpression;\r\n        }\r\n        for (i = 0; i < numArguments; ++i)\r\n            args[argumentIndex++] = expression.arguments[i];\r\n        return this.compileCall(functionInstance, args, expression);\r\n    };\r\n    /**\r\n     * Compiles a call to a function. If an instance method, `this` is the first element in\r\n     * `argumentExpressions` or can be specified explicitly as the last argument.\r\n     */\r\n    Compiler.prototype.compileCall = function (functionInstance, argumentExpressions, reportNode, thisArg) {\r\n        if (thisArg === void 0) { thisArg = 0; }\r\n        // validate and compile arguments\r\n        var parameters = functionInstance.parameters;\r\n        var numParameters = parameters.length;\r\n        var numParametersInclThis = functionInstance.instanceMethodOf != null ? numParameters + 1 : numParameters;\r\n        var numArgumentsInclThis = argumentExpressions.length;\r\n        var numArguments = functionInstance.instanceMethodOf != null ? numArgumentsInclThis - 1 : numArgumentsInclThis;\r\n        if (thisArg)\r\n            numArgumentsInclThis++;\r\n        if (numArgumentsInclThis > numParametersInclThis) {\r\n            this.error(diagnostics_1.DiagnosticCode.Expected_0_arguments_but_got_1, reportNode.range, numParameters.toString(10), numArguments.toString(10));\r\n            return this.module.createUnreachable();\r\n        }\r\n        var operands = new Array(numParametersInclThis);\r\n        var operandIndex = 0;\r\n        var argumentIndex = 0;\r\n        if (functionInstance.instanceMethodOf) {\r\n            if (thisArg)\r\n                operands[operandIndex++] = thisArg;\r\n            else\r\n                operands[operandIndex++] = this.compileExpression(argumentExpressions[argumentIndex++], functionInstance.instanceMethodOf.type);\r\n        }\r\n        for (; operandIndex < numParametersInclThis; ++operandIndex) {\r\n            // argument has been provided\r\n            if (numArgumentsInclThis > operandIndex) {\r\n                operands[operandIndex] = this.compileExpression(argumentExpressions[argumentIndex++], parameters[operandIndex + numParameters - numParametersInclThis].type);\r\n                // argument has been omitted\r\n            }\r\n            else {\r\n                var initializer = parameters[operandIndex + numParameters - numParametersInclThis].initializer;\r\n                if (initializer) {\r\n                    operands[operandIndex] = this.compileExpression(initializer, parameters[operandIndex + numParameters - numParametersInclThis].type);\r\n                    // FIXME: here, the initializer is compiled in the caller's scope.\r\n                    // a solution could be to use a stub for each possible overload, calling the\r\n                    // full function with optional arguments being part of the stub's body.\r\n                }\r\n                else {\r\n                    this.error(diagnostics_1.DiagnosticCode.Expected_at_least_0_arguments_but_got_1, reportNode.range, (operandIndex + numParameters - numParametersInclThis).toString(10), numArguments.toString(10));\r\n                    return this.module.createUnreachable();\r\n                }\r\n            }\r\n        }\r\n        this.currentType = functionInstance.returnType;\r\n        return this.makeCall(functionInstance, operands);\r\n    };\r\n    /** Makes a call operation as is. */\r\n    Compiler.prototype.makeCall = function (functionInstance, operands) {\r\n        if (operands === void 0) { operands = null; }\r\n        if (!(functionInstance.is(program_1.ElementFlags.COMPILED) || this.compileFunction(functionInstance)))\r\n            return this.module.createUnreachable();\r\n        // imported function\r\n        if (functionInstance.is(program_1.ElementFlags.DECLARED))\r\n            return this.module.createCallImport(functionInstance.internalName, operands, functionInstance.returnType.toNativeType());\r\n        // internal function\r\n        return this.module.createCall(functionInstance.internalName, operands, functionInstance.returnType.toNativeType());\r\n    };\r\n    Compiler.prototype.compileCommaExpression = function (expression, contextualType) {\r\n        var expressions = expression.expressions;\r\n        var k = expressions.length;\r\n        var exprs = new Array(k--);\r\n        for (var i = 0; i < k; ++i)\r\n            exprs[i] = this.compileExpression(expressions[i], types_1.Type.void); // drop all\r\n        exprs[i] = this.compileExpression(expressions[i], contextualType); // except last\r\n        return this.module.createBlock(null, exprs, this.currentType.toNativeType());\r\n    };\r\n    Compiler.prototype.compileElementAccessExpression = function (expression, contextualType) {\r\n        var resolved = this.program.resolveElementAccess(expression, this.currentFunction); // reports\r\n        if (!resolved)\r\n            return this.module.createUnreachable();\r\n        assert(resolved.element.kind == program_1.ElementKind.FUNCTION_PROTOTYPE && resolved.target && resolved.target.kind == program_1.ElementKind.CLASS);\r\n        var instance = resolved.element.resolve(null, resolved.target.contextualTypeArguments);\r\n        if (!instance)\r\n            return this.module.createUnreachable();\r\n        return this.compileCall(instance, [expression.expression, expression.elementExpression], expression);\r\n    };\r\n    Compiler.prototype.compileIdentifierExpression = function (expression, contextualType) {\r\n        // check special keywords first\r\n        switch (expression.kind) {\r\n            case ast_1.NodeKind.NULL:\r\n                if (this.options.target == Target.WASM64) {\r\n                    if (!contextualType.classType) {\r\n                        assert(contextualType.kind == 9 /* USIZE */);\r\n                        this.currentType = types_1.Type.usize64;\r\n                    }\r\n                    return this.module.createI64(0);\r\n                }\r\n                if (!contextualType.classType) {\r\n                    assert(contextualType.kind == 9 /* USIZE */);\r\n                    this.currentType = types_1.Type.usize32;\r\n                }\r\n                return this.module.createI32(0);\r\n            case ast_1.NodeKind.TRUE:\r\n                this.currentType = types_1.Type.bool;\r\n                return this.module.createI32(1);\r\n            case ast_1.NodeKind.FALSE:\r\n                this.currentType = types_1.Type.bool;\r\n                return this.module.createI32(0);\r\n            case ast_1.NodeKind.THIS:\r\n                if (this.currentFunction.instanceMethodOf) {\r\n                    this.currentType = this.currentFunction.instanceMethodOf.type;\r\n                    return this.module.createGetLocal(0, this.currentType.toNativeType());\r\n                }\r\n                this.error(diagnostics_1.DiagnosticCode._this_cannot_be_referenced_in_current_location, expression.range);\r\n                this.currentType = this.options.target == Target.WASM64 ? types_1.Type.usize64 : types_1.Type.usize32;\r\n                return this.module.createUnreachable();\r\n            case ast_1.NodeKind.SUPER:\r\n                if (this.currentFunction.instanceMethodOf && this.currentFunction.instanceMethodOf.base) {\r\n                    this.currentType = this.currentFunction.instanceMethodOf.base.type;\r\n                    return this.module.createGetLocal(0, this.currentType.toNativeType());\r\n                }\r\n                this.error(diagnostics_1.DiagnosticCode._super_can_only_be_referenced_in_a_derived_class, expression.range);\r\n                this.currentType = this.options.target == Target.WASM64 ? types_1.Type.usize64 : types_1.Type.usize32;\r\n                return this.module.createUnreachable();\r\n        }\r\n        // otherwise resolve\r\n        var resolved = this.program.resolveIdentifier(expression, this.currentFunction, this.currentEnum); // reports\r\n        if (!resolved)\r\n            return this.module.createUnreachable();\r\n        var element = resolved.element;\r\n        switch (element.kind) {\r\n            case program_1.ElementKind.LOCAL:\r\n                if (element.is(program_1.ElementFlags.INLINED))\r\n                    return this.compileInlineConstant(element, contextualType);\r\n                assert(element.index >= 0);\r\n                this.currentType = element.type;\r\n                return this.module.createGetLocal(element.index, this.currentType.toNativeType());\r\n            case program_1.ElementKind.GLOBAL:\r\n                if (element.is(program_1.ElementFlags.BUILTIN))\r\n                    return builtins_1.compileGetConstant(this, element, expression);\r\n                if (!this.compileGlobal(element))\r\n                    return this.module.createUnreachable();\r\n                assert(element.type != types_1.Type.void);\r\n                if (element.is(program_1.ElementFlags.INLINED))\r\n                    return this.compileInlineConstant(element, contextualType);\r\n                this.currentType = element.type;\r\n                return this.module.createGetGlobal(element.internalName, this.currentType.toNativeType());\r\n            case program_1.ElementKind.ENUMVALUE:// here: if referenced from within the same enum\r\n                if (!element.is(program_1.ElementFlags.COMPILED)) {\r\n                    this.error(diagnostics_1.DiagnosticCode.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums, expression.range);\r\n                    this.currentType = types_1.Type.i32;\r\n                    return this.module.createUnreachable();\r\n                }\r\n                this.currentType = types_1.Type.i32;\r\n                if (element.is(program_1.ElementFlags.INLINED))\r\n                    return this.module.createI32(element.constantValue);\r\n                return this.module.createGetGlobal(element.internalName, module_1.NativeType.I32);\r\n        }\r\n        this.error(diagnostics_1.DiagnosticCode.Operation_not_supported, expression.range);\r\n        return this.module.createUnreachable();\r\n    };\r\n    Compiler.prototype.compileLiteralExpression = function (expression, contextualType, implicitNegate) {\r\n        if (implicitNegate === void 0) { implicitNegate = false; }\r\n        switch (expression.literalKind) {\r\n            case 4 /* ARRAY */:\r\n                assert(!implicitNegate);\r\n                var classType = contextualType.classType;\r\n                if (classType && classType == this.program.elements.get(\"Array\") && classType.typeArguments && classType.typeArguments.length == 1)\r\n                    return this.compileStaticArray(classType.typeArguments[0], expression.elementExpressions);\r\n                this.error(diagnostics_1.DiagnosticCode.Operation_not_supported, expression.range);\r\n                return this.module.createUnreachable();\r\n            case 0 /* FLOAT */: {\r\n                var floatValue = expression.value;\r\n                if (implicitNegate)\r\n                    floatValue = -floatValue;\r\n                if (contextualType == types_1.Type.f32)\r\n                    return this.module.createF32(floatValue);\r\n                this.currentType = types_1.Type.f64;\r\n                return this.module.createF64(floatValue);\r\n            }\r\n            case 1 /* INTEGER */:\r\n                var intValue = expression.value;\r\n                if (implicitNegate)\r\n                    intValue = i64_sub(i64_new(0), intValue);\r\n                switch (contextualType.kind) {\r\n                    // compile to contextualType if matching\r\n                    case 0 /* I8 */:\r\n                        if (i64_is_i8(intValue))\r\n                            return this.module.createI32(i64_low(intValue));\r\n                        break;\r\n                    case 1 /* I16 */:\r\n                        if (i64_is_i16(intValue))\r\n                            return this.module.createI32(i64_low(intValue));\r\n                        break;\r\n                    case 2 /* I32 */:\r\n                        if (i64_is_i32(intValue))\r\n                            return this.module.createI32(i64_low(intValue));\r\n                        break;\r\n                    case 5 /* U8 */:\r\n                        if (i64_is_u8(intValue))\r\n                            return this.module.createI32(i64_low(intValue));\r\n                        break;\r\n                    case 6 /* U16 */:\r\n                        if (i64_is_u16(intValue))\r\n                            return this.module.createI32(i64_low(intValue));\r\n                        break;\r\n                    case 7 /* U32 */:\r\n                        if (i64_is_u32(intValue))\r\n                            return this.module.createI32(i64_low(intValue));\r\n                        break;\r\n                    case 10 /* BOOL */:\r\n                        if (i64_is_bool(intValue))\r\n                            return this.module.createI32(i64_low(intValue));\r\n                        break;\r\n                    case 4 /* ISIZE */:\r\n                        if (!this.options.isWasm64) {\r\n                            if (i64_is_u32(intValue))\r\n                                return this.module.createI32(i64_low(intValue));\r\n                            break;\r\n                        }\r\n                        return this.module.createI64(i64_low(intValue), i64_high(intValue));\r\n                    case 9 /* USIZE */:\r\n                        if (!this.options.isWasm64) {\r\n                            if (i64_is_u32(intValue))\r\n                                return this.module.createI32(i64_low(intValue));\r\n                            break;\r\n                        }\r\n                        return this.module.createI64(i64_low(intValue), i64_high(intValue));\r\n                    case 3 /* I64 */:\r\n                    case 8 /* U64 */:\r\n                        return this.module.createI64(i64_low(intValue), i64_high(intValue));\r\n                    case 11 /* F32 */:\r\n                        if (i64_is_f32(intValue))\r\n                            return this.module.createF32(i64_to_f32(intValue));\r\n                        break;\r\n                    case 12 /* F64 */:\r\n                        if (i64_is_f64(intValue))\r\n                            return this.module.createF64(i64_to_f64(intValue));\r\n                        break;\r\n                    case 13 /* VOID */:\r\n                        break;\r\n                    default:\r\n                        assert(false);\r\n                        break;\r\n                }\r\n                // otherwise compile to best fitting native type\r\n                if (i64_is_i32(intValue)) {\r\n                    this.currentType = types_1.Type.i32;\r\n                    return this.module.createI32(i64_low(intValue));\r\n                }\r\n                else {\r\n                    this.currentType = types_1.Type.i64;\r\n                    return this.module.createI64(i64_low(intValue), i64_high(intValue));\r\n                }\r\n            case 2 /* STRING */:\r\n                assert(!implicitNegate);\r\n                return this.compileStaticString(expression.value);\r\n        }\r\n        throw new Error(\"not implemented\");\r\n    };\r\n    Compiler.prototype.compileStaticString = function (stringValue) {\r\n        var stringSegment = this.stringSegments.get(stringValue);\r\n        if (!stringSegment) {\r\n            var stringLength = stringValue.length;\r\n            var stringBuffer = new Uint8Array(4 + stringLength * 2);\r\n            stringBuffer[0] = stringLength & 0xff;\r\n            stringBuffer[1] = (stringLength >>> 8) & 0xff;\r\n            stringBuffer[2] = (stringLength >>> 16) & 0xff;\r\n            stringBuffer[3] = (stringLength >>> 24) & 0xff;\r\n            for (var i = 0; i < stringLength; ++i) {\r\n                stringBuffer[4 + i * 2] = stringValue.charCodeAt(i) & 0xff;\r\n                stringBuffer[5 + i * 2] = (stringValue.charCodeAt(i) >>> 8) & 0xff;\r\n            }\r\n            stringSegment = this.addMemorySegment(stringBuffer, this.options.usizeType.byteSize);\r\n            this.stringSegments.set(stringValue, stringSegment);\r\n        }\r\n        var stringOffset = stringSegment.offset;\r\n        this.currentType = this.options.usizeType;\r\n        if (this.options.isWasm64)\r\n            return this.module.createI64(i64_low(stringOffset), i64_high(stringOffset));\r\n        assert(i64_is_i32(stringOffset));\r\n        return this.module.createI32(i64_low(stringOffset));\r\n    };\r\n    Compiler.prototype.compileStaticArray = function (elementType, expressions) {\r\n        // compile as static if all element expressions are precomputable, otherwise\r\n        // initialize in place.\r\n        var isStatic = true;\r\n        var size = expressions.length;\r\n        var nativeType = elementType.toNativeType();\r\n        var values;\r\n        switch (nativeType) {\r\n            case module_1.NativeType.I32:\r\n                values = changetype(new Int32Array(size));\r\n                break;\r\n            case module_1.NativeType.I64:\r\n                values = changetype(new Array(size));\r\n                break;\r\n            case module_1.NativeType.F32:\r\n                values = changetype(new Float32Array(size));\r\n                break;\r\n            case module_1.NativeType.F64:\r\n                values = changetype(new Float64Array(size));\r\n                break;\r\n            default:\r\n                throw new Error(\"concrete type expected\");\r\n        }\r\n        var exprs = new Array(size);\r\n        var expr;\r\n        for (var i = 0; i < size; ++i) {\r\n            exprs[i] = expressions[i] ? this.compileExpression(expressions[i], elementType) : elementType.toNativeZero(this.module);\r\n            if (isStatic) {\r\n                if (_BinaryenExpressionGetId(expr = this.precomputeExpressionRef(exprs[i])) == module_1.ExpressionId.Const) {\r\n                    assert(_BinaryenExpressionGetType(expr) == nativeType);\r\n                    switch (nativeType) {\r\n                        case module_1.NativeType.I32:\r\n                            changetype(values)[i] = _BinaryenConstGetValueI32(expr);\r\n                            break;\r\n                        case module_1.NativeType.I64:\r\n                            changetype(values)[i] = i64_new(_BinaryenConstGetValueI64Low(expr), _BinaryenConstGetValueI64High(expr));\r\n                            break;\r\n                        case module_1.NativeType.F32:\r\n                            changetype(values)[i] = _BinaryenConstGetValueF32(expr);\r\n                            break;\r\n                        case module_1.NativeType.F64:\r\n                            changetype(values)[i] = _BinaryenConstGetValueF64(expr);\r\n                            break;\r\n                        default:\r\n                            assert(false); // checked above\r\n                    }\r\n                }\r\n                else {\r\n                    // TODO: emit a warning if declared 'const'\r\n                    isStatic = false;\r\n                }\r\n            }\r\n        }\r\n        if (isStatic) {\r\n            // TODO: convert to Uint8Array and create the segment\r\n        }\r\n        else {\r\n            // TODO: initialize in place\r\n        }\r\n        // TODO: alternatively, static elements could go into data segments while\r\n        // dynamic ones are initialized on top? any benefits? (doesn't seem so)\r\n        throw new Error(\"not implemented\");\r\n    };\r\n    Compiler.prototype.compileNewExpression = function (expression, contextualType) {\r\n        var resolved = this.program.resolveExpression(expression.expression, this.currentFunction); // reports\r\n        if (resolved) {\r\n            if (resolved.element.kind == program_1.ElementKind.CLASS_PROTOTYPE) {\r\n                var prototype = resolved.element;\r\n                var instance = prototype.resolveInclTypeArguments(expression.typeArguments, null, expression); // reports\r\n                if (instance) {\r\n                    var thisExpr = builtins_1.compileAllocate(this, instance, expression);\r\n                    var initializers = new Array();\r\n                    // use a temp local for 'this'\r\n                    var tempLocal = this.currentFunction.getTempLocal(this.options.usizeType);\r\n                    initializers.push(this.module.createSetLocal(tempLocal.index, thisExpr));\r\n                    // apply field initializers\r\n                    if (instance.members)\r\n                        try {\r\n                            for (var _a = __values(instance.members.values()), _b = _a.next(); !_b.done; _b = _a.next()) {\r\n                                var member = _b.value;\r\n                                if (member.kind == program_1.ElementKind.FIELD) {\r\n                                    var field = member;\r\n                                    var fieldDeclaration = field.prototype.declaration;\r\n                                    if (field.is(program_1.ElementFlags.CONSTANT)) {\r\n                                        assert(false); // there are no built-in fields currently\r\n                                    }\r\n                                    else if (fieldDeclaration && fieldDeclaration.initializer) {\r\n                                        initializers.push(this.module.createStore(field.type.byteSize, this.module.createGetLocal(tempLocal.index, this.options.nativeSizeType), this.compileExpression(fieldDeclaration.initializer, field.type), field.type.toNativeType(), field.memoryOffset));\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        catch (e_3_1) { e_3 = { error: e_3_1 }; }\r\n                        finally {\r\n                            try {\r\n                                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);\r\n                            }\r\n                            finally { if (e_3) throw e_3.error; }\r\n                        }\r\n                    // apply constructor\r\n                    var constructorInstance = instance.constructorInstance;\r\n                    if (constructorInstance)\r\n                        initializers.push(this.compileCall(constructorInstance, expression.arguments, expression, this.module.createGetLocal(tempLocal.index, this.options.nativeSizeType)));\r\n                    // return 'this'\r\n                    initializers.push(this.module.createGetLocal(tempLocal.index, this.options.nativeSizeType));\r\n                    this.currentFunction.freeTempLocal(tempLocal);\r\n                    thisExpr = this.module.createBlock(null, initializers, this.options.nativeSizeType);\r\n                    this.currentType = instance.type;\r\n                    return thisExpr;\r\n                }\r\n            }\r\n            else\r\n                this.error(diagnostics_1.DiagnosticCode.Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature, expression.expression.range);\r\n        }\r\n        return this.module.createUnreachable();\r\n        var e_3, _c;\r\n    };\r\n    Compiler.prototype.compileParenthesizedExpression = function (expression, contextualType) {\r\n        // does not change types, just order\r\n        return this.compileExpression(expression.expression, contextualType, 0 /* NONE */);\r\n    };\r\n    Compiler.prototype.compilePropertyAccessExpression = function (propertyAccess, contextualType) {\r\n        var resolved = this.program.resolvePropertyAccess(propertyAccess, this.currentFunction); // reports\r\n        if (!resolved)\r\n            return this.module.createUnreachable();\r\n        var element = resolved.element;\r\n        var targetExpr;\r\n        switch (element.kind) {\r\n            case program_1.ElementKind.GLOBAL:// static property\r\n                if (element.is(program_1.ElementFlags.BUILTIN))\r\n                    return builtins_1.compileGetConstant(this, element, propertyAccess);\r\n                if (!this.compileGlobal(element))\r\n                    return this.module.createUnreachable();\r\n                assert(element.type != types_1.Type.void);\r\n                if (element.is(program_1.ElementFlags.INLINED))\r\n                    return this.compileInlineConstant(element, contextualType);\r\n                this.currentType = element.type;\r\n                return this.module.createGetGlobal(element.internalName, this.currentType.toNativeType());\r\n            case program_1.ElementKind.ENUMVALUE:// enum value\r\n                if (!this.compileEnum(element.enum))\r\n                    return this.module.createUnreachable();\r\n                this.currentType = types_1.Type.i32;\r\n                if (element.is(program_1.ElementFlags.INLINED))\r\n                    return this.module.createI32(element.constantValue);\r\n                return this.module.createGetGlobal(element.internalName, module_1.NativeType.I32);\r\n            case program_1.ElementKind.FIELD:// instance field\r\n                assert(resolved.target != null);\r\n                assert(resolved.targetExpression != null);\r\n                assert(element.memoryOffset >= 0);\r\n                targetExpr = this.compileExpression(resolved.targetExpression, this.options.target == Target.WASM64 ? types_1.Type.usize64 : types_1.Type.usize32);\r\n                this.currentType = element.type;\r\n                return this.module.createLoad(element.type.size >> 3, element.type.is(1 /* SIGNED */ | 4 /* INTEGER */), targetExpr, element.type.toNativeType(), element.memoryOffset);\r\n            case program_1.ElementKind.PROPERTY:// instance property (here: getter)\r\n                var getter = element.getterPrototype;\r\n                assert(getter != null);\r\n                var getterInstance = getter.resolve(null); // reports\r\n                if (!getterInstance)\r\n                    return this.module.createUnreachable();\r\n                assert(getterInstance.parameters.length == 0);\r\n                this.currentType = getterInstance.returnType;\r\n                if (getterInstance.is(program_1.ElementFlags.INSTANCE)) {\r\n                    var targetExpr = this.compileExpression(resolved.targetExpression, this.options.target == Target.WASM64 ? types_1.Type.usize64 : types_1.Type.usize32);\r\n                    this.currentType = getterInstance.returnType;\r\n                    return this.makeCall(getterInstance, [targetExpr]);\r\n                }\r\n                else\r\n                    return this.makeCall(getterInstance);\r\n        }\r\n        this.error(diagnostics_1.DiagnosticCode.Operation_not_supported, propertyAccess.range);\r\n        return this.module.createUnreachable();\r\n    };\r\n    Compiler.prototype.compileTernaryExpression = function (expression, contextualType) {\r\n        var condition = this.compileExpression(expression.condition, types_1.Type.i32);\r\n        var ifThen = this.compileExpression(expression.ifThen, contextualType);\r\n        var ifElse = this.compileExpression(expression.ifElse, contextualType);\r\n        return this.module.createIf(condition, ifThen, ifElse);\r\n    };\r\n    Compiler.prototype.compileUnaryPostfixExpression = function (expression, contextualType) {\r\n        var operator = expression.operator;\r\n        // make a getter for the expression (also obtains the type)\r\n        var getValue = this.compileExpression(expression.operand, contextualType == types_1.Type.void ? types_1.Type.i32 : contextualType, 0 /* NONE */, false);\r\n        var op;\r\n        var nativeType;\r\n        var nativeOne;\r\n        var possiblyOverflows = false;\r\n        switch (expression.operator) {\r\n            case tokenizer_1.Token.PLUS_PLUS:\r\n                switch (this.currentType.kind) {\r\n                    case 0 /* I8 */:\r\n                    case 1 /* I16 */:\r\n                    case 5 /* U8 */:\r\n                    case 6 /* U16 */:\r\n                    case 10 /* BOOL */:\r\n                        possiblyOverflows = true;\r\n                    default:\r\n                        op = module_1.BinaryOp.AddI32;\r\n                        nativeType = module_1.NativeType.I32;\r\n                        nativeOne = this.module.createI32(1);\r\n                        break;\r\n                    case 9 /* USIZE */:\r\n                    // TODO: check operator overload\r\n                    case 4 /* ISIZE */:\r\n                        op = this.options.target == Target.WASM64 ? module_1.BinaryOp.AddI64 : module_1.BinaryOp.AddI32;\r\n                        nativeType = this.options.target == Target.WASM64 ? module_1.NativeType.I64 : module_1.NativeType.I32;\r\n                        nativeOne = this.currentType.toNativeOne(this.module);\r\n                        break;\r\n                    case 3 /* I64 */:\r\n                    case 8 /* U64 */:\r\n                        op = module_1.BinaryOp.AddI64;\r\n                        nativeType = module_1.NativeType.I64;\r\n                        nativeOne = this.module.createI64(1);\r\n                        break;\r\n                    case 11 /* F32 */:\r\n                        op = module_1.BinaryOp.AddF32;\r\n                        nativeType = module_1.NativeType.F32;\r\n                        nativeOne = this.module.createF32(1);\r\n                        break;\r\n                    case 12 /* F64 */:\r\n                        op = module_1.BinaryOp.AddF64;\r\n                        nativeType = module_1.NativeType.F64;\r\n                        nativeOne = this.module.createF64(1);\r\n                        break;\r\n                    case 13 /* VOID */:\r\n                        this.error(diagnostics_1.DiagnosticCode.Operation_not_supported, expression.range);\r\n                        throw new Error(\"concrete type expected\");\r\n                }\r\n                break;\r\n            case tokenizer_1.Token.MINUS_MINUS:\r\n                switch (this.currentType.kind) {\r\n                    case 0 /* I8 */:\r\n                    case 1 /* I16 */:\r\n                    case 5 /* U8 */:\r\n                    case 6 /* U16 */:\r\n                    case 10 /* BOOL */:\r\n                        possiblyOverflows = true;\r\n                    default:\r\n                        op = module_1.BinaryOp.SubI32;\r\n                        nativeType = module_1.NativeType.I32;\r\n                        nativeOne = this.module.createI32(1);\r\n                        break;\r\n                    case 9 /* USIZE */:\r\n                    // TODO: check operator overload\r\n                    case 4 /* ISIZE */:\r\n                        op = this.options.target == Target.WASM64 ? module_1.BinaryOp.SubI64 : module_1.BinaryOp.SubI32;\r\n                        nativeType = this.options.target == Target.WASM64 ? module_1.NativeType.I64 : module_1.NativeType.I32;\r\n                        nativeOne = this.currentType.toNativeOne(this.module);\r\n                        break;\r\n                    case 3 /* I64 */:\r\n                    case 8 /* U64 */:\r\n                        op = module_1.BinaryOp.SubI64;\r\n                        nativeType = module_1.NativeType.I64;\r\n                        nativeOne = this.module.createI64(1);\r\n                        break;\r\n                    case 11 /* F32 */:\r\n                        op = module_1.BinaryOp.SubF32;\r\n                        nativeType = module_1.NativeType.F32;\r\n                        nativeOne = this.module.createF32(1);\r\n                        break;\r\n                    case 12 /* F64 */:\r\n                        op = module_1.BinaryOp.SubF64;\r\n                        nativeType = module_1.NativeType.F64;\r\n                        nativeOne = this.module.createF64(1);\r\n                        break;\r\n                    case 13 /* VOID */:\r\n                        this.error(diagnostics_1.DiagnosticCode.Operation_not_supported, expression.range);\r\n                        throw new Error(\"concrete type expected\");\r\n                }\r\n                break;\r\n            default:\r\n                this.error(diagnostics_1.DiagnosticCode.Operation_not_supported, expression.range);\r\n                throw new Error(\"unary postfix operator expected\");\r\n        }\r\n        var setValue;\r\n        var tempLocal = null;\r\n        // simplify if dropped anyway\r\n        if (contextualType == types_1.Type.void) {\r\n            setValue = this.module.createBinary(op, getValue, nativeOne);\r\n            // otherwise use a temp local for the intermediate value\r\n        }\r\n        else {\r\n            tempLocal = this.currentFunction.getTempLocal(this.currentType);\r\n            setValue = this.module.createBinary(op, this.module.createGetLocal(tempLocal.index, nativeType), nativeOne);\r\n        }\r\n        if (possiblyOverflows) {\r\n            assert(this.currentType.is(32 /* SMALL */ | 4 /* INTEGER */));\r\n            setValue = makeSmallIntegerWrap(setValue, this.currentType, this.module);\r\n        }\r\n        setValue = this.compileAssignmentWithValue(expression.operand, setValue, false); // sets currentType = void\r\n        if (contextualType == types_1.Type.void) {\r\n            assert(!tempLocal);\r\n            return setValue;\r\n        }\r\n        this.currentType = assert(tempLocal).type;\r\n        this.currentFunction.freeTempLocal(tempLocal);\r\n        return this.module.createBlock(null, [\r\n            this.module.createSetLocal(tempLocal.index, getValue),\r\n            setValue,\r\n            this.module.createGetLocal(tempLocal.index, nativeType)\r\n        ], nativeType);\r\n    };\r\n    Compiler.prototype.compileUnaryPrefixExpression = function (expression, contextualType, wrapSmallIntegers) {\r\n        if (wrapSmallIntegers === void 0) { wrapSmallIntegers = true; }\r\n        var possiblyOverflows = false;\r\n        var compound = false;\r\n        var expr;\r\n        switch (expression.operator) {\r\n            case tokenizer_1.Token.PLUS:\r\n                if (this.currentType.isReference) {\r\n                    this.error(diagnostics_1.DiagnosticCode.Operation_not_supported, expression.range);\r\n                    return this.module.createUnreachable();\r\n                }\r\n                expr = this.compileExpression(expression.operand, contextualType == types_1.Type.void ? types_1.Type.i32 : contextualType, 0 /* NONE */, false);\r\n                possiblyOverflows = this.currentType.is(32 /* SMALL */ | 4 /* INTEGER */); // if operand already did\r\n                break;\r\n            case tokenizer_1.Token.MINUS:\r\n                if (expression.operand.kind == ast_1.NodeKind.LITERAL && (expression.operand.literalKind == 1 /* INTEGER */ ||\r\n                    expression.operand.literalKind == 0 /* FLOAT */)) {\r\n                    // implicitly negate integer and float literals. also enables proper checking of literal ranges.\r\n                    expr = this.compileLiteralExpression(expression.operand, contextualType, true);\r\n                    this.addDebugLocation(expr, expression.range); // compileExpression normally does this\r\n                }\r\n                else {\r\n                    expr = this.compileExpression(expression.operand, contextualType == types_1.Type.void ? types_1.Type.i32 : contextualType, 0 /* NONE */, false);\r\n                    switch (this.currentType.kind) {\r\n                        case 0 /* I8 */:\r\n                        case 1 /* I16 */:\r\n                        case 5 /* U8 */:\r\n                        case 6 /* U16 */:\r\n                        case 10 /* BOOL */:\r\n                            possiblyOverflows = true; // or if operand already did\r\n                        default:\r\n                            expr = this.module.createBinary(module_1.BinaryOp.SubI32, this.module.createI32(0), expr);\r\n                            break;\r\n                        case 9 /* USIZE */:\r\n                            if (this.currentType.isReference) {\r\n                                this.error(diagnostics_1.DiagnosticCode.Operation_not_supported, expression.range);\r\n                                return this.module.createUnreachable();\r\n                            }\r\n                        case 4 /* ISIZE */:\r\n                            expr = this.module.createBinary(this.options.target == Target.WASM64 ? module_1.BinaryOp.SubI64 : module_1.BinaryOp.SubI32, this.currentType.toNativeZero(this.module), expr);\r\n                            break;\r\n                        case 3 /* I64 */:\r\n                        case 8 /* U64 */:\r\n                            expr = this.module.createBinary(module_1.BinaryOp.SubI64, this.module.createI64(0), expr);\r\n                            break;\r\n                        case 11 /* F32 */:\r\n                            expr = this.module.createUnary(module_1.UnaryOp.NegF32, expr);\r\n                            break;\r\n                        case 12 /* F64 */:\r\n                            expr = this.module.createUnary(module_1.UnaryOp.NegF64, expr);\r\n                            break;\r\n                    }\r\n                }\r\n                break;\r\n            case tokenizer_1.Token.PLUS_PLUS:\r\n                compound = true;\r\n                expr = this.compileExpression(expression.operand, contextualType == types_1.Type.void ? types_1.Type.i32 : contextualType, 0 /* NONE */, false);\r\n                switch (this.currentType.kind) {\r\n                    case 0 /* I8 */:\r\n                    case 1 /* I16 */:\r\n                    case 5 /* U8 */:\r\n                    case 6 /* U16 */:\r\n                    case 10 /* BOOL */:\r\n                        possiblyOverflows = true; // or if operand already did\r\n                    default:\r\n                        expr = this.module.createBinary(module_1.BinaryOp.AddI32, expr, this.module.createI32(1));\r\n                        break;\r\n                    case 9 /* USIZE */:\r\n                        if (this.currentType.isReference) {\r\n                            this.error(diagnostics_1.DiagnosticCode.Operation_not_supported, expression.range);\r\n                            return this.module.createUnreachable();\r\n                        }\r\n                    // fall-through\r\n                    case 4 /* ISIZE */:\r\n                        expr = this.module.createBinary(this.options.target == Target.WASM64 ? module_1.BinaryOp.AddI64 : module_1.BinaryOp.AddI32, expr, this.currentType.toNativeOne(this.module));\r\n                        break;\r\n                    case 3 /* I64 */:\r\n                    case 8 /* U64 */:\r\n                        expr = this.module.createBinary(module_1.BinaryOp.AddI64, expr, this.module.createI64(1));\r\n                        break;\r\n                    case 11 /* F32 */:\r\n                        expr = this.module.createBinary(module_1.BinaryOp.AddF32, expr, this.module.createF32(1));\r\n                        break;\r\n                    case 12 /* F64 */:\r\n                        expr = this.module.createBinary(module_1.BinaryOp.AddF64, expr, this.module.createF64(1));\r\n                        break;\r\n                }\r\n                break;\r\n            case tokenizer_1.Token.MINUS_MINUS:\r\n                compound = true;\r\n                expr = this.compileExpression(expression.operand, contextualType == types_1.Type.void ? types_1.Type.i32 : contextualType, 0 /* NONE */, false);\r\n                switch (this.currentType.kind) {\r\n                    case 0 /* I8 */:\r\n                    case 1 /* I16 */:\r\n                    case 5 /* U8 */:\r\n                    case 6 /* U16 */:\r\n                    case 10 /* BOOL */:\r\n                        possiblyOverflows = true; // or if operand already did\r\n                    // fall-through\r\n                    default:\r\n                        expr = this.module.createBinary(module_1.BinaryOp.SubI32, expr, this.module.createI32(1));\r\n                        break;\r\n                    case 9 /* USIZE */:\r\n                        if (this.currentType.isReference) {\r\n                            this.error(diagnostics_1.DiagnosticCode.Operation_not_supported, expression.range);\r\n                            return this.module.createUnreachable();\r\n                        }\r\n                    // fall-through\r\n                    case 4 /* ISIZE */:\r\n                        expr = this.module.createBinary(this.options.target == Target.WASM64 ? module_1.BinaryOp.SubI64 : module_1.BinaryOp.SubI32, expr, this.currentType.toNativeOne(this.module));\r\n                        break;\r\n                    case 3 /* I64 */:\r\n                    case 8 /* U64 */:\r\n                        expr = this.module.createBinary(module_1.BinaryOp.SubI64, expr, this.module.createI64(1));\r\n                        break;\r\n                    case 11 /* F32 */:\r\n                        expr = this.module.createBinary(module_1.BinaryOp.SubF32, expr, this.module.createF32(1));\r\n                        break;\r\n                    case 12 /* F64 */:\r\n                        expr = this.module.createBinary(module_1.BinaryOp.SubF64, expr, this.module.createF64(1));\r\n                        break;\r\n                }\r\n                break;\r\n            case tokenizer_1.Token.EXCLAMATION:// must wrap small integers\r\n                expr = this.compileExpression(expression.operand, contextualType == types_1.Type.void ? types_1.Type.i32 : contextualType, 0 /* NONE */);\r\n                expr = makeIsFalseish(expr, this.currentType, this.module);\r\n                this.currentType = types_1.Type.bool;\r\n                break;\r\n            case tokenizer_1.Token.TILDE:// retains low bits of small integers\r\n                expr = this.compileExpression(expression.operand, contextualType == types_1.Type.void ? types_1.Type.i32 : contextualType.is(8 /* FLOAT */) ? types_1.Type.i64 : contextualType, contextualType == types_1.Type.void ? 0 /* NONE */ : 1 /* IMPLICIT */, false);\r\n                switch (this.currentType.kind) {\r\n                    case 0 /* I8 */:\r\n                    case 1 /* I16 */:\r\n                    case 5 /* U8 */:\r\n                    case 6 /* U16 */:\r\n                    case 10 /* BOOL */:\r\n                        possiblyOverflows = true; // or if operand already did\r\n                    default:\r\n                        expr = this.module.createBinary(module_1.BinaryOp.XorI32, expr, this.module.createI32(-1));\r\n                        break;\r\n                    case 9 /* USIZE */:\r\n                        if (this.currentType.isReference) {\r\n                            this.error(diagnostics_1.DiagnosticCode.Operation_not_supported, expression.range);\r\n                            return this.module.createUnreachable();\r\n                        }\r\n                    // fall-through\r\n                    case 4 /* ISIZE */:\r\n                        expr = this.module.createBinary(this.options.target == Target.WASM64 ? module_1.BinaryOp.XorI64 : module_1.BinaryOp.XorI32, expr, this.currentType.toNativeNegOne(this.module));\r\n                        break;\r\n                    case 3 /* I64 */:\r\n                    case 8 /* U64 */:\r\n                        expr = this.module.createBinary(module_1.BinaryOp.XorI64, expr, this.module.createI64(-1, -1));\r\n                        break;\r\n                }\r\n                break;\r\n            case tokenizer_1.Token.TYPEOF:\r\n                // it might make sense to implement typeof in a way that a generic function can detect whether\r\n                // its type argument is a class type or string. that could then be used, for example, to\r\n                // generate hash codes for sets and maps, depending on the kind of type parameter we have.\r\n                // ideally the comparison would not involve actual string comparison and limit available\r\n                // operations to hard-coded string literals.\r\n                this.error(diagnostics_1.DiagnosticCode.Operation_not_supported, expression.range);\r\n                throw new Error(\"not implemented\");\r\n            default:\r\n                this.error(diagnostics_1.DiagnosticCode.Operation_not_supported, expression.range);\r\n                throw new Error(\"unary operator expected\");\r\n        }\r\n        if (possiblyOverflows && wrapSmallIntegers) {\r\n            assert(this.currentType.is(32 /* SMALL */ | 4 /* INTEGER */));\r\n            expr = makeSmallIntegerWrap(expr, this.currentType, this.module);\r\n        }\r\n        return compound\r\n            ? this.compileAssignmentWithValue(expression.operand, expr, contextualType != types_1.Type.void)\r\n            : expr;\r\n    };\r\n    Compiler.prototype.addDebugLocation = function (expr, range) {\r\n        if (this.options.sourceMap != null) {\r\n            var source = range.source;\r\n            if (source.debugInfoIndex < 0)\r\n                source.debugInfoIndex = this.module.addDebugInfoFile(source.normalizedPath);\r\n            range.debugInfoRef = expr;\r\n            if (!this.currentFunction.debugLocations)\r\n                (this.currentFunction.debugLocations = new Array(8)).length = 0;\r\n            this.currentFunction.debugLocations.push(range);\r\n        }\r\n    };\r\n    return Compiler;\r\n}(diagnostics_1.DiagnosticEmitter));\r\nexports.Compiler = Compiler;\r\n// helpers\r\n/** Wraps a 32-bit integer expression so it evaluates to a valid value in the range of the specified small integer type. */\r\nfunction makeSmallIntegerWrap(expr, type, module) {\r\n    switch (type.kind) {\r\n        case 0 /* I8 */:\r\n            expr = module.createBinary(module_1.BinaryOp.ShrI32, module.createBinary(module_1.BinaryOp.ShlI32, expr, module.createI32(24)), module.createI32(24));\r\n            break;\r\n        case 1 /* I16 */:\r\n            expr = module.createBinary(module_1.BinaryOp.ShrI32, module.createBinary(module_1.BinaryOp.ShlI32, expr, module.createI32(16)), module.createI32(16));\r\n            break;\r\n        case 5 /* U8 */:\r\n            expr = module.createBinary(module_1.BinaryOp.AndI32, expr, module.createI32(0xff));\r\n            break;\r\n        case 6 /* U16 */:\r\n            expr = module.createBinary(module_1.BinaryOp.AndI32, expr, module.createI32(0xffff));\r\n            break;\r\n        case 10 /* BOOL */:\r\n            expr = module.createBinary(module_1.BinaryOp.AndI32, expr, module.createI32(0x1));\r\n            break;\r\n        case 13 /* VOID */:\r\n            throw new Error(\"concrete type expected\");\r\n    }\r\n    return expr;\r\n}\r\nexports.makeSmallIntegerWrap = makeSmallIntegerWrap;\r\n/** Creates a comparison whether an expression is not 'true' in a broader sense. */\r\nfunction makeIsFalseish(expr, type, module) {\r\n    switch (type.kind) {\r\n        default:// any integer up to 32 bits\r\n            expr = module.createUnary(module_1.UnaryOp.EqzI32, expr);\r\n            break;\r\n        case 3 /* I64 */:\r\n        case 8 /* U64 */:\r\n            expr = module.createUnary(module_1.UnaryOp.EqzI64, expr);\r\n            break;\r\n        case 9 /* USIZE */:\r\n        // TODO: strings\r\n        case 4 /* ISIZE */:\r\n            expr = module.createUnary(type.size == 64 ? module_1.UnaryOp.EqzI64 : module_1.UnaryOp.EqzI32, expr);\r\n            break;\r\n        case 11 /* F32 */:\r\n            expr = module.createBinary(module_1.BinaryOp.EqF32, expr, module.createF32(0));\r\n            break;\r\n        case 12 /* F64 */:\r\n            expr = module.createBinary(module_1.BinaryOp.EqF64, expr, module.createF64(0));\r\n            break;\r\n        case 13 /* VOID */:\r\n            throw new Error(\"concrete type expected\");\r\n    }\r\n    return expr;\r\n}\r\nexports.makeIsFalseish = makeIsFalseish;\r\n/** Creates a comparison whether an expression is 'true' in a broader sense. */\r\nfunction makeIsTrueish(expr, type, module) {\r\n    switch (type.kind) {\r\n        default:// any integer up to 32 bits\r\n            expr = module.createBinary(module_1.BinaryOp.NeI32, expr, module.createI32(0));\r\n            break;\r\n        case 3 /* I64 */:\r\n        case 8 /* U64 */:\r\n            expr = module.createBinary(module_1.BinaryOp.NeI64, expr, module.createI64(0));\r\n            break;\r\n        case 9 /* USIZE */:\r\n        // TODO: strings\r\n        case 4 /* ISIZE */:\r\n            expr = type.size == 64\r\n                ? module.createBinary(module_1.BinaryOp.NeI64, expr, module.createI64(0))\r\n                : module.createBinary(module_1.BinaryOp.NeI32, expr, module.createI32(0));\r\n            break;\r\n        case 11 /* F32 */:\r\n            expr = module.createBinary(module_1.BinaryOp.NeF32, expr, module.createF32(0));\r\n            break;\r\n        case 12 /* F64 */:\r\n            expr = module.createBinary(module_1.BinaryOp.NeF64, expr, module.createF64(0));\r\n            break;\r\n        case 13 /* VOID */:\r\n            throw new Error(\"concrete type expected\");\r\n    }\r\n    return expr;\r\n}\r\nexports.makeIsTrueish = makeIsTrueish;\r\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar module_1 = __webpack_require__(0);\r\n/** Indicates the kind of a type. */\r\nvar TypeKind;\r\n(function (TypeKind) {\r\n    // signed integers\r\n    TypeKind[TypeKind[\"I8\"] = 0] = \"I8\";\r\n    TypeKind[TypeKind[\"I16\"] = 1] = \"I16\";\r\n    TypeKind[TypeKind[\"I32\"] = 2] = \"I32\";\r\n    TypeKind[TypeKind[\"I64\"] = 3] = \"I64\";\r\n    TypeKind[TypeKind[\"ISIZE\"] = 4] = \"ISIZE\";\r\n    // unsigned integers\r\n    TypeKind[TypeKind[\"U8\"] = 5] = \"U8\";\r\n    TypeKind[TypeKind[\"U16\"] = 6] = \"U16\";\r\n    TypeKind[TypeKind[\"U32\"] = 7] = \"U32\";\r\n    TypeKind[TypeKind[\"U64\"] = 8] = \"U64\";\r\n    TypeKind[TypeKind[\"USIZE\"] = 9] = \"USIZE\";\r\n    TypeKind[TypeKind[\"BOOL\"] = 10] = \"BOOL\";\r\n    // floats\r\n    TypeKind[TypeKind[\"F32\"] = 11] = \"F32\";\r\n    TypeKind[TypeKind[\"F64\"] = 12] = \"F64\";\r\n    // other\r\n    TypeKind[TypeKind[\"VOID\"] = 13] = \"VOID\";\r\n})(TypeKind = exports.TypeKind || (exports.TypeKind = {}));\r\n/** Indicates capabilities of a type. */\r\nvar TypeFlags;\r\n(function (TypeFlags) {\r\n    TypeFlags[TypeFlags[\"NONE\"] = 0] = \"NONE\";\r\n    /** Is a signed type that can represent negative values. */\r\n    TypeFlags[TypeFlags[\"SIGNED\"] = 1] = \"SIGNED\";\r\n    /** Is an unsigned type that cannot represent negative values. */\r\n    TypeFlags[TypeFlags[\"UNSIGNED\"] = 2] = \"UNSIGNED\";\r\n    /** Is an integer type. */\r\n    TypeFlags[TypeFlags[\"INTEGER\"] = 4] = \"INTEGER\";\r\n    /** Is a floating point type. */\r\n    TypeFlags[TypeFlags[\"FLOAT\"] = 8] = \"FLOAT\";\r\n    /** Is a sized integer type with a target specific bit size. */\r\n    TypeFlags[TypeFlags[\"SIZE\"] = 16] = \"SIZE\";\r\n    /** Is a small type that is emulated in a larger type. */\r\n    TypeFlags[TypeFlags[\"SMALL\"] = 32] = \"SMALL\";\r\n    /** Is a long type larger than 32-bits. */\r\n    TypeFlags[TypeFlags[\"LONG\"] = 64] = \"LONG\";\r\n    /** Is a value type. */\r\n    TypeFlags[TypeFlags[\"VALUE\"] = 128] = \"VALUE\";\r\n    /** Is a reference type. */\r\n    TypeFlags[TypeFlags[\"REFERENCE\"] = 256] = \"REFERENCE\";\r\n    /** Is a nullable type. */\r\n    TypeFlags[TypeFlags[\"NULLABLE\"] = 512] = \"NULLABLE\";\r\n})(TypeFlags = exports.TypeFlags || (exports.TypeFlags = {}));\r\n/** Represents a resolved type. */\r\nvar Type = /** @class */ (function () {\r\n    /** Constructs a new resolved type. */\r\n    function Type(kind, flags, size) {\r\n        /** Respective nullable type, if non-nullable. */\r\n        this.nullableType = null;\r\n        this.kind = kind;\r\n        this.flags = flags;\r\n        this.size = size;\r\n        this.byteSize = ceil(size / 8);\r\n        this.classType = null;\r\n        this.nonNullableType = this;\r\n    }\r\n    /** Computes the sign-extending shift in the target type. */\r\n    Type.prototype.computeSmallIntegerShift = function (targetType) {\r\n        return targetType.size - this.size;\r\n    };\r\n    /** Computes the truncating mask in the target type. */\r\n    Type.prototype.computeSmallIntegerMask = function (targetType) {\r\n        return -1 >>> (targetType.size - this.size);\r\n    };\r\n    /** Tests if this type has the specified capabilities. */\r\n    Type.prototype.is = function (flags) {\r\n        return (this.flags & flags) == flags;\r\n    };\r\n    Object.defineProperty(Type.prototype, \"isClass\", {\r\n        /** Tests if this type is a class type. */\r\n        get: function () { return this.classType != null; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Type.prototype, \"isFunction\", {\r\n        /** Tests if this type is a function type. */\r\n        get: function () { return this.functionType != null; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Type.prototype, \"isReference\", {\r\n        /** Tests if this type is a reference type. */\r\n        get: function () { return this.classType != null || this.functionType != null; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /** Composes a class type from this type and a class. */\r\n    Type.prototype.asClass = function (classType) {\r\n        assert(this.kind == 9 /* USIZE */);\r\n        var ret = new Type(this.kind, this.flags & ~128 /* VALUE */ | 256 /* REFERENCE */, this.size);\r\n        ret.classType = classType;\r\n        return ret;\r\n    };\r\n    /** Composes a function type from this type and a function. */\r\n    Type.prototype.asFunction = function (functionType) {\r\n        assert(this.kind == 9 /* USIZE */ && !this.isReference);\r\n        var ret = new Type(this.kind, this.flags & ~128 /* VALUE */ | 256 /* REFERENCE */, this.size);\r\n        ret.functionType = functionType;\r\n        return ret;\r\n    };\r\n    /** Composes the respective nullable type of this type. */\r\n    Type.prototype.asNullable = function () {\r\n        assert(this.kind == 9 /* USIZE */);\r\n        if (!this.nullableType) {\r\n            assert(!this.is(512 /* NULLABLE */) && this.isReference);\r\n            this.nullableType = new Type(this.kind, this.flags | 512 /* NULLABLE */, this.size);\r\n            this.nullableType.classType = this.classType;\r\n            this.nullableType.functionType = this.functionType;\r\n        }\r\n        return this.nullableType;\r\n    };\r\n    /** Converts this type to its TypeScript representation. */\r\n    Type.prototype.toString = function (kindOnly) {\r\n        if (kindOnly === void 0) { kindOnly = false; }\r\n        switch (this.kind) {\r\n            case 0 /* I8 */: return \"i8\";\r\n            case 1 /* I16 */: return \"i16\";\r\n            case 2 /* I32 */: return \"i32\";\r\n            case 3 /* I64 */: return \"i64\";\r\n            case 4 /* ISIZE */: return \"isize\";\r\n            case 5 /* U8 */: return \"u8\";\r\n            case 6 /* U16 */: return \"u16\";\r\n            case 7 /* U32 */: return \"u32\";\r\n            case 8 /* U64 */: return \"u64\";\r\n            case 9 /* USIZE */:\r\n                if (kindOnly)\r\n                    return \"usize\";\r\n                return this.classType ? this.classType.toString()\r\n                    : this.functionType ? this.functionType.toTypeString()\r\n                        : \"usize\";\r\n            case 10 /* BOOL */: return \"bool\";\r\n            case 11 /* F32 */: return \"f32\";\r\n            case 12 /* F64 */: return \"f64\";\r\n            case 13 /* VOID */: return \"void\";\r\n            default:\r\n                assert(false);\r\n                return \"\";\r\n        }\r\n    };\r\n    // Binaryen specific\r\n    /** Converts this type to its respective native type. */\r\n    Type.prototype.toNativeType = function () {\r\n        switch (this.kind) {\r\n            default:\r\n                return module_1.NativeType.I32;\r\n            case 3 /* I64 */:\r\n            case 8 /* U64 */:\r\n                return module_1.NativeType.I64;\r\n            case 4 /* ISIZE */:\r\n            case 9 /* USIZE */:\r\n                return this.size == 64 ? module_1.NativeType.I64 : module_1.NativeType.I32;\r\n            case 11 /* F32 */:\r\n                return module_1.NativeType.F32;\r\n            case 12 /* F64 */:\r\n                return module_1.NativeType.F64;\r\n            case 13 /* VOID */:\r\n                return module_1.NativeType.None;\r\n        }\r\n    };\r\n    /** Converts this type to its native `0` value. */\r\n    Type.prototype.toNativeZero = function (module) {\r\n        switch (this.kind) {\r\n            case 13 /* VOID */:\r\n                assert(false);\r\n            default:\r\n                return module.createI32(0);\r\n            case 4 /* ISIZE */:\r\n            case 9 /* USIZE */:\r\n                if (this.size != 64)\r\n                    return module.createI32(0);\r\n            // fall-through\r\n            case 3 /* I64 */:\r\n            case 8 /* U64 */:\r\n                return module.createI64(0);\r\n            case 11 /* F32 */:\r\n                return module.createF32(0);\r\n            case 12 /* F64 */:\r\n                return module.createF64(0);\r\n        }\r\n    };\r\n    /** Converts this type to its native `1` value. */\r\n    Type.prototype.toNativeOne = function (module) {\r\n        switch (this.kind) {\r\n            case 13 /* VOID */:\r\n                assert(false);\r\n            default:\r\n                return module.createI32(1);\r\n            case 4 /* ISIZE */:\r\n            case 9 /* USIZE */:\r\n                if (this.size != 64)\r\n                    return module.createI32(1);\r\n            // fall-through\r\n            case 3 /* I64 */:\r\n            case 8 /* U64 */:\r\n                return module.createI64(1);\r\n            case 11 /* F32 */:\r\n                return module.createF32(1);\r\n            case 12 /* F64 */:\r\n                return module.createF64(1);\r\n        }\r\n    };\r\n    /** Converts this type to its native `-1` value. */\r\n    Type.prototype.toNativeNegOne = function (module) {\r\n        switch (this.kind) {\r\n            case 13 /* VOID */:\r\n                assert(false);\r\n            default:\r\n                return module.createI32(-1);\r\n            case 4 /* ISIZE */:\r\n            case 9 /* USIZE */:\r\n                if (this.size != 64)\r\n                    return module.createI32(-1);\r\n            // fall-through\r\n            case 3 /* I64 */:\r\n            case 8 /* U64 */:\r\n                return module.createI64(-1, -1);\r\n            case 11 /* F32 */:\r\n                return module.createF32(-1);\r\n            case 12 /* F64 */:\r\n                return module.createF64(-1);\r\n        }\r\n    };\r\n    /** Converts this type to its signature string. */\r\n    Type.prototype.toSignatureString = function () {\r\n        switch (this.kind) {\r\n            default:\r\n                return \"i\";\r\n            case 3 /* I64 */:\r\n            case 8 /* U64 */:\r\n                return \"I\";\r\n            case 4 /* ISIZE */:\r\n            case 9 /* USIZE */:\r\n                return this.size == 64 ? \"I\" : \"i\";\r\n            case 11 /* F32 */:\r\n                return \"f\";\r\n            case 12 /* F64 */:\r\n                return \"F\";\r\n            case 13 /* VOID */:\r\n                return \"v\";\r\n        }\r\n    };\r\n    // Types\r\n    /** An 8-bit signed integer. */\r\n    Type.i8 = new Type(0 /* I8 */, 1 /* SIGNED */ |\r\n        32 /* SMALL */ |\r\n        4 /* INTEGER */ |\r\n        128 /* VALUE */, 8);\r\n    /** A 16-bit signed integer. */\r\n    Type.i16 = new Type(1 /* I16 */, 1 /* SIGNED */ |\r\n        32 /* SMALL */ |\r\n        4 /* INTEGER */ |\r\n        128 /* VALUE */, 16);\r\n    /** A 32-bit signed integer. */\r\n    Type.i32 = new Type(2 /* I32 */, 1 /* SIGNED */ |\r\n        4 /* INTEGER */ |\r\n        128 /* VALUE */, 32);\r\n    /** A 64-bit signed integer. */\r\n    Type.i64 = new Type(3 /* I64 */, 1 /* SIGNED */ |\r\n        64 /* LONG */ |\r\n        4 /* INTEGER */ |\r\n        128 /* VALUE */, 64);\r\n    /** A 32-bit signed size. WASM32 only. */\r\n    Type.isize32 = new Type(4 /* ISIZE */, 1 /* SIGNED */ |\r\n        16 /* SIZE */ |\r\n        4 /* INTEGER */ |\r\n        128 /* VALUE */, 32);\r\n    /** A 64-bit signed size. WASM64 only. */\r\n    Type.isize64 = new Type(4 /* ISIZE */, 1 /* SIGNED */ |\r\n        64 /* LONG */ |\r\n        16 /* SIZE */ |\r\n        4 /* INTEGER */ |\r\n        128 /* VALUE */, 64);\r\n    /** An 8-bit unsigned integer. */\r\n    Type.u8 = new Type(5 /* U8 */, 2 /* UNSIGNED */ |\r\n        32 /* SMALL */ |\r\n        4 /* INTEGER */ |\r\n        128 /* VALUE */, 8);\r\n    /** A 16-bit unsigned integer. */\r\n    Type.u16 = new Type(6 /* U16 */, 2 /* UNSIGNED */ |\r\n        32 /* SMALL */ |\r\n        4 /* INTEGER */ |\r\n        128 /* VALUE */, 16);\r\n    /** A 32-bit unsigned integer. */\r\n    Type.u32 = new Type(7 /* U32 */, 2 /* UNSIGNED */ |\r\n        4 /* INTEGER */ |\r\n        128 /* VALUE */, 32);\r\n    /** A 64-bit unsigned integer. */\r\n    Type.u64 = new Type(8 /* U64 */, 2 /* UNSIGNED */ |\r\n        64 /* LONG */ |\r\n        4 /* INTEGER */ |\r\n        128 /* VALUE */, 64);\r\n    /** A 32-bit unsigned size. WASM32 only. */\r\n    Type.usize32 = new Type(9 /* USIZE */, 2 /* UNSIGNED */ |\r\n        16 /* SIZE */ |\r\n        4 /* INTEGER */ |\r\n        128 /* VALUE */, 32);\r\n    /** A 64-bit unsigned size. WASM64 only. */\r\n    Type.usize64 = new Type(9 /* USIZE */, 2 /* UNSIGNED */ |\r\n        64 /* LONG */ |\r\n        16 /* SIZE */ |\r\n        4 /* INTEGER */ |\r\n        128 /* VALUE */, 64);\r\n    /** A 1-bit unsigned integer. */\r\n    Type.bool = new Type(10 /* BOOL */, 2 /* UNSIGNED */ |\r\n        32 /* SMALL */ |\r\n        4 /* INTEGER */ |\r\n        128 /* VALUE */, 1);\r\n    /** A 32-bit float. */\r\n    Type.f32 = new Type(11 /* F32 */, 1 /* SIGNED */ |\r\n        8 /* FLOAT */ |\r\n        128 /* VALUE */, 32);\r\n    /** A 64-bit float. */\r\n    Type.f64 = new Type(12 /* F64 */, 1 /* SIGNED */ |\r\n        64 /* LONG */ |\r\n        8 /* FLOAT */ |\r\n        128 /* VALUE */, 64);\r\n    /** No return type. */\r\n    Type.void = new Type(13 /* VOID */, 0 /* NONE */, 0);\r\n    return Type;\r\n}());\r\nexports.Type = Type;\r\n/** Converts an array of types to an array of native types. */\r\nfunction typesToNativeTypes(types) {\r\n    var k = types.length;\r\n    var ret = new Array(k);\r\n    for (var i = 0; i < k; ++i)\r\n        ret[i] = types[i].toNativeType();\r\n    return ret;\r\n}\r\nexports.typesToNativeTypes = typesToNativeTypes;\r\n/** Converts an array of types to its combined string representation. */\r\nfunction typesToString(types) {\r\n    var k = types.length;\r\n    if (!k)\r\n        return \"\";\r\n    var sb = new Array(k);\r\n    for (var i = 0; i < k; ++i)\r\n        sb[i] = types[i].toString();\r\n    return sb.join(\", \");\r\n}\r\nexports.typesToString = typesToString;\r\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\n///////////////////////////// Abstract Syntax Tree /////////////////////////////\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar program_1 = __webpack_require__(2);\r\nvar tokenizer_1 = __webpack_require__(6);\r\nexports.Token = tokenizer_1.Token;\r\nexports.Range = tokenizer_1.Range;\r\nvar path_1 = __webpack_require__(10);\r\n/** Indicates the kind of a node. */\r\nvar NodeKind;\r\n(function (NodeKind) {\r\n    NodeKind[NodeKind[\"SOURCE\"] = 0] = \"SOURCE\";\r\n    // types\r\n    NodeKind[NodeKind[\"TYPE\"] = 1] = \"TYPE\";\r\n    NodeKind[NodeKind[\"TYPEPARAMETER\"] = 2] = \"TYPEPARAMETER\";\r\n    // expressions\r\n    NodeKind[NodeKind[\"IDENTIFIER\"] = 3] = \"IDENTIFIER\";\r\n    NodeKind[NodeKind[\"ASSERTION\"] = 4] = \"ASSERTION\";\r\n    NodeKind[NodeKind[\"BINARY\"] = 5] = \"BINARY\";\r\n    NodeKind[NodeKind[\"CALL\"] = 6] = \"CALL\";\r\n    NodeKind[NodeKind[\"COMMA\"] = 7] = \"COMMA\";\r\n    NodeKind[NodeKind[\"ELEMENTACCESS\"] = 8] = \"ELEMENTACCESS\";\r\n    NodeKind[NodeKind[\"FALSE\"] = 9] = \"FALSE\";\r\n    NodeKind[NodeKind[\"LITERAL\"] = 10] = \"LITERAL\";\r\n    NodeKind[NodeKind[\"NEW\"] = 11] = \"NEW\";\r\n    NodeKind[NodeKind[\"NULL\"] = 12] = \"NULL\";\r\n    NodeKind[NodeKind[\"PARENTHESIZED\"] = 13] = \"PARENTHESIZED\";\r\n    NodeKind[NodeKind[\"PROPERTYACCESS\"] = 14] = \"PROPERTYACCESS\";\r\n    NodeKind[NodeKind[\"TERNARY\"] = 15] = \"TERNARY\";\r\n    NodeKind[NodeKind[\"SUPER\"] = 16] = \"SUPER\";\r\n    NodeKind[NodeKind[\"THIS\"] = 17] = \"THIS\";\r\n    NodeKind[NodeKind[\"TRUE\"] = 18] = \"TRUE\";\r\n    NodeKind[NodeKind[\"CONSTRUCTOR\"] = 19] = \"CONSTRUCTOR\";\r\n    NodeKind[NodeKind[\"UNARYPOSTFIX\"] = 20] = \"UNARYPOSTFIX\";\r\n    NodeKind[NodeKind[\"UNARYPREFIX\"] = 21] = \"UNARYPREFIX\";\r\n    // statements\r\n    NodeKind[NodeKind[\"BLOCK\"] = 22] = \"BLOCK\";\r\n    NodeKind[NodeKind[\"BREAK\"] = 23] = \"BREAK\";\r\n    NodeKind[NodeKind[\"CONTINUE\"] = 24] = \"CONTINUE\";\r\n    NodeKind[NodeKind[\"DO\"] = 25] = \"DO\";\r\n    NodeKind[NodeKind[\"EMPTY\"] = 26] = \"EMPTY\";\r\n    NodeKind[NodeKind[\"EXPORT\"] = 27] = \"EXPORT\";\r\n    NodeKind[NodeKind[\"EXPORTIMPORT\"] = 28] = \"EXPORTIMPORT\";\r\n    NodeKind[NodeKind[\"EXPRESSION\"] = 29] = \"EXPRESSION\";\r\n    NodeKind[NodeKind[\"FOR\"] = 30] = \"FOR\";\r\n    NodeKind[NodeKind[\"IF\"] = 31] = \"IF\";\r\n    NodeKind[NodeKind[\"IMPORT\"] = 32] = \"IMPORT\";\r\n    NodeKind[NodeKind[\"RETURN\"] = 33] = \"RETURN\";\r\n    NodeKind[NodeKind[\"SWITCH\"] = 34] = \"SWITCH\";\r\n    NodeKind[NodeKind[\"THROW\"] = 35] = \"THROW\";\r\n    NodeKind[NodeKind[\"TRY\"] = 36] = \"TRY\";\r\n    NodeKind[NodeKind[\"VARIABLE\"] = 37] = \"VARIABLE\";\r\n    NodeKind[NodeKind[\"WHILE\"] = 38] = \"WHILE\";\r\n    // declaration statements\r\n    NodeKind[NodeKind[\"CLASSDECLARATION\"] = 39] = \"CLASSDECLARATION\";\r\n    NodeKind[NodeKind[\"ENUMDECLARATION\"] = 40] = \"ENUMDECLARATION\";\r\n    NodeKind[NodeKind[\"ENUMVALUEDECLARATION\"] = 41] = \"ENUMVALUEDECLARATION\";\r\n    NodeKind[NodeKind[\"FIELDDECLARATION\"] = 42] = \"FIELDDECLARATION\";\r\n    NodeKind[NodeKind[\"FUNCTIONDECLARATION\"] = 43] = \"FUNCTIONDECLARATION\";\r\n    NodeKind[NodeKind[\"IMPORTDECLARATION\"] = 44] = \"IMPORTDECLARATION\";\r\n    NodeKind[NodeKind[\"INTERFACEDECLARATION\"] = 45] = \"INTERFACEDECLARATION\";\r\n    NodeKind[NodeKind[\"METHODDECLARATION\"] = 46] = \"METHODDECLARATION\";\r\n    NodeKind[NodeKind[\"NAMESPACEDECLARATION\"] = 47] = \"NAMESPACEDECLARATION\";\r\n    NodeKind[NodeKind[\"TYPEDECLARATION\"] = 48] = \"TYPEDECLARATION\";\r\n    NodeKind[NodeKind[\"VARIABLEDECLARATION\"] = 49] = \"VARIABLEDECLARATION\";\r\n    // other\r\n    NodeKind[NodeKind[\"DECORATOR\"] = 50] = \"DECORATOR\";\r\n    NodeKind[NodeKind[\"EXPORTMEMBER\"] = 51] = \"EXPORTMEMBER\";\r\n    NodeKind[NodeKind[\"MODIFIER\"] = 52] = \"MODIFIER\";\r\n    NodeKind[NodeKind[\"PARAMETER\"] = 53] = \"PARAMETER\";\r\n    NodeKind[NodeKind[\"SWITCHCASE\"] = 54] = \"SWITCHCASE\";\r\n})(NodeKind = exports.NodeKind || (exports.NodeKind = {}));\r\n/** Base class of all nodes. */\r\nvar Node = /** @class */ (function () {\r\n    function Node() {\r\n        /** Parent node. */\r\n        this.parent = null;\r\n    }\r\n    // types\r\n    Node.createType = function (identifier, typeArguments, isNullable, range) {\r\n        var type = new TypeNode();\r\n        type.range = range;\r\n        type.name = identifier;\r\n        type.typeArguments = typeArguments;\r\n        type.isNullable = isNullable;\r\n        return type;\r\n    };\r\n    // expressions\r\n    Node.createIdentifierExpression = function (name, range) {\r\n        var expr = new IdentifierExpression();\r\n        expr.range = range;\r\n        expr.text = name;\r\n        return expr;\r\n    };\r\n    Node.createArrayLiteralExpression = function (elements, range) {\r\n        var expr = new ArrayLiteralExpression();\r\n        expr.range = range;\r\n        expr.elementExpressions = elements;\r\n        setParentOpt(elements, expr);\r\n        return expr;\r\n    };\r\n    Node.createAssertionExpression = function (assertionKind, expression, toType, range) {\r\n        var expr = new AssertionExpression();\r\n        expr.range = range;\r\n        expr.assertionKind = assertionKind;\r\n        expr.expression = expression;\r\n        expression.parent = expr;\r\n        expr.toType = toType;\r\n        toType.parent = expr;\r\n        return expr;\r\n    };\r\n    Node.createBinaryExpression = function (operator, left, right, range) {\r\n        var expr = new BinaryExpression();\r\n        expr.range = range;\r\n        expr.operator = operator;\r\n        expr.left = left;\r\n        left.parent = expr;\r\n        expr.right = right;\r\n        right.parent = expr;\r\n        return expr;\r\n    };\r\n    Node.createCallExpression = function (expression, typeArgs, args, range) {\r\n        var expr = new CallExpression();\r\n        expr.range = range;\r\n        expr.expression = expression;\r\n        expression.parent = expr;\r\n        expr.typeArguments = typeArgs;\r\n        if (typeArgs)\r\n            setParent(typeArgs, expr);\r\n        expr.arguments = args;\r\n        setParent(args, expr);\r\n        return expr;\r\n    };\r\n    Node.createCommaExpression = function (expressions, range) {\r\n        var expr = new CommaExpression();\r\n        expr.range = range;\r\n        expr.expressions = expressions;\r\n        setParent(expressions, expr);\r\n        return expr;\r\n    };\r\n    Node.createConstructorExpression = function (range) {\r\n        var expr = new ConstructorExpression();\r\n        expr.range = range;\r\n        return expr;\r\n    };\r\n    Node.createElementAccessExpression = function (expression, element, range) {\r\n        var expr = new ElementAccessExpression();\r\n        expr.range = range;\r\n        expr.expression = expression;\r\n        expression.parent = expr;\r\n        expr.elementExpression = element;\r\n        element.parent = expr;\r\n        return expr;\r\n    };\r\n    Node.createFalseExpression = function (range) {\r\n        var expr = new FalseExpression();\r\n        expr.range = range;\r\n        return expr;\r\n    };\r\n    Node.createFloatLiteralExpression = function (value, range) {\r\n        var expr = new FloatLiteralExpression();\r\n        expr.range = range;\r\n        expr.value = value;\r\n        return expr;\r\n    };\r\n    Node.createIntegerLiteralExpression = function (value, range) {\r\n        var expr = new IntegerLiteralExpression();\r\n        expr.range = range;\r\n        expr.value = value;\r\n        return expr;\r\n    };\r\n    Node.createNewExpression = function (expression, typeArgs, args, range) {\r\n        var expr = new NewExpression();\r\n        expr.range = range;\r\n        expr.expression = expression;\r\n        expression.parent = expr;\r\n        expr.typeArguments = typeArgs;\r\n        if (typeArgs)\r\n            setParent(typeArgs, expr);\r\n        expr.arguments = args;\r\n        setParent(args, expr);\r\n        return expr;\r\n    };\r\n    Node.createNullExpression = function (range) {\r\n        var expr = new NullExpression();\r\n        expr.range = range;\r\n        return expr;\r\n    };\r\n    Node.createParenthesizedExpression = function (expression, range) {\r\n        var expr = new ParenthesizedExpression();\r\n        expr.range = range;\r\n        expr.expression = expression;\r\n        expression.parent = expr;\r\n        return expr;\r\n    };\r\n    Node.createPropertyAccessExpression = function (expression, property, range) {\r\n        var expr = new PropertyAccessExpression();\r\n        expr.range = range;\r\n        expr.expression = expression;\r\n        expression.parent = expr;\r\n        expr.property = property;\r\n        property.parent = expr;\r\n        return expr;\r\n    };\r\n    Node.createRegexpLiteralExpression = function (pattern, flags, range) {\r\n        var expr = new RegexpLiteralExpression();\r\n        expr.range = range;\r\n        expr.pattern = pattern;\r\n        expr.patternFlags = flags;\r\n        return expr;\r\n    };\r\n    Node.createTernaryExpression = function (condition, ifThen, ifElse, range) {\r\n        var expr = new TernaryExpression();\r\n        expr.range = range;\r\n        expr.condition = condition;\r\n        condition.parent = expr;\r\n        expr.ifThen = ifThen;\r\n        ifThen.parent = expr;\r\n        expr.ifElse = ifElse;\r\n        ifElse.parent = expr;\r\n        return expr;\r\n    };\r\n    Node.createStringLiteralExpression = function (value, range) {\r\n        var expr = new StringLiteralExpression();\r\n        expr.range = range;\r\n        expr.value = value;\r\n        return expr;\r\n    };\r\n    Node.createSuperExpression = function (range) {\r\n        var expr = new SuperExpression();\r\n        expr.range = range;\r\n        return expr;\r\n    };\r\n    Node.createThisExpression = function (range) {\r\n        var expr = new ThisExpression();\r\n        expr.range = range;\r\n        return expr;\r\n    };\r\n    Node.createTrueExpression = function (range) {\r\n        var expr = new TrueExpression();\r\n        expr.range = range;\r\n        return expr;\r\n    };\r\n    Node.createUnaryPostfixExpression = function (operator, operand, range) {\r\n        var expr = new UnaryPostfixExpression();\r\n        expr.range = range;\r\n        expr.operator = operator;\r\n        expr.operand = operand;\r\n        operand.parent = expr;\r\n        return expr;\r\n    };\r\n    Node.createUnaryPrefixExpression = function (operator, operand, range) {\r\n        var expr = new UnaryPrefixExpression();\r\n        expr.range = range;\r\n        expr.operator = operator;\r\n        expr.operand = operand;\r\n        operand.parent = expr;\r\n        return expr;\r\n    };\r\n    // statements\r\n    Node.createBlockStatement = function (statements, range) {\r\n        var stmt = new BlockStatement();\r\n        stmt.range = range;\r\n        stmt.statements = statements;\r\n        setParent(statements, stmt);\r\n        return stmt;\r\n    };\r\n    Node.createBreakStatement = function (label, range) {\r\n        var stmt = new BreakStatement();\r\n        stmt.range = range;\r\n        stmt.label = label;\r\n        if (label)\r\n            label.parent = stmt;\r\n        return stmt;\r\n    };\r\n    Node.createClassDeclaration = function (identifier, typeParameters, extendsType, implementsTypes, members, modifiers, decorators, range) {\r\n        var stmt = new ClassDeclaration();\r\n        stmt.range = range;\r\n        stmt.name = identifier;\r\n        identifier.parent = stmt;\r\n        stmt.typeParameters = typeParameters;\r\n        setParent(typeParameters, stmt);\r\n        stmt.extendsType = extendsType;\r\n        if (extendsType)\r\n            extendsType.parent = stmt;\r\n        stmt.implementsTypes = implementsTypes;\r\n        setParent(implementsTypes, stmt);\r\n        stmt.members = members;\r\n        setParent(members, stmt);\r\n        stmt.modifiers = modifiers;\r\n        if (modifiers)\r\n            setParent(modifiers, stmt);\r\n        stmt.decorators = decorators;\r\n        if (decorators)\r\n            setParent(decorators, stmt);\r\n        return stmt;\r\n    };\r\n    Node.createContinueStatement = function (label, range) {\r\n        var stmt = new ContinueStatement();\r\n        stmt.range = range;\r\n        stmt.label = label;\r\n        if (label)\r\n            label.parent = stmt;\r\n        return stmt;\r\n    };\r\n    Node.createDecorator = function (expression, args, range) {\r\n        var stmt = new Decorator();\r\n        stmt.range = range;\r\n        stmt.name = expression;\r\n        expression.parent = stmt;\r\n        stmt.arguments = args;\r\n        if (args)\r\n            setParent(args, stmt);\r\n        if (expression.kind == NodeKind.IDENTIFIER) {\r\n            switch (expression.text) {\r\n                case \"global\":\r\n                    stmt.decoratorKind = 1 /* GLOBAL */;\r\n                    break;\r\n                case \"operator\":\r\n                    stmt.decoratorKind = 2 /* OPERATOR */;\r\n                    break;\r\n                case \"unmanaged\":\r\n                    stmt.decoratorKind = 3 /* UNMANAGED */;\r\n                    break;\r\n                case \"offset\":\r\n                    stmt.decoratorKind = 4 /* OFFSET */;\r\n                    break;\r\n                default:\r\n                    stmt.decoratorKind = 0 /* CUSTOM */;\r\n                    break;\r\n            }\r\n        }\r\n        else\r\n            stmt.decoratorKind = 0 /* CUSTOM */;\r\n        return stmt;\r\n    };\r\n    Node.createDoStatement = function (statement, condition, range) {\r\n        var stmt = new DoStatement();\r\n        stmt.range = range;\r\n        stmt.statement = statement;\r\n        statement.parent = stmt;\r\n        stmt.condition = condition;\r\n        condition.parent = stmt;\r\n        return stmt;\r\n    };\r\n    Node.createEmptyStatement = function (range) {\r\n        var stmt = new EmptyStatement();\r\n        stmt.range = range;\r\n        return stmt;\r\n    };\r\n    Node.createEnumDeclaration = function (name, members, modifiers, decorators, range) {\r\n        var stmt = new EnumDeclaration();\r\n        stmt.range = range;\r\n        stmt.name = name;\r\n        name.parent = stmt;\r\n        stmt.values = members;\r\n        setParent(members, stmt);\r\n        stmt.modifiers = modifiers;\r\n        if (modifiers)\r\n            setParent(modifiers, stmt);\r\n        stmt.decorators = decorators;\r\n        if (decorators)\r\n            setParent(decorators, stmt);\r\n        return stmt;\r\n    };\r\n    Node.createEnumValueDeclaration = function (name, value, range) {\r\n        var stmt = new EnumValueDeclaration();\r\n        stmt.range = range;\r\n        stmt.name = name;\r\n        name.parent = stmt;\r\n        stmt.value = value;\r\n        if (value)\r\n            value.parent = stmt;\r\n        return stmt;\r\n    };\r\n    Node.createExportStatement = function (members, path, modifiers, range) {\r\n        var stmt = new ExportStatement();\r\n        stmt.range = range;\r\n        stmt.members = members;\r\n        setParent(members, stmt);\r\n        stmt.path = path;\r\n        if (path) {\r\n            var normalizedPath = path_1.normalize(path.value);\r\n            if (path.value.startsWith(\".\"))\r\n                stmt.normalizedPath = path_1.resolve(normalizedPath, range.source.normalizedPath);\r\n            else\r\n                stmt.normalizedPath = normalizedPath;\r\n            stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\r\n        }\r\n        else {\r\n            stmt.normalizedPath = null;\r\n            stmt.internalPath = null;\r\n        }\r\n        stmt.modifiers = modifiers;\r\n        if (modifiers)\r\n            setParent(modifiers, stmt);\r\n        return stmt;\r\n    };\r\n    Node.createExportImportStatement = function (name, externalName, range) {\r\n        var stmt = new ExportImportStatement();\r\n        stmt.range = range;\r\n        stmt.name = name;\r\n        name.parent = stmt;\r\n        stmt.externalName = externalName;\r\n        externalName.parent = stmt;\r\n        return stmt;\r\n    };\r\n    Node.createExportMember = function (name, externalName, range) {\r\n        var elem = new ExportMember();\r\n        elem.range = range;\r\n        elem.name = name;\r\n        name.parent = elem;\r\n        if (!externalName)\r\n            externalName = name;\r\n        else\r\n            externalName.parent = elem;\r\n        elem.externalName = externalName;\r\n        return elem;\r\n    };\r\n    Node.createExpressionStatement = function (expression) {\r\n        var stmt = new ExpressionStatement();\r\n        stmt.range = expression.range;\r\n        stmt.expression = expression;\r\n        expression.parent = stmt;\r\n        return stmt;\r\n    };\r\n    Node.createIfStatement = function (condition, ifTrue, ifFalse, range) {\r\n        var stmt = new IfStatement();\r\n        stmt.range = range;\r\n        stmt.condition = condition;\r\n        condition.parent = stmt;\r\n        stmt.ifTrue = ifTrue;\r\n        ifTrue.parent = stmt;\r\n        stmt.ifFalse = ifFalse;\r\n        if (ifFalse)\r\n            ifFalse.parent = stmt;\r\n        return stmt;\r\n    };\r\n    Node.createImportStatement = function (decls, path, range) {\r\n        var stmt = new ImportStatement();\r\n        stmt.range = range;\r\n        stmt.declarations = decls;\r\n        if (decls)\r\n            setParent(decls, stmt);\r\n        stmt.namespaceName = null;\r\n        stmt.path = path;\r\n        var normalizedPath = path_1.normalize(path.value);\r\n        if (path.value.startsWith(\".\"))\r\n            stmt.normalizedPath = path_1.resolve(normalizedPath, range.source.normalizedPath);\r\n        else\r\n            stmt.normalizedPath = normalizedPath;\r\n        stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\r\n        return stmt;\r\n    };\r\n    Node.createImportStatementWithWildcard = function (identifier, path, range) {\r\n        var stmt = new ImportStatement();\r\n        stmt.range = range;\r\n        stmt.declarations = null;\r\n        stmt.namespaceName = identifier;\r\n        stmt.path = path;\r\n        stmt.normalizedPath = path_1.resolve(path_1.normalize(path.value), range.source.normalizedPath);\r\n        stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\r\n        return stmt;\r\n    };\r\n    Node.createImportDeclaration = function (externalName, name, range) {\r\n        var elem = new ImportDeclaration();\r\n        elem.range = range;\r\n        elem.externalName = externalName;\r\n        externalName.parent = elem;\r\n        if (!name)\r\n            name = externalName;\r\n        else\r\n            name.parent = elem;\r\n        elem.name = name;\r\n        return elem;\r\n    };\r\n    Node.createInterfaceDeclaration = function (name, extendsType, members, modifiers, range) {\r\n        var stmt = new InterfaceDeclaration();\r\n        stmt.range = range;\r\n        stmt.name = name;\r\n        name.parent = stmt;\r\n        stmt.extendsType = extendsType;\r\n        if (extendsType)\r\n            extendsType.parent = stmt;\r\n        stmt.members = members;\r\n        setParent(members, stmt);\r\n        stmt.modifiers = modifiers;\r\n        if (modifiers)\r\n            setParent(modifiers, stmt);\r\n        return stmt;\r\n    };\r\n    Node.createFieldDeclaration = function (name, type, initializer, modifiers, decorators, range) {\r\n        var stmt = new FieldDeclaration();\r\n        stmt.range = range;\r\n        stmt.name = name;\r\n        name.parent = stmt;\r\n        stmt.type = type;\r\n        if (type)\r\n            type.parent = stmt;\r\n        stmt.initializer = initializer;\r\n        if (initializer)\r\n            initializer.parent = stmt;\r\n        stmt.modifiers = modifiers;\r\n        if (modifiers)\r\n            setParent(modifiers, stmt);\r\n        stmt.decorators = decorators;\r\n        if (decorators)\r\n            setParent(decorators, stmt);\r\n        return stmt;\r\n    };\r\n    Node.createForStatement = function (initializer, condition, incrementor, statement, range) {\r\n        var stmt = new ForStatement();\r\n        stmt.range = range;\r\n        stmt.initializer = initializer;\r\n        if (initializer)\r\n            initializer.parent = stmt;\r\n        stmt.condition = condition;\r\n        if (condition)\r\n            condition.parent = stmt;\r\n        stmt.incrementor = incrementor;\r\n        if (incrementor)\r\n            incrementor.parent = stmt;\r\n        stmt.statement = statement;\r\n        statement.parent = stmt;\r\n        return stmt;\r\n    };\r\n    Node.createTypeParameter = function (name, extendsType, range) {\r\n        var elem = new TypeParameter();\r\n        elem.range = range;\r\n        elem.name = name;\r\n        name.parent = elem;\r\n        elem.extendsType = extendsType;\r\n        if (extendsType)\r\n            extendsType.parent = elem;\r\n        return elem;\r\n    };\r\n    Node.createParameter = function (name, type, initializer, kind, range) {\r\n        var elem = new Parameter();\r\n        elem.range = range;\r\n        elem.name = name;\r\n        name.parent = elem;\r\n        elem.type = type;\r\n        if (type)\r\n            type.parent = elem;\r\n        elem.initializer = initializer;\r\n        if (initializer)\r\n            initializer.parent = elem;\r\n        elem.parameterKind = kind;\r\n        return elem;\r\n    };\r\n    Node.createFunctionDeclaration = function (name, typeParameters, parameters, returnType, statements, modifiers, decorators, range) {\r\n        var stmt = new FunctionDeclaration();\r\n        stmt.range = range;\r\n        stmt.name = name;\r\n        name.parent = stmt;\r\n        stmt.typeParameters = typeParameters;\r\n        setParent(typeParameters, stmt);\r\n        stmt.parameters = parameters;\r\n        setParent(parameters, stmt);\r\n        stmt.returnType = returnType;\r\n        if (returnType)\r\n            returnType.parent = stmt;\r\n        stmt.statements = statements;\r\n        if (statements)\r\n            setParent(statements, stmt);\r\n        stmt.modifiers = modifiers;\r\n        if (modifiers)\r\n            setParent(modifiers, stmt);\r\n        stmt.decorators = decorators;\r\n        if (decorators)\r\n            setParent(decorators, stmt);\r\n        return stmt;\r\n    };\r\n    Node.createMethodDeclaration = function (name, typeParameters, parameters, returnType, statements, modifiers, decorators, range) {\r\n        var stmt = new MethodDeclaration();\r\n        stmt.range = range;\r\n        stmt.name = name;\r\n        name.parent = stmt;\r\n        stmt.typeParameters = typeParameters;\r\n        setParent(typeParameters, stmt);\r\n        stmt.parameters = parameters;\r\n        setParent(parameters, stmt);\r\n        stmt.returnType = returnType;\r\n        if (returnType)\r\n            returnType.parent = stmt;\r\n        stmt.statements = statements;\r\n        if (statements)\r\n            setParent(statements, stmt);\r\n        stmt.modifiers = modifiers;\r\n        if (modifiers)\r\n            setParent(modifiers, stmt);\r\n        stmt.decorators = decorators;\r\n        if (decorators)\r\n            setParent(decorators, stmt);\r\n        return stmt;\r\n    };\r\n    Node.createModifier = function (kind, range) {\r\n        var elem = new Modifier();\r\n        elem.range = range;\r\n        elem.modifierKind = kind;\r\n        return elem;\r\n    };\r\n    Node.createNamespaceDeclaration = function (name, members, modifiers, decorators, range) {\r\n        var stmt = new NamespaceDeclaration();\r\n        stmt.range = range;\r\n        stmt.name = name;\r\n        name.parent = stmt;\r\n        stmt.members = members;\r\n        setParent(members, stmt);\r\n        stmt.modifiers = modifiers;\r\n        if (modifiers)\r\n            setParent(modifiers, stmt);\r\n        stmt.decorators = decorators;\r\n        if (decorators)\r\n            setParent(decorators, stmt);\r\n        return stmt;\r\n    };\r\n    Node.createReturnStatement = function (value, range) {\r\n        var stmt = new ReturnStatement();\r\n        stmt.range = range;\r\n        stmt.value = value;\r\n        if (value)\r\n            value.parent = stmt;\r\n        return stmt;\r\n    };\r\n    Node.createSwitchStatement = function (condition, cases, range) {\r\n        var stmt = new SwitchStatement();\r\n        stmt.range = range;\r\n        stmt.condition = condition;\r\n        condition.parent = stmt;\r\n        stmt.cases = cases;\r\n        setParent(cases, stmt);\r\n        return stmt;\r\n    };\r\n    Node.createSwitchCase = function (label, statements, range) {\r\n        var elem = new SwitchCase();\r\n        elem.range = range;\r\n        elem.label = label;\r\n        if (label)\r\n            label.parent = elem;\r\n        elem.statements = statements;\r\n        setParent(statements, elem);\r\n        return elem;\r\n    };\r\n    Node.createThrowStatement = function (value, range) {\r\n        var stmt = new ThrowStatement();\r\n        stmt.range = range;\r\n        stmt.value = value;\r\n        value.parent = stmt;\r\n        return stmt;\r\n    };\r\n    Node.createTryStatement = function (statements, catchVariable, catchStatements, finallyStatements, range) {\r\n        var stmt = new TryStatement();\r\n        stmt.range = range;\r\n        stmt.statements = statements;\r\n        setParent(statements, stmt);\r\n        stmt.catchVariable = catchVariable;\r\n        if (catchVariable)\r\n            catchVariable.parent = stmt;\r\n        stmt.catchStatements = catchStatements;\r\n        if (catchStatements)\r\n            setParent(catchStatements, stmt);\r\n        stmt.finallyStatements = finallyStatements;\r\n        if (finallyStatements)\r\n            setParent(finallyStatements, stmt);\r\n        return stmt;\r\n    };\r\n    Node.createTypeDeclaration = function (name, alias, modifiers, decorators, range) {\r\n        var stmt = new TypeDeclaration();\r\n        stmt.range = range;\r\n        stmt.name = name;\r\n        name.parent = stmt;\r\n        stmt.alias = alias;\r\n        alias.parent = stmt;\r\n        stmt.modifiers = modifiers;\r\n        if (modifiers)\r\n            setParent(modifiers, stmt);\r\n        stmt.decorators = decorators;\r\n        if (decorators)\r\n            setParent(decorators, stmt);\r\n        return stmt;\r\n    };\r\n    Node.createVariableStatement = function (declarations, modifiers, decorators, range) {\r\n        var stmt = new VariableStatement();\r\n        stmt.range = range;\r\n        stmt.declarations = declarations;\r\n        setParent(declarations, stmt);\r\n        stmt.modifiers = modifiers;\r\n        if (modifiers)\r\n            setParent(modifiers, stmt);\r\n        stmt.decorators = decorators;\r\n        if (decorators)\r\n            setParent(decorators, stmt);\r\n        return stmt;\r\n    };\r\n    Node.createVariableDeclaration = function (name, type, initializer, modifiers, decorators, range) {\r\n        var elem = new VariableDeclaration();\r\n        elem.range = range;\r\n        elem.name = name;\r\n        name.parent = elem;\r\n        elem.type = type;\r\n        if (type)\r\n            type.parent = elem;\r\n        elem.initializer = initializer;\r\n        if (initializer)\r\n            initializer.parent = elem;\r\n        elem.modifiers = modifiers; // inherited from parent VariableStatement\r\n        elem.decorators = decorators; // inherited\r\n        return elem;\r\n    };\r\n    Node.createWhileStatement = function (condition, statement, range) {\r\n        var stmt = new WhileStatement();\r\n        stmt.range = range;\r\n        stmt.condition = condition;\r\n        condition.parent = stmt;\r\n        stmt.statement = statement;\r\n        statement.parent = stmt;\r\n        return stmt;\r\n    };\r\n    return Node;\r\n}());\r\nexports.Node = Node;\r\n// types\r\n/** Represents a type annotation. */\r\nvar TypeNode = /** @class */ (function (_super) {\r\n    __extends(TypeNode, _super);\r\n    function TypeNode() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.kind = NodeKind.TYPE;\r\n        return _this;\r\n    }\r\n    return TypeNode;\r\n}(Node));\r\nexports.TypeNode = TypeNode;\r\n/** Represents a type parameter. */\r\nvar TypeParameter = /** @class */ (function (_super) {\r\n    __extends(TypeParameter, _super);\r\n    function TypeParameter() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.kind = NodeKind.TYPEPARAMETER;\r\n        return _this;\r\n    }\r\n    return TypeParameter;\r\n}(Node));\r\nexports.TypeParameter = TypeParameter;\r\n// expressions\r\n/** Base class of all expression nodes. */\r\nvar Expression = /** @class */ (function (_super) {\r\n    __extends(Expression, _super);\r\n    function Expression() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    return Expression;\r\n}(Node));\r\nexports.Expression = Expression;\r\n/** Represents an identifier expression. */\r\nvar IdentifierExpression = /** @class */ (function (_super) {\r\n    __extends(IdentifierExpression, _super);\r\n    function IdentifierExpression() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.kind = NodeKind.IDENTIFIER;\r\n        return _this;\r\n    }\r\n    return IdentifierExpression;\r\n}(Expression));\r\nexports.IdentifierExpression = IdentifierExpression;\r\n/** Indicates the kind of a literal. */\r\nvar LiteralKind;\r\n(function (LiteralKind) {\r\n    LiteralKind[LiteralKind[\"FLOAT\"] = 0] = \"FLOAT\";\r\n    LiteralKind[LiteralKind[\"INTEGER\"] = 1] = \"INTEGER\";\r\n    LiteralKind[LiteralKind[\"STRING\"] = 2] = \"STRING\";\r\n    LiteralKind[LiteralKind[\"REGEXP\"] = 3] = \"REGEXP\";\r\n    LiteralKind[LiteralKind[\"ARRAY\"] = 4] = \"ARRAY\";\r\n    LiteralKind[LiteralKind[\"OBJECT\"] = 5] = \"OBJECT\";\r\n})(LiteralKind = exports.LiteralKind || (exports.LiteralKind = {}));\r\n/** Base class of all literal expressions. */\r\nvar LiteralExpression = /** @class */ (function (_super) {\r\n    __extends(LiteralExpression, _super);\r\n    function LiteralExpression() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.kind = NodeKind.LITERAL;\r\n        return _this;\r\n    }\r\n    return LiteralExpression;\r\n}(Expression));\r\nexports.LiteralExpression = LiteralExpression;\r\n/** Represents an `[]` literal expression. */\r\nvar ArrayLiteralExpression = /** @class */ (function (_super) {\r\n    __extends(ArrayLiteralExpression, _super);\r\n    function ArrayLiteralExpression() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.literalKind = 4 /* ARRAY */;\r\n        return _this;\r\n    }\r\n    return ArrayLiteralExpression;\r\n}(LiteralExpression));\r\nexports.ArrayLiteralExpression = ArrayLiteralExpression;\r\n/** Indicates the kind of an assertion. */\r\nvar AssertionKind;\r\n(function (AssertionKind) {\r\n    AssertionKind[AssertionKind[\"PREFIX\"] = 0] = \"PREFIX\";\r\n    AssertionKind[AssertionKind[\"AS\"] = 1] = \"AS\";\r\n})(AssertionKind = exports.AssertionKind || (exports.AssertionKind = {}));\r\n/** Represents an assertion expression. */\r\nvar AssertionExpression = /** @class */ (function (_super) {\r\n    __extends(AssertionExpression, _super);\r\n    function AssertionExpression() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.kind = NodeKind.ASSERTION;\r\n        return _this;\r\n    }\r\n    return AssertionExpression;\r\n}(Expression));\r\nexports.AssertionExpression = AssertionExpression;\r\n/** Represents a binary expression. */\r\nvar BinaryExpression = /** @class */ (function (_super) {\r\n    __extends(BinaryExpression, _super);\r\n    function BinaryExpression() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.kind = NodeKind.BINARY;\r\n        return _this;\r\n    }\r\n    return BinaryExpression;\r\n}(Expression));\r\nexports.BinaryExpression = BinaryExpression;\r\n/** Represents a call expression. */\r\nvar CallExpression = /** @class */ (function (_super) {\r\n    __extends(CallExpression, _super);\r\n    function CallExpression() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.kind = NodeKind.CALL;\r\n        return _this;\r\n    }\r\n    return CallExpression;\r\n}(Expression));\r\nexports.CallExpression = CallExpression;\r\n/** Represents a comma expression composed of multiple sequential expressions. */\r\nvar CommaExpression = /** @class */ (function (_super) {\r\n    __extends(CommaExpression, _super);\r\n    function CommaExpression() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.kind = NodeKind.COMMA;\r\n        return _this;\r\n    }\r\n    return CommaExpression;\r\n}(Expression));\r\nexports.CommaExpression = CommaExpression;\r\n/** Represents a `constructor` expression. */\r\nvar ConstructorExpression = /** @class */ (function (_super) {\r\n    __extends(ConstructorExpression, _super);\r\n    function ConstructorExpression() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.kind = NodeKind.CONSTRUCTOR;\r\n        _this.text = \"constructor\";\r\n        return _this;\r\n    }\r\n    return ConstructorExpression;\r\n}(IdentifierExpression));\r\nexports.ConstructorExpression = ConstructorExpression;\r\n/** Represents an element access expression, e.g., array access. */\r\nvar ElementAccessExpression = /** @class */ (function (_super) {\r\n    __extends(ElementAccessExpression, _super);\r\n    function ElementAccessExpression() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.kind = NodeKind.ELEMENTACCESS;\r\n        return _this;\r\n    }\r\n    return ElementAccessExpression;\r\n}(Expression));\r\nexports.ElementAccessExpression = ElementAccessExpression;\r\n/** Represents a float literal expression. */\r\nvar FloatLiteralExpression = /** @class */ (function (_super) {\r\n    __extends(FloatLiteralExpression, _super);\r\n    function FloatLiteralExpression() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.literalKind = 0 /* FLOAT */;\r\n        return _this;\r\n    }\r\n    return FloatLiteralExpression;\r\n}(LiteralExpression));\r\nexports.FloatLiteralExpression = FloatLiteralExpression;\r\n/** Represents an integer literal expression. */\r\nvar IntegerLiteralExpression = /** @class */ (function (_super) {\r\n    __extends(IntegerLiteralExpression, _super);\r\n    function IntegerLiteralExpression() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.literalKind = 1 /* INTEGER */;\r\n        return _this;\r\n    }\r\n    return IntegerLiteralExpression;\r\n}(LiteralExpression));\r\nexports.IntegerLiteralExpression = IntegerLiteralExpression;\r\n/** Represents a `new` expression. Like a call but with its own kind. */\r\nvar NewExpression = /** @class */ (function (_super) {\r\n    __extends(NewExpression, _super);\r\n    function NewExpression() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.kind = NodeKind.NEW;\r\n        return _this;\r\n    }\r\n    return NewExpression;\r\n}(CallExpression));\r\nexports.NewExpression = NewExpression;\r\n/** Represents a `null` expression. */\r\nvar NullExpression = /** @class */ (function (_super) {\r\n    __extends(NullExpression, _super);\r\n    function NullExpression() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.kind = NodeKind.NULL;\r\n        _this.text = \"null\";\r\n        return _this;\r\n    }\r\n    return NullExpression;\r\n}(IdentifierExpression));\r\nexports.NullExpression = NullExpression;\r\n/** Represents a parenthesized expression. */\r\nvar ParenthesizedExpression = /** @class */ (function (_super) {\r\n    __extends(ParenthesizedExpression, _super);\r\n    function ParenthesizedExpression() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.kind = NodeKind.PARENTHESIZED;\r\n        return _this;\r\n    }\r\n    return ParenthesizedExpression;\r\n}(Expression));\r\nexports.ParenthesizedExpression = ParenthesizedExpression;\r\n/** Represents a property access expression. */\r\nvar PropertyAccessExpression = /** @class */ (function (_super) {\r\n    __extends(PropertyAccessExpression, _super);\r\n    function PropertyAccessExpression() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.kind = NodeKind.PROPERTYACCESS;\r\n        return _this;\r\n    }\r\n    return PropertyAccessExpression;\r\n}(Expression));\r\nexports.PropertyAccessExpression = PropertyAccessExpression;\r\n/** Represents a regular expression literal expression. */\r\nvar RegexpLiteralExpression = /** @class */ (function (_super) {\r\n    __extends(RegexpLiteralExpression, _super);\r\n    function RegexpLiteralExpression() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.literalKind = 3 /* REGEXP */;\r\n        return _this;\r\n    }\r\n    return RegexpLiteralExpression;\r\n}(LiteralExpression));\r\nexports.RegexpLiteralExpression = RegexpLiteralExpression;\r\n/** Represents a ternary expression, i.e., short if notation. */\r\nvar TernaryExpression = /** @class */ (function (_super) {\r\n    __extends(TernaryExpression, _super);\r\n    function TernaryExpression() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.kind = NodeKind.TERNARY;\r\n        return _this;\r\n    }\r\n    return TernaryExpression;\r\n}(Expression));\r\nexports.TernaryExpression = TernaryExpression;\r\n/** Represents a string literal expression. */\r\nvar StringLiteralExpression = /** @class */ (function (_super) {\r\n    __extends(StringLiteralExpression, _super);\r\n    function StringLiteralExpression() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.literalKind = 2 /* STRING */;\r\n        return _this;\r\n    }\r\n    return StringLiteralExpression;\r\n}(LiteralExpression));\r\nexports.StringLiteralExpression = StringLiteralExpression;\r\n/** Represents a `super` expression. */\r\nvar SuperExpression = /** @class */ (function (_super) {\r\n    __extends(SuperExpression, _super);\r\n    function SuperExpression() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.kind = NodeKind.SUPER;\r\n        _this.text = \"super\";\r\n        return _this;\r\n    }\r\n    return SuperExpression;\r\n}(IdentifierExpression));\r\nexports.SuperExpression = SuperExpression;\r\n/** Represents a `this` expression. */\r\nvar ThisExpression = /** @class */ (function (_super) {\r\n    __extends(ThisExpression, _super);\r\n    function ThisExpression() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.kind = NodeKind.THIS;\r\n        _this.text = \"this\";\r\n        return _this;\r\n    }\r\n    return ThisExpression;\r\n}(IdentifierExpression));\r\nexports.ThisExpression = ThisExpression;\r\n/** Represents a `true` expression. */\r\nvar TrueExpression = /** @class */ (function (_super) {\r\n    __extends(TrueExpression, _super);\r\n    function TrueExpression() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.kind = NodeKind.TRUE;\r\n        _this.text = \"true\";\r\n        return _this;\r\n    }\r\n    return TrueExpression;\r\n}(IdentifierExpression));\r\nexports.TrueExpression = TrueExpression;\r\n/** Represents a `false` expression. */\r\nvar FalseExpression = /** @class */ (function (_super) {\r\n    __extends(FalseExpression, _super);\r\n    function FalseExpression() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.kind = NodeKind.FALSE;\r\n        _this.text = \"false\";\r\n        return _this;\r\n    }\r\n    return FalseExpression;\r\n}(IdentifierExpression));\r\nexports.FalseExpression = FalseExpression;\r\n/** Base class of all unary expressions. */\r\nvar UnaryExpression = /** @class */ (function (_super) {\r\n    __extends(UnaryExpression, _super);\r\n    function UnaryExpression() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    return UnaryExpression;\r\n}(Expression));\r\nexports.UnaryExpression = UnaryExpression;\r\n/** Represents a unary postfix expression, e.g. a postfix increment. */\r\nvar UnaryPostfixExpression = /** @class */ (function (_super) {\r\n    __extends(UnaryPostfixExpression, _super);\r\n    function UnaryPostfixExpression() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.kind = NodeKind.UNARYPOSTFIX;\r\n        return _this;\r\n    }\r\n    return UnaryPostfixExpression;\r\n}(UnaryExpression));\r\nexports.UnaryPostfixExpression = UnaryPostfixExpression;\r\n/** Represents a unary prefix expression, e.g. a negation. */\r\nvar UnaryPrefixExpression = /** @class */ (function (_super) {\r\n    __extends(UnaryPrefixExpression, _super);\r\n    function UnaryPrefixExpression() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.kind = NodeKind.UNARYPREFIX;\r\n        return _this;\r\n    }\r\n    return UnaryPrefixExpression;\r\n}(UnaryExpression));\r\nexports.UnaryPrefixExpression = UnaryPrefixExpression;\r\n// statements\r\n/** Indicates the specific kind of a modifier. */\r\nvar ModifierKind;\r\n(function (ModifierKind) {\r\n    ModifierKind[ModifierKind[\"ASYNC\"] = 0] = \"ASYNC\";\r\n    ModifierKind[ModifierKind[\"CONST\"] = 1] = \"CONST\";\r\n    ModifierKind[ModifierKind[\"LET\"] = 2] = \"LET\";\r\n    ModifierKind[ModifierKind[\"DECLARE\"] = 3] = \"DECLARE\";\r\n    ModifierKind[ModifierKind[\"EXPORT\"] = 4] = \"EXPORT\";\r\n    ModifierKind[ModifierKind[\"IMPORT\"] = 5] = \"IMPORT\";\r\n    ModifierKind[ModifierKind[\"STATIC\"] = 6] = \"STATIC\";\r\n    ModifierKind[ModifierKind[\"ABSTRACT\"] = 7] = \"ABSTRACT\";\r\n    ModifierKind[ModifierKind[\"PUBLIC\"] = 8] = \"PUBLIC\";\r\n    ModifierKind[ModifierKind[\"PRIVATE\"] = 9] = \"PRIVATE\";\r\n    ModifierKind[ModifierKind[\"PROTECTED\"] = 10] = \"PROTECTED\";\r\n    ModifierKind[ModifierKind[\"READONLY\"] = 11] = \"READONLY\";\r\n    ModifierKind[ModifierKind[\"GET\"] = 12] = \"GET\";\r\n    ModifierKind[ModifierKind[\"SET\"] = 13] = \"SET\";\r\n})(ModifierKind = exports.ModifierKind || (exports.ModifierKind = {}));\r\n/** Base class of all statement nodes. */\r\nvar Statement = /** @class */ (function (_super) {\r\n    __extends(Statement, _super);\r\n    function Statement() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    return Statement;\r\n}(Node));\r\nexports.Statement = Statement;\r\n/** Indicates the specific kind of a source. */\r\nvar SourceKind;\r\n(function (SourceKind) {\r\n    /** Default source. Usually imported from an entry file. */\r\n    SourceKind[SourceKind[\"DEFAULT\"] = 0] = \"DEFAULT\";\r\n    /** Entry file. */\r\n    SourceKind[SourceKind[\"ENTRY\"] = 1] = \"ENTRY\";\r\n    /** Library file. */\r\n    SourceKind[SourceKind[\"LIBRARY\"] = 2] = \"LIBRARY\";\r\n})(SourceKind = exports.SourceKind || (exports.SourceKind = {}));\r\n/** A top-level source node. */\r\nvar Source = /** @class */ (function (_super) {\r\n    __extends(Source, _super);\r\n    /** Constructs a new source node. */\r\n    function Source(normalizedPath, text, kind) {\r\n        var _this = _super.call(this) || this;\r\n        _this.kind = NodeKind.SOURCE;\r\n        _this.parent = null;\r\n        /** Tokenizer reference. */\r\n        _this.tokenizer = null;\r\n        /** Source map index. */\r\n        _this.debugInfoIndex = -1;\r\n        _this.sourceKind = kind;\r\n        _this.normalizedPath = normalizedPath;\r\n        _this.internalPath = mangleInternalPath(_this.normalizedPath);\r\n        _this.statements = new Array();\r\n        _this.range = new tokenizer_1.Range(_this, 0, text.length);\r\n        _this.text = text;\r\n        return _this;\r\n    }\r\n    Object.defineProperty(Source.prototype, \"isEntry\", {\r\n        /** Tests if this source is an entry file. */\r\n        get: function () { return this.sourceKind == SourceKind.ENTRY; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Source.prototype, \"isLibrary\", {\r\n        /** Tests if this source is a stdlib file. */\r\n        get: function () { return this.sourceKind == SourceKind.LIBRARY; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return Source;\r\n}(Node));\r\nexports.Source = Source;\r\n/** Base class of all declaration statements. */\r\nvar DeclarationStatement = /** @class */ (function (_super) {\r\n    __extends(DeclarationStatement, _super);\r\n    function DeclarationStatement() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        /** Array of decorators. */\r\n        _this.decorators = null;\r\n        _this.cachedProgramLevelInternalName = null;\r\n        _this.cachedFileLevelInternalName = null;\r\n        return _this;\r\n    }\r\n    Object.defineProperty(DeclarationStatement.prototype, \"programLevelInternalName\", {\r\n        /** Gets the mangled program-level internal name of this declaration. */\r\n        get: function () {\r\n            if (!this.cachedProgramLevelInternalName)\r\n                this.cachedProgramLevelInternalName = mangleInternalName(this, true);\r\n            return this.cachedProgramLevelInternalName;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DeclarationStatement.prototype, \"fileLevelInternalName\", {\r\n        /** Gets the mangled file-level internal name of this declaration. */\r\n        get: function () {\r\n            if (!this.cachedFileLevelInternalName)\r\n                this.cachedFileLevelInternalName = mangleInternalName(this, false);\r\n            return this.cachedFileLevelInternalName;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DeclarationStatement.prototype, \"isTopLevel\", {\r\n        /** Tests if this is a top-level declaration within its source file. */\r\n        get: function () {\r\n            var parent = this.parent;\r\n            if (!parent)\r\n                return false;\r\n            if (parent.kind == NodeKind.VARIABLE)\r\n                if (!(parent = parent.parent))\r\n                    return false;\r\n            return parent.kind == NodeKind.SOURCE;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DeclarationStatement.prototype, \"isTopLevelExport\", {\r\n        /** Tests if this declaration is a top-level export within its source file. */\r\n        get: function () {\r\n            var parent = this.parent;\r\n            if (!parent)\r\n                return false;\r\n            if (parent.kind == NodeKind.VARIABLE)\r\n                if (!(parent = parent.parent))\r\n                    return false;\r\n            if (parent.kind == NodeKind.NAMESPACEDECLARATION)\r\n                return (hasModifier(ModifierKind.EXPORT, this.modifiers) &&\r\n                    parent.isTopLevelExport);\r\n            if (parent.kind == NodeKind.CLASSDECLARATION)\r\n                return (hasModifier(ModifierKind.STATIC, this.modifiers) &&\r\n                    parent.isTopLevelExport);\r\n            return (parent.kind == NodeKind.SOURCE &&\r\n                hasModifier(ModifierKind.EXPORT, this.modifiers));\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /** Tests if this declaration needs an explicit export. */\r\n    DeclarationStatement.prototype.needsExplicitExport = function (member) {\r\n        // This is necessary because module-level exports are automatically created\r\n        // for top level declarations of all sorts. This function essentially tests\r\n        // that there isn't a otherwise duplicate top-level export already.\r\n        return (member.name.text != member.externalName.text || // if aliased\r\n            this.range.source != member.range.source || // if a re-export\r\n            !this.isTopLevelExport // if not top-level\r\n        );\r\n    };\r\n    return DeclarationStatement;\r\n}(Statement));\r\nexports.DeclarationStatement = DeclarationStatement;\r\n/** Base class of all variable-like declaration statements. */\r\nvar VariableLikeDeclarationStatement = /** @class */ (function (_super) {\r\n    __extends(VariableLikeDeclarationStatement, _super);\r\n    function VariableLikeDeclarationStatement() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    return VariableLikeDeclarationStatement;\r\n}(DeclarationStatement));\r\nexports.VariableLikeDeclarationStatement = VariableLikeDeclarationStatement;\r\n/** Represents a block statement. */\r\nvar BlockStatement = /** @class */ (function (_super) {\r\n    __extends(BlockStatement, _super);\r\n    function BlockStatement() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.kind = NodeKind.BLOCK;\r\n        return _this;\r\n    }\r\n    return BlockStatement;\r\n}(Statement));\r\nexports.BlockStatement = BlockStatement;\r\n/** Represents a `break` statement. */\r\nvar BreakStatement = /** @class */ (function (_super) {\r\n    __extends(BreakStatement, _super);\r\n    function BreakStatement() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.kind = NodeKind.BREAK;\r\n        return _this;\r\n    }\r\n    return BreakStatement;\r\n}(Statement));\r\nexports.BreakStatement = BreakStatement;\r\n/** Represents a `class` declaration. */\r\nvar ClassDeclaration = /** @class */ (function (_super) {\r\n    __extends(ClassDeclaration, _super);\r\n    function ClassDeclaration() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.kind = NodeKind.CLASSDECLARATION;\r\n        return _this;\r\n    }\r\n    return ClassDeclaration;\r\n}(DeclarationStatement));\r\nexports.ClassDeclaration = ClassDeclaration;\r\n/** Represents a `continue` statement. */\r\nvar ContinueStatement = /** @class */ (function (_super) {\r\n    __extends(ContinueStatement, _super);\r\n    function ContinueStatement() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.kind = NodeKind.CONTINUE;\r\n        return _this;\r\n    }\r\n    return ContinueStatement;\r\n}(Statement));\r\nexports.ContinueStatement = ContinueStatement;\r\n/** Built-in decorator kinds. */\r\nvar DecoratorKind;\r\n(function (DecoratorKind) {\r\n    DecoratorKind[DecoratorKind[\"CUSTOM\"] = 0] = \"CUSTOM\";\r\n    DecoratorKind[DecoratorKind[\"GLOBAL\"] = 1] = \"GLOBAL\";\r\n    DecoratorKind[DecoratorKind[\"OPERATOR\"] = 2] = \"OPERATOR\";\r\n    DecoratorKind[DecoratorKind[\"UNMANAGED\"] = 3] = \"UNMANAGED\";\r\n    DecoratorKind[DecoratorKind[\"OFFSET\"] = 4] = \"OFFSET\";\r\n})(DecoratorKind = exports.DecoratorKind || (exports.DecoratorKind = {}));\r\n/** Depresents a decorator. */\r\nvar Decorator = /** @class */ (function (_super) {\r\n    __extends(Decorator, _super);\r\n    function Decorator() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.kind = NodeKind.DECORATOR;\r\n        return _this;\r\n    }\r\n    return Decorator;\r\n}(Statement));\r\nexports.Decorator = Decorator;\r\n/** Represents a `do` statement. */\r\nvar DoStatement = /** @class */ (function (_super) {\r\n    __extends(DoStatement, _super);\r\n    function DoStatement() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.kind = NodeKind.DO;\r\n        return _this;\r\n    }\r\n    return DoStatement;\r\n}(Statement));\r\nexports.DoStatement = DoStatement;\r\n/** Represents an empty statement, i.e., a semicolon terminating nothing. */\r\nvar EmptyStatement = /** @class */ (function (_super) {\r\n    __extends(EmptyStatement, _super);\r\n    function EmptyStatement() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.kind = NodeKind.EMPTY;\r\n        return _this;\r\n    }\r\n    return EmptyStatement;\r\n}(Statement));\r\nexports.EmptyStatement = EmptyStatement;\r\n/** Represents an `enum` declaration. */\r\nvar EnumDeclaration = /** @class */ (function (_super) {\r\n    __extends(EnumDeclaration, _super);\r\n    function EnumDeclaration() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.kind = NodeKind.ENUMDECLARATION;\r\n        return _this;\r\n    }\r\n    return EnumDeclaration;\r\n}(DeclarationStatement));\r\nexports.EnumDeclaration = EnumDeclaration;\r\n/** Represents a value of an `enum` declaration. */\r\nvar EnumValueDeclaration = /** @class */ (function (_super) {\r\n    __extends(EnumValueDeclaration, _super);\r\n    function EnumValueDeclaration() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.kind = NodeKind.ENUMVALUEDECLARATION;\r\n        _this.modifiers = null;\r\n        return _this;\r\n    }\r\n    return EnumValueDeclaration;\r\n}(DeclarationStatement));\r\nexports.EnumValueDeclaration = EnumValueDeclaration;\r\n/** Represents an `export import` statement of an interface. */\r\nvar ExportImportStatement = /** @class */ (function (_super) {\r\n    __extends(ExportImportStatement, _super);\r\n    function ExportImportStatement() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.kind = NodeKind.EXPORTIMPORT;\r\n        return _this;\r\n    }\r\n    return ExportImportStatement;\r\n}(Node));\r\nexports.ExportImportStatement = ExportImportStatement;\r\n/** Represents a member of an `export` statement. */\r\nvar ExportMember = /** @class */ (function (_super) {\r\n    __extends(ExportMember, _super);\r\n    function ExportMember() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.kind = NodeKind.EXPORTMEMBER;\r\n        return _this;\r\n    }\r\n    return ExportMember;\r\n}(Node));\r\nexports.ExportMember = ExportMember;\r\n/** Represents an `export` statement. */\r\nvar ExportStatement = /** @class */ (function (_super) {\r\n    __extends(ExportStatement, _super);\r\n    function ExportStatement() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.kind = NodeKind.EXPORT;\r\n        return _this;\r\n    }\r\n    return ExportStatement;\r\n}(Statement));\r\nexports.ExportStatement = ExportStatement;\r\n/** Represents an expression that is used as a statement. */\r\nvar ExpressionStatement = /** @class */ (function (_super) {\r\n    __extends(ExpressionStatement, _super);\r\n    function ExpressionStatement() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.kind = NodeKind.EXPRESSION;\r\n        return _this;\r\n    }\r\n    return ExpressionStatement;\r\n}(Statement));\r\nexports.ExpressionStatement = ExpressionStatement;\r\n/** Represents a field declaration within a `class`. */\r\nvar FieldDeclaration = /** @class */ (function (_super) {\r\n    __extends(FieldDeclaration, _super);\r\n    function FieldDeclaration() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.kind = NodeKind.FIELDDECLARATION;\r\n        return _this;\r\n    }\r\n    return FieldDeclaration;\r\n}(VariableLikeDeclarationStatement));\r\nexports.FieldDeclaration = FieldDeclaration;\r\n/** Represents a `for` statement. */\r\nvar ForStatement = /** @class */ (function (_super) {\r\n    __extends(ForStatement, _super);\r\n    function ForStatement() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.kind = NodeKind.FOR;\r\n        return _this;\r\n    }\r\n    return ForStatement;\r\n}(Statement));\r\nexports.ForStatement = ForStatement;\r\n/** Represents a `function` declaration. */\r\nvar FunctionDeclaration = /** @class */ (function (_super) {\r\n    __extends(FunctionDeclaration, _super);\r\n    function FunctionDeclaration() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.kind = NodeKind.FUNCTIONDECLARATION;\r\n        return _this;\r\n    }\r\n    return FunctionDeclaration;\r\n}(DeclarationStatement));\r\nexports.FunctionDeclaration = FunctionDeclaration;\r\n/** Represents an `if` statement. */\r\nvar IfStatement = /** @class */ (function (_super) {\r\n    __extends(IfStatement, _super);\r\n    function IfStatement() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.kind = NodeKind.IF;\r\n        return _this;\r\n    }\r\n    return IfStatement;\r\n}(Statement));\r\nexports.IfStatement = IfStatement;\r\n/** Represents an `import` declaration part of an {@link ImportStatement}. */\r\nvar ImportDeclaration = /** @class */ (function (_super) {\r\n    __extends(ImportDeclaration, _super);\r\n    function ImportDeclaration() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.kind = NodeKind.IMPORTDECLARATION;\r\n        _this.modifiers = null;\r\n        return _this;\r\n    }\r\n    return ImportDeclaration;\r\n}(DeclarationStatement));\r\nexports.ImportDeclaration = ImportDeclaration;\r\n/** Represents an `import` statement. */\r\nvar ImportStatement = /** @class */ (function (_super) {\r\n    __extends(ImportStatement, _super);\r\n    function ImportStatement() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.kind = NodeKind.IMPORT;\r\n        return _this;\r\n    }\r\n    return ImportStatement;\r\n}(Statement));\r\nexports.ImportStatement = ImportStatement;\r\n/** Represents an `interfarce` declaration. */\r\nvar InterfaceDeclaration = /** @class */ (function (_super) {\r\n    __extends(InterfaceDeclaration, _super);\r\n    function InterfaceDeclaration() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.kind = NodeKind.INTERFACEDECLARATION;\r\n        return _this;\r\n    }\r\n    return InterfaceDeclaration;\r\n}(ClassDeclaration));\r\nexports.InterfaceDeclaration = InterfaceDeclaration;\r\n/** Represents a method declaration within a `class`. */\r\nvar MethodDeclaration = /** @class */ (function (_super) {\r\n    __extends(MethodDeclaration, _super);\r\n    function MethodDeclaration() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.kind = NodeKind.METHODDECLARATION;\r\n        return _this;\r\n    }\r\n    return MethodDeclaration;\r\n}(FunctionDeclaration));\r\nexports.MethodDeclaration = MethodDeclaration;\r\n/** Represents a `namespace` declaration. */\r\nvar NamespaceDeclaration = /** @class */ (function (_super) {\r\n    __extends(NamespaceDeclaration, _super);\r\n    function NamespaceDeclaration() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.kind = NodeKind.NAMESPACEDECLARATION;\r\n        return _this;\r\n    }\r\n    return NamespaceDeclaration;\r\n}(DeclarationStatement));\r\nexports.NamespaceDeclaration = NamespaceDeclaration;\r\n/** Represents the kind of a parameter. */\r\nvar ParameterKind;\r\n(function (ParameterKind) {\r\n    /** No specific flags. */\r\n    ParameterKind[ParameterKind[\"DEFAULT\"] = 0] = \"DEFAULT\";\r\n    /** Is an optional parameter. */\r\n    ParameterKind[ParameterKind[\"OPTIONAL\"] = 1] = \"OPTIONAL\";\r\n    /** Is a rest parameter. */\r\n    ParameterKind[ParameterKind[\"REST\"] = 2] = \"REST\";\r\n})(ParameterKind = exports.ParameterKind || (exports.ParameterKind = {}));\r\n/** Represents a function parameter. */\r\nvar Parameter = /** @class */ (function (_super) {\r\n    __extends(Parameter, _super);\r\n    function Parameter() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.kind = NodeKind.PARAMETER;\r\n        return _this;\r\n    }\r\n    return Parameter;\r\n}(Node));\r\nexports.Parameter = Parameter;\r\n/** Represents a single modifier. */\r\nvar Modifier = /** @class */ (function (_super) {\r\n    __extends(Modifier, _super);\r\n    function Modifier() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.kind = NodeKind.MODIFIER;\r\n        return _this;\r\n    }\r\n    return Modifier;\r\n}(Node));\r\nexports.Modifier = Modifier;\r\n/** Represents a `return` statement. */\r\nvar ReturnStatement = /** @class */ (function (_super) {\r\n    __extends(ReturnStatement, _super);\r\n    function ReturnStatement() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.kind = NodeKind.RETURN;\r\n        return _this;\r\n    }\r\n    return ReturnStatement;\r\n}(Statement));\r\nexports.ReturnStatement = ReturnStatement;\r\n/** Represents a single `case` within a `switch` statement. */\r\nvar SwitchCase = /** @class */ (function (_super) {\r\n    __extends(SwitchCase, _super);\r\n    function SwitchCase() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.kind = NodeKind.SWITCHCASE;\r\n        return _this;\r\n    }\r\n    return SwitchCase;\r\n}(Node));\r\nexports.SwitchCase = SwitchCase;\r\n/** Represents a `switch` statement. */\r\nvar SwitchStatement = /** @class */ (function (_super) {\r\n    __extends(SwitchStatement, _super);\r\n    function SwitchStatement() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.kind = NodeKind.SWITCH;\r\n        return _this;\r\n    }\r\n    return SwitchStatement;\r\n}(Statement));\r\nexports.SwitchStatement = SwitchStatement;\r\n/** Represents a `throw` statement. */\r\nvar ThrowStatement = /** @class */ (function (_super) {\r\n    __extends(ThrowStatement, _super);\r\n    function ThrowStatement() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.kind = NodeKind.THROW;\r\n        return _this;\r\n    }\r\n    return ThrowStatement;\r\n}(Statement));\r\nexports.ThrowStatement = ThrowStatement;\r\n/** Represents a `try` statement. */\r\nvar TryStatement = /** @class */ (function (_super) {\r\n    __extends(TryStatement, _super);\r\n    function TryStatement() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.kind = NodeKind.TRY;\r\n        return _this;\r\n    }\r\n    return TryStatement;\r\n}(Statement));\r\nexports.TryStatement = TryStatement;\r\n/** Represents a `type` declaration. */\r\nvar TypeDeclaration = /** @class */ (function (_super) {\r\n    __extends(TypeDeclaration, _super);\r\n    function TypeDeclaration() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.kind = NodeKind.TYPEDECLARATION;\r\n        return _this;\r\n    }\r\n    return TypeDeclaration;\r\n}(DeclarationStatement));\r\nexports.TypeDeclaration = TypeDeclaration;\r\n/** Represents a variable declaration part of a {@link VariableStatement}. */\r\nvar VariableDeclaration = /** @class */ (function (_super) {\r\n    __extends(VariableDeclaration, _super);\r\n    function VariableDeclaration() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.kind = NodeKind.VARIABLEDECLARATION;\r\n        return _this;\r\n    }\r\n    return VariableDeclaration;\r\n}(VariableLikeDeclarationStatement));\r\nexports.VariableDeclaration = VariableDeclaration;\r\n/** Represents a variable statement wrapping {@link VariableDeclaration}s. */\r\nvar VariableStatement = /** @class */ (function (_super) {\r\n    __extends(VariableStatement, _super);\r\n    function VariableStatement() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.kind = NodeKind.VARIABLE;\r\n        return _this;\r\n    }\r\n    return VariableStatement;\r\n}(Statement));\r\nexports.VariableStatement = VariableStatement;\r\n/** Represents a `while` statement. */\r\nvar WhileStatement = /** @class */ (function (_super) {\r\n    __extends(WhileStatement, _super);\r\n    function WhileStatement() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.kind = NodeKind.WHILE;\r\n        return _this;\r\n    }\r\n    return WhileStatement;\r\n}(Statement));\r\nexports.WhileStatement = WhileStatement;\r\n/** Cached unused modifiers for reuse. */\r\nvar reusableModifiers = null;\r\nfunction setReusableModifiers(modifiers) {\r\n    reusableModifiers = modifiers;\r\n}\r\nexports.setReusableModifiers = setReusableModifiers;\r\n/** Creates a new modifiers array. */\r\nfunction createModifiers() {\r\n    var ret;\r\n    if (reusableModifiers != null) {\r\n        ret = reusableModifiers;\r\n        reusableModifiers = null;\r\n    }\r\n    else\r\n        ret = new Array(1);\r\n    ret.length = 0;\r\n    return ret;\r\n}\r\nexports.createModifiers = createModifiers;\r\n/** Adds a modifier to a set of modifiers. Creates a new set if `null`. */\r\nfunction addModifier(modifier, modifiers) {\r\n    if (modifiers == null)\r\n        modifiers = createModifiers();\r\n    modifiers.push(modifier);\r\n    return modifiers;\r\n}\r\nexports.addModifier = addModifier;\r\n/** Gets a specific modifier from the specified set of modifiers. */\r\nfunction getModifier(kind, modifiers) {\r\n    if (modifiers)\r\n        for (var i = 0, k = modifiers.length; i < k; ++i)\r\n            if (modifiers[i].modifierKind == kind)\r\n                return modifiers[i];\r\n    return null;\r\n}\r\nexports.getModifier = getModifier;\r\n/** Tests whether a modifier exists in the specified set of modifiers. */\r\nfunction hasModifier(kind, modifiers) {\r\n    return getModifier(kind, modifiers) != null;\r\n}\r\nexports.hasModifier = hasModifier;\r\n/** Gets the first decorator by name within at set of decorators, if present. */\r\nfunction getFirstDecorator(name, decorators) {\r\n    if (decorators)\r\n        for (var i = 0, k = decorators.length; i < k; ++i) {\r\n            var decorator = decorators[i];\r\n            var expression = decorator.name;\r\n            if (expression.kind == NodeKind.IDENTIFIER && expression.text == name)\r\n                return decorator;\r\n        }\r\n    return null;\r\n}\r\nexports.getFirstDecorator = getFirstDecorator;\r\n/** Tests if a specific decorator is present within the specified decorators. */\r\nfunction hasDecorator(name, decorators) {\r\n    return getFirstDecorator(name, decorators) != null;\r\n}\r\nexports.hasDecorator = hasDecorator;\r\n/** Mangles a declaration's name to an internal name. */\r\nfunction mangleInternalName(declaration, asGlobal) {\r\n    if (asGlobal === void 0) { asGlobal = false; }\r\n    var name = declaration.name.text;\r\n    var parent = declaration.parent;\r\n    if (!parent)\r\n        return name;\r\n    if (declaration.kind == NodeKind.VARIABLEDECLARATION && parent.kind == NodeKind.VARIABLE)\r\n        if (!(parent = parent.parent))\r\n            return name;\r\n    if (parent.kind == NodeKind.CLASSDECLARATION)\r\n        return mangleInternalName(parent, asGlobal) + (hasModifier(ModifierKind.STATIC, declaration.modifiers) ? program_1.STATIC_DELIMITER : program_1.INSTANCE_DELIMITER) + name;\r\n    if (parent.kind == NodeKind.NAMESPACEDECLARATION || parent.kind == NodeKind.ENUMDECLARATION)\r\n        return mangleInternalName(parent, asGlobal) + program_1.STATIC_DELIMITER + name;\r\n    if (asGlobal)\r\n        return name;\r\n    return declaration.range.source.internalPath + program_1.PATH_DELIMITER + name;\r\n}\r\nexports.mangleInternalName = mangleInternalName;\r\n/** Mangles an external to an internal path. */\r\nfunction mangleInternalPath(path) {\r\n    if (path.endsWith(\".ts\"))\r\n        path = path.substring(0, path.length - 3);\r\n    return path;\r\n}\r\nexports.mangleInternalPath = mangleInternalPath;\r\nfunction setParent(nodes, parent) {\r\n    for (var i = 0, k = nodes.length; i < k; ++i)\r\n        nodes[i].parent = parent;\r\n}\r\nfunction setParentOpt(nodes, parent) {\r\n    for (var i = 0, k = nodes.length; i < k; ++i) {\r\n        var node = nodes[i];\r\n        if (node)\r\n            node.parent = parent;\r\n    }\r\n}\r\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\n/*\r\n\r\n This is a modified version of TypeScript's scanner that doesn't perform\r\n as much bookkeeping, simply skips over trivia and provides a more general\r\n mark/reset mechanism for the parser to utilize on ambiguous tokens.\r\n\r\n next()                 advances the token\r\n peek()                 peeks for the next token\r\n skip(token)            skips over a token if possible\r\n mark()                 marks at current token\r\n reset()                resets to marked state\r\n range()                gets the range of the current token\r\n\r\n readFloat()            on FLOATLITERAL\r\n readIdentifier()       on IDENTIFIER\r\n readInteger()          on INTEGERLITERAL\r\n readString()           on STRINGLITERAL\r\n\r\n*/\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar diagnostics_1 = __webpack_require__(1);\r\nvar charcode_1 = __webpack_require__(9);\r\n/** Named token types. */\r\nvar Token;\r\n(function (Token) {\r\n    // keywords\r\n    // discarded: ANY, BOOLEAN, NEVER, NUMBER, STRING, SYMBOL, UNDEFINED, LESSTHAN_SLASH\r\n    Token[Token[\"ABSTRACT\"] = 0] = \"ABSTRACT\";\r\n    Token[Token[\"AS\"] = 1] = \"AS\";\r\n    Token[Token[\"ASYNC\"] = 2] = \"ASYNC\";\r\n    Token[Token[\"AWAIT\"] = 3] = \"AWAIT\";\r\n    Token[Token[\"BREAK\"] = 4] = \"BREAK\";\r\n    Token[Token[\"CASE\"] = 5] = \"CASE\";\r\n    Token[Token[\"CATCH\"] = 6] = \"CATCH\";\r\n    Token[Token[\"CLASS\"] = 7] = \"CLASS\";\r\n    Token[Token[\"CONST\"] = 8] = \"CONST\";\r\n    Token[Token[\"CONTINUE\"] = 9] = \"CONTINUE\";\r\n    Token[Token[\"CONSTRUCTOR\"] = 10] = \"CONSTRUCTOR\";\r\n    Token[Token[\"DEBUGGER\"] = 11] = \"DEBUGGER\";\r\n    Token[Token[\"DECLARE\"] = 12] = \"DECLARE\";\r\n    Token[Token[\"DEFAULT\"] = 13] = \"DEFAULT\";\r\n    Token[Token[\"DELETE\"] = 14] = \"DELETE\";\r\n    Token[Token[\"DO\"] = 15] = \"DO\";\r\n    Token[Token[\"ELSE\"] = 16] = \"ELSE\";\r\n    Token[Token[\"ENUM\"] = 17] = \"ENUM\";\r\n    Token[Token[\"EXPORT\"] = 18] = \"EXPORT\";\r\n    Token[Token[\"EXTENDS\"] = 19] = \"EXTENDS\";\r\n    Token[Token[\"FALSE\"] = 20] = \"FALSE\";\r\n    Token[Token[\"FINALLY\"] = 21] = \"FINALLY\";\r\n    Token[Token[\"FOR\"] = 22] = \"FOR\";\r\n    Token[Token[\"FROM\"] = 23] = \"FROM\";\r\n    Token[Token[\"FUNCTION\"] = 24] = \"FUNCTION\";\r\n    Token[Token[\"GET\"] = 25] = \"GET\";\r\n    Token[Token[\"IF\"] = 26] = \"IF\";\r\n    Token[Token[\"IMPLEMENTS\"] = 27] = \"IMPLEMENTS\";\r\n    Token[Token[\"IMPORT\"] = 28] = \"IMPORT\";\r\n    Token[Token[\"IN\"] = 29] = \"IN\";\r\n    Token[Token[\"INSTANCEOF\"] = 30] = \"INSTANCEOF\";\r\n    Token[Token[\"INTERFACE\"] = 31] = \"INTERFACE\";\r\n    Token[Token[\"IS\"] = 32] = \"IS\";\r\n    Token[Token[\"KEYOF\"] = 33] = \"KEYOF\";\r\n    Token[Token[\"LET\"] = 34] = \"LET\";\r\n    Token[Token[\"MODULE\"] = 35] = \"MODULE\";\r\n    Token[Token[\"NAMESPACE\"] = 36] = \"NAMESPACE\";\r\n    Token[Token[\"NEW\"] = 37] = \"NEW\";\r\n    Token[Token[\"NULL\"] = 38] = \"NULL\";\r\n    Token[Token[\"OF\"] = 39] = \"OF\";\r\n    Token[Token[\"PACKAGE\"] = 40] = \"PACKAGE\";\r\n    Token[Token[\"PRIVATE\"] = 41] = \"PRIVATE\";\r\n    Token[Token[\"PROTECTED\"] = 42] = \"PROTECTED\";\r\n    Token[Token[\"PUBLIC\"] = 43] = \"PUBLIC\";\r\n    Token[Token[\"READONLY\"] = 44] = \"READONLY\";\r\n    Token[Token[\"RETURN\"] = 45] = \"RETURN\";\r\n    Token[Token[\"SET\"] = 46] = \"SET\";\r\n    Token[Token[\"STATIC\"] = 47] = \"STATIC\";\r\n    Token[Token[\"SUPER\"] = 48] = \"SUPER\";\r\n    Token[Token[\"SWITCH\"] = 49] = \"SWITCH\";\r\n    Token[Token[\"THIS\"] = 50] = \"THIS\";\r\n    Token[Token[\"THROW\"] = 51] = \"THROW\";\r\n    Token[Token[\"TRUE\"] = 52] = \"TRUE\";\r\n    Token[Token[\"TRY\"] = 53] = \"TRY\";\r\n    Token[Token[\"TYPE\"] = 54] = \"TYPE\";\r\n    Token[Token[\"TYPEOF\"] = 55] = \"TYPEOF\";\r\n    Token[Token[\"VAR\"] = 56] = \"VAR\";\r\n    Token[Token[\"VOID\"] = 57] = \"VOID\";\r\n    Token[Token[\"WHILE\"] = 58] = \"WHILE\";\r\n    Token[Token[\"WITH\"] = 59] = \"WITH\";\r\n    Token[Token[\"YIELD\"] = 60] = \"YIELD\";\r\n    // punctuation\r\n    Token[Token[\"OPENBRACE\"] = 61] = \"OPENBRACE\";\r\n    Token[Token[\"CLOSEBRACE\"] = 62] = \"CLOSEBRACE\";\r\n    Token[Token[\"OPENPAREN\"] = 63] = \"OPENPAREN\";\r\n    Token[Token[\"CLOSEPAREN\"] = 64] = \"CLOSEPAREN\";\r\n    Token[Token[\"OPENBRACKET\"] = 65] = \"OPENBRACKET\";\r\n    Token[Token[\"CLOSEBRACKET\"] = 66] = \"CLOSEBRACKET\";\r\n    Token[Token[\"DOT\"] = 67] = \"DOT\";\r\n    Token[Token[\"DOT_DOT_DOT\"] = 68] = \"DOT_DOT_DOT\";\r\n    Token[Token[\"SEMICOLON\"] = 69] = \"SEMICOLON\";\r\n    Token[Token[\"COMMA\"] = 70] = \"COMMA\";\r\n    Token[Token[\"LESSTHAN\"] = 71] = \"LESSTHAN\";\r\n    Token[Token[\"GREATERTHAN\"] = 72] = \"GREATERTHAN\";\r\n    Token[Token[\"LESSTHAN_EQUALS\"] = 73] = \"LESSTHAN_EQUALS\";\r\n    Token[Token[\"GREATERTHAN_EQUALS\"] = 74] = \"GREATERTHAN_EQUALS\";\r\n    Token[Token[\"EQUALS_EQUALS\"] = 75] = \"EQUALS_EQUALS\";\r\n    Token[Token[\"EXCLAMATION_EQUALS\"] = 76] = \"EXCLAMATION_EQUALS\";\r\n    Token[Token[\"EQUALS_EQUALS_EQUALS\"] = 77] = \"EQUALS_EQUALS_EQUALS\";\r\n    Token[Token[\"EXCLAMATION_EQUALS_EQUALS\"] = 78] = \"EXCLAMATION_EQUALS_EQUALS\";\r\n    Token[Token[\"EQUALS_GREATERTHAN\"] = 79] = \"EQUALS_GREATERTHAN\";\r\n    Token[Token[\"PLUS\"] = 80] = \"PLUS\";\r\n    Token[Token[\"MINUS\"] = 81] = \"MINUS\";\r\n    Token[Token[\"ASTERISK_ASTERISK\"] = 82] = \"ASTERISK_ASTERISK\";\r\n    Token[Token[\"ASTERISK\"] = 83] = \"ASTERISK\";\r\n    Token[Token[\"SLASH\"] = 84] = \"SLASH\";\r\n    Token[Token[\"PERCENT\"] = 85] = \"PERCENT\";\r\n    Token[Token[\"PLUS_PLUS\"] = 86] = \"PLUS_PLUS\";\r\n    Token[Token[\"MINUS_MINUS\"] = 87] = \"MINUS_MINUS\";\r\n    Token[Token[\"LESSTHAN_LESSTHAN\"] = 88] = \"LESSTHAN_LESSTHAN\";\r\n    Token[Token[\"GREATERTHAN_GREATERTHAN\"] = 89] = \"GREATERTHAN_GREATERTHAN\";\r\n    Token[Token[\"GREATERTHAN_GREATERTHAN_GREATERTHAN\"] = 90] = \"GREATERTHAN_GREATERTHAN_GREATERTHAN\";\r\n    Token[Token[\"AMPERSAND\"] = 91] = \"AMPERSAND\";\r\n    Token[Token[\"BAR\"] = 92] = \"BAR\";\r\n    Token[Token[\"CARET\"] = 93] = \"CARET\";\r\n    Token[Token[\"EXCLAMATION\"] = 94] = \"EXCLAMATION\";\r\n    Token[Token[\"TILDE\"] = 95] = \"TILDE\";\r\n    Token[Token[\"AMPERSAND_AMPERSAND\"] = 96] = \"AMPERSAND_AMPERSAND\";\r\n    Token[Token[\"BAR_BAR\"] = 97] = \"BAR_BAR\";\r\n    Token[Token[\"QUESTION\"] = 98] = \"QUESTION\";\r\n    Token[Token[\"COLON\"] = 99] = \"COLON\";\r\n    Token[Token[\"EQUALS\"] = 100] = \"EQUALS\";\r\n    Token[Token[\"PLUS_EQUALS\"] = 101] = \"PLUS_EQUALS\";\r\n    Token[Token[\"MINUS_EQUALS\"] = 102] = \"MINUS_EQUALS\";\r\n    Token[Token[\"ASTERISK_EQUALS\"] = 103] = \"ASTERISK_EQUALS\";\r\n    Token[Token[\"ASTERISK_ASTERISK_EQUALS\"] = 104] = \"ASTERISK_ASTERISK_EQUALS\";\r\n    Token[Token[\"SLASH_EQUALS\"] = 105] = \"SLASH_EQUALS\";\r\n    Token[Token[\"PERCENT_EQUALS\"] = 106] = \"PERCENT_EQUALS\";\r\n    Token[Token[\"LESSTHAN_LESSTHAN_EQUALS\"] = 107] = \"LESSTHAN_LESSTHAN_EQUALS\";\r\n    Token[Token[\"GREATERTHAN_GREATERTHAN_EQUALS\"] = 108] = \"GREATERTHAN_GREATERTHAN_EQUALS\";\r\n    Token[Token[\"GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS\"] = 109] = \"GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS\";\r\n    Token[Token[\"AMPERSAND_EQUALS\"] = 110] = \"AMPERSAND_EQUALS\";\r\n    Token[Token[\"BAR_EQUALS\"] = 111] = \"BAR_EQUALS\";\r\n    Token[Token[\"CARET_EQUALS\"] = 112] = \"CARET_EQUALS\";\r\n    Token[Token[\"AT\"] = 113] = \"AT\";\r\n    // literals\r\n    Token[Token[\"IDENTIFIER\"] = 114] = \"IDENTIFIER\";\r\n    Token[Token[\"STRINGLITERAL\"] = 115] = \"STRINGLITERAL\";\r\n    Token[Token[\"INTEGERLITERAL\"] = 116] = \"INTEGERLITERAL\";\r\n    Token[Token[\"FLOATLITERAL\"] = 117] = \"FLOATLITERAL\";\r\n    // meta\r\n    Token[Token[\"INVALID\"] = 118] = \"INVALID\";\r\n    Token[Token[\"ENDOFFILE\"] = 119] = \"ENDOFFILE\";\r\n})(Token = exports.Token || (exports.Token = {}));\r\n(function (Token) {\r\n    function fromKeyword(text) {\r\n        switch (text) {\r\n            case \"abstract\": return Token.ABSTRACT;\r\n            case \"as\": return Token.AS;\r\n            case \"async\": return Token.ASYNC;\r\n            case \"await\": return Token.AWAIT;\r\n            case \"break\": return Token.BREAK;\r\n            case \"case\": return Token.CASE;\r\n            case \"catch\": return Token.CATCH;\r\n            case \"class\": return Token.CLASS;\r\n            case \"continue\": return Token.CONTINUE;\r\n            case \"const\": return Token.CONST;\r\n            case \"constructor\": return Token.CONSTRUCTOR;\r\n            case \"debugger\": return Token.DEBUGGER;\r\n            case \"declare\": return Token.DECLARE;\r\n            case \"default\": return Token.DEFAULT;\r\n            case \"delete\": return Token.DELETE;\r\n            case \"do\": return Token.DO;\r\n            case \"else\": return Token.ELSE;\r\n            case \"enum\": return Token.ENUM;\r\n            case \"export\": return Token.EXPORT;\r\n            case \"extends\": return Token.EXTENDS;\r\n            case \"false\": return Token.FALSE;\r\n            case \"finally\": return Token.FINALLY;\r\n            case \"for\": return Token.FOR;\r\n            case \"from\": return Token.FROM;\r\n            case \"function\": return Token.FUNCTION;\r\n            case \"get\": return Token.GET;\r\n            case \"if\": return Token.IF;\r\n            case \"implements\": return Token.IMPLEMENTS;\r\n            case \"import\": return Token.IMPORT;\r\n            case \"in\": return Token.IN;\r\n            case \"instanceof\": return Token.INSTANCEOF;\r\n            case \"interface\": return Token.INTERFACE;\r\n            case \"is\": return Token.IS;\r\n            case \"keyof\": return Token.KEYOF;\r\n            case \"let\": return Token.LET;\r\n            case \"module\": return Token.MODULE;\r\n            case \"namespace\": return Token.NAMESPACE;\r\n            case \"new\": return Token.NEW;\r\n            case \"null\": return Token.NULL;\r\n            case \"of\": return Token.OF;\r\n            case \"package\": return Token.PACKAGE;\r\n            case \"private\": return Token.PRIVATE;\r\n            case \"protected\": return Token.PROTECTED;\r\n            case \"public\": return Token.PUBLIC;\r\n            case \"readonly\": return Token.READONLY;\r\n            case \"return\": return Token.RETURN;\r\n            case \"set\": return Token.SET;\r\n            case \"static\": return Token.STATIC;\r\n            case \"super\": return Token.SUPER;\r\n            case \"switch\": return Token.SWITCH;\r\n            case \"this\": return Token.THIS;\r\n            case \"throw\": return Token.THROW;\r\n            case \"true\": return Token.TRUE;\r\n            case \"try\": return Token.TRY;\r\n            case \"type\": return Token.TYPE;\r\n            case \"typeof\": return Token.TYPEOF;\r\n            case \"var\": return Token.VAR;\r\n            case \"void\": return Token.VOID;\r\n            case \"while\": return Token.WHILE;\r\n            case \"with\": return Token.WITH;\r\n            case \"yield\": return Token.YIELD;\r\n            default: return Token.INVALID;\r\n        }\r\n    }\r\n    Token.fromKeyword = fromKeyword;\r\n    function isAlsoIdentifier(token) {\r\n        switch (token) {\r\n            case Token.ABSTRACT:\r\n            case Token.AS:\r\n            case Token.CONSTRUCTOR:\r\n            case Token.DECLARE:\r\n            case Token.DELETE:\r\n            case Token.FROM:\r\n            case Token.GET:\r\n            case Token.IS:\r\n            case Token.KEYOF:\r\n            case Token.MODULE:\r\n            case Token.NAMESPACE:\r\n            case Token.READONLY:\r\n            case Token.SET:\r\n            case Token.TYPE:\r\n                return true;\r\n            default:\r\n                return false;\r\n        }\r\n    }\r\n    Token.isAlsoIdentifier = isAlsoIdentifier;\r\n})(Token = exports.Token || (exports.Token = {}));\r\nvar Range = /** @class */ (function () {\r\n    // TODO: set these while tokenizing\r\n    // line: i32;\r\n    // column: i32;\r\n    function Range(source, start, end) {\r\n        this.debugInfoRef = 0;\r\n        this.source = source;\r\n        this.start = start;\r\n        this.end = end;\r\n    }\r\n    Range.join = function (a, b) {\r\n        if (a.source != b.source)\r\n            throw new Error(\"source mismatch\");\r\n        return new Range(a.source, a.start < b.start ? a.start : b.start, a.end > b.end ? a.end : b.end);\r\n    };\r\n    Object.defineProperty(Range.prototype, \"atStart\", {\r\n        get: function () { return new Range(this.source, this.start, this.start); },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Range.prototype, \"atEnd\", {\r\n        get: function () { return new Range(this.source, this.end, this.end); },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Range.prototype, \"line\", {\r\n        get: function () {\r\n            var text = this.source.text;\r\n            var pos = this.start;\r\n            var line = 1;\r\n            while (pos-- > 0)\r\n                if (text.charCodeAt(pos) == 10 /* LINEFEED */)\r\n                    line++;\r\n            return line;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Range.prototype, \"column\", {\r\n        get: function () {\r\n            var text = this.source.text;\r\n            var pos = this.start;\r\n            var column = 0;\r\n            while (pos-- > 0) {\r\n                if (text.charCodeAt(pos) == 10 /* LINEFEED */)\r\n                    break;\r\n                column++;\r\n            }\r\n            return column;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Range.prototype.toString = function () {\r\n        return this.source.text.substring(this.start, this.end);\r\n    };\r\n    return Range;\r\n}());\r\nexports.Range = Range;\r\nvar Tokenizer = /** @class */ (function (_super) {\r\n    __extends(Tokenizer, _super);\r\n    function Tokenizer(source, diagnostics) {\r\n        if (diagnostics === void 0) { diagnostics = null; }\r\n        var _this = _super.call(this, diagnostics) || this;\r\n        _this.end = 0;\r\n        _this.pos = 0;\r\n        _this.token = -1;\r\n        _this.tokenPos = 0;\r\n        _this.markedPos = 0;\r\n        _this.markedToken = -1;\r\n        _this.markedTokenPos = 0;\r\n        _this.nextToken = -1;\r\n        _this.nextTokenOnNewLine = false;\r\n        _this.source = source;\r\n        _this.pos = 0;\r\n        _this.end = source.text.length;\r\n        _this.diagnostics = diagnostics ? diagnostics : new Array();\r\n        var text = source.text;\r\n        // skip bom\r\n        if (_this.pos < _this.end && text.charCodeAt(_this.pos) == 65279 /* BYTEORDERMARK */)\r\n            ++_this.pos;\r\n        // skip shebang\r\n        if (_this.pos + 1 < _this.end && text.charCodeAt(_this.pos) == 35 /* HASH */ && text.charCodeAt(_this.pos + 1) == 33 /* EXCLAMATION */) {\r\n            _this.pos += 2;\r\n            while (_this.pos < _this.end && text.charCodeAt(_this.pos) != 10 /* LINEFEED */)\r\n                ++_this.pos;\r\n            // 'next' now starts at lf or eof\r\n        }\r\n        return _this;\r\n    }\r\n    Tokenizer.prototype.next = function (preferIdentifier) {\r\n        if (preferIdentifier === void 0) { preferIdentifier = false; }\r\n        this.nextToken = -1;\r\n        return this.token = this.unsafeNext(preferIdentifier);\r\n    };\r\n    Tokenizer.prototype.unsafeNext = function (preferIdentifier, maxCompoundLength) {\r\n        if (preferIdentifier === void 0) { preferIdentifier = false; }\r\n        if (maxCompoundLength === void 0) { maxCompoundLength = i32.MAX_VALUE; }\r\n        var text = this.source.text;\r\n        while (true) {\r\n            if (this.pos >= this.end)\r\n                return Token.ENDOFFILE;\r\n            this.tokenPos = this.pos;\r\n            var c = text.charCodeAt(this.pos);\r\n            switch (c) {\r\n                case 13 /* CARRIAGERETURN */:\r\n                    if (++this.pos < this.end && text.charCodeAt(this.pos) == 10 /* LINEFEED */)\r\n                        ++this.pos;\r\n                    break;\r\n                case 10 /* LINEFEED */:\r\n                case 9 /* TAB */:\r\n                case 11 /* VERTICALTAB */:\r\n                case 12 /* FORMFEED */:\r\n                case 32 /* SPACE */:\r\n                    ++this.pos;\r\n                    break;\r\n                case 33 /* EXCLAMATION */:\r\n                    ++this.pos;\r\n                    if (maxCompoundLength > 1 && this.pos < this.end && text.charCodeAt(this.pos) == 61 /* EQUALS */) {\r\n                        ++this.pos;\r\n                        if (maxCompoundLength > 2 && this.pos < this.end && text.charCodeAt(this.pos) == 61 /* EQUALS */) {\r\n                            ++this.pos;\r\n                            return Token.EXCLAMATION_EQUALS_EQUALS;\r\n                        }\r\n                        return Token.EXCLAMATION_EQUALS;\r\n                    }\r\n                    return Token.EXCLAMATION;\r\n                case 34 /* DOUBLEQUOTE */:\r\n                case 39 /* SINGLEQUOTE */:\r\n                case 96 /* BACKTICK */:// TODO\r\n                    return Token.STRINGLITERAL; // expects a call to readString\r\n                case 37 /* PERCENT */:\r\n                    ++this.pos;\r\n                    if (maxCompoundLength > 1 && this.pos < this.end && text.charCodeAt(this.pos) == 61 /* EQUALS */) {\r\n                        ++this.pos;\r\n                        return Token.PERCENT_EQUALS;\r\n                    }\r\n                    return Token.PERCENT;\r\n                case 38 /* AMPERSAND */:\r\n                    ++this.pos;\r\n                    if (maxCompoundLength > 1 && this.pos < this.end) {\r\n                        if (text.charCodeAt(this.pos) == 38 /* AMPERSAND */) {\r\n                            ++this.pos;\r\n                            return Token.AMPERSAND_AMPERSAND;\r\n                        }\r\n                        if (text.charCodeAt(this.pos) == 61 /* EQUALS */) {\r\n                            ++this.pos;\r\n                            return Token.AMPERSAND_EQUALS;\r\n                        }\r\n                    }\r\n                    return Token.AMPERSAND;\r\n                case 40 /* OPENPAREN */:\r\n                    ++this.pos;\r\n                    return Token.OPENPAREN;\r\n                case 41 /* CLOSEPAREN */:\r\n                    ++this.pos;\r\n                    return Token.CLOSEPAREN;\r\n                case 42 /* ASTERISK */:\r\n                    ++this.pos;\r\n                    if (maxCompoundLength > 1 && this.pos < this.end) {\r\n                        if (text.charCodeAt(this.pos) == 61 /* EQUALS */) {\r\n                            ++this.pos;\r\n                            return Token.ASTERISK_EQUALS;\r\n                        }\r\n                        if (text.charCodeAt(this.pos) == 42 /* ASTERISK */) {\r\n                            ++this.pos;\r\n                            if (maxCompoundLength > 2 && this.pos < this.end && text.charCodeAt(this.pos) == 61 /* EQUALS */) {\r\n                                ++this.pos;\r\n                                return Token.ASTERISK_ASTERISK_EQUALS;\r\n                            }\r\n                            return Token.ASTERISK_ASTERISK;\r\n                        }\r\n                    }\r\n                    return Token.ASTERISK;\r\n                case 43 /* PLUS */:\r\n                    ++this.pos;\r\n                    if (maxCompoundLength > 1 && this.pos < this.end) {\r\n                        if (text.charCodeAt(this.pos) == 43 /* PLUS */) {\r\n                            ++this.pos;\r\n                            return Token.PLUS_PLUS;\r\n                        }\r\n                        if (text.charCodeAt(this.pos) == 61 /* EQUALS */) {\r\n                            ++this.pos;\r\n                            return Token.PLUS_EQUALS;\r\n                        }\r\n                    }\r\n                    return Token.PLUS;\r\n                case 44 /* COMMA */:\r\n                    ++this.pos;\r\n                    return Token.COMMA;\r\n                case 45 /* MINUS */:\r\n                    ++this.pos;\r\n                    if (maxCompoundLength > 1 && this.pos < this.end) {\r\n                        if (text.charCodeAt(this.pos) == 45 /* MINUS */) {\r\n                            ++this.pos;\r\n                            return Token.MINUS_MINUS;\r\n                        }\r\n                        if (text.charCodeAt(this.pos) == 61 /* EQUALS */) {\r\n                            ++this.pos;\r\n                            return Token.MINUS_EQUALS;\r\n                        }\r\n                    }\r\n                    return Token.MINUS;\r\n                case 46 /* DOT */:\r\n                    ++this.pos;\r\n                    if (maxCompoundLength > 1 && this.pos < this.end) {\r\n                        if (charcode_1.isDecimalDigit(text.charCodeAt(this.pos))) {\r\n                            --this.pos;\r\n                            return Token.FLOATLITERAL; // expects a call to readFloat\r\n                        }\r\n                        if (maxCompoundLength > 2 && text.charCodeAt(this.pos) == 46 /* DOT */ && this.pos + 1 < this.end && text.charCodeAt(this.pos + 1) == 46 /* DOT */) {\r\n                            this.pos += 2;\r\n                            return Token.DOT_DOT_DOT;\r\n                        }\r\n                    }\r\n                    return Token.DOT;\r\n                case 47 /* SLASH */:\r\n                    ++this.pos;\r\n                    if (maxCompoundLength > 1 && this.pos < this.end) {\r\n                        if (text.charCodeAt(this.pos) == 47 /* SLASH */) {\r\n                            if (this.pos + 1 < this.end && text.charCodeAt(this.pos + 1) == 47 /* SLASH */) {\r\n                                // TODO: triple-slash directives, i.e. '/// <reference path=\"some.d.ts\" />'\r\n                            }\r\n                            while (++this.pos < this.end) {\r\n                                if (charcode_1.isLineBreak(text.charCodeAt(this.pos)))\r\n                                    break;\r\n                            }\r\n                            continue;\r\n                        }\r\n                        if (text.charCodeAt(this.pos) == 42 /* ASTERISK */) {\r\n                            var closed = false;\r\n                            while (++this.pos < this.end) {\r\n                                c = text.charCodeAt(this.pos);\r\n                                if (c == 42 /* ASTERISK */ && this.pos + 1 < this.end && text.charCodeAt(this.pos + 1) == 47 /* SLASH */) {\r\n                                    this.pos += 2;\r\n                                    closed = true;\r\n                                    break;\r\n                                }\r\n                            }\r\n                            if (!closed)\r\n                                this.error(diagnostics_1.DiagnosticCode._0_expected, this.range(this.pos), \"*/\");\r\n                            continue;\r\n                        }\r\n                        if (text.charCodeAt(this.pos) == 61 /* EQUALS */) {\r\n                            ++this.pos;\r\n                            return Token.SLASH_EQUALS;\r\n                        }\r\n                    }\r\n                    return Token.SLASH;\r\n                case 48 /* _0 */:\r\n                case 49 /* _1 */:\r\n                case 50 /* _2 */:\r\n                case 51 /* _3 */:\r\n                case 52 /* _4 */:\r\n                case 53 /* _5 */:\r\n                case 54 /* _6 */:\r\n                case 55 /* _7 */:\r\n                case 56 /* _8 */:\r\n                case 57 /* _9 */:\r\n                    return this.testInteger()\r\n                        ? Token.INTEGERLITERAL // expects a call to readInteger\r\n                        : Token.FLOATLITERAL; // expects a call to readFloat\r\n                case 58 /* COLON */:\r\n                    ++this.pos;\r\n                    return Token.COLON;\r\n                case 59 /* SEMICOLON */:\r\n                    ++this.pos;\r\n                    return Token.SEMICOLON;\r\n                case 60 /* LESSTHAN */:\r\n                    ++this.pos;\r\n                    if (maxCompoundLength > 1 && this.pos < this.end) {\r\n                        if (text.charCodeAt(this.pos) == 60 /* LESSTHAN */) {\r\n                            ++this.pos;\r\n                            if (maxCompoundLength > 2 && this.pos < this.end && text.charCodeAt(this.pos) == 61 /* EQUALS */) {\r\n                                ++this.pos;\r\n                                return Token.LESSTHAN_LESSTHAN_EQUALS;\r\n                            }\r\n                            return Token.LESSTHAN_LESSTHAN;\r\n                        }\r\n                        if (text.charCodeAt(this.pos) == 61 /* EQUALS */) {\r\n                            ++this.pos;\r\n                            return Token.LESSTHAN_EQUALS;\r\n                        }\r\n                    }\r\n                    return Token.LESSTHAN;\r\n                case 61 /* EQUALS */:\r\n                    ++this.pos;\r\n                    if (maxCompoundLength > 1 && this.pos < this.end) {\r\n                        if (text.charCodeAt(this.pos) == 61 /* EQUALS */) {\r\n                            ++this.pos;\r\n                            if (maxCompoundLength > 2 && this.pos < this.end && text.charCodeAt(this.pos) == 61 /* EQUALS */) {\r\n                                ++this.pos;\r\n                                return Token.EQUALS_EQUALS_EQUALS;\r\n                            }\r\n                            return Token.EQUALS_EQUALS;\r\n                        }\r\n                        if (text.charCodeAt(this.pos) == 62 /* GREATERTHAN */) {\r\n                            ++this.pos;\r\n                            return Token.EQUALS_GREATERTHAN;\r\n                        }\r\n                    }\r\n                    return Token.EQUALS;\r\n                case 62 /* GREATERTHAN */:\r\n                    ++this.pos;\r\n                    if (maxCompoundLength > 1 && this.pos < this.end) {\r\n                        if (text.charCodeAt(this.pos) == 62 /* GREATERTHAN */) {\r\n                            ++this.pos;\r\n                            if (maxCompoundLength > 2 && this.pos < this.end) {\r\n                                if (text.charCodeAt(this.pos) == 62 /* GREATERTHAN */) {\r\n                                    ++this.pos;\r\n                                    if (maxCompoundLength > 3 && this.pos < this.end && text.charCodeAt(this.pos) == 61 /* EQUALS */) {\r\n                                        ++this.pos;\r\n                                        return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS;\r\n                                    }\r\n                                    return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN;\r\n                                }\r\n                                if (text.charCodeAt(this.pos) == 61 /* EQUALS */) {\r\n                                    ++this.pos;\r\n                                    return Token.GREATERTHAN_GREATERTHAN_EQUALS;\r\n                                }\r\n                            }\r\n                            return Token.GREATERTHAN_GREATERTHAN;\r\n                        }\r\n                        if (text.charCodeAt(this.pos) == 61 /* EQUALS */) {\r\n                            ++this.pos;\r\n                            return Token.GREATERTHAN_EQUALS;\r\n                        }\r\n                    }\r\n                    return Token.GREATERTHAN;\r\n                case 63 /* QUESTION */:\r\n                    ++this.pos;\r\n                    return Token.QUESTION;\r\n                case 91 /* OPENBRACKET */:\r\n                    ++this.pos;\r\n                    return Token.OPENBRACKET;\r\n                case 93 /* CLOSEBRACKET */:\r\n                    ++this.pos;\r\n                    return Token.CLOSEBRACKET;\r\n                case 94 /* CARET */:\r\n                    ++this.pos;\r\n                    if (maxCompoundLength > 1 && this.pos < this.end && text.charCodeAt(this.pos) == 61 /* EQUALS */) {\r\n                        ++this.pos;\r\n                        return Token.CARET_EQUALS;\r\n                    }\r\n                    return Token.CARET;\r\n                case 123 /* OPENBRACE */:\r\n                    ++this.pos;\r\n                    return Token.OPENBRACE;\r\n                case 124 /* BAR */:\r\n                    ++this.pos;\r\n                    if (maxCompoundLength > 1 && this.pos < this.end) {\r\n                        if (text.charCodeAt(this.pos) == 124 /* BAR */) {\r\n                            ++this.pos;\r\n                            return Token.BAR_BAR;\r\n                        }\r\n                        if (text.charCodeAt(this.pos) == 61 /* EQUALS */) {\r\n                            ++this.pos;\r\n                            return Token.BAR_EQUALS;\r\n                        }\r\n                    }\r\n                    return Token.BAR;\r\n                case 125 /* CLOSEBRACE */:\r\n                    ++this.pos;\r\n                    return Token.CLOSEBRACE;\r\n                case 126 /* TILDE */:\r\n                    ++this.pos;\r\n                    return Token.TILDE;\r\n                case 64 /* AT */:\r\n                    ++this.pos;\r\n                    return Token.AT;\r\n                default:\r\n                    if (charcode_1.isIdentifierStart(c)) {\r\n                        if (charcode_1.isKeywordCharacter(c)) {\r\n                            var posBefore = this.pos;\r\n                            while (++this.pos < this.end && charcode_1.isIdentifierPart(c = text.charCodeAt(this.pos))) {\r\n                                if (!charcode_1.isKeywordCharacter(c)) {\r\n                                    this.pos = posBefore;\r\n                                    return Token.IDENTIFIER;\r\n                                }\r\n                            }\r\n                            var keywordText = text.substring(posBefore, this.pos);\r\n                            var keywordToken = Token.fromKeyword(keywordText);\r\n                            if (keywordToken != Token.INVALID && !(preferIdentifier && Token.isAlsoIdentifier(keywordToken)))\r\n                                return keywordToken;\r\n                            this.pos = posBefore;\r\n                        }\r\n                        return Token.IDENTIFIER; // expects a call to readIdentifier\r\n                    }\r\n                    else if (charcode_1.isWhiteSpace(c)) {\r\n                        ++this.pos;\r\n                        break;\r\n                    }\r\n                    this.error(diagnostics_1.DiagnosticCode.Invalid_character, this.range(this.pos, this.pos + 1));\r\n                    ++this.pos;\r\n                    return Token.INVALID;\r\n            }\r\n        }\r\n    };\r\n    Tokenizer.prototype.peek = function (checkOnNewLine, preferIdentifier, maxCompoundLength) {\r\n        if (checkOnNewLine === void 0) { checkOnNewLine = false; }\r\n        if (preferIdentifier === void 0) { preferIdentifier = false; }\r\n        if (maxCompoundLength === void 0) { maxCompoundLength = i32.MAX_VALUE; }\r\n        var text = this.source.text;\r\n        if (this.nextToken < 0) {\r\n            var posBefore = this.pos;\r\n            var tokenBefore = this.token;\r\n            var tokenPosBefore = this.tokenPos;\r\n            this.nextToken = this.unsafeNext(preferIdentifier, maxCompoundLength);\r\n            if (checkOnNewLine) {\r\n                this.nextTokenOnNewLine = false;\r\n                while (--this.tokenPos > posBefore) {\r\n                    if (charcode_1.isLineBreak(text.charCodeAt(this.tokenPos))) {\r\n                        this.nextTokenOnNewLine = true;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            this.pos = posBefore;\r\n            this.token = tokenBefore;\r\n            this.tokenPos = tokenPosBefore;\r\n        }\r\n        return this.nextToken;\r\n    };\r\n    Tokenizer.prototype.skip = function (token) {\r\n        var posBefore = this.pos;\r\n        var tokenBefore = this.token;\r\n        var tokenPosBefore = this.tokenPos;\r\n        var maxCompoundLength = i32.MAX_VALUE;\r\n        switch (token) {\r\n            case Token.GREATERTHAN:// where parsing type arguments\r\n                maxCompoundLength = 1;\r\n                break;\r\n        }\r\n        if ((this.token = this.unsafeNext(token == Token.IDENTIFIER, maxCompoundLength)) == token) {\r\n            this.nextToken = -1;\r\n            return true;\r\n        }\r\n        else {\r\n            this.pos = posBefore;\r\n            this.token = tokenBefore;\r\n            this.tokenPos = tokenPosBefore;\r\n            return false;\r\n        }\r\n    };\r\n    // skipUntil(token1: Token, token2: Token = -1): bool {\r\n    //   var next: Token;\r\n    //   do {\r\n    //     if ((next = this.peek()) == Token.ENDOFFILE)\r\n    //       return false;\r\n    //     if (next == token1 || next == token2)\r\n    //       return true;\r\n    //     this.next();\r\n    //   } while (true);\r\n    // }\r\n    Tokenizer.prototype.mark = function () {\r\n        this.markedPos = this.pos;\r\n        this.markedToken = this.token;\r\n        this.markedTokenPos = this.tokenPos;\r\n    };\r\n    Tokenizer.prototype.reset = function () {\r\n        this.pos = this.markedPos;\r\n        this.token = this.markedToken;\r\n        this.tokenPos = this.markedTokenPos;\r\n        this.nextToken = -1;\r\n    };\r\n    Tokenizer.prototype.range = function (start, end) {\r\n        if (start === void 0) { start = -1; }\r\n        if (end === void 0) { end = -1; }\r\n        if (start < 0) {\r\n            start = this.tokenPos;\r\n            end = this.pos;\r\n        }\r\n        else if (end < 0)\r\n            end = start;\r\n        return new Range(this.source, start, end);\r\n    };\r\n    Tokenizer.prototype.readIdentifier = function () {\r\n        var text = this.source.text;\r\n        var start = this.pos;\r\n        while (++this.pos < this.end && charcode_1.isIdentifierPart(text.charCodeAt(this.pos)))\r\n            ;\r\n        return text.substring(start, this.pos);\r\n    };\r\n    Tokenizer.prototype.readString = function () {\r\n        var text = this.source.text;\r\n        var quote = text.charCodeAt(this.pos++);\r\n        var start = this.pos;\r\n        var result = \"\";\r\n        while (true) {\r\n            if (this.pos >= this.end) {\r\n                result += text.substring(start, this.pos);\r\n                this.error(diagnostics_1.DiagnosticCode.Unterminated_string_literal, this.range(start - 1, this.end));\r\n                break;\r\n            }\r\n            var c = text.charCodeAt(this.pos);\r\n            if (c == quote) {\r\n                result += text.substring(start, this.pos++);\r\n                break;\r\n            }\r\n            if (c == 92 /* BACKSLASH */) {\r\n                result += text.substring(start, this.pos);\r\n                result += this.readEscapeSequence();\r\n                start = this.pos;\r\n                continue;\r\n            }\r\n            if (charcode_1.isLineBreak(c)) {\r\n                result += text.substring(start, this.pos);\r\n                this.error(diagnostics_1.DiagnosticCode.Unterminated_string_literal, this.range(start - 1, this.pos));\r\n                break;\r\n            }\r\n            ++this.pos;\r\n        }\r\n        return result;\r\n    };\r\n    Tokenizer.prototype.readEscapeSequence = function () {\r\n        if (++this.pos >= this.end) {\r\n            this.error(diagnostics_1.DiagnosticCode.Unexpected_end_of_text, this.range(this.end));\r\n            return \"\";\r\n        }\r\n        var text = this.source.text;\r\n        var c = text.charCodeAt(this.pos++);\r\n        switch (c) {\r\n            case 48 /* _0 */:\r\n                return \"\\0\";\r\n            case 98 /* b */:\r\n                return \"\\b\";\r\n            case 116 /* t */:\r\n                return \"\\t\";\r\n            case 110 /* n */:\r\n                return \"\\n\";\r\n            case 118 /* v */:\r\n                return \"\\v\";\r\n            case 102 /* f */:\r\n                return \"\\f\";\r\n            case 114 /* r */:\r\n                return \"\\r\";\r\n            case 39 /* SINGLEQUOTE */:\r\n                return \"'\";\r\n            case 34 /* DOUBLEQUOTE */:\r\n                return \"\\\"\";\r\n            case 117 /* u */: {\r\n                if (this.pos < this.end && text.charCodeAt(this.pos) == 123 /* OPENBRACE */) {\r\n                    ++this.pos;\r\n                    return this.readExtendedUnicodeEscape(); // \\u{DDDDDDDD}\r\n                }\r\n                return this.readUnicodeEscape(); // \\uDDDD\r\n            }\r\n            case 13 /* CARRIAGERETURN */:\r\n                if (this.pos < this.end && text.charCodeAt(this.pos) == 10 /* LINEFEED */)\r\n                    ++this.pos;\r\n            // fall through\r\n            case 10 /* LINEFEED */:\r\n            case 8232 /* LINESEPARATOR */:\r\n            case 8233 /* PARAGRAPHSEPARATOR */:\r\n                return \"\";\r\n            default:\r\n                return String.fromCharCode(c);\r\n        }\r\n    };\r\n    Tokenizer.prototype.readRegexpPattern = function () {\r\n        var text = this.source.text;\r\n        var start = this.pos;\r\n        var escaped = false;\r\n        while (true) {\r\n            if (this.pos >= this.end) {\r\n                this.error(diagnostics_1.DiagnosticCode.Unterminated_regular_expression_literal, this.range(start, this.end));\r\n                break;\r\n            }\r\n            if (text.charCodeAt(this.pos) == 92 /* BACKSLASH */) {\r\n                ++this.pos;\r\n                escaped = true;\r\n                continue;\r\n            }\r\n            var c = text.charCodeAt(this.pos);\r\n            if (c == 47 /* SLASH */ && !escaped)\r\n                break;\r\n            if (charcode_1.isLineBreak(c)) {\r\n                this.error(diagnostics_1.DiagnosticCode.Unterminated_regular_expression_literal, this.range(start, this.pos));\r\n                break;\r\n            }\r\n            ++this.pos;\r\n            escaped = false;\r\n        }\r\n        return text.substring(start, this.pos);\r\n    };\r\n    Tokenizer.prototype.readRegexpFlags = function () {\r\n        var text = this.source.text;\r\n        var start = this.pos;\r\n        var flags = 0;\r\n        while (this.pos < this.end) {\r\n            var c = text.charCodeAt(this.pos);\r\n            if (!charcode_1.isIdentifierPart(c))\r\n                break;\r\n            ++this.pos;\r\n            switch (c) {\r\n                // make sure each supported flag is unique\r\n                case 103 /* g */:\r\n                    flags |= flags & 1 ? -1 : 1;\r\n                    break;\r\n                case 105 /* i */:\r\n                    flags |= flags & 2 ? -1 : 2;\r\n                    break;\r\n                case 109 /* m */:\r\n                    flags |= flags & 4 ? -1 : 4;\r\n                    break;\r\n                default:\r\n                    flags = -1;\r\n                    break;\r\n            }\r\n        }\r\n        if (flags == -1)\r\n            this.error(diagnostics_1.DiagnosticCode.Invalid_regular_expression_flags, this.range(start, this.pos));\r\n        return text.substring(start, this.pos);\r\n    };\r\n    Tokenizer.prototype.testInteger = function () {\r\n        var text = this.source.text;\r\n        if (text.charCodeAt(this.pos) == 48 /* _0 */ && this.pos + 1 < this.end) {\r\n            switch (text.charCodeAt(this.pos + 2)) {\r\n                case 88 /* X */:\r\n                case 120 /* x */:\r\n                case 66 /* B */:\r\n                case 98 /* b */:\r\n                case 79 /* O */:\r\n                case 111 /* o */:\r\n                    return true;\r\n            }\r\n        }\r\n        var pos = this.pos;\r\n        while (pos < this.end) {\r\n            var c = text.charCodeAt(pos);\r\n            if (c == 46 /* DOT */ || c == 69 /* E */ || c == 101 /* e */)\r\n                return false;\r\n            if (c < 48 /* _0 */ || c > 57 /* _9 */)\r\n                break;\r\n            pos++;\r\n        }\r\n        return true;\r\n    };\r\n    Tokenizer.prototype.readInteger = function () {\r\n        var text = this.source.text;\r\n        if (text.charCodeAt(this.pos) == 48 /* _0 */ && this.pos + 2 < this.end) {\r\n            switch (text.charCodeAt(this.pos + 1)) {\r\n                case 88 /* X */:\r\n                case 120 /* x */:\r\n                    this.pos += 2;\r\n                    return this.readHexInteger();\r\n                case 66 /* B */:\r\n                case 98 /* b */:\r\n                    this.pos += 2;\r\n                    return this.readBinaryInteger();\r\n                case 79 /* O */:\r\n                case 111 /* o */:\r\n                    this.pos += 2;\r\n                    return this.readOctalInteger();\r\n            }\r\n            if (charcode_1.isOctalDigit(text.charCodeAt(this.pos + 1))) {\r\n                var start = this.pos;\r\n                ++this.pos;\r\n                var value = this.readOctalInteger();\r\n                this.error(diagnostics_1.DiagnosticCode.Octal_literals_are_not_allowed_in_strict_mode, this.range(start, this.pos));\r\n                return value;\r\n            }\r\n        }\r\n        return this.readDecimalInteger();\r\n    };\r\n    Tokenizer.prototype.readHexInteger = function () {\r\n        var text = this.source.text;\r\n        var start = this.pos;\r\n        var value = i64_new(0, 0);\r\n        var i64_16 = i64_new(16, 0);\r\n        while (this.pos < this.end) {\r\n            var c = text.charCodeAt(this.pos);\r\n            if (c >= 48 /* _0 */ && c <= 57 /* _9 */) {\r\n                // value = value * 16 + c - CharCode._0;\r\n                value = i64_add(i64_mul(value, i64_16), i64_new(c - 48 /* _0 */, 0));\r\n            }\r\n            else if (c >= 65 /* A */ && c <= 70 /* F */) {\r\n                // value = value * 16 + 10 + c - CharCode.A;\r\n                value = i64_add(i64_mul(value, i64_16), i64_new(10 + c - 65 /* A */, 0));\r\n            }\r\n            else if (c >= 97 /* a */ && c <= 102 /* f */) {\r\n                // value = value * 16 + 10 + c - CharCode.a;\r\n                value = i64_add(i64_mul(value, i64_16), i64_new(10 + c - 97 /* a */, 0));\r\n            }\r\n            else\r\n                break;\r\n            ++this.pos;\r\n        }\r\n        if (this.pos == start)\r\n            this.error(diagnostics_1.DiagnosticCode.Hexadecimal_digit_expected, this.range(start));\r\n        return value;\r\n    };\r\n    Tokenizer.prototype.readDecimalInteger = function () {\r\n        var text = this.source.text;\r\n        var start = this.pos;\r\n        var value = i64_new(0, 0);\r\n        var i64_10 = i64_new(10, 0);\r\n        while (this.pos < this.end) {\r\n            var c = text.charCodeAt(this.pos);\r\n            if (c >= 48 /* _0 */ && c <= 57 /* _9 */) {\r\n                // value = value * 10 + c - CharCode._0;\r\n                value = i64_add(i64_mul(value, i64_10), i64_new(c - 48 /* _0 */, 0));\r\n            }\r\n            else\r\n                break;\r\n            ++this.pos;\r\n        }\r\n        if (this.pos == start)\r\n            this.error(diagnostics_1.DiagnosticCode.Digit_expected, this.range(start));\r\n        return value;\r\n    };\r\n    Tokenizer.prototype.readOctalInteger = function () {\r\n        var text = this.source.text;\r\n        var start = this.pos;\r\n        var value = i64_new(0, 0);\r\n        var i64_8 = i64_new(8, 0);\r\n        while (this.pos < this.end) {\r\n            var c = text.charCodeAt(this.pos);\r\n            if (c >= 48 /* _0 */ && c <= 55 /* _7 */) {\r\n                // value = value * 8 + c - CharCode._0;\r\n                value = i64_add(i64_mul(value, i64_8), i64_new(c - 48 /* _0 */, 0));\r\n            }\r\n            else\r\n                break;\r\n            ++this.pos;\r\n        }\r\n        if (this.pos == start)\r\n            this.error(diagnostics_1.DiagnosticCode.Octal_digit_expected, this.range(start));\r\n        return value;\r\n    };\r\n    Tokenizer.prototype.readBinaryInteger = function () {\r\n        var text = this.source.text;\r\n        var start = this.pos;\r\n        var value = i64_new(0, 0);\r\n        var i64_2 = i64_new(2, 0);\r\n        var i64_1 = i64_new(1, 0);\r\n        while (this.pos < this.end) {\r\n            var c = text.charCodeAt(this.pos);\r\n            if (c == 48 /* _0 */) {\r\n                // value = value * 2;\r\n                value = i64_mul(value, i64_2);\r\n            }\r\n            else if (c == 49 /* _1 */) {\r\n                // value = value * 2 + 1;\r\n                value = i64_add(i64_mul(value, i64_2), i64_1);\r\n            }\r\n            else\r\n                break;\r\n            ++this.pos;\r\n        }\r\n        if (this.pos == start)\r\n            this.error(diagnostics_1.DiagnosticCode.Binary_digit_expected, this.range(start));\r\n        return value;\r\n    };\r\n    Tokenizer.prototype.readFloat = function () {\r\n        var start = this.pos;\r\n        var text = this.source.text;\r\n        while (this.pos < this.end && charcode_1.isDecimalDigit(text.charCodeAt(this.pos)))\r\n            ++this.pos;\r\n        if (this.pos < this.end && text.charCodeAt(this.pos) == 46 /* DOT */) {\r\n            ++this.pos;\r\n            while (this.pos < this.end && charcode_1.isDecimalDigit(text.charCodeAt(this.pos)))\r\n                ++this.pos;\r\n        }\r\n        if (this.pos < this.end) {\r\n            var c = text.charCodeAt(this.pos);\r\n            if (c == 69 /* E */ || c == 101 /* e */) {\r\n                if (++this.pos < this.end && (text.charCodeAt(this.pos) == 45 /* MINUS */ || text.charCodeAt(this.pos) == 43 /* PLUS */) && charcode_1.isDecimalDigit(text.charCodeAt(this.pos + 1)))\r\n                    ++this.pos;\r\n                while (this.pos < this.end && charcode_1.isDecimalDigit(text.charCodeAt(this.pos)))\r\n                    ++this.pos;\r\n            }\r\n        }\r\n        return parseFloat(text.substring(start, this.pos));\r\n    };\r\n    Tokenizer.prototype.readUnicodeEscape = function () {\r\n        var remain = 4;\r\n        var value = 0;\r\n        var text = this.source.text;\r\n        while (this.pos < this.end) {\r\n            var c = text.charCodeAt(this.pos++);\r\n            if (c >= 48 /* _0 */ && c <= 57 /* _9 */)\r\n                value = value * 16 + c - 48 /* _0 */;\r\n            else if (c >= 65 /* A */ && c <= 70 /* F */)\r\n                value = value * 16 + 10 + c - 65 /* A */;\r\n            else if (c >= 97 /* a */ && c <= 102 /* f */)\r\n                value = value * 16 + 10 + c - 97 /* a */;\r\n            else {\r\n                this.error(diagnostics_1.DiagnosticCode.Hexadecimal_digit_expected, this.range(this.pos - 1, this.pos));\r\n                return \"\";\r\n            }\r\n            if (--remain == 0)\r\n                break;\r\n        }\r\n        if (remain) {\r\n            this.error(diagnostics_1.DiagnosticCode.Unexpected_end_of_text, this.range(this.pos));\r\n            return \"\";\r\n        }\r\n        return String.fromCharCode(value);\r\n    };\r\n    Tokenizer.prototype.readExtendedUnicodeEscape = function () {\r\n        var start = this.pos;\r\n        var value = this.readHexInteger();\r\n        var value32 = i64_low(value);\r\n        var invalid = false;\r\n        assert(!i64_high(value));\r\n        if (value32 > 0x10FFFF) {\r\n            this.error(diagnostics_1.DiagnosticCode.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive, this.range(start, this.pos));\r\n            invalid = true;\r\n        }\r\n        var text = this.source.text;\r\n        if (this.pos >= this.end) {\r\n            this.error(diagnostics_1.DiagnosticCode.Unexpected_end_of_text, this.range(start, this.end));\r\n            invalid = true;\r\n        }\r\n        else if (text.charCodeAt(this.pos) == 125 /* CLOSEBRACE */) {\r\n            ++this.pos;\r\n        }\r\n        else {\r\n            this.error(diagnostics_1.DiagnosticCode.Unterminated_Unicode_escape_sequence, this.range(start, this.pos));\r\n            invalid = true;\r\n        }\r\n        if (invalid)\r\n            return \"\";\r\n        return value32 < 65536\r\n            ? String.fromCharCode(value32)\r\n            : String.fromCharCode((((value32 - 65536) / 1024 | 0) + 0xD800), ((value32 - 65536) % 1024 + 0xDC00));\r\n    };\r\n    return Tokenizer;\r\n}(diagnostics_1.DiagnosticEmitter));\r\nexports.Tokenizer = Tokenizer;\r\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports) {\n\nvar g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\n// code below is generated from diagnosticsMessages.json by scripts/build-diagnostics\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar DiagnosticCode;\r\n(function (DiagnosticCode) {\r\n    DiagnosticCode[DiagnosticCode[\"Operation_not_supported\"] = 100] = \"Operation_not_supported\";\r\n    DiagnosticCode[DiagnosticCode[\"Operation_is_unsafe\"] = 101] = \"Operation_is_unsafe\";\r\n    DiagnosticCode[DiagnosticCode[\"Conversion_from_type_0_to_1_possibly_loses_information_and_thus_requires_an_explicit_cast\"] = 200] = \"Conversion_from_type_0_to_1_possibly_loses_information_and_thus_requires_an_explicit_cast\";\r\n    DiagnosticCode[DiagnosticCode[\"Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit\"] = 201] = \"Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit\";\r\n    DiagnosticCode[DiagnosticCode[\"Type_0_cannot_be_changed_to_type_1\"] = 202] = \"Type_0_cannot_be_changed_to_type_1\";\r\n    DiagnosticCode[DiagnosticCode[\"Type_0_cannot_be_reinterpreted_as_type_1\"] = 203] = \"Type_0_cannot_be_reinterpreted_as_type_1\";\r\n    DiagnosticCode[DiagnosticCode[\"Basic_type_0_cannot_be_nullable\"] = 204] = \"Basic_type_0_cannot_be_nullable\";\r\n    DiagnosticCode[DiagnosticCode[\"Cannot_export_a_mutable_global\"] = 205] = \"Cannot_export_a_mutable_global\";\r\n    DiagnosticCode[DiagnosticCode[\"Compiling_constant_with_non_constant_initializer_as_mutable\"] = 206] = \"Compiling_constant_with_non_constant_initializer_as_mutable\";\r\n    DiagnosticCode[DiagnosticCode[\"Structs_cannot_extend_classes_and_vice_versa\"] = 207] = \"Structs_cannot_extend_classes_and_vice_versa\";\r\n    DiagnosticCode[DiagnosticCode[\"Structs_cannot_implement_interfaces\"] = 208] = \"Structs_cannot_implement_interfaces\";\r\n    DiagnosticCode[DiagnosticCode[\"Invalid_regular_expression_flags\"] = 209] = \"Invalid_regular_expression_flags\";\r\n    DiagnosticCode[DiagnosticCode[\"Implementation_0_must_match_the_signature_1\"] = 210] = \"Implementation_0_must_match_the_signature_1\";\r\n    DiagnosticCode[DiagnosticCode[\"Unterminated_string_literal\"] = 1002] = \"Unterminated_string_literal\";\r\n    DiagnosticCode[DiagnosticCode[\"Identifier_expected\"] = 1003] = \"Identifier_expected\";\r\n    DiagnosticCode[DiagnosticCode[\"_0_expected\"] = 1005] = \"_0_expected\";\r\n    DiagnosticCode[DiagnosticCode[\"A_file_cannot_have_a_reference_to_itself\"] = 1006] = \"A_file_cannot_have_a_reference_to_itself\";\r\n    DiagnosticCode[DiagnosticCode[\"Trailing_comma_not_allowed\"] = 1009] = \"Trailing_comma_not_allowed\";\r\n    DiagnosticCode[DiagnosticCode[\"Unexpected_token\"] = 1012] = \"Unexpected_token\";\r\n    DiagnosticCode[DiagnosticCode[\"A_rest_parameter_must_be_last_in_a_parameter_list\"] = 1014] = \"A_rest_parameter_must_be_last_in_a_parameter_list\";\r\n    DiagnosticCode[DiagnosticCode[\"Parameter_cannot_have_question_mark_and_initializer\"] = 1015] = \"Parameter_cannot_have_question_mark_and_initializer\";\r\n    DiagnosticCode[DiagnosticCode[\"A_required_parameter_cannot_follow_an_optional_parameter\"] = 1016] = \"A_required_parameter_cannot_follow_an_optional_parameter\";\r\n    DiagnosticCode[DiagnosticCode[\"Enum_member_must_have_initializer\"] = 1061] = \"Enum_member_must_have_initializer\";\r\n    DiagnosticCode[DiagnosticCode[\"Statements_are_not_allowed_in_ambient_contexts\"] = 1036] = \"Statements_are_not_allowed_in_ambient_contexts\";\r\n    DiagnosticCode[DiagnosticCode[\"Initializers_are_not_allowed_in_ambient_contexts\"] = 1039] = \"Initializers_are_not_allowed_in_ambient_contexts\";\r\n    DiagnosticCode[DiagnosticCode[\"_0_modifier_cannot_be_used_here\"] = 1042] = \"_0_modifier_cannot_be_used_here\";\r\n    DiagnosticCode[DiagnosticCode[\"A_rest_parameter_cannot_be_optional\"] = 1047] = \"A_rest_parameter_cannot_be_optional\";\r\n    DiagnosticCode[DiagnosticCode[\"A_rest_parameter_cannot_have_an_initializer\"] = 1048] = \"A_rest_parameter_cannot_have_an_initializer\";\r\n    DiagnosticCode[DiagnosticCode[\"A_set_accessor_must_have_exactly_one_parameter\"] = 1049] = \"A_set_accessor_must_have_exactly_one_parameter\";\r\n    DiagnosticCode[DiagnosticCode[\"A_set_accessor_parameter_cannot_have_an_initializer\"] = 1052] = \"A_set_accessor_parameter_cannot_have_an_initializer\";\r\n    DiagnosticCode[DiagnosticCode[\"A_get_accessor_cannot_have_parameters\"] = 1054] = \"A_get_accessor_cannot_have_parameters\";\r\n    DiagnosticCode[DiagnosticCode[\"Type_parameters_cannot_appear_on_a_constructor_declaration\"] = 1092] = \"Type_parameters_cannot_appear_on_a_constructor_declaration\";\r\n    DiagnosticCode[DiagnosticCode[\"Type_annotation_cannot_appear_on_a_constructor_declaration\"] = 1093] = \"Type_annotation_cannot_appear_on_a_constructor_declaration\";\r\n    DiagnosticCode[DiagnosticCode[\"An_accessor_cannot_have_type_parameters\"] = 1094] = \"An_accessor_cannot_have_type_parameters\";\r\n    DiagnosticCode[DiagnosticCode[\"A_set_accessor_cannot_have_a_return_type_annotation\"] = 1095] = \"A_set_accessor_cannot_have_a_return_type_annotation\";\r\n    DiagnosticCode[DiagnosticCode[\"Type_parameter_list_cannot_be_empty\"] = 1098] = \"Type_parameter_list_cannot_be_empty\";\r\n    DiagnosticCode[DiagnosticCode[\"A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement\"] = 1104] = \"A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement\";\r\n    DiagnosticCode[DiagnosticCode[\"A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement\"] = 1105] = \"A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement\";\r\n    DiagnosticCode[DiagnosticCode[\"A_return_statement_can_only_be_used_within_a_function_body\"] = 1108] = \"A_return_statement_can_only_be_used_within_a_function_body\";\r\n    DiagnosticCode[DiagnosticCode[\"Expression_expected\"] = 1109] = \"Expression_expected\";\r\n    DiagnosticCode[DiagnosticCode[\"Type_expected\"] = 1110] = \"Type_expected\";\r\n    DiagnosticCode[DiagnosticCode[\"A_default_clause_cannot_appear_more_than_once_in_a_switch_statement\"] = 1113] = \"A_default_clause_cannot_appear_more_than_once_in_a_switch_statement\";\r\n    DiagnosticCode[DiagnosticCode[\"Duplicate_label_0\"] = 1114] = \"Duplicate_label_0\";\r\n    DiagnosticCode[DiagnosticCode[\"Octal_literals_are_not_allowed_in_strict_mode\"] = 1121] = \"Octal_literals_are_not_allowed_in_strict_mode\";\r\n    DiagnosticCode[DiagnosticCode[\"Digit_expected\"] = 1124] = \"Digit_expected\";\r\n    DiagnosticCode[DiagnosticCode[\"Hexadecimal_digit_expected\"] = 1125] = \"Hexadecimal_digit_expected\";\r\n    DiagnosticCode[DiagnosticCode[\"Unexpected_end_of_text\"] = 1126] = \"Unexpected_end_of_text\";\r\n    DiagnosticCode[DiagnosticCode[\"Invalid_character\"] = 1127] = \"Invalid_character\";\r\n    DiagnosticCode[DiagnosticCode[\"_case_or_default_expected\"] = 1130] = \"_case_or_default_expected\";\r\n    DiagnosticCode[DiagnosticCode[\"Type_argument_expected\"] = 1140] = \"Type_argument_expected\";\r\n    DiagnosticCode[DiagnosticCode[\"String_literal_expected\"] = 1141] = \"String_literal_expected\";\r\n    DiagnosticCode[DiagnosticCode[\"Line_break_not_permitted_here\"] = 1142] = \"Line_break_not_permitted_here\";\r\n    DiagnosticCode[DiagnosticCode[\"Declaration_expected\"] = 1146] = \"Declaration_expected\";\r\n    DiagnosticCode[DiagnosticCode[\"_const_declarations_must_be_initialized\"] = 1155] = \"_const_declarations_must_be_initialized\";\r\n    DiagnosticCode[DiagnosticCode[\"Unterminated_regular_expression_literal\"] = 1161] = \"Unterminated_regular_expression_literal\";\r\n    DiagnosticCode[DiagnosticCode[\"Binary_digit_expected\"] = 1177] = \"Binary_digit_expected\";\r\n    DiagnosticCode[DiagnosticCode[\"Octal_digit_expected\"] = 1178] = \"Octal_digit_expected\";\r\n    DiagnosticCode[DiagnosticCode[\"An_implementation_cannot_be_declared_in_ambient_contexts\"] = 1183] = \"An_implementation_cannot_be_declared_in_ambient_contexts\";\r\n    DiagnosticCode[DiagnosticCode[\"An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive\"] = 1198] = \"An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive\";\r\n    DiagnosticCode[DiagnosticCode[\"Unterminated_Unicode_escape_sequence\"] = 1199] = \"Unterminated_Unicode_escape_sequence\";\r\n    DiagnosticCode[DiagnosticCode[\"Decorators_are_not_valid_here\"] = 1206] = \"Decorators_are_not_valid_here\";\r\n    DiagnosticCode[DiagnosticCode[\"_abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration\"] = 1242] = \"_abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration\";\r\n    DiagnosticCode[DiagnosticCode[\"A_class_may_only_extend_another_class\"] = 1311] = \"A_class_may_only_extend_another_class\";\r\n    DiagnosticCode[DiagnosticCode[\"Duplicate_identifier_0\"] = 2300] = \"Duplicate_identifier_0\";\r\n    DiagnosticCode[DiagnosticCode[\"Cannot_find_name_0\"] = 2304] = \"Cannot_find_name_0\";\r\n    DiagnosticCode[DiagnosticCode[\"Module_0_has_no_exported_member_1\"] = 2305] = \"Module_0_has_no_exported_member_1\";\r\n    DiagnosticCode[DiagnosticCode[\"Generic_type_0_requires_1_type_argument_s\"] = 2314] = \"Generic_type_0_requires_1_type_argument_s\";\r\n    DiagnosticCode[DiagnosticCode[\"Type_0_is_not_generic\"] = 2315] = \"Type_0_is_not_generic\";\r\n    DiagnosticCode[DiagnosticCode[\"Type_0_is_not_assignable_to_type_1\"] = 2322] = \"Type_0_is_not_assignable_to_type_1\";\r\n    DiagnosticCode[DiagnosticCode[\"Index_signature_is_missing_in_type_0\"] = 2329] = \"Index_signature_is_missing_in_type_0\";\r\n    DiagnosticCode[DiagnosticCode[\"_this_cannot_be_referenced_in_current_location\"] = 2332] = \"_this_cannot_be_referenced_in_current_location\";\r\n    DiagnosticCode[DiagnosticCode[\"_super_can_only_be_referenced_in_a_derived_class\"] = 2335] = \"_super_can_only_be_referenced_in_a_derived_class\";\r\n    DiagnosticCode[DiagnosticCode[\"Property_0_does_not_exist_on_type_1\"] = 2339] = \"Property_0_does_not_exist_on_type_1\";\r\n    DiagnosticCode[DiagnosticCode[\"Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures\"] = 2349] = \"Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures\";\r\n    DiagnosticCode[DiagnosticCode[\"Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature\"] = 2351] = \"Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature\";\r\n    DiagnosticCode[DiagnosticCode[\"A_function_whose_declared_type_is_not_void_must_return_a_value\"] = 2355] = \"A_function_whose_declared_type_is_not_void_must_return_a_value\";\r\n    DiagnosticCode[DiagnosticCode[\"The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access\"] = 2357] = \"The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access\";\r\n    DiagnosticCode[DiagnosticCode[\"The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access\"] = 2364] = \"The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access\";\r\n    DiagnosticCode[DiagnosticCode[\"_get_and_set_accessor_must_have_the_same_type\"] = 2380] = \"_get_and_set_accessor_must_have_the_same_type\";\r\n    DiagnosticCode[DiagnosticCode[\"Constructor_implementation_is_missing\"] = 2390] = \"Constructor_implementation_is_missing\";\r\n    DiagnosticCode[DiagnosticCode[\"Function_implementation_is_missing_or_not_immediately_following_the_declaration\"] = 2391] = \"Function_implementation_is_missing_or_not_immediately_following_the_declaration\";\r\n    DiagnosticCode[DiagnosticCode[\"Multiple_constructor_implementations_are_not_allowed\"] = 2392] = \"Multiple_constructor_implementations_are_not_allowed\";\r\n    DiagnosticCode[DiagnosticCode[\"Duplicate_function_implementation\"] = 2393] = \"Duplicate_function_implementation\";\r\n    DiagnosticCode[DiagnosticCode[\"Export_declaration_conflicts_with_exported_declaration_of_0\"] = 2484] = \"Export_declaration_conflicts_with_exported_declaration_of_0\";\r\n    DiagnosticCode[DiagnosticCode[\"Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property\"] = 2540] = \"Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property\";\r\n    DiagnosticCode[DiagnosticCode[\"The_target_of_an_assignment_must_be_a_variable_or_a_property_access\"] = 2541] = \"The_target_of_an_assignment_must_be_a_variable_or_a_property_access\";\r\n    DiagnosticCode[DiagnosticCode[\"Index_signature_in_type_0_only_permits_reading\"] = 2542] = \"Index_signature_in_type_0_only_permits_reading\";\r\n    DiagnosticCode[DiagnosticCode[\"Expected_0_arguments_but_got_1\"] = 2554] = \"Expected_0_arguments_but_got_1\";\r\n    DiagnosticCode[DiagnosticCode[\"Expected_at_least_0_arguments_but_got_1\"] = 2555] = \"Expected_at_least_0_arguments_but_got_1\";\r\n    DiagnosticCode[DiagnosticCode[\"Expected_0_type_arguments_but_got_1\"] = 2558] = \"Expected_0_type_arguments_but_got_1\";\r\n    DiagnosticCode[DiagnosticCode[\"A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums\"] = 2651] = \"A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums\";\r\n    DiagnosticCode[DiagnosticCode[\"Namespace_0_has_no_exported_member_1\"] = 2694] = \"Namespace_0_has_no_exported_member_1\";\r\n    DiagnosticCode[DiagnosticCode[\"File_0_not_found\"] = 6054] = \"File_0_not_found\";\r\n})(DiagnosticCode = exports.DiagnosticCode || (exports.DiagnosticCode = {}));\r\nfunction diagnosticCodeToString(code) {\r\n    switch (code) {\r\n        case 100: return \"Operation not supported.\";\r\n        case 101: return \"Operation is unsafe.\";\r\n        case 200: return \"Conversion from type '{0}' to '{1}' possibly loses information and thus requires an explicit cast.\";\r\n        case 201: return \"Conversion from type '{0}' to '{1}' will require an explicit cast when switching between 32/64-bit.\";\r\n        case 202: return \"Type '{0}' cannot be changed to type '{1}'.\";\r\n        case 203: return \"Type '{0}' cannot be reinterpreted as type '{1}'.\";\r\n        case 204: return \"Basic type '{0}' cannot be nullable.\";\r\n        case 205: return \"Cannot export a mutable global.\";\r\n        case 206: return \"Compiling constant with non-constant initializer as mutable.\";\r\n        case 207: return \"Structs cannot extend classes and vice-versa.\";\r\n        case 208: return \"Structs cannot implement interfaces.\";\r\n        case 209: return \"Invalid regular expression flags.\";\r\n        case 210: return \"Implementation '{0}' must match the signature '{1}'.\";\r\n        case 1002: return \"Unterminated string literal.\";\r\n        case 1003: return \"Identifier expected.\";\r\n        case 1005: return \"'{0}' expected.\";\r\n        case 1006: return \"A file cannot have a reference to itself.\";\r\n        case 1009: return \"Trailing comma not allowed.\";\r\n        case 1012: return \"Unexpected token.\";\r\n        case 1014: return \"A rest parameter must be last in a parameter list.\";\r\n        case 1015: return \"Parameter cannot have question mark and initializer.\";\r\n        case 1016: return \"A required parameter cannot follow an optional parameter.\";\r\n        case 1061: return \"Enum member must have initializer.\";\r\n        case 1036: return \"Statements are not allowed in ambient contexts.\";\r\n        case 1039: return \"Initializers are not allowed in ambient contexts.\";\r\n        case 1042: return \"'{0}' modifier cannot be used here.\";\r\n        case 1047: return \"A rest parameter cannot be optional.\";\r\n        case 1048: return \"A rest parameter cannot have an initializer.\";\r\n        case 1049: return \"A 'set' accessor must have exactly one parameter.\";\r\n        case 1052: return \"A 'set' accessor parameter cannot have an initializer.\";\r\n        case 1054: return \"A 'get' accessor cannot have parameters.\";\r\n        case 1092: return \"Type parameters cannot appear on a constructor declaration.\";\r\n        case 1093: return \"Type annotation cannot appear on a constructor declaration.\";\r\n        case 1094: return \"An accessor cannot have type parameters.\";\r\n        case 1095: return \"A 'set' accessor cannot have a return type annotation.\";\r\n        case 1098: return \"Type parameter list cannot be empty.\";\r\n        case 1104: return \"A 'continue' statement can only be used within an enclosing iteration statement.\";\r\n        case 1105: return \"A 'break' statement can only be used within an enclosing iteration or switch statement.\";\r\n        case 1108: return \"A 'return' statement can only be used within a function body.\";\r\n        case 1109: return \"Expression expected.\";\r\n        case 1110: return \"Type expected.\";\r\n        case 1113: return \"A 'default' clause cannot appear more than once in a 'switch' statement.\";\r\n        case 1114: return \"Duplicate label '{0}'.\";\r\n        case 1121: return \"Octal literals are not allowed in strict mode.\";\r\n        case 1124: return \"Digit expected.\";\r\n        case 1125: return \"Hexadecimal digit expected.\";\r\n        case 1126: return \"Unexpected end of text.\";\r\n        case 1127: return \"Invalid character.\";\r\n        case 1130: return \"'case' or 'default' expected.\";\r\n        case 1140: return \"Type argument expected.\";\r\n        case 1141: return \"String literal expected.\";\r\n        case 1142: return \"Line break not permitted here.\";\r\n        case 1146: return \"Declaration expected.\";\r\n        case 1155: return \"'const' declarations must be initialized.\";\r\n        case 1161: return \"Unterminated regular expression literal.\";\r\n        case 1177: return \"Binary digit expected.\";\r\n        case 1178: return \"Octal digit expected.\";\r\n        case 1183: return \"An implementation cannot be declared in ambient contexts.\";\r\n        case 1198: return \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\";\r\n        case 1199: return \"Unterminated Unicode escape sequence.\";\r\n        case 1206: return \"Decorators are not valid here.\";\r\n        case 1242: return \"'abstract' modifier can only appear on a class, method, or property declaration.\";\r\n        case 1311: return \"A class may only extend another class.\";\r\n        case 2300: return \"Duplicate identifier '{0}'.\";\r\n        case 2304: return \"Cannot find name '{0}'.\";\r\n        case 2305: return \"Module '{0}' has no exported member '{1}'.\";\r\n        case 2314: return \"Generic type '{0}' requires {1} type argument(s).\";\r\n        case 2315: return \"Type '{0}' is not generic.\";\r\n        case 2322: return \"Type '{0}' is not assignable to type '{1}'.\";\r\n        case 2329: return \"Index signature is missing in type '{0}'.\";\r\n        case 2332: return \"'this' cannot be referenced in current location.\";\r\n        case 2335: return \"'super' can only be referenced in a derived class.\";\r\n        case 2339: return \"Property '{0}' does not exist on type '{1}'.\";\r\n        case 2349: return \"Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.\";\r\n        case 2351: return \"Cannot use 'new' with an expression whose type lacks a construct signature.\";\r\n        case 2355: return \"A function whose declared type is not 'void' must return a value.\";\r\n        case 2357: return \"The operand of an increment or decrement operator must be a variable or a property access.\";\r\n        case 2364: return \"The left-hand side of an assignment expression must be a variable or a property access.\";\r\n        case 2380: return \"'get' and 'set' accessor must have the same type.\";\r\n        case 2390: return \"Constructor implementation is missing.\";\r\n        case 2391: return \"Function implementation is missing or not immediately following the declaration.\";\r\n        case 2392: return \"Multiple constructor implementations are not allowed.\";\r\n        case 2393: return \"Duplicate function implementation.\";\r\n        case 2484: return \"Export declaration conflicts with exported declaration of '{0}'.\";\r\n        case 2540: return \"Cannot assign to '{0}' because it is a constant or a read-only property.\";\r\n        case 2541: return \"The target of an assignment must be a variable or a property access.\";\r\n        case 2542: return \"Index signature in type '{0}' only permits reading.\";\r\n        case 2554: return \"Expected {0} arguments, but got {1}.\";\r\n        case 2555: return \"Expected at least {0} arguments, but got {1}.\";\r\n        case 2558: return \"Expected {0} type arguments, but got {1}.\";\r\n        case 2651: return \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\";\r\n        case 2694: return \"Namespace '{0}' has no exported member '{1}'.\";\r\n        case 6054: return \"File '{0}' not found.\";\r\n        default: return \"\";\r\n    }\r\n}\r\nexports.diagnosticCodeToString = diagnosticCodeToString;\r\n\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\n//////////////////////////// Character codes utility ////////////////////////////\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/** An enum of named character codes. */\r\nvar CharCode;\r\n(function (CharCode) {\r\n    CharCode[CharCode[\"NULL\"] = 0] = \"NULL\";\r\n    CharCode[CharCode[\"LINEFEED\"] = 10] = \"LINEFEED\";\r\n    CharCode[CharCode[\"CARRIAGERETURN\"] = 13] = \"CARRIAGERETURN\";\r\n    CharCode[CharCode[\"LINESEPARATOR\"] = 8232] = \"LINESEPARATOR\";\r\n    CharCode[CharCode[\"PARAGRAPHSEPARATOR\"] = 8233] = \"PARAGRAPHSEPARATOR\";\r\n    CharCode[CharCode[\"NEXTLINE\"] = 133] = \"NEXTLINE\";\r\n    CharCode[CharCode[\"SPACE\"] = 32] = \"SPACE\";\r\n    CharCode[CharCode[\"NONBREAKINGSPACE\"] = 160] = \"NONBREAKINGSPACE\";\r\n    CharCode[CharCode[\"ENQUAD\"] = 8192] = \"ENQUAD\";\r\n    CharCode[CharCode[\"EMQUAD\"] = 8193] = \"EMQUAD\";\r\n    CharCode[CharCode[\"ENSPACE\"] = 8194] = \"ENSPACE\";\r\n    CharCode[CharCode[\"EMSPACE\"] = 8195] = \"EMSPACE\";\r\n    CharCode[CharCode[\"THREEPEREMSPACE\"] = 8196] = \"THREEPEREMSPACE\";\r\n    CharCode[CharCode[\"FOURPEREMSPACE\"] = 8197] = \"FOURPEREMSPACE\";\r\n    CharCode[CharCode[\"SIXPEREMSPACE\"] = 8198] = \"SIXPEREMSPACE\";\r\n    CharCode[CharCode[\"FIGURESPACE\"] = 8199] = \"FIGURESPACE\";\r\n    CharCode[CharCode[\"PUNCTUATIONSPACE\"] = 8200] = \"PUNCTUATIONSPACE\";\r\n    CharCode[CharCode[\"THINSPACE\"] = 8201] = \"THINSPACE\";\r\n    CharCode[CharCode[\"HAIRSPACE\"] = 8202] = \"HAIRSPACE\";\r\n    CharCode[CharCode[\"ZEROWIDTHSPACE\"] = 8203] = \"ZEROWIDTHSPACE\";\r\n    CharCode[CharCode[\"NARROWNOBREAKSPACE\"] = 8239] = \"NARROWNOBREAKSPACE\";\r\n    CharCode[CharCode[\"IDEOGRAPHICSPACE\"] = 12288] = \"IDEOGRAPHICSPACE\";\r\n    CharCode[CharCode[\"MATHEMATICALSPACE\"] = 8287] = \"MATHEMATICALSPACE\";\r\n    CharCode[CharCode[\"OGHAM\"] = 5760] = \"OGHAM\";\r\n    CharCode[CharCode[\"_\"] = 95] = \"_\";\r\n    CharCode[CharCode[\"_0\"] = 48] = \"_0\";\r\n    CharCode[CharCode[\"_1\"] = 49] = \"_1\";\r\n    CharCode[CharCode[\"_2\"] = 50] = \"_2\";\r\n    CharCode[CharCode[\"_3\"] = 51] = \"_3\";\r\n    CharCode[CharCode[\"_4\"] = 52] = \"_4\";\r\n    CharCode[CharCode[\"_5\"] = 53] = \"_5\";\r\n    CharCode[CharCode[\"_6\"] = 54] = \"_6\";\r\n    CharCode[CharCode[\"_7\"] = 55] = \"_7\";\r\n    CharCode[CharCode[\"_8\"] = 56] = \"_8\";\r\n    CharCode[CharCode[\"_9\"] = 57] = \"_9\";\r\n    CharCode[CharCode[\"a\"] = 97] = \"a\";\r\n    CharCode[CharCode[\"b\"] = 98] = \"b\";\r\n    CharCode[CharCode[\"c\"] = 99] = \"c\";\r\n    CharCode[CharCode[\"d\"] = 100] = \"d\";\r\n    CharCode[CharCode[\"e\"] = 101] = \"e\";\r\n    CharCode[CharCode[\"f\"] = 102] = \"f\";\r\n    CharCode[CharCode[\"g\"] = 103] = \"g\";\r\n    CharCode[CharCode[\"h\"] = 104] = \"h\";\r\n    CharCode[CharCode[\"i\"] = 105] = \"i\";\r\n    CharCode[CharCode[\"j\"] = 106] = \"j\";\r\n    CharCode[CharCode[\"k\"] = 107] = \"k\";\r\n    CharCode[CharCode[\"l\"] = 108] = \"l\";\r\n    CharCode[CharCode[\"m\"] = 109] = \"m\";\r\n    CharCode[CharCode[\"n\"] = 110] = \"n\";\r\n    CharCode[CharCode[\"o\"] = 111] = \"o\";\r\n    CharCode[CharCode[\"p\"] = 112] = \"p\";\r\n    CharCode[CharCode[\"q\"] = 113] = \"q\";\r\n    CharCode[CharCode[\"r\"] = 114] = \"r\";\r\n    CharCode[CharCode[\"s\"] = 115] = \"s\";\r\n    CharCode[CharCode[\"t\"] = 116] = \"t\";\r\n    CharCode[CharCode[\"u\"] = 117] = \"u\";\r\n    CharCode[CharCode[\"v\"] = 118] = \"v\";\r\n    CharCode[CharCode[\"w\"] = 119] = \"w\";\r\n    CharCode[CharCode[\"x\"] = 120] = \"x\";\r\n    CharCode[CharCode[\"y\"] = 121] = \"y\";\r\n    CharCode[CharCode[\"z\"] = 122] = \"z\";\r\n    CharCode[CharCode[\"A\"] = 65] = \"A\";\r\n    CharCode[CharCode[\"B\"] = 66] = \"B\";\r\n    CharCode[CharCode[\"C\"] = 67] = \"C\";\r\n    CharCode[CharCode[\"D\"] = 68] = \"D\";\r\n    CharCode[CharCode[\"E\"] = 69] = \"E\";\r\n    CharCode[CharCode[\"F\"] = 70] = \"F\";\r\n    CharCode[CharCode[\"G\"] = 71] = \"G\";\r\n    CharCode[CharCode[\"H\"] = 72] = \"H\";\r\n    CharCode[CharCode[\"I\"] = 73] = \"I\";\r\n    CharCode[CharCode[\"J\"] = 74] = \"J\";\r\n    CharCode[CharCode[\"K\"] = 75] = \"K\";\r\n    CharCode[CharCode[\"L\"] = 76] = \"L\";\r\n    CharCode[CharCode[\"M\"] = 77] = \"M\";\r\n    CharCode[CharCode[\"N\"] = 78] = \"N\";\r\n    CharCode[CharCode[\"O\"] = 79] = \"O\";\r\n    CharCode[CharCode[\"P\"] = 80] = \"P\";\r\n    CharCode[CharCode[\"Q\"] = 81] = \"Q\";\r\n    CharCode[CharCode[\"R\"] = 82] = \"R\";\r\n    CharCode[CharCode[\"S\"] = 83] = \"S\";\r\n    CharCode[CharCode[\"T\"] = 84] = \"T\";\r\n    CharCode[CharCode[\"U\"] = 85] = \"U\";\r\n    CharCode[CharCode[\"V\"] = 86] = \"V\";\r\n    CharCode[CharCode[\"W\"] = 87] = \"W\";\r\n    CharCode[CharCode[\"X\"] = 88] = \"X\";\r\n    CharCode[CharCode[\"Y\"] = 89] = \"Y\";\r\n    CharCode[CharCode[\"Z\"] = 90] = \"Z\";\r\n    CharCode[CharCode[\"AMPERSAND\"] = 38] = \"AMPERSAND\";\r\n    CharCode[CharCode[\"ASTERISK\"] = 42] = \"ASTERISK\";\r\n    CharCode[CharCode[\"AT\"] = 64] = \"AT\";\r\n    CharCode[CharCode[\"BACKSLASH\"] = 92] = \"BACKSLASH\";\r\n    CharCode[CharCode[\"BACKTICK\"] = 96] = \"BACKTICK\";\r\n    CharCode[CharCode[\"BAR\"] = 124] = \"BAR\";\r\n    CharCode[CharCode[\"CARET\"] = 94] = \"CARET\";\r\n    CharCode[CharCode[\"CLOSEBRACE\"] = 125] = \"CLOSEBRACE\";\r\n    CharCode[CharCode[\"CLOSEBRACKET\"] = 93] = \"CLOSEBRACKET\";\r\n    CharCode[CharCode[\"CLOSEPAREN\"] = 41] = \"CLOSEPAREN\";\r\n    CharCode[CharCode[\"COLON\"] = 58] = \"COLON\";\r\n    CharCode[CharCode[\"COMMA\"] = 44] = \"COMMA\";\r\n    CharCode[CharCode[\"DOLLAR\"] = 36] = \"DOLLAR\";\r\n    CharCode[CharCode[\"DOT\"] = 46] = \"DOT\";\r\n    CharCode[CharCode[\"DOUBLEQUOTE\"] = 34] = \"DOUBLEQUOTE\";\r\n    CharCode[CharCode[\"EQUALS\"] = 61] = \"EQUALS\";\r\n    CharCode[CharCode[\"EXCLAMATION\"] = 33] = \"EXCLAMATION\";\r\n    CharCode[CharCode[\"GREATERTHAN\"] = 62] = \"GREATERTHAN\";\r\n    CharCode[CharCode[\"HASH\"] = 35] = \"HASH\";\r\n    CharCode[CharCode[\"LESSTHAN\"] = 60] = \"LESSTHAN\";\r\n    CharCode[CharCode[\"MINUS\"] = 45] = \"MINUS\";\r\n    CharCode[CharCode[\"OPENBRACE\"] = 123] = \"OPENBRACE\";\r\n    CharCode[CharCode[\"OPENBRACKET\"] = 91] = \"OPENBRACKET\";\r\n    CharCode[CharCode[\"OPENPAREN\"] = 40] = \"OPENPAREN\";\r\n    CharCode[CharCode[\"PERCENT\"] = 37] = \"PERCENT\";\r\n    CharCode[CharCode[\"PLUS\"] = 43] = \"PLUS\";\r\n    CharCode[CharCode[\"QUESTION\"] = 63] = \"QUESTION\";\r\n    CharCode[CharCode[\"SEMICOLON\"] = 59] = \"SEMICOLON\";\r\n    CharCode[CharCode[\"SINGLEQUOTE\"] = 39] = \"SINGLEQUOTE\";\r\n    CharCode[CharCode[\"SLASH\"] = 47] = \"SLASH\";\r\n    CharCode[CharCode[\"TILDE\"] = 126] = \"TILDE\";\r\n    CharCode[CharCode[\"BACKSPACE\"] = 8] = \"BACKSPACE\";\r\n    CharCode[CharCode[\"FORMFEED\"] = 12] = \"FORMFEED\";\r\n    CharCode[CharCode[\"BYTEORDERMARK\"] = 65279] = \"BYTEORDERMARK\";\r\n    CharCode[CharCode[\"TAB\"] = 9] = \"TAB\";\r\n    CharCode[CharCode[\"VERTICALTAB\"] = 11] = \"VERTICALTAB\";\r\n})(CharCode = exports.CharCode || (exports.CharCode = {}));\r\n/** Tests if the specified character code is some sort of line break. */\r\nfunction isLineBreak(c) {\r\n    switch (c) {\r\n        case 10 /* LINEFEED */:\r\n        case 13 /* CARRIAGERETURN */:\r\n        case 8232 /* LINESEPARATOR */:\r\n        case 8233 /* PARAGRAPHSEPARATOR */:\r\n            return true;\r\n        default:\r\n            return false;\r\n    }\r\n}\r\nexports.isLineBreak = isLineBreak;\r\n/** Tests if the specified character code is some sort of white space. */\r\nfunction isWhiteSpace(c) {\r\n    switch (c) {\r\n        case 32 /* SPACE */:\r\n        case 9 /* TAB */:\r\n        case 11 /* VERTICALTAB */:\r\n        case 12 /* FORMFEED */:\r\n        case 160 /* NONBREAKINGSPACE */:\r\n        case 133 /* NEXTLINE */:\r\n        case 5760 /* OGHAM */:\r\n        case 8239 /* NARROWNOBREAKSPACE */:\r\n        case 8287 /* MATHEMATICALSPACE */:\r\n        case 12288 /* IDEOGRAPHICSPACE */:\r\n        case 65279 /* BYTEORDERMARK */:\r\n            return true;\r\n        default:\r\n            return c >= 8192 /* ENQUAD */ && c <= 8203 /* ZEROWIDTHSPACE */;\r\n    }\r\n}\r\nexports.isWhiteSpace = isWhiteSpace;\r\n/** Tests if the specified character code is a decimal digit. */\r\nfunction isDecimalDigit(c) {\r\n    return c >= 48 /* _0 */ && c <= 57 /* _9 */;\r\n}\r\nexports.isDecimalDigit = isDecimalDigit;\r\n/** Tests if the specified character code is an octal digit. */\r\nfunction isOctalDigit(c) {\r\n    return c >= 48 /* _0 */ && c <= 55 /* _7 */;\r\n}\r\nexports.isOctalDigit = isOctalDigit;\r\n/** Tests if the specified character code is a valid start of an identifier. */\r\nfunction isIdentifierStart(c) {\r\n    return c >= 65 /* A */ && c <= 90 /* Z */\r\n        || c >= 97 /* a */ && c <= 122 /* z */\r\n        || c == 36 /* DOLLAR */\r\n        || c == 95 /* _ */\r\n        || c > 0x7f && isUnicodeIdentifierStart(c);\r\n}\r\nexports.isIdentifierStart = isIdentifierStart;\r\n/** Tests if the specified character code is a valid keyword character. */\r\nfunction isKeywordCharacter(c) {\r\n    return c >= 97 /* a */ && c <= 122 /* z */;\r\n}\r\nexports.isKeywordCharacter = isKeywordCharacter;\r\n/** Tests if the specified character code is a valid part of an identifier. */\r\nfunction isIdentifierPart(c) {\r\n    return c >= 65 /* A */ && c <= 90 /* Z */\r\n        || c >= 97 /* a */ && c <= 122 /* z */\r\n        || c >= 48 /* _0 */ && c <= 57 /* _9 */\r\n        || c == 36 /* DOLLAR */\r\n        || c == 95 /* _ */\r\n        || c > 0x7f && isUnicodeIdentifierPart(c);\r\n}\r\nexports.isIdentifierPart = isIdentifierPart;\r\n// storing as u16 to save memory\r\nvar unicodeIdentifierStart = [\r\n    170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\r\n    740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906,\r\n    908, 908, 910, 929, 931,\r\n    1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\r\n    1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774,\r\n    1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,\r\n    1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088,\r\n    2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384,\r\n    2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474,\r\n    2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\r\n    2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613,\r\n    2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705,\r\n    2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,\r\n    2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,\r\n    2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958,\r\n    2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,\r\n    2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,\r\n    3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\r\n    3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333,\r\n    3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\r\n    3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\r\n    3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725,\r\n    3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\r\n    3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,\r\n    3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,\r\n    4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293,\r\n    4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696,\r\n    4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798,\r\n    4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\r\n    5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872,\r\n    5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016,\r\n    6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389,\r\n    6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688,\r\n    6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141,\r\n    7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424,\r\n    7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025,\r\n    8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,\r\n    8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\r\n    8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469,\r\n    8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,\r\n    8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584,\r\n    11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520,\r\n    11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670,\r\n    11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,\r\n    11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329,\r\n    12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540,\r\n    12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893,\r\n    19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538,\r\n    42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888,\r\n    42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015,\r\n    43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\r\n    43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520,\r\n    43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695,\r\n    43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739,\r\n    43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798,\r\n    43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243,\r\n    55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285,\r\n    64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323,\r\n    64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\r\n    65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\r\n    65479, 65482, 65487, 65490, 65495, 65498, 65500,\r\n];\r\nvar unicodeIdentifierPart = [\r\n    170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\r\n    740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906,\r\n    908, 908, 910, 929, 931,\r\n    1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415,\r\n    1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520,\r\n    1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,\r\n    1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112,\r\n    2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423,\r\n    2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,\r\n    2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,\r\n    2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602,\r\n    2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632,\r\n    2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693,\r\n    2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757,\r\n    2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821,\r\n    2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884,\r\n    2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,\r\n    2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972,\r\n    2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018,\r\n    3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088,\r\n    3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157,\r\n    3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216,\r\n    3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285,\r\n    3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,\r\n    3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,\r\n    3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515,\r\n    3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570,\r\n    3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720,\r\n    3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,\r\n    3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789,\r\n    3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895,\r\n    3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028,\r\n    4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304,\r\n    4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744,\r\n    4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\r\n    4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108,\r\n    5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902,\r\n    5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099,\r\n    6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272,\r\n    6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,\r\n    6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783,\r\n    6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155,\r\n    7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676,\r\n    7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\r\n    8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134,\r\n    8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205,\r\n    8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417,\r\n    8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477,\r\n    8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,\r\n    8521, 8526, 8526, 8544, 8584,\r\n    11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,\r\n    11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686,\r\n    11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728,\r\n    11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335,\r\n    12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449,\r\n    12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799,\r\n    13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512,\r\n    42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783,\r\n    42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072,\r\n    43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309,\r\n    43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584,\r\n    43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741,\r\n    43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808,\r\n    43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,\r\n    55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275,\r\n    64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,\r\n    64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,\r\n    65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140,\r\n    65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382,\r\n    65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\r\n];\r\nfunction lookupInUnicodeMap(code, map) {\r\n    if (code < map[0])\r\n        return false;\r\n    var lo = 0;\r\n    var hi = map.length;\r\n    var mid;\r\n    while (lo + 1 < hi) {\r\n        mid = lo + (hi - lo) / 2;\r\n        mid -= mid % 2;\r\n        if (map[mid] <= code && code <= map[mid + 1])\r\n            return true;\r\n        if (code < map[mid])\r\n            hi = mid;\r\n        else\r\n            lo = mid + 2;\r\n    }\r\n    return false;\r\n}\r\nfunction isUnicodeIdentifierStart(code) {\r\n    return code < 0 || code > 0xffff ? false\r\n        : lookupInUnicodeMap(code, unicodeIdentifierStart);\r\n}\r\nfunction isUnicodeIdentifierPart(code) {\r\n    return code < 0 || code > 0xffff ? false\r\n        : lookupInUnicodeMap(code, unicodeIdentifierPart);\r\n}\r\n\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\n//////////////////////////// Internal path utility /////////////////////////////\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar separator = 47 /* SLASH */;\r\n/**\r\n * Normalizes the specified path, removing interior placeholders.\r\n * Expects a posix-compatible relative path (not Windows compatible).\r\n */\r\nfunction normalize(path) {\r\n    var pos = 0;\r\n    var len = path.length;\r\n    // trim leading './'\r\n    while (pos + 1 < len &&\r\n        path.charCodeAt(pos) == 46 /* DOT */ &&\r\n        path.charCodeAt(pos + 1) == separator) {\r\n        pos += 2;\r\n    }\r\n    if (pos > 0 || len < path.length) {\r\n        path = path.substring(pos, len);\r\n        len -= pos;\r\n        pos = 0;\r\n    }\r\n    var atEnd;\r\n    while (pos + 1 < len) {\r\n        atEnd = false;\r\n        // we are only interested in '/.' sequences ...\r\n        if (path.charCodeAt(pos) == separator &&\r\n            path.charCodeAt(pos + 1) == 46 /* DOT */) {\r\n            // '/.' ( '/' | $ )\r\n            atEnd = pos + 2 == len;\r\n            if (atEnd ||\r\n                pos + 2 < len &&\r\n                    path.charCodeAt(pos + 2) == separator) {\r\n                path = atEnd\r\n                    ? path.substring(0, pos)\r\n                    : path.substring(0, pos) + path.substring(pos + 2);\r\n                len -= 2;\r\n                continue;\r\n            }\r\n            // '/.' ( './' | '.' $ )\r\n            atEnd = pos + 3 == len;\r\n            if (atEnd && path.charCodeAt(pos + 2) == 46 /* DOT */ ||\r\n                pos + 3 < len &&\r\n                    path.charCodeAt(pos + 2) == 46 /* DOT */ &&\r\n                    path.charCodeAt(pos + 3) == separator) {\r\n                // find preceeding '/'\r\n                var ipos = pos;\r\n                while (--ipos >= 0) {\r\n                    if (path.charCodeAt(ipos) == separator) {\r\n                        if (pos - ipos != 3 ||\r\n                            path.charCodeAt(ipos + 1) != 46 /* DOT */ ||\r\n                            path.charCodeAt(ipos + 2) != 46 /* DOT */) {\r\n                            path = atEnd\r\n                                ? path.substring(0, ipos)\r\n                                : path.substring(0, ipos) + path.substring(pos + 3);\r\n                            len -= pos + 3 - ipos;\r\n                            pos = ipos - 1; // incremented again at end of loop\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                // if there's no preceeding '/', trim start if non-empty\r\n                if (ipos < 0 && pos > 0) {\r\n                    if (pos != 2 ||\r\n                        path.charCodeAt(0) != 46 /* DOT */ ||\r\n                        path.charCodeAt(1) != 46 /* DOT */) {\r\n                        path = path.substring(pos + 4);\r\n                        len = path.length;\r\n                        continue;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        pos++;\r\n    }\r\n    return len > 0 ? path : \".\";\r\n}\r\nexports.normalize = normalize;\r\n/** Resolves the specified path relative to the specified origin. */\r\nfunction resolve(normalizedPath, origin) {\r\n    if (normalizedPath.startsWith(\"std/\"))\r\n        return normalizedPath;\r\n    return normalize(dirname(origin) + String.fromCharCode(separator) + normalizedPath);\r\n}\r\nexports.resolve = resolve;\r\n/** Obtains the directory portion of a normalized path. */\r\nfunction dirname(normalizedPath) {\r\n    var pos = normalizedPath.length;\r\n    while (--pos > 0)\r\n        if (normalizedPath.charCodeAt(pos) == separator)\r\n            return normalizedPath.substring(0, pos);\r\n    return \".\";\r\n}\r\nexports.dirname = dirname;\r\n\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports, __webpack_require__) {\n\n__webpack_require__(12);\nmodule.exports = __webpack_require__(17);\n\n\n/***/ }),\n/* 12 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(global) {\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__webpack_require__(13);\r\nvar binaryen = global.Binaryen || __webpack_require__(14);\r\nfor (var key in binaryen)\r\n    if (key.startsWith(\"_Binaryen\") || key.startsWith(\"_Relooper\"))\r\n        global[key] = binaryen[key];\r\n// Use Binaryen's heap instead of std heap\r\nglobal.allocate_memory = function (size) {\r\n    if (!size)\r\n        return 0; // should be safe in our case\r\n    return binaryen._malloc(size);\r\n};\r\nglobal.free_memory = function (ptr) {\r\n    if (ptr)\r\n        binaryen._free(ptr);\r\n};\r\nglobal.move_memory = function (dest, src, n) {\r\n    return binaryen._memmove(dest, src, n);\r\n};\r\nglobal.store = function (ptr, val) {\r\n    binaryen.HEAPU8[ptr] = val;\r\n};\r\nglobal.load = function (ptr) {\r\n    return binaryen.HEAPU8[ptr];\r\n};\r\n// Implement module stubs\r\nvar module_1 = __webpack_require__(0);\r\nmodule_1.Module.prototype.toText = function toText() {\r\n    var previousPrint = binaryen.print;\r\n    var ret = \"\";\r\n    binaryen.print = function (x) { ret += x + \"\\n\"; };\r\n    this.print();\r\n    binaryen.print = previousPrint;\r\n    return ret;\r\n};\r\nmodule_1.Module.prototype.toAsmjs = function toAsmjs() {\r\n    var previousPrint = binaryen.print;\r\n    var ret = \"\";\r\n    binaryen.print = function (x) { ret += x + \"\\n\"; };\r\n    this.printAsmjs();\r\n    binaryen.print = previousPrint;\r\n    return ret;\r\n};\r\n// Implement I64 using long.js\r\nvar Long = __webpack_require__(16);\r\n/// <reference path=\"./i64.d.ts\" />\r\nglobal.i64_new = function (lo, hi) {\r\n    if (hi === void 0) { hi = 0; }\r\n    return Long.fromBits(lo, hi);\r\n};\r\nglobal.i64_low = function (value) {\r\n    return value.low;\r\n};\r\nglobal.i64_high = function (value) {\r\n    return value.high;\r\n};\r\nglobal.i64_add = function (left, right) {\r\n    return left.add(right);\r\n};\r\nglobal.i64_sub = function (left, right) {\r\n    return left.sub(right);\r\n};\r\nglobal.i64_mul = function (left, right) {\r\n    return left.mul(right);\r\n};\r\nglobal.i64_div = function (left, right) {\r\n    return left.div(right);\r\n};\r\nglobal.i64_div_u = function (left, right) {\r\n    return left.toUnsigned().div(right.toUnsigned()).toSigned();\r\n};\r\nglobal.i64_rem = function (left, right) {\r\n    return left.mod(right);\r\n};\r\nglobal.i64_rem_u = function (left, right) {\r\n    return left.toUnsigned().mod(right.toUnsigned()).toSigned();\r\n};\r\nglobal.i64_and = function (left, right) {\r\n    return left.and(right);\r\n};\r\nglobal.i64_or = function (left, right) {\r\n    return left.or(right);\r\n};\r\nglobal.i64_xor = function (left, right) {\r\n    return left.xor(right);\r\n};\r\nglobal.i64_shl = function (left, right) {\r\n    return left.shl(right);\r\n};\r\nglobal.i64_shr = function (left, right) {\r\n    return left.shr(right);\r\n};\r\nglobal.i64_shr_u = function (left, right) {\r\n    return left.shru(right);\r\n};\r\nglobal.i64_not = function (value) {\r\n    return value.not();\r\n};\r\nglobal.i64_align = function (value, alignment) {\r\n    assert(alignment && (alignment & (alignment - 1)) == 0);\r\n    var mask = Long.fromInt(alignment - 1);\r\n    return value.add(mask).and(mask.not());\r\n};\r\nglobal.i64_is_i8 = function (value) {\r\n    return value.high === 0 && (value.low >= 0 && value.low <= i8.MAX_VALUE)\r\n        || value.high === -1 && (value.low >= i8.MIN_VALUE && value.low < 0);\r\n};\r\nglobal.i64_is_i16 = function (value) {\r\n    return value.high === 0 && (value.low >= 0 && value.low <= i16.MAX_VALUE)\r\n        || value.high === -1 && (value.low >= i16.MIN_VALUE && value.low < 0);\r\n};\r\nglobal.i64_is_i32 = function (value) {\r\n    return (value.high === 0 && value.low >= 0) || (value.high === -1 && value.low < 0);\r\n};\r\nglobal.i64_is_u8 = function (value) {\r\n    return value.high === 0 && value.low >= 0 && value.low <= u8.MAX_VALUE;\r\n};\r\nglobal.i64_is_u16 = function (value) {\r\n    return value.high === 0 && value.low >= 0 && value.low <= u16.MAX_VALUE;\r\n};\r\nglobal.i64_is_u32 = function (value) {\r\n    return value.high === 0;\r\n};\r\nglobal.i64_is_bool = function (value) {\r\n    return value.high === 0 && (value.low === 0 || value.low === 1);\r\n};\r\nvar minSafeF32 = Long.fromNumber(f32.MIN_SAFE_INTEGER);\r\nvar maxSafeF32 = Long.fromNumber(f32.MAX_SAFE_INTEGER);\r\nglobal.i64_is_f32 = function (value) {\r\n    return value.gte(minSafeF32) && value.lte(maxSafeF32);\r\n};\r\nvar minSafeF64 = Long.fromNumber(f64.MIN_SAFE_INTEGER);\r\nvar maxSafeF64 = Long.fromNumber(f64.MAX_SAFE_INTEGER);\r\nglobal.i64_is_f64 = function (value) {\r\n    return value.gte(minSafeF64) && value.lte(maxSafeF64);\r\n};\r\nglobal.i64_to_f32 = function (value) {\r\n    return global.Math.fround(value.toNumber());\r\n};\r\nglobal.i64_to_f64 = function (value) {\r\n    return value.toNumber();\r\n};\r\nglobal.i64_to_string = function (value, unsigned) {\r\n    if (unsigned === void 0) { unsigned = false; }\r\n    return (unsigned ? value.toUnsigned() : value).toString(10);\r\n};\r\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))\n\n/***/ }),\n/* 13 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(global) {var globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\r\n\r\nObject.defineProperties(\r\n  globalScope[\"i8\"] = function i8(value) { return value << 24 >> 24; }\r\n, {\r\n  \"MIN_VALUE\": { value: -128, writable: false },\r\n  \"MAX_VALUE\": { value: 127, writable: false }\r\n});\r\nObject.defineProperties(\r\n  globalScope[\"i16\"] = function i16(value) { return value << 16 >> 16; }\r\n, {\r\n  \"MIN_VALUE\": { value: -32768, writable: false },\r\n  \"MAX_VALUE\": { value: 32767, writable: false }\r\n});\r\nObject.defineProperties(\r\n  globalScope[\"i32\"] = globalScope[\"isize\"] = function i32(value) { return value | 0; }\r\n, {\r\n  \"MIN_VALUE\": { value: -2147483648, writable: false },\r\n  \"MAX_VALUE\": { value: 2147483647, writable: false }\r\n});\r\nObject.defineProperties(\r\n  globalScope[\"u8\"] = function u8(value) { return value & 0xff; }\r\n, {\r\n  \"MIN_VALUE\": { value: 0, writable: false },\r\n  \"MAX_VALUE\": { value: 255, writable: false }\r\n});\r\nObject.defineProperties(\r\n  globalScope[\"u16\"] = function u16(value) { return value & 0xffff; }\r\n, {\r\n  \"MIN_VALUE\": { value: 0, writable: false },\r\n  \"MAX_VALUE\": { value: 65535, writable: false }\r\n});\r\nObject.defineProperties(\r\n  globalScope[\"u32\"] = globalScope[\"usize\"] = function u32(value) { return value >>> 0; }\r\n, {\r\n  \"MIN_VALUE\": { value: 0, writable: false },\r\n  \"MAX_VALUE\": { value: 4294967295, writable: false }\r\n});\r\nObject.defineProperties(\r\n  globalScope[\"bool\"] = function bool(value) { return !!value; }\r\n, {\r\n  \"MIN_VALUE\": { value: 0, writable: false },\r\n  \"MAX_VALUE\": { value: 1, writable: false }\r\n});\r\nObject.defineProperties(\r\n  globalScope[\"f32\"] = function f32(value) { return Math.fround(value); }\r\n, {\r\n  \"MIN_VALUE\": { value: Math.fround(-3.40282347e+38), writable: false },\r\n  \"MAX_VALUE\": { value: Math.fround(3.40282347e+38), writable: false },\r\n  \"MIN_SAFE_INTEGER\": { value: -16777215, writable: false },\r\n  \"MAX_SAFE_INTEGER\": { value: 16777215, writable: false },\r\n  \"EPSILON\": { value: Math.fround(1.19209290e-07), writable: false }\r\n});\r\nObject.defineProperties(\r\n  globalScope[\"f64\"] = function f64(value) { return +value; }\r\n, {\r\n  \"MIN_VALUE\": { value: -1.7976931348623157e+308, writable: false },\r\n  \"MAX_VALUE\": { value: 1.7976931348623157e+308, writable: false },\r\n  \"MIN_SAFE_INTEGER\": { value: -9007199254740991, writable: false },\r\n  \"MAX_SAFE_INTEGER\": { value: 9007199254740991, writable: false },\r\n  \"EPSILON\": { value: 2.2204460492503131e-16, writable: false }\r\n});\r\n\r\nglobalScope[\"clz\"] = Math.clz32;\r\nglobalScope[\"abs\"] = Math.abs;\r\nglobalScope[\"max\"] = Math.max;\r\nglobalScope[\"min\"] = Math.min;\r\nglobalScope[\"ceil\"] = Math.ceil;\r\nglobalScope[\"floor\"] = Math.floor;\r\nglobalScope[\"select\"] = function select(ifTrue, ifFalse, condition) { return condition ? ifTrue : ifFalse; };\r\nglobalScope[\"sqrt\"] = Math.sqrt;\r\nglobalScope[\"trunc\"] = Math.trunc;\r\n\r\nfunction UnreachableError() {\r\n  if (Error.captureStackTrace)\r\n    Error.captureStackTrace(this, UnreachableError);\r\n  else\r\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\r\n}\r\nUnreachableError.prototype = Object.create(Error.prototype);\r\nUnreachableError.prototype.name = \"UnreachableError\";\r\nUnreachableError.prototype.message = \"unreachable\";\r\n\r\nglobalScope[\"unreachable\"] = function unreachable() { throw new UnreachableError(); };\r\n\r\nfunction AssertionError(message) {\r\n  this.message = message || \"assertion failed\";\r\n  if (Error.captureStackTrace)\r\n    Error.captureStackTrace(this, AssertionError);\r\n  else\r\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\r\n}\r\nAssertionError.prototype = Object.create(Error.prototype);\r\nAssertionError.prototype.name = \"AssertionError\";\r\n\r\nglobalScope[\"assert\"] = function assert(isTrueish, message) { if (isTrueish) return isTrueish; throw new AssertionError(message); };\r\nglobalScope[\"changetype\"] = function changetype(value) { return value; }\r\n\r\nString[\"fromCharCodes\"] = function fromCharCodes(arr) { return String.fromCharCode.apply(String, arr); }\r\nString[\"fromCodePoints\"] = function fromCodePoints(arr) { return String.fromCodePoint.apply(String, arr); }\r\n\r\nglobalScope[\"parseI32\"] = function parseI32(str, radix) {\r\n  return parseInt(str) | 0;\r\n};\r\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))\n\n/***/ }),\n/* 14 */\n/***/ (function(module, exports) {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_14__;\n\n/***/ }),\n/* 15 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar compiler_1 = __webpack_require__(3);\r\nvar diagnostics_1 = __webpack_require__(1);\r\nvar types_1 = __webpack_require__(4);\r\nvar module_1 = __webpack_require__(0);\r\nvar program_1 = __webpack_require__(2);\r\n/** Compiles a get of a built-in global. */\r\nfunction compileGetConstant(compiler, global, reportNode) {\r\n    switch (global.internalName) {\r\n        case \"NaN\":// context-sensitive\r\n            if (compiler.currentType == types_1.Type.f32)\r\n                return compiler.module.createF32(NaN);\r\n            compiler.currentType = types_1.Type.f64;\r\n            return compiler.module.createF64(NaN);\r\n        case \"Infinity\":// context-sensitive\r\n            if (compiler.currentType == types_1.Type.f32)\r\n                return compiler.module.createF32(Infinity);\r\n            compiler.currentType = types_1.Type.f64;\r\n            return compiler.module.createF64(Infinity);\r\n        case \"HEAP_BASE\":// never inlined for linking purposes\r\n            compiler.currentType = compiler.options.usizeType;\r\n            return compiler.module.createGetGlobal(\"HEAP_BASE\", compiler.options.nativeSizeType);\r\n    }\r\n    compiler.error(diagnostics_1.DiagnosticCode.Operation_not_supported, reportNode.range);\r\n    return compiler.module.createUnreachable();\r\n}\r\nexports.compileGetConstant = compileGetConstant;\r\n/** Compiles a call to a built-in function. */\r\nfunction compileCall(compiler, prototype, typeArguments, operands, contextualType, reportNode) {\r\n    var module = compiler.module;\r\n    var arg0, arg1, arg2, ret;\r\n    var tempLocal0, tempLocal1;\r\n    var type, offset;\r\n    // NOTE that some implementations below make use of the select expression where straight-forward.\r\n    // whether worth or not should probably be tested once it's known if/how embedders handle it.\r\n    // search: createSelect\r\n    switch (prototype.internalName) {\r\n        // math\r\n        case \"isNaN\":// isNaN<T?>(value: T) -> bool\r\n            compiler.currentType = types_1.Type.bool;\r\n            if (operands.length != 1) {\r\n                if (typeArguments && typeArguments.length != 1)\r\n                    compiler.error(diagnostics_1.DiagnosticCode.Expected_0_type_arguments_but_got_1, reportNode.range, \"1\", typeArguments.length.toString(10));\r\n                compiler.error(diagnostics_1.DiagnosticCode.Expected_0_arguments_but_got_1, reportNode.range, \"1\", operands.length.toString(10));\r\n                return module.createUnreachable();\r\n            }\r\n            if (typeArguments) {\r\n                if (typeArguments.length != 1) {\r\n                    compiler.error(diagnostics_1.DiagnosticCode.Expected_0_type_arguments_but_got_1, reportNode.range, \"1\", typeArguments.length.toString(10));\r\n                    return module.createUnreachable();\r\n                }\r\n                arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n            }\r\n            else\r\n                arg0 = compiler.compileExpression(operands[0], types_1.Type.f64, 0 /* NONE */);\r\n            switch (compiler.currentType.kind) {\r\n                case 11 /* F32 */:\r\n                    tempLocal0 = compiler.currentFunction.getAndFreeTempLocal(types_1.Type.f32);\r\n                    ret = module.createBinary(module_1.BinaryOp.NeF32, module.createTeeLocal(tempLocal0.index, arg0), module.createGetLocal(tempLocal0.index, module_1.NativeType.F32));\r\n                    break;\r\n                case 12 /* F64 */:\r\n                    tempLocal0 = compiler.currentFunction.getAndFreeTempLocal(types_1.Type.f64);\r\n                    ret = module.createBinary(module_1.BinaryOp.NeF64, module.createTeeLocal(tempLocal0.index, arg0), module.createGetLocal(tempLocal0.index, module_1.NativeType.F64));\r\n                    break;\r\n                case 13 /* VOID */:\r\n                    compiler.error(diagnostics_1.DiagnosticCode.Operation_not_supported, reportNode.range);\r\n                    ret = module.createUnreachable();\r\n                    break;\r\n                default:// every other type is never NaN\r\n                    ret = module.createI32(0);\r\n                    break;\r\n            }\r\n            compiler.currentType = types_1.Type.bool;\r\n            return ret;\r\n        case \"isFinite\":// isFinite<T?>(value: T) -> bool\r\n            compiler.currentType = types_1.Type.bool;\r\n            if (operands.length != 1) {\r\n                if (typeArguments && typeArguments.length != 1)\r\n                    compiler.error(diagnostics_1.DiagnosticCode.Expected_0_type_arguments_but_got_1, reportNode.range, \"1\", typeArguments.length.toString(10));\r\n                compiler.error(diagnostics_1.DiagnosticCode.Expected_0_arguments_but_got_1, reportNode.range, \"1\", operands.length.toString(10));\r\n                return module.createUnreachable();\r\n            }\r\n            if (typeArguments) {\r\n                if (typeArguments.length != 1) {\r\n                    compiler.error(diagnostics_1.DiagnosticCode.Expected_0_type_arguments_but_got_1, reportNode.range, \"1\", typeArguments.length.toString(10));\r\n                    return module.createUnreachable();\r\n                }\r\n                arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n            }\r\n            else\r\n                arg0 = compiler.compileExpression(operands[0], types_1.Type.f64, 0 /* NONE */);\r\n            switch (compiler.currentType.kind) {\r\n                case 11 /* F32 */:\r\n                    tempLocal0 = compiler.currentFunction.getAndFreeTempLocal(types_1.Type.f32);\r\n                    ret = module.createSelect(module.createBinary(module_1.BinaryOp.NeF32, module.createUnary(module_1.UnaryOp.AbsF32, module.createTeeLocal(tempLocal0.index, arg0)), module.createF32(Infinity)), module.createI32(0), module.createBinary(module_1.BinaryOp.EqF32, module.createGetLocal(tempLocal0.index, module_1.NativeType.F32), module.createGetLocal(tempLocal0.index, module_1.NativeType.F32)));\r\n                    break;\r\n                case 12 /* F64 */:\r\n                    tempLocal0 = compiler.currentFunction.getAndFreeTempLocal(types_1.Type.f64);\r\n                    ret = module.createSelect(module.createBinary(module_1.BinaryOp.NeF64, module.createUnary(module_1.UnaryOp.AbsF64, module.createTeeLocal(tempLocal0.index, arg0)), module.createF64(Infinity)), module.createI32(0), module.createBinary(module_1.BinaryOp.EqF64, module.createGetLocal(tempLocal0.index, module_1.NativeType.F64), module.createGetLocal(tempLocal0.index, module_1.NativeType.F64)));\r\n                    break;\r\n                case 13 /* VOID */:\r\n                    compiler.error(diagnostics_1.DiagnosticCode.Operation_not_supported, reportNode.range);\r\n                    ret = module.createUnreachable();\r\n                    break;\r\n                default:// every other type is always finite\r\n                    ret = module.createI32(1);\r\n                    break;\r\n            }\r\n            compiler.currentType = types_1.Type.bool;\r\n            return ret;\r\n        case \"clz\":// clz<T?>(value: T) -> T\r\n            if (operands.length != 1) {\r\n                if (typeArguments) {\r\n                    if (typeArguments.length)\r\n                        compiler.currentType = typeArguments[0];\r\n                    if (typeArguments.length != 1)\r\n                        compiler.error(diagnostics_1.DiagnosticCode.Expected_0_type_arguments_but_got_1, reportNode.range, \"1\", typeArguments.length.toString(10));\r\n                }\r\n                compiler.error(diagnostics_1.DiagnosticCode.Expected_0_arguments_but_got_1, reportNode.range, \"1\", operands.length.toString(10));\r\n                return module.createUnreachable();\r\n            }\r\n            if (typeArguments) {\r\n                if (typeArguments.length != 1) {\r\n                    if (typeArguments.length)\r\n                        compiler.currentType = typeArguments[0];\r\n                    compiler.error(diagnostics_1.DiagnosticCode.Expected_0_type_arguments_but_got_1, reportNode.range, \"1\", typeArguments.length.toString(10));\r\n                    return module.createUnreachable();\r\n                }\r\n                arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n            }\r\n            else\r\n                arg0 = compiler.compileExpression(operands[0], types_1.Type.i32, 0 /* NONE */);\r\n            switch (compiler.currentType.kind) {\r\n                default:// any integer up to 32-bits incl. bool\r\n                    ret = module.createUnary(module_1.UnaryOp.ClzI32, arg0);\r\n                    break;\r\n                case 9 /* USIZE */:\r\n                    if (compiler.currentType.isReference) {\r\n                        compiler.error(diagnostics_1.DiagnosticCode.Operation_not_supported, reportNode.range);\r\n                        ret = module.createUnreachable();\r\n                        break;\r\n                    }\r\n                // fall-through\r\n                case 4 /* ISIZE */:\r\n                    ret = module.createUnary(compiler.options.target == compiler_1.Target.WASM64 ? module_1.UnaryOp.ClzI64 : module_1.UnaryOp.ClzI32, arg0);\r\n                    break;\r\n                case 3 /* I64 */:\r\n                case 8 /* U64 */:\r\n                    ret = module.createUnary(module_1.UnaryOp.ClzI64, arg0);\r\n                    break;\r\n                case 11 /* F32 */:\r\n                case 12 /* F64 */:\r\n                case 13 /* VOID */:\r\n                    compiler.error(diagnostics_1.DiagnosticCode.Operation_not_supported, reportNode.range);\r\n                    ret = module.createUnreachable();\r\n                    break;\r\n            }\r\n            return ret;\r\n        case \"ctz\":// ctz<T?>(value: T) -> T\r\n            if (operands.length != 1) {\r\n                if (typeArguments) {\r\n                    if (typeArguments.length)\r\n                        compiler.currentType = typeArguments[0];\r\n                    if (typeArguments.length != 1)\r\n                        compiler.error(diagnostics_1.DiagnosticCode.Expected_0_type_arguments_but_got_1, reportNode.range, \"1\", typeArguments.length.toString(10));\r\n                }\r\n                compiler.error(diagnostics_1.DiagnosticCode.Expected_0_arguments_but_got_1, reportNode.range, \"1\", operands.length.toString(10));\r\n                return module.createUnreachable();\r\n            }\r\n            if (typeArguments) {\r\n                if (typeArguments.length != 1) {\r\n                    if (typeArguments.length)\r\n                        compiler.currentType = typeArguments[0];\r\n                    compiler.error(diagnostics_1.DiagnosticCode.Expected_0_type_arguments_but_got_1, reportNode.range, \"1\", typeArguments.length.toString(10));\r\n                    return module.createUnreachable();\r\n                }\r\n                arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n            }\r\n            else\r\n                arg0 = compiler.compileExpression(operands[0], types_1.Type.i32, 0 /* NONE */);\r\n            switch (compiler.currentType.kind) {\r\n                default:// any integer up to 32-bits incl. bool\r\n                    ret = module.createUnary(module_1.UnaryOp.CtzI32, arg0);\r\n                    break;\r\n                case 9 /* USIZE */:\r\n                    if (compiler.currentType.isReference) {\r\n                        compiler.error(diagnostics_1.DiagnosticCode.Operation_not_supported, reportNode.range);\r\n                        ret = module.createUnreachable();\r\n                        break;\r\n                    }\r\n                // fall-through\r\n                case 4 /* ISIZE */:\r\n                    ret = module.createUnary(compiler.options.target == compiler_1.Target.WASM64 ? module_1.UnaryOp.CtzI64 : module_1.UnaryOp.CtzI32, arg0);\r\n                    break;\r\n                case 3 /* I64 */:\r\n                case 8 /* U64 */:\r\n                    ret = module.createUnary(module_1.UnaryOp.CtzI64, arg0);\r\n                    break;\r\n                case 11 /* F32 */:\r\n                case 12 /* F64 */:\r\n                case 13 /* VOID */:\r\n                    compiler.error(diagnostics_1.DiagnosticCode.Operation_not_supported, reportNode.range);\r\n                    ret = module.createUnreachable();\r\n                    break;\r\n            }\r\n            return ret;\r\n        case \"popcnt\":// popcnt<T?>(value: T) -> T\r\n            if (operands.length != 1) {\r\n                if (typeArguments) {\r\n                    if (typeArguments.length)\r\n                        compiler.currentType = typeArguments[0];\r\n                    if (typeArguments.length != 1)\r\n                        compiler.error(diagnostics_1.DiagnosticCode.Expected_0_type_arguments_but_got_1, reportNode.range, \"1\", typeArguments.length.toString(10));\r\n                }\r\n                compiler.error(diagnostics_1.DiagnosticCode.Expected_0_arguments_but_got_1, reportNode.range, \"1\", operands.length.toString(10));\r\n                return module.createUnreachable();\r\n            }\r\n            if (typeArguments) {\r\n                if (typeArguments.length != 1) {\r\n                    if (typeArguments.length)\r\n                        compiler.currentType = typeArguments[0];\r\n                    compiler.error(diagnostics_1.DiagnosticCode.Expected_0_type_arguments_but_got_1, reportNode.range, \"1\", typeArguments.length.toString(10));\r\n                    return module.createUnreachable();\r\n                }\r\n                arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n            }\r\n            else\r\n                arg0 = compiler.compileExpression(operands[0], types_1.Type.i32, 0 /* NONE */);\r\n            switch (compiler.currentType.kind) {\r\n                default:// any integer up to 32-bits incl. bool\r\n                    ret = module.createUnary(module_1.UnaryOp.PopcntI32, arg0);\r\n                    break;\r\n                case 9 /* USIZE */:\r\n                    if (compiler.currentType.isReference) {\r\n                        compiler.error(diagnostics_1.DiagnosticCode.Operation_not_supported, reportNode.range);\r\n                        ret = module.createUnreachable();\r\n                        break;\r\n                    }\r\n                // fall-through\r\n                case 4 /* ISIZE */:\r\n                    ret = module.createUnary(compiler.options.target == compiler_1.Target.WASM64 ? module_1.UnaryOp.PopcntI64 : module_1.UnaryOp.PopcntI32, arg0);\r\n                    break;\r\n                case 3 /* I64 */:\r\n                case 8 /* U64 */:\r\n                    ret = module.createUnary(module_1.UnaryOp.PopcntI64, arg0);\r\n                    break;\r\n                case 11 /* F32 */:\r\n                case 12 /* F64 */:\r\n                case 13 /* VOID */:\r\n                    compiler.error(diagnostics_1.DiagnosticCode.Operation_not_supported, reportNode.range);\r\n                    ret = module.createUnreachable();\r\n                    break;\r\n            }\r\n            return ret;\r\n        case \"rotl\":// rotl<T?>(value: T, shift: T) -> T\r\n            if (operands.length != 2) {\r\n                if (typeArguments) {\r\n                    if (typeArguments.length)\r\n                        compiler.currentType = typeArguments[0];\r\n                    if (typeArguments.length != 1)\r\n                        compiler.error(diagnostics_1.DiagnosticCode.Expected_0_type_arguments_but_got_1, reportNode.range, \"1\", typeArguments.length.toString(10));\r\n                }\r\n                compiler.error(diagnostics_1.DiagnosticCode.Expected_0_arguments_but_got_1, reportNode.range, \"2\", operands.length.toString(10));\r\n                return module.createUnreachable();\r\n            }\r\n            if (typeArguments) {\r\n                if (typeArguments.length != 1) {\r\n                    if (typeArguments.length)\r\n                        compiler.currentType = typeArguments[0];\r\n                    compiler.error(diagnostics_1.DiagnosticCode.Expected_0_type_arguments_but_got_1, reportNode.range, \"1\", typeArguments.length.toString(10));\r\n                    return module.createUnreachable();\r\n                }\r\n                arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n            }\r\n            else\r\n                arg0 = compiler.compileExpression(operands[0], types_1.Type.i32, 0 /* NONE */);\r\n            arg1 = compiler.compileExpression(operands[1], compiler.currentType);\r\n            switch (compiler.currentType.kind) {\r\n                case 0 /* I8 */:\r\n                case 1 /* I16 */:\r\n                case 5 /* U8 */:\r\n                case 6 /* U16 */:\r\n                case 10 /* BOOL */:\r\n                    ret = compiler_1.makeSmallIntegerWrap(module.createBinary(module_1.BinaryOp.RotlI32, arg0, arg1), compiler.currentType, module);\r\n                case 2 /* I32 */:\r\n                case 7 /* U32 */:\r\n                    ret = module.createBinary(module_1.BinaryOp.RotlI32, arg0, arg1);\r\n                    break;\r\n                case 9 /* USIZE */:\r\n                    if (compiler.currentType.isReference) {\r\n                        compiler.error(diagnostics_1.DiagnosticCode.Operation_not_supported, reportNode.range);\r\n                        ret = module.createUnreachable();\r\n                        break;\r\n                    }\r\n                // fall-through\r\n                case 4 /* ISIZE */:\r\n                    ret = module.createBinary(compiler.options.target == compiler_1.Target.WASM64 ? module_1.BinaryOp.RotlI64 : module_1.BinaryOp.RotlI32, arg0, arg1);\r\n                    break;\r\n                case 3 /* I64 */:\r\n                case 8 /* U64 */:\r\n                    ret = module.createBinary(module_1.BinaryOp.RotlI64, arg0, arg1);\r\n                    break;\r\n                default:\r\n                    compiler.error(diagnostics_1.DiagnosticCode.Operation_not_supported, reportNode.range);\r\n                    ret = module.createUnreachable();\r\n                    break;\r\n            }\r\n            return ret;\r\n        case \"rotr\":// rotr<T?>(value: T, shift: T) -> T\r\n            if (operands.length != 2) {\r\n                if (typeArguments) {\r\n                    if (typeArguments.length)\r\n                        compiler.currentType = typeArguments[0];\r\n                    if (typeArguments.length != 1)\r\n                        compiler.error(diagnostics_1.DiagnosticCode.Expected_0_type_arguments_but_got_1, reportNode.range, \"1\", typeArguments.length.toString(10));\r\n                }\r\n                compiler.error(diagnostics_1.DiagnosticCode.Expected_0_arguments_but_got_1, reportNode.range, \"2\", operands.length.toString(10));\r\n                return module.createUnreachable();\r\n            }\r\n            if (typeArguments) {\r\n                if (typeArguments.length != 1) {\r\n                    if (typeArguments.length)\r\n                        compiler.currentType = typeArguments[0];\r\n                    compiler.error(diagnostics_1.DiagnosticCode.Expected_0_type_arguments_but_got_1, reportNode.range, \"1\", typeArguments.length.toString(10));\r\n                    return module.createUnreachable();\r\n                }\r\n                arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n            }\r\n            else\r\n                arg0 = compiler.compileExpression(operands[0], types_1.Type.i32, 0 /* NONE */);\r\n            arg1 = compiler.compileExpression(operands[1], compiler.currentType);\r\n            switch (compiler.currentType.kind) {\r\n                case 0 /* I8 */:\r\n                case 1 /* I16 */:\r\n                case 5 /* U8 */:\r\n                case 6 /* U16 */:\r\n                case 10 /* BOOL */:\r\n                    ret = compiler_1.makeSmallIntegerWrap(module.createBinary(module_1.BinaryOp.RotrI32, arg0, arg1), compiler.currentType, module);\r\n                    break;\r\n                case 2 /* I32 */:\r\n                case 7 /* U32 */:\r\n                    ret = module.createBinary(module_1.BinaryOp.RotrI32, arg0, arg1);\r\n                    break;\r\n                case 9 /* USIZE */:\r\n                    if (compiler.currentType.isReference) {\r\n                        compiler.error(diagnostics_1.DiagnosticCode.Operation_not_supported, reportNode.range);\r\n                        ret = module.createUnreachable();\r\n                        break;\r\n                    }\r\n                // fall-through\r\n                case 4 /* ISIZE */:\r\n                    ret = module.createBinary(compiler.options.target == compiler_1.Target.WASM64 ? module_1.BinaryOp.RotrI64 : module_1.BinaryOp.RotrI32, arg0, arg1);\r\n                    break;\r\n                case 3 /* I64 */:\r\n                case 8 /* U64 */:\r\n                    ret = module.createBinary(module_1.BinaryOp.RotrI64, arg0, arg1);\r\n                    break;\r\n                default:\r\n                    compiler.error(diagnostics_1.DiagnosticCode.Operation_not_supported, reportNode.range);\r\n                    ret = module.createUnreachable();\r\n                    break;\r\n            }\r\n            return ret;\r\n        case \"abs\":// abs<T?>(value: T) -> T\r\n            if (operands.length != 1) {\r\n                if (typeArguments) {\r\n                    if (typeArguments.length)\r\n                        compiler.currentType = typeArguments[0];\r\n                    if (typeArguments.length != 1)\r\n                        compiler.error(diagnostics_1.DiagnosticCode.Expected_0_type_arguments_but_got_1, reportNode.range, \"1\", typeArguments.length.toString(10));\r\n                }\r\n                compiler.error(diagnostics_1.DiagnosticCode.Expected_0_arguments_but_got_1, reportNode.range, \"1\", operands.length.toString(10));\r\n                return module.createUnreachable();\r\n            }\r\n            if (typeArguments) {\r\n                if (typeArguments.length != 1) {\r\n                    if (typeArguments.length)\r\n                        compiler.currentType = typeArguments[0];\r\n                    compiler.error(diagnostics_1.DiagnosticCode.Expected_0_type_arguments_but_got_1, reportNode.range, \"1\", typeArguments.length.toString(10));\r\n                    return module.createUnreachable();\r\n                }\r\n                arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n            }\r\n            else\r\n                arg0 = compiler.compileExpression(operands[0], types_1.Type.f64, 0 /* NONE */);\r\n            switch (compiler.currentType.kind) {\r\n                case 0 /* I8 */:\r\n                case 1 /* I16 */:\r\n                // doesn't need sign-extension here because ifFalse below is either positive\r\n                // or MIN_VALUE (-MIN_VALUE == MIN_VALUE) if selected\r\n                case 2 /* I32 */:\r\n                    tempLocal0 = compiler.currentFunction.getAndFreeTempLocal(types_1.Type.i32);\r\n                    ret = module.createSelect(module.createTeeLocal(tempLocal0.index, arg0), module.createBinary(module_1.BinaryOp.SubI32, // ifFalse\r\n                    module.createI32(0), module.createGetLocal(tempLocal0.index, module_1.NativeType.I32)), module.createBinary(module_1.BinaryOp.GtI32, module.createGetLocal(tempLocal0.index, module_1.NativeType.I32), module.createI32(0)));\r\n                    break;\r\n                case 4 /* ISIZE */:\r\n                    tempLocal0 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType);\r\n                    ret = module.createSelect(module.createTeeLocal(tempLocal0.index, arg0), module.createBinary(compiler.options.target == compiler_1.Target.WASM64 ? module_1.BinaryOp.SubI64 : module_1.BinaryOp.SubI32, compiler.options.usizeType.toNativeZero(module), module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType)), module.createBinary(compiler.options.target == compiler_1.Target.WASM64 ? module_1.BinaryOp.GtI64 : module_1.BinaryOp.GtI32, module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType), compiler.options.usizeType.toNativeZero(module)));\r\n                    break;\r\n                case 3 /* I64 */:\r\n                    tempLocal0 = compiler.currentFunction.getAndFreeTempLocal(types_1.Type.i64);\r\n                    ret = module.createSelect(module.createTeeLocal(tempLocal0.index, arg0), module.createBinary(module_1.BinaryOp.SubI64, module.createI64(0, 0), module.createGetLocal(tempLocal0.index, module_1.NativeType.I64)), module.createBinary(module_1.BinaryOp.GtI64, module.createGetLocal(tempLocal0.index, module_1.NativeType.I64), module.createI64(0, 0)));\r\n                    break;\r\n                case 9 /* USIZE */:\r\n                    if (compiler.currentType.isReference) {\r\n                        compiler.error(diagnostics_1.DiagnosticCode.Operation_not_supported, reportNode.range);\r\n                        ret = module.createUnreachable();\r\n                        break;\r\n                    }\r\n                // fall-through\r\n                case 5 /* U8 */:\r\n                case 6 /* U16 */:\r\n                case 7 /* U32 */:\r\n                case 8 /* U64 */:\r\n                case 10 /* BOOL */:\r\n                    ret = arg0;\r\n                    break;\r\n                case 11 /* F32 */:\r\n                    ret = module.createUnary(module_1.UnaryOp.AbsF32, arg0);\r\n                    break;\r\n                case 12 /* F64 */:\r\n                    ret = module.createUnary(module_1.UnaryOp.AbsF64, arg0);\r\n                    break;\r\n                case 13 /* VOID */:\r\n                    ret = module.createUnreachable();\r\n                    break;\r\n                default:// void\r\n                    compiler.error(diagnostics_1.DiagnosticCode.Operation_not_supported, reportNode.range);\r\n                    ret = module.createUnreachable();\r\n                    break;\r\n            }\r\n            return ret;\r\n        case \"max\":// max<T?>(left: T, right: T) -> T\r\n            if (operands.length != 2) {\r\n                if (typeArguments) {\r\n                    if (typeArguments.length)\r\n                        compiler.currentType = typeArguments[0];\r\n                    if (typeArguments.length != 1)\r\n                        compiler.error(diagnostics_1.DiagnosticCode.Expected_0_type_arguments_but_got_1, reportNode.range, \"1\", typeArguments.length.toString(10));\r\n                }\r\n                compiler.error(diagnostics_1.DiagnosticCode.Expected_0_arguments_but_got_1, reportNode.range, \"2\", operands.length.toString(10));\r\n                return module.createUnreachable();\r\n            }\r\n            if (typeArguments) {\r\n                if (typeArguments.length != 1) {\r\n                    if (typeArguments.length)\r\n                        compiler.currentType = typeArguments[0];\r\n                    compiler.error(diagnostics_1.DiagnosticCode.Expected_0_type_arguments_but_got_1, reportNode.range, \"1\", typeArguments.length.toString(10));\r\n                    return module.createUnreachable();\r\n                }\r\n                arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n            }\r\n            else\r\n                arg0 = compiler.compileExpression(operands[0], types_1.Type.f64, 0 /* NONE */);\r\n            arg1 = compiler.compileExpression(operands[1], compiler.currentType);\r\n            switch (compiler.currentType.kind) {\r\n                case 0 /* I8 */:\r\n                case 1 /* I16 */:\r\n                case 2 /* I32 */:\r\n                    tempLocal0 = compiler.currentFunction.getTempLocal(types_1.Type.i32);\r\n                    tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(types_1.Type.i32);\r\n                    compiler.currentFunction.freeTempLocal(tempLocal0);\r\n                    ret = module.createSelect(module.createTeeLocal(tempLocal0.index, arg0), module.createTeeLocal(tempLocal1.index, arg1), module.createBinary(module_1.BinaryOp.GtI32, module.createGetLocal(tempLocal0.index, module_1.NativeType.I32), module.createGetLocal(tempLocal1.index, module_1.NativeType.I32)));\r\n                    break;\r\n                case 5 /* U8 */:\r\n                case 6 /* U16 */:\r\n                case 7 /* U32 */:\r\n                case 10 /* BOOL */:\r\n                    tempLocal0 = compiler.currentFunction.getTempLocal(types_1.Type.i32);\r\n                    tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(types_1.Type.i32);\r\n                    compiler.currentFunction.freeTempLocal(tempLocal0);\r\n                    ret = module.createSelect(module.createTeeLocal(tempLocal0.index, arg0), module.createTeeLocal(tempLocal1.index, arg1), module.createBinary(module_1.BinaryOp.GtU32, module.createGetLocal(tempLocal0.index, module_1.NativeType.I32), module.createGetLocal(tempLocal1.index, module_1.NativeType.I32)));\r\n                    break;\r\n                case 3 /* I64 */:\r\n                    tempLocal0 = compiler.currentFunction.getTempLocal(types_1.Type.i64);\r\n                    tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(types_1.Type.i64);\r\n                    compiler.currentFunction.freeTempLocal(tempLocal0);\r\n                    ret = module.createSelect(module.createTeeLocal(tempLocal0.index, arg0), module.createTeeLocal(tempLocal1.index, arg1), module.createBinary(module_1.BinaryOp.GtI64, module.createGetLocal(tempLocal0.index, module_1.NativeType.I64), module.createGetLocal(tempLocal1.index, module_1.NativeType.I64)));\r\n                    break;\r\n                case 8 /* U64 */:\r\n                    tempLocal0 = compiler.currentFunction.getTempLocal(types_1.Type.i64);\r\n                    tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(types_1.Type.i64);\r\n                    compiler.currentFunction.freeTempLocal(tempLocal0);\r\n                    ret = module.createSelect(module.createTeeLocal(tempLocal0.index, arg0), module.createTeeLocal(tempLocal1.index, arg1), module.createBinary(module_1.BinaryOp.GtU64, module.createGetLocal(tempLocal0.index, module_1.NativeType.I64), module.createGetLocal(tempLocal1.index, module_1.NativeType.I64)));\r\n                    break;\r\n                case 4 /* ISIZE */:\r\n                    tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType);\r\n                    tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType);\r\n                    compiler.currentFunction.freeTempLocal(tempLocal0);\r\n                    ret = module.createSelect(module.createTeeLocal(tempLocal0.index, arg0), module.createTeeLocal(tempLocal1.index, arg1), module.createBinary(compiler.options.target == compiler_1.Target.WASM64 ? module_1.BinaryOp.GtI64 : module_1.BinaryOp.GtI32, module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType), module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)));\r\n                    break;\r\n                case 9 /* USIZE */:\r\n                    if (compiler.currentType.isReference) {\r\n                        compiler.error(diagnostics_1.DiagnosticCode.Operation_not_supported, reportNode.range);\r\n                        ret = module.createUnreachable();\r\n                        break;\r\n                    }\r\n                    tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType);\r\n                    tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType);\r\n                    compiler.currentFunction.freeTempLocal(tempLocal0);\r\n                    ret = module.createSelect(module.createTeeLocal(tempLocal0.index, arg0), module.createTeeLocal(tempLocal1.index, arg1), module.createBinary(compiler.options.target == compiler_1.Target.WASM64 ? module_1.BinaryOp.GtU64 : module_1.BinaryOp.GtU32, module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType), module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)));\r\n                    break;\r\n                case 11 /* F32 */:\r\n                    ret = module.createBinary(module_1.BinaryOp.MaxF32, arg0, arg1);\r\n                    break;\r\n                case 12 /* F64 */:\r\n                    ret = module.createBinary(module_1.BinaryOp.MaxF64, arg0, arg1);\r\n                    break;\r\n                default:// void\r\n                    compiler.error(diagnostics_1.DiagnosticCode.Operation_not_supported, reportNode.range);\r\n                    ret = module.createUnreachable();\r\n                    break;\r\n            }\r\n            return ret;\r\n        case \"min\":// min<T?>(left: T, right: T) -> T\r\n            if (operands.length != 2) {\r\n                if (typeArguments) {\r\n                    if (typeArguments.length)\r\n                        compiler.currentType = typeArguments[0];\r\n                    if (typeArguments.length != 1)\r\n                        compiler.error(diagnostics_1.DiagnosticCode.Expected_0_type_arguments_but_got_1, reportNode.range, \"1\", typeArguments.length.toString(10));\r\n                }\r\n                compiler.error(diagnostics_1.DiagnosticCode.Expected_0_arguments_but_got_1, reportNode.range, \"2\", operands.length.toString(10));\r\n                return module.createUnreachable();\r\n            }\r\n            if (typeArguments) {\r\n                if (typeArguments.length != 1) {\r\n                    if (typeArguments.length)\r\n                        compiler.currentType = typeArguments[0];\r\n                    compiler.error(diagnostics_1.DiagnosticCode.Expected_0_type_arguments_but_got_1, reportNode.range, \"1\", typeArguments.length.toString(10));\r\n                    return module.createUnreachable();\r\n                }\r\n                arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n            }\r\n            else\r\n                arg0 = compiler.compileExpression(operands[0], types_1.Type.f64, 0 /* NONE */);\r\n            arg1 = compiler.compileExpression(operands[1], compiler.currentType);\r\n            switch (compiler.currentType.kind) {\r\n                case 0 /* I8 */:\r\n                case 1 /* I16 */:\r\n                case 2 /* I32 */:\r\n                    tempLocal0 = compiler.currentFunction.getTempLocal(types_1.Type.i32);\r\n                    tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(types_1.Type.i32);\r\n                    compiler.currentFunction.freeTempLocal(tempLocal0);\r\n                    ret = module.createSelect(module.createTeeLocal(tempLocal0.index, arg0), module.createTeeLocal(tempLocal1.index, arg1), module.createBinary(module_1.BinaryOp.LtI32, module.createGetLocal(tempLocal0.index, module_1.NativeType.I32), module.createGetLocal(tempLocal1.index, module_1.NativeType.I32)));\r\n                    break;\r\n                case 5 /* U8 */:\r\n                case 6 /* U16 */:\r\n                case 7 /* U32 */:\r\n                case 10 /* BOOL */:\r\n                    tempLocal0 = compiler.currentFunction.getTempLocal(types_1.Type.i32);\r\n                    tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(types_1.Type.i32);\r\n                    compiler.currentFunction.freeTempLocal(tempLocal0);\r\n                    ret = module.createSelect(module.createTeeLocal(tempLocal0.index, arg0), module.createTeeLocal(tempLocal1.index, arg1), module.createBinary(module_1.BinaryOp.LtU32, module.createGetLocal(tempLocal0.index, module_1.NativeType.I32), module.createGetLocal(tempLocal1.index, module_1.NativeType.I32)));\r\n                    break;\r\n                case 3 /* I64 */:\r\n                    tempLocal0 = compiler.currentFunction.getTempLocal(types_1.Type.i64);\r\n                    tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(types_1.Type.i64);\r\n                    compiler.currentFunction.freeTempLocal(tempLocal0);\r\n                    ret = module.createSelect(module.createTeeLocal(tempLocal0.index, arg0), module.createTeeLocal(tempLocal1.index, arg1), module.createBinary(module_1.BinaryOp.LtI64, module.createGetLocal(tempLocal0.index, module_1.NativeType.I64), module.createGetLocal(tempLocal1.index, module_1.NativeType.I64)));\r\n                    break;\r\n                case 8 /* U64 */:\r\n                    tempLocal0 = compiler.currentFunction.getTempLocal(types_1.Type.i64);\r\n                    tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(types_1.Type.i64);\r\n                    compiler.currentFunction.freeTempLocal(tempLocal0);\r\n                    ret = module.createSelect(module.createTeeLocal(tempLocal0.index, arg0), module.createTeeLocal(tempLocal1.index, arg1), module.createBinary(module_1.BinaryOp.LtU64, module.createGetLocal(tempLocal0.index, module_1.NativeType.I64), module.createGetLocal(tempLocal1.index, module_1.NativeType.I64)));\r\n                    break;\r\n                case 4 /* ISIZE */:\r\n                    tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType);\r\n                    tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType);\r\n                    compiler.currentFunction.freeTempLocal(tempLocal0);\r\n                    ret = module.createSelect(module.createTeeLocal(tempLocal0.index, arg0), module.createTeeLocal(tempLocal1.index, arg1), module.createBinary(compiler.options.target == compiler_1.Target.WASM64 ? module_1.BinaryOp.LtI64 : module_1.BinaryOp.LtI32, module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType), module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)));\r\n                    break;\r\n                case 9 /* USIZE */:\r\n                    if (compiler.currentType.isReference) {\r\n                        compiler.error(diagnostics_1.DiagnosticCode.Operation_not_supported, reportNode.range);\r\n                        ret = module.createUnreachable();\r\n                        break;\r\n                    }\r\n                    tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType);\r\n                    tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType);\r\n                    compiler.currentFunction.freeTempLocal(tempLocal0);\r\n                    ret = module.createSelect(module.createTeeLocal(tempLocal0.index, arg0), module.createTeeLocal(tempLocal1.index, arg1), module.createBinary(compiler.options.target == compiler_1.Target.WASM64 ? module_1.BinaryOp.LtU64 : module_1.BinaryOp.LtU32, module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType), module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)));\r\n                    break;\r\n                case 11 /* F32 */:\r\n                    ret = module.createBinary(module_1.BinaryOp.MinF32, arg0, arg1);\r\n                    break;\r\n                case 12 /* F64 */:\r\n                    ret = module.createBinary(module_1.BinaryOp.MinF64, arg0, arg1);\r\n                    break;\r\n                default:// void\r\n                    compiler.error(diagnostics_1.DiagnosticCode.Operation_not_supported, reportNode.range);\r\n                    ret = module.createUnreachable();\r\n                    break;\r\n            }\r\n            return ret;\r\n        case \"ceil\":// ceil<T?>(value: T) -> T\r\n            if (operands.length != 1) {\r\n                if (typeArguments) {\r\n                    if (typeArguments.length)\r\n                        compiler.currentType = typeArguments[0];\r\n                    if (typeArguments.length != 1)\r\n                        compiler.error(diagnostics_1.DiagnosticCode.Expected_0_type_arguments_but_got_1, reportNode.range, \"1\", typeArguments.length.toString(10));\r\n                }\r\n                compiler.error(diagnostics_1.DiagnosticCode.Expected_0_arguments_but_got_1, reportNode.range, \"1\", operands.length.toString(10));\r\n                return module.createUnreachable();\r\n            }\r\n            if (typeArguments) {\r\n                if (typeArguments.length != 1) {\r\n                    if (typeArguments.length)\r\n                        compiler.currentType = typeArguments[0];\r\n                    compiler.error(diagnostics_1.DiagnosticCode.Expected_0_type_arguments_but_got_1, reportNode.range, \"1\", typeArguments.length.toString(10));\r\n                    return module.createUnreachable();\r\n                }\r\n                arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n            }\r\n            else\r\n                arg0 = compiler.compileExpression(operands[0], types_1.Type.f64, 0 /* NONE */);\r\n            switch (compiler.currentType.kind) {\r\n                case 9 /* USIZE */:\r\n                    if (compiler.currentType.isReference) {\r\n                        compiler.error(diagnostics_1.DiagnosticCode.Operation_not_supported, reportNode.range);\r\n                        ret = module.createUnreachable();\r\n                        break;\r\n                    }\r\n                // fall-through\r\n                default:// any integer\r\n                    ret = arg0;\r\n                    break;\r\n                case 11 /* F32 */:\r\n                    ret = module.createUnary(module_1.UnaryOp.CeilF32, arg0);\r\n                    break;\r\n                case 12 /* F64 */:\r\n                    ret = module.createUnary(module_1.UnaryOp.CeilF64, arg0);\r\n                    break;\r\n                case 13 /* VOID */:\r\n                    compiler.error(diagnostics_1.DiagnosticCode.Operation_not_supported, reportNode.range);\r\n                    ret = module.createUnreachable();\r\n                    break;\r\n            }\r\n            return ret;\r\n        case \"floor\":// floor<T?>(value: T) -> T\r\n            if (operands.length != 1) {\r\n                if (typeArguments) {\r\n                    if (typeArguments.length)\r\n                        compiler.currentType = typeArguments[0];\r\n                    if (typeArguments.length != 1)\r\n                        compiler.error(diagnostics_1.DiagnosticCode.Expected_0_type_arguments_but_got_1, reportNode.range, \"1\", typeArguments.length.toString(10));\r\n                }\r\n                compiler.error(diagnostics_1.DiagnosticCode.Expected_0_arguments_but_got_1, reportNode.range, \"1\", operands.length.toString(10));\r\n                return module.createUnreachable();\r\n            }\r\n            if (typeArguments) {\r\n                if (typeArguments.length != 1) {\r\n                    if (typeArguments.length)\r\n                        compiler.currentType = typeArguments[0];\r\n                    compiler.error(diagnostics_1.DiagnosticCode.Expected_0_type_arguments_but_got_1, reportNode.range, \"1\", typeArguments.length.toString(10));\r\n                    return module.createUnreachable();\r\n                }\r\n                arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n            }\r\n            else\r\n                arg0 = compiler.compileExpression(operands[0], types_1.Type.f64, 0 /* NONE */);\r\n            switch (compiler.currentType.kind) {\r\n                case 9 /* USIZE */:\r\n                    if (compiler.currentType.isReference) {\r\n                        compiler.error(diagnostics_1.DiagnosticCode.Operation_not_supported, reportNode.range);\r\n                        ret = module.createUnreachable();\r\n                        break;\r\n                    }\r\n                // fall-through\r\n                default:// any integer\r\n                    ret = arg0;\r\n                    break;\r\n                case 11 /* F32 */:\r\n                    ret = module.createUnary(module_1.UnaryOp.FloorF32, arg0);\r\n                    break;\r\n                case 12 /* F64 */:\r\n                    ret = module.createUnary(module_1.UnaryOp.FloorF64, arg0);\r\n                    break;\r\n                case 13 /* VOID */:\r\n                    compiler.error(diagnostics_1.DiagnosticCode.Operation_not_supported, reportNode.range);\r\n                    ret = module.createUnreachable();\r\n                    break;\r\n            }\r\n            return ret;\r\n        case \"copysign\":// copysign<T?>(left: T, right: T) -> T\r\n            if (operands.length != 2) {\r\n                if (typeArguments) {\r\n                    if (typeArguments.length)\r\n                        compiler.currentType = typeArguments[0];\r\n                    if (typeArguments.length != 1)\r\n                        compiler.error(diagnostics_1.DiagnosticCode.Expected_0_type_arguments_but_got_1, reportNode.range, \"1\", typeArguments.length.toString(10));\r\n                }\r\n                compiler.error(diagnostics_1.DiagnosticCode.Expected_0_arguments_but_got_1, reportNode.range, \"2\", operands.length.toString(10));\r\n                return module.createUnreachable();\r\n            }\r\n            if (typeArguments) {\r\n                if (typeArguments.length != 1) {\r\n                    if (typeArguments.length)\r\n                        compiler.currentType = typeArguments[0];\r\n                    compiler.error(diagnostics_1.DiagnosticCode.Expected_0_type_arguments_but_got_1, reportNode.range, \"1\", typeArguments.length.toString(10));\r\n                    return module.createUnreachable();\r\n                }\r\n                arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n            }\r\n            else\r\n                arg0 = compiler.compileExpression(operands[0], types_1.Type.f64, 0 /* NONE */);\r\n            arg1 = compiler.compileExpression(operands[1], compiler.currentType);\r\n            switch (compiler.currentType.kind) {\r\n                // TODO: does an integer version make sense?\r\n                case 11 /* F32 */:\r\n                    ret = module.createBinary(module_1.BinaryOp.CopysignF32, arg0, arg1);\r\n                    break;\r\n                case 12 /* F64 */:\r\n                    ret = module.createBinary(module_1.BinaryOp.CopysignF64, arg0, arg1);\r\n                    break;\r\n                default:\r\n                    compiler.error(diagnostics_1.DiagnosticCode.Operation_not_supported, reportNode.range);\r\n                    ret = module.createUnreachable();\r\n                    break;\r\n            }\r\n            return ret;\r\n        case \"nearest\":// nearest<T?>(value: T) -> T\r\n            if (operands.length != 1) {\r\n                if (typeArguments) {\r\n                    if (typeArguments.length)\r\n                        compiler.currentType = typeArguments[0];\r\n                    if (typeArguments.length != 1)\r\n                        compiler.error(diagnostics_1.DiagnosticCode.Expected_0_type_arguments_but_got_1, reportNode.range, \"1\", typeArguments.length.toString(10));\r\n                }\r\n                compiler.error(diagnostics_1.DiagnosticCode.Expected_0_arguments_but_got_1, reportNode.range, \"1\", operands.length.toString(10));\r\n                return module.createUnreachable();\r\n            }\r\n            if (typeArguments) {\r\n                if (typeArguments.length != 1) {\r\n                    if (typeArguments.length)\r\n                        compiler.currentType = typeArguments[0];\r\n                    compiler.error(diagnostics_1.DiagnosticCode.Expected_0_type_arguments_but_got_1, reportNode.range, \"1\", typeArguments.length.toString(10));\r\n                    return module.createUnreachable();\r\n                }\r\n                arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n            }\r\n            else\r\n                arg0 = compiler.compileExpression(operands[0], types_1.Type.f64, 0 /* NONE */);\r\n            switch (compiler.currentType.kind) {\r\n                case 9 /* USIZE */:\r\n                    if (compiler.currentType.isReference) {\r\n                        compiler.error(diagnostics_1.DiagnosticCode.Operation_not_supported, reportNode.range);\r\n                        ret = module.createUnreachable();\r\n                        break;\r\n                    }\r\n                // fall-through\r\n                default:// any integer\r\n                    ret = arg0;\r\n                    break;\r\n                case 11 /* F32 */:\r\n                    ret = module.createUnary(module_1.UnaryOp.NearestF32, arg0);\r\n                    break;\r\n                case 12 /* F64 */:\r\n                    ret = module.createUnary(module_1.UnaryOp.NearestF64, arg0);\r\n                    break;\r\n                case 13 /* VOID */:\r\n                    compiler.error(diagnostics_1.DiagnosticCode.Operation_not_supported, reportNode.range);\r\n                    ret = module.createUnreachable();\r\n                    break;\r\n            }\r\n            return ret;\r\n        case \"reinterpret\":// reinterpret<T!>(value: *) -> T\r\n            if (operands.length != 1) {\r\n                if (!(typeArguments && typeArguments.length == 1)) {\r\n                    if (typeArguments && typeArguments.length)\r\n                        compiler.currentType = typeArguments[0];\r\n                    compiler.error(diagnostics_1.DiagnosticCode.Expected_0_type_arguments_but_got_1, reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\");\r\n                }\r\n                compiler.error(diagnostics_1.DiagnosticCode.Expected_0_arguments_but_got_1, reportNode.range, \"1\", operands.length.toString(10));\r\n                return module.createUnreachable();\r\n            }\r\n            if (!(typeArguments && typeArguments.length == 1)) {\r\n                if (typeArguments && typeArguments.length)\r\n                    compiler.currentType = typeArguments[0];\r\n                compiler.error(diagnostics_1.DiagnosticCode.Expected_0_type_arguments_but_got_1, reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\");\r\n                return module.createUnreachable();\r\n            }\r\n            switch (typeArguments[0].kind) {\r\n                case 2 /* I32 */:\r\n                case 7 /* U32 */:\r\n                    arg0 = compiler.compileExpression(operands[0], types_1.Type.f32);\r\n                    ret = module.createUnary(module_1.UnaryOp.ReinterpretF32, arg0);\r\n                    break;\r\n                case 3 /* I64 */:\r\n                case 8 /* U64 */:\r\n                    arg0 = compiler.compileExpression(operands[0], types_1.Type.f64);\r\n                    ret = module.createUnary(module_1.UnaryOp.ReinterpretF64, arg0);\r\n                    break;\r\n                case 9 /* USIZE */:\r\n                    if (typeArguments[0].isReference) {\r\n                        compiler.error(diagnostics_1.DiagnosticCode.Operation_not_supported, reportNode.range);\r\n                        compiler.currentType = typeArguments[0];\r\n                        return module.createUnreachable();\r\n                    }\r\n                // fall-through\r\n                case 4 /* ISIZE */:\r\n                    arg0 = compiler.compileExpression(operands[0], compiler.options.target == compiler_1.Target.WASM64 ? types_1.Type.f64 : types_1.Type.f32);\r\n                    ret = module.createUnary(compiler.options.target == compiler_1.Target.WASM64 ? module_1.UnaryOp.ReinterpretF64 : module_1.UnaryOp.ReinterpretF32, arg0);\r\n                    break;\r\n                case 11 /* F32 */:\r\n                    arg0 = compiler.compileExpression(operands[0], types_1.Type.u32);\r\n                    ret = module.createUnary(module_1.UnaryOp.ReinterpretI32, arg0);\r\n                    break;\r\n                case 12 /* F64 */:\r\n                    arg0 = compiler.compileExpression(operands[0], types_1.Type.u64);\r\n                    ret = module.createUnary(module_1.UnaryOp.ReinterpretI64, arg0);\r\n                    break;\r\n                default:// small integers and void\r\n                    compiler.error(diagnostics_1.DiagnosticCode.Operation_not_supported, reportNode.range);\r\n                    ret = module.createUnreachable();\r\n                    break;\r\n            }\r\n            compiler.currentType = typeArguments[0];\r\n            return ret;\r\n        case \"sqrt\":// sqrt<T?>(value: T) -> T\r\n            if (operands.length != 1) {\r\n                if (typeArguments) {\r\n                    if (typeArguments.length)\r\n                        compiler.currentType = typeArguments[0];\r\n                    if (typeArguments.length != 1)\r\n                        compiler.error(diagnostics_1.DiagnosticCode.Expected_0_type_arguments_but_got_1, reportNode.range, \"1\", typeArguments.length.toString(10));\r\n                }\r\n                compiler.error(diagnostics_1.DiagnosticCode.Expected_0_arguments_but_got_1, reportNode.range, \"1\", operands.length.toString(10));\r\n                return module.createUnreachable();\r\n            }\r\n            if (typeArguments) {\r\n                if (typeArguments.length != 1) {\r\n                    if (typeArguments.length)\r\n                        compiler.currentType = typeArguments[0];\r\n                    compiler.error(diagnostics_1.DiagnosticCode.Expected_0_type_arguments_but_got_1, reportNode.range, \"1\", typeArguments.length.toString(10));\r\n                    return module.createUnreachable();\r\n                }\r\n                arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n            }\r\n            else\r\n                arg0 = compiler.compileExpression(operands[0], types_1.Type.f64, 0 /* NONE */);\r\n            switch (compiler.currentType.kind) {\r\n                // TODO: integer versions (that return f64 or convert)?\r\n                case 11 /* F32 */:\r\n                    ret = module.createUnary(module_1.UnaryOp.SqrtF32, arg0);\r\n                    break;\r\n                case 12 /* F64 */:\r\n                    ret = module.createUnary(module_1.UnaryOp.SqrtF64, arg0);\r\n                    break;\r\n                default:\r\n                    // case TypeKind.VOID:\r\n                    compiler.error(diagnostics_1.DiagnosticCode.Operation_not_supported, reportNode.range);\r\n                    ret = module.createUnreachable();\r\n                    break;\r\n            }\r\n            return ret;\r\n        case \"trunc\":// trunc<T?>(value: T) -> T\r\n            if (operands.length != 1) {\r\n                if (typeArguments) {\r\n                    if (typeArguments.length)\r\n                        compiler.currentType = typeArguments[0];\r\n                    if (typeArguments.length != 1)\r\n                        compiler.error(diagnostics_1.DiagnosticCode.Expected_0_type_arguments_but_got_1, reportNode.range, \"1\", typeArguments.length.toString(10));\r\n                }\r\n                compiler.error(diagnostics_1.DiagnosticCode.Expected_0_arguments_but_got_1, reportNode.range, \"1\", operands.length.toString(10));\r\n                return module.createUnreachable();\r\n            }\r\n            if (typeArguments && typeArguments.length) {\r\n                compiler.currentType = typeArguments[0];\r\n                if (typeArguments.length != 1) {\r\n                    if (typeArguments.length)\r\n                        compiler.currentType = typeArguments[0];\r\n                    compiler.error(diagnostics_1.DiagnosticCode.Expected_0_type_arguments_but_got_1, reportNode.range, \"1\", typeArguments.length.toString(10));\r\n                    return module.createUnreachable();\r\n                }\r\n                arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n            }\r\n            else\r\n                arg0 = compiler.compileExpression(operands[0], types_1.Type.f64, 0 /* NONE */);\r\n            switch (compiler.currentType.kind) {\r\n                case 9 /* USIZE */:\r\n                    if (compiler.currentType.isReference) {\r\n                        compiler.error(diagnostics_1.DiagnosticCode.Operation_not_supported, reportNode.range);\r\n                        ret = module.createUnreachable();\r\n                        break;\r\n                    }\r\n                // fall-through\r\n                default:// any integer\r\n                    ret = arg0;\r\n                    break;\r\n                // TODO: truncate to contextual type directly (if not void etc.)?\r\n                case 11 /* F32 */:\r\n                    ret = module.createUnary(module_1.UnaryOp.TruncF32, arg0);\r\n                    break;\r\n                case 12 /* F64 */:\r\n                    ret = module.createUnary(module_1.UnaryOp.TruncF64, arg0);\r\n                    break;\r\n                case 13 /* VOID */:\r\n                    compiler.error(diagnostics_1.DiagnosticCode.Operation_not_supported, reportNode.range);\r\n                    ret = module.createUnreachable();\r\n                    break;\r\n            }\r\n            return ret;\r\n        // memory access\r\n        case \"load\":// load<T!>(offset: usize, constantOffset?: usize) -> *\r\n            if (operands.length < 1 || operands.length > 2) {\r\n                if (!(typeArguments && typeArguments.length == 1))\r\n                    compiler.error(diagnostics_1.DiagnosticCode.Expected_0_type_arguments_but_got_1, reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\");\r\n                if (operands.length < 1)\r\n                    compiler.error(diagnostics_1.DiagnosticCode.Expected_at_least_0_arguments_but_got_1, reportNode.range, \"1\", operands.length.toString(10));\r\n                else\r\n                    compiler.error(diagnostics_1.DiagnosticCode.Expected_0_arguments_but_got_1, reportNode.range, \"2\", operands.length.toString(10));\r\n                return module.createUnreachable();\r\n            }\r\n            if (!(typeArguments && typeArguments.length == 1)) {\r\n                if (typeArguments && typeArguments.length)\r\n                    compiler.currentType = typeArguments[0];\r\n                compiler.error(diagnostics_1.DiagnosticCode.Expected_0_type_arguments_but_got_1, reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\");\r\n                return module.createUnreachable();\r\n            }\r\n            arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType);\r\n            offset = operands.length == 2 ? evaluateConstantOffset(compiler, operands[1]) : 0; // reports\r\n            if (offset < 0)\r\n                return module.createUnreachable();\r\n            return module.createLoad(typeArguments[0].byteSize, typeArguments[0].is(1 /* SIGNED */ | 4 /* INTEGER */), arg0, typeArguments[0].is(4 /* INTEGER */) && contextualType.is(4 /* INTEGER */) && contextualType.size >= typeArguments[0].size\r\n                ? (compiler.currentType = contextualType).toNativeType()\r\n                : (compiler.currentType = typeArguments[0]).toNativeType(), offset);\r\n        case \"store\":// store<T!>(offset: usize, value: *, constantOffset?: usize) -> void\r\n            compiler.currentType = types_1.Type.void;\r\n            if (operands.length < 2 || operands.length > 3) {\r\n                if (!(typeArguments && typeArguments.length == 1))\r\n                    compiler.error(diagnostics_1.DiagnosticCode.Expected_0_type_arguments_but_got_1, reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\");\r\n                if (operands.length < 2)\r\n                    compiler.error(diagnostics_1.DiagnosticCode.Expected_at_least_0_arguments_but_got_1, reportNode.range, \"2\", operands.length.toString(10));\r\n                else\r\n                    compiler.error(diagnostics_1.DiagnosticCode.Expected_0_arguments_but_got_1, reportNode.range, \"3\", operands.length.toString(10));\r\n                return module.createUnreachable();\r\n            }\r\n            if (!(typeArguments && typeArguments.length == 1)) {\r\n                compiler.error(diagnostics_1.DiagnosticCode.Expected_0_type_arguments_but_got_1, reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\");\r\n                return module.createUnreachable();\r\n            }\r\n            arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType);\r\n            arg1 = compiler.compileExpression(operands[1], typeArguments[0], typeArguments[0].is(4 /* INTEGER */)\r\n                ? 0 /* NONE */\r\n                : 1 /* IMPLICIT */);\r\n            if (compiler.currentType.is(4 /* INTEGER */) && typeArguments[0].is(4 /* INTEGER */) && typeArguments[0].size > compiler.currentType.size) {\r\n                arg1 = compiler.convertExpression(arg1, compiler.currentType, typeArguments[0], 1 /* IMPLICIT */, operands[1]);\r\n                type = typeArguments[0];\r\n            }\r\n            else\r\n                type = compiler.currentType;\r\n            offset = operands.length == 3 ? evaluateConstantOffset(compiler, operands[2]) : 0; // reports\r\n            if (offset < 0)\r\n                return module.createUnreachable();\r\n            compiler.currentType = types_1.Type.void;\r\n            return module.createStore(typeArguments[0].byteSize, arg0, arg1, type.toNativeType(), offset);\r\n        case \"sizeof\":// sizeof<T!>() -> usize\r\n            compiler.currentType = compiler.options.usizeType;\r\n            if (operands.length != 0) {\r\n                if (!(typeArguments && typeArguments.length == 1))\r\n                    compiler.error(diagnostics_1.DiagnosticCode.Expected_0_type_arguments_but_got_1, reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\");\r\n                compiler.error(diagnostics_1.DiagnosticCode.Expected_0_arguments_but_got_1, reportNode.range, \"0\", operands.length.toString(10));\r\n                return module.createUnreachable();\r\n            }\r\n            if (typeArguments) {\r\n                if (typeArguments.length != 1) {\r\n                    compiler.error(diagnostics_1.DiagnosticCode.Expected_0_type_arguments_but_got_1, reportNode.range, \"1\", typeArguments.length.toString(10));\r\n                    return module.createUnreachable();\r\n                }\r\n                ret = compiler.options.isWasm64 ? module.createI64(typeArguments[0].byteSize, 0) : module.createI32(typeArguments[0].byteSize);\r\n            }\r\n            else {\r\n                compiler.error(diagnostics_1.DiagnosticCode.Expected_0_type_arguments_but_got_1, reportNode.range, \"1\", \"0\");\r\n                return module.createUnreachable();\r\n            }\r\n            return ret;\r\n        // control flow\r\n        case \"select\":// select<T?>(ifTrue: T, ifFalse: T, condition: bool) -> T\r\n            if (operands.length != 3) {\r\n                if (typeArguments) {\r\n                    if (typeArguments.length)\r\n                        compiler.currentType = typeArguments[0];\r\n                    if (typeArguments.length != 1)\r\n                        compiler.error(diagnostics_1.DiagnosticCode.Expected_0_type_arguments_but_got_1, reportNode.range, \"1\", typeArguments.length.toString(10));\r\n                }\r\n                compiler.error(diagnostics_1.DiagnosticCode.Expected_0_arguments_but_got_1, reportNode.range, \"3\", operands.length.toString(10));\r\n                return module.createUnreachable();\r\n            }\r\n            if (typeArguments) {\r\n                if (typeArguments.length != 1) {\r\n                    if (typeArguments.length)\r\n                        compiler.currentType = typeArguments[0];\r\n                    compiler.error(diagnostics_1.DiagnosticCode.Expected_0_type_arguments_but_got_1, reportNode.range, \"1\", typeArguments.length.toString(10));\r\n                    return module.createUnreachable();\r\n                }\r\n                arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n            }\r\n            else\r\n                arg0 = compiler.compileExpression(operands[0], types_1.Type.i32, 0 /* NONE */);\r\n            arg1 = compiler.compileExpression(operands[1], type = compiler.currentType);\r\n            arg2 = compiler.compileExpression(operands[2], types_1.Type.bool);\r\n            compiler.currentType = type;\r\n            switch (compiler.currentType.kind) {\r\n                default:// any value type\r\n                    ret = module.createSelect(arg0, arg1, arg2);\r\n                    break;\r\n                case 13 /* VOID */:\r\n                    compiler.error(diagnostics_1.DiagnosticCode.Operation_not_supported, reportNode.range);\r\n                    ret = module.createUnreachable();\r\n                    break;\r\n            }\r\n            return ret;\r\n        case \"unreachable\":// unreachable() -> *\r\n            if (operands.length != 0)\r\n                compiler.error(diagnostics_1.DiagnosticCode.Expected_0_arguments_but_got_1, reportNode.range, \"0\", operands.length.toString(10));\r\n            if (typeArguments)\r\n                compiler.error(diagnostics_1.DiagnosticCode.Type_0_is_not_generic, reportNode.range, prototype.internalName);\r\n            return module.createUnreachable();\r\n        // host operations\r\n        case \"current_memory\":// current_memory() -> i32\r\n            compiler.currentType = types_1.Type.i32;\r\n            if (operands.length != 0)\r\n                compiler.error(diagnostics_1.DiagnosticCode.Expected_0_arguments_but_got_1, reportNode.range, \"0\", operands.length.toString(10));\r\n            if (typeArguments)\r\n                compiler.error(diagnostics_1.DiagnosticCode.Type_0_is_not_generic, reportNode.range, prototype.internalName);\r\n            return module.createHost(module_1.HostOp.CurrentMemory);\r\n        case \"grow_memory\":// grow_memory(pages: i32) -> i32\r\n            compiler.currentType = types_1.Type.i32;\r\n            if (operands.length != 1) {\r\n                compiler.error(diagnostics_1.DiagnosticCode.Expected_0_arguments_but_got_1, reportNode.range, \"0\", operands.length.toString(10));\r\n                arg0 = module.createUnreachable();\r\n            }\r\n            else\r\n                arg0 = compiler.compileExpression(operands[0], types_1.Type.i32);\r\n            if (typeArguments)\r\n                compiler.error(diagnostics_1.DiagnosticCode.Type_0_is_not_generic, reportNode.range, prototype.internalName);\r\n            return module.createHost(module_1.HostOp.GrowMemory, null, [arg0]);\r\n        // see: https://github.com/WebAssembly/bulk-memory-operations/blob/master/proposals/bulk-memory-operations/Overview.md\r\n        case \"move_memory\":// move_memory(dest: usize, src: usize: n: usize) -> void\r\n            if (typeArguments)\r\n                compiler.error(diagnostics_1.DiagnosticCode.Type_0_is_not_generic, reportNode.range, prototype.internalName);\r\n            if (operands.length != 3) {\r\n                compiler.error(diagnostics_1.DiagnosticCode.Expected_0_arguments_but_got_1, reportNode.range, \"3\", operands.length.toString(10));\r\n                compiler.currentType = types_1.Type.void;\r\n                return module.createUnreachable();\r\n            }\r\n            arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType);\r\n            arg1 = compiler.compileExpression(operands[1], compiler.options.usizeType);\r\n            arg2 = compiler.compileExpression(operands[2], compiler.options.usizeType);\r\n            compiler.currentType = types_1.Type.void;\r\n            throw new Error(\"not implemented\");\r\n        // return module.createHost(HostOp.MoveMemory, null, [ arg0, arg1, arg2 ]);\r\n        case \"set_memory\":// set_memory(dest: usize, value: u32, n: usize) -> void\r\n            if (typeArguments)\r\n                compiler.error(diagnostics_1.DiagnosticCode.Type_0_is_not_generic, reportNode.range, prototype.internalName);\r\n            if (operands.length != 3) {\r\n                compiler.error(diagnostics_1.DiagnosticCode.Expected_0_arguments_but_got_1, reportNode.range, \"3\", operands.length.toString(10));\r\n                compiler.currentType = types_1.Type.void;\r\n                return module.createUnreachable();\r\n            }\r\n            arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType);\r\n            arg1 = compiler.compileExpression(operands[1], types_1.Type.u32);\r\n            arg2 = compiler.compileExpression(operands[2], compiler.options.usizeType);\r\n            compiler.currentType = types_1.Type.void;\r\n            throw new Error(\"not implemented\");\r\n        // return module.createHost(HostOp.SetMemory, null, [ arg0, arg1, arg2 ]);\r\n        // other\r\n        case \"changetype\":// changetype<T!>(value: *) -> T\r\n            if (!(typeArguments && typeArguments.length == 1)) {\r\n                if (typeArguments && typeArguments.length)\r\n                    compiler.currentType = typeArguments[0];\r\n                compiler.error(diagnostics_1.DiagnosticCode.Expected_0_type_arguments_but_got_1, reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\");\r\n                return module.createUnreachable();\r\n            }\r\n            else if (typeArguments[0].kind != 9 /* USIZE */) {\r\n                compiler.error(diagnostics_1.DiagnosticCode.Operation_not_supported, reportNode.range);\r\n                compiler.currentType = typeArguments[0];\r\n                return module.createUnreachable();\r\n            }\r\n            if (operands.length != 1) {\r\n                compiler.error(diagnostics_1.DiagnosticCode.Expected_0_arguments_but_got_1, reportNode.range, \"1\", operands.length.toString(10));\r\n                compiler.currentType = typeArguments[0];\r\n                return module.createUnreachable();\r\n            }\r\n            arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, 0 /* NONE */);\r\n            compiler.currentType = typeArguments[0];\r\n            if (compiler.currentType.kind != 9 /* USIZE */) {\r\n                compiler.error(diagnostics_1.DiagnosticCode.Operation_not_supported, reportNode.range);\r\n                return module.createUnreachable();\r\n            }\r\n            // if (reportNode.range.source.sourceKind != SourceKind.STDLIB)\r\n            //  compiler.warning(DiagnosticCode.Operation_is_unsafe, reportNode.range);\r\n            return arg0; // any usize to any usize\r\n        case \"assert\":// assert<T?>(isTrueish: T, message?: string) -> T with T != null (see also assembly.d.ts)\r\n            if (operands.length < 1 || operands.length > 2) {\r\n                if (typeArguments) {\r\n                    if (typeArguments.length)\r\n                        compiler.currentType = typeArguments[0].nonNullableType;\r\n                    if (typeArguments.length != 1)\r\n                        compiler.error(diagnostics_1.DiagnosticCode.Expected_0_type_arguments_but_got_1, reportNode.range, \"1\", typeArguments.length.toString(10));\r\n                }\r\n                if (operands.length < 1)\r\n                    compiler.error(diagnostics_1.DiagnosticCode.Expected_at_least_0_arguments_but_got_1, reportNode.range, \"1\", operands.length.toString(10));\r\n                else if (operands.length > 2)\r\n                    compiler.error(diagnostics_1.DiagnosticCode.Expected_0_arguments_but_got_1, reportNode.range, \"2\", operands.length.toString(10));\r\n                return module.createUnreachable();\r\n            }\r\n            if (typeArguments) {\r\n                if (typeArguments.length)\r\n                    compiler.currentType = typeArguments[0].nonNullableType;\r\n                if (typeArguments.length != 1) {\r\n                    compiler.error(diagnostics_1.DiagnosticCode.Expected_0_type_arguments_but_got_1, reportNode.range, \"1\", typeArguments.length.toString(10));\r\n                    return module.createUnreachable();\r\n                }\r\n                arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n            }\r\n            else\r\n                arg0 = compiler.compileExpression(operands[0], types_1.Type.i32, 0 /* NONE */);\r\n            type = compiler.currentType;\r\n            compiler.currentType = type.nonNullableType;\r\n            // just return ifTrueish if assertions are disabled, or simplify if dropped anyway\r\n            if (compiler.options.noAssert) {\r\n                if (contextualType == types_1.Type.void) {\r\n                    compiler.currentType = types_1.Type.void;\r\n                    return module.createNop();\r\n                }\r\n                return arg0;\r\n            }\r\n            var abort = compileAbort(compiler, operands.length == 2 ? operands[1] : null, reportNode);\r\n            compiler.currentType = type.nonNullableType;\r\n            if (contextualType == types_1.Type.void) {\r\n                switch (compiler.currentType.kind) {\r\n                    default:// any integer up to 32-bits incl. bool\r\n                        ret = module.createIf(module.createUnary(module_1.UnaryOp.EqzI32, arg0), abort);\r\n                        break;\r\n                    case 3 /* I64 */:\r\n                    case 8 /* U64 */:\r\n                        ret = module.createIf(module.createUnary(module_1.UnaryOp.EqzI64, arg0), abort);\r\n                        break;\r\n                    case 4 /* ISIZE */:\r\n                    case 9 /* USIZE */:\r\n                        ret = module.createIf(module.createUnary(compiler.options.target == compiler_1.Target.WASM64 ? module_1.UnaryOp.EqzI64 : module_1.UnaryOp.EqzI32, arg0), abort);\r\n                        break;\r\n                    // TODO: also check for NaN in float assertions, as in `Boolean(NaN) -> false`?\r\n                    case 11 /* F32 */:\r\n                        ret = module.createIf(module.createBinary(module_1.BinaryOp.EqF32, arg0, module.createF32(0)), abort);\r\n                        break;\r\n                    case 12 /* F64 */:\r\n                        ret = module.createIf(module.createBinary(module_1.BinaryOp.EqF64, arg0, module.createF64(0)), abort);\r\n                        break;\r\n                    case 13 /* VOID */:\r\n                        compiler.error(diagnostics_1.DiagnosticCode.Operation_not_supported, reportNode.range);\r\n                        ret = abort;\r\n                        break;\r\n                }\r\n                compiler.currentType = types_1.Type.void;\r\n            }\r\n            else {\r\n                switch (compiler.currentType.kind) {\r\n                    default:// any integer up to 32-bits incl. bool\r\n                        tempLocal0 = compiler.currentFunction.getAndFreeTempLocal(types_1.Type.i32);\r\n                        ret = module.createIf(module.createUnary(module_1.UnaryOp.EqzI32, module.createTeeLocal(tempLocal0.index, arg0)), abort, module.createGetLocal(tempLocal0.index, module_1.NativeType.I32));\r\n                        break;\r\n                    case 3 /* I64 */:\r\n                    case 8 /* U64 */:\r\n                        tempLocal0 = compiler.currentFunction.getAndFreeTempLocal(types_1.Type.i64);\r\n                        ret = module.createIf(module.createUnary(module_1.UnaryOp.EqzI64, module.createTeeLocal(tempLocal0.index, arg0)), abort, module.createGetLocal(tempLocal0.index, module_1.NativeType.I64));\r\n                        break;\r\n                    case 4 /* ISIZE */:\r\n                    case 9 /* USIZE */:\r\n                        tempLocal0 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType);\r\n                        ret = module.createIf(module.createUnary(compiler.options.target == compiler_1.Target.WASM64 ? module_1.UnaryOp.EqzI64 : module_1.UnaryOp.EqzI32, module.createTeeLocal(tempLocal0.index, arg0)), abort, module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType));\r\n                        break;\r\n                    case 11 /* F32 */:\r\n                        tempLocal0 = compiler.currentFunction.getAndFreeTempLocal(types_1.Type.f32);\r\n                        ret = module.createIf(module.createBinary(module_1.BinaryOp.EqF32, module.createTeeLocal(tempLocal0.index, arg0), module.createF32(0)), abort, module.createGetLocal(tempLocal0.index, module_1.NativeType.F32));\r\n                        break;\r\n                    case 12 /* F64 */:\r\n                        tempLocal0 = compiler.currentFunction.getAndFreeTempLocal(types_1.Type.f64);\r\n                        ret = module.createIf(module.createBinary(module_1.BinaryOp.EqF64, module.createTeeLocal(tempLocal0.index, arg0), module.createF64(0)), abort, module.createGetLocal(tempLocal0.index, module_1.NativeType.F64));\r\n                        break;\r\n                    case 13 /* VOID */:\r\n                        compiler.error(diagnostics_1.DiagnosticCode.Operation_not_supported, reportNode.range);\r\n                        ret = abort;\r\n                        break;\r\n                }\r\n            }\r\n            return ret;\r\n        // conversions\r\n        case \"i8\":\r\n            if (typeArguments)\r\n                compiler.error(diagnostics_1.DiagnosticCode.Type_0_is_not_generic, reportNode.range, prototype.internalName);\r\n            if (operands.length != 1) {\r\n                compiler.error(diagnostics_1.DiagnosticCode.Expected_0_arguments_but_got_1, reportNode.range, \"1\", operands.length.toString(10));\r\n                compiler.currentType = types_1.Type.i8;\r\n                return module.createUnreachable();\r\n            }\r\n            return compiler.compileExpression(operands[0], types_1.Type.i8, 2 /* EXPLICIT */);\r\n        case \"i16\":\r\n            if (typeArguments)\r\n                compiler.error(diagnostics_1.DiagnosticCode.Type_0_is_not_generic, reportNode.range, prototype.internalName);\r\n            if (operands.length != 1) {\r\n                compiler.error(diagnostics_1.DiagnosticCode.Expected_0_arguments_but_got_1, reportNode.range, \"1\", operands.length.toString(10));\r\n                compiler.currentType = types_1.Type.i16;\r\n                return module.createUnreachable();\r\n            }\r\n            return compiler.compileExpression(operands[0], types_1.Type.i16, 2 /* EXPLICIT */);\r\n        case \"i32\":\r\n            if (typeArguments)\r\n                compiler.error(diagnostics_1.DiagnosticCode.Type_0_is_not_generic, reportNode.range, prototype.internalName);\r\n            if (operands.length != 1) {\r\n                compiler.error(diagnostics_1.DiagnosticCode.Expected_0_arguments_but_got_1, reportNode.range, \"1\", operands.length.toString(10));\r\n                compiler.currentType = types_1.Type.i32;\r\n                return module.createUnreachable();\r\n            }\r\n            return compiler.compileExpression(operands[0], types_1.Type.i32, 2 /* EXPLICIT */);\r\n        case \"i64\":\r\n            if (typeArguments)\r\n                compiler.error(diagnostics_1.DiagnosticCode.Type_0_is_not_generic, reportNode.range, prototype.internalName);\r\n            if (operands.length != 1) {\r\n                compiler.error(diagnostics_1.DiagnosticCode.Expected_0_arguments_but_got_1, reportNode.range, \"1\", operands.length.toString(10));\r\n                compiler.currentType = types_1.Type.i64;\r\n                return module.createUnreachable();\r\n            }\r\n            return compiler.compileExpression(operands[0], types_1.Type.i64, 2 /* EXPLICIT */);\r\n        case \"isize\":\r\n            if (typeArguments)\r\n                compiler.error(diagnostics_1.DiagnosticCode.Type_0_is_not_generic, reportNode.range, prototype.internalName);\r\n            if (operands.length != 1) {\r\n                compiler.error(diagnostics_1.DiagnosticCode.Expected_0_arguments_but_got_1, reportNode.range, \"1\", operands.length.toString(10));\r\n                compiler.currentType = compiler.options.target == compiler_1.Target.WASM64 ? types_1.Type.isize64 : types_1.Type.isize32;\r\n                return module.createUnreachable();\r\n            }\r\n            return compiler.compileExpression(operands[0], compiler.options.target == compiler_1.Target.WASM64 ? types_1.Type.isize64 : types_1.Type.isize32, 2 /* EXPLICIT */);\r\n        case \"u8\":\r\n            if (typeArguments)\r\n                compiler.error(diagnostics_1.DiagnosticCode.Type_0_is_not_generic, reportNode.range, prototype.internalName);\r\n            if (operands.length != 1) {\r\n                compiler.error(diagnostics_1.DiagnosticCode.Expected_0_arguments_but_got_1, reportNode.range, \"1\", operands.length.toString(10));\r\n                compiler.currentType = types_1.Type.u8;\r\n                return module.createUnreachable();\r\n            }\r\n            return compiler.compileExpression(operands[0], types_1.Type.u8, 2 /* EXPLICIT */);\r\n        case \"u16\":\r\n            if (typeArguments)\r\n                compiler.error(diagnostics_1.DiagnosticCode.Type_0_is_not_generic, reportNode.range, prototype.internalName);\r\n            if (operands.length != 1) {\r\n                compiler.error(diagnostics_1.DiagnosticCode.Expected_0_arguments_but_got_1, reportNode.range, \"1\", operands.length.toString(10));\r\n                compiler.currentType = types_1.Type.u16;\r\n                return module.createUnreachable();\r\n            }\r\n            return compiler.compileExpression(operands[0], types_1.Type.u16, 2 /* EXPLICIT */);\r\n        case \"u32\":\r\n            if (typeArguments)\r\n                compiler.error(diagnostics_1.DiagnosticCode.Type_0_is_not_generic, reportNode.range, prototype.internalName);\r\n            if (operands.length != 1) {\r\n                compiler.error(diagnostics_1.DiagnosticCode.Expected_0_arguments_but_got_1, reportNode.range, \"1\", operands.length.toString(10));\r\n                compiler.currentType = types_1.Type.u32;\r\n                return module.createUnreachable();\r\n            }\r\n            return compiler.compileExpression(operands[0], types_1.Type.u32, 2 /* EXPLICIT */);\r\n        case \"u64\":\r\n            if (typeArguments)\r\n                compiler.error(diagnostics_1.DiagnosticCode.Type_0_is_not_generic, reportNode.range, prototype.internalName);\r\n            if (operands.length != 1) {\r\n                compiler.error(diagnostics_1.DiagnosticCode.Expected_0_arguments_but_got_1, reportNode.range, \"1\", operands.length.toString(10));\r\n                compiler.currentType = types_1.Type.u64;\r\n                return module.createUnreachable();\r\n            }\r\n            return compiler.compileExpression(operands[0], types_1.Type.u64, 2 /* EXPLICIT */);\r\n        case \"usize\":\r\n            if (typeArguments)\r\n                compiler.error(diagnostics_1.DiagnosticCode.Type_0_is_not_generic, reportNode.range, prototype.internalName);\r\n            if (operands.length != 1) {\r\n                compiler.error(diagnostics_1.DiagnosticCode.Expected_0_arguments_but_got_1, reportNode.range, \"1\", operands.length.toString(10));\r\n                compiler.currentType = compiler.options.usizeType;\r\n                return module.createUnreachable();\r\n            }\r\n            return compiler.compileExpression(operands[0], compiler.options.usizeType, 2 /* EXPLICIT */);\r\n        case \"bool\":\r\n            if (typeArguments)\r\n                compiler.error(diagnostics_1.DiagnosticCode.Type_0_is_not_generic, reportNode.range, prototype.internalName);\r\n            if (operands.length != 1) {\r\n                compiler.error(diagnostics_1.DiagnosticCode.Expected_0_arguments_but_got_1, reportNode.range, \"1\", operands.length.toString(10));\r\n                compiler.currentType = types_1.Type.bool;\r\n                return module.createUnreachable();\r\n            }\r\n            return compiler.compileExpression(operands[0], types_1.Type.bool, 2 /* EXPLICIT */);\r\n        case \"f32\":\r\n            if (typeArguments)\r\n                compiler.error(diagnostics_1.DiagnosticCode.Type_0_is_not_generic, reportNode.range, prototype.internalName);\r\n            if (operands.length != 1) {\r\n                compiler.error(diagnostics_1.DiagnosticCode.Expected_0_arguments_but_got_1, reportNode.range, \"1\", operands.length.toString(10));\r\n                compiler.currentType = types_1.Type.f32;\r\n                return module.createUnreachable();\r\n            }\r\n            return compiler.compileExpression(operands[0], types_1.Type.f32, 2 /* EXPLICIT */);\r\n        case \"f64\":\r\n            if (typeArguments)\r\n                compiler.error(diagnostics_1.DiagnosticCode.Type_0_is_not_generic, reportNode.range, prototype.internalName);\r\n            if (operands.length != 1) {\r\n                compiler.error(diagnostics_1.DiagnosticCode.Expected_0_arguments_but_got_1, reportNode.range, \"1\", operands.length.toString(10));\r\n                compiler.currentType = types_1.Type.f64;\r\n                return module.createUnreachable();\r\n            }\r\n            return compiler.compileExpression(operands[0], types_1.Type.f64, 2 /* EXPLICIT */);\r\n    }\r\n    compiler.error(diagnostics_1.DiagnosticCode.Operation_not_supported, reportNode.range);\r\n    return module.createUnreachable();\r\n}\r\nexports.compileCall = compileCall;\r\nfunction evaluateConstantOffset(compiler, expression) {\r\n    var expr;\r\n    var value;\r\n    if (compiler.options.target == compiler_1.Target.WASM64) {\r\n        expr = compiler.precomputeExpression(expression, types_1.Type.i64);\r\n        if (_BinaryenExpressionGetId(expr) != module_1.ExpressionId.Const ||\r\n            _BinaryenExpressionGetType(expr) != module_1.NativeType.I64 ||\r\n            _BinaryenConstGetValueI64High(expr) != 0 ||\r\n            (value = _BinaryenConstGetValueI64Low(expr)) < 0) {\r\n            compiler.error(diagnostics_1.DiagnosticCode.Operation_not_supported, expression.range);\r\n            value = -1;\r\n        }\r\n    }\r\n    else {\r\n        expr = compiler.precomputeExpression(expression, types_1.Type.i32);\r\n        if (_BinaryenExpressionGetId(expr) != module_1.ExpressionId.Const ||\r\n            _BinaryenExpressionGetType(expr) != module_1.NativeType.I32 ||\r\n            (value = _BinaryenConstGetValueI32(expr)) < 0) {\r\n            compiler.error(diagnostics_1.DiagnosticCode.Operation_not_supported, expression.range);\r\n            value = -1;\r\n        }\r\n    }\r\n    return value;\r\n}\r\n/** Compiles a memory allocation for an instance of the specified class. */\r\nfunction compileAllocate(compiler, cls, reportNode) {\r\n    var program = cls.program;\r\n    var prototype = program.elements.get(compiler.options.allocateImpl);\r\n    if (prototype) {\r\n        if (prototype.kind == program_1.ElementKind.FUNCTION_PROTOTYPE) {\r\n            var instance = prototype.resolve(); // reports\r\n            if (instance) {\r\n                if (!instance.is(program_1.ElementFlags.GENERIC) && instance.returnType == compiler.options.usizeType && instance.parameters.length == 1 && instance.parameters[0].type == compiler.options.usizeType) {\r\n                    if (compiler.compileFunction(instance))\r\n                        return compiler.makeCall(instance, [\r\n                            compiler.options.isWasm64\r\n                                ? compiler.module.createI64(cls.currentMemoryOffset)\r\n                                : compiler.module.createI32(cls.currentMemoryOffset)\r\n                        ]);\r\n                }\r\n                else\r\n                    program.error(diagnostics_1.DiagnosticCode.Implementation_0_must_match_the_signature_1, reportNode.range, compiler.options.allocateImpl, \"(size: usize): usize\");\r\n            }\r\n        }\r\n        else\r\n            program.error(diagnostics_1.DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures, reportNode.range, prototype.internalName);\r\n    }\r\n    else\r\n        program.error(diagnostics_1.DiagnosticCode.Cannot_find_name_0, reportNode.range, compiler.options.allocateImpl);\r\n    return compiler.module.createUnreachable();\r\n}\r\nexports.compileAllocate = compileAllocate;\r\n/** Compiles an abort wired to the conditionally imported 'abort' function. */\r\nfunction compileAbort(compiler, message, reportNode) {\r\n    var module = compiler.module;\r\n    var abort = module.createUnreachable();\r\n    var abortPrototype = compiler.program.elements.get(\"abort\");\r\n    var stringType = compiler.program.types.get(\"string\");\r\n    if (abortPrototype && abortPrototype.kind == program_1.ElementKind.FUNCTION_PROTOTYPE && stringType) {\r\n        var abortInstance = abortPrototype.resolve();\r\n        if (abortInstance && compiler.compileFunction(abortInstance)) {\r\n            assert(abortInstance.parameters.length == 4); // to be sure\r\n            abort = module.createBlock(null, [\r\n                compiler.makeCall(abortInstance, [\r\n                    message != null\r\n                        ? compiler.compileExpression(message, stringType)\r\n                        : compiler.options.usizeType.toNativeZero(module),\r\n                    compiler.compileStaticString(reportNode.range.source.normalizedPath),\r\n                    module.createI32(reportNode.range.line),\r\n                    module.createI32(reportNode.range.column)\r\n                ]),\r\n                abort\r\n            ]);\r\n        }\r\n    }\r\n    return abort;\r\n}\r\nexports.compileAbort = compileAbort;\r\n\n\n/***/ }),\n/* 16 */\n/***/ (function(module, exports) {\n\nmodule.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n\n\n/***/ }),\n/* 17 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\n//////////////////////// Low-level C-Like Compiler API /////////////////////////\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar compiler_1 = __webpack_require__(3);\r\nvar decompiler_1 = __webpack_require__(18);\r\nvar diagnostics_1 = __webpack_require__(1);\r\nexports.formatDiagnostic = diagnostics_1.formatDiagnosticMessage;\r\nvar parser_1 = __webpack_require__(19);\r\n/** Parses a source file. If `parser` has been omitted a new one is created. */\r\nfunction parseFile(text, path, isEntry, parser) {\r\n    if (isEntry === void 0) { isEntry = false; }\r\n    if (parser === void 0) { parser = null; }\r\n    if (!parser) {\r\n        parser = new parser_1.Parser();\r\n        isEntry = true;\r\n    }\r\n    parser.parseFile(text, path, isEntry);\r\n    return parser;\r\n}\r\nexports.parseFile = parseFile;\r\n/** Obtains the next required file's path. Returns `null` once complete. */\r\nfunction nextFile(parser) {\r\n    return parser.nextFile();\r\n}\r\nexports.nextFile = nextFile;\r\n/** Obtains the next diagnostic message. Returns `null` once complete. */\r\nfunction nextDiagnostic(parser) {\r\n    var program = parser.program;\r\n    return program.diagnosticsOffset < program.diagnostics.length\r\n        ? program.diagnostics[program.diagnosticsOffset++]\r\n        : null;\r\n}\r\nexports.nextDiagnostic = nextDiagnostic;\r\n/** Tests whether a diagnostic is informatory. */\r\nfunction isInfo(message) {\r\n    return message.category == diagnostics_1.DiagnosticCategory.INFO;\r\n}\r\nexports.isInfo = isInfo;\r\n/** Tests whether a diagnostic is a warning. */\r\nfunction isWarning(message) {\r\n    return message.category == diagnostics_1.DiagnosticCategory.WARNING;\r\n}\r\nexports.isWarning = isWarning;\r\n/** Tests whether a diagnostic is an error. */\r\nfunction isError(message) {\r\n    return message.category == diagnostics_1.DiagnosticCategory.ERROR;\r\n}\r\nexports.isError = isError;\r\n/** Creates a new set of compiler options. */\r\nfunction createOptions() {\r\n    return new compiler_1.Options();\r\n}\r\nexports.createOptions = createOptions;\r\n/** Sets the `target` option. */\r\nfunction setTarget(options, target) {\r\n    options.target = target;\r\n}\r\nexports.setTarget = setTarget;\r\n/** Sets the `noTreeShaking` option. */\r\nfunction setNoTreeShaking(options, noTreeShaking) {\r\n    options.noTreeShaking = noTreeShaking;\r\n}\r\nexports.setNoTreeShaking = setNoTreeShaking;\r\n/** Sets the `noAssert` option. */\r\nfunction setNoAssert(options, noAssert) {\r\n    options.noAssert = noAssert;\r\n}\r\nexports.setNoAssert = setNoAssert;\r\n/** Sets the `noMemory` option. */\r\nfunction setNoMemory(options, noMemory) {\r\n    options.noMemory = noMemory;\r\n}\r\nexports.setNoMemory = setNoMemory;\r\n/** Sets the `sourceMap` option. */\r\nfunction setSourceMap(options, sourceMap) {\r\n    options.sourceMap = sourceMap;\r\n}\r\nexports.setSourceMap = setSourceMap;\r\n/** Compiles the sources computed by the parser to a module. */\r\nfunction compile(parser, options) {\r\n    if (options === void 0) { options = null; }\r\n    var program = parser.finish();\r\n    var compiler = new compiler_1.Compiler(program, options);\r\n    return compiler.compile();\r\n}\r\nexports.compile = compile;\r\n/** Decompiles a module to its (low level) source. */\r\nfunction decompile(module) {\r\n    var decompiler = new decompiler_1.Decompiler();\r\n    decompiler.decompile(module);\r\n    return decompiler.finish();\r\n}\r\nexports.decompile = decompile;\r\n/** Prefix indicating a library file. */\r\nvar program_1 = __webpack_require__(2);\r\nexports.LIBRARY_PREFIX = program_1.LIBRARY_PREFIX;\r\n\n\n/***/ }),\n/* 18 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar module_1 = __webpack_require__(0);\r\n// TODO :-)\r\nvar Decompiler = /** @class */ (function () {\r\n    function Decompiler() {\r\n        this.text = [];\r\n        this.functionId = 0;\r\n    }\r\n    Decompiler.decompile = function (module) {\r\n        var decompiler = new Decompiler();\r\n        decompiler.decompile(module);\r\n        return decompiler.finish();\r\n    };\r\n    /** Decompiles a module to an AST that can then be serialized. */\r\n    Decompiler.prototype.decompile = function (module) {\r\n        throw new Error(\"not implemented\");\r\n    };\r\n    Decompiler.prototype.decompileFunction = function (func) {\r\n        var name = module_1.readString(_BinaryenFunctionGetName(func)) || \"$\" + this.functionId.toString(10);\r\n        var body = _BinaryenFunctionGetBody(func);\r\n        this.push(\"function \");\r\n        this.push(name);\r\n        this.push(\"(\");\r\n        for (var i = 0, k = _BinaryenFunctionGetNumParams(func); i < k; ++i) {\r\n            if (i > 0)\r\n                this.push(\", \");\r\n            this.push(\"$\");\r\n            this.push(i.toString(10));\r\n            this.push(\": \");\r\n            this.push(nativeTypeToType(_BinaryenFunctionGetParam(func, i)));\r\n        }\r\n        this.push(\"): \");\r\n        this.push(nativeTypeToType(_BinaryenFunctionGetResult(func)));\r\n        this.push(\" \");\r\n        if (_BinaryenExpressionGetId(body) != module_1.ExpressionId.Block) {\r\n            this.push(\"{\\n\");\r\n        }\r\n        this.decompileExpression(body);\r\n        if (_BinaryenExpressionGetId(body) != module_1.ExpressionId.Block) {\r\n            this.push(\"\\n}\\n\");\r\n        }\r\n        ++this.functionId;\r\n    };\r\n    Decompiler.prototype.decompileExpression = function (expr) {\r\n        var id = _BinaryenExpressionGetId(expr);\r\n        var type = _BinaryenExpressionGetType(expr);\r\n        var nested;\r\n        var string;\r\n        var i, k;\r\n        switch (id) {\r\n            case module_1.ExpressionId.Block:// TODO: magic\r\n                if ((string = module_1.readString(_BinaryenBlockGetName(expr))) != null) {\r\n                    this.push(string);\r\n                    this.push(\": \");\r\n                }\r\n                this.push(\"{\\n\");\r\n                k = _BinaryenBlockGetNumChildren(expr);\r\n                for (i = 0; i < k; ++i) {\r\n                    this.decompileExpression(_BinaryenBlockGetChild(expr, i));\r\n                }\r\n                this.push(\"}\\n\");\r\n                return;\r\n            case module_1.ExpressionId.If:\r\n                if (type == module_1.NativeType.None) {\r\n                    this.push(\"if (\");\r\n                    this.decompileExpression(_BinaryenIfGetCondition(expr));\r\n                    this.push(\") \");\r\n                    this.decompileExpression(_BinaryenIfGetIfTrue(expr));\r\n                    if (nested = _BinaryenIfGetIfFalse(expr)) {\r\n                        this.push(\" else \");\r\n                        this.decompileExpression(nested);\r\n                    }\r\n                }\r\n                else {\r\n                    this.decompileExpression(_BinaryenIfGetCondition(expr));\r\n                    this.push(\" ? \");\r\n                    this.decompileExpression(_BinaryenIfGetIfTrue(expr));\r\n                    this.push(\" : \");\r\n                    this.decompileExpression(_BinaryenIfGetIfFalse(expr));\r\n                }\r\n                return;\r\n            case module_1.ExpressionId.Loop:\r\n                if ((string = module_1.readString(_BinaryenLoopGetName(expr))) != null) {\r\n                    this.push(string);\r\n                    this.push(\": \");\r\n                }\r\n                this.push(\"do \");\r\n                this.decompileExpression(_BinaryenLoopGetBody(expr));\r\n                this.push(\"while (0);\\n\");\r\n            case module_1.ExpressionId.Break:\r\n                if (nested = _BinaryenBreakGetCondition(expr)) {\r\n                    this.push(\"if (\");\r\n                    this.decompileExpression(nested);\r\n                    this.push(\") \");\r\n                }\r\n                if ((string = module_1.readString(_BinaryenBreakGetName(expr))) != null) {\r\n                    this.push(\"break \");\r\n                    this.push(string);\r\n                    this.push(\";\\n\");\r\n                }\r\n                else\r\n                    this.push(\"break;\\n\");\r\n                return;\r\n            case module_1.ExpressionId.Switch:\r\n            case module_1.ExpressionId.Call:\r\n            case module_1.ExpressionId.CallImport:\r\n            case module_1.ExpressionId.CallIndirect:\r\n            case module_1.ExpressionId.GetLocal:\r\n                this.push(\"$\");\r\n                this.push(_BinaryenGetLocalGetIndex(expr).toString(10));\r\n                return;\r\n            case module_1.ExpressionId.SetLocal:\r\n                this.push(\"$\");\r\n                this.push(_BinaryenSetLocalGetIndex(expr).toString(10));\r\n                this.push(\" = \");\r\n                this.decompileExpression(_BinaryenSetLocalGetValue(expr));\r\n                return;\r\n            case module_1.ExpressionId.GetGlobal:\r\n            case module_1.ExpressionId.SetGlobal:\r\n            case module_1.ExpressionId.Load:\r\n                this.push(\"load<\");\r\n                this.push(nativeTypeToType(type));\r\n                this.push(\">(\");\r\n                this.push(_BinaryenLoadGetOffset(expr).toString(10));\r\n                this.push(\" + \");\r\n                this.decompileExpression(_BinaryenLoadGetPtr(expr));\r\n                this.push(\")\");\r\n                return;\r\n            case module_1.ExpressionId.Store:\r\n                this.push(\"store<\");\r\n                this.push(nativeTypeToType(type));\r\n                this.push(\">(\");\r\n                this.push(_BinaryenStoreGetOffset(expr).toString(10));\r\n                this.push(\" + \");\r\n                this.decompileExpression(_BinaryenStoreGetPtr(expr));\r\n                this.push(\", \");\r\n                this.decompileExpression(_BinaryenStoreGetValue(expr));\r\n                this.push(\")\");\r\n                return;\r\n            case module_1.ExpressionId.Const:\r\n                switch (type) {\r\n                    case module_1.NativeType.I32:\r\n                        this.push(_BinaryenConstGetValueI32(expr).toString(10));\r\n                        return;\r\n                    case module_1.NativeType.I64:\r\n                        this.push(i64_to_string(i64_new(_BinaryenConstGetValueI64Low(expr), _BinaryenConstGetValueI64High(expr))));\r\n                        return;\r\n                    case module_1.NativeType.F32:\r\n                        this.push(_BinaryenConstGetValueF32(expr).toString(10));\r\n                        return;\r\n                    case module_1.NativeType.F64:\r\n                        this.push(_BinaryenConstGetValueF64(expr).toString(10));\r\n                        return;\r\n                }\r\n                break;\r\n            case module_1.ExpressionId.Unary:\r\n                switch (_BinaryenUnaryGetOp(expr)) {\r\n                    case module_1.UnaryOp.ClzI32:\r\n                        this.push(\"clz<i32>(\");\r\n                        this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n                        this.push(\")\");\r\n                        return;\r\n                    case module_1.UnaryOp.CtzI32:\r\n                        this.push(\"ctz<i32>(\");\r\n                        this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n                        this.push(\")\");\r\n                        return;\r\n                    case module_1.UnaryOp.PopcntI32:\r\n                        this.push(\"popcnt<i32>(\");\r\n                        this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n                        this.push(\")\");\r\n                        return;\r\n                    case module_1.UnaryOp.NegF32:\r\n                    case module_1.UnaryOp.NegF64:\r\n                        this.push(\"-\");\r\n                        this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n                        return;\r\n                    case module_1.UnaryOp.AbsF32:\r\n                        this.push(\"abs<f32>(\");\r\n                        this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n                        this.push(\")\");\r\n                        return;\r\n                    case module_1.UnaryOp.CeilF32:\r\n                        this.push(\"ceil<f32>(\");\r\n                        this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n                        this.push(\")\");\r\n                        return;\r\n                    case module_1.UnaryOp.FloorF32:\r\n                        this.push(\"floor<f32>(\");\r\n                        this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n                        this.push(\")\");\r\n                        return;\r\n                    case module_1.UnaryOp.TruncF32:\r\n                        this.push(\"trunc<f32>(\");\r\n                        this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n                        this.push(\")\");\r\n                        return;\r\n                    case module_1.UnaryOp.NearestF32:\r\n                        this.push(\"nearest<i32>(\");\r\n                        this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n                        this.push(\")\");\r\n                        return;\r\n                    case module_1.UnaryOp.SqrtF32:\r\n                        this.push(\"sqrt<f32>(\");\r\n                        this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n                        this.push(\")\");\r\n                        return;\r\n                    case module_1.UnaryOp.EqzI32:\r\n                    case module_1.UnaryOp.EqzI64:\r\n                        this.push(\"!\");\r\n                        this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n                        return;\r\n                    case module_1.UnaryOp.ClzI64:\r\n                        this.push(\"clz<i64>(\");\r\n                        this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n                        this.push(\")\");\r\n                        return;\r\n                    case module_1.UnaryOp.CtzI64:\r\n                        this.push(\"ctz<i64>(\");\r\n                        this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n                        this.push(\")\");\r\n                        return;\r\n                    case module_1.UnaryOp.PopcntI64:\r\n                        this.push(\"popcnt<i64>(\");\r\n                        this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n                        this.push(\")\");\r\n                        return;\r\n                    case module_1.UnaryOp.AbsF64:\r\n                        this.push(\"abs<f64>(\");\r\n                        this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n                        this.push(\")\");\r\n                        return;\r\n                    case module_1.UnaryOp.CeilF64:\r\n                        this.push(\"ceil<f64>(\");\r\n                        this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n                        this.push(\")\");\r\n                        return;\r\n                    case module_1.UnaryOp.FloorF64:\r\n                        this.push(\"floor<f64>(\");\r\n                        this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n                        this.push(\")\");\r\n                        return;\r\n                    case module_1.UnaryOp.TruncF64:\r\n                        this.push(\"trunc<f64>(\");\r\n                        this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n                        this.push(\")\");\r\n                        return;\r\n                    case module_1.UnaryOp.NearestF64:\r\n                        this.push(\"nearest<f64>(\");\r\n                        this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n                        this.push(\")\");\r\n                        return;\r\n                    case module_1.UnaryOp.SqrtF64:\r\n                        this.push(\"sqrt<f64>(\");\r\n                        this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n                        this.push(\")\");\r\n                        return;\r\n                    case module_1.UnaryOp.ExtendI32:\r\n                        this.push(\"<i64>\");\r\n                        this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n                        return;\r\n                    case module_1.UnaryOp.ExtendU32:\r\n                        this.push(\"<i64><u64>\");\r\n                        this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n                        return;\r\n                    case module_1.UnaryOp.WrapI64:\r\n                        this.push(\"<i32>\");\r\n                        this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n                        return;\r\n                    case module_1.UnaryOp.TruncF32ToI32:\r\n                        this.push(\"<i32>\");\r\n                        this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n                        return;\r\n                    case module_1.UnaryOp.TruncF32ToI64:\r\n                        this.push(\"<i64>\");\r\n                        this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n                        return;\r\n                    case module_1.UnaryOp.TruncF32ToU32:\r\n                        this.push(\"<i32><u32>\");\r\n                        this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n                        return;\r\n                    case module_1.UnaryOp.TruncF32ToU64:\r\n                        this.push(\"<i64><u64>\");\r\n                        this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n                        return;\r\n                    case module_1.UnaryOp.TruncF64ToI32:\r\n                        this.push(\"<i32>\");\r\n                        this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n                        return;\r\n                    case module_1.UnaryOp.TruncF64ToI64:\r\n                        this.push(\"<i64>\");\r\n                        this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n                        return;\r\n                    case module_1.UnaryOp.TruncF64ToU32:\r\n                        this.push(\"<i32><u32>\");\r\n                        this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n                        return;\r\n                    case module_1.UnaryOp.TruncF64ToU64:\r\n                        this.push(\"<i64><u64>\");\r\n                        this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n                        return;\r\n                    case module_1.UnaryOp.ReinterpretF32:\r\n                        this.push(\"reinterpret<f32,i32>(\");\r\n                        this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n                        this.push(\")\");\r\n                        return;\r\n                    case module_1.UnaryOp.ReinterpretF64:\r\n                        this.push(\"reinterpret<f64,i64>(\");\r\n                        this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n                        this.push(\")\");\r\n                        return;\r\n                    case module_1.UnaryOp.ConvertI32ToF32:\r\n                        this.push(\"<f32>\");\r\n                        this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n                        return;\r\n                    case module_1.UnaryOp.ConvertI32ToF64:\r\n                        this.push(\"<f64>\");\r\n                        this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n                        return;\r\n                    case module_1.UnaryOp.ConvertU32ToF32:\r\n                        this.push(\"<f32><u32>\");\r\n                        this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n                        return;\r\n                    case module_1.UnaryOp.ConvertU32ToF64:\r\n                        this.push(\"<f64><u32>\");\r\n                        this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n                        return;\r\n                    case module_1.UnaryOp.ConvertI64ToF32:\r\n                        this.push(\"<f32>\");\r\n                        this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n                        return;\r\n                    case module_1.UnaryOp.ConvertI64ToF64:\r\n                        this.push(\"<f64>\");\r\n                        this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n                        return;\r\n                    case module_1.UnaryOp.ConvertU64ToF32:\r\n                        this.push(\"<f32><u64>\");\r\n                        this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n                        return;\r\n                    case module_1.UnaryOp.ConvertU64ToF64:\r\n                        this.push(\"<f64><u64>\");\r\n                        this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n                        return;\r\n                    case module_1.UnaryOp.PromoteF32:\r\n                        this.push(\"<f64>\");\r\n                        this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n                        return;\r\n                    case module_1.UnaryOp.DemoteF64:\r\n                        this.push(\"<f32>\");\r\n                        this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n                        return;\r\n                    case module_1.UnaryOp.ReinterpretI32:\r\n                        this.push(\"reinterpret<i32,f32>(\");\r\n                        this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n                        this.push(\")\");\r\n                        return;\r\n                    case module_1.UnaryOp.ReinterpretI64:\r\n                        this.push(\"reinterpret<i64,f64>(\");\r\n                        this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n                        this.push(\")\");\r\n                        return;\r\n                }\r\n                break;\r\n            case module_1.ExpressionId.Binary:// TODO: precedence\r\n                switch (_BinaryenBinaryGetOp(expr)) {\r\n                    case module_1.BinaryOp.AddI32:\r\n                    case module_1.BinaryOp.AddI64:\r\n                    case module_1.BinaryOp.AddF32:\r\n                    case module_1.BinaryOp.AddF64:\r\n                        this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n                        this.push(\" + \");\r\n                        this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n                        return;\r\n                    case module_1.BinaryOp.SubI32:\r\n                    case module_1.BinaryOp.SubI64:\r\n                    case module_1.BinaryOp.SubF32:\r\n                    case module_1.BinaryOp.SubF64:\r\n                        this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n                        this.push(\" - \");\r\n                        this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n                        return;\r\n                    case module_1.BinaryOp.MulI32:\r\n                    case module_1.BinaryOp.MulI64:\r\n                    case module_1.BinaryOp.MulF32:\r\n                    case module_1.BinaryOp.MulF64:\r\n                        this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n                        this.push(\" * \");\r\n                        this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n                        return;\r\n                    case module_1.BinaryOp.DivI32:\r\n                    case module_1.BinaryOp.DivI64:\r\n                    case module_1.BinaryOp.DivF32:\r\n                    case module_1.BinaryOp.DivF64:\r\n                        this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n                        this.push(\" / \");\r\n                        this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n                        return;\r\n                    case module_1.BinaryOp.DivU32:\r\n                        this.push(\"<i32>(<u32>\");\r\n                        this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n                        this.push(\" / <u32>\");\r\n                        this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n                        this.push(\")\");\r\n                        return;\r\n                    case module_1.BinaryOp.RemI32:\r\n                    case module_1.BinaryOp.RemI64:\r\n                        this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n                        this.push(\" % \");\r\n                        this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n                        return;\r\n                    case module_1.BinaryOp.RemU32:\r\n                        this.push(\"<i32>(<u32>\");\r\n                        this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n                        this.push(\" / <u32>\");\r\n                        this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n                        this.push(\")\");\r\n                        return;\r\n                    case module_1.BinaryOp.AndI32:\r\n                    case module_1.BinaryOp.AndI64:\r\n                        this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n                        this.push(\" & \");\r\n                        this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n                        return;\r\n                    case module_1.BinaryOp.OrI32:\r\n                    case module_1.BinaryOp.OrI64:\r\n                        this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n                        this.push(\" | \");\r\n                        this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n                        return;\r\n                    case module_1.BinaryOp.XorI32:\r\n                    case module_1.BinaryOp.XorI64:\r\n                        this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n                        this.push(\" ^ \");\r\n                        this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n                        return;\r\n                    case module_1.BinaryOp.ShlI32:\r\n                    case module_1.BinaryOp.ShlI64:\r\n                        this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n                        this.push(\" << \");\r\n                        this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n                        return;\r\n                    case module_1.BinaryOp.ShrU32:\r\n                    case module_1.BinaryOp.ShrU64:\r\n                        this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n                        this.push(\" >>> \");\r\n                        this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n                        return;\r\n                    case module_1.BinaryOp.ShrI32:\r\n                    case module_1.BinaryOp.ShrI64:\r\n                        this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n                        this.push(\" >> \");\r\n                        this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n                        return;\r\n                    case module_1.BinaryOp.RotlI32:\r\n                        this.push(\"rotl<i32>(\");\r\n                        this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n                        this.push(\", \");\r\n                        this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n                        this.push(\")\");\r\n                        return;\r\n                    case module_1.BinaryOp.RotrI32:\r\n                        this.push(\"rotr<i32>(\");\r\n                        this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n                        this.push(\", \");\r\n                        this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n                        this.push(\")\");\r\n                        return;\r\n                    case module_1.BinaryOp.EqI32:\r\n                    case module_1.BinaryOp.EqI64:\r\n                    case module_1.BinaryOp.EqF32:\r\n                    case module_1.BinaryOp.EqF64:\r\n                        this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n                        this.push(\" == \");\r\n                        this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n                        return;\r\n                    case module_1.BinaryOp.NeI32:\r\n                    case module_1.BinaryOp.NeI64:\r\n                    case module_1.BinaryOp.NeF32:\r\n                    case module_1.BinaryOp.NeF64:\r\n                        this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n                        this.push(\" != \");\r\n                        this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n                        return;\r\n                    case module_1.BinaryOp.LtI32:\r\n                    case module_1.BinaryOp.LtI64:\r\n                    case module_1.BinaryOp.LtF32:\r\n                    case module_1.BinaryOp.LtF64:\r\n                        this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n                        this.push(\" < \");\r\n                        this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n                        return;\r\n                    case module_1.BinaryOp.LtU32:\r\n                        this.push(\"<u32>\");\r\n                        this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n                        this.push(\" < <u32>\");\r\n                        this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n                        return;\r\n                    case module_1.BinaryOp.LeI32:\r\n                    case module_1.BinaryOp.LeI64:\r\n                    case module_1.BinaryOp.LeF32:\r\n                    case module_1.BinaryOp.LeF64:\r\n                        this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n                        this.push(\" <= \");\r\n                        this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n                        return;\r\n                    case module_1.BinaryOp.LeU32:\r\n                        this.push(\"<u32>\");\r\n                        this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n                        this.push(\" <= <u32>\");\r\n                        this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n                        return;\r\n                    case module_1.BinaryOp.GtI32:\r\n                    case module_1.BinaryOp.GtI64:\r\n                    case module_1.BinaryOp.GtF32:\r\n                    case module_1.BinaryOp.GtF64:\r\n                        this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n                        this.push(\" > \");\r\n                        this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n                        return;\r\n                    case module_1.BinaryOp.GtU32:\r\n                        this.push(\"<u32>\");\r\n                        this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n                        this.push(\" > <u32>\");\r\n                        this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n                        return;\r\n                    case module_1.BinaryOp.GeI32:\r\n                    case module_1.BinaryOp.GeI64:\r\n                    case module_1.BinaryOp.GeF32:\r\n                    case module_1.BinaryOp.GeF64:\r\n                        this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n                        this.push(\" >= \");\r\n                        this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n                        return;\r\n                    case module_1.BinaryOp.GeU32:\r\n                        this.push(\"<u32>\");\r\n                        this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n                        this.push(\" >= <u32>\");\r\n                        this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n                        return;\r\n                    case module_1.BinaryOp.DivU64:\r\n                        this.push(\"<u64>\");\r\n                        this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n                        this.push(\" / <u64>\");\r\n                        this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n                        return;\r\n                    case module_1.BinaryOp.RemU64:\r\n                        this.push(\"<u64>\");\r\n                        this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n                        this.push(\" % <u64>\");\r\n                        this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n                        return;\r\n                    case module_1.BinaryOp.RotlI64:\r\n                        this.push(\"rotl<i64>(\");\r\n                        this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n                        this.push(\", \");\r\n                        this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n                        this.push(\")\");\r\n                        return;\r\n                    case module_1.BinaryOp.RotrI64:\r\n                        this.push(\"rotr<i64>(\");\r\n                        this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n                        this.push(\", \");\r\n                        this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n                        this.push(\")\");\r\n                        return;\r\n                    case module_1.BinaryOp.LtU64:\r\n                        this.push(\"<u64>\");\r\n                        this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n                        this.push(\" < <u64>\");\r\n                        this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n                        return;\r\n                    case module_1.BinaryOp.LeU64:\r\n                        this.push(\"<u64>\");\r\n                        this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n                        this.push(\" <= <u64>\");\r\n                        this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n                        return;\r\n                    case module_1.BinaryOp.GtU64:\r\n                        this.push(\"<u64>\");\r\n                        this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n                        this.push(\" > <u64>\");\r\n                        this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n                        return;\r\n                    case module_1.BinaryOp.GeU64:\r\n                        this.push(\"<u64>\");\r\n                        this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n                        this.push(\" >= <u64>\");\r\n                        this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n                        return;\r\n                    case module_1.BinaryOp.CopysignF32:\r\n                        this.push(\"copysign<f32>(\");\r\n                        this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n                        this.push(\", \");\r\n                        this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n                        this.push(\")\");\r\n                        return;\r\n                    case module_1.BinaryOp.MinF32:\r\n                        this.push(\"min<f32>(\");\r\n                        this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n                        this.push(\", \");\r\n                        this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n                        this.push(\")\");\r\n                        return;\r\n                    case module_1.BinaryOp.MaxF32:\r\n                        this.push(\"max<f32>(\");\r\n                        this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n                        this.push(\", \");\r\n                        this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n                        this.push(\")\");\r\n                        return;\r\n                    case module_1.BinaryOp.CopysignF64:\r\n                        this.push(\"copysign<f64>(\");\r\n                        this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n                        this.push(\", \");\r\n                        this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n                        this.push(\")\");\r\n                        return;\r\n                    case module_1.BinaryOp.MinF64:\r\n                        this.push(\"min<f64>(\");\r\n                        this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n                        this.push(\", \");\r\n                        this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n                        this.push(\")\");\r\n                        return;\r\n                    case module_1.BinaryOp.MaxF64:\r\n                        this.push(\"max<f64>(\");\r\n                        this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n                        this.push(\", \");\r\n                        this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n                        this.push(\")\");\r\n                        return;\r\n                }\r\n                return;\r\n            case module_1.ExpressionId.Select:\r\n                this.push(\"select<\");\r\n                this.push(nativeTypeToType(type));\r\n                this.push(\">(\");\r\n                this.decompileExpression(_BinaryenSelectGetIfTrue(expr));\r\n                this.push(\", \");\r\n                this.decompileExpression(_BinaryenSelectGetIfFalse(expr));\r\n                this.push(\", \");\r\n                this.decompileExpression(_BinaryenSelectGetCondition(expr));\r\n                this.push(\")\");\r\n                return;\r\n            case module_1.ExpressionId.Drop:\r\n                this.decompileExpression(_BinaryenDropGetValue(expr));\r\n                this.push(\";\\n\");\r\n                return;\r\n            case module_1.ExpressionId.Return:\r\n                if (nested = _BinaryenReturnGetValue(expr)) {\r\n                    this.push(\"return \");\r\n                    this.decompileExpression(nested);\r\n                    this.push(\";\\n\");\r\n                }\r\n                else {\r\n                    this.push(\"return;\\n\");\r\n                }\r\n                return;\r\n            case module_1.ExpressionId.Host:\r\n                switch (_BinaryenHostGetOp(expr)) {\r\n                    case module_1.HostOp.CurrentMemory:\r\n                        this.push(\"current_memory()\");\r\n                        return;\r\n                    case module_1.HostOp.GrowMemory:\r\n                        this.push(\"grow_memory(\");\r\n                        this.decompileExpression(_BinaryenHostGetOperand(expr, 0));\r\n                        this.push(\")\");\r\n                        return;\r\n                }\r\n                break;\r\n            case module_1.ExpressionId.Nop:\r\n                this.push(\";\\n\");\r\n                return;\r\n            case module_1.ExpressionId.Unreachable:\r\n                this.push(\"unreachable()\");\r\n                return;\r\n            case module_1.ExpressionId.AtomicCmpxchg:\r\n            case module_1.ExpressionId.AtomicRMW:\r\n            case module_1.ExpressionId.AtomicWait:\r\n            case module_1.ExpressionId.AtomicWake:\r\n        }\r\n        throw new Error(\"not implemented\");\r\n    };\r\n    Decompiler.prototype.push = function (text) {\r\n        // mostly here so we can add debugging if necessary\r\n        this.text.push(text);\r\n    };\r\n    Decompiler.prototype.finish = function () {\r\n        var ret = this.text.join(\"\");\r\n        this.text = [];\r\n        return ret;\r\n    };\r\n    return Decompiler;\r\n}());\r\nexports.Decompiler = Decompiler;\r\nfunction nativeTypeToType(type) {\r\n    switch (type) {\r\n        case module_1.NativeType.None: return \"void\";\r\n        case module_1.NativeType.I32: return \"i32\";\r\n        case module_1.NativeType.I64: return \"i64\";\r\n        case module_1.NativeType.F32: return \"f32\";\r\n        case module_1.NativeType.F64: return \"f64\";\r\n        case module_1.NativeType.Unreachable: throw new Error(\"unreachable type\");\r\n        case module_1.NativeType.Auto: throw new Error(\"auto type\");\r\n        default: throw new Error(\"unexpected type\");\r\n    }\r\n}\r\n\n\n/***/ }),\n/* 19 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\n/*\r\n\r\n This is a custom parser specifically written for the AssemblyScript subset. It\r\n accepts some of the most common TypeScript-only patterns that it knows an\r\n appropriate error message for but, though it uses TypeScript's codes for\r\n diagnostics, doesn't ultimately aim at full compatibility.\r\n\r\n*/\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar program_1 = __webpack_require__(2);\r\nvar tokenizer_1 = __webpack_require__(6);\r\nvar diagnostics_1 = __webpack_require__(1);\r\nvar path_1 = __webpack_require__(10);\r\nvar ast_1 = __webpack_require__(5);\r\n/** Parser interface. */\r\nvar Parser = /** @class */ (function (_super) {\r\n    __extends(Parser, _super);\r\n    /** Constructs a new parser. */\r\n    function Parser() {\r\n        var _this = _super.call(this) || this;\r\n        /** Log of source file names to be requested. */\r\n        _this.backlog = new Array();\r\n        /** Log of source file names already processed. */\r\n        _this.seenlog = new Set();\r\n        _this.program = new program_1.Program(_this.diagnostics);\r\n        return _this;\r\n    }\r\n    /** Parses a file and adds its definitions to the program. */\r\n    Parser.prototype.parseFile = function (text, path, isEntry) {\r\n        var normalizedPath = path_1.normalize(path);\r\n        for (var i = 0, k = this.program.sources.length; i < k; ++i)\r\n            if (this.program.sources[i].normalizedPath == normalizedPath)\r\n                return; // already parsed\r\n        this.seenlog.add(normalizedPath);\r\n        var source = new ast_1.Source(normalizedPath, text, isEntry ? ast_1.SourceKind.ENTRY : path.startsWith(program_1.LIBRARY_PREFIX) ? ast_1.SourceKind.LIBRARY : ast_1.SourceKind.DEFAULT);\r\n        this.program.sources.push(source);\r\n        var tn = new tokenizer_1.Tokenizer(source, this.program.diagnostics);\r\n        // tn.silentDiagnostics = this.silentDiagnostics;\r\n        source.tokenizer = tn;\r\n        while (!tn.skip(tokenizer_1.Token.ENDOFFILE)) {\r\n            var statement = this.parseTopLevelStatement(tn);\r\n            if (statement) {\r\n                statement.parent = source;\r\n                source.statements.push(statement);\r\n            }\r\n        }\r\n    };\r\n    Parser.prototype.parseTopLevelStatement = function (tn, isNamespaceMember) {\r\n        if (isNamespaceMember === void 0) { isNamespaceMember = false; }\r\n        var decorators = null;\r\n        while (tn.skip(tokenizer_1.Token.AT)) {\r\n            var decorator = this.parseDecorator(tn);\r\n            if (!decorator)\r\n                break;\r\n            if (!decorators)\r\n                decorators = new Array();\r\n            decorators.push(decorator);\r\n        }\r\n        var modifiers = null;\r\n        if (tn.skip(tokenizer_1.Token.EXPORT))\r\n            modifiers = ast_1.addModifier(ast_1.Node.createModifier(ast_1.ModifierKind.EXPORT, tn.range()), modifiers);\r\n        if (tn.skip(tokenizer_1.Token.DECLARE)) {\r\n            modifiers = ast_1.addModifier(ast_1.Node.createModifier(ast_1.ModifierKind.DECLARE, tn.range()), modifiers);\r\n            tn.peek(true);\r\n            if (tn.nextTokenOnNewLine)\r\n                this.error(diagnostics_1.DiagnosticCode.Line_break_not_permitted_here, tn.range(tn.pos)); // recoverable, compatibility\r\n        }\r\n        tn.mark();\r\n        var statement = null;\r\n        var modifier;\r\n        switch (tn.next()) {\r\n            case tokenizer_1.Token.CONST:\r\n                modifiers = ast_1.addModifier(ast_1.Node.createModifier(ast_1.ModifierKind.CONST, tn.range()), modifiers);\r\n                if (tn.skip(tokenizer_1.Token.ENUM)) {\r\n                    statement = this.parseEnum(tn, modifiers, decorators);\r\n                    break;\r\n                }\r\n                statement = this.parseVariable(tn, modifiers, decorators);\r\n                decorators = null;\r\n                break;\r\n            case tokenizer_1.Token.LET:\r\n                modifiers = ast_1.addModifier(ast_1.Node.createModifier(ast_1.ModifierKind.LET, tn.range()), modifiers);\r\n            case tokenizer_1.Token.VAR:\r\n                statement = this.parseVariable(tn, modifiers, decorators);\r\n                decorators = null;\r\n                break;\r\n            case tokenizer_1.Token.ENUM:\r\n                statement = this.parseEnum(tn, modifiers, decorators);\r\n                decorators = null;\r\n                break;\r\n            case tokenizer_1.Token.FUNCTION:\r\n                statement = this.parseFunction(tn, modifiers, decorators);\r\n                decorators = null;\r\n                break;\r\n            case tokenizer_1.Token.ABSTRACT:\r\n                if (!tn.skip(tokenizer_1.Token.CLASS)) {\r\n                    this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(tn.pos), \"class\");\r\n                    break;\r\n                }\r\n                modifiers = ast_1.addModifier(ast_1.Node.createModifier(ast_1.ModifierKind.ABSTRACT, tn.range()), modifiers);\r\n            // fall through\r\n            case tokenizer_1.Token.CLASS:\r\n                statement = this.parseClass(tn, modifiers, decorators);\r\n                decorators = null;\r\n                break;\r\n            case tokenizer_1.Token.NAMESPACE:\r\n                statement = this.parseNamespace(tn, modifiers, decorators);\r\n                decorators = null;\r\n                break;\r\n            case tokenizer_1.Token.IMPORT:\r\n                if (modifier = ast_1.getModifier(ast_1.ModifierKind.EXPORT, modifiers)) {\r\n                    statement = this.parseExportImport(tn, modifier.range);\r\n                }\r\n                else\r\n                    statement = this.parseImport(tn);\r\n                if (modifiers)\r\n                    ast_1.setReusableModifiers(modifiers);\r\n                break;\r\n            case tokenizer_1.Token.TYPE:\r\n                statement = this.parseTypeDeclaration(tn, modifiers, decorators);\r\n                decorators = null;\r\n                break;\r\n            default:\r\n                if (ast_1.hasModifier(ast_1.ModifierKind.EXPORT, modifiers)) {\r\n                    tn.reset();\r\n                    statement = this.parseExport(tn, modifiers); // TODO: why exactly does this have modifiers again? 'declare'?\r\n                }\r\n                else {\r\n                    if (modifiers) {\r\n                        if (modifier = ast_1.getModifier(ast_1.ModifierKind.DECLARE, modifiers))\r\n                            this.error(diagnostics_1.DiagnosticCode._0_modifier_cannot_be_used_here, modifier.range, \"declare\"); // recoverable\r\n                        ast_1.setReusableModifiers(modifiers);\r\n                    }\r\n                    tn.reset();\r\n                    if (!isNamespaceMember)\r\n                        statement = this.parseStatement(tn, true);\r\n                }\r\n                break;\r\n        }\r\n        if (decorators /* not consumed */)\r\n            for (var i = 0, k = decorators.length; i < k; ++i)\r\n                this.error(diagnostics_1.DiagnosticCode.Decorators_are_not_valid_here, decorators[i].range);\r\n        return statement;\r\n    };\r\n    /** Obtains the next file to parse. */\r\n    Parser.prototype.nextFile = function () {\r\n        return this.backlog.length ? this.backlog.shift() : null;\r\n    };\r\n    /** Finishes parsing and returns the program. */\r\n    Parser.prototype.finish = function () {\r\n        if (this.backlog.length)\r\n            throw new Error(\"backlog is not empty\");\r\n        this.backlog = [];\r\n        this.seenlog.clear();\r\n        return this.program;\r\n    };\r\n    Parser.prototype.parseType = function (tn, acceptParenthesized, suppressErrors) {\r\n        if (acceptParenthesized === void 0) { acceptParenthesized = true; }\r\n        if (suppressErrors === void 0) { suppressErrors = false; }\r\n        // not TypeScript-compatible\r\n        var token = tn.next();\r\n        var startPos = tn.tokenPos;\r\n        // void\r\n        if (token == tokenizer_1.Token.VOID)\r\n            return ast_1.Node.createType(ast_1.Node.createIdentifierExpression(\"void\", tn.range()), [], false, tn.range(startPos, tn.pos));\r\n        var type;\r\n        // ( ... )\r\n        if (acceptParenthesized && token == tokenizer_1.Token.OPENPAREN) {\r\n            var innerType = this.parseType(tn, false, suppressErrors);\r\n            if (!innerType)\r\n                return null;\r\n            if (!tn.skip(tokenizer_1.Token.CLOSEPAREN)) {\r\n                if (!suppressErrors)\r\n                    this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(tn.pos), \"}\");\r\n                return null;\r\n            }\r\n            type = innerType;\r\n            type.range.start = startPos;\r\n            type.range.end = tn.pos;\r\n            // this\r\n        }\r\n        else if (token == tokenizer_1.Token.THIS) {\r\n            type = ast_1.Node.createType(ast_1.Node.createThisExpression(tn.range()), [], false, tn.range(startPos, tn.pos));\r\n            // true\r\n        }\r\n        else if (token == tokenizer_1.Token.TRUE || token == tokenizer_1.Token.FALSE) {\r\n            type = ast_1.Node.createType(ast_1.Node.createIdentifierExpression(\"bool\", tn.range()), [], false, tn.range(startPos, tn.pos));\r\n            // string literal\r\n        }\r\n        else if (token == tokenizer_1.Token.STRINGLITERAL) {\r\n            tn.readString();\r\n            type = ast_1.Node.createType(ast_1.Node.createIdentifierExpression(\"string\", tn.range()), [], false, tn.range(startPos, tn.pos));\r\n            // Name\r\n        }\r\n        else if (token == tokenizer_1.Token.IDENTIFIER) {\r\n            var identifier = ast_1.Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n            var parameters = new Array();\r\n            var nullable = false;\r\n            // Name<T>\r\n            if (tn.skip(tokenizer_1.Token.LESSTHAN)) {\r\n                do {\r\n                    var parameter = this.parseType(tn, true, suppressErrors);\r\n                    if (!parameter)\r\n                        return null;\r\n                    parameters.push(parameter);\r\n                } while (tn.skip(tokenizer_1.Token.COMMA));\r\n                if (!tn.skip(tokenizer_1.Token.GREATERTHAN)) {\r\n                    if (!suppressErrors)\r\n                        this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(tn.pos), \">\");\r\n                    return null;\r\n                }\r\n            }\r\n            // ... | null\r\n            if (tn.skip(tokenizer_1.Token.BAR)) {\r\n                if (tn.skip(tokenizer_1.Token.NULL)) {\r\n                    nullable = true;\r\n                }\r\n                else {\r\n                    if (!suppressErrors)\r\n                        this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(tn.pos), \"null\");\r\n                    return null;\r\n                }\r\n            }\r\n            type = ast_1.Node.createType(identifier, parameters, nullable, tn.range(startPos, tn.pos));\r\n        }\r\n        else {\r\n            if (!suppressErrors)\r\n                this.error(diagnostics_1.DiagnosticCode.Identifier_expected, tn.range());\r\n            return null;\r\n        }\r\n        // ... [][]\r\n        while (tn.skip(tokenizer_1.Token.OPENBRACKET)) {\r\n            var bracketStart = tn.tokenPos;\r\n            if (!tn.skip(tokenizer_1.Token.CLOSEBRACKET)) {\r\n                if (!suppressErrors)\r\n                    this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(), \"]\");\r\n                return null;\r\n            }\r\n            var bracketRange = tn.range(bracketStart, tn.pos);\r\n            // ...[] | null\r\n            nullable = false;\r\n            if (tn.skip(tokenizer_1.Token.BAR)) {\r\n                if (tn.skip(tokenizer_1.Token.NULL)) {\r\n                    nullable = true;\r\n                }\r\n                else {\r\n                    if (!suppressErrors)\r\n                        this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(), \"null\");\r\n                    return null;\r\n                }\r\n            }\r\n            type = ast_1.Node.createType(ast_1.Node.createIdentifierExpression(\"Array\", bracketRange), [type], nullable, tn.range(startPos, tn.pos));\r\n            if (nullable)\r\n                break;\r\n        }\r\n        return type;\r\n    };\r\n    // statements\r\n    Parser.prototype.parseDecorator = function (tn) {\r\n        // at '@': Identifier ('.' Identifier)* '(' Arguments\r\n        var startPos = tn.tokenPos;\r\n        if (tn.skip(tokenizer_1.Token.IDENTIFIER)) {\r\n            var name = tn.readIdentifier();\r\n            var expression = ast_1.Node.createIdentifierExpression(name, tn.range(startPos, tn.pos));\r\n            while (tn.skip(tokenizer_1.Token.DOT)) {\r\n                if (tn.skip(tokenizer_1.Token.IDENTIFIER)) {\r\n                    name = tn.readIdentifier();\r\n                    expression = ast_1.Node.createPropertyAccessExpression(expression, ast_1.Node.createIdentifierExpression(name, tn.range()), tn.range(startPos, tn.pos));\r\n                }\r\n                else {\r\n                    this.error(diagnostics_1.DiagnosticCode.Identifier_expected, tn.range());\r\n                    return null;\r\n                }\r\n            }\r\n            var args;\r\n            if (tn.skip(tokenizer_1.Token.OPENPAREN)) {\r\n                args = this.parseArguments(tn);\r\n                if (args)\r\n                    return ast_1.Node.createDecorator(expression, args, tn.range(startPos, tn.pos));\r\n            }\r\n            else\r\n                return ast_1.Node.createDecorator(expression, null, tn.range(startPos, tn.pos));\r\n        }\r\n        else\r\n            this.error(diagnostics_1.DiagnosticCode.Identifier_expected, tn.range());\r\n        return null;\r\n    };\r\n    Parser.prototype.parseVariable = function (tn, modifiers, decorators) {\r\n        // at ('const' | 'let' | 'var'): VariableDeclaration (',' VariableDeclaration)* ';'?\r\n        var startPos = modifiers && modifiers.length ? modifiers[0].range.start : tn.tokenPos;\r\n        var members = new Array();\r\n        var isDeclare = ast_1.hasModifier(ast_1.ModifierKind.DECLARE, modifiers);\r\n        do {\r\n            var member = this.parseVariableDeclaration(tn, isDeclare, modifiers, decorators);\r\n            if (!member)\r\n                return null;\r\n            members.push(member);\r\n        } while (tn.skip(tokenizer_1.Token.COMMA));\r\n        var ret = ast_1.Node.createVariableStatement(members, modifiers, decorators, tn.range(startPos, tn.pos));\r\n        tn.skip(tokenizer_1.Token.SEMICOLON);\r\n        return ret;\r\n    };\r\n    Parser.prototype.parseVariableDeclaration = function (tn, isDeclare, parentModifiers, parentDecorators) {\r\n        if (isDeclare === void 0) { isDeclare = false; }\r\n        // Identifier (':' Type)? ('=' Expression)?\r\n        if (!tn.skip(tokenizer_1.Token.IDENTIFIER)) {\r\n            this.error(diagnostics_1.DiagnosticCode.Identifier_expected, tn.range());\r\n            return null;\r\n        }\r\n        var identifier = ast_1.Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        var type = null;\r\n        if (tn.skip(tokenizer_1.Token.COLON))\r\n            type = this.parseType(tn);\r\n        var initializer = null;\r\n        if (tn.skip(tokenizer_1.Token.EQUALS)) {\r\n            if (isDeclare)\r\n                this.error(diagnostics_1.DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts, tn.range()); // recoverable\r\n            initializer = this.parseExpression(tn, 0 /* COMMA */ + 1);\r\n            if (!initializer)\r\n                return null;\r\n        }\r\n        else {\r\n            if (ast_1.hasModifier(ast_1.ModifierKind.CONST, parentModifiers)) {\r\n                if (!ast_1.hasModifier(ast_1.ModifierKind.DECLARE, parentModifiers))\r\n                    this.error(diagnostics_1.DiagnosticCode._const_declarations_must_be_initialized, identifier.range);\r\n            }\r\n            else if (!type)\r\n                this.error(diagnostics_1.DiagnosticCode.Type_expected, tn.range(tn.pos)); // recoverable\r\n        }\r\n        return ast_1.Node.createVariableDeclaration(identifier, type, initializer, parentModifiers, parentDecorators, tokenizer_1.Range.join(identifier.range, tn.range()));\r\n    };\r\n    Parser.prototype.parseEnum = function (tn, modifiers, decorators) {\r\n        // at 'enum': Identifier '{' (EnumValueDeclaration (',' EnumValueDeclaration )*)? '}' ';'?\r\n        var startPos = modifiers && modifiers.length ? modifiers[0].range.start : tn.tokenPos;\r\n        if (tn.next() != tokenizer_1.Token.IDENTIFIER) {\r\n            this.error(diagnostics_1.DiagnosticCode.Identifier_expected, tn.range());\r\n            return null;\r\n        }\r\n        var identifier = ast_1.Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        if (tn.next() != tokenizer_1.Token.OPENBRACE) {\r\n            this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(), \"{\");\r\n            return null;\r\n        }\r\n        var members = new Array();\r\n        if (!tn.skip(tokenizer_1.Token.CLOSEBRACE)) {\r\n            do {\r\n                var member = this.parseEnumValue(tn);\r\n                if (!member)\r\n                    return null;\r\n                members.push(member);\r\n            } while (tn.skip(tokenizer_1.Token.COMMA));\r\n            if (!tn.skip(tokenizer_1.Token.CLOSEBRACE)) {\r\n                this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(), \"}\");\r\n                return null;\r\n            }\r\n        }\r\n        var ret = ast_1.Node.createEnumDeclaration(identifier, members, modifiers, decorators, tn.range(startPos, tn.pos));\r\n        tn.skip(tokenizer_1.Token.SEMICOLON);\r\n        return ret;\r\n    };\r\n    Parser.prototype.parseEnumValue = function (tn) {\r\n        // Identifier ('=' Expression)?\r\n        if (!tn.skip(tokenizer_1.Token.IDENTIFIER)) {\r\n            this.error(diagnostics_1.DiagnosticCode.Identifier_expected, tn.range());\r\n            return null;\r\n        }\r\n        var identifier = ast_1.Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        var value = null;\r\n        if (tn.skip(tokenizer_1.Token.EQUALS)) {\r\n            value = this.parseExpression(tn, 0 /* COMMA */ + 1);\r\n            if (!value)\r\n                return null;\r\n        }\r\n        return ast_1.Node.createEnumValueDeclaration(identifier, value, tokenizer_1.Range.join(identifier.range, tn.range()));\r\n    };\r\n    Parser.prototype.parseReturn = function (tn) {\r\n        // at 'return': Expression | (';' | '}' | ...'\\n')\r\n        var expr = null;\r\n        if (tn.peek(true) != tokenizer_1.Token.SEMICOLON && tn.nextToken != tokenizer_1.Token.CLOSEBRACE && !tn.nextTokenOnNewLine) {\r\n            expr = this.parseExpression(tn);\r\n            if (!expr)\r\n                return null;\r\n        }\r\n        var ret = ast_1.Node.createReturnStatement(expr, tn.range());\r\n        tn.skip(tokenizer_1.Token.SEMICOLON);\r\n        return ret;\r\n    };\r\n    Parser.prototype.parseTypeParameters = function (tn) {\r\n        // at '<': TypeParameter (',' TypeParameter)* '>'\r\n        var typeParameters = new Array();\r\n        if (!tn.skip(tokenizer_1.Token.GREATERTHAN)) {\r\n            do {\r\n                var typeParameter = this.parseTypeParameter(tn);\r\n                if (!typeParameter)\r\n                    return null;\r\n                typeParameters.push(typeParameter);\r\n            } while (tn.skip(tokenizer_1.Token.COMMA));\r\n            if (!tn.skip(tokenizer_1.Token.GREATERTHAN)) {\r\n                this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(), \">\");\r\n                return null;\r\n            }\r\n        }\r\n        else\r\n            this.error(diagnostics_1.DiagnosticCode.Type_parameter_list_cannot_be_empty, tn.range()); // recoverable\r\n        return typeParameters;\r\n    };\r\n    Parser.prototype.parseTypeParameter = function (tn) {\r\n        // Identifier ('extends' Type)?\r\n        if (tn.next() == tokenizer_1.Token.IDENTIFIER) {\r\n            var identifier = ast_1.Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n            var extendsType = null;\r\n            if (tn.skip(tokenizer_1.Token.EXTENDS)) {\r\n                extendsType = this.parseType(tn);\r\n                if (!extendsType)\r\n                    return null;\r\n            }\r\n            return ast_1.Node.createTypeParameter(identifier, extendsType, tokenizer_1.Range.join(identifier.range, tn.range()));\r\n        }\r\n        else\r\n            this.error(diagnostics_1.DiagnosticCode.Identifier_expected, tn.range());\r\n        return null;\r\n    };\r\n    Parser.prototype.parseParameters = function (tn) {\r\n        // at '(': (Parameter (',' Parameter)*)? ')'\r\n        var parameters = new Array();\r\n        var seenRest = null;\r\n        var seenOptional = false;\r\n        var reportedRest = false;\r\n        if (tn.peek() != tokenizer_1.Token.CLOSEPAREN) {\r\n            do {\r\n                var param = this.parseParameter(tn);\r\n                if (!param)\r\n                    return null;\r\n                if (seenRest && !reportedRest) {\r\n                    this.error(diagnostics_1.DiagnosticCode.A_rest_parameter_must_be_last_in_a_parameter_list, seenRest.name.range);\r\n                    reportedRest = true;\r\n                }\r\n                switch (param.parameterKind) {\r\n                    default:\r\n                        if (seenOptional)\r\n                            this.error(diagnostics_1.DiagnosticCode.A_required_parameter_cannot_follow_an_optional_parameter, param.name.range);\r\n                        break;\r\n                    case ast_1.ParameterKind.OPTIONAL:\r\n                        seenOptional = true;\r\n                        break;\r\n                    case ast_1.ParameterKind.REST:\r\n                        seenRest = param;\r\n                        break;\r\n                }\r\n                parameters.push(param);\r\n            } while (tn.skip(tokenizer_1.Token.COMMA));\r\n        }\r\n        if (tn.skip(tokenizer_1.Token.CLOSEPAREN))\r\n            return parameters;\r\n        else\r\n            this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(), \")\");\r\n        return null;\r\n    };\r\n    Parser.prototype.parseParameter = function (tn) {\r\n        // '...'? Identifier '?'? (':' Type)? ('=' Expression)?\r\n        var isRest = false;\r\n        var seenRest = false;\r\n        var isOptional = false;\r\n        var seenOptional = false;\r\n        var startRange = null;\r\n        if (tn.skip(tokenizer_1.Token.DOT_DOT_DOT)) {\r\n            isRest = true;\r\n            startRange = tn.range();\r\n        }\r\n        if (tn.skip(tokenizer_1.Token.IDENTIFIER)) {\r\n            if (!isRest)\r\n                startRange = tn.range();\r\n            var identifier = ast_1.Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n            var type = null;\r\n            if (isOptional = tn.skip(tokenizer_1.Token.QUESTION)) {\r\n                if (isRest)\r\n                    this.error(diagnostics_1.DiagnosticCode.A_rest_parameter_cannot_be_optional, identifier.range);\r\n            }\r\n            if (tn.skip(tokenizer_1.Token.COLON)) {\r\n                type = this.parseType(tn);\r\n                if (!type)\r\n                    return null;\r\n            }\r\n            var initializer = null;\r\n            if (tn.skip(tokenizer_1.Token.EQUALS)) {\r\n                if (isRest)\r\n                    this.error(diagnostics_1.DiagnosticCode.A_rest_parameter_cannot_have_an_initializer, identifier.range);\r\n                if (isOptional)\r\n                    this.error(diagnostics_1.DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer, identifier.range);\r\n                else\r\n                    isOptional = true;\r\n                initializer = this.parseExpression(tn, 0 /* COMMA */ + 1);\r\n                if (!initializer)\r\n                    return null;\r\n            }\r\n            return ast_1.Node.createParameter(identifier, type, initializer, isRest ? ast_1.ParameterKind.REST : isOptional ? ast_1.ParameterKind.OPTIONAL : ast_1.ParameterKind.DEFAULT, tokenizer_1.Range.join(startRange, tn.range()));\r\n        }\r\n        else\r\n            this.error(diagnostics_1.DiagnosticCode.Identifier_expected, tn.range());\r\n        return null;\r\n    };\r\n    Parser.prototype.parseFunction = function (tn, modifiers, decorators) {\r\n        // at 'function': Identifier ('<' TypeParameters)? '(' Parameters (':' Type)? '{' Statement* '}' ';'?\r\n        var startPos = modifiers && modifiers.length ? modifiers[0].range.start : tn.tokenPos;\r\n        if (!tn.skip(tokenizer_1.Token.IDENTIFIER)) {\r\n            this.error(diagnostics_1.DiagnosticCode.Identifier_expected, tn.range(tn.pos));\r\n            return null;\r\n        }\r\n        var identifier = ast_1.Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        var typeParameters = null;\r\n        if (tn.skip(tokenizer_1.Token.LESSTHAN)) {\r\n            typeParameters = this.parseTypeParameters(tn);\r\n            if (!typeParameters)\r\n                return null;\r\n        }\r\n        else\r\n            typeParameters = [];\r\n        if (!tn.skip(tokenizer_1.Token.OPENPAREN)) {\r\n            this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(tn.pos), \"(\");\r\n            return null;\r\n        }\r\n        var parameters = this.parseParameters(tn);\r\n        if (!parameters)\r\n            return null;\r\n        var isSetter = ast_1.hasModifier(ast_1.ModifierKind.SET, modifiers);\r\n        if (isSetter) {\r\n            if (parameters.length != 1)\r\n                this.error(diagnostics_1.DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter, identifier.range); // recoverable\r\n            if (parameters.length && parameters[0].initializer)\r\n                this.error(diagnostics_1.DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer, identifier.range); // recoverable\r\n        }\r\n        var isGetter = ast_1.hasModifier(ast_1.ModifierKind.GET, modifiers);\r\n        if (isGetter && parameters.length)\r\n            this.error(diagnostics_1.DiagnosticCode.A_get_accessor_cannot_have_parameters, identifier.range); // recoverable\r\n        var returnType = null;\r\n        if (tn.skip(tokenizer_1.Token.COLON)) {\r\n            returnType = this.parseType(tn, isSetter);\r\n            if (!returnType)\r\n                return null;\r\n        }\r\n        else if (!isSetter) {\r\n            this.error(diagnostics_1.DiagnosticCode.Type_expected, tn.range(tn.pos)); // recoverable\r\n        }\r\n        var isDeclare = ast_1.hasModifier(ast_1.ModifierKind.DECLARE, modifiers);\r\n        var statements = null;\r\n        if (tn.skip(tokenizer_1.Token.OPENBRACE)) {\r\n            statements = new Array();\r\n            if (isDeclare)\r\n                this.error(diagnostics_1.DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts, tn.range()); // recoverable\r\n            while (!tn.skip(tokenizer_1.Token.CLOSEBRACE)) {\r\n                var statement = this.parseStatement(tn);\r\n                if (!statement)\r\n                    return null;\r\n                statements.push(statement);\r\n            }\r\n        }\r\n        else if (!isDeclare)\r\n            this.error(diagnostics_1.DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration, tn.range(tn.pos));\r\n        var ret = ast_1.Node.createFunctionDeclaration(identifier, typeParameters, parameters, returnType, statements, modifiers, decorators, tn.range(startPos, tn.pos));\r\n        tn.skip(tokenizer_1.Token.SEMICOLON);\r\n        return ret;\r\n    };\r\n    Parser.prototype.parseClass = function (tn, modifiers, decorators) {\r\n        // at 'class': Identifier ('<' TypeParameters)? ('extends' Type)? ('implements' Type (',' Type)*)? '{' ClassMember* '}'\r\n        var startPos = decorators && decorators.length\r\n            ? decorators[0].range.start\r\n            : modifiers && modifiers.length\r\n                ? modifiers[0].range.start\r\n                : tn.tokenPos;\r\n        if (tn.skip(tokenizer_1.Token.IDENTIFIER)) {\r\n            var identifier = ast_1.Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n            var typeParameters;\r\n            if (tn.skip(tokenizer_1.Token.LESSTHAN)) {\r\n                typeParameters = this.parseTypeParameters(tn);\r\n                if (!typeParameters)\r\n                    return null;\r\n            }\r\n            else\r\n                typeParameters = [];\r\n            var extendsType = null;\r\n            if (tn.skip(tokenizer_1.Token.EXTENDS)) {\r\n                extendsType = this.parseType(tn);\r\n                if (!extendsType)\r\n                    return null;\r\n            }\r\n            var implementsTypes = new Array();\r\n            if (tn.skip(tokenizer_1.Token.IMPLEMENTS)) {\r\n                do {\r\n                    var type = this.parseType(tn);\r\n                    if (!type)\r\n                        return null;\r\n                    implementsTypes.push(type);\r\n                } while (tn.skip(tokenizer_1.Token.COMMA));\r\n            }\r\n            if (tn.skip(tokenizer_1.Token.OPENBRACE)) {\r\n                var members = new Array();\r\n                if (!tn.skip(tokenizer_1.Token.CLOSEBRACE)) {\r\n                    var isDeclare = ast_1.hasModifier(ast_1.ModifierKind.DECLARE, modifiers);\r\n                    do {\r\n                        var member = this.parseClassMember(tn, isDeclare);\r\n                        if (!member)\r\n                            return null;\r\n                        members.push(member);\r\n                    } while (!tn.skip(tokenizer_1.Token.CLOSEBRACE));\r\n                }\r\n                return ast_1.Node.createClassDeclaration(identifier, typeParameters, extendsType, implementsTypes, members, modifiers, decorators, tn.range(startPos, tn.pos));\r\n            }\r\n            else\r\n                this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(), \"{\");\r\n        }\r\n        else\r\n            this.error(diagnostics_1.DiagnosticCode.Identifier_expected, tn.range());\r\n        return null;\r\n    };\r\n    Parser.prototype.parseClassMember = function (tn, parentIsDeclare) {\r\n        // ('public' | 'private' | 'protected')? ('static' | 'abstract')? ('get' | 'set')? Identifier ...\r\n        var startPos = tn.pos;\r\n        var decorators = new Array();\r\n        while (tn.skip(tokenizer_1.Token.AT)) {\r\n            var decorator = this.parseDecorator(tn);\r\n            if (!decorator)\r\n                break;\r\n            decorators.push(decorator);\r\n        }\r\n        var modifiers = null;\r\n        if (tn.skip(tokenizer_1.Token.PUBLIC))\r\n            modifiers = ast_1.addModifier(ast_1.Node.createModifier(ast_1.ModifierKind.PUBLIC, tn.range()), modifiers);\r\n        else if (tn.skip(tokenizer_1.Token.PRIVATE))\r\n            modifiers = ast_1.addModifier(ast_1.Node.createModifier(ast_1.ModifierKind.PRIVATE, tn.range()), modifiers);\r\n        else if (tn.skip(tokenizer_1.Token.PROTECTED))\r\n            modifiers = ast_1.addModifier(ast_1.Node.createModifier(ast_1.ModifierKind.PROTECTED, tn.range()), modifiers);\r\n        if (tn.skip(tokenizer_1.Token.STATIC))\r\n            modifiers = ast_1.addModifier(ast_1.Node.createModifier(ast_1.ModifierKind.STATIC, tn.range()), modifiers);\r\n        else if (tn.skip(tokenizer_1.Token.ABSTRACT))\r\n            modifiers = ast_1.addModifier(ast_1.Node.createModifier(ast_1.ModifierKind.ABSTRACT, tn.range()), modifiers);\r\n        if (tn.skip(tokenizer_1.Token.READONLY))\r\n            modifiers = ast_1.addModifier(ast_1.Node.createModifier(ast_1.ModifierKind.READONLY, tn.range()), modifiers);\r\n        // check if accessor: ('get' | 'set') ^\\n Identifier\r\n        tn.mark();\r\n        var isGetter = false;\r\n        var isSetter = false;\r\n        if (isGetter = tn.skip(tokenizer_1.Token.GET)) {\r\n            if (tn.peek(true, true) == tokenizer_1.Token.IDENTIFIER && !tn.nextTokenOnNewLine)\r\n                modifiers = ast_1.addModifier(ast_1.Node.createModifier(ast_1.ModifierKind.GET, tn.range()), modifiers);\r\n            else {\r\n                tn.reset();\r\n                isGetter = false;\r\n            }\r\n        }\r\n        else if (isSetter = tn.skip(tokenizer_1.Token.SET)) {\r\n            if (tn.peek(true, true) == tokenizer_1.Token.IDENTIFIER && !tn.nextTokenOnNewLine)\r\n                modifiers = ast_1.addModifier(ast_1.Node.createModifier(ast_1.ModifierKind.SET, tn.range()), modifiers);\r\n            else {\r\n                tn.reset();\r\n                isSetter = false;\r\n            }\r\n        }\r\n        var isConstructor = tn.skip(tokenizer_1.Token.CONSTRUCTOR);\r\n        if (isConstructor || tn.skip(tokenizer_1.Token.IDENTIFIER)) {\r\n            var identifier = isConstructor\r\n                ? ast_1.Node.createConstructorExpression(tn.range())\r\n                : ast_1.Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n            var typeParameters;\r\n            if (tn.skip(tokenizer_1.Token.LESSTHAN)) {\r\n                if (isConstructor)\r\n                    this.error(diagnostics_1.DiagnosticCode.Type_parameters_cannot_appear_on_a_constructor_declaration, tn.range()); // recoverable\r\n                typeParameters = this.parseTypeParameters(tn);\r\n                if (!typeParameters)\r\n                    return null;\r\n            }\r\n            else\r\n                typeParameters = [];\r\n            // method: '(' Parameters (':' Type)? '{' Statement* '}' ';'?\r\n            if (tn.skip(tokenizer_1.Token.OPENPAREN)) {\r\n                var parameters = this.parseParameters(tn);\r\n                if (!parameters)\r\n                    return null;\r\n                if (isGetter && parameters.length)\r\n                    this.error(diagnostics_1.DiagnosticCode.A_get_accessor_cannot_have_parameters, identifier.range);\r\n                if (isSetter) {\r\n                    if (parameters.length != 1)\r\n                        this.error(diagnostics_1.DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter, identifier.range);\r\n                    if (parameters.length && parameters[0].initializer)\r\n                        this.error(diagnostics_1.DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer, identifier.range);\r\n                }\r\n                var returnType = null;\r\n                if (tn.skip(tokenizer_1.Token.COLON)) {\r\n                    if (identifier.kind == ast_1.NodeKind.CONSTRUCTOR)\r\n                        this.error(diagnostics_1.DiagnosticCode.Type_annotation_cannot_appear_on_a_constructor_declaration, tn.range());\r\n                    else if (isSetter)\r\n                        this.error(diagnostics_1.DiagnosticCode.A_set_accessor_cannot_have_a_return_type_annotation, tn.range());\r\n                    returnType = this.parseType(tn, identifier.kind == ast_1.NodeKind.CONSTRUCTOR || isSetter);\r\n                    if (!returnType)\r\n                        return null;\r\n                }\r\n                else if (!isSetter && identifier.kind != ast_1.NodeKind.CONSTRUCTOR)\r\n                    this.error(diagnostics_1.DiagnosticCode.Type_expected, tn.range()); // recoverable\r\n                var statements = null;\r\n                if (tn.skip(tokenizer_1.Token.OPENBRACE)) {\r\n                    if (parentIsDeclare)\r\n                        this.error(diagnostics_1.DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts, tn.range()); // recoverable\r\n                    statements = new Array();\r\n                    while (!tn.skip(tokenizer_1.Token.CLOSEBRACE)) {\r\n                        var statement = this.parseStatement(tn);\r\n                        if (!statement)\r\n                            return null;\r\n                        statements.push(statement);\r\n                    }\r\n                }\r\n                else {\r\n                    if (!parentIsDeclare)\r\n                        this.error(diagnostics_1.DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration, tn.range()); // recoverable\r\n                }\r\n                var retMethod = ast_1.Node.createMethodDeclaration(identifier, typeParameters, parameters, returnType, statements, modifiers, decorators, tn.range(startPos, tn.pos));\r\n                tn.skip(tokenizer_1.Token.SEMICOLON);\r\n                return retMethod;\r\n            }\r\n            else if (isConstructor) {\r\n                this.error(diagnostics_1.DiagnosticCode.Constructor_implementation_is_missing, identifier.range());\r\n            }\r\n            else if (isGetter || isSetter) {\r\n                this.error(diagnostics_1.DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration, identifier.range());\r\n                // field: (':' Type)? ('=' Expression)? ';'?\r\n            }\r\n            else {\r\n                var modifier;\r\n                if (modifier = ast_1.getModifier(ast_1.ModifierKind.ABSTRACT, modifiers))\r\n                    this.error(diagnostics_1.DiagnosticCode._0_modifier_cannot_be_used_here, modifier.range, \"abstract\"); // recoverable\r\n                if (modifier = ast_1.getModifier(ast_1.ModifierKind.GET, modifiers))\r\n                    this.error(diagnostics_1.DiagnosticCode._0_modifier_cannot_be_used_here, modifier.range, \"get\"); // recoverable\r\n                if (modifier = ast_1.getModifier(ast_1.ModifierKind.SET, modifiers))\r\n                    this.error(diagnostics_1.DiagnosticCode._0_modifier_cannot_be_used_here, modifier.range, \"set\"); // recoverable\r\n                var type = null;\r\n                if (tn.skip(tokenizer_1.Token.COLON)) {\r\n                    type = this.parseType(tn);\r\n                    if (!type)\r\n                        return null;\r\n                }\r\n                else\r\n                    this.error(diagnostics_1.DiagnosticCode.Type_expected, tn.range()); // recoverable\r\n                var initializer = null;\r\n                if (tn.skip(tokenizer_1.Token.EQUALS)) {\r\n                    initializer = this.parseExpression(tn);\r\n                    if (!initializer)\r\n                        return null;\r\n                }\r\n                var retField = ast_1.Node.createFieldDeclaration(identifier, type, initializer, modifiers, decorators, tn.range(startPos, tn.pos));\r\n                tn.skip(tokenizer_1.Token.SEMICOLON);\r\n                return retField;\r\n            }\r\n        }\r\n        else\r\n            this.error(diagnostics_1.DiagnosticCode.Identifier_expected, tn.range());\r\n        return null;\r\n    };\r\n    Parser.prototype.parseNamespace = function (tn, modifiers, decorators) {\r\n        // at 'namespace': Identifier '{' (Variable | Function)* '}'\r\n        var startPos = modifiers && modifiers.length ? modifiers[0].range.start : tn.tokenPos;\r\n        if (tn.skip(tokenizer_1.Token.IDENTIFIER)) {\r\n            var identifier = ast_1.Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n            if (tn.skip(tokenizer_1.Token.OPENBRACE)) {\r\n                var members = new Array();\r\n                while (!tn.skip(tokenizer_1.Token.CLOSEBRACE)) {\r\n                    var member = this.parseTopLevelStatement(tn, true);\r\n                    if (!member)\r\n                        return null;\r\n                    members.push(member);\r\n                }\r\n                var ret = ast_1.Node.createNamespaceDeclaration(identifier, members, modifiers, decorators, tn.range(startPos, tn.pos));\r\n                tn.skip(tokenizer_1.Token.SEMICOLON);\r\n                return ret;\r\n            }\r\n            else\r\n                this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(), \"{\");\r\n        }\r\n        else\r\n            this.error(diagnostics_1.DiagnosticCode.Identifier_expected, tn.range());\r\n        return null;\r\n    };\r\n    Parser.prototype.parseExport = function (tn, modifiers) {\r\n        // at 'export': '{' ExportMember (',' ExportMember)* }' ('from' StringLiteral)? ';'?\r\n        var startPos = modifiers && modifiers.length ? modifiers[0].range.start : tn.tokenPos;\r\n        if (tn.skip(tokenizer_1.Token.OPENBRACE)) {\r\n            var members = new Array();\r\n            if (!tn.skip(tokenizer_1.Token.CLOSEBRACE)) {\r\n                do {\r\n                    var member = this.parseExportMember(tn);\r\n                    if (!member)\r\n                        return null;\r\n                    members.push(member);\r\n                } while (tn.skip(tokenizer_1.Token.COMMA));\r\n                if (!tn.skip(tokenizer_1.Token.CLOSEBRACE)) {\r\n                    this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(), \"}\");\r\n                    return null;\r\n                }\r\n            }\r\n            var path = null;\r\n            if (tn.skip(tokenizer_1.Token.FROM)) {\r\n                if (tn.skip(tokenizer_1.Token.STRINGLITERAL))\r\n                    path = ast_1.Node.createStringLiteralExpression(tn.readString(), tn.range());\r\n                else {\r\n                    this.error(diagnostics_1.DiagnosticCode.String_literal_expected, tn.range());\r\n                    return null;\r\n                }\r\n            }\r\n            var ret = ast_1.Node.createExportStatement(members, path, modifiers, tn.range(startPos, tn.pos));\r\n            if (ret.normalizedPath && !this.seenlog.has(ret.normalizedPath)) {\r\n                this.backlog.push(ret.normalizedPath);\r\n                this.seenlog.add(ret.normalizedPath);\r\n            }\r\n            tn.skip(tokenizer_1.Token.SEMICOLON);\r\n            return ret;\r\n        }\r\n        else\r\n            this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(), \"{\");\r\n        return null;\r\n    };\r\n    Parser.prototype.parseExportMember = function (tn) {\r\n        // Identifier ('as' Identifier)?\r\n        if (tn.skip(tokenizer_1.Token.IDENTIFIER)) {\r\n            var identifier = ast_1.Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n            var asIdentifier = null;\r\n            if (tn.skip(tokenizer_1.Token.AS)) {\r\n                if (tn.skip(tokenizer_1.Token.IDENTIFIER))\r\n                    asIdentifier = ast_1.Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n                else {\r\n                    this.error(diagnostics_1.DiagnosticCode.Identifier_expected, tn.range());\r\n                    return null;\r\n                }\r\n            }\r\n            return ast_1.Node.createExportMember(identifier, asIdentifier, asIdentifier ? tokenizer_1.Range.join(identifier.range, asIdentifier.range) : identifier.range);\r\n        }\r\n        else\r\n            this.error(diagnostics_1.DiagnosticCode.Identifier_expected, tn.range());\r\n        return null;\r\n    };\r\n    Parser.prototype.parseImport = function (tn) {\r\n        // at 'import': ('{' (ImportMember (',' ImportMember)*)? '}' | '*' 'as' Identifier)? 'from' StringLiteral ';'?\r\n        var startPos = tn.tokenPos;\r\n        var members = null;\r\n        var namespaceName = null;\r\n        var skipFrom = false;\r\n        if (tn.skip(tokenizer_1.Token.OPENBRACE)) {\r\n            members = new Array();\r\n            if (!tn.skip(tokenizer_1.Token.CLOSEBRACE)) {\r\n                do {\r\n                    var member = this.parseImportDeclaration(tn);\r\n                    if (!member)\r\n                        return null;\r\n                    members.push(member);\r\n                } while (tn.skip(tokenizer_1.Token.COMMA));\r\n                if (!tn.skip(tokenizer_1.Token.CLOSEBRACE)) {\r\n                    this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(), \"}\");\r\n                    return null;\r\n                }\r\n            }\r\n        }\r\n        else if (tn.skip(tokenizer_1.Token.ASTERISK)) {\r\n            if (tn.skip(tokenizer_1.Token.AS)) {\r\n                if (tn.skip(tokenizer_1.Token.IDENTIFIER)) {\r\n                    namespaceName = ast_1.Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n                }\r\n                else {\r\n                    this.error(diagnostics_1.DiagnosticCode.Identifier_expected, tn.range());\r\n                    return null;\r\n                }\r\n            }\r\n            else {\r\n                this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(), \"as\");\r\n                return null;\r\n            }\r\n        }\r\n        else\r\n            skipFrom = true;\r\n        if (skipFrom || tn.skip(tokenizer_1.Token.FROM)) {\r\n            if (tn.skip(tokenizer_1.Token.STRINGLITERAL)) {\r\n                var path = ast_1.Node.createStringLiteralExpression(tn.readString(), tn.range());\r\n                var ret;\r\n                if (namespaceName) {\r\n                    assert(!members);\r\n                    ret = ast_1.Node.createImportStatementWithWildcard(namespaceName, path, tn.range(startPos, tn.pos));\r\n                }\r\n                else {\r\n                    ret = ast_1.Node.createImportStatement(members, path, tn.range(startPos, tn.pos));\r\n                }\r\n                if (!this.seenlog.has(ret.normalizedPath)) {\r\n                    this.backlog.push(ret.normalizedPath);\r\n                    this.seenlog.add(ret.normalizedPath);\r\n                }\r\n                tn.skip(tokenizer_1.Token.SEMICOLON);\r\n                return ret;\r\n            }\r\n            else\r\n                this.error(diagnostics_1.DiagnosticCode.String_literal_expected, tn.range());\r\n        }\r\n        else\r\n            this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(), \"from\");\r\n        return null;\r\n    };\r\n    Parser.prototype.parseImportDeclaration = function (tn) {\r\n        // Identifier ('as' Identifier)?\r\n        if (tn.skip(tokenizer_1.Token.IDENTIFIER)) {\r\n            var identifier = ast_1.Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n            var asIdentifier = null;\r\n            if (tn.skip(tokenizer_1.Token.AS)) {\r\n                if (tn.skip(tokenizer_1.Token.IDENTIFIER))\r\n                    asIdentifier = ast_1.Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n                else {\r\n                    this.error(diagnostics_1.DiagnosticCode.Identifier_expected, tn.range());\r\n                    return null;\r\n                }\r\n            }\r\n            return ast_1.Node.createImportDeclaration(identifier, asIdentifier, asIdentifier ? tokenizer_1.Range.join(identifier.range, asIdentifier.range) : identifier.range);\r\n        }\r\n        else\r\n            this.error(diagnostics_1.DiagnosticCode.Identifier_expected, tn.range());\r\n        return null;\r\n    };\r\n    Parser.prototype.parseExportImport = function (tn, startRange) {\r\n        // at 'export' 'import': Identifier ('=' Identifier)? ';'?\r\n        if (tn.skip(tokenizer_1.Token.IDENTIFIER)) {\r\n            var asIdentifier = ast_1.Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n            if (tn.skip(tokenizer_1.Token.EQUALS)) {\r\n                if (tn.skip(tokenizer_1.Token.IDENTIFIER)) {\r\n                    var identifier = ast_1.Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n                    var ret = ast_1.Node.createExportImportStatement(identifier, asIdentifier, tokenizer_1.Range.join(startRange, tn.range()));\r\n                    tn.skip(tokenizer_1.Token.SEMICOLON);\r\n                    return ret;\r\n                }\r\n                else\r\n                    this.error(diagnostics_1.DiagnosticCode.Identifier_expected, tn.range());\r\n            }\r\n            else\r\n                this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(), \"=\");\r\n        }\r\n        else\r\n            this.error(diagnostics_1.DiagnosticCode.Identifier_expected, tn.range());\r\n        return null;\r\n    };\r\n    Parser.prototype.parseStatement = function (tn, topLevel) {\r\n        if (topLevel === void 0) { topLevel = false; }\r\n        // at previous token\r\n        tn.mark();\r\n        var token = tn.next();\r\n        switch (token) {\r\n            case tokenizer_1.Token.BREAK:\r\n                return this.parseBreak(tn);\r\n            case tokenizer_1.Token.CONST:\r\n                return this.parseVariable(tn, [ast_1.Node.createModifier(ast_1.ModifierKind.CONST, tn.range())], null);\r\n            case tokenizer_1.Token.CONTINUE:\r\n                return this.parseContinue(tn);\r\n            case tokenizer_1.Token.DO:\r\n                return this.parseDoStatement(tn);\r\n            case tokenizer_1.Token.FOR:\r\n                return this.parseForStatement(tn);\r\n            case tokenizer_1.Token.IF:\r\n                return this.parseIfStatement(tn);\r\n            case tokenizer_1.Token.LET:\r\n                return this.parseVariable(tn, [ast_1.Node.createModifier(ast_1.ModifierKind.LET, tn.range())], null);\r\n            case tokenizer_1.Token.VAR:\r\n                return this.parseVariable(tn, null, null);\r\n            case tokenizer_1.Token.OPENBRACE:\r\n                return this.parseBlockStatement(tn, topLevel);\r\n            case tokenizer_1.Token.RETURN:\r\n                if (topLevel)\r\n                    this.error(diagnostics_1.DiagnosticCode.A_return_statement_can_only_be_used_within_a_function_body, tn.range()); // recoverable\r\n                return this.parseReturn(tn);\r\n            case tokenizer_1.Token.SEMICOLON:\r\n                return ast_1.Node.createEmptyStatement(tn.range(tn.tokenPos));\r\n            case tokenizer_1.Token.SWITCH:\r\n                return this.parseSwitchStatement(tn);\r\n            case tokenizer_1.Token.THROW:\r\n                return this.parseThrowStatement(tn);\r\n            case tokenizer_1.Token.TRY:\r\n                return this.parseTryStatement(tn);\r\n            case tokenizer_1.Token.TYPE:\r\n                return this.parseTypeDeclaration(tn, null);\r\n            case tokenizer_1.Token.WHILE:\r\n                return this.parseWhileStatement(tn);\r\n            default:\r\n                tn.reset();\r\n                return this.parseExpressionStatement(tn);\r\n        }\r\n    };\r\n    Parser.prototype.parseBlockStatement = function (tn, topLevel) {\r\n        // at '{': Statement* '}' ';'?\r\n        var startPos = tn.tokenPos;\r\n        var statements = new Array();\r\n        while (!tn.skip(tokenizer_1.Token.CLOSEBRACE)) {\r\n            var statement = this.parseStatement(tn, topLevel);\r\n            if (!statement)\r\n                return null;\r\n            statements.push(statement);\r\n        }\r\n        var ret = ast_1.Node.createBlockStatement(statements, tn.range(startPos, tn.pos));\r\n        tn.skip(tokenizer_1.Token.SEMICOLON);\r\n        return ret;\r\n    };\r\n    Parser.prototype.parseBreak = function (tn) {\r\n        // at 'break': Identifier? ';'?\r\n        var identifier = null;\r\n        if (tn.peek(true) == tokenizer_1.Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n            tn.next(true);\r\n            identifier = ast_1.Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        }\r\n        var ret = ast_1.Node.createBreakStatement(identifier, tn.range());\r\n        tn.skip(tokenizer_1.Token.SEMICOLON);\r\n        return ret;\r\n    };\r\n    Parser.prototype.parseContinue = function (tn) {\r\n        // at 'continue': Identifier? ';'?\r\n        var identifier = null;\r\n        if (tn.peek(true) == tokenizer_1.Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n            tn.next(true);\r\n            identifier = ast_1.Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        }\r\n        var ret = ast_1.Node.createContinueStatement(identifier, tn.range());\r\n        tn.skip(tokenizer_1.Token.SEMICOLON);\r\n        return ret;\r\n    };\r\n    Parser.prototype.parseDoStatement = function (tn) {\r\n        // at 'do': Statement 'while' '(' Expression ')' ';'?\r\n        var startPos = tn.tokenPos;\r\n        var statement = this.parseStatement(tn);\r\n        if (!statement)\r\n            return null;\r\n        if (tn.skip(tokenizer_1.Token.WHILE)) {\r\n            if (tn.skip(tokenizer_1.Token.OPENPAREN)) {\r\n                var condition = this.parseExpression(tn);\r\n                if (!condition)\r\n                    return null;\r\n                if (tn.skip(tokenizer_1.Token.CLOSEPAREN)) {\r\n                    var ret = ast_1.Node.createDoStatement(statement, condition, tn.range(startPos, tn.pos));\r\n                    tn.skip(tokenizer_1.Token.SEMICOLON);\r\n                    return ret;\r\n                }\r\n                this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(), \")\");\r\n            }\r\n            else\r\n                this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(), \"(\");\r\n        }\r\n        else\r\n            this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(), \"while\");\r\n        return null;\r\n    };\r\n    Parser.prototype.parseExpressionStatement = function (tn) {\r\n        // at previous token\r\n        var expr = this.parseExpression(tn);\r\n        if (!expr)\r\n            return null;\r\n        var ret = ast_1.Node.createExpressionStatement(expr);\r\n        tn.skip(tokenizer_1.Token.SEMICOLON);\r\n        return ret;\r\n    };\r\n    Parser.prototype.parseForStatement = function (tn) {\r\n        // at 'for': '(' Statement? Expression? ';' Expression? ')' Statement\r\n        var startPos = tn.tokenPos;\r\n        if (tn.skip(tokenizer_1.Token.OPENPAREN)) {\r\n            var initializer = null;\r\n            if (tn.skip(tokenizer_1.Token.LET) || tn.skip(tokenizer_1.Token.CONST) || tn.skip(tokenizer_1.Token.VAR)) {\r\n                initializer = this.parseVariable(tn, null, null);\r\n            }\r\n            else if (!tn.skip(tokenizer_1.Token.SEMICOLON)) {\r\n                initializer = this.parseExpressionStatement(tn);\r\n                if (!initializer)\r\n                    return null;\r\n            }\r\n            if (tn.token == tokenizer_1.Token.SEMICOLON) {\r\n                var condition = null;\r\n                if (!tn.skip(tokenizer_1.Token.SEMICOLON)) {\r\n                    condition = this.parseExpressionStatement(tn);\r\n                    if (!condition)\r\n                        return null;\r\n                }\r\n                if (tn.token == tokenizer_1.Token.SEMICOLON) {\r\n                    var incrementor = null;\r\n                    if (!tn.skip(tokenizer_1.Token.CLOSEPAREN)) {\r\n                        incrementor = this.parseExpression(tn);\r\n                        if (!incrementor)\r\n                            return null;\r\n                        if (!tn.skip(tokenizer_1.Token.CLOSEPAREN)) {\r\n                            this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(), \")\");\r\n                            return null;\r\n                        }\r\n                    }\r\n                    var statement = this.parseStatement(tn);\r\n                    if (!statement)\r\n                        return null;\r\n                    return ast_1.Node.createForStatement(initializer, condition ? condition.expression : null, incrementor, statement, tn.range(startPos, tn.pos));\r\n                }\r\n                else\r\n                    this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(), \";\");\r\n            }\r\n            else\r\n                this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(), \";\");\r\n        }\r\n        else\r\n            this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(), \"(\");\r\n        return null;\r\n    };\r\n    Parser.prototype.parseIfStatement = function (tn) {\r\n        // at 'if': '(' Expression ')' Statement ('else' Statement)?\r\n        var startPos = tn.tokenPos;\r\n        if (tn.skip(tokenizer_1.Token.OPENPAREN)) {\r\n            var condition = this.parseExpression(tn);\r\n            if (!condition)\r\n                return null;\r\n            if (tn.skip(tokenizer_1.Token.CLOSEPAREN)) {\r\n                var statement = this.parseStatement(tn);\r\n                if (!statement)\r\n                    return null;\r\n                var elseStatement = null;\r\n                if (tn.skip(tokenizer_1.Token.ELSE)) {\r\n                    elseStatement = this.parseStatement(tn);\r\n                    if (!elseStatement)\r\n                        return null;\r\n                }\r\n                return ast_1.Node.createIfStatement(condition, statement, elseStatement, tn.range(startPos, tn.pos));\r\n            }\r\n            this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(), \")\");\r\n        }\r\n        else\r\n            this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(), \"(\");\r\n        return null;\r\n    };\r\n    Parser.prototype.parseSwitchStatement = function (tn) {\r\n        // at 'switch': '(' Expression ')' '{' SwitchCase* '}' ';'?\r\n        var startPos = tn.tokenPos;\r\n        if (tn.skip(tokenizer_1.Token.OPENPAREN)) {\r\n            var condition = this.parseExpression(tn);\r\n            if (!condition)\r\n                return null;\r\n            if (tn.skip(tokenizer_1.Token.CLOSEPAREN)) {\r\n                if (tn.skip(tokenizer_1.Token.OPENBRACE)) {\r\n                    var cases = new Array();\r\n                    while (!tn.skip(tokenizer_1.Token.CLOSEBRACE)) {\r\n                        var case_ = this.parseSwitchCase(tn);\r\n                        if (!case_)\r\n                            return null;\r\n                        cases.push(case_);\r\n                    }\r\n                    var ret = ast_1.Node.createSwitchStatement(condition, cases, tn.range(startPos, tn.pos));\r\n                    tn.skip(tokenizer_1.Token.SEMICOLON);\r\n                    return ret;\r\n                }\r\n                else\r\n                    this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(), \"{\");\r\n            }\r\n            else\r\n                this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(), \")\");\r\n        }\r\n        else\r\n            this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(), \"(\");\r\n        return null;\r\n    };\r\n    Parser.prototype.parseSwitchCase = function (tn) {\r\n        var startPos = tn.tokenPos;\r\n        var statements, statement;\r\n        // 'case' Expression ':' Statement*\r\n        if (tn.skip(tokenizer_1.Token.CASE)) {\r\n            var label = this.parseExpression(tn);\r\n            if (!label)\r\n                return null;\r\n            if (tn.skip(tokenizer_1.Token.COLON)) {\r\n                statements = new Array();\r\n                while (tn.peek() != tokenizer_1.Token.CASE && tn.nextToken != tokenizer_1.Token.DEFAULT && tn.nextToken != tokenizer_1.Token.CLOSEBRACE) {\r\n                    statement = this.parseStatement(tn);\r\n                    if (!statement)\r\n                        return null;\r\n                    statements.push(statement);\r\n                }\r\n                return ast_1.Node.createSwitchCase(label, statements, tn.range(startPos, tn.pos));\r\n            }\r\n            else\r\n                this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(), \":\");\r\n            // 'default' ':' Statement*\r\n        }\r\n        else if (tn.skip(tokenizer_1.Token.DEFAULT)) {\r\n            if (tn.skip(tokenizer_1.Token.COLON)) {\r\n                statements = new Array();\r\n                while (tn.peek() != tokenizer_1.Token.CASE && tn.nextToken != tokenizer_1.Token.DEFAULT && tn.nextToken != tokenizer_1.Token.CLOSEBRACE) {\r\n                    statement = this.parseStatement(tn);\r\n                    if (!statement)\r\n                        return null;\r\n                    statements.push(statement);\r\n                }\r\n                return ast_1.Node.createSwitchCase(null, statements, tn.range(startPos, tn.pos));\r\n            }\r\n            else\r\n                this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(), \":\");\r\n        }\r\n        else\r\n            this.error(diagnostics_1.DiagnosticCode._case_or_default_expected, tn.range());\r\n        return null;\r\n    };\r\n    Parser.prototype.parseThrowStatement = function (tn) {\r\n        // at 'throw': Expression ';'?\r\n        var startPos = tn.tokenPos;\r\n        var expression = this.parseExpression(tn);\r\n        if (!expression)\r\n            return null;\r\n        var ret = ast_1.Node.createThrowStatement(expression, tn.range(startPos, tn.pos));\r\n        tn.skip(tokenizer_1.Token.SEMICOLON);\r\n        return ret;\r\n    };\r\n    Parser.prototype.parseTryStatement = function (tn) {\r\n        // at 'try': '{' Statement* '}' ('catch' '(' VariableMember ')' '{' Statement* '}')? ('finally' '{' Statement* '}'? ';'?\r\n        var startPos = tn.tokenPos;\r\n        var stmt;\r\n        if (tn.skip(tokenizer_1.Token.OPENBRACE)) {\r\n            var statements = new Array();\r\n            while (!tn.skip(tokenizer_1.Token.CLOSEBRACE)) {\r\n                stmt = this.parseStatement(tn);\r\n                if (!stmt)\r\n                    return null;\r\n                statements.push(stmt);\r\n            }\r\n            var catchVariable = null;\r\n            var catchStatements = null;\r\n            var finallyStatements = null;\r\n            if (tn.skip(tokenizer_1.Token.CATCH)) {\r\n                if (!tn.skip(tokenizer_1.Token.OPENPAREN)) {\r\n                    this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(), \"(\");\r\n                    return null;\r\n                }\r\n                if (!tn.skip(tokenizer_1.Token.IDENTIFIER)) {\r\n                    this.error(diagnostics_1.DiagnosticCode.Identifier_expected, tn.range());\r\n                    return null;\r\n                }\r\n                catchVariable = ast_1.Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n                if (!tn.skip(tokenizer_1.Token.CLOSEPAREN)) {\r\n                    this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(), \")\");\r\n                    return null;\r\n                }\r\n                if (!tn.skip(tokenizer_1.Token.OPENBRACE)) {\r\n                    this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(), \"{\");\r\n                    return null;\r\n                }\r\n                catchStatements = new Array();\r\n                while (!tn.skip(tokenizer_1.Token.CLOSEBRACE)) {\r\n                    var stmt = this.parseStatement(tn);\r\n                    if (!stmt)\r\n                        return null;\r\n                    catchStatements.push(stmt);\r\n                }\r\n            }\r\n            if (tn.skip(tokenizer_1.Token.FINALLY)) {\r\n                if (!tn.skip(tokenizer_1.Token.OPENBRACE)) {\r\n                    this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(), \"{\");\r\n                    return null;\r\n                }\r\n                finallyStatements = new Array();\r\n                while (!tn.skip(tokenizer_1.Token.CLOSEBRACE)) {\r\n                    stmt = this.parseStatement(tn);\r\n                    if (!stmt)\r\n                        return null;\r\n                    finallyStatements.push(stmt);\r\n                }\r\n            }\r\n            if (!(catchStatements || finallyStatements)) {\r\n                this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(), \"catch\");\r\n                return null;\r\n            }\r\n            var ret = ast_1.Node.createTryStatement(statements, catchVariable, catchStatements, finallyStatements, tn.range(startPos, tn.pos));\r\n            tn.skip(tokenizer_1.Token.SEMICOLON);\r\n            return ret;\r\n        }\r\n        else\r\n            this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(), \"{\");\r\n        return null;\r\n    };\r\n    Parser.prototype.parseTypeDeclaration = function (tn, modifiers, decorators) {\r\n        if (modifiers === void 0) { modifiers = null; }\r\n        if (decorators === void 0) { decorators = null; }\r\n        // at 'type': Identifier '=' Type ';'?\r\n        var startPos = decorators && decorators.length ? decorators[0].range.start\r\n            : modifiers && modifiers.length ? modifiers[0].range.start\r\n                : tn.tokenPos;\r\n        if (tn.skip(tokenizer_1.Token.IDENTIFIER)) {\r\n            var name = ast_1.Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n            if (tn.skip(tokenizer_1.Token.EQUALS)) {\r\n                var type = this.parseType(tn);\r\n                if (!type)\r\n                    return null;\r\n                var ret = ast_1.Node.createTypeDeclaration(name, type, modifiers, decorators, tn.range(startPos, tn.pos));\r\n                tn.skip(tokenizer_1.Token.SEMICOLON);\r\n                return ret;\r\n            }\r\n            else\r\n                this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(), \"=\");\r\n        }\r\n        else\r\n            this.error(diagnostics_1.DiagnosticCode.Identifier_expected, tn.range());\r\n        return null;\r\n    };\r\n    Parser.prototype.parseWhileStatement = function (tn) {\r\n        // at 'while': '(' Expression ')' Statement ';'?\r\n        var startPos = tn.tokenPos;\r\n        if (tn.skip(tokenizer_1.Token.OPENPAREN)) {\r\n            var expression = this.parseExpression(tn);\r\n            if (!expression)\r\n                return null;\r\n            if (tn.skip(tokenizer_1.Token.CLOSEPAREN)) {\r\n                var statement = this.parseStatement(tn);\r\n                if (!statement)\r\n                    return null;\r\n                var ret = ast_1.Node.createWhileStatement(expression, statement, tn.range(startPos, tn.pos));\r\n                tn.skip(tokenizer_1.Token.SEMICOLON);\r\n                return ret;\r\n            }\r\n            else\r\n                this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(), \")\");\r\n        }\r\n        else\r\n            this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(), \"(\");\r\n        return null;\r\n    };\r\n    // expressions\r\n    // see: http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing\r\n    Parser.prototype.parseExpressionStart = function (tn) {\r\n        var token = tn.next(true);\r\n        var startPos = tn.tokenPos;\r\n        var expr = null;\r\n        if (token == tokenizer_1.Token.NULL)\r\n            return ast_1.Node.createNullExpression(tn.range());\r\n        if (token == tokenizer_1.Token.TRUE)\r\n            return ast_1.Node.createTrueExpression(tn.range());\r\n        if (token == tokenizer_1.Token.FALSE)\r\n            return ast_1.Node.createFalseExpression(tn.range());\r\n        var p = determinePrecedenceStart(token);\r\n        if (p != -1 /* INVALID */) {\r\n            var operand;\r\n            // TODO: SpreadExpression, YieldExpression (currently become unsupported UnaryPrefixExpressions)\r\n            // NewExpression\r\n            if (token == tokenizer_1.Token.NEW) {\r\n                operand = this.parseExpression(tn, 18 /* CALL */);\r\n                if (!operand)\r\n                    return null;\r\n                if (operand.kind == ast_1.NodeKind.CALL)\r\n                    return ast_1.Node.createNewExpression(operand.expression, operand.typeArguments, operand.arguments, tn.range(startPos, tn.pos));\r\n                this.error(diagnostics_1.DiagnosticCode.Operation_not_supported, tn.range());\r\n                return null;\r\n            }\r\n            else {\r\n                operand = this.parseExpression(tn, p);\r\n                if (!operand)\r\n                    return null;\r\n            }\r\n            // UnaryPrefixExpression\r\n            if (token == tokenizer_1.Token.PLUS_PLUS || token == tokenizer_1.Token.MINUS_MINUS)\r\n                if (operand.kind != ast_1.NodeKind.IDENTIFIER && operand.kind != ast_1.NodeKind.ELEMENTACCESS && operand.kind != ast_1.NodeKind.PROPERTYACCESS)\r\n                    this.error(diagnostics_1.DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access, operand.range);\r\n            return ast_1.Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\r\n        }\r\n        switch (token) {\r\n            // ParenthesizedExpression\r\n            case tokenizer_1.Token.OPENPAREN: {\r\n                expr = this.parseExpression(tn);\r\n                if (!expr)\r\n                    return null;\r\n                if (!tn.skip(tokenizer_1.Token.CLOSEPAREN)) {\r\n                    this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(), \")\");\r\n                    return null;\r\n                }\r\n                return ast_1.Node.createParenthesizedExpression(expr, tn.range(startPos, tn.pos));\r\n            }\r\n            // ArrayLiteralExpression\r\n            case tokenizer_1.Token.OPENBRACKET: {\r\n                var elementExpressions = new Array();\r\n                if (!tn.skip(tokenizer_1.Token.CLOSEBRACKET)) {\r\n                    do {\r\n                        if (tn.peek() == tokenizer_1.Token.COMMA)\r\n                            expr = null; // omitted\r\n                        else {\r\n                            expr = this.parseExpression(tn, 0 /* COMMA */ + 1);\r\n                            if (!expr)\r\n                                return null;\r\n                        }\r\n                        elementExpressions.push(expr);\r\n                        if (tn.peek() == tokenizer_1.Token.CLOSEBRACKET)\r\n                            break;\r\n                    } while (tn.skip(tokenizer_1.Token.COMMA));\r\n                    if (!tn.skip(tokenizer_1.Token.CLOSEBRACKET)) {\r\n                        this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(), \"]\");\r\n                        return null;\r\n                    }\r\n                }\r\n                return ast_1.Node.createArrayLiteralExpression(elementExpressions, tn.range(startPos, tn.pos));\r\n            }\r\n            // AssertionExpression (unary prefix)\r\n            case tokenizer_1.Token.LESSTHAN: {\r\n                var toType = this.parseType(tn);\r\n                if (!toType)\r\n                    return null;\r\n                if (!tn.skip(tokenizer_1.Token.GREATERTHAN)) {\r\n                    this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(), \">\");\r\n                    return null;\r\n                }\r\n                expr = this.parseExpression(tn, 18 /* CALL */);\r\n                if (!expr)\r\n                    return null;\r\n                return ast_1.Node.createAssertionExpression(0 /* PREFIX */, expr, toType, tn.range(startPos, tn.pos));\r\n            }\r\n            // IdentifierExpression\r\n            case tokenizer_1.Token.IDENTIFIER:\r\n                return ast_1.Node.createIdentifierExpression(tn.readIdentifier(), tn.range(startPos, tn.pos));\r\n            case tokenizer_1.Token.THIS:\r\n                return ast_1.Node.createThisExpression(tn.range(startPos, tn.pos));\r\n            case tokenizer_1.Token.CONSTRUCTOR:\r\n                return ast_1.Node.createConstructorExpression(tn.range(startPos, tn.pos));\r\n            case tokenizer_1.Token.SUPER:\r\n                return ast_1.Node.createSuperExpression(tn.range(startPos, tn.pos));\r\n            // StringLiteralExpression\r\n            case tokenizer_1.Token.STRINGLITERAL:\r\n                return ast_1.Node.createStringLiteralExpression(tn.readString(), tn.range(startPos, tn.pos));\r\n            // IntegerLiteralExpression\r\n            case tokenizer_1.Token.INTEGERLITERAL:\r\n                return ast_1.Node.createIntegerLiteralExpression(tn.readInteger(), tn.range(startPos, tn.pos));\r\n            // FloatLiteralExpression\r\n            case tokenizer_1.Token.FLOATLITERAL:\r\n                return ast_1.Node.createFloatLiteralExpression(tn.readFloat(), tn.range(startPos, tn.pos));\r\n            // RegexpLiteralExpression\r\n            // note that this also continues on invalid ones so the surrounding AST remains intact\r\n            case tokenizer_1.Token.SLASH:\r\n                var regexpPattern = tn.readRegexpPattern(); // also reports\r\n                if (!tn.skip(tokenizer_1.Token.SLASH)) {\r\n                    this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(), \"/\");\r\n                    return null;\r\n                }\r\n                return ast_1.Node.createRegexpLiteralExpression(regexpPattern, tn.readRegexpFlags() /* also reports */, tn.range(startPos, tn.pos));\r\n            default:\r\n                this.error(diagnostics_1.DiagnosticCode.Expression_expected, tn.range());\r\n                return null;\r\n        }\r\n    };\r\n    Parser.prototype.tryParseTypeArgumentsBeforeArguments = function (tn) {\r\n        // at '<': Type (',' Type)* '>' '('\r\n        tn.mark();\r\n        if (!tn.skip(tokenizer_1.Token.LESSTHAN))\r\n            return null;\r\n        var typeArguments = new Array();\r\n        do {\r\n            var type = this.parseType(tn, true, true);\r\n            if (!type) {\r\n                tn.reset();\r\n                return null;\r\n            }\r\n            typeArguments.push(type);\r\n        } while (tn.skip(tokenizer_1.Token.COMMA));\r\n        if (tn.skip(tokenizer_1.Token.GREATERTHAN) && tn.skip(tokenizer_1.Token.OPENPAREN))\r\n            return typeArguments;\r\n        tn.reset();\r\n        return null;\r\n    };\r\n    Parser.prototype.parseArguments = function (tn) {\r\n        // at '(': (Expression (',' Expression)*)? ')'\r\n        var args = new Array();\r\n        if (!tn.skip(tokenizer_1.Token.CLOSEPAREN)) {\r\n            do {\r\n                var expr = this.parseExpression(tn, 0 /* COMMA */ + 1);\r\n                if (!expr)\r\n                    return null;\r\n                args.push(expr);\r\n            } while (tn.skip(tokenizer_1.Token.COMMA));\r\n            if (!tn.skip(tokenizer_1.Token.CLOSEPAREN)) {\r\n                this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(), \")\");\r\n                return null;\r\n            }\r\n        }\r\n        return args;\r\n    };\r\n    Parser.prototype.parseExpression = function (tn, precedence) {\r\n        if (precedence === void 0) { precedence = 0; }\r\n        var expr = this.parseExpressionStart(tn);\r\n        if (!expr)\r\n            return null;\r\n        var startPos = expr.range.start;\r\n        // CallExpression\r\n        var typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn); // skips '(' on success\r\n        // there might be better ways to distinguish a LESSTHAN from a CALL with type arguments\r\n        if (typeArguments || tn.skip(tokenizer_1.Token.OPENPAREN)) {\r\n            var args = this.parseArguments(tn);\r\n            if (!args)\r\n                return null;\r\n            expr = ast_1.Node.createCallExpression(expr, typeArguments, args, tn.range(startPos, tn.pos));\r\n        }\r\n        var token;\r\n        var next = null;\r\n        var nextPrecedence;\r\n        while ((nextPrecedence = determinePrecedence(token = tn.peek())) >= precedence) {\r\n            tn.next();\r\n            switch (token) {\r\n                // AssertionExpression\r\n                case tokenizer_1.Token.AS:\r\n                    var toType = this.parseType(tn);\r\n                    if (!toType)\r\n                        return null;\r\n                    expr = ast_1.Node.createAssertionExpression(1 /* AS */, expr, toType, tn.range(startPos, tn.pos));\r\n                    break;\r\n                // ElementAccessExpression\r\n                case tokenizer_1.Token.OPENBRACKET:\r\n                    next = this.parseExpression(tn);\r\n                    if (!next)\r\n                        return null;\r\n                    if (!tn.skip(tokenizer_1.Token.CLOSEBRACKET)) {\r\n                        this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(), \"]\");\r\n                        return null;\r\n                    }\r\n                    expr = ast_1.Node.createElementAccessExpression(expr, next, tn.range(startPos, tn.pos));\r\n                    break;\r\n                // UnaryPostfixExpression\r\n                case tokenizer_1.Token.PLUS_PLUS:\r\n                case tokenizer_1.Token.MINUS_MINUS:\r\n                    if (expr.kind != ast_1.NodeKind.IDENTIFIER && expr.kind != ast_1.NodeKind.ELEMENTACCESS && expr.kind != ast_1.NodeKind.PROPERTYACCESS)\r\n                        this.error(diagnostics_1.DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access, expr.range);\r\n                    expr = ast_1.Node.createUnaryPostfixExpression(token, expr, tn.range(startPos, tn.pos));\r\n                    break;\r\n                // TernaryExpression\r\n                case tokenizer_1.Token.QUESTION:\r\n                    var ifThen = this.parseExpression(tn);\r\n                    if (!ifThen)\r\n                        return null;\r\n                    if (tn.skip(tokenizer_1.Token.COLON)) {\r\n                        var ifElse = this.parseExpression(tn);\r\n                        if (!ifElse)\r\n                            return null;\r\n                        expr = ast_1.Node.createTernaryExpression(expr, ifThen, ifElse, tn.range(startPos, tn.pos));\r\n                    }\r\n                    else {\r\n                        this.error(diagnostics_1.DiagnosticCode._0_expected, tn.range(), \":\");\r\n                        return null;\r\n                    }\r\n                    break;\r\n                // CommaExpression\r\n                case tokenizer_1.Token.COMMA:\r\n                    var commaExprs = new Array(1);\r\n                    commaExprs[0] = expr;\r\n                    do {\r\n                        expr = this.parseExpression(tn, 0 /* COMMA */ + 1);\r\n                        if (!expr)\r\n                            return null;\r\n                        commaExprs.push(expr);\r\n                    } while (tn.skip(tokenizer_1.Token.COMMA));\r\n                    expr = ast_1.Node.createCommaExpression(commaExprs, tn.range(startPos, tn.pos));\r\n                    break;\r\n                default:\r\n                    next = this.parseExpression(tn, isRightAssociative(token) ? nextPrecedence : 1 + nextPrecedence);\r\n                    if (!next)\r\n                        return null;\r\n                    // PropertyAccessExpression\r\n                    if (token == tokenizer_1.Token.DOT) {\r\n                        if (next.kind == ast_1.NodeKind.IDENTIFIER)\r\n                            expr = ast_1.Node.createPropertyAccessExpression(expr, next, tn.range(startPos, tn.pos));\r\n                        else if (next.kind == ast_1.NodeKind.CALL) {\r\n                            var propertyCall = next;\r\n                            if (propertyCall.expression.kind == ast_1.NodeKind.IDENTIFIER) {\r\n                                propertyCall.expression = ast_1.Node.createPropertyAccessExpression(expr, propertyCall.expression, tn.range(startPos, tn.pos));\r\n                            }\r\n                            else {\r\n                                this.error(diagnostics_1.DiagnosticCode.Identifier_expected, propertyCall.expression.range);\r\n                                return null;\r\n                            }\r\n                            expr = propertyCall;\r\n                        }\r\n                        else {\r\n                            this.error(diagnostics_1.DiagnosticCode.Identifier_expected, next.range);\r\n                            return null;\r\n                        }\r\n                        // BinaryExpression\r\n                    }\r\n                    else\r\n                        expr = ast_1.Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\r\n                    break;\r\n            }\r\n        }\r\n        return expr;\r\n    };\r\n    return Parser;\r\n}(diagnostics_1.DiagnosticEmitter));\r\nexports.Parser = Parser;\r\n/** Operator precedence from least to largest. */\r\nvar Precedence;\r\n(function (Precedence) {\r\n    Precedence[Precedence[\"COMMA\"] = 0] = \"COMMA\";\r\n    Precedence[Precedence[\"SPREAD\"] = 1] = \"SPREAD\";\r\n    Precedence[Precedence[\"YIELD\"] = 2] = \"YIELD\";\r\n    Precedence[Precedence[\"ASSIGNMENT\"] = 3] = \"ASSIGNMENT\";\r\n    Precedence[Precedence[\"CONDITIONAL\"] = 4] = \"CONDITIONAL\";\r\n    Precedence[Precedence[\"LOGICAL_OR\"] = 5] = \"LOGICAL_OR\";\r\n    Precedence[Precedence[\"LOGICAL_AND\"] = 6] = \"LOGICAL_AND\";\r\n    Precedence[Precedence[\"BITWISE_OR\"] = 7] = \"BITWISE_OR\";\r\n    Precedence[Precedence[\"BITWISE_XOR\"] = 8] = \"BITWISE_XOR\";\r\n    Precedence[Precedence[\"BITWISE_AND\"] = 9] = \"BITWISE_AND\";\r\n    Precedence[Precedence[\"EQUALITY\"] = 10] = \"EQUALITY\";\r\n    Precedence[Precedence[\"RELATIONAL\"] = 11] = \"RELATIONAL\";\r\n    Precedence[Precedence[\"SHIFT\"] = 12] = \"SHIFT\";\r\n    Precedence[Precedence[\"ADDITIVE\"] = 13] = \"ADDITIVE\";\r\n    Precedence[Precedence[\"MULTIPLICATIVE\"] = 14] = \"MULTIPLICATIVE\";\r\n    Precedence[Precedence[\"EXPONENTIATED\"] = 15] = \"EXPONENTIATED\";\r\n    Precedence[Precedence[\"UNARY_PREFIX\"] = 16] = \"UNARY_PREFIX\";\r\n    Precedence[Precedence[\"UNARY_POSTFIX\"] = 17] = \"UNARY_POSTFIX\";\r\n    Precedence[Precedence[\"CALL\"] = 18] = \"CALL\";\r\n    Precedence[Precedence[\"MEMBERACCESS\"] = 19] = \"MEMBERACCESS\";\r\n    Precedence[Precedence[\"GROUPING\"] = 20] = \"GROUPING\";\r\n    Precedence[Precedence[\"INVALID\"] = -1] = \"INVALID\";\r\n})(Precedence = exports.Precedence || (exports.Precedence = {}));\r\n/** Determines the precedence of a starting token. */\r\nfunction determinePrecedenceStart(kind) {\r\n    switch (kind) {\r\n        case tokenizer_1.Token.DOT_DOT_DOT:\r\n            return 1 /* SPREAD */;\r\n        case tokenizer_1.Token.YIELD:\r\n            return 2 /* YIELD */;\r\n        case tokenizer_1.Token.EXCLAMATION:\r\n        case tokenizer_1.Token.TILDE:\r\n        case tokenizer_1.Token.PLUS:\r\n        case tokenizer_1.Token.MINUS:\r\n        case tokenizer_1.Token.PLUS_PLUS:\r\n        case tokenizer_1.Token.MINUS_MINUS:\r\n        case tokenizer_1.Token.TYPEOF:\r\n        case tokenizer_1.Token.VOID:\r\n        case tokenizer_1.Token.DELETE:\r\n            return 16 /* UNARY_PREFIX */;\r\n        case tokenizer_1.Token.NEW:\r\n            return 19 /* MEMBERACCESS */;\r\n        default:\r\n            return -1 /* INVALID */;\r\n    }\r\n}\r\n/** Determines the precende of a non-starting token. */\r\nfunction determinePrecedence(kind) {\r\n    switch (kind) {\r\n        case tokenizer_1.Token.COMMA:\r\n            return 0 /* COMMA */;\r\n        case tokenizer_1.Token.EQUALS:\r\n        case tokenizer_1.Token.PLUS_EQUALS:\r\n        case tokenizer_1.Token.MINUS_EQUALS:\r\n        case tokenizer_1.Token.ASTERISK_ASTERISK_EQUALS:\r\n        case tokenizer_1.Token.ASTERISK_EQUALS:\r\n        case tokenizer_1.Token.SLASH_EQUALS:\r\n        case tokenizer_1.Token.PERCENT_EQUALS:\r\n        case tokenizer_1.Token.LESSTHAN_LESSTHAN_EQUALS:\r\n        case tokenizer_1.Token.GREATERTHAN_GREATERTHAN_EQUALS:\r\n        case tokenizer_1.Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\r\n        case tokenizer_1.Token.AMPERSAND_EQUALS:\r\n        case tokenizer_1.Token.CARET_EQUALS:\r\n        case tokenizer_1.Token.BAR_EQUALS:\r\n            return 3 /* ASSIGNMENT */;\r\n        case tokenizer_1.Token.QUESTION:\r\n            return 4 /* CONDITIONAL */;\r\n        case tokenizer_1.Token.BAR_BAR:\r\n            return 5 /* LOGICAL_OR */;\r\n        case tokenizer_1.Token.AMPERSAND_AMPERSAND:\r\n            return 6 /* LOGICAL_AND */;\r\n        case tokenizer_1.Token.BAR:\r\n            return 7 /* BITWISE_OR */;\r\n        case tokenizer_1.Token.CARET:\r\n            return 8 /* BITWISE_XOR */;\r\n        case tokenizer_1.Token.AMPERSAND:\r\n            return 9 /* BITWISE_AND */;\r\n        case tokenizer_1.Token.EQUALS_EQUALS:\r\n        case tokenizer_1.Token.EXCLAMATION_EQUALS:\r\n        case tokenizer_1.Token.EQUALS_EQUALS_EQUALS:\r\n        case tokenizer_1.Token.EXCLAMATION_EQUALS_EQUALS:\r\n            return 10 /* EQUALITY */;\r\n        case tokenizer_1.Token.AS:\r\n        case tokenizer_1.Token.IN:\r\n        case tokenizer_1.Token.INSTANCEOF:\r\n        case tokenizer_1.Token.LESSTHAN:\r\n        case tokenizer_1.Token.GREATERTHAN:\r\n        case tokenizer_1.Token.LESSTHAN_EQUALS:\r\n        case tokenizer_1.Token.GREATERTHAN_EQUALS:\r\n            return 11 /* RELATIONAL */;\r\n        case tokenizer_1.Token.LESSTHAN_LESSTHAN:\r\n        case tokenizer_1.Token.GREATERTHAN_GREATERTHAN:\r\n        case tokenizer_1.Token.GREATERTHAN_GREATERTHAN_GREATERTHAN:\r\n            return 12 /* SHIFT */;\r\n        case tokenizer_1.Token.PLUS:\r\n        case tokenizer_1.Token.MINUS:\r\n            return 13 /* ADDITIVE */;\r\n        case tokenizer_1.Token.ASTERISK:\r\n        case tokenizer_1.Token.SLASH:\r\n        case tokenizer_1.Token.PERCENT:\r\n            return 14 /* MULTIPLICATIVE */;\r\n        case tokenizer_1.Token.ASTERISK_ASTERISK:\r\n            return 15 /* EXPONENTIATED */;\r\n        case tokenizer_1.Token.PLUS_PLUS:\r\n        case tokenizer_1.Token.MINUS_MINUS:\r\n            return 17 /* UNARY_POSTFIX */;\r\n        case tokenizer_1.Token.DOT:\r\n        case tokenizer_1.Token.NEW:\r\n        case tokenizer_1.Token.OPENBRACKET:\r\n            return 19 /* MEMBERACCESS */;\r\n        default:\r\n            return -1 /* INVALID */;\r\n    }\r\n}\r\n/** Determines whether a non-starting token is right associative. */\r\nfunction isRightAssociative(kind) {\r\n    switch (kind) {\r\n        case tokenizer_1.Token.EQUALS:\r\n        case tokenizer_1.Token.PLUS_EQUALS:\r\n        case tokenizer_1.Token.MINUS_EQUALS:\r\n        case tokenizer_1.Token.ASTERISK_ASTERISK_EQUALS:\r\n        case tokenizer_1.Token.ASTERISK_EQUALS:\r\n        case tokenizer_1.Token.SLASH_EQUALS:\r\n        case tokenizer_1.Token.PERCENT_EQUALS:\r\n        case tokenizer_1.Token.LESSTHAN_LESSTHAN_EQUALS:\r\n        case tokenizer_1.Token.GREATERTHAN_GREATERTHAN_EQUALS:\r\n        case tokenizer_1.Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\r\n        case tokenizer_1.Token.AMPERSAND_EQUALS:\r\n        case tokenizer_1.Token.CARET_EQUALS:\r\n        case tokenizer_1.Token.BAR_EQUALS:\r\n        case tokenizer_1.Token.QUESTION:\r\n        case tokenizer_1.Token.ASTERISK_ASTERISK:\r\n            return true;\r\n        default:\r\n            return false;\r\n    }\r\n}\r\n\n\n/***/ })\n/******/ ]);\n});\n\n\n// WEBPACK FOOTER //\n// assemblyscript.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 11);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 905f0d41ace1328c4a54","import {\r\n  Target\r\n} from \"./compiler\";\r\n\r\nexport type ModuleRef = usize;\r\nexport type FunctionTypeRef = usize;\r\nexport type FunctionRef = usize;\r\nexport type ExpressionRef = usize;\r\nexport type GlobalRef = usize;\r\nexport type ImportRef = usize;\r\nexport type ExportRef = usize;\r\nexport type Index = u32;\r\n\r\nexport enum NativeType {\r\n  None = _BinaryenTypeNone(),\r\n  I32 = _BinaryenTypeInt32(),\r\n  I64 = _BinaryenTypeInt64(),\r\n  F32 = _BinaryenTypeFloat32(),\r\n  F64 =  _BinaryenTypeFloat64(),\r\n  Unreachable = _BinaryenTypeUnreachable(),\r\n  Auto = _BinaryenTypeAuto()\r\n}\r\n\r\nexport enum ExpressionId {\r\n  Invalid = _BinaryenInvalidId(),\r\n  Block = _BinaryenBlockId(),\r\n  If = _BinaryenIfId(),\r\n  Loop = _BinaryenLoopId(),\r\n  Break = _BinaryenBreakId(),\r\n  Switch = _BinaryenSwitchId(),\r\n  Call = _BinaryenCallId(),\r\n  CallImport = _BinaryenCallImportId(),\r\n  CallIndirect = _BinaryenCallIndirectId(),\r\n  GetLocal = _BinaryenGetLocalId(),\r\n  SetLocal = _BinaryenSetLocalId(),\r\n  GetGlobal = _BinaryenGetGlobalId(),\r\n  SetGlobal = _BinaryenSetGlobalId(),\r\n  Load = _BinaryenLoadId(),\r\n  Store = _BinaryenStoreId(),\r\n  Const = _BinaryenConstId(),\r\n  Unary = _BinaryenUnaryId(),\r\n  Binary = _BinaryenBinaryId(),\r\n  Select = _BinaryenSelectId(),\r\n  Drop = _BinaryenDropId(),\r\n  Return = _BinaryenReturnId(),\r\n  Host = _BinaryenHostId(),\r\n  Nop = _BinaryenNopId(),\r\n  Unreachable = _BinaryenUnreachableId(),\r\n  AtomicCmpxchg = _BinaryenAtomicCmpxchgId(),\r\n  AtomicRMW = _BinaryenAtomicRMWId(),\r\n  AtomicWait = _BinaryenAtomicWaitId(),\r\n  AtomicWake = _BinaryenAtomicWakeId()\r\n}\r\n\r\nexport enum UnaryOp {\r\n  ClzI32 = _BinaryenClzInt32(),\r\n  CtzI32 = _BinaryenCtzInt32(),\r\n  PopcntI32 = _BinaryenPopcntInt32(),\r\n  NegF32 = _BinaryenNegFloat32(),\r\n  AbsF32 = _BinaryenAbsFloat32(),\r\n  CeilF32 = _BinaryenCeilFloat32(),\r\n  FloorF32 = _BinaryenFloorFloat32(),\r\n  TruncF32 = _BinaryenTruncFloat32(),\r\n  NearestF32 = _BinaryenNearestFloat32(),\r\n  SqrtF32 = _BinaryenSqrtFloat32(),\r\n  EqzI32 = _BinaryenEqZInt32(),\r\n  ClzI64 = _BinaryenClzInt64(),\r\n  CtzI64 = _BinaryenCtzInt64(),\r\n  PopcntI64 = _BinaryenPopcntInt64(),\r\n  NegF64 = _BinaryenNegFloat64(),\r\n  AbsF64 = _BinaryenAbsFloat64(),\r\n  CeilF64 = _BinaryenCeilFloat64(),\r\n  FloorF64 = _BinaryenFloorFloat64(),\r\n  TruncF64 = _BinaryenTruncFloat64(),\r\n  NearestF64 = _BinaryenNearestFloat64(),\r\n  SqrtF64 = _BinaryenSqrtFloat64(),\r\n  EqzI64 = _BinaryenEqZInt64(),\r\n  ExtendI32 = _BinaryenExtendSInt32(),\r\n  ExtendU32 = _BinaryenExtendUInt32(),\r\n  WrapI64 = _BinaryenWrapInt64(),\r\n  TruncF32ToI32 = _BinaryenTruncSFloat32ToInt32(),\r\n  TruncF32ToI64 = _BinaryenTruncSFloat32ToInt64(),\r\n  TruncF32ToU32 = _BinaryenTruncUFloat32ToInt32(),\r\n  TruncF32ToU64 = _BinaryenTruncUFloat32ToInt64(),\r\n  TruncF64ToI32 = _BinaryenTruncSFloat64ToInt32(),\r\n  TruncF64ToI64 = _BinaryenTruncSFloat64ToInt64(),\r\n  TruncF64ToU32 = _BinaryenTruncUFloat64ToInt32(),\r\n  TruncF64ToU64 = _BinaryenTruncUFloat64ToInt64(),\r\n  ReinterpretF32 = _BinaryenReinterpretFloat32(),\r\n  ReinterpretF64 = _BinaryenReinterpretFloat64(),\r\n  ConvertI32ToF32 = _BinaryenConvertSInt32ToFloat32(),\r\n  ConvertI32ToF64 = _BinaryenConvertSInt32ToFloat64(),\r\n  ConvertU32ToF32 = _BinaryenConvertUInt32ToFloat32(),\r\n  ConvertU32ToF64 = _BinaryenConvertUInt32ToFloat64(),\r\n  ConvertI64ToF32 = _BinaryenConvertSInt64ToFloat32(),\r\n  ConvertI64ToF64 = _BinaryenConvertSInt64ToFloat64(),\r\n  ConvertU64ToF32 = _BinaryenConvertUInt64ToFloat32(),\r\n  ConvertU64ToF64 = _BinaryenConvertUInt64ToFloat64(),\r\n  PromoteF32 = _BinaryenPromoteFloat32(),\r\n  DemoteF64 = _BinaryenDemoteFloat64(),\r\n  ReinterpretI32 = _BinaryenReinterpretInt32(),\r\n  ReinterpretI64 = _BinaryenReinterpretInt64()\r\n\r\n  // see: https://github.com/WebAssembly/threads/blob/master/proposals/threads/Overview.md#new-sign-extending-operators\r\n  // ExtendI8ToI32 =_BinaryenExtendS8Int32()\r\n  // ExtendI16ToI32 = _BinaryenExtendS16Int32()\r\n  // ExtendI8ToI64 = _BinaryenExtendS8Int64() // operand is I64\r\n  // ExtendI16ToI64 = _BinaryenExtendS16Int64()\r\n  // ExtendI32ToI64 = _BinaryenExtendS32Int64()\r\n\r\n  // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions/blob/master/proposals/nontrapping-float-to-int-conversion/Overview.md#design\r\n  // TruncF32ToI32Sat\r\n  // TruncF32ToU32Sat\r\n  // TruncF64ToI32Sat\r\n  // TruncF64ToU32Sat\r\n  // TruncF32ToI64Sat\r\n  // TruncF32ToU64Sat\r\n  // TruncF64ToI64Sat\r\n  // TruncF64ToU64Sat\r\n}\r\n\r\nexport enum BinaryOp {\r\n  AddI32 = _BinaryenAddInt32(),\r\n  SubI32 = _BinaryenSubInt32(),\r\n  MulI32 = _BinaryenMulInt32(),\r\n  DivI32 = _BinaryenDivSInt32(),\r\n  DivU32 = _BinaryenDivUInt32(),\r\n  RemI32 = _BinaryenRemSInt32(),\r\n  RemU32 = _BinaryenRemUInt32(),\r\n  AndI32 = _BinaryenAndInt32(),\r\n  OrI32 = _BinaryenOrInt32(),\r\n  XorI32 = _BinaryenXorInt32(),\r\n  ShlI32 = _BinaryenShlInt32(),\r\n  ShrU32 = _BinaryenShrUInt32(),\r\n  ShrI32 = _BinaryenShrSInt32(),\r\n  RotlI32 = _BinaryenRotLInt32(),\r\n  RotrI32 = _BinaryenRotRInt32(),\r\n  EqI32 = _BinaryenEqInt32(),\r\n  NeI32 = _BinaryenNeInt32(),\r\n  LtI32 = _BinaryenLtSInt32(),\r\n  LtU32 = _BinaryenLtUInt32(),\r\n  LeI32 = _BinaryenLeSInt32(),\r\n  LeU32 = _BinaryenLeUInt32(),\r\n  GtI32 = _BinaryenGtSInt32(),\r\n  GtU32 = _BinaryenGtUInt32(),\r\n  GeI32 = _BinaryenGeSInt32(),\r\n  GeU32 = _BinaryenGeUInt32(),\r\n  AddI64 = _BinaryenAddInt64(),\r\n  SubI64 = _BinaryenSubInt64(),\r\n  MulI64 = _BinaryenMulInt64(),\r\n  DivI64 = _BinaryenDivSInt64(),\r\n  DivU64 = _BinaryenDivUInt64(),\r\n  RemI64 = _BinaryenRemSInt64(),\r\n  RemU64 = _BinaryenRemUInt64(),\r\n  AndI64 = _BinaryenAndInt64(),\r\n  OrI64 = _BinaryenOrInt64(),\r\n  XorI64 = _BinaryenXorInt64(),\r\n  ShlI64 = _BinaryenShlInt64(),\r\n  ShrU64 = _BinaryenShrUInt64(),\r\n  ShrI64 = _BinaryenShrSInt64(),\r\n  RotlI64 = _BinaryenRotLInt64(),\r\n  RotrI64 = _BinaryenRotRInt64(),\r\n  EqI64 = _BinaryenEqInt64(),\r\n  NeI64 = _BinaryenNeInt64(),\r\n  LtI64 = _BinaryenLtSInt64(),\r\n  LtU64 = _BinaryenLtUInt64(),\r\n  LeI64 = _BinaryenLeSInt64(),\r\n  LeU64 = _BinaryenLeUInt64(),\r\n  GtI64 = _BinaryenGtSInt64(),\r\n  GtU64 = _BinaryenGtUInt64(),\r\n  GeI64 = _BinaryenGeSInt64(),\r\n  GeU64 = _BinaryenGeUInt64(),\r\n  AddF32 = _BinaryenAddFloat32(),\r\n  SubF32 = _BinaryenSubFloat32(),\r\n  MulF32 = _BinaryenMulFloat32(),\r\n  DivF32 = _BinaryenDivFloat32(),\r\n  CopysignF32 = _BinaryenCopySignFloat32(),\r\n  MinF32 = _BinaryenMinFloat32(),\r\n  MaxF32 = _BinaryenMaxFloat32(),\r\n  EqF32 = _BinaryenEqFloat32(),\r\n  NeF32 = _BinaryenNeFloat32(),\r\n  LtF32 = _BinaryenLtFloat32(),\r\n  LeF32 = _BinaryenLeFloat32(),\r\n  GtF32 = _BinaryenGtFloat32(),\r\n  GeF32 = _BinaryenGeFloat32(),\r\n  AddF64 = _BinaryenAddFloat64(),\r\n  SubF64 = _BinaryenSubFloat64(),\r\n  MulF64 = _BinaryenMulFloat64(),\r\n  DivF64 = _BinaryenDivFloat64(),\r\n  CopysignF64 = _BinaryenCopySignFloat64(),\r\n  MinF64 = _BinaryenMinFloat64(),\r\n  MaxF64 = _BinaryenMaxFloat64(),\r\n  EqF64 = _BinaryenEqFloat64(),\r\n  NeF64 = _BinaryenNeFloat64(),\r\n  LtF64 = _BinaryenLtFloat64(),\r\n  LeF64 = _BinaryenLeFloat64(),\r\n  GtF64 = _BinaryenGtFloat64(),\r\n  GeF64 = _BinaryenGeFloat64()\r\n}\r\n\r\nexport enum HostOp {\r\n  PageSize = _BinaryenPageSize(),\r\n  CurrentMemory = _BinaryenCurrentMemory(),\r\n  GrowMemory = _BinaryenGrowMemory(),\r\n  HasFeature = _BinaryenHasFeature(),\r\n\r\n  // see: https://github.com/WebAssembly/bulk-memory-operations/blob/master/proposals/bulk-memory-operations/Overview.md#design\r\n  // MoveMemory\r\n  // SetMemory\r\n}\r\n\r\nexport enum AtomicRMWOp {\r\n  Add = _BinaryenAtomicRMWAdd(),\r\n  Sub = _BinaryenAtomicRMWSub(),\r\n  And = _BinaryenAtomicRMWAnd(),\r\n  Or = _BinaryenAtomicRMWOr(),\r\n  Xor = _BinaryenAtomicRMWXor(),\r\n  Xchg = _BinaryenAtomicRMWXchg()\r\n}\r\n\r\nexport class MemorySegment {\r\n\r\n  buffer: Uint8Array;\r\n  offset: I64;\r\n\r\n  static create(buffer: Uint8Array, offset: I64) {\r\n    var segment = new MemorySegment();\r\n    segment.buffer = buffer;\r\n    segment.offset = offset;\r\n    return segment;\r\n  }\r\n}\r\n\r\nexport class Module {\r\n\r\n  ref: ModuleRef;\r\n  out: usize;\r\n\r\n  static readonly MAX_MEMORY_WASM32: Index = 0xffff;\r\n  // TODO: static readonly MAX_MEMORY_WASM64\r\n\r\n  static create(): Module {\r\n    var module = new Module();\r\n    module.ref = _BinaryenModuleCreate();\r\n    module.out = allocate_memory(16);\r\n    return module;\r\n  }\r\n\r\n  static createFrom(buffer: Uint8Array): Module {\r\n    var cArr = allocU8Array(buffer);\r\n    try {\r\n      var module = new Module();\r\n      module.ref = _BinaryenModuleRead(cArr, buffer.length);\r\n      module.out = allocate_memory(3 * 8); // LLVM C-ABI, max used is 3 * usize\r\n       return module;\r\n    } finally {\r\n      free_memory(changetype<usize>(cArr));\r\n    }\r\n  }\r\n\r\n  private constructor() { }\r\n\r\n  // types\r\n\r\n  addFunctionType(name: string, result: NativeType, paramTypes: NativeType[]): FunctionRef {\r\n    var cStr = allocString(name);\r\n    var cArr = allocI32Array(paramTypes);\r\n    try {\r\n      return _BinaryenAddFunctionType(this.ref, cStr, result, cArr, paramTypes.length);\r\n    } finally {\r\n      free_memory(cArr);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  getFunctionTypeBySignature(result: NativeType, paramTypes: NativeType[]): FunctionTypeRef {\r\n    var cArr = allocI32Array(paramTypes);\r\n    try {\r\n      return _BinaryenGetFunctionTypeBySignature(this.ref, result, cArr, paramTypes.length);\r\n    } finally {\r\n      free_memory(cArr);\r\n    }\r\n  }\r\n\r\n  // expressions\r\n\r\n  createI32(value: i32): ExpressionRef {\r\n    var out = this.out;\r\n    _BinaryenLiteralInt32(out, value);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  createI64(lo: i32, hi: i32 = 0): ExpressionRef {\r\n    var out = this.out;\r\n    _BinaryenLiteralInt64(out, lo, hi);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  createF32(value: f32): ExpressionRef {\r\n    var out = this.out;\r\n    _BinaryenLiteralFloat32(out, value);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  createF64(value: f64): ExpressionRef {\r\n    var out = this.out;\r\n    _BinaryenLiteralFloat64(out, value);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  createUnary(op: UnaryOp, expr: ExpressionRef): ExpressionRef {\r\n    return _BinaryenUnary(this.ref, op, expr);\r\n  }\r\n\r\n  createBinary(op: BinaryOp, left: ExpressionRef, right: ExpressionRef): ExpressionRef {\r\n    return _BinaryenBinary(this.ref, op, left, right);\r\n  }\r\n\r\n  createHost(op: HostOp, name: string | null = null, operands: ExpressionRef[] | null = null): ExpressionRef {\r\n    var cStr = allocString(name);\r\n    var cArr = allocI32Array(operands);\r\n    try {\r\n      return _BinaryenHost(this.ref, op, cStr, cArr, operands ? (<ExpressionRef[]>operands).length : 0);\r\n    } finally {\r\n      free_memory(cArr);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createGetLocal(index: i32, type: NativeType): ExpressionRef {\r\n    return _BinaryenGetLocal(this.ref, index, type);\r\n  }\r\n\r\n  createTeeLocal(index: i32, value: ExpressionRef): ExpressionRef {\r\n    return _BinaryenTeeLocal(this.ref, index, value);\r\n  }\r\n\r\n  createGetGlobal(name: string, type: NativeType): ExpressionRef {\r\n    var cStr = allocString(name);\r\n    try {\r\n      return _BinaryenGetGlobal(this.ref, cStr, type);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createLoad(bytes: Index, signed: bool, ptr: ExpressionRef, type: NativeType, offset: Index = 0): ExpressionRef {\r\n    return _BinaryenLoad(this.ref, bytes, signed ? 1 : 0, offset, /* always aligned */ bytes, type, ptr);\r\n  }\r\n\r\n  createStore(bytes: Index, ptr: ExpressionRef, value: ExpressionRef, type: NativeType, offset: Index = 0): ExpressionRef {\r\n    return _BinaryenStore(this.ref, bytes, offset, /* always aligned */ bytes, ptr, value, type);\r\n  }\r\n\r\n  createAtomicLoad(bytes: Index, ptr: ExpressionRef, type: NativeType, offset: Index = 0): ExpressionRef {\r\n    return _BinaryenAtomicLoad(this.ref, bytes, offset, type, ptr);\r\n  }\r\n\r\n  createAtomicStore(bytes: Index, ptr: ExpressionRef, value: ExpressionRef, type: NativeType, offset: Index = 0): ExpressionRef {\r\n    return _BinaryenAtomicStore(this.ref, bytes, offset, ptr, value, type);\r\n  }\r\n\r\n  createAtomicRMW(op: AtomicRMWOp, bytes: Index, offset: Index, ptr: ExpressionRef, value: ExpressionRef, type: NativeType): ExpressionRef {\r\n    return _BinaryenAtomicRMW(this.ref, op, bytes, offset, ptr, value, type);\r\n  }\r\n\r\n  createAtomicCmpxchg(bytes: Index, offset: Index, ptr: ExpressionRef, expected: ExpressionRef, replacement: ExpressionRef, type: NativeType): ExpressionRef {\r\n    return _BinaryenAtomicCmpxchg(this.ref, bytes, offset, ptr, expected, replacement, type);\r\n  }\r\n\r\n  createAtomicWait(ptr: ExpressionRef, expected: ExpressionRef, timeout: ExpressionRef, expectedType: NativeType): ExpressionRef {\r\n    return _BinaryenAtomicWait(this.ref, ptr, expected, timeout, expectedType);\r\n  }\r\n\r\n  createAtomicWake(ptr: ExpressionRef, wakeCount: ExpressionRef): ExpressionRef {\r\n    return _BinaryenAtomicWake(this.ref, ptr, wakeCount);\r\n  }\r\n\r\n  // statements\r\n\r\n  createSetLocal(index: Index, value: ExpressionRef): ExpressionRef {\r\n    return _BinaryenSetLocal(this.ref, index, value);\r\n  }\r\n\r\n  createSetGlobal(name: string, value: ExpressionRef): ExpressionRef {\r\n    var cStr = allocString(name);\r\n    try {\r\n      return _BinaryenSetGlobal(this.ref, cStr, value);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createBlock(label: string | null, children: ExpressionRef[], type: NativeType = NativeType.Auto): ExpressionRef {\r\n    var cStr = allocString(label);\r\n    var cArr = allocI32Array(children);\r\n    try {\r\n      return _BinaryenBlock(this.ref, cStr, cArr, children.length, type);\r\n    } finally {\r\n      free_memory(cArr);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createBreak(label: string | null, condition: ExpressionRef = 0, value: ExpressionRef = 0): ExpressionRef {\r\n    var cStr = allocString(label);\r\n    try {\r\n      return _BinaryenBreak(this.ref, cStr, condition, value);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createDrop(expression: ExpressionRef): ExpressionRef {\r\n    return _BinaryenDrop(this.ref, expression);\r\n  }\r\n\r\n  createLoop(label: string | null, body: ExpressionRef): ExpressionRef {\r\n    var cStr = allocString(label);\r\n    try {\r\n      return _BinaryenLoop(this.ref, cStr, body);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createIf(condition: ExpressionRef, ifTrue: ExpressionRef, ifFalse: ExpressionRef = 0): ExpressionRef {\r\n    return _BinaryenIf(this.ref, condition, ifTrue, ifFalse);\r\n  }\r\n\r\n  createNop(): ExpressionRef {\r\n    return _BinaryenNop(this.ref);\r\n  }\r\n\r\n  createReturn(expression: ExpressionRef = 0): ExpressionRef {\r\n    return _BinaryenReturn(this.ref, expression);\r\n  }\r\n\r\n  createSelect(ifTrue: ExpressionRef, ifFalse: ExpressionRef, condition: ExpressionRef): ExpressionRef {\r\n    return _BinaryenSelect(this.ref, condition, ifTrue, ifFalse);\r\n  }\r\n\r\n  createSwitch(names: string[], defaultName: string | null, condition: ExpressionRef, value: ExpressionRef = 0): ExpressionRef {\r\n    var strs = new Array<usize>(names.length);\r\n    for (var i = 0, k: i32 = names.length; i < k; ++i)\r\n      strs[i] = allocString(names[i]);\r\n    var cArr = allocI32Array(strs);\r\n    var cStr = allocString(defaultName);\r\n    try {\r\n      return _BinaryenSwitch(this.ref, cArr, k, cStr, condition, value);\r\n    } finally {\r\n      free_memory(cStr);\r\n      free_memory(cArr);\r\n      for (i = k - 1; i >= 0; --i) free_memory(strs[i]);\r\n    }\r\n  }\r\n\r\n  createCall(target: string, operands: ExpressionRef[] | null, returnType: NativeType): ExpressionRef {\r\n    var cStr = allocString(target);\r\n    var cArr = allocI32Array(operands);\r\n    try {\r\n      return _BinaryenCall(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\r\n    } finally {\r\n      free_memory(cArr);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createCallImport(target: string, operands: ExpressionRef[] | null, returnType: NativeType): ExpressionRef {\r\n    var cStr = allocString(target);\r\n    var cArr = allocI32Array(operands);\r\n    try {\r\n      return _BinaryenCallImport(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\r\n    } finally {\r\n      free_memory(cArr);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createUnreachable(): ExpressionRef {\r\n    return _BinaryenUnreachable(this.ref);\r\n  }\r\n\r\n  // meta\r\n\r\n  addGlobal(name: string, type: NativeType, mutable: bool, initializer: ExpressionRef): GlobalRef {\r\n    var cStr = allocString(name);\r\n    try {\r\n      return _BinaryenAddGlobal(this.ref, cStr, type, mutable ? 1 : 0, initializer);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  addFunction(name: string, type: FunctionTypeRef, varTypes: NativeType[], body: ExpressionRef): FunctionRef {\r\n    var cStr = allocString(name);\r\n    var cArr = allocI32Array(varTypes);\r\n    try {\r\n      return _BinaryenAddFunction(this.ref, cStr, type, cArr, varTypes.length, body);\r\n    } finally {\r\n      free_memory(cArr);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  removeFunction(name: string): void {\r\n    var cStr = allocString(name);\r\n    try {\r\n      _BinaryenRemoveFunction(this.ref, cStr);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  addFunctionExport(internalName: string, externalName: string): ExportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalName);\r\n    try {\r\n      return _BinaryenAddFunctionExport(this.ref, cStr1, cStr2);\r\n    } finally {\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  addTableExport(internalName: string, externalName: string): ExportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalName);\r\n    try {\r\n      return _BinaryenAddTableExport(this.ref, cStr1, cStr2);\r\n    } finally {\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  addMemoryExport(internalName: string, externalName: string): ExportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalName);\r\n    try {\r\n      return _BinaryenAddMemoryExport(this.ref, cStr1, cStr2);\r\n    } finally {\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  addGlobalExport(internalName: string, externalName: string): ExportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalName);\r\n    try {\r\n      return _BinaryenAddGlobalExport(this.ref, cStr1, cStr2);\r\n    } finally {\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  removeExport(externalName: string): void {\r\n    var cStr = allocString(externalName);\r\n    try {\r\n      _BinaryenRemoveExport(this.ref, cStr);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  addFunctionImport(internalName: string, externalModuleName: string, externalBaseName: string, functionType: FunctionTypeRef): ImportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalModuleName);\r\n    var cStr3 = allocString(externalBaseName);\r\n    try {\r\n      return _BinaryenAddFunctionImport(this.ref, cStr1, cStr2, cStr3, functionType);\r\n    } finally {\r\n      free_memory(cStr3);\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  addTableImport(internalName: string, externalModuleName: string, externalBaseName: string): ImportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalModuleName);\r\n    var cStr3 = allocString(externalBaseName);\r\n    try {\r\n      return _BinaryenAddTableImport(this.ref, cStr1, cStr2, cStr3);\r\n    } finally {\r\n      free_memory(cStr3);\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  addMemoryImport(internalName: string, externalModuleName: string, externalBaseName: string): ImportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalModuleName);\r\n    var cStr3 = allocString(externalBaseName);\r\n    try {\r\n      return _BinaryenAddMemoryImport(this.ref, cStr1, cStr2, cStr3);\r\n    } finally {\r\n      free_memory(cStr3);\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  addGlobalImport(internalName: string, externalModuleName: string, externalBaseName: string, globalType: NativeType): ImportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalModuleName);\r\n    var cStr3 = allocString(externalBaseName);\r\n    try {\r\n      return _BinaryenAddGlobalImport(this.ref, cStr1, cStr2, cStr3, globalType);\r\n    } finally {\r\n      free_memory(cStr3);\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  removeImport(internalName: string): void {\r\n    var cStr = allocString(internalName);\r\n    try {\r\n      _BinaryenRemoveImport(this.ref, cStr);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  setMemory(initial: Index, maximum: Index, segments: MemorySegment[], target: Target, exportName: string | null = null): void {\r\n    var cStr = allocString(exportName);\r\n    var k = segments.length;\r\n    var segs = new Array<usize>(k);\r\n    var offs = new Array<ExpressionRef>(k);\r\n    var sizs = new Array<Index>(k);\r\n    for (var i = 0; i < k; ++i) {\r\n      var buffer = segments[i].buffer;\r\n      var offset = segments[i].offset;\r\n      segs[i] = allocU8Array(buffer);\r\n      offs[i] = target == Target.WASM64\r\n        ? this.createI64(i64_low(offset), i64_high(offset))\r\n        : this.createI32(i64_low(offset));\r\n      sizs[i] = buffer.length;\r\n    }\r\n    var cArr1 = allocI32Array(segs);\r\n    var cArr2 = allocI32Array(offs);\r\n    var cArr3 = allocI32Array(sizs);\r\n    try {\r\n      _BinaryenSetMemory(this.ref, initial, maximum, cStr, cArr1, cArr2, cArr3, k);\r\n    } finally {\r\n      free_memory(cArr3);\r\n      free_memory(cArr2);\r\n      free_memory(cArr1);\r\n      for (i = k - 1; i >= 0; --i) free_memory(segs[i]);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  setFunctionTable(funcs: FunctionRef[]): void {\r\n    var cArr = allocI32Array(funcs);\r\n    try {\r\n      _BinaryenSetFunctionTable(this.ref, cArr, funcs.length);\r\n    } finally {\r\n      free_memory(cArr);\r\n    }\r\n  }\r\n\r\n  setStart(func: FunctionRef): void {\r\n    _BinaryenSetStart(this.ref, func);\r\n  }\r\n\r\n  setOptimizeLevel(level: i32 = 2): void {\r\n    _BinaryenSetOptimizeLevel(level);\r\n  }\r\n\r\n  setShrinkLevel(level: i32 = 1): void {\r\n    _BinaryenSetShrinkLevel(level);\r\n  }\r\n\r\n  setDebugInfo(on: bool = false): void {\r\n    _BinaryenSetDebugInfo(on);\r\n  }\r\n\r\n  optimize(func: FunctionRef = 0): void {\r\n    if (func) {\r\n      _BinaryenFunctionOptimize(func, this.ref);\r\n    } else {\r\n      _BinaryenModuleOptimize(this.ref);\r\n    }\r\n  }\r\n\r\n  runPasses(passes: string[], func: FunctionRef = 0): void {\r\n    var k = passes.length;\r\n    var names = new Array<usize>(k);\r\n    for (var i = 0; i < k; ++i)\r\n      names[i] = allocString(passes[i]);\r\n    var cArr = allocI32Array(names);\r\n    try {\r\n      if (func)\r\n        _BinaryenFunctionRunPasses(func, this.ref, cArr, k);\r\n      else\r\n        _BinaryenModuleRunPasses(this.ref, cArr, k);\r\n    } finally {\r\n      free_memory(cArr);\r\n      for (; i >= 0; --i) free_memory(names[i]);\r\n    }\r\n  }\r\n\r\n  validate(): bool {\r\n    return _BinaryenModuleValidate(this.ref) == 1;\r\n  }\r\n\r\n  interpret(): void {\r\n    _BinaryenModuleInterpret(this.ref);\r\n  }\r\n\r\n  print(): void {\r\n    _BinaryenModulePrint(this.ref);\r\n  }\r\n\r\n  printAsmjs(): void {\r\n    _BinaryenModulePrintAsmjs(this.ref);\r\n  }\r\n\r\n  toBinary(sourceMapUrl: string | null): Binary {\r\n    var out = this.out;\r\n    var cStr = allocString(sourceMapUrl);\r\n    var binaryPtr: usize = 0;\r\n    var sourceMapPtr: usize = 0;\r\n    try {\r\n      _BinaryenModuleAllocateAndWrite(out, this.ref, cStr);\r\n      binaryPtr    = readInt(out);\r\n      var binaryBytes  = readInt(out + 4);\r\n      sourceMapPtr = readInt(out + 4 * 2);\r\n      var ret = new Binary();\r\n      ret.output = readBuffer(binaryPtr, binaryBytes);\r\n      ret.sourceMap = readString(sourceMapPtr);\r\n      return ret;\r\n    } finally {\r\n      if (cStr) free_memory(cStr);\r\n      if (binaryPtr) free_memory(binaryPtr);\r\n      if (sourceMapPtr) free_memory(sourceMapPtr);\r\n    }\r\n  }\r\n\r\n  toText(): string {\r\n    throw new Error(\"not implemented\"); // JS glue overrides this\r\n  }\r\n\r\n  toAsmjs(): string {\r\n    throw new Error(\"not implemented\"); // JS glue overrides this\r\n  }\r\n\r\n  dispose(): void {\r\n    if (!this.ref) return; // sic\r\n    _BinaryenModuleDispose(this.ref);\r\n    free_memory(this.out);\r\n  }\r\n\r\n  createRelooper(): Relooper {\r\n    return Relooper.create(this);\r\n  }\r\n\r\n  // currently supports side effect free expressions only\r\n  cloneExpression(expr: ExpressionRef, noSideEffects: bool = false, maxDepth: i32 = i32.MAX_VALUE): ExpressionRef {\r\n    if (maxDepth < 0)\r\n      return 0;\r\n\r\n    var nested1: ExpressionRef,\r\n        nested2: ExpressionRef;\r\n\r\n    switch (_BinaryenExpressionGetId(expr)) {\r\n\r\n      case ExpressionId.Const:\r\n        switch (_BinaryenExpressionGetType(expr)) {\r\n          case NativeType.I32: return this.createI32(_BinaryenConstGetValueI32(expr));\r\n          case NativeType.I64: return this.createI64(_BinaryenConstGetValueI64Low(expr), _BinaryenConstGetValueI64High(expr));\r\n          case NativeType.F32: return this.createF32(_BinaryenConstGetValueF32(expr));\r\n          case NativeType.F64: return this.createF64(_BinaryenConstGetValueF64(expr));\r\n          default: throw new Error(\"concrete type expected\");\r\n        }\r\n\r\n      case ExpressionId.GetLocal:\r\n        return _BinaryenGetLocal(this.ref, _BinaryenGetLocalGetIndex(expr), _BinaryenExpressionGetType(expr));\r\n\r\n      case ExpressionId.GetGlobal:\r\n        var globalName = _BinaryenGetGlobalGetName(expr);\r\n        if (!globalName)\r\n          break;\r\n        return _BinaryenGetGlobal(this.ref, globalName, _BinaryenExpressionGetType(expr));\r\n\r\n      case ExpressionId.Load:\r\n        if (!(nested1 = this.cloneExpression(_BinaryenLoadGetPtr(expr), noSideEffects, maxDepth - 1)))\r\n          break;\r\n        return _BinaryenLoadIsAtomic(expr)\r\n          ? _BinaryenAtomicLoad(this.ref, _BinaryenLoadGetBytes(expr), _BinaryenLoadGetOffset(expr), _BinaryenExpressionGetType(expr), nested1)\r\n          : _BinaryenLoad(this.ref, _BinaryenLoadGetBytes(expr), _BinaryenLoadIsSigned(expr) ? 1 : 0, _BinaryenLoadGetOffset(expr),  _BinaryenLoadGetAlign(expr), _BinaryenExpressionGetType(expr), nested1);\r\n\r\n      case ExpressionId.Unary:\r\n        if (!(nested1 = this.cloneExpression(_BinaryenUnaryGetValue(expr), noSideEffects, maxDepth - 1)))\r\n          break;\r\n        return _BinaryenUnary(this.ref, _BinaryenUnaryGetOp(expr), nested1);\r\n\r\n      case ExpressionId.Binary:\r\n        if (!(nested1 = this.cloneExpression(_BinaryenBinaryGetLeft(expr), noSideEffects, maxDepth - 1)))\r\n          break;\r\n        if (!(nested2 = this.cloneExpression(_BinaryenBinaryGetRight(expr), noSideEffects, maxDepth - 1)))\r\n          break;\r\n        return _BinaryenBinary(this.ref, _BinaryenBinaryGetOp(expr), nested1, nested2);\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  // source map generation\r\n\r\n  addDebugInfoFile(name: string): Index {\r\n    var cStr = allocString(name);\r\n    try {\r\n      return _BinaryenModuleAddDebugInfoFileName(this.ref, cStr);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  getDebugInfoFile(index: Index): string | null {\r\n    return readString(_BinaryenModuleGetDebugInfoFileName(this.ref, index));\r\n  }\r\n\r\n  setDebugLocation(func: FunctionRef, expr: ExpressionRef, fileIndex: Index, lineNumber: Index, columnNumber: Index): void {\r\n    _BinaryenFunctionSetDebugLocation(func, expr, fileIndex, lineNumber, columnNumber);\r\n  }\r\n}\r\n\r\nexport class Relooper {\r\n\r\n  module: Module;\r\n  ref: RelooperRef;\r\n\r\n  static create(module: Module): Relooper {\r\n    var relooper = new Relooper();\r\n    relooper.module = module;\r\n    relooper.ref = _RelooperCreate();\r\n      return relooper;\r\n  }\r\n\r\n  static createStub(module: Module): Relooper {\r\n    var relooper = new Relooper();\r\n    relooper.module = module;\r\n    relooper.ref = 0;\r\n    return relooper;\r\n  }\r\n\r\n  private constructor() {}\r\n\r\n  addBlock(code: ExpressionRef): RelooperBlockRef {\r\n    return _RelooperAddBlock(this.ref, code);\r\n  }\r\n\r\n  addBranch(from: RelooperBlockRef, to: RelooperBlockRef, condition: ExpressionRef = 0, code: ExpressionRef = 0): void {\r\n    _RelooperAddBranch(from, to, condition, code);\r\n  }\r\n\r\n  addBlockWithSwitch(code: ExpressionRef, condition: ExpressionRef): RelooperBlockRef {\r\n    return _RelooperAddBlockWithSwitch(this.ref, code, condition);\r\n  }\r\n\r\n  addBranchForSwitch(from: RelooperBlockRef, to: RelooperBlockRef, indexes: i32[], code: ExpressionRef = 0): void {\r\n    var cArr = allocI32Array(indexes);\r\n    try {\r\n      _RelooperAddBranchForSwitch(from, to, cArr, indexes.length, code);\r\n    } finally {\r\n      free_memory(cArr);\r\n    }\r\n  }\r\n\r\n  renderAndDispose(entry: RelooperBlockRef, labelHelper: Index): ExpressionRef {\r\n    return _RelooperRenderAndDispose(this.ref, entry, labelHelper, this.module.ref);\r\n  }\r\n}\r\n\r\n// helpers\r\n// can't do stack allocation here: STACKTOP is a global in WASM but a hidden variable in asm.js\r\n\r\nfunction allocU8Array(u8s: Uint8Array | null): usize {\r\n  if (!u8s) return 0;\r\n  var ptr = allocate_memory(u8s.length);\r\n  var idx = ptr;\r\n  for (var i = 0, k = u8s.length; i < k; ++i)\r\n    store<u8>(idx++, u8s[i]);\r\n  return ptr;\r\n}\r\n\r\nfunction allocI32Array(i32s: i32[] | null): usize {\r\n  if (!i32s) return 0;\r\n  var ptr = allocate_memory(i32s.length << 2);\r\n  var idx = ptr;\r\n  for (var i = 0, k = i32s.length; i < k; ++i) {\r\n    var val = i32s[i];\r\n    // store<i32>(idx, val) is not portable\r\n    store<u8>(idx    , ( val         & 0xff) as u8);\r\n    store<u8>(idx + 1, ((val >>   8) & 0xff) as u8);\r\n    store<u8>(idx + 2, ((val >>  16) & 0xff) as u8);\r\n    store<u8>(idx + 3, ( val >>> 24        ) as u8);\r\n    idx += 4;\r\n  }\r\n  return ptr;\r\n}\r\n\r\nfunction stringLengthUTF8(str: string): usize {\r\n  var len = 0;\r\n  for (var i = 0, k = str.length; i < k; ++i) {\r\n    var u = str.charCodeAt(i);\r\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k)\r\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\r\n    if (u <= 0x7F)\r\n      ++len;\r\n    else if (u <= 0x7FF)\r\n      len += 2;\r\n    else if (u <= 0xFFFF)\r\n      len += 3;\r\n    else if (u <= 0x1FFFFF)\r\n      len += 4;\r\n    else if (u <= 0x3FFFFFF)\r\n      len += 5;\r\n    else\r\n      len += 6;\r\n  }\r\n  return len;\r\n}\r\n\r\nfunction allocString(str: string | null): usize {\r\n  if (str == null) return 0;\r\n  var ptr = allocate_memory(stringLengthUTF8(str) + 1);\r\n  var idx = ptr;\r\n  for (var i = 0, k = str.length; i < k; ++i) {\r\n    var u = str.charCodeAt(i);\r\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k)\r\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\r\n    if (u <= 0x7F)\r\n      store<u8>(idx++, u as u8);\r\n    else if (u <= 0x7FF) {\r\n      store<u8>(idx++, (0xC0 |  (u >>> 6)       ) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else if (u <= 0xFFFF) {\r\n      store<u8>(idx++, (0xE0 |  (u >>> 12)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else if (u <= 0x1FFFFF) {\r\n      store<u8>(idx++, (0xF0 |  (u >>> 18)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else if (u <= 0x3FFFFFF) {\r\n      store<u8>(idx++, (0xF8 |  (u >>> 24)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else {\r\n      store<u8>(idx++, (0xFC |  (u >>> 30)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 24) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    }\r\n  }\r\n  store<u8>(idx, 0);\r\n  return ptr;\r\n}\r\n\r\nexport function readInt(ptr: usize): i32 {\r\n  return (\r\n     load<u8>(ptr    )        |\r\n    (load<u8>(ptr + 1) <<  8) |\r\n    (load<u8>(ptr + 2) << 16) |\r\n    (load<u8>(ptr + 3) << 24)\r\n  );\r\n}\r\n\r\nexport function readBuffer(ptr: usize, length: usize): Uint8Array {\r\n  var ret = new Uint8Array(length);\r\n  for (var i: usize = 0; i < length; ++i)\r\n    ret[i] = load<u8>(ptr + i);\r\n  return ret;\r\n}\r\n\r\nexport function readString(ptr: usize): string | null {\r\n  if (!ptr) return null;\r\n  var arr = new Array<i32>();\r\n  // the following is based on Emscripten's UTF8ArrayToString\r\n  var cp: u32;\r\n  var u1: u32, u2: u32, u3: u32, u4: u32, u5: u32;\r\n  while (cp = load<u8>(ptr++)) {\r\n    if (!(cp & 0x80)) {\r\n      arr.push(cp);\r\n      continue;\r\n    }\r\n    u1 = load<u8>(ptr++) & 63;\r\n    if ((cp & 0xE0) == 0xC0) {\r\n      arr.push(((cp & 31) << 6) | u1);\r\n      continue;\r\n    }\r\n    u2 = load<u8>(ptr++) & 63;\r\n    if ((cp & 0xF0) == 0xE0) {\r\n      cp = ((cp & 15) << 12) | (u1 << 6) | u2;\r\n    } else {\r\n      u3 = load<u8>(ptr++) & 63;\r\n      if ((cp & 0xF8) == 0xF0) {\r\n        cp = ((cp & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\r\n      } else {\r\n        u4 = load<u8>(ptr++) & 63;\r\n        if ((cp & 0xFC) == 0xF8) {\r\n          cp = ((cp & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;\r\n        } else {\r\n          u5 = load<u8>(ptr++) & 63;\r\n          cp = ((cp & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;\r\n        }\r\n      }\r\n    }\r\n    // if (cp < 0x10000) {\r\n    //   arr.push(cp);\r\n    // } else {\r\n    //   var ch = cp - 0x10000;\r\n    //   arr.push(0xD800 | (ch >> 10));\r\n    //   arr.push(0xDC00 | (ch & 0x3FF));\r\n    // }\r\n  }\r\n  // return String.fromCharCodes(arr);\r\n  return String.fromCodePoints(arr);\r\n}\r\n\r\n/** Result structure of {@link Module#toBinary}. */\r\nclass Binary {\r\n  /** WebAssembly binary. */\r\n  output: Uint8Array;\r\n  /** Source map, if generated. */\r\n  sourceMap: string | null;\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/module.ts","import {\r\n  Range\r\n} from \"./ast\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  diagnosticCodeToString\r\n} from \"./diagnosticMessages.generated\";\r\n\r\nimport {\r\n  CharCode,\r\n  isLineBreak\r\n} from \"./util/charcode\";\r\n\r\nexport {\r\n  DiagnosticCode,\r\n  diagnosticCodeToString\r\n} from \"./diagnosticMessages.generated\";\r\n\r\nexport enum DiagnosticCategory {\r\n  INFO,\r\n  WARNING,\r\n  ERROR\r\n}\r\n\r\nexport function diagnosticCategoryToString(category: DiagnosticCategory): string {\r\n  switch (category) {\r\n    case DiagnosticCategory.INFO: return \"INFO\";\r\n    case DiagnosticCategory.WARNING: return \"WARNING\";\r\n    case DiagnosticCategory.ERROR: return \"ERROR\";\r\n    default: return \"\";\r\n  }\r\n}\r\n\r\nconst colorBlue: string = \"\\u001b[93m\";\r\nconst colorYellow: string = \"\\u001b[93m\";\r\nconst colorRed: string = \"\\u001b[91m\";\r\nconst colorReset: string = \"\\u001b[0m\";\r\n\r\nexport function diagnosticCategoryToColor(category: DiagnosticCategory): string {\r\n  switch (category) {\r\n    case DiagnosticCategory.INFO: return colorBlue;\r\n    case DiagnosticCategory.WARNING: return colorYellow;\r\n    case DiagnosticCategory.ERROR: return colorRed;\r\n    default: return \"\";\r\n  }\r\n}\r\n\r\nexport class DiagnosticMessage {\r\n\r\n  code: i32;\r\n  category: DiagnosticCategory;\r\n  message: string;\r\n  range: Range | null = null;\r\n\r\n  constructor(code: i32, category: DiagnosticCategory, message: string) {\r\n    this.code = code;\r\n    this.category = category;\r\n    this.message = message;\r\n  }\r\n\r\n  static create(code: DiagnosticCode, category: DiagnosticCategory, arg0: string | null = null, arg1: string | null = null): DiagnosticMessage {\r\n    var message = diagnosticCodeToString(code);\r\n    if (arg0 != null)\r\n      message = message.replace(\"{0}\", arg0);\r\n    if (arg1 != null)\r\n      message = message.replace(\"{1}\", arg1);\r\n    return new DiagnosticMessage(code, category, message);\r\n  }\r\n\r\n  static createInfo(code: DiagnosticCode, arg0: string | null = null, arg1: string | null = null): DiagnosticMessage {\r\n    return DiagnosticMessage.create(code, DiagnosticCategory.INFO, arg0, arg1);\r\n  }\r\n\r\n  static createWarning(code: DiagnosticCode, arg0: string | null = null, arg1: string | null = null): DiagnosticMessage {\r\n    return DiagnosticMessage.create(code, DiagnosticCategory.WARNING, arg0, arg1);\r\n  }\r\n\r\n  static createError(code: DiagnosticCode, arg0: string | null = null, arg1: string | null = null): DiagnosticMessage {\r\n    return DiagnosticMessage.create(code, DiagnosticCategory.ERROR, arg0, arg1);\r\n  }\r\n\r\n  withRange(range: Range): this {\r\n    this.range = range;\r\n    return this;\r\n  }\r\n\r\n  toString(): string {\r\n    if (this.range)\r\n      return diagnosticCategoryToString(this.category) + \" \" + this.code.toString(10) + \": \\\"\" + this.message + \"\\\" in \" + this.range.source.normalizedPath + \" @ \" + this.range.start.toString(10) + \",\" + this.range.end.toString(10);\r\n    return diagnosticCategoryToString(this.category) + \" \" + this.code.toString(10) + \": \" + this.message;\r\n  }\r\n}\r\n\r\nexport function formatDiagnosticMessage(message: DiagnosticMessage, useColors: bool = false, showContext: bool = false): string {\r\n  // format context first (uses same string builder)\r\n  var context = \"\";\r\n  if (message.range && showContext)\r\n    context = formatDiagnosticContext(message.range, useColors);\r\n\r\n  // general information\r\n  var sb: string[] = [];\r\n  if (useColors) sb.push(diagnosticCategoryToColor(message.category));\r\n  sb.push(diagnosticCategoryToString(message.category));\r\n  if (useColors) sb.push(colorReset);\r\n  sb.push(message.code < 1000 ? \" AS\" : \" TS\");\r\n  sb.push(message.code.toString(10));\r\n  sb.push(\": \");\r\n  sb.push(message.message);\r\n\r\n  // range information if available\r\n  if (message.range) {\r\n    var range = message.range;\r\n    var text = range.source.text;\r\n    if (showContext) {\r\n      sb.push(\"\\n\");\r\n      sb.push(context);\r\n    }\r\n    sb.push(\"\\n\");\r\n    sb.push(\" in \");\r\n    sb.push(range.source.normalizedPath);\r\n    sb.push(\"(\");\r\n    sb.push(range.line.toString(10));\r\n    sb.push(\",\");\r\n    sb.push(range.column.toString(10));\r\n    sb.push(\")\");\r\n  }\r\n  return sb.join(\"\");\r\n}\r\n\r\nexport function formatDiagnosticContext(range: Range, useColors: bool = false): string {\r\n  var text = range.source.text;\r\n  var len = text.length;\r\n  var start = range.start;\r\n  var end = range.end;\r\n  while (start > 0 && !isLineBreak(text.charCodeAt(start - 1)))\r\n    start--;\r\n  while (end < len && !isLineBreak(text.charCodeAt(end)))\r\n    end++;\r\n  var sb: string[] = [\r\n    \"\\n \",\r\n    text.substring(start, end),\r\n    \"\\n \"\r\n  ];\r\n  while (start < range.start) {\r\n    sb.push(\" \");\r\n    start++;\r\n  }\r\n  if (useColors) sb.push(colorRed);\r\n  if (range.start == range.end) {\r\n    sb.push(\"^\");\r\n  } else while (start++ < range.end)\r\n    sb.push(\"~\");\r\n  if (useColors) sb.push(colorReset);\r\n  return sb.join(\"\");\r\n}\r\n\r\nexport abstract class DiagnosticEmitter {\r\n\r\n  diagnostics: DiagnosticMessage[];\r\n  // silentDiagnostics: bool = false;\r\n\r\n  constructor(diagnostics: DiagnosticMessage[] | null = null) {\r\n    this.diagnostics = diagnostics ? <DiagnosticMessage[]>diagnostics : new Array();\r\n  }\r\n\r\n  emitDiagnostic(code: DiagnosticCode, category: DiagnosticCategory, range: Range, arg0: string | null = null, arg1: string | null = null) {\r\n    var message = DiagnosticMessage.create(code, category, arg0, arg1).withRange(range);\r\n    this.diagnostics.push(message);\r\n    // console.log(formatDiagnosticMessage(message, true, true) + \"\\n\"); // temporary\r\n    // console.log(<string>new Error(\"stack\").stack);\r\n  }\r\n\r\n  error(code: DiagnosticCode, range: Range, arg0: string | null = null, arg1: string | null = null): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, arg0, arg1);\r\n  }\r\n\r\n  info(code: DiagnosticCode, range: Range, arg0: string | null = null, arg1: string | null = null): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, arg0, arg1);\r\n  }\r\n\r\n  warning(code: DiagnosticCode, range: Range, arg0: string | null = null, arg1: string | null = null): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, arg0, arg1);\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/diagnostics.ts","import {\r\n  Options\r\n} from \"./compiler\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticMessage,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Type,\r\n  typesToString\r\n} from \"./types\";\r\n\r\nimport {\r\n  ModifierKind,\r\n  Node,\r\n  NodeKind,\r\n  Source,\r\n  Range,\r\n  TypeNode,\r\n  TypeParameter,\r\n  Decorator,\r\n  DecoratorKind,\r\n\r\n  Expression,\r\n  AssertionExpression,\r\n  ElementAccessExpression,\r\n  IdentifierExpression,\r\n  LiteralExpression,\r\n  LiteralKind,\r\n  ParenthesizedExpression,\r\n  PropertyAccessExpression,\r\n  StringLiteralExpression,\r\n  SuperExpression,\r\n  ThisExpression,\r\n  CallExpression,\r\n  NewExpression,\r\n\r\n  Statement,\r\n  ClassDeclaration,\r\n  DeclarationStatement,\r\n  EnumDeclaration,\r\n  EnumValueDeclaration,\r\n  ExportMember,\r\n  ExportStatement,\r\n  FieldDeclaration,\r\n  FunctionDeclaration,\r\n  ImportDeclaration,\r\n  ImportStatement,\r\n  InterfaceDeclaration,\r\n  MethodDeclaration,\r\n  NamespaceDeclaration,\r\n  TypeDeclaration,\r\n  VariableLikeDeclarationStatement,\r\n  VariableDeclaration,\r\n  VariableStatement,\r\n\r\n  hasDecorator,\r\n  hasModifier,\r\n  mangleInternalName,\r\n  BinaryExpression\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Module,\r\n  NativeType,\r\n  ExpressionRef,\r\n  FunctionRef,\r\n} from \"./module\";\r\n\r\n/** Path delimiter inserted between file system levels. */\r\nexport const PATH_DELIMITER = \"/\";\r\n/** Substitution used to indicate the parent directory. */\r\nexport const PARENT_SUBST = \"..\";\r\n/** Function name prefix used for getters. */\r\nexport const GETTER_PREFIX = \"get:\";\r\n/** Function name prefix used for setters. */\r\nexport const SETTER_PREFIX = \"set:\";\r\n/** Delimiter used between class names and instance members. */\r\nexport const INSTANCE_DELIMITER = \"#\";\r\n/** Delimiter used between class and namespace names and static members. */\r\nexport const STATIC_DELIMITER = \".\";\r\n/** Substitution used to indicate a library directory. */\r\nexport const LIBRARY_SUBST = \"(lib)\";\r\n/** Library directory prefix. */\r\nexport const LIBRARY_PREFIX = LIBRARY_SUBST + PATH_DELIMITER;\r\n\r\nclass QueuedExport {\r\n  isReExport: bool;\r\n  referencedName: string;\r\n  member: ExportMember;\r\n}\r\n\r\nclass QueuedImport {\r\n  internalName: string;\r\n  referencedName: string;\r\n  referencedNameAlt: string;\r\n  declaration: ImportDeclaration;\r\n}\r\n\r\nconst noTypesYet = new Map<string,Type>();\r\n\r\n/** Represents an AssemblyScript program. */\r\nexport class Program extends DiagnosticEmitter {\r\n\r\n  /** Array of source files. */\r\n  sources: Source[];\r\n  /** Diagnostic offset used where sequentially obtaining the next diagnostic. */\r\n  diagnosticsOffset: i32 = 0;\r\n  /** Compiler options. */\r\n  options: Options;\r\n  /** Elements by internal name. */\r\n  elements: Map<string,Element> = new Map();\r\n  /** Types by internal name. */\r\n  types: Map<string,Type> = noTypesYet;\r\n  /** Declared type aliases. */\r\n  typeAliases: Map<string,TypeNode> = new Map();\r\n  /** Exports of individual files by exported internal name. Not global exports. */\r\n  exports: Map<string,Element> = new Map();\r\n\r\n  /** Constructs a new program, optionally inheriting parser diagnostics. */\r\n  constructor(diagnostics: DiagnosticMessage[] | null = null) {\r\n    super(diagnostics);\r\n    this.sources = [];\r\n  }\r\n\r\n  /** Initializes the program and its elements prior to compilation. */\r\n  initialize(options: Options): void {\r\n    this.options = options;\r\n\r\n    this.types = new Map([\r\n      [\"i8\", Type.i8],\r\n      [\"i16\", Type.i16],\r\n      [\"i32\", Type.i32],\r\n      [\"i64\", Type.i64],\r\n      [\"isize\", options.isizeType],\r\n      [\"u8\", Type.u8],\r\n      [\"u16\", Type.u16],\r\n      [\"u32\", Type.u32],\r\n      [\"u64\", Type.u64],\r\n      [\"usize\", options.usizeType],\r\n      [\"bool\", Type.bool],\r\n      [\"f32\", Type.f32],\r\n      [\"f64\", Type.f64],\r\n      [\"void\", Type.void],\r\n      [\"number\", Type.f64],\r\n      [\"boolean\", Type.bool]\r\n    ]);\r\n\r\n    var queuedExports = new Map<string,QueuedExport>();\r\n    var queuedImports = new Array<QueuedImport>();\r\n    var queuedDerivedClasses = new Array<ClassPrototype>();\r\n\r\n    // build initial lookup maps of internal names to declarations\r\n    for (var i = 0, k = this.sources.length; i < k; ++i) {\r\n      var source = this.sources[i];\r\n      var statements = source.statements;\r\n      for (var j = 0, l = statements.length; j < l; ++j) {\r\n        var statement = statements[j];\r\n        switch (statement.kind) {\r\n\r\n          case NodeKind.CLASSDECLARATION:\r\n            this.initializeClass(<ClassDeclaration>statement, queuedDerivedClasses);\r\n            break;\r\n\r\n          case NodeKind.ENUMDECLARATION:\r\n            this.initializeEnum(<EnumDeclaration>statement);\r\n            break;\r\n\r\n          case NodeKind.EXPORT:\r\n            this.initializeExports(<ExportStatement>statement, queuedExports);\r\n            break;\r\n\r\n          case NodeKind.FUNCTIONDECLARATION:\r\n            this.initializeFunction(<FunctionDeclaration>statement);\r\n            break;\r\n\r\n          case NodeKind.IMPORT:\r\n            this.initializeImports(<ImportStatement>statement, queuedExports, queuedImports);\r\n            break;\r\n\r\n          case NodeKind.INTERFACEDECLARATION:\r\n            this.initializeInterface(<InterfaceDeclaration>statement);\r\n            break;\r\n\r\n          case NodeKind.NAMESPACEDECLARATION:\r\n            this.initializeNamespace(<NamespaceDeclaration>statement, queuedDerivedClasses, null);\r\n            break;\r\n\r\n          case NodeKind.TYPEDECLARATION:\r\n            this.initializeTypeAlias(<TypeDeclaration>statement);\r\n            break;\r\n\r\n          case NodeKind.VARIABLE:\r\n            this.initializeVariables(<VariableStatement>statement);\r\n            break;\r\n        }\r\n      }\r\n    }\r\n\r\n    var element: Element | null;\r\n\r\n    // queued imports should be resolvable now through traversing exports and queued exports\r\n    for (i = 0; i < queuedImports.length;) {\r\n      var queuedImport = queuedImports[i];\r\n      element = this.tryResolveImport(queuedImport.referencedName, queuedExports);\r\n      if (element) {\r\n        this.elements.set(queuedImport.internalName, element);\r\n        queuedImports.splice(i, 1);\r\n      } else {\r\n        element = this.tryResolveImport(queuedImport.referencedNameAlt, queuedExports);\r\n        if (element) {\r\n          this.elements.set(queuedImport.internalName, element);\r\n          queuedImports.splice(i, 1);\r\n        } else {\r\n          this.error(DiagnosticCode.Module_0_has_no_exported_member_1, queuedImport.declaration.range, (<ImportStatement>queuedImport.declaration.parent).path.value, queuedImport.declaration.externalName.text);\r\n          ++i;\r\n        }\r\n      }\r\n    }\r\n\r\n    // queued exports should be resolvable now that imports are finalized\r\n    for (var [exportName, queuedExport] of queuedExports) {\r\n      var currentExport: QueuedExport | null = queuedExport; // nullable below\r\n      do {\r\n        if (currentExport.isReExport) {\r\n          if (element = this.exports.get(currentExport.referencedName)) {\r\n            this.setExportAndCheckLibrary(exportName, element, currentExport.member.externalName);\r\n            break;\r\n          }\r\n          currentExport = queuedExports.get(currentExport.referencedName);\r\n          if (!currentExport)\r\n            this.error(DiagnosticCode.Module_0_has_no_exported_member_1, queuedExport.member.externalName.range, (<StringLiteralExpression>(<ExportStatement>queuedExport.member.parent).path).value, queuedExport.member.externalName.text);\r\n        } else {\r\n          if (\r\n            (element = this.elements.get(currentExport.referencedName)) ||      // normal export\r\n            (element = this.elements.get(currentExport.member.name.text)) // library re-export\r\n          )\r\n            this.setExportAndCheckLibrary(exportName, element, currentExport.member.externalName);\r\n          else\r\n            this.error(DiagnosticCode.Cannot_find_name_0, queuedExport.member.range, queuedExport.member.name.text);\r\n          break;\r\n        }\r\n      } while (currentExport);\r\n    }\r\n\r\n    // resolve base prototypes of derived classes\r\n    for (i = 0, k = queuedDerivedClasses.length; i < k; ++i) {\r\n      var derivedDeclaration = queuedDerivedClasses[i].declaration;\r\n      assert(derivedDeclaration != null);\r\n      var derivedType = (<ClassDeclaration>derivedDeclaration).extendsType;\r\n      assert(derivedType != null);\r\n      var resolved = this.resolveIdentifier((<TypeNode>derivedType).name, null); // reports\r\n      if (resolved) {\r\n        if (resolved.element.kind != ElementKind.CLASS_PROTOTYPE) {\r\n          this.error(DiagnosticCode.A_class_may_only_extend_another_class, (<TypeNode>derivedType).range);\r\n          continue;\r\n        }\r\n        queuedDerivedClasses[i].basePrototype = <ClassPrototype>resolved.element;\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Tries to resolve an import by traversing exports and queued exports. */\r\n  private tryResolveImport(referencedName: string, queuedExports: Map<string,QueuedExport>): Element | null {\r\n    var element: Element | null;\r\n    do {\r\n      if (element = this.exports.get(referencedName))\r\n        return element;\r\n      var queuedExport = queuedExports.get(referencedName);\r\n      if (!queuedExport)\r\n        return null;\r\n      if (queuedExport.isReExport) {\r\n        referencedName = queuedExport.referencedName;\r\n        continue;\r\n      }\r\n      return this.elements.get(queuedExport.referencedName);\r\n    } while (true);\r\n  }\r\n\r\n  private checkInternalDecorators(element: Element, declaration: DeclarationStatement): void {\r\n    var isBuiltin: bool = hasDecorator(\"builtin\", declaration.decorators);\r\n    if (isBuiltin)\r\n      element.set(ElementFlags.BUILTIN);\r\n    if (\r\n      hasDecorator(\"global\", declaration.decorators) ||\r\n      (\r\n        declaration.range.source.isLibrary &&\r\n        element.is(ElementFlags.EXPORTED) &&\r\n        (\r\n          assert(declaration.parent).kind == NodeKind.SOURCE ||\r\n          (\r\n            <Node>declaration.parent).kind == NodeKind.VARIABLE &&\r\n            assert((<Node>declaration.parent).parent).kind == NodeKind.SOURCE\r\n          )\r\n        )\r\n    ) {\r\n      element.set(ElementFlags.GLOBAL);\r\n      if (this.elements.has(declaration.name.text))\r\n        this.error(DiagnosticCode.Duplicate_identifier_0, declaration.name.range, element.internalName);\r\n      else {\r\n        this.elements.set(declaration.name.text, element);\r\n        this.exports.set(declaration.name.text, element);\r\n        if (isBuiltin)\r\n          element.internalName = declaration.name.text;\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeClass(declaration: ClassDeclaration, queuedDerivedClasses: ClassPrototype[], namespace: Element | null = null): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (this.elements.has(internalName)) {\r\n      this.error(DiagnosticCode.Duplicate_identifier_0, declaration.name.range, internalName);\r\n      return;\r\n    }\r\n    var prototype = new ClassPrototype(this, declaration.name.text, internalName, declaration);\r\n    prototype.namespace = namespace;\r\n    this.elements.set(internalName, prototype);\r\n\r\n    this.checkInternalDecorators(prototype, declaration);\r\n\r\n    if (hasDecorator(\"unmanaged\", declaration.decorators)) {\r\n      prototype.isUnmanaged = true;\r\n      if (declaration.implementsTypes && declaration.implementsTypes.length)\r\n        this.error(DiagnosticCode.Structs_cannot_implement_interfaces, Range.join(declaration.name.range, declaration.implementsTypes[declaration.implementsTypes.length - 1].range));\r\n    } else if (declaration.implementsTypes.length)\r\n      throw new Error(\"not implemented\");\r\n\r\n    // remember classes that extend another one\r\n    if (declaration.extendsType)\r\n      queuedDerivedClasses.push(prototype);\r\n\r\n    // add as namespace member if applicable\r\n    if (namespace) {\r\n      if (namespace.members) {\r\n        if (namespace.members.has(declaration.name.text)) {\r\n          this.error(DiagnosticCode.Duplicate_identifier_0, declaration.name.range, internalName);\r\n          return;\r\n        }\r\n      } else\r\n        namespace.members = new Map();\r\n      namespace.members.set(declaration.name.text, prototype);\r\n\r\n    // otherwise add to file-level exports if exported\r\n    } else if (prototype.is(ElementFlags.EXPORTED)) {\r\n      if (this.exports.has(internalName)) {\r\n        this.error(DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0, declaration.name.range, internalName);\r\n        return;\r\n      }\r\n      this.exports.set(internalName, prototype);\r\n    }\r\n\r\n    // initialize members\r\n    var memberDeclarations = declaration.members;\r\n    for (var i = 0, k = memberDeclarations.length; i < k; ++i) {\r\n      var memberDeclaration = memberDeclarations[i];\r\n      switch (memberDeclaration.kind) {\r\n\r\n        case NodeKind.FIELDDECLARATION:\r\n          this.initializeField(<FieldDeclaration>memberDeclaration, prototype);\r\n          break;\r\n\r\n        case NodeKind.METHODDECLARATION:\r\n          var isGetter: bool;\r\n          if ((isGetter = hasModifier(ModifierKind.GET, memberDeclaration.modifiers)) || hasModifier(ModifierKind.SET, memberDeclaration.modifiers))\r\n            this.initializeAccessor(<MethodDeclaration>memberDeclaration, prototype, isGetter);\r\n          else\r\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, prototype);\r\n          break;\r\n\r\n        default:\r\n          throw new Error(\"class member expected\");\r\n      }\r\n    }\r\n\r\n    // check and possibly register string type\r\n    if (prototype.is(ElementFlags.GLOBAL) && declaration.name.text === \"String\" && !this.types.has(\"string\")) {\r\n      var instance = prototype.resolve(null);\r\n      if (instance)\r\n        this.types.set(\"string\", instance.type);\r\n    }\r\n  }\r\n\r\n  private initializeField(declaration: FieldDeclaration, classPrototype: ClassPrototype): void {\r\n    var name = declaration.name.text;\r\n    var internalName = declaration.fileLevelInternalName;\r\n\r\n    // static fields become global variables\r\n    if (hasModifier(ModifierKind.STATIC, declaration.modifiers)) {\r\n      if (this.elements.has(internalName)) {\r\n        this.error(DiagnosticCode.Duplicate_identifier_0, declaration.name.range, internalName);\r\n        return;\r\n      }\r\n      if (classPrototype.members) {\r\n        if (classPrototype.members.has(name)) {\r\n          this.error(DiagnosticCode.Duplicate_identifier_0, declaration.name.range, internalName);\r\n          return;\r\n        }\r\n      } else\r\n        classPrototype.members = new Map();\r\n      var staticField = new Global(this, name, internalName, declaration, Type.void);\r\n      classPrototype.members.set(name, staticField);\r\n      this.elements.set(internalName, staticField);\r\n\r\n    // instance fields are remembered until resolved\r\n    } else {\r\n      if (classPrototype.instanceMembers) {\r\n        if (classPrototype.instanceMembers.has(name)) {\r\n          this.error(DiagnosticCode.Duplicate_identifier_0, declaration.name.range, internalName);\r\n          return;\r\n        }\r\n      } else\r\n        classPrototype.instanceMembers = new Map();\r\n      var instanceField = new FieldPrototype(classPrototype, name, internalName, declaration);\r\n      classPrototype.instanceMembers.set(name, instanceField);\r\n    }\r\n  }\r\n\r\n  private initializeMethod(declaration: MethodDeclaration, classPrototype: ClassPrototype): void {\r\n    var name = declaration.name.text;\r\n    var internalName = declaration.fileLevelInternalName;\r\n    var prototype: FunctionPrototype | null = null;\r\n\r\n    // static methods become global functions\r\n    if (hasModifier(ModifierKind.STATIC, declaration.modifiers)) {\r\n      assert(declaration.name.kind != NodeKind.CONSTRUCTOR);\r\n\r\n      if (this.elements.has(internalName)) {\r\n        this.error(DiagnosticCode.Duplicate_identifier_0, declaration.name.range, internalName);\r\n        return;\r\n      }\r\n      if (classPrototype.members) {\r\n        if (classPrototype.members.has(name)) {\r\n          this.error(DiagnosticCode.Duplicate_identifier_0, declaration.name.range, internalName);\r\n          return;\r\n        }\r\n      } else\r\n        classPrototype.members = new Map();\r\n      prototype = new FunctionPrototype(this, name, internalName, declaration, null);\r\n      classPrototype.members.set(name, prototype);\r\n      this.elements.set(internalName, prototype);\r\n\r\n    // instance methods are remembered until resolved\r\n    } else {\r\n      if (classPrototype.instanceMembers) {\r\n        if (classPrototype.instanceMembers.has(name)) {\r\n          this.error(DiagnosticCode.Duplicate_identifier_0, declaration.name.range, internalName);\r\n          return;\r\n        }\r\n      } else\r\n        classPrototype.instanceMembers = new Map();\r\n      prototype = new FunctionPrototype(this, name, internalName, declaration, classPrototype);\r\n      // if (classPrototype.isUnmanaged && instancePrototype.isAbstract) {\r\n      //   this.error( Unmanaged classes cannot declare abstract methods. );\r\n      // }\r\n      if (declaration.name.kind == NodeKind.CONSTRUCTOR) {\r\n        if (classPrototype.constructorPrototype)\r\n          this.error(DiagnosticCode.Multiple_constructor_implementations_are_not_allowed, declaration.name.range);\r\n        else {\r\n          prototype.set(ElementFlags.CONSTRUCTOR);\r\n          classPrototype.constructorPrototype = prototype;\r\n        }\r\n      } else\r\n        classPrototype.instanceMembers.set(name, prototype);\r\n    }\r\n\r\n    this.checkOperators(declaration.decorators, prototype, classPrototype);\r\n  }\r\n\r\n  private checkOperators(decorators: Decorator[] | null, prototype: FunctionPrototype, classPrototype: ClassPrototype) {\r\n    // handle operator annotations. operators are either instance methods taking a second argument of the\r\n    // instance's type or static methods taking two arguments of the instance's type. return values vary\r\n    // depending on the operation.\r\n    if (decorators) {\r\n      for (var i = 0, k = decorators.length; i < k; ++i) {\r\n        var decorator = decorators[i];\r\n        if (decorator.decoratorKind == DecoratorKind.OPERATOR) {\r\n          if (!prototype) {\r\n            this.error(DiagnosticCode.Operation_not_supported, decorator.range);\r\n            continue;\r\n          }\r\n          var numArgs = decorator.arguments && decorator.arguments.length || 0;\r\n          if (numArgs == 1) {\r\n            var firstArg = (<Expression[]>decorator.arguments)[0];\r\n            if (firstArg.kind == NodeKind.LITERAL && (<LiteralExpression>firstArg).literalKind == LiteralKind.STRING) {\r\n              switch ((<StringLiteralExpression>firstArg).value) {\r\n\r\n                case \"[]\":\r\n                  classPrototype.fnIndexedGet = prototype.simpleName;\r\n                  break;\r\n\r\n                case \"[]=\":\r\n                  classPrototype.fnIndexedSet = prototype.simpleName;\r\n                  break;\r\n\r\n                case \"+\":\r\n                  classPrototype.fnConcat = prototype.simpleName;\r\n                  break;\r\n\r\n                case \"==\":\r\n                  classPrototype.fnEquals = prototype.simpleName;\r\n                  break;\r\n\r\n                default:\r\n                  this.error(DiagnosticCode.Operation_not_supported, firstArg.range);\r\n              }\r\n            } else\r\n              this.error(DiagnosticCode.String_literal_expected, firstArg.range);\r\n          } else\r\n            this.error(DiagnosticCode.Expected_0_arguments_but_got_1, decorator.range, \"1\", numArgs.toString(0));\r\n        } else if (decorator.decoratorKind != DecoratorKind.CUSTOM) // methods support @operator only\r\n          this.error(DiagnosticCode.Operation_not_supported, decorator.range);\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeAccessor(declaration: MethodDeclaration, classPrototype: ClassPrototype, isGetter: bool): void {\r\n    var propertyName = declaration.name.text;\r\n    var internalPropertyName = declaration.fileLevelInternalName;\r\n\r\n    var propertyElement = this.elements.get(internalPropertyName);\r\n    if (propertyElement) {\r\n      if (propertyElement.kind != ElementKind.PROPERTY || (isGetter ? (<Property>propertyElement).getterPrototype : (<Property>propertyElement).setterPrototype)) {\r\n        this.error(DiagnosticCode.Duplicate_identifier_0, declaration.name.range, internalPropertyName);\r\n        return;\r\n      }\r\n    } else\r\n      propertyElement = new Property(this, propertyName, internalPropertyName, classPrototype);\r\n\r\n    var name = (isGetter ? GETTER_PREFIX : SETTER_PREFIX) + propertyName;\r\n\r\n    // static accessors become global functions\r\n    if (hasModifier(ModifierKind.STATIC, declaration.modifiers)) {\r\n      var internalStaticName = classPrototype.internalName + STATIC_DELIMITER + name;\r\n      if (this.elements.has(internalStaticName)) {\r\n        this.error(DiagnosticCode.Duplicate_identifier_0, declaration.name.range, internalStaticName);\r\n        return;\r\n      }\r\n      var staticPrototype = new FunctionPrototype(this, name, internalStaticName, declaration, null);\r\n      if (isGetter)\r\n        (<Property>propertyElement).getterPrototype = staticPrototype;\r\n      else\r\n        (<Property>propertyElement).setterPrototype = staticPrototype;\r\n      if (!classPrototype.members)\r\n        classPrototype.members = new Map();\r\n      classPrototype.members.set(propertyName, propertyElement); // checked above\r\n      this.elements.set(internalPropertyName, propertyElement);\r\n\r\n    // instance accessors are remembered until resolved\r\n    } else {\r\n      var internalInstanceName = classPrototype.internalName + INSTANCE_DELIMITER + name;\r\n      if (classPrototype.instanceMembers) {\r\n        if (classPrototype.instanceMembers.has(name)) {\r\n          this.error(DiagnosticCode.Duplicate_identifier_0, declaration.name.range, internalPropertyName);\r\n          return;\r\n        }\r\n      } else\r\n        classPrototype.instanceMembers = new Map();\r\n      var instancePrototype = new FunctionPrototype(this, name, internalInstanceName, declaration, classPrototype);\r\n      if (isGetter)\r\n        (<Property>propertyElement).getterPrototype = instancePrototype;\r\n      else\r\n        (<Property>propertyElement).setterPrototype = instancePrototype;\r\n      classPrototype.instanceMembers.set(name, propertyElement);\r\n      this.elements.set(internalPropertyName, propertyElement);\r\n    }\r\n  }\r\n\r\n  private initializeEnum(declaration: EnumDeclaration, namespace: Element | null = null): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (this.elements.has(internalName)) {\r\n      this.error(DiagnosticCode.Duplicate_identifier_0, declaration.name.range, internalName);\r\n      return;\r\n    }\r\n    var enm = new Enum(this, declaration.name.text, internalName, declaration);\r\n    enm.namespace = namespace;\r\n    this.elements.set(internalName, enm);\r\n\r\n    this.checkInternalDecorators(enm, declaration);\r\n\r\n    if (namespace) {\r\n      if (namespace.members) {\r\n        if (namespace.members.has(declaration.name.text)) {\r\n          this.error(DiagnosticCode.Duplicate_identifier_0, declaration.name.range, internalName);\r\n          return;\r\n        }\r\n      } else\r\n        namespace.members = new Map();\r\n      namespace.members.set(declaration.name.text, enm);\r\n    } else if (enm.is(ElementFlags.EXPORTED)) {\r\n      if (this.exports.has(internalName)) {\r\n        this.error(DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0, declaration.name.range, internalName);\r\n        return;\r\n      }\r\n      this.exports.set(internalName, enm);\r\n    }\r\n\r\n    var values = declaration.values;\r\n    for (var i = 0, k = values.length; i < k; ++i)\r\n      this.initializeEnumValue(values[i], enm);\r\n  }\r\n\r\n  private initializeEnumValue(declaration: EnumValueDeclaration, enm: Enum): void {\r\n    var name = declaration.name.text;\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (enm.members) {\r\n      if (enm.members.has(name)) {\r\n        this.error(DiagnosticCode.Duplicate_identifier_0, declaration.name.range, internalName);\r\n        return;\r\n      }\r\n    } else\r\n      enm.members = new Map();\r\n    var value = new EnumValue(enm, this, name, internalName, declaration);\r\n    enm.members.set(name, value);\r\n  }\r\n\r\n  private initializeExports(statement: ExportStatement, queuedExports: Map<string,QueuedExport>): void {\r\n    var members = statement.members;\r\n    for (var i = 0, k = members.length; i < k; ++i)\r\n      this.initializeExport(members[i], statement.internalPath, queuedExports);\r\n  }\r\n\r\n  private setExportAndCheckLibrary(name: string, element: Element, identifier: IdentifierExpression): void {\r\n    this.exports.set(name, element);\r\n    if (identifier.range.source.isLibrary) { // add global alias\r\n      if (this.elements.has(identifier.text))\r\n        this.error(DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0, identifier.range, identifier.text);\r\n      else {\r\n        element.internalName = identifier.text;\r\n        this.elements.set(identifier.text, element);\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeExport(member: ExportMember, internalPath: string | null, queuedExports: Map<string,QueuedExport>): void {\r\n    var externalName = member.range.source.internalPath + PATH_DELIMITER + member.externalName.text;\r\n    if (this.exports.has(externalName)) {\r\n      this.error(DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0, member.externalName.range, externalName);\r\n      return;\r\n    }\r\n    var referencedName: string;\r\n    var referencedElement: Element | null;\r\n    var queuedExport: QueuedExport | null;\r\n\r\n    // export local element\r\n    if (internalPath == null) {\r\n      referencedName = member.range.source.internalPath + PATH_DELIMITER + member.name.text;\r\n\r\n      // resolve right away if the element exists\r\n      if (referencedElement = this.elements.get(referencedName)) {\r\n        this.setExportAndCheckLibrary(externalName, referencedElement, member.externalName);\r\n        return;\r\n      }\r\n\r\n      // otherwise queue it\r\n      if (queuedExports.has(externalName)) {\r\n        this.error(DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0, member.externalName.range, externalName);\r\n        return;\r\n      }\r\n      queuedExport = new QueuedExport();\r\n      queuedExport.isReExport = false;\r\n      queuedExport.referencedName = referencedName; // -> internal name\r\n      queuedExport.member = member;\r\n      queuedExports.set(externalName, queuedExport);\r\n\r\n    // export external element\r\n    } else {\r\n      referencedName = (<string>internalPath) + PATH_DELIMITER + member.name.text;\r\n\r\n      // resolve right away if the export exists\r\n      if (referencedElement = this.elements.get(referencedName)) {\r\n        this.setExportAndCheckLibrary(externalName, referencedElement, member.externalName);\r\n        return;\r\n      }\r\n\r\n      // walk already known queued exports\r\n      var seen = new Set<QueuedExport>();\r\n      while (queuedExport = queuedExports.get(referencedName)) {\r\n        if (queuedExport.isReExport) {\r\n          if (referencedElement = this.exports.get(queuedExport.referencedName)) {\r\n            this.setExportAndCheckLibrary(externalName, referencedElement, member.externalName);\r\n            return;\r\n          }\r\n          referencedName = queuedExport.referencedName;\r\n          if (seen.has(queuedExport))\r\n            break;\r\n          seen.add(queuedExport);\r\n        } else {\r\n          if (referencedElement = this.elements.get(queuedExport.referencedName)) {\r\n            this.setExportAndCheckLibrary(externalName, referencedElement, member.externalName);\r\n            return;\r\n          }\r\n          break;\r\n        }\r\n      }\r\n\r\n      // otherwise queue it\r\n      if (queuedExports.has(externalName)) {\r\n        this.error(DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0, member.externalName.range, externalName);\r\n        return;\r\n      }\r\n      queuedExport = new QueuedExport();\r\n      queuedExport.isReExport = true;\r\n      queuedExport.referencedName = referencedName; // -> export name\r\n      queuedExport.member = member;\r\n      queuedExports.set(externalName, queuedExport);\r\n    }\r\n  }\r\n\r\n  private initializeFunction(declaration: FunctionDeclaration, namespace: Element | null = null): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (this.elements.has(internalName)) {\r\n      this.error(DiagnosticCode.Duplicate_identifier_0, declaration.name.range, internalName);\r\n      return;\r\n    }\r\n    var prototype = new FunctionPrototype(this, declaration.name.text, internalName, declaration, null);\r\n    prototype.namespace = namespace;\r\n    this.elements.set(internalName, prototype);\r\n\r\n    this.checkInternalDecorators(prototype, declaration);\r\n\r\n    if (namespace) {\r\n      if (namespace.members) {\r\n        if (namespace.members.has(declaration.name.text)) {\r\n          this.error(DiagnosticCode.Duplicate_identifier_0, declaration.name.range, internalName);\r\n          return;\r\n        }\r\n      } else\r\n        namespace.members = new Map();\r\n      namespace.members.set(declaration.name.text, prototype);\r\n    } else if (prototype.is(ElementFlags.EXPORTED)) {\r\n      if (this.exports.has(internalName)) {\r\n        this.error(DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0, declaration.name.range, internalName);\r\n        return;\r\n      }\r\n      this.exports.set(internalName, prototype);\r\n    }\r\n  }\r\n\r\n  private initializeImports(statement: ImportStatement, queuedExports: Map<string,QueuedExport>, queuedImports: QueuedImport[]): void {\r\n    var declarations = statement.declarations;\r\n    if (declarations) {\r\n      for (var i = 0, k = declarations.length; i < k; ++i)\r\n        this.initializeImport(declarations[i], statement.internalPath, queuedExports, queuedImports);\r\n    } else if (statement.namespaceName) {\r\n      var internalName = statement.range.source.internalPath + \"/\" + statement.namespaceName.text;\r\n      if (this.elements.has(internalName)) {\r\n        this.error(DiagnosticCode.Duplicate_identifier_0, statement.namespaceName.range, internalName);\r\n        return;\r\n      }\r\n      this.error(DiagnosticCode.Operation_not_supported, statement.range); // TODO\r\n    }\r\n  }\r\n\r\n  private initializeImport(declaration: ImportDeclaration, internalPath: string, queuedExports: Map<string,QueuedExport>, queuedImports: QueuedImport[]): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (this.elements.has(internalName)) {\r\n      this.error(DiagnosticCode.Duplicate_identifier_0, declaration.name.range, internalName);\r\n      return;\r\n    }\r\n\r\n    var referencedName = internalPath + PATH_DELIMITER + declaration.externalName.text;\r\n\r\n    // resolve right away if the exact export exists\r\n    var element: Element | null;\r\n    if (element = this.exports.get(referencedName)) {\r\n      this.elements.set(internalName, element);\r\n      return;\r\n    }\r\n\r\n    // otherwise queue it\r\n    var indexPart = PATH_DELIMITER + \"index\";\r\n    var queuedImport = new QueuedImport();\r\n    queuedImport.internalName = internalName;\r\n    if (internalPath.endsWith(indexPart)) {\r\n      queuedImport.referencedName = referencedName; // try exact first\r\n      queuedImport.referencedNameAlt = internalPath.substring(0, internalPath.length - indexPart.length + 1) + declaration.externalName.text;\r\n    } else {\r\n      queuedImport.referencedName = referencedName; // try exact first\r\n      queuedImport.referencedNameAlt = internalPath + indexPart + PATH_DELIMITER + declaration.externalName.text;\r\n    }\r\n    queuedImport.declaration = declaration;\r\n    queuedImports.push(queuedImport);\r\n  }\r\n\r\n  private initializeInterface(declaration: InterfaceDeclaration, namespace: Element | null = null): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (this.elements.has(internalName)) {\r\n      this.error(DiagnosticCode.Duplicate_identifier_0, declaration.name.range, internalName);\r\n      return;\r\n    }\r\n    var prototype = new InterfacePrototype(this, declaration.name.text, internalName, declaration);\r\n    prototype.namespace = namespace;\r\n    this.elements.set(internalName, prototype);\r\n\r\n    this.checkInternalDecorators(prototype, declaration);\r\n\r\n    if (namespace) {\r\n      if (namespace.members) {\r\n        if (namespace.members.has(prototype.internalName)) {\r\n          this.error(DiagnosticCode.Duplicate_identifier_0, declaration.name.range, internalName);\r\n          return;\r\n        }\r\n      } else\r\n        namespace.members = new Map();\r\n      namespace.members.set(prototype.internalName, prototype);\r\n    } else if (prototype.is(ElementFlags.EXPORTED)) {\r\n      if (this.exports.has(internalName)) {\r\n        this.error(DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0, declaration.name.range, internalName);\r\n        return;\r\n      }\r\n      this.exports.set(internalName, prototype);\r\n    }\r\n\r\n    var memberDeclarations = declaration.members;\r\n    for (var i = 0, k = memberDeclarations.length; i < k; ++i) {\r\n      var memberDeclaration = memberDeclarations[i];\r\n      switch (memberDeclaration.kind) {\r\n\r\n        case NodeKind.FIELDDECLARATION:\r\n          this.initializeField(<FieldDeclaration>memberDeclaration, prototype);\r\n          break;\r\n\r\n        case NodeKind.METHODDECLARATION:\r\n          var isGetter: bool;\r\n          if ((isGetter = hasModifier(ModifierKind.GET, memberDeclaration.modifiers)) || hasModifier(ModifierKind.SET, memberDeclaration.modifiers))\r\n            this.initializeAccessor(<MethodDeclaration>memberDeclaration, prototype, isGetter);\r\n          else\r\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, prototype);\r\n          break;\r\n\r\n        default:\r\n          throw new Error(\"interface member expected\");\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeNamespace(declaration: NamespaceDeclaration, queuedExtendingClasses: ClassPrototype[], parentNamespace: Element | null = null): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n\r\n    var namespace = this.elements.get(internalName);\r\n    if (!namespace) {\r\n      namespace = new Namespace(this, declaration.name.text, internalName, declaration);\r\n      namespace.namespace = parentNamespace;\r\n      this.elements.set(internalName, namespace);\r\n      this.checkInternalDecorators(namespace, declaration);\r\n    }\r\n\r\n    if (parentNamespace) {\r\n      if (parentNamespace.members) {\r\n        if (parentNamespace.members.has(declaration.name.text)) {\r\n          this.error(DiagnosticCode.Duplicate_identifier_0, declaration.name.range, internalName);\r\n          return;\r\n        }\r\n      } else\r\n        parentNamespace.members = new Map();\r\n      parentNamespace.members.set(declaration.name.text, namespace);\r\n    } else if (namespace.is(ElementFlags.EXPORTED)) {\r\n      if (this.exports.has(internalName)) {\r\n        this.error(DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0, declaration.name.range, internalName);\r\n        return;\r\n      }\r\n      this.exports.set(internalName, namespace);\r\n    }\r\n\r\n    var members = declaration.members;\r\n    for (var i = 0, k = members.length; i < k; ++i) {\r\n      switch (members[i].kind) {\r\n\r\n        case NodeKind.CLASSDECLARATION:\r\n          this.initializeClass(<ClassDeclaration>members[i], queuedExtendingClasses, namespace);\r\n          break;\r\n\r\n        case NodeKind.ENUMDECLARATION:\r\n          this.initializeEnum(<EnumDeclaration>members[i], namespace);\r\n          break;\r\n\r\n        case NodeKind.FUNCTIONDECLARATION:\r\n          this.initializeFunction(<FunctionDeclaration>members[i], namespace);\r\n          break;\r\n\r\n        case NodeKind.INTERFACEDECLARATION:\r\n          this.initializeInterface(<InterfaceDeclaration>members[i], namespace);\r\n          break;\r\n\r\n        case NodeKind.NAMESPACEDECLARATION:\r\n          this.initializeNamespace(<NamespaceDeclaration>members[i], queuedExtendingClasses, namespace);\r\n          break;\r\n\r\n        case NodeKind.TYPEDECLARATION:\r\n          // this.initializeTypeAlias(<TypeDeclaration>members[i], namespace);\r\n          // TODO: what about namespaced types?\r\n          this.error(DiagnosticCode.Operation_not_supported, members[i].range);\r\n          break;\r\n\r\n        case NodeKind.VARIABLE:\r\n          this.initializeVariables(<VariableStatement>members[i], namespace);\r\n          break;\r\n\r\n        default:\r\n          throw new Error(\"namespace member expected\");\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeTypeAlias(declaration: TypeDeclaration, namespace: Element | null = null): void {\r\n    // type aliases are program globals\r\n    // TODO: what about namespaced types?\r\n    var name = declaration.name.text;\r\n    if (this.types.has(name) || this.typeAliases.has(name)) {\r\n      this.error(DiagnosticCode.Duplicate_identifier_0, declaration.name.range, name);\r\n      return;\r\n    }\r\n    this.typeAliases.set(name, declaration.alias);\r\n  }\r\n\r\n  private initializeVariables(statement: VariableStatement, namespace: Element | null = null): void {\r\n    var declarations = statement.declarations;\r\n    for (var i = 0, k = declarations.length; i < k; ++i) {\r\n      var declaration = declarations[i];\r\n      var internalName = declaration.fileLevelInternalName;\r\n      if (this.elements.has(internalName)) {\r\n        this.error(DiagnosticCode.Duplicate_identifier_0, declaration.name.range, internalName);\r\n        continue;\r\n      }\r\n\r\n      var global = new Global(this, declaration.name.text, internalName, declaration, /* resolved later */ Type.void);\r\n      global.namespace = namespace;\r\n      this.elements.set(internalName, global);\r\n\r\n      this.checkInternalDecorators(global, declaration);\r\n\r\n      if (namespace) {\r\n        if (namespace.members) {\r\n          if (namespace.members.has(declaration.name.text)) {\r\n            this.error(DiagnosticCode.Duplicate_identifier_0, declaration.name.range, internalName);\r\n            continue;\r\n          }\r\n        } else\r\n          namespace.members = new Map();\r\n        namespace.members.set(declaration.name.text, global);\r\n      } else if (global.is(ElementFlags.EXPORTED)) {\r\n        if (this.exports.has(internalName))\r\n          this.error(DiagnosticCode.Duplicate_identifier_0, declaration.name.range, internalName);\r\n        else\r\n          this.exports.set(internalName, global);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Resolves a {@link TypeNode} to a concrete {@link Type}. */\r\n  resolveType(node: TypeNode, contextualTypeArguments: Map<string,Type> | null = null, reportNotFound: bool = true): Type | null {\r\n    var globalName = node.name.text;\r\n    var localName = node.range.source.internalPath + PATH_DELIMITER + node.name.text;\r\n\r\n    var element: Element | null;\r\n\r\n    // check file-global / program-global element\r\n    if ((element = this.elements.get(localName)) || (element = this.elements.get(globalName))) {\r\n      switch (element.kind) {\r\n        case ElementKind.CLASS_PROTOTYPE:\r\n          var instance = (<ClassPrototype>element).resolveInclTypeArguments(node.typeArguments, contextualTypeArguments, null); // reports\r\n          return instance ? instance.type : null;\r\n      }\r\n    }\r\n\r\n    // resolve parameters\r\n    var k = node.typeArguments.length;\r\n    var paramTypes = new Array<Type>(k);\r\n    for (var i = 0; i < k; ++i) {\r\n      var paramType = this.resolveType(node.typeArguments[i], contextualTypeArguments, reportNotFound);\r\n      if (!paramType)\r\n        return null;\r\n      paramTypes[i] = paramType;\r\n    }\r\n\r\n    if (k) { // can't be a placeholder if it has parameters\r\n      var instanceKey = typesToString(paramTypes);\r\n      if (instanceKey.length) {\r\n        localName += \"<\" + instanceKey + \">\";\r\n        globalName += \"<\" + instanceKey + \">\";\r\n      }\r\n    } else if (contextualTypeArguments) {\r\n      var placeholderType = contextualTypeArguments.get(globalName);\r\n      if (placeholderType)\r\n        return placeholderType;\r\n    }\r\n\r\n    var type: Type | null;\r\n\r\n    // check file-global / program-global type\r\n    if ((type = this.types.get(localName)) || (type = this.types.get(globalName)))\r\n      return type;\r\n\r\n    // check type alias\r\n    var alias = this.typeAliases.get(globalName);\r\n    if (alias && (type = this.resolveType(alias, null, reportNotFound)))\r\n      return type;\r\n\r\n    if (reportNotFound)\r\n      this.error(DiagnosticCode.Cannot_find_name_0, node.name.range, globalName);\r\n\r\n    return null;\r\n  }\r\n\r\n  /** Resolves an array of type parameters to concrete types. */\r\n  resolveTypeArguments(typeParameters: TypeParameter[], typeArgumentNodes: TypeNode[] | null, contextualTypeArguments: Map<string,Type> | null = null, alternativeReportNode: Node | null = null): Type[] | null {\r\n    var parameterCount = typeParameters.length;\r\n    var argumentCount = typeArgumentNodes ? typeArgumentNodes.length : 0;\r\n    if (parameterCount != argumentCount) {\r\n      if (argumentCount)\r\n        this.error(DiagnosticCode.Expected_0_type_arguments_but_got_1, Range.join((<TypeNode[]>typeArgumentNodes)[0].range, (<TypeNode[]>typeArgumentNodes)[argumentCount - 1].range), parameterCount.toString(10), argumentCount.toString(10));\r\n      else if (alternativeReportNode)\r\n        this.error(DiagnosticCode.Expected_0_type_arguments_but_got_1, alternativeReportNode.range.atEnd, parameterCount.toString(10), \"0\");\r\n      return null;\r\n    }\r\n    var typeArguments = new Array<Type>(parameterCount);\r\n    for (var i = 0; i < parameterCount; ++i) {\r\n      var type = this.resolveType((<TypeNode[]>typeArgumentNodes)[i], contextualTypeArguments, true); // reports\r\n      if (!type)\r\n        return null;\r\n      // TODO: check extendsType\r\n      typeArguments[i] = type;\r\n    }\r\n    return typeArguments;\r\n  }\r\n\r\n  /** Resolves an identifier to the element it refers to. */\r\n  resolveIdentifier(identifier: IdentifierExpression, contextualFunction: Function | null, contextualEnum: Enum | null = null): ResolvedElement | null {\r\n    var name = identifier.text;\r\n\r\n    var element: Element | null;\r\n    var namespace: Element | null;\r\n    var reference: Element | null;\r\n\r\n    // check siblings\r\n    if (contextualEnum) {\r\n\r\n      if (contextualEnum.members && (element = contextualEnum.members.get(name)) && element.kind == ElementKind.ENUMVALUE)\r\n        return (resolvedElement || (resolvedElement = new ResolvedElement())).set(element);\r\n\r\n    } else if (contextualFunction) {\r\n\r\n      // check locals\r\n      if (element = contextualFunction.flow.getScopedLocal(name))\r\n        return (resolvedElement || (resolvedElement = new ResolvedElement())).set(element);\r\n\r\n      // search contextual parent namespaces if applicable\r\n      if (namespace = contextualFunction.prototype.namespace) {\r\n        do {\r\n          if (element = this.elements.get(namespace.internalName + STATIC_DELIMITER + name))\r\n          // if ((namespace.members && (element = namespace.members.get(name))) || (element = this.elements.get(namespace.internalName + STATIC_DELIMITER + name)))\r\n            return (resolvedElement || (resolvedElement = new ResolvedElement())).set(element);\r\n        } while (namespace = namespace.namespace);\r\n      }\r\n    }\r\n\r\n    // search current file\r\n    if (element = this.elements.get(identifier.range.source.internalPath + PATH_DELIMITER + name))\r\n      return (resolvedElement || (resolvedElement = new ResolvedElement())).set(element);\r\n\r\n    // search global scope\r\n    if (element = this.elements.get(name))\r\n      return (resolvedElement || (resolvedElement = new ResolvedElement())).set(element);\r\n\r\n    this.error(DiagnosticCode.Cannot_find_name_0, identifier.range, name);\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a property access to the element it refers to. */\r\n  resolvePropertyAccess(propertyAccess: PropertyAccessExpression, contextualFunction: Function): ResolvedElement | null {\r\n    // start by resolving the lhs target (expression before the last dot)\r\n    var targetExpression = propertyAccess.expression;\r\n    if (!(resolvedElement = this.resolveExpression(targetExpression, contextualFunction)))\r\n      return null;\r\n    var target = resolvedElement.element;\r\n\r\n    // at this point we know exactly what the target is, so look up the element within\r\n    var propertyName = propertyAccess.property.text;\r\n    var targetType: Type;\r\n    var member: Element | null;\r\n\r\n    // Resolve variable-likes to their class type first\r\n    switch (target.kind) {\r\n\r\n      case ElementKind.GLOBAL:\r\n      case ElementKind.LOCAL:\r\n      case ElementKind.FIELD:\r\n        if (!(targetType = (<VariableLikeElement>target).type).classType) {\r\n          this.error(DiagnosticCode.Property_0_does_not_exist_on_type_1, propertyAccess.property.range, propertyName, targetType.toString());\r\n          return null;\r\n        }\r\n        target = <Class>targetType.classType;\r\n        break;\r\n\r\n      case ElementKind.PROPERTY:\r\n        var getter = assert((<Property>target).getterPrototype).resolve(); // reports\r\n        if (!getter)\r\n          return null;\r\n        if (!(targetType = getter.returnType).classType) {\r\n          this.error(DiagnosticCode.Property_0_does_not_exist_on_type_1, propertyAccess.property.range, propertyName, targetType.toString());\r\n          return null;\r\n        }\r\n        target = <Class>targetType.classType;\r\n        break;\r\n    }\r\n\r\n    // Look up the member within\r\n    switch (target.kind) {\r\n\r\n      case ElementKind.CLASS_PROTOTYPE:\r\n      case ElementKind.CLASS:\r\n        do {\r\n          if (target.members && (member = target.members.get(propertyName)))\r\n            return resolvedElement.set(member).withTarget(target, targetExpression);\r\n          // check inherited static members on the base prototype while target is a class prototype\r\n          if (target.kind == ElementKind.CLASS_PROTOTYPE) {\r\n            if ((<ClassPrototype>target).basePrototype)\r\n              target = <ClassPrototype>(<ClassPrototype>target).basePrototype;\r\n            else\r\n              break;\r\n          // or inherited instance members on the cbase class while target is a class instance\r\n          } else if (target.kind == ElementKind.CLASS) {\r\n            if ((<Class>target).base)\r\n              target = <Class>(<Class>target).base;\r\n            else\r\n              break;\r\n          } else\r\n            break;\r\n        } while (true);\r\n        break;\r\n\r\n      default: // enums or other namespace-like elements\r\n        if (target.members && (member = target.members.get(propertyName)))\r\n          return resolvedElement.set(member).withTarget(target, targetExpression);\r\n        break;\r\n    }\r\n\r\n    this.error(DiagnosticCode.Property_0_does_not_exist_on_type_1, propertyAccess.property.range, propertyName, target.internalName);\r\n    return null;\r\n  }\r\n\r\n  resolveElementAccess(elementAccess: ElementAccessExpression, contextualFunction: Function): ResolvedElement | null {\r\n    // start by resolving the lhs target (expression before the last dot)\r\n    var targetExpression = elementAccess.expression;\r\n    if (!(resolvedElement = this.resolveExpression(targetExpression, contextualFunction)))\r\n      return null;\r\n    var target = resolvedElement.element;\r\n    switch (target.kind) {\r\n\r\n      case ElementKind.GLOBAL:\r\n      case ElementKind.LOCAL:\r\n      case ElementKind.FIELD:\r\n        var type = (<VariableLikeElement>target).type;\r\n        if (type.classType) {\r\n          var indexedGetName = (target = type.classType).prototype.fnIndexedGet;\r\n          var indexedGet: Element | null;\r\n          if (indexedGetName != null && target.members && (indexedGet = target.members.get(indexedGetName)) && indexedGet.kind == ElementKind.FUNCTION_PROTOTYPE)\r\n            return resolvedElement.set(indexedGet).withTarget(type.classType, targetExpression);\r\n        }\r\n        break;\r\n    }\r\n    this.error(DiagnosticCode.Index_signature_is_missing_in_type_0, targetExpression.range, target.internalName);\r\n    return null;\r\n  }\r\n\r\n  resolveExpression(expression: Expression, contextualFunction: Function): ResolvedElement | null {\r\n    var classType: Class | null;\r\n\r\n    while (expression.kind == NodeKind.PARENTHESIZED)\r\n      expression = (<ParenthesizedExpression>expression).expression;\r\n\r\n    switch (expression.kind) {\r\n\r\n      case NodeKind.ASSERTION:\r\n        var type = this.resolveType((<AssertionExpression>expression).toType); // reports\r\n        if (type && (classType = type.classType))\r\n          return (resolvedElement || (resolvedElement = new ResolvedElement())).set(classType);\r\n        return null;\r\n\r\n      case NodeKind.BINARY:\r\n        // TODO: string concatenation, mostly\r\n        throw new Error(\"not implemented\");\r\n\r\n      case NodeKind.THIS: // -> Class\r\n        if (classType = contextualFunction.instanceMethodOf)\r\n          return (resolvedElement || (resolvedElement = new ResolvedElement())).set(classType);\r\n        this.error(DiagnosticCode._this_cannot_be_referenced_in_current_location, expression.range);\r\n        return null;\r\n\r\n      case NodeKind.SUPER: // -> Class\r\n        if ((classType = contextualFunction.instanceMethodOf) && (classType = classType.base))\r\n          return (resolvedElement || (resolvedElement = new ResolvedElement())).set(classType);\r\n        this.error(DiagnosticCode._super_can_only_be_referenced_in_a_derived_class, expression.range);\r\n        return null;\r\n\r\n      case NodeKind.IDENTIFIER:\r\n        return this.resolveIdentifier(<IdentifierExpression>expression, contextualFunction);\r\n\r\n      case NodeKind.PROPERTYACCESS:\r\n        return this.resolvePropertyAccess(<PropertyAccessExpression>expression, contextualFunction);\r\n\r\n      case NodeKind.ELEMENTACCESS:\r\n        return this.resolveElementAccess(<ElementAccessExpression>expression, contextualFunction);\r\n\r\n      case NodeKind.CALL:\r\n        var resolved = this.resolveExpression((<CallExpression>expression).expression, contextualFunction);\r\n        if (resolved) {\r\n          var element = resolved.element;\r\n          if (element && element.kind == ElementKind.FUNCTION_PROTOTYPE) {\r\n            var instance = (<FunctionPrototype>element).resolveInclTypeArguments((<CallExpression>expression).typeArguments, null, expression);\r\n            if (instance && instance.returnType.classType)\r\n              return (resolvedElement || (resolvedElement = new ResolvedElement())).set(instance.returnType.classType);\r\n          }\r\n        }\r\n        break;\r\n    }\r\n    this.error(DiagnosticCode.Operation_not_supported, expression.range);\r\n    return null;\r\n  }\r\n}\r\n\r\n/** Common result structure returned when calling any of the resolve functions on a {@link Program}. */\r\nexport class ResolvedElement {\r\n\r\n  /** The target element, if a property or element access */\r\n  target: Element | null;\r\n  /** The target element's expression, if a property or element access. */\r\n  targetExpression: Expression | null;\r\n  /** The element being accessed. */\r\n  element: Element;\r\n\r\n  /** Clears the target and sets the resolved element. */\r\n  set(element: Element): this {\r\n    this.target = null;\r\n    this.targetExpression = null;\r\n    this.element = element;\r\n    return this;\r\n  }\r\n\r\n  /** Sets the resolved target in addition to the previously set element. */\r\n  withTarget(target: Element, targetExpression: Expression): this {\r\n    this.target = target;\r\n    this.targetExpression = targetExpression;\r\n    return this;\r\n  }\r\n}\r\n\r\n// Cached result structure instance\r\nvar resolvedElement: ResolvedElement | null;\r\n\r\n/** Indicates the specific kind of an {@link Element}. */\r\nexport enum ElementKind {\r\n  /** A {@link Global}. */\r\n  GLOBAL,\r\n  /** A {@link Local}. */\r\n  LOCAL,\r\n  /** An {@link Enum}. */\r\n  ENUM,\r\n  /** An {@link EnumValue}. */\r\n  ENUMVALUE,\r\n  /** A {@link FunctionPrototype}. */\r\n  FUNCTION_PROTOTYPE,\r\n  /** A {@link Function}. */\r\n  FUNCTION,\r\n  /** A {@link ClassPrototype}. */\r\n  CLASS_PROTOTYPE,\r\n  /** A {@link Class}. */\r\n  CLASS,\r\n  /** An {@link InterfacePrototype}. */\r\n  INTERFACE_PROTOTYPE,\r\n  /** An {@link Interface}. */\r\n  INTERFACE,\r\n  /** A {@link FieldPrototype}. */\r\n  FIELD_PROTOTYPE,\r\n  /** A {@link Field}. */\r\n  FIELD,\r\n  /** A {@link Property}. */\r\n  PROPERTY,\r\n  /** A {@link Namespace}. */\r\n  NAMESPACE\r\n}\r\n\r\n/** Indicates traits of an {@link Element}. */\r\nexport enum ElementFlags {\r\n  /** No flags set. */\r\n  NONE = 0,\r\n  /** Is compiled. */\r\n  COMPILED = 1 << 0,\r\n  /** Is an import. */\r\n  IMPORTED = 1 << 1,\r\n  /** Is an export. */\r\n  EXPORTED = 1 << 2,\r\n  /** Is built-in. */\r\n  BUILTIN = 1 << 3,\r\n  /** Is declared. */\r\n  DECLARED = 1 << 4,\r\n  /** Is generic. */\r\n  GENERIC = 1 << 5,\r\n  /** Is constant. */\r\n  CONSTANT = 1 << 6,\r\n  /** Has a constant value and is therefore inlined. */\r\n  INLINED = 1 << 7,\r\n  /** Is instance member. */\r\n  INSTANCE = 1 << 8,\r\n  /** Is getter. */\r\n  GETTER = 1 << 9,\r\n  /** Is setter. */\r\n  SETTER = 1 << 10,\r\n  /** Is global. */\r\n  GLOBAL = 1 << 11,\r\n  /** Is read-only. */\r\n  READONLY = 1 << 12,\r\n  /** Is a public member. */\r\n  PUBLIC = 1 << 13,\r\n  /** Is a protected member. */\r\n  PROTECTED = 1 << 14,\r\n  /** Is a private member. */\r\n  PRIVATE = 1 << 15,\r\n  /** Is an abstract member. */\r\n  ABSTRACT = 1 << 16,\r\n  /** Is a constructor. */\r\n  CONSTRUCTOR = 1 << 17,\r\n  /** Is an unmanaged class with limited capabilites. */\r\n  UNMANAGED = 1 << 18,\r\n  /** Is scoped. */\r\n  SCOPED = 1 << 19,\r\n  /** Is the start function. */\r\n  START = 1 << 20\r\n}\r\n\r\n/** Base class of all program elements. */\r\nexport abstract class Element {\r\n\r\n  /** Specific element kind. */\r\n  kind: ElementKind;\r\n  /** Containing {@link Program}. */\r\n  program: Program;\r\n  /** Simple name. */\r\n  simpleName: string;\r\n  /** Internal name referring to this element. */\r\n  internalName: string;\r\n  /** Element flags. */\r\n  flags: ElementFlags = ElementFlags.NONE;\r\n  /** Namespaced member elements. */\r\n  members: Map<string,Element> | null = null;\r\n  /** Parent namespace, if applicable. */\r\n  namespace: Element | null = null;\r\n\r\n  /** Constructs a new element, linking it to its containing {@link Program}. */\r\n  protected constructor(program: Program, simpleName: string, internalName: string) {\r\n    this.program = program;\r\n    this.simpleName = simpleName;\r\n    this.internalName = internalName;\r\n  }\r\n\r\n  /** Tests if this element has a specific flag or flags. */\r\n  is(flag: ElementFlags): bool { return (this.flags & flag) == flag; }\r\n\r\n  /** Sets a specific flag or flags. */\r\n  set(flag: ElementFlags): void { this.flags |= flag; }\r\n}\r\n\r\n/** A namespace. */\r\nexport class Namespace extends Element {\r\n\r\n  // All elements have namespace semantics. This is an explicitly declared one.\r\n  kind = ElementKind.NAMESPACE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: NamespaceDeclaration; // more specific\r\n\r\n  /** Constructs a new namespace. */\r\n  constructor(program: Program, simpleName: string, internalName: string, declaration: NamespaceDeclaration) {\r\n    super(program, simpleName, internalName);\r\n    this.declaration = declaration;\r\n    if (this.declaration.modifiers) {\r\n      for (var i = 0, k = this.declaration.modifiers.length; i < k; ++i) {\r\n        switch (this.declaration.modifiers[i].modifierKind) {\r\n          case ModifierKind.IMPORT: this.set(ElementFlags.IMPORTED); break;\r\n          case ModifierKind.EXPORT: this.set(ElementFlags.EXPORTED); break;\r\n          case ModifierKind.DECLARE: this.set(ElementFlags.DECLARED); break;\r\n          default: throw new Error(\"unexpected modifier\");\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/** An enum. */\r\nexport class Enum extends Element {\r\n\r\n  kind = ElementKind.ENUM;\r\n\r\n  /** Declaration reference. */\r\n  declaration: EnumDeclaration;\r\n\r\n  /** Constructs a new enum. */\r\n  constructor(program: Program, simpleName: string, internalName: string, declaration: EnumDeclaration) {\r\n    super(program, simpleName, internalName);\r\n    this.declaration = declaration;\r\n    if (this.declaration.modifiers) {\r\n      for (var i = 0, k = this.declaration.modifiers.length; i < k; ++i) {\r\n        switch (this.declaration.modifiers[i].modifierKind) {\r\n          case ModifierKind.EXPORT: this.set(ElementFlags.EXPORTED); break;\r\n          case ModifierKind.IMPORT: this.set(ElementFlags.IMPORTED); break;\r\n          case ModifierKind.DECLARE: this.set(ElementFlags.DECLARED); break;\r\n          case ModifierKind.CONST: this.set(ElementFlags.CONSTANT); break;\r\n          default: throw new Error(\"unexpected modifier\");\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/** An enum value. */\r\nexport class EnumValue extends Element {\r\n\r\n  kind = ElementKind.ENUMVALUE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: EnumValueDeclaration;\r\n  /** Parent enum. */\r\n  enum: Enum;\r\n  /** Constant value, if applicable. */\r\n  constantValue: i32 = 0;\r\n\r\n  constructor(enm: Enum, program: Program, simpleName: string, internalName: string, declaration: EnumValueDeclaration) {\r\n    super(program, simpleName, internalName);\r\n    this.enum = enm;\r\n    this.declaration = declaration;\r\n  }\r\n}\r\n\r\nexport const enum ConstantValueKind {\r\n  NONE,\r\n  INTEGER,\r\n  FLOAT\r\n}\r\n\r\nexport class VariableLikeElement extends Element {\r\n\r\n  // kind varies\r\n\r\n  /** Declaration reference. */\r\n  declaration: VariableLikeDeclarationStatement;\r\n  /** Variable type. Is {@link Type.void} for type-inferred {@link Global}s before compilation. */\r\n  type: Type;\r\n  /** Constant value kind. */\r\n  constantValueKind: ConstantValueKind = ConstantValueKind.NONE;\r\n  /** Constant integer value, if applicable. */\r\n  constantIntegerValue: I64;\r\n  /** Constant float value, if applicable. */\r\n  constantFloatValue: f64;\r\n\r\n  withConstantIntegerValue(lo: i32, hi: i32): this {\r\n    this.constantValueKind = ConstantValueKind.INTEGER;\r\n    this.constantIntegerValue = i64_new(lo, hi);\r\n    this.set(ElementFlags.CONSTANT | ElementFlags.INLINED);\r\n    return this;\r\n  }\r\n\r\n  withConstantFloatValue(value: f64): this {\r\n    this.constantValueKind = ConstantValueKind.FLOAT;\r\n    this.constantFloatValue = value;\r\n    this.set(ElementFlags.CONSTANT | ElementFlags.INLINED);\r\n    return this;\r\n  }\r\n}\r\n\r\n/** A global variable. */\r\nexport class Global extends VariableLikeElement {\r\n\r\n  kind = ElementKind.GLOBAL;\r\n\r\n  constructor(program: Program, simpleName: string, internalName: string, declaration: VariableLikeDeclarationStatement, type: Type) {\r\n    super(program, simpleName, internalName);\r\n    this.declaration = declaration;\r\n    if (this.declaration.modifiers) {\r\n      for (var i = 0, k = this.declaration.modifiers.length; i < k; ++i) {\r\n        switch (this.declaration.modifiers[i].modifierKind) {\r\n          case ModifierKind.IMPORT: this.set(ElementFlags.IMPORTED); break;\r\n          case ModifierKind.EXPORT: this.set(ElementFlags.EXPORTED); break;\r\n          case ModifierKind.CONST: this.set(ElementFlags.CONSTANT); break;\r\n          case ModifierKind.LET: this.set(ElementFlags.SCOPED); break;\r\n          case ModifierKind.DECLARE: this.set(ElementFlags.DECLARED); break;\r\n          case ModifierKind.READONLY: this.set(this.declaration.initializer ? ElementFlags.CONSTANT | ElementFlags.READONLY : ElementFlags.READONLY); break;\r\n          case ModifierKind.PUBLIC:\r\n          case ModifierKind.PRIVATE:\r\n          case ModifierKind.PROTECTED:\r\n          case ModifierKind.STATIC: break; // static fields become globals\r\n          default: throw new Error(\"unexpected modifier\");\r\n        }\r\n      }\r\n    }\r\n    this.type = type; // resolved later if `void`\r\n  }\r\n}\r\n\r\n/** A function parameter. */\r\nexport class Parameter {\r\n\r\n  // not an Element on its own\r\n\r\n  /** Parameter name. */\r\n  name: string;\r\n  /** Parameter type. */\r\n  type: Type;\r\n  /** Parameter initializer. */\r\n  initializer: Expression | null;\r\n\r\n  /** Constructs a new function parameter. */\r\n  constructor(name: string, type: Type, initializer: Expression | null = null) {\r\n    this.name = name;\r\n    this.type = type;\r\n    this.initializer = initializer;\r\n  }\r\n}\r\n\r\n/** A function local. */\r\nexport class Local extends VariableLikeElement {\r\n\r\n  kind = ElementKind.LOCAL;\r\n\r\n  /** Local index. */\r\n  index: i32;\r\n\r\n  constructor(program: Program, simpleName: string, index: i32, type: Type) {\r\n    super(program, simpleName, simpleName);\r\n    this.index = index;\r\n    this.type = type;\r\n  }\r\n}\r\n\r\n/** A yet unresolved function prototype. */\r\nexport class FunctionPrototype extends Element {\r\n\r\n  kind = ElementKind.FUNCTION_PROTOTYPE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: FunctionDeclaration;\r\n  /** If an instance method, the class prototype reference. */\r\n  classPrototype: ClassPrototype | null;\r\n  /** Resolved instances. */\r\n  instances: Map<string,Function> = new Map();\r\n  /** Class type arguments, if a partially resolved method of a generic class. */\r\n  classTypeArguments: Type[] | null = null;\r\n\r\n  /** Constructs a new function prototype. */\r\n  constructor(program: Program, simpleName: string, internalName: string, declaration: FunctionDeclaration, classPrototype: ClassPrototype | null = null) {\r\n    super(program, simpleName, internalName);\r\n    this.declaration = declaration;\r\n    if (this.declaration.modifiers)\r\n      for (var i = 0, k = this.declaration.modifiers.length; i < k; ++i) {\r\n        switch (this.declaration.modifiers[i].modifierKind) {\r\n          case ModifierKind.IMPORT: this.set(ElementFlags.IMPORTED); break;\r\n          case ModifierKind.EXPORT: this.set(ElementFlags.EXPORTED); break;\r\n          case ModifierKind.DECLARE: this.set(ElementFlags.DECLARED); break;\r\n          case ModifierKind.GET: this.set(ElementFlags.GETTER); break;\r\n          case ModifierKind.SET: this.set(ElementFlags.SETTER); break;\r\n          case ModifierKind.STATIC:\r\n          case ModifierKind.ABSTRACT:\r\n          case ModifierKind.PRIVATE:\r\n          case ModifierKind.PROTECTED:\r\n          case ModifierKind.PUBLIC: break; // already handled\r\n          default: throw new Error(\"unexpected modifier\");\r\n        }\r\n      }\r\n    if (this.declaration.typeParameters.length)\r\n      this.set(ElementFlags.GENERIC);\r\n    if (this.classPrototype = classPrototype)\r\n      this.set(ElementFlags.INSTANCE);\r\n  }\r\n\r\n  resolve(functionTypeArguments: Type[] | null = null, contextualTypeArguments: Map<string,Type> | null = null): Function | null {\r\n    var instanceKey = functionTypeArguments ? typesToString(functionTypeArguments) : \"\";\r\n    var instance = this.instances.get(instanceKey);\r\n    if (instance)\r\n      return instance;\r\n\r\n    var declaration = this.declaration;\r\n\r\n    // inherit contextual type arguments\r\n    var inheritedTypeArguments = contextualTypeArguments;\r\n    contextualTypeArguments = new Map();\r\n    if (inheritedTypeArguments)\r\n      for (var [inheritedName, inheritedType] of inheritedTypeArguments)\r\n        contextualTypeArguments.set(inheritedName, inheritedType);\r\n\r\n    var i: i32, k: i32;\r\n\r\n    // inherit class type arguments if a partially resolved instance method (classTypeArguments is set)\r\n    if (this.classTypeArguments) {\r\n      if (!this.classPrototype)\r\n        throw new Error(\"partially resolved instance method must reference its class prototype\");\r\n      var classDeclaration = (<ClassPrototype>this.classPrototype).declaration;\r\n      var classTypeParameters = classDeclaration.typeParameters;\r\n      if ((k = this.classTypeArguments.length) != classTypeParameters.length)\r\n        throw new Error(\"type argument count mismatch\");\r\n      for (i = 0; i < k; ++i)\r\n        contextualTypeArguments.set(classTypeParameters[i].name.text, this.classTypeArguments[i]);\r\n    }\r\n\r\n    // override call specific contextual type arguments\r\n    var functionTypeParameters = declaration.typeParameters;\r\n    if (functionTypeArguments && (k = functionTypeArguments.length)) {\r\n      if (k != functionTypeParameters.length)\r\n        throw new Error(\"type argument count mismatch\");\r\n      for (i = 0; i < k; ++i)\r\n        contextualTypeArguments.set(functionTypeParameters[i].name.text, functionTypeArguments[i]);\r\n    }\r\n\r\n    // resolve parameters\r\n    // TODO: 'this' type\r\n    k = declaration.parameters.length;\r\n    var parameters = new Array<Parameter>(k);\r\n    var parameterTypes = new Array<Type>(k);\r\n    var typeNode: TypeNode | null;\r\n    for (i = 0; i < k; ++i) {\r\n      var parameterDeclaration = declaration.parameters[i];\r\n      typeNode = assert(parameterDeclaration.type);\r\n      var parameterType = this.program.resolveType(typeNode, contextualTypeArguments, true); // reports\r\n      if (parameterType) {\r\n        parameters[i] = new Parameter(parameterDeclaration.name.text, parameterType, parameterDeclaration.initializer);\r\n        parameterTypes[i] = parameterType;\r\n      } else\r\n        return null;\r\n    }\r\n\r\n    var internalName = this.internalName;\r\n    if (instanceKey.length)\r\n      internalName += \"<\" + instanceKey + \">\";\r\n    var classInstance: Class | null = null;\r\n    if (this.classPrototype) {\r\n      classInstance = this.classPrototype.resolve(this.classTypeArguments, contextualTypeArguments); // reports\r\n      if (!classInstance)\r\n        return null;\r\n    }\r\n\r\n    // resolve return type\r\n    // TODO: 'this' type\r\n    var returnType: Type;\r\n    if (this.is(ElementFlags.SETTER) || this.is(ElementFlags.CONSTRUCTOR)) {\r\n      returnType = Type.void; // not annotated\r\n    } else {\r\n      typeNode = assert(declaration.returnType);\r\n      var type = this.program.resolveType(<TypeNode>typeNode, contextualTypeArguments, true); // reports\r\n      if (type)\r\n        returnType = type;\r\n      else\r\n        return null;\r\n    }\r\n\r\n    instance = new Function(this, internalName, functionTypeArguments, parameters, returnType, classInstance);\r\n    instance.contextualTypeArguments = contextualTypeArguments;\r\n    this.instances.set(instanceKey, instance);\r\n    return instance;\r\n  }\r\n\r\n  resolveInclTypeArguments(typeArgumentNodes: TypeNode[] | null, contextualTypeArguments: Map<string,Type> | null, reportNode: Node): Function | null {\r\n    var resolvedTypeArguments: Type[] | null = null;\r\n    if (this.is(ElementFlags.GENERIC)) {\r\n      assert(typeArgumentNodes != null && typeArgumentNodes.length != 0);\r\n      resolvedTypeArguments = this.program.resolveTypeArguments(this.declaration.typeParameters, typeArgumentNodes, contextualTypeArguments, reportNode);\r\n      if (!resolvedTypeArguments)\r\n        return null;\r\n    }\r\n    return this.resolve(resolvedTypeArguments, contextualTypeArguments);\r\n  }\r\n\r\n  resolvePartial(classTypeArguments: Type[] | null): FunctionPrototype | null {\r\n    if (!this.classPrototype)\r\n      throw new Error(\"partially resolved instance method must reference its class prototype\");\r\n    if (classTypeArguments && classTypeArguments.length) {\r\n      var partialPrototype = new FunctionPrototype(this.program, this.simpleName, this.internalName, this.declaration, this.classPrototype);\r\n      partialPrototype.flags = this.flags;\r\n      partialPrototype.classTypeArguments = classTypeArguments;\r\n      return partialPrototype;\r\n    }\r\n    return this; // no need to clone\r\n  }\r\n\r\n  toString(): string { return this.simpleName; }\r\n}\r\n\r\n/** A resolved function. */\r\nexport class Function extends Element {\r\n\r\n  kind = ElementKind.FUNCTION;\r\n\r\n  /** Prototype reference. */\r\n  prototype: FunctionPrototype;\r\n  /** Concrete type arguments. */\r\n  typeArguments: Type[] | null;\r\n  /** Concrete function parameters. Excluding `this` if an instance method. */\r\n  parameters: Parameter[];\r\n  /** Concrete return type. */\r\n  returnType: Type;\r\n  /** If an instance method, the concrete class it is a member of. */\r\n  instanceMethodOf: Class | null;\r\n  /** Map of locals by name. */\r\n  locals: Map<string,Local> = new Map();\r\n  /** List of additional non-parameter locals. */\r\n  additionalLocals: Type[] = [];\r\n  /** Current break context label. */\r\n  breakContext: string | null = null;\r\n  /** Contextual type arguments. */\r\n  contextualTypeArguments: Map<string,Type> | null;\r\n  /** Current control flow. */\r\n  flow: Flow;\r\n  /** Remembered debug locations. */\r\n  debugLocations: Range[] | null = null;\r\n\r\n  private nextBreakId: i32 = 0;\r\n  private breakStack: i32[] | null = null;\r\n\r\n  /** Constructs a new concrete function. */\r\n  constructor(prototype: FunctionPrototype, internalName: string, typeArguments: Type[] | null, parameters: Parameter[], returnType: Type, instanceMethodOf: Class | null) {\r\n    super(prototype.program, prototype.simpleName, internalName);\r\n    this.prototype = prototype;\r\n    this.typeArguments = typeArguments;\r\n    this.parameters = parameters;\r\n    this.returnType = returnType;\r\n    this.instanceMethodOf = instanceMethodOf;\r\n    this.flags = prototype.flags;\r\n    if (!(prototype.is(ElementFlags.BUILTIN) || prototype.is(ElementFlags.DECLARED))) {\r\n      var localIndex = 0;\r\n      if (instanceMethodOf) {\r\n        assert(this.is(ElementFlags.INSTANCE)); // internal error\r\n        this.locals.set(\"this\", new Local(prototype.program, \"this\", localIndex++, instanceMethodOf.type));\r\n        if (instanceMethodOf.contextualTypeArguments) {\r\n          if (!this.contextualTypeArguments)\r\n            this.contextualTypeArguments = new Map();\r\n          for (var [inheritedName, inheritedType] of instanceMethodOf.contextualTypeArguments)\r\n            this.contextualTypeArguments.set(inheritedName, inheritedType);\r\n        }\r\n      } else\r\n        assert(!this.is(ElementFlags.INSTANCE)); // internal error\r\n      for (var i = 0, k = parameters.length; i < k; ++i) {\r\n        var parameter = parameters[i];\r\n        var parameterName = assert(parameter.name, \"parameter must be named\"); // not a builtin or declared\r\n        this.locals.set(parameterName, new Local(prototype.program, parameterName, localIndex++, parameter.type));\r\n      }\r\n    }\r\n    this.flow = Flow.create(this);\r\n  }\r\n\r\n  /** Adds a local of the specified type, with an optional name. */\r\n  addLocal(type: Type, name: string | null = null): Local {\r\n    // if it has a name, check previously as this method will throw otherwise\r\n    var localIndex = this.parameters.length + this.additionalLocals.length;\r\n    if (this.is(ElementFlags.INSTANCE)) localIndex++; // plus 'this'\r\n    var local = new Local(this.prototype.program, name ? name : \"anonymous$\" + localIndex.toString(10), localIndex, type);\r\n    if (name) {\r\n      if (this.locals.has(name))\r\n        throw new Error(\"duplicate local name\");\r\n      this.locals.set(name, local);\r\n    }\r\n    this.additionalLocals.push(type);\r\n    return local;\r\n  }\r\n\r\n  private tempI32s: Local[] | null = null;\r\n  private tempI64s: Local[] | null = null;\r\n  private tempF32s: Local[] | null = null;\r\n  private tempF64s: Local[] | null = null;\r\n\r\n  /** Gets a free temporary local of the specified type. */\r\n  getTempLocal(type: Type): Local {\r\n    var temps: Local[] | null;\r\n    switch (type.toNativeType()) {\r\n      case NativeType.I32: temps = this.tempI32s; break;\r\n      case NativeType.I64: temps = this.tempI64s; break;\r\n      case NativeType.F32: temps = this.tempF32s; break;\r\n      case NativeType.F64: temps = this.tempF64s; break;\r\n      default: throw new Error(\"concrete type expected\");\r\n    }\r\n    if (temps && temps.length) {\r\n      var ret = temps.pop();\r\n      ret.type = type;\r\n      return ret;\r\n    }\r\n    return this.addLocal(type);\r\n  }\r\n\r\n  /** Frees the temporary local for reuse. */\r\n  freeTempLocal(local: Local): void {\r\n    var temps: Local[];\r\n    assert(local.type != null); // internal error\r\n    switch ((<Type>local.type).toNativeType()) {\r\n      case NativeType.I32: temps = this.tempI32s || (this.tempI32s = []); break;\r\n      case NativeType.I64: temps = this.tempI64s || (this.tempI64s = []); break;\r\n      case NativeType.F32: temps = this.tempF32s || (this.tempF32s = []); break;\r\n      case NativeType.F64: temps = this.tempF64s || (this.tempF64s = []); break;\r\n      default: throw new Error(\"concrete type expected\");\r\n    }\r\n    temps.push(local);\r\n  }\r\n\r\n  /** Gets and immediately frees a temporary local of the specified type. */\r\n  getAndFreeTempLocal(type: Type): Local {\r\n    var temps: Local[];\r\n    switch (type.toNativeType()) {\r\n      case NativeType.I32: temps = this.tempI32s || (this.tempI32s = []); break;\r\n      case NativeType.I64: temps = this.tempI64s || (this.tempI64s = []); break;\r\n      case NativeType.F32: temps = this.tempF32s || (this.tempF32s = []); break;\r\n      case NativeType.F64: temps = this.tempF64s || (this.tempF64s = []); break;\r\n      default: throw new Error(\"concrete type expected\");\r\n    }\r\n    if (temps.length > 0)\r\n      return temps[temps.length - 1];\r\n    var local: Local = this.addLocal(type);\r\n    temps.push(local);\r\n    return local;\r\n  }\r\n\r\n  /** Enters a(nother) break context. */\r\n  enterBreakContext(): string {\r\n    var id = this.nextBreakId++;\r\n    if (!this.breakStack)\r\n      this.breakStack = [ id ];\r\n    else\r\n      this.breakStack.push(id);\r\n    return this.breakContext = id.toString(10);\r\n  }\r\n\r\n  /** Leaves the current break context. */\r\n  leaveBreakContext(): void {\r\n    assert(this.breakStack != null);\r\n    var length = (<i32[]>this.breakStack).length;\r\n    assert(length > 0);\r\n    (<i32[]>this.breakStack).pop();\r\n    if (length > 1) {\r\n      this.breakContext = (<i32[]>this.breakStack)[length - 2].toString(10);\r\n    } else {\r\n      this.breakContext = null;\r\n      this.breakStack = null;\r\n    }\r\n  }\r\n\r\n  /** Finalizes the function once compiled, releasing no longer needed resources. */\r\n  finalize(module: Module, ref: FunctionRef): void {\r\n    assert(!this.breakStack || !this.breakStack.length); // internal error\r\n    this.breakStack = null;\r\n    this.breakContext = null;\r\n    this.tempI32s = this.tempI64s = this.tempF32s = this.tempF64s = null;\r\n    if (this.program.options.sourceMap) {\r\n      var debugLocations = this.debugLocations;\r\n      if (debugLocations)\r\n        for (var i = 0, k = debugLocations.length; i < k; ++i) {\r\n          var debugLocation = debugLocations[i];\r\n          module.setDebugLocation(ref, debugLocation.debugInfoRef, debugLocation.source.debugInfoIndex, debugLocation.line, debugLocation.column);\r\n        }\r\n    }\r\n    this.debugLocations = null;\r\n  }\r\n\r\n  /** Returns the TypeScript representation of this function. */\r\n  toString(): string { return this.prototype.simpleName; }\r\n\r\n  /** Returns the function type TypeScript representation of this function.*/\r\n  toTypeString(): string { throw new Error(\"not implemented\"); }\r\n}\r\n\r\n/** A yet unresolved instance field prototype. */\r\nexport class FieldPrototype extends Element {\r\n\r\n  kind = ElementKind.FIELD_PROTOTYPE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: FieldDeclaration;\r\n  /** Parent class prototype. */\r\n  classPrototype: ClassPrototype;\r\n\r\n  /** Constructs a new field prototype. */\r\n  constructor(classPrototype: ClassPrototype, simpleName: string, internalName: string, declaration: FieldDeclaration) {\r\n    super(classPrototype.program, simpleName, internalName);\r\n    this.classPrototype = classPrototype;\r\n    this.declaration = declaration;\r\n    if (this.declaration.modifiers) {\r\n      for (var i = 0, k = this.declaration.modifiers.length; i < k; ++i) {\r\n        switch (this.declaration.modifiers[i].modifierKind) {\r\n          case ModifierKind.EXPORT: this.set(ElementFlags.EXPORTED); break;\r\n          case ModifierKind.READONLY: this.set(ElementFlags.READONLY); break;\r\n          case ModifierKind.PRIVATE:\r\n          case ModifierKind.PROTECTED:\r\n          case ModifierKind.PUBLIC:\r\n          case ModifierKind.STATIC: break; // already handled\r\n          default: throw new Error(\"unexpected modifier\");\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Whether the field is read-only or not. */\r\n  get isReadonly(): bool { return (this.flags & ElementFlags.READONLY) != 0; }\r\n  set isReadonly(is: bool) { if (is) this.flags |= ElementFlags.READONLY; else this.flags &= ~ElementFlags.READONLY; }\r\n}\r\n\r\n/** A resolved instance field. */\r\nexport class Field extends VariableLikeElement {\r\n\r\n  kind = ElementKind.FIELD;\r\n\r\n  /** Field prototype reference. */\r\n  prototype: FieldPrototype;\r\n  /** Field memory offset, if an instance field. */\r\n  memoryOffset: i32 = -1;\r\n\r\n  /** Constructs a new field. */\r\n  constructor(prototype: FieldPrototype, internalName: string, type: Type) {\r\n    super(prototype.program, prototype.simpleName, internalName);\r\n    this.prototype = prototype;\r\n    this.flags = prototype.flags;\r\n    this.type = type;\r\n  }\r\n}\r\n\r\n/** A property comprised of a getter and a setter function. */\r\nexport class Property extends Element {\r\n\r\n  kind = ElementKind.PROPERTY;\r\n\r\n  /** Parent class prototype. */\r\n  parent: ClassPrototype;\r\n  /** Getter prototype. */\r\n  getterPrototype: FunctionPrototype | null = null;\r\n  /** Setter prototype. */\r\n  setterPrototype: FunctionPrototype | null = null;\r\n\r\n  /** Constructs a new property prototype. */\r\n  constructor(program: Program, simpleName: string, internalName: string, parent: ClassPrototype) {\r\n    super(program, simpleName, internalName);\r\n    this.parent = parent;\r\n  }\r\n}\r\n\r\n/** A yet unresolved class prototype. */\r\nexport class ClassPrototype extends Element {\r\n\r\n  kind = ElementKind.CLASS_PROTOTYPE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: ClassDeclaration;\r\n  /** Resolved instances. */\r\n  instances: Map<string,Class> = new Map();\r\n  /** Instance member prototypes. */\r\n  instanceMembers: Map<string,Element> | null = null;\r\n  /** Base class prototype, if applicable. */\r\n  basePrototype: ClassPrototype | null = null; // set in Program#initialize\r\n  /** Constructor prototype. */\r\n  constructorPrototype: FunctionPrototype | null = null;\r\n\r\n  /** Overloaded indexed get method, if any. */\r\n  fnIndexedGet: string | null = null;\r\n  /** Overloaded indexed set method, if any. */\r\n  fnIndexedSet: string | null = null;\r\n  /** Overloaded concatenation method, if any. */\r\n  fnConcat: string | null = null;\r\n  /** Overloaded equality comparison method, if any. */\r\n  fnEquals: string | null = null;\r\n\r\n  constructor(program: Program, simpleName: string, internalName: string, declaration: ClassDeclaration) {\r\n    super(program, simpleName, internalName);\r\n    this.declaration = declaration;\r\n    if (this.declaration.modifiers) {\r\n      for (var i = 0, k = this.declaration.modifiers.length; i < k; ++i) {\r\n        switch (this.declaration.modifiers[i].modifierKind) {\r\n          case ModifierKind.IMPORT: this.set(ElementFlags.IMPORTED); break;\r\n          case ModifierKind.EXPORT: this.set(ElementFlags.EXPORTED); break;\r\n          case ModifierKind.DECLARE: this.set(ElementFlags.DECLARED); break;\r\n          default: throw new Error(\"unexpected modifier\");\r\n        }\r\n      }\r\n    }\r\n    if (this.declaration.typeParameters.length)\r\n      this.set(ElementFlags.GENERIC);\r\n  }\r\n\r\n  /** Whether an unamanaged class or not. */\r\n  get isUnmanaged(): bool { return (this.flags & ElementFlags.UNMANAGED) != 0; }\r\n  set isUnmanaged(is: bool) { if (is) this.flags |= ElementFlags.UNMANAGED; else this.flags &= ~ElementFlags.UNMANAGED; }\r\n\r\n  resolve(typeArguments: Type[] | null, contextualTypeArguments: Map<string,Type> | null = null): Class | null {\r\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\r\n    var instance = this.instances.get(instanceKey);\r\n    if (instance)\r\n      return instance;\r\n\r\n    // inherit contextual type arguments\r\n    var inheritedTypeArguments = contextualTypeArguments;\r\n    contextualTypeArguments = new Map();\r\n    if (inheritedTypeArguments)\r\n      for (var [inheritedName, inheritedType] of inheritedTypeArguments)\r\n        contextualTypeArguments.set(inheritedName, inheritedType);\r\n\r\n    var declaration = this.declaration;\r\n    var baseClass: Class | null = null;\r\n    if (declaration.extendsType) {\r\n      var baseClassType = this.program.resolveType(declaration.extendsType, null); // reports\r\n      if (!baseClassType)\r\n        return null;\r\n      if (!(baseClass = baseClassType.classType)) {\r\n        this.program.error(DiagnosticCode.A_class_may_only_extend_another_class, declaration.extendsType.range);\r\n        return null;\r\n      }\r\n      if (baseClass.prototype.isUnmanaged != this.isUnmanaged) {\r\n        this.program.error(DiagnosticCode.Structs_cannot_extend_classes_and_vice_versa, Range.join(declaration.name.range, declaration.extendsType.range));\r\n        return null;\r\n      }\r\n    }\r\n\r\n    // override call specific contextual type arguments if provided\r\n    var i: i32, k: i32;\r\n    if (typeArguments) {\r\n      if ((k = typeArguments.length) != declaration.typeParameters.length)\r\n        throw new Error(\"type argument count mismatch\");\r\n      for (var i = 0; i < k; ++i)\r\n        contextualTypeArguments.set(declaration.typeParameters[i].name.text, typeArguments[i]);\r\n    } else if (declaration.typeParameters.length)\r\n      throw new Error(\"type argument count mismatch\");\r\n\r\n    var internalName = this.internalName;\r\n    if (instanceKey.length)\r\n      internalName += \"<\" + instanceKey + \">\";\r\n    instance = new Class(this, internalName, typeArguments, baseClass);\r\n    instance.contextualTypeArguments = contextualTypeArguments;\r\n    this.instances.set(instanceKey, instance);\r\n\r\n    var memoryOffset: u32 = 0;\r\n    if (baseClass) {\r\n      memoryOffset = baseClass.currentMemoryOffset;\r\n      if (baseClass.members) {\r\n        if (!instance.members)\r\n          instance.members = new Map();\r\n        for (var inheritedMember of baseClass.members.values())\r\n          instance.members.set(inheritedMember.simpleName, inheritedMember);\r\n      }\r\n    }\r\n\r\n    if (this.constructorPrototype) {\r\n      var partialConstructor = this.constructorPrototype.resolvePartial(typeArguments); // reports\r\n      if (partialConstructor)\r\n        instance.constructorInstance = partialConstructor.resolve(); // reports\r\n      // TODO: ^ doesn't know the return type, hence returns null\r\n    }\r\n\r\n    if (this.instanceMembers)\r\n      for (var member of this.instanceMembers.values()) {\r\n        switch (member.kind) {\r\n\r\n          case ElementKind.FIELD_PROTOTYPE: // fields are layed out in advance\r\n            if (!instance.members)\r\n              instance.members = new Map();\r\n            var fieldDeclaration = (<FieldPrototype>member).declaration;\r\n            if (!fieldDeclaration.type)\r\n              throw new Error(\"type expected\"); // TODO: check if parent class defines a type for it already\r\n            var fieldType = this.program.resolveType(fieldDeclaration.type, instance.contextualTypeArguments); // reports\r\n            if (fieldType) {\r\n              var fieldInstance = new Field(<FieldPrototype>member, (<FieldPrototype>member).internalName, fieldType);\r\n              switch (fieldType.byteSize) { // align\r\n                case 1: break;\r\n                case 2: if (memoryOffset & 1) ++memoryOffset; break;\r\n                case 4: if (memoryOffset & 3) memoryOffset = (memoryOffset | 3) + 1; break;\r\n                case 8: if (memoryOffset & 7) memoryOffset = (memoryOffset | 7) + 1; break;\r\n                default: assert(false);\r\n              }\r\n              fieldInstance.memoryOffset = memoryOffset;\r\n              memoryOffset += fieldType.byteSize;\r\n              instance.members.set(member.simpleName, fieldInstance);\r\n            }\r\n            break;\r\n\r\n          case ElementKind.FUNCTION_PROTOTYPE: // instance methods remain partially resolved prototypes until compiled\r\n            if (!instance.members)\r\n              instance.members = new Map();\r\n            var methodPrototype = (<FunctionPrototype>member).resolvePartial(typeArguments); // reports\r\n            if (methodPrototype)\r\n              instance.members.set(member.simpleName, methodPrototype);\r\n            break;\r\n\r\n          case ElementKind.PROPERTY: // instance properties are cloned with partially resolved getters and setters\r\n            if (!instance.members)\r\n              instance.members = new Map();\r\n            assert((<Property>member).getterPrototype);\r\n            var instanceProperty = new Property(this.program, member.simpleName, member.internalName, this);\r\n            instanceProperty.getterPrototype = (<FunctionPrototype>(<Property>member).getterPrototype).resolvePartial(typeArguments);\r\n            if ((<Property>member).setterPrototype)\r\n              instanceProperty.setterPrototype = (<FunctionPrototype>(<Property>member).setterPrototype).resolvePartial(typeArguments);\r\n            instance.members.set(member.simpleName, instanceProperty);\r\n            break;\r\n\r\n          default:\r\n            throw new Error(\"instance member expected: \" + member.kind);\r\n        }\r\n      }\r\n\r\n    instance.currentMemoryOffset = memoryOffset; // sizeof<this>() is its byte size in memory\r\n    return instance;\r\n  }\r\n\r\n  resolveInclTypeArguments(typeArgumentNodes: TypeNode[] | null, contextualTypeArguments: Map<string,Type> | null, alternativeReportNode: Node | null): Class | null {\r\n    var resolvedTypeArguments: Type[] | null = null;\r\n    if (this.is(ElementFlags.GENERIC)) {\r\n      assert(typeArgumentNodes != null && typeArgumentNodes.length != 0);\r\n      resolvedTypeArguments = this.program.resolveTypeArguments(this.declaration.typeParameters, typeArgumentNodes, contextualTypeArguments, alternativeReportNode);\r\n      if (!resolvedTypeArguments)\r\n        return null;\r\n    } else\r\n      assert(typeArgumentNodes == null || !typeArgumentNodes.length);\r\n    return this.resolve(resolvedTypeArguments, contextualTypeArguments);\r\n  }\r\n\r\n  toString(): string { return this.simpleName; }\r\n}\r\n\r\n/** A resolved class. */\r\nexport class Class extends Element {\r\n\r\n  kind = ElementKind.CLASS;\r\n\r\n  /** Prototype reference. */\r\n  prototype: ClassPrototype;\r\n  /** Resolved type arguments. */\r\n  typeArguments: Type[] | null;\r\n  /** Resolved class type. */\r\n  type: Type;\r\n  /** Base class, if applicable. */\r\n  base: Class | null;\r\n  /** Contextual type arguments for fields and methods. */\r\n  contextualTypeArguments: Map<string,Type> | null = null;\r\n  /** Current member memory offset. */\r\n  currentMemoryOffset: u32 = 0;\r\n  /** Constructor instance. */\r\n  constructorInstance: Function | null = null;\r\n\r\n  /** Constructs a new class. */\r\n  constructor(prototype: ClassPrototype, internalName: string, typeArguments: Type[] | null = null, base: Class | null = null) {\r\n    super(prototype.program, prototype.simpleName, internalName);\r\n    this.prototype = prototype;\r\n    this.flags = prototype.flags;\r\n    this.typeArguments = typeArguments;\r\n    this.type = prototype.program.options.usizeType.asClass(this);\r\n    this.base = base;\r\n\r\n    // inherit static members and contextual type arguments from base class\r\n    if (base) {\r\n      if (base.contextualTypeArguments) {\r\n        if (!this.contextualTypeArguments)\r\n          this.contextualTypeArguments = new Map();\r\n        for (var [baseName, baseType] of base.contextualTypeArguments)\r\n          this.contextualTypeArguments.set(baseName, baseType);\r\n      }\r\n    }\r\n\r\n    // apply instance-specific contextual type arguments\r\n    var declaration = this.prototype.declaration;\r\n    var i: i32, k: i32;\r\n    if (declaration) { // irrelevant for built-ins\r\n      var typeParameters = declaration.typeParameters;\r\n      if (typeArguments) {\r\n        if ((k = typeArguments.length) != typeParameters.length)\r\n          throw new Error(\"type argument count mismatch\");\r\n        if (k) {\r\n          if (!this.contextualTypeArguments)\r\n            this.contextualTypeArguments = new Map();\r\n          for (i = 0; i < k; ++i)\r\n            this.contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\r\n        }\r\n      } else if (typeParameters.length)\r\n        throw new Error(\"type argument count mismatch\");\r\n    }\r\n  }\r\n\r\n  toString(): string { return this.prototype.simpleName; }\r\n}\r\n\r\n/** A yet unresolved interface. */\r\nexport class InterfacePrototype extends ClassPrototype {\r\n\r\n  kind = ElementKind.INTERFACE_PROTOTYPE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: InterfaceDeclaration; // more specific\r\n\r\n  /** Constructs a new interface prototype. */\r\n  constructor(program: Program, simpleName: string, internalName: string, declaration: InterfaceDeclaration) {\r\n    super(program, simpleName, internalName, declaration);\r\n  }\r\n}\r\n\r\n/** A resolved interface. */\r\nexport class Interface extends Class {\r\n\r\n  kind = ElementKind.INTERFACE;\r\n\r\n  /** Prototype reference. */\r\n  prototype: InterfacePrototype; // more specific\r\n  /** Base interface, if applcable. */\r\n  base: Interface | null; // more specific\r\n\r\n  /** Constructs a new interface. */\r\n  constructor(prototype: InterfacePrototype, internalName: string, typeArguments: Type[] = [], base: Interface | null = null) {\r\n    super(prototype, internalName, typeArguments, base);\r\n  }\r\n}\r\n\r\n/** Control flow flags indicating specific conditions. */\r\nexport const enum FlowFlags {\r\n  /** No specific conditions. */\r\n  NONE = 0,\r\n  /** This branch always returns. */\r\n  RETURNS = 1 << 0,\r\n  /** This branch possibly throws. */\r\n  POSSIBLY_THROWS = 1 << 1,\r\n  /** This branch possible breaks. */\r\n  POSSIBLY_BREAKS = 1 << 2,\r\n  /** This branch possible continues. */\r\n  POSSIBLY_CONTINUES = 1 << 3\r\n}\r\n\r\n/** A control flow evaluator. */\r\nexport class Flow {\r\n\r\n  /** Parent flow. */\r\n  parent: Flow | null;\r\n  /** Flow flags indicating specific conditions. */\r\n  flags: FlowFlags;\r\n  /** Function this flow belongs to. */\r\n  currentFunction: Function;\r\n  /** The label we break to when encountering a continue statement. */\r\n  continueLabel: string | null;\r\n  /** The label we break to when encountering a break statement. */\r\n  breakLabel: string | null;\r\n  /** Scoped local variables. */\r\n  scopedLocals: Map<string,Local> | null = null;\r\n\r\n  /** Creates the parent flow of the specified function. */\r\n  static create(currentFunction: Function): Flow {\r\n    var parentFlow = new Flow();\r\n    parentFlow.parent = null;\r\n    parentFlow.flags = FlowFlags.NONE;\r\n    parentFlow.currentFunction = currentFunction;\r\n    parentFlow.continueLabel = null;\r\n    parentFlow.breakLabel = null;\r\n    return parentFlow;\r\n  }\r\n\r\n  private constructor() { }\r\n\r\n  /** Tests if this flow has the specified flag or flags. */\r\n  is(flag: FlowFlags): bool { return (this.flags & flag) == flag; }\r\n\r\n  /** Sets the specified flag or flags. */\r\n  set(flag: FlowFlags): void { this.flags |= flag; }\r\n\r\n  /** Enters a new branch or scope and returns the new flow. */\r\n  enterBranchOrScope(): Flow {\r\n    var branchFlow = new Flow();\r\n    branchFlow.parent = this;\r\n    branchFlow.flags = this.flags;\r\n    branchFlow.currentFunction = this.currentFunction;\r\n    branchFlow.continueLabel = this.continueLabel;\r\n    branchFlow.breakLabel = this.breakLabel;\r\n    return branchFlow;\r\n  }\r\n\r\n  /** Leaves the current branch or scope and returns the parent flow. */\r\n  leaveBranchOrScope(): Flow {\r\n    var parent = assert(this.parent);\r\n\r\n    // Free block-scoped locals\r\n    if (this.scopedLocals) {\r\n      for (var scopedLocal of this.scopedLocals.values())\r\n        this.currentFunction.freeTempLocal(scopedLocal);\r\n      this.scopedLocals = null;\r\n    }\r\n\r\n    // Propagate flags to parent\r\n    if (this.is(FlowFlags.POSSIBLY_THROWS))\r\n      parent.set(FlowFlags.POSSIBLY_THROWS);\r\n    if (this.is(FlowFlags.POSSIBLY_BREAKS) && parent.breakLabel == this.breakLabel)\r\n      parent.set(FlowFlags.POSSIBLY_BREAKS);\r\n    if (this.is(FlowFlags.POSSIBLY_CONTINUES) && parent.continueLabel == this.continueLabel)\r\n      parent.set(FlowFlags.POSSIBLY_CONTINUES);\r\n\r\n    return parent;\r\n  }\r\n\r\n  /** Adds a new scoped local of the specified name. */\r\n  addScopedLocal(name: string, type: Type, reportNode: Node): void {\r\n    var scopedLocal = this.currentFunction.getTempLocal(type);\r\n    if (!this.scopedLocals)\r\n      this.scopedLocals = new Map();\r\n    else if (this.scopedLocals.has(name)) {\r\n      this.currentFunction.program.error(DiagnosticCode.Duplicate_identifier_0, reportNode.range);\r\n      return;\r\n    }\r\n    this.scopedLocals.set(name, scopedLocal);\r\n  }\r\n\r\n  /** Gets the local of the specified name in the current scope. */\r\n  getScopedLocal(name: string): Local | null {\r\n    var local: Local | null;\r\n    var current: Flow | null = this;\r\n    do {\r\n      if (current.scopedLocals && (local = current.scopedLocals.get(name)))\r\n        return local;\r\n    } while (current = current.parent);\r\n    return this.currentFunction.locals.get(name);\r\n  }\r\n\r\n  /** Finalizes this flow. Must be the topmost parent flow of the function. */\r\n  finalize(): bool {\r\n    assert(this.parent == null, \"must be the topmost parent flow\");\r\n    this.continueLabel = null;\r\n    this.breakLabel = null;\r\n    return this.is(FlowFlags.RETURNS);\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/program.ts","import {\r\n  compileCall as compileBuiltinCall,\r\n  compileGetConstant as compileBuiltinGetConstant,\r\n  compileAllocate as compileBuiltinAllocate\r\n} from \"./builtins\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Module,\r\n  MemorySegment,\r\n  ExpressionRef,\r\n  UnaryOp,\r\n  BinaryOp,\r\n  NativeType,\r\n  FunctionTypeRef,\r\n  FunctionRef,\r\n  ExpressionId,\r\n  readString\r\n} from \"./module\";\r\n\r\nimport {\r\n  Program,\r\n  ClassPrototype,\r\n  Class,\r\n  Element,\r\n  ElementKind,\r\n  Enum,\r\n  FieldPrototype,\r\n  Field,\r\n  FunctionPrototype,\r\n  Function,\r\n  Global,\r\n  Local,\r\n  Namespace,\r\n  Parameter,\r\n  EnumValue,\r\n  Property,\r\n  VariableLikeElement,\r\n  Flow,\r\n  FlowFlags,\r\n  ElementFlags,\r\n  ConstantValueKind,\r\n\r\n  PATH_DELIMITER,\r\n  LIBRARY_PREFIX\r\n} from \"./program\";\r\n\r\nimport {\r\n  Token\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  TypeNode,\r\n  Source,\r\n  SourceKind,\r\n  Range,\r\n\r\n  Statement,\r\n  BlockStatement,\r\n  BreakStatement,\r\n  ClassDeclaration,\r\n  ContinueStatement,\r\n  DeclarationStatement,\r\n  DoStatement,\r\n  EmptyStatement,\r\n  EnumDeclaration,\r\n  EnumValueDeclaration,\r\n  ExportMember,\r\n  ExportStatement,\r\n  ExpressionStatement,\r\n  FunctionDeclaration,\r\n  ForStatement,\r\n  IfStatement,\r\n  ImportStatement,\r\n  InterfaceDeclaration,\r\n  ModifierKind,\r\n  NamespaceDeclaration,\r\n  ReturnStatement,\r\n  SwitchCase,\r\n  SwitchStatement,\r\n  ThrowStatement,\r\n  TryStatement,\r\n  VariableLikeDeclarationStatement,\r\n  VariableDeclaration,\r\n  VariableStatement,\r\n  WhileStatement,\r\n\r\n  Expression,\r\n  AssertionExpression,\r\n  BinaryExpression,\r\n  CallExpression,\r\n  CommaExpression,\r\n  ElementAccessExpression,\r\n  FloatLiteralExpression,\r\n  IdentifierExpression,\r\n  IntegerLiteralExpression,\r\n  LiteralExpression,\r\n  LiteralKind,\r\n  NewExpression,\r\n  ParenthesizedExpression,\r\n  PropertyAccessExpression,\r\n  TernaryExpression,\r\n  ArrayLiteralExpression,\r\n  StringLiteralExpression,\r\n  UnaryPostfixExpression,\r\n  UnaryPrefixExpression,\r\n\r\n  hasModifier\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind,\r\n  TypeFlags,\r\n\r\n  typesToNativeTypes\r\n} from \"./types\";\r\n\r\n/** Compilation target. */\r\nexport enum Target {\r\n  /** WebAssembly with 32-bit pointers. */\r\n  WASM32,\r\n  /** WebAssembly with 64-bit pointers. Experimental and not supported by any runtime yet. */\r\n  WASM64\r\n}\r\n\r\n/** Compiler options. */\r\nexport class Options {\r\n\r\n  /** WebAssembly target. Defaults to {@link Target.WASM32}. */\r\n  target: Target = Target.WASM32;\r\n  /** If true, compiles everything instead of just reachable code. */\r\n  noTreeShaking: bool = false;\r\n  /** If true, replaces assertions with nops. */\r\n  noAssert: bool = false;\r\n  /** If true, does not set up a memory. */\r\n  noMemory: bool = false;\r\n  /** Memory allocation implementation to use. */\r\n  allocateImpl: string = \"allocate_memory\";\r\n  /** Memory freeing implementation to use. */\r\n  freeImpl: string = \"free_memory\";\r\n  /** If true, generates information necessary for source maps. */\r\n  sourceMap: bool = false;\r\n\r\n  /** Tests if the target is WASM64 or, otherwise, WASM32. */\r\n  get isWasm64(): bool { return this.target == Target.WASM64; }\r\n  /** Gets the unsigned size type matching the target. */\r\n  get usizeType(): Type { return this.target == Target.WASM64 ? Type.usize64 : Type.usize32; }\r\n  /** Gets the signed size type matching the target. */\r\n  get isizeType(): Type { return this.target == Target.WASM64 ? Type.isize64 : Type.isize32; }\r\n  /** Gets the native size type matching the target. */\r\n  get nativeSizeType(): NativeType { return this.target == Target.WASM64 ? NativeType.I64 : NativeType.I32; }\r\n}\r\n\r\n/** Indicates the desired kind of a conversion. */\r\nexport const enum ConversionKind {\r\n  /** No conversion. */\r\n  NONE,\r\n  /** Implicit conversion. */\r\n  IMPLICIT,\r\n  /** Explicit conversion. */\r\n  EXPLICIT\r\n}\r\n\r\n/** Compiler interface. */\r\nexport class Compiler extends DiagnosticEmitter {\r\n\r\n  /** Program reference. */\r\n  program: Program;\r\n  /** Provided options. */\r\n  options: Options;\r\n  /** Module instance being compiled. */\r\n  module: Module;\r\n\r\n  /** Start function being compiled. */\r\n  startFunction: Function;\r\n  /** Start function statements. */\r\n  startFunctionBody: ExpressionRef[] = new Array();\r\n\r\n  /** Current function in compilation. */\r\n  currentFunction: Function;\r\n  /** Current enum in compilation. */\r\n  currentEnum: Enum | null = null;\r\n  /** Current type in compilation. */\r\n  currentType: Type = Type.void;\r\n\r\n  /** Counting memory offset. */\r\n  memoryOffset: I64;\r\n  /** Memory segments being compiled. */\r\n  memorySegments: MemorySegment[] = new Array();\r\n  /** Map of already compiled static string segments. */\r\n  stringSegments: Map<string,MemorySegment> = new Map();\r\n\r\n  /** Already processed file names. */\r\n  files: Set<string> = new Set();\r\n\r\n  /** Compiles a {@link Program} to a {@link Module} using the specified options. */\r\n  static compile(program: Program, options: Options | null = null): Module {\r\n    return new Compiler(program, options).compile();\r\n  }\r\n\r\n  /** Constructs a new compiler for a {@link Program} using the specified options. */\r\n  constructor(program: Program, options: Options | null = null) {\r\n    super(program.diagnostics);\r\n    this.program = program;\r\n    this.options = options ? options : new Options();\r\n    this.memoryOffset = i64_new(this.options.usizeType.byteSize, 0); // leave space for `null`\r\n    this.module = Module.create();\r\n  }\r\n\r\n  /** Performs compilation of the underlying {@link Program} to a {@link Module}. */\r\n  compile(): Module {\r\n\r\n    // initialize lookup maps, built-ins, imports, exports, etc.\r\n    this.program.initialize(this.options);\r\n\r\n    // set up the start function wrapping top-level statements, of all files.\r\n    var startFunctionPrototype = assert(this.program.elements.get(\"start\"));\r\n    assert(startFunctionPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n    var startFunctionInstance = new Function(<FunctionPrototype>startFunctionPrototype, startFunctionPrototype.internalName, [], [], Type.void, null);\r\n    startFunctionInstance.set(ElementFlags.START);\r\n    this.currentFunction = this.startFunction = startFunctionInstance;\r\n\r\n    var sources = this.program.sources;\r\n\r\n    // compile entry file(s) while traversing to reachable elements\r\n    for (var i = 0, k = sources.length; i < k; ++i)\r\n      if (sources[i].isEntry) this.compileSource(sources[i]);\r\n\r\n    // compile the start function if not empty\r\n    if (this.startFunctionBody.length) {\r\n      var typeRef = this.module.getFunctionTypeBySignature(NativeType.None, []);\r\n      if (!typeRef) typeRef = this.module.addFunctionType(\"v\", NativeType.None, []);\r\n      var ref: FunctionRef;\r\n      this.module.setStart(\r\n        ref = this.module.addFunction(this.startFunction.prototype.internalName, typeRef, typesToNativeTypes(this.startFunction.additionalLocals),\r\n          this.module.createBlock(null, this.startFunctionBody)\r\n        )\r\n      );\r\n      this.startFunction.finalize(this.module, ref);\r\n    }\r\n\r\n    // set up static memory segments and the heap base pointer\r\n    if (!this.options.noMemory) {\r\n      var memoryOffset = this.memoryOffset;\r\n      this.memoryOffset = memoryOffset = i64_align(memoryOffset, this.options.usizeType.byteSize);\r\n      if (this.options.target == Target.WASM64)\r\n        this.module.addGlobal(\"HEAP_BASE\", NativeType.I64, false, this.module.createI64(i64_low(memoryOffset), i64_high(memoryOffset)));\r\n      else\r\n        this.module.addGlobal(\"HEAP_BASE\", NativeType.I32, false, this.module.createI32(i64_low(memoryOffset)));\r\n\r\n      // determine initial page size\r\n      var pages = i64_shr_u(i64_align(memoryOffset, 0x10000), i64_new(16, 0));\r\n      this.module.setMemory(i64_low(pages), Module.MAX_MEMORY_WASM32 /* TODO: not WASM64 compatible yet */, this.memorySegments, this.options.target, \"memory\");\r\n    }\r\n    return this.module;\r\n  }\r\n\r\n  // sources\r\n\r\n  compileSourceByPath(normalizedPathWithoutExtension: string, reportNode: Node): void {\r\n    var sources = this.program.sources;\r\n\r\n    var expected = normalizedPathWithoutExtension + \".ts\";\r\n    for (var i = 0, k = sources.length; i < k; ++i) {\r\n      var source = sources[i];\r\n      var actual = source.normalizedPath;\r\n      if (source.normalizedPath == expected) {\r\n        this.compileSource(source);\r\n        return;\r\n      }\r\n    }\r\n\r\n    expected = normalizedPathWithoutExtension + \"/index.ts\";\r\n    for (var i = 0, k = sources.length; i < k; ++i) {\r\n      var source = sources[i];\r\n      var actual = source.normalizedPath;\r\n      if (source.normalizedPath == expected) {\r\n        this.compileSource(source);\r\n        return;\r\n      }\r\n    }\r\n\r\n    expected = LIBRARY_PREFIX + normalizedPathWithoutExtension + \".ts\";\r\n    for (var i = 0, k = sources.length; i < k; ++i) {\r\n      var source = sources[i];\r\n      var actual = source.normalizedPath;\r\n      if (source.normalizedPath == expected) {\r\n        this.compileSource(source);\r\n        return;\r\n      }\r\n    }\r\n\r\n    this.error(DiagnosticCode.File_0_not_found, reportNode.range, normalizedPathWithoutExtension);\r\n  }\r\n\r\n  compileSource(source: Source): void {\r\n    var files = this.files;\r\n    if (files.has(source.normalizedPath))\r\n      return;\r\n    files.add(source.normalizedPath);\r\n\r\n    var noTreeShaking = this.options.noTreeShaking;\r\n    var isEntry = source.isEntry;\r\n    var startFunctionBody = this.startFunctionBody;\r\n    var statements = source.statements;\r\n    for (var i = 0, k = statements.length; i < k; ++i) {\r\n      var statement = statements[i];\r\n      switch (statement.kind) {\r\n\r\n        case NodeKind.CLASSDECLARATION:\r\n          if ((noTreeShaking || isEntry && hasModifier(ModifierKind.EXPORT, (<ClassDeclaration>statement).modifiers)) && !(<ClassDeclaration>statement).typeParameters.length)\r\n            this.compileClassDeclaration(<ClassDeclaration>statement, []);\r\n          break;\r\n\r\n        case NodeKind.ENUMDECLARATION:\r\n          if (noTreeShaking || isEntry && hasModifier(ModifierKind.EXPORT, (<EnumDeclaration>statement).modifiers))\r\n            this.compileEnumDeclaration(<EnumDeclaration>statement);\r\n          break;\r\n\r\n        case NodeKind.FUNCTIONDECLARATION:\r\n          if ((noTreeShaking || isEntry && hasModifier(ModifierKind.EXPORT, (<FunctionDeclaration>statement).modifiers)) && !(<FunctionDeclaration>statement).typeParameters.length)\r\n            this.compileFunctionDeclaration(<FunctionDeclaration>statement, []);\r\n          break;\r\n\r\n        case NodeKind.IMPORT:\r\n          this.compileSourceByPath((<ImportStatement>statement).normalizedPath, (<ImportStatement>statement).path);\r\n          break;\r\n\r\n        case NodeKind.NAMESPACEDECLARATION:\r\n          if (noTreeShaking || isEntry && hasModifier(ModifierKind.EXPORT, (<NamespaceDeclaration>statement).modifiers))\r\n            this.compileNamespaceDeclaration(<NamespaceDeclaration>statement);\r\n          break;\r\n\r\n        case NodeKind.VARIABLE: // global, always compiled because initializers might have side effects\r\n          var variableInit = this.compileVariableStatement(<VariableStatement>statement);\r\n          if (variableInit) startFunctionBody.push(variableInit);\r\n          break;\r\n\r\n        case NodeKind.EXPORT:\r\n          if ((<ExportStatement>statement).normalizedPath != null)\r\n            this.compileSourceByPath(<string>(<ExportStatement>statement).normalizedPath, <StringLiteralExpression>(<ExportStatement>statement).path);\r\n          if (noTreeShaking || isEntry)\r\n            this.compileExportStatement(<ExportStatement>statement);\r\n          break;\r\n\r\n        // otherwise a top-level statement that is part of the start function's body\r\n        default:\r\n          var previousFunction = this.currentFunction;\r\n          this.currentFunction = this.startFunction;\r\n          var expr = this.compileStatement(statement);\r\n          this.startFunctionBody.push(expr);\r\n          this.currentFunction = previousFunction;\r\n          break;\r\n      }\r\n    }\r\n  }\r\n\r\n  // globals\r\n\r\n  compileGlobalDeclaration(declaration: VariableDeclaration): Global | null {\r\n    var element = this.program.elements.get(declaration.fileLevelInternalName);\r\n    if (!element || element.kind != ElementKind.GLOBAL)\r\n      throw new Error(\"global expected\");\r\n    if (!this.compileGlobal(<Global>element)) // reports\r\n      return null;\r\n    return <Global>element;\r\n  }\r\n\r\n  compileGlobal(global: Global): bool {\r\n    if (global.is(ElementFlags.COMPILED) || global.is(ElementFlags.BUILTIN))\r\n      return true;\r\n\r\n    var declaration = global.declaration;\r\n    var initExpr: ExpressionRef = 0;\r\n    if (global.type == Type.void) { // infer type\r\n      if (declaration.type) {\r\n        var resolvedType = this.program.resolveType(declaration.type); // reports\r\n        if (!resolvedType)\r\n          return false;\r\n        if (resolvedType == Type.void) {\r\n          this.error(DiagnosticCode.Type_0_is_not_assignable_to_type_1, declaration.type.range, \"*\", resolvedType.toString());\r\n          return false;\r\n        }\r\n        global.type = resolvedType;\r\n      } else if (declaration.initializer) { // infer type using void/NONE for proper literal inference\r\n        initExpr = this.compileExpression(declaration.initializer, Type.void, ConversionKind.NONE); // reports\r\n        if (this.currentType == Type.void) {\r\n          this.error(DiagnosticCode.Type_0_is_not_assignable_to_type_1, declaration.initializer.range, this.currentType.toString(), \"<auto>\");\r\n          return false;\r\n        }\r\n        global.type = this.currentType;\r\n      } else {\r\n        this.error(DiagnosticCode.Type_expected, declaration.name.range.atEnd);\r\n        return false;\r\n      }\r\n    }\r\n\r\n    var nativeType = global.type.toNativeType();\r\n\r\n    if (global.is(ElementFlags.DECLARED)) {\r\n      if (global.is(ElementFlags.CONSTANT)) {\r\n        this.module.addGlobalImport(global.internalName, global.namespace ? global.namespace.simpleName : \"env\", global.simpleName, nativeType);\r\n        global.set(ElementFlags.COMPILED);\r\n        return true;\r\n      } else\r\n        this.error(DiagnosticCode.Operation_not_supported, declaration.range);\r\n      return false;\r\n    }\r\n\r\n    var initializeInStart = false;\r\n\r\n    if (global.is(ElementFlags.INLINED)) {\r\n      initExpr = this.compileInlineConstant(global, global.type);\r\n    } else {\r\n      if (declaration.initializer) {\r\n        if (!initExpr)\r\n          initExpr = this.compileExpression(declaration.initializer, global.type);\r\n        if (_BinaryenExpressionGetId(initExpr) != ExpressionId.Const) {\r\n          if (global.is(ElementFlags.CONSTANT)) {\r\n            initExpr = this.precomputeExpressionRef(initExpr);\r\n            if (_BinaryenExpressionGetId(initExpr) != ExpressionId.Const) {\r\n              this.warning(DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable, declaration.range);\r\n              initializeInStart = true;\r\n            }\r\n          } else\r\n            initializeInStart = true;\r\n        }\r\n      } else\r\n        initExpr = global.type.toNativeZero(this.module);\r\n    }\r\n\r\n    var internalName = global.internalName;\r\n    if (initializeInStart) {\r\n      this.module.addGlobal(internalName, nativeType, true, global.type.toNativeZero(this.module));\r\n      var setExpr = this.module.createSetGlobal(internalName, initExpr);\r\n      this.startFunctionBody.push(setExpr);\r\n    } else {\r\n      if (global.is(ElementFlags.CONSTANT)) {\r\n        var exprType = _BinaryenExpressionGetType(initExpr);\r\n        switch (exprType) {\r\n\r\n          case NativeType.I32:\r\n            global.constantValueKind = ConstantValueKind.INTEGER;\r\n            global.constantIntegerValue = i64_new(_BinaryenConstGetValueI32(initExpr), 0);\r\n            break;\r\n\r\n          case NativeType.I64:\r\n            global.constantValueKind = ConstantValueKind.INTEGER;\r\n            global.constantIntegerValue = i64_new(_BinaryenConstGetValueI64Low(initExpr), _BinaryenConstGetValueI64High(initExpr));\r\n            break;\r\n\r\n          case NativeType.F32:\r\n            global.constantValueKind = ConstantValueKind.FLOAT;\r\n            global.constantFloatValue = _BinaryenConstGetValueF32(initExpr);\r\n            break;\r\n\r\n          case NativeType.F64:\r\n            global.constantValueKind = ConstantValueKind.FLOAT;\r\n            global.constantFloatValue = _BinaryenConstGetValueF64(initExpr);\r\n            break;\r\n\r\n          default:\r\n            throw new Error(\"concrete type expected\");\r\n        }\r\n        global.set(ElementFlags.INLINED);\r\n        if (declaration.isTopLevel) // might be re-exported\r\n          this.module.addGlobal(internalName, nativeType, !global.is(ElementFlags.CONSTANT), initExpr);\r\n        if (declaration.range.source.isEntry && declaration.isTopLevelExport)\r\n          this.module.addGlobalExport(global.internalName, declaration.programLevelInternalName);\r\n      } else\r\n        this.module.addGlobal(internalName, nativeType, !global.is(ElementFlags.CONSTANT), initExpr);\r\n    }\r\n    global.set(ElementFlags.COMPILED);\r\n    return true;\r\n  }\r\n\r\n  // enums\r\n\r\n  compileEnumDeclaration(declaration: EnumDeclaration): Enum | null {\r\n    var element = this.program.elements.get(declaration.fileLevelInternalName);\r\n    if (!element || element.kind != ElementKind.ENUM)\r\n      throw new Error(\"enum expected\");\r\n    return this.compileEnum(<Enum>element) ? <Enum>element : null;\r\n  }\r\n\r\n  compileEnum(element: Enum): bool {\r\n    if (element.is(ElementFlags.COMPILED))\r\n      return true;\r\n\r\n    // members might reference each other, triggering another compile\r\n    element.set(ElementFlags.COMPILED);\r\n\r\n    this.currentEnum = element;\r\n    var previousValue: EnumValue | null = null;\r\n    if (element.members)\r\n      for (var member of element.members.values()) {\r\n        if (member.kind != ElementKind.ENUMVALUE) // happens if an enum is also a namespace\r\n          continue;\r\n        var initInStart = false;\r\n        var val = <EnumValue>member;\r\n        var valueDeclaration = val.declaration;\r\n        val.set(ElementFlags.COMPILED);\r\n        if (val.is(ElementFlags.INLINED)) {\r\n          if (element.declaration.isTopLevelExport)\r\n            this.module.addGlobal(val.internalName, NativeType.I32, false, this.module.createI32(val.constantValue));\r\n        } else {\r\n          var initExpr: ExpressionRef;\r\n          if (valueDeclaration.value) {\r\n            initExpr = this.compileExpression(<Expression>valueDeclaration.value, Type.i32);\r\n            if (_BinaryenExpressionGetId(initExpr) != ExpressionId.Const) {\r\n              initExpr = this.precomputeExpressionRef(initExpr);\r\n              if (_BinaryenExpressionGetId(initExpr) != ExpressionId.Const) {\r\n                if (element.is(ElementFlags.CONSTANT))\r\n                  this.warning(DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable, valueDeclaration.range);\r\n                initInStart = true;\r\n              }\r\n            }\r\n          } else if (previousValue == null) {\r\n            initExpr = this.module.createI32(0);\r\n          } else if (previousValue.is(ElementFlags.INLINED)) {\r\n            initExpr = this.module.createI32(previousValue.constantValue + 1);\r\n          } else {\r\n            // in TypeScript this errors with TS1061, but actually we can do:\r\n            initExpr = this.module.createBinary(BinaryOp.AddI32,\r\n              this.module.createGetGlobal(previousValue.internalName, NativeType.I32),\r\n              this.module.createI32(1)\r\n            );\r\n            if (element.is(ElementFlags.CONSTANT))\r\n              this.warning(DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable, valueDeclaration.range);\r\n            initInStart = true;\r\n          }\r\n          if (initInStart) {\r\n            this.module.addGlobal(val.internalName, NativeType.I32, true, this.module.createI32(0));\r\n            var setExpr = this.module.createSetGlobal(val.internalName, initExpr);\r\n            this.startFunctionBody.push(setExpr);\r\n          } else {\r\n            this.module.addGlobal(val.internalName, NativeType.I32, false, initExpr);\r\n            if (_BinaryenExpressionGetType(initExpr) == NativeType.I32) {\r\n              val.constantValue = _BinaryenConstGetValueI32(initExpr);\r\n              val.set(ElementFlags.INLINED);\r\n            } else\r\n              throw new Error(\"i32 expected\");\r\n          }\r\n        }\r\n        previousValue = <EnumValue>val;\r\n\r\n        // export values if the enum is exported\r\n        if (element.declaration.range.source.isEntry && element.declaration.isTopLevelExport) {\r\n          if (member.is(ElementFlags.INLINED))\r\n            this.module.addGlobalExport(member.internalName, member.internalName);\r\n          else if (valueDeclaration)\r\n            this.warning(DiagnosticCode.Cannot_export_a_mutable_global, valueDeclaration.range);\r\n        }\r\n      }\r\n    this.currentEnum = null;\r\n    return true;\r\n  }\r\n\r\n  // functions\r\n\r\n  compileFunctionDeclaration(declaration: FunctionDeclaration, typeArguments: TypeNode[], contextualTypeArguments: Map<string,Type> | null = null): Function | null {\r\n    var element = this.program.elements.get(declaration.fileLevelInternalName);\r\n    if (!element || element.kind != ElementKind.FUNCTION_PROTOTYPE)\r\n      throw new Error(\"function expected\");\r\n    return this.compileFunctionUsingTypeArguments(<FunctionPrototype>element, typeArguments, contextualTypeArguments, (<FunctionPrototype>element).declaration.name); // reports\r\n  }\r\n\r\n  compileFunctionUsingTypeArguments(prototype: FunctionPrototype, typeArguments: TypeNode[], contextualTypeArguments: Map<string,Type> | null, reportNode: Node): Function | null {\r\n    var instance = prototype.resolveInclTypeArguments(typeArguments, contextualTypeArguments, reportNode); // reports\r\n    if (!instance)\r\n      return null;\r\n    return this.compileFunction(instance) ? instance : null;\r\n  }\r\n\r\n  compileFunction(instance: Function): bool {\r\n    if (instance.is(ElementFlags.COMPILED))\r\n      return true;\r\n\r\n    assert(!instance.is(ElementFlags.BUILTIN) || instance.simpleName == \"abort\");\r\n\r\n    var declaration = instance.prototype.declaration;\r\n    if (instance.is(ElementFlags.DECLARED)) {\r\n      if (declaration.statements) {\r\n        this.error(DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts, declaration.name.range);\r\n        return false;\r\n      }\r\n    } else if (!declaration.statements) {\r\n      this.error(DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration, declaration.name.range);\r\n      return false;\r\n    }\r\n\r\n    // might trigger compilation of other functions referring to this one\r\n    instance.set(ElementFlags.COMPILED);\r\n\r\n    // compile statements\r\n    var stmts: ExpressionRef[] | null = null;\r\n    if (!instance.is(ElementFlags.DECLARED)) {\r\n      var previousFunction = this.currentFunction;\r\n      this.currentFunction = instance;\r\n      var statements = assert(declaration.statements, \"implementation expected\");\r\n      stmts = this.compileStatements(statements);\r\n      // make sure the top-level branch or all child branches return\r\n      var allBranchesReturn = this.currentFunction.flow.finalize();\r\n      if (instance.returnType != Type.void && !allBranchesReturn)\r\n        this.error(DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value, assert(declaration.returnType, \"return type expected\").range);\r\n      this.currentFunction = previousFunction;\r\n    }\r\n\r\n    // create the function type\r\n    var numParameters = instance.parameters.length;\r\n    var numParametersInclThis = instance.instanceMethodOf ? numParameters + 1 : numParameters;\r\n    var paramIndex = 0;\r\n\r\n    var nativeResultType = instance.returnType.toNativeType();\r\n    var nativeParamTypes = new Array<NativeType>(numParametersInclThis);\r\n    var signatureNameParts = new Array<string>(numParametersInclThis + 1);\r\n\r\n    if (instance.instanceMethodOf) {\r\n      nativeParamTypes[paramIndex] = this.options.target == Target.WASM64 ? NativeType.I64 : NativeType.I32;\r\n      signatureNameParts[paramIndex++] = instance.instanceMethodOf.type.toSignatureString();\r\n    }\r\n    for (var i = 0; i < numParameters; ++i) {\r\n      nativeParamTypes[paramIndex] = instance.parameters[i].type.toNativeType();\r\n      signatureNameParts[paramIndex++] = instance.parameters[i].type.toSignatureString();\r\n    }\r\n    signatureNameParts[paramIndex] = instance.returnType.toSignatureString();\r\n    var typeRef = this.module.getFunctionTypeBySignature(nativeResultType, nativeParamTypes);\r\n    if (!typeRef)\r\n      typeRef = this.module.addFunctionType(signatureNameParts.join(\"\"), nativeResultType, nativeParamTypes);\r\n\r\n    // create the function\r\n    var ref: FunctionRef;\r\n    if (instance.is(ElementFlags.DECLARED))\r\n      ref = this.module.addFunctionImport(instance.internalName, instance.prototype.namespace ? instance.prototype.namespace.simpleName : \"env\", instance.simpleName, typeRef);\r\n    else\r\n      ref = this.module.addFunction(instance.internalName, typeRef, typesToNativeTypes(instance.additionalLocals), this.module.createBlock(null, <ExpressionRef[]>stmts, NativeType.None));\r\n\r\n    // check module export\r\n    if (declaration.range.source.isEntry && declaration.isTopLevelExport)\r\n      this.module.addFunctionExport(instance.internalName, declaration.name.text);\r\n\r\n    instance.finalize(this.module, ref);\r\n    return true;\r\n  }\r\n\r\n  // namespaces\r\n\r\n  compileNamespaceDeclaration(declaration: NamespaceDeclaration): void {\r\n    var members = declaration.members;\r\n    var noTreeShaking = this.options.noTreeShaking;\r\n    for (var i = 0, k = members.length; i < k; ++i) {\r\n      var member = members[i];\r\n      switch (member.kind) {\r\n\r\n        case NodeKind.CLASSDECLARATION:\r\n          if ((noTreeShaking || hasModifier(ModifierKind.EXPORT, (<ClassDeclaration>member).modifiers)) && !(<ClassDeclaration>member).typeParameters.length)\r\n            this.compileClassDeclaration(<ClassDeclaration>member, []);\r\n          break;\r\n\r\n        case NodeKind.INTERFACEDECLARATION:\r\n          if ((noTreeShaking || hasModifier(ModifierKind.EXPORT, (<InterfaceDeclaration>member).modifiers)) && !(<InterfaceDeclaration>member).typeParameters.length)\r\n            this.compileInterfaceDeclaration(<InterfaceDeclaration>member, []);\r\n          break;\r\n\r\n        case NodeKind.ENUMDECLARATION:\r\n          if (noTreeShaking || hasModifier(ModifierKind.EXPORT, (<EnumDeclaration>member).modifiers))\r\n            this.compileEnumDeclaration(<EnumDeclaration>member);\r\n          break;\r\n\r\n        case NodeKind.FUNCTIONDECLARATION:\r\n          if ((noTreeShaking || hasModifier(ModifierKind.EXPORT, (<FunctionDeclaration>member).modifiers)) && !(<FunctionDeclaration>member).typeParameters.length)\r\n            this.compileFunctionDeclaration(<FunctionDeclaration>member, []);\r\n          break;\r\n\r\n        case NodeKind.NAMESPACEDECLARATION:\r\n          if (noTreeShaking || hasModifier(ModifierKind.EXPORT, (<NamespaceDeclaration>member).modifiers))\r\n            this.compileNamespaceDeclaration(<NamespaceDeclaration>member);\r\n          break;\r\n\r\n        case NodeKind.VARIABLE:\r\n          if (noTreeShaking || hasModifier(ModifierKind.EXPORT, (<VariableStatement>member).modifiers)) {\r\n            var variableInit = this.compileVariableStatement(<VariableStatement>member, true);\r\n            if (variableInit)\r\n              this.startFunctionBody.push(variableInit);\r\n          }\r\n          break;\r\n\r\n        default:\r\n          throw new Error(\"namespace member expected\");\r\n      }\r\n    }\r\n  }\r\n\r\n  compileNamespace(ns: Namespace): void {\r\n    if (!ns.members)\r\n      return;\r\n\r\n    var noTreeShaking = this.options.noTreeShaking;\r\n    for (var element of ns.members.values()) {\r\n      switch (element.kind) {\r\n\r\n        case ElementKind.CLASS_PROTOTYPE:\r\n          if ((noTreeShaking || (<ClassPrototype>element).is(ElementFlags.EXPORTED)) && !(<ClassPrototype>element).is(ElementFlags.GENERIC))\r\n            this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\r\n          break;\r\n\r\n        case ElementKind.ENUM:\r\n          this.compileEnum(<Enum>element);\r\n          break;\r\n\r\n        case ElementKind.FUNCTION_PROTOTYPE:\r\n          if ((noTreeShaking || (<FunctionPrototype>element).is(ElementFlags.EXPORTED)) && !(<FunctionPrototype>element).is(ElementFlags.GENERIC))\r\n            this.compileFunctionUsingTypeArguments(<FunctionPrototype>element, [], null, (<FunctionPrototype>element).declaration.name);\r\n          break;\r\n\r\n        case ElementKind.GLOBAL:\r\n          this.compileGlobal(<Global>element);\r\n          break;\r\n\r\n        case ElementKind.NAMESPACE:\r\n          this.compileNamespace(<Namespace>element);\r\n          break;\r\n      }\r\n    }\r\n  }\r\n\r\n  // exports\r\n\r\n  compileExportStatement(statement: ExportStatement): void {\r\n    var members = statement.members;\r\n    for (var i = 0, k = members.length; i < k; ++i) {\r\n      var member = members[i];\r\n      var internalExportName = statement.range.source.internalPath + PATH_DELIMITER + member.externalName.text;\r\n      var element = this.program.exports.get(internalExportName);\r\n      if (!element) // reported in Program#initialize\r\n        continue;\r\n      switch (element.kind) {\r\n\r\n        case ElementKind.CLASS_PROTOTYPE:\r\n          if (!(<ClassPrototype>element).is(ElementFlags.GENERIC))\r\n            this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\r\n          break;\r\n\r\n        case ElementKind.ENUM:\r\n          this.compileEnum(<Enum>element);\r\n          break;\r\n\r\n        case ElementKind.FUNCTION_PROTOTYPE:\r\n          if (!(<FunctionPrototype>element).is(ElementFlags.GENERIC) && statement.range.source.isEntry) {\r\n            var functionInstance = this.compileFunctionUsingTypeArguments(<FunctionPrototype>element, [], null, (<FunctionPrototype>element).declaration.name);\r\n            if (functionInstance) {\r\n              var functionDeclaration = functionInstance.prototype.declaration;\r\n              if (functionDeclaration && functionDeclaration.needsExplicitExport(member))\r\n                this.module.addFunctionExport(functionInstance.internalName, member.externalName.text);\r\n            }\r\n          }\r\n          break;\r\n\r\n        case ElementKind.GLOBAL:\r\n          if (this.compileGlobal(<Global>element) && statement.range.source.isEntry) {\r\n            var globalDeclaration = (<Global>element).declaration;\r\n            if (globalDeclaration && globalDeclaration.needsExplicitExport(member)) {\r\n              if ((<Global>element).is(ElementFlags.INLINED))\r\n                  this.module.addGlobalExport(element.internalName, member.externalName.text);\r\n              else\r\n                this.warning(DiagnosticCode.Cannot_export_a_mutable_global, member.range);\r\n            }\r\n          }\r\n          break;\r\n\r\n        case ElementKind.NAMESPACE:\r\n          this.compileNamespace(<Namespace>element);\r\n          break;\r\n      }\r\n    }\r\n  }\r\n\r\n  // classes\r\n\r\n  compileClassDeclaration(declaration: ClassDeclaration, typeArguments: TypeNode[], contextualTypeArguments: Map<string,Type> | null = null, alternativeReportNode: Node | null = null): void {\r\n    var element = this.program.elements.get(declaration.fileLevelInternalName);\r\n    if (!element || element.kind != ElementKind.CLASS_PROTOTYPE)\r\n      throw new Error(\"class expected\");\r\n    this.compileClassUsingTypeArguments(<ClassPrototype>element, typeArguments, contextualTypeArguments, alternativeReportNode);\r\n  }\r\n\r\n  compileClassUsingTypeArguments(prototype: ClassPrototype, typeArguments: TypeNode[], contextualTypeArguments: Map<string,Type> | null = null, alternativeReportNode: Node | null = null): void {\r\n    var instance = prototype.resolveInclTypeArguments(typeArguments, contextualTypeArguments, alternativeReportNode);\r\n    if (!instance)\r\n      return;\r\n    this.compileClass(instance);\r\n  }\r\n\r\n  compileClass(instance: Class): bool {\r\n    if (instance.is(ElementFlags.COMPILED))\r\n      return true;\r\n    instance.set(ElementFlags.COMPILED);\r\n    return true;\r\n  }\r\n\r\n  compileInterfaceDeclaration(declaration: InterfaceDeclaration, typeArguments: TypeNode[], contextualTypeArguments: Map<string,Type> | null = null, alternativeReportNode: Node | null = null): void {\r\n    throw new Error(\"not implemented\");\r\n  }\r\n\r\n  // memory\r\n\r\n  /** Adds a static memory segment with the specified data.  */\r\n  addMemorySegment(buffer: Uint8Array, alignment: i32 = 8): MemorySegment {\r\n    var memoryOffset = i64_align(this.memoryOffset, alignment);\r\n    var segment = MemorySegment.create(buffer, memoryOffset);\r\n    this.memorySegments.push(segment);\r\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length, 0));\r\n    return segment;\r\n  }\r\n\r\n  // statements\r\n\r\n  compileStatement(statement: Statement): ExpressionRef {\r\n    var expr: ExpressionRef;\r\n    switch (statement.kind) {\r\n\r\n      case NodeKind.BLOCK:\r\n        expr = this.compileBlockStatement(<BlockStatement>statement);\r\n        break;\r\n\r\n      case NodeKind.BREAK:\r\n        expr = this.compileBreakStatement(<BreakStatement>statement);\r\n        break;\r\n\r\n      case NodeKind.CONTINUE:\r\n        expr = this.compileContinueStatement(<ContinueStatement>statement);\r\n        break;\r\n\r\n      case NodeKind.DO:\r\n        expr = this.compileDoStatement(<DoStatement>statement);\r\n        break;\r\n\r\n      case NodeKind.EMPTY:\r\n        expr = this.compileEmptyStatement(<EmptyStatement>statement);\r\n        break;\r\n\r\n      case NodeKind.EXPRESSION:\r\n        expr = this.compileExpressionStatement(<ExpressionStatement>statement);\r\n        break;\r\n\r\n      case NodeKind.FOR:\r\n        expr = this.compileForStatement(<ForStatement>statement);\r\n        break;\r\n\r\n      case NodeKind.IF:\r\n        expr = this.compileIfStatement(<IfStatement>statement);\r\n        break;\r\n\r\n      case NodeKind.RETURN:\r\n        expr = this.compileReturnStatement(<ReturnStatement>statement);\r\n        break;\r\n\r\n      case NodeKind.SWITCH:\r\n        expr = this.compileSwitchStatement(<SwitchStatement>statement);\r\n        break;\r\n\r\n      case NodeKind.THROW:\r\n        expr = this.compileThrowStatement(<ThrowStatement>statement);\r\n        break;\r\n\r\n      case NodeKind.TRY:\r\n        expr = this.compileTryStatement(<TryStatement>statement);\r\n        break;\r\n\r\n      case NodeKind.VARIABLE:\r\n        var variableInit = this.compileVariableStatement(<VariableStatement>statement);\r\n        expr = variableInit ? variableInit : this.module.createNop();\r\n        break;\r\n\r\n      case NodeKind.WHILE:\r\n        expr = this.compileWhileStatement(<WhileStatement>statement);\r\n        break;\r\n\r\n      case NodeKind.TYPEDECLARATION:\r\n        if (this.currentFunction == this.startFunction)\r\n          return this.module.createNop();\r\n        // fall-through: must be top-level; function bodies are not guaranteed to be evaluated\r\n\r\n      default:\r\n        throw new Error(\"statement expected\");\r\n    }\r\n\r\n    this.addDebugLocation(expr, statement.range);\r\n    return expr;\r\n  }\r\n\r\n  compileStatements(statements: Statement[]): ExpressionRef[] {\r\n    var k = statements.length;\r\n    var stmts = new Array<ExpressionRef>(k);\r\n    for (var i = 0; i < k; ++i)\r\n      stmts[i] = this.compileStatement(statements[i]);\r\n    return stmts; // array of 0-es in noEmit-mode\r\n  }\r\n\r\n  compileBlockStatement(statement: BlockStatement): ExpressionRef {\r\n    var statements = statement.statements;\r\n\r\n    // NOTE that we could optimize this to a NOP if empty or unwrap a single\r\n    // statement, but that's not what the source told us to do and left to the\r\n    // optimizer.\r\n\r\n    // Not actually a branch, but can contain its own scoped variables.\r\n    this.currentFunction.flow = this.currentFunction.flow.enterBranchOrScope();\r\n\r\n    var stmt = this.module.createBlock(null, this.compileStatements(statements), NativeType.None);\r\n    var stmtReturns = this.currentFunction.flow.is(FlowFlags.RETURNS);\r\n\r\n    // Switch back to the parent flow\r\n    this.currentFunction.flow = this.currentFunction.flow.leaveBranchOrScope();\r\n    if (stmtReturns)\r\n      this.currentFunction.flow.set(FlowFlags.RETURNS);\r\n\r\n    return stmt;\r\n  }\r\n\r\n  compileBreakStatement(statement: BreakStatement): ExpressionRef {\r\n    if (statement.label) {\r\n      this.error(DiagnosticCode.Operation_not_supported, statement.label.range);\r\n      return this.module.createUnreachable();\r\n    }\r\n    var breakLabel = this.currentFunction.flow.breakLabel;\r\n    if (breakLabel == null) {\r\n      this.error(DiagnosticCode.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement, statement.range);\r\n      return this.module.createUnreachable();\r\n    }\r\n    this.currentFunction.flow.set(FlowFlags.POSSIBLY_BREAKS);\r\n    return this.module.createBreak(breakLabel);\r\n  }\r\n\r\n  compileContinueStatement(statement: ContinueStatement): ExpressionRef {\r\n    if (statement.label) {\r\n      this.error(DiagnosticCode.Operation_not_supported, statement.label.range);\r\n      return this.module.createUnreachable();\r\n    }\r\n    // Check if 'continue' is allowed here\r\n    var continueLabel = this.currentFunction.flow.continueLabel;\r\n    if (continueLabel == null) {\r\n      this.error(DiagnosticCode.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement, statement.range);\r\n      return this.module.createUnreachable();\r\n    }\r\n    this.currentFunction.flow.set(FlowFlags.POSSIBLY_CONTINUES);\r\n    return this.module.createBreak(continueLabel);\r\n  }\r\n\r\n  compileDoStatement(statement: DoStatement): ExpressionRef {\r\n\r\n    // A do statement does not initiate a new branch because it is executed at\r\n    // least once, but has its own break and continue labels.\r\n    var label = this.currentFunction.enterBreakContext();\r\n    var previousBreakLabel = this.currentFunction.flow.breakLabel;\r\n    var previousContinueLabel = this.currentFunction.flow.continueLabel;\r\n    var breakLabel = this.currentFunction.flow.breakLabel = \"break|\" + label;\r\n    var continueLabel = this.currentFunction.flow.continueLabel = \"continue|\" + label;\r\n\r\n    var body = this.compileStatement(statement.statement);\r\n\r\n    // Reset to the previous break and continue labels, if any.\r\n    this.currentFunction.flow.breakLabel = previousBreakLabel;\r\n    this.currentFunction.flow.continueLabel = previousContinueLabel;\r\n\r\n    var condition = this.compileExpression(statement.condition, Type.i32);\r\n\r\n    this.currentFunction.leaveBreakContext();\r\n\r\n    return this.module.createBlock(breakLabel, [\r\n      this.module.createLoop(continueLabel,\r\n        this.module.createBlock(null, [\r\n          body,\r\n          this.module.createBreak(continueLabel, condition)\r\n        ], NativeType.None))\r\n    ], NativeType.None);\r\n  }\r\n\r\n  compileEmptyStatement(statement: EmptyStatement): ExpressionRef {\r\n    return this.module.createNop();\r\n  }\r\n\r\n  compileExpressionStatement(statement: ExpressionStatement): ExpressionRef {\r\n    var expr = this.compileExpression(statement.expression, Type.void, ConversionKind.NONE);\r\n    if (this.currentType != Type.void) {\r\n      expr = this.module.createDrop(expr);\r\n      this.currentType = Type.void;\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  compileForStatement(statement: ForStatement): ExpressionRef {\r\n\r\n    // A for statement initiates a new branch with its own scoped variables\r\n    // possibly declared in its initializer, and break context.\r\n    var context = this.currentFunction.enterBreakContext();\r\n    this.currentFunction.flow = this.currentFunction.flow.enterBranchOrScope();\r\n    var breakLabel = this.currentFunction.flow.breakLabel = \"break|\" + context;\r\n    var continueLabel = this.currentFunction.flow.continueLabel = \"continue|\" + context;\r\n\r\n    // Compile in correct order\r\n    var initializer = statement.initializer ? this.compileStatement(<Statement>statement.initializer) : this.module.createNop();\r\n    var condition = statement.condition ? this.compileExpression(<Expression>statement.condition, Type.i32) : this.module.createI32(1);\r\n    var incrementor = statement.incrementor ? this.compileExpression(<Expression>statement.incrementor, Type.void) : this.module.createNop();\r\n    var body = this.compileStatement(statement.statement);\r\n    var alwaysReturns = !statement.condition && this.currentFunction.flow.is(FlowFlags.RETURNS);\r\n    // TODO: check other always-true conditions as well, not just omitted\r\n\r\n    // Switch back to the parent flow\r\n    this.currentFunction.flow = this.currentFunction.flow.leaveBranchOrScope();\r\n    this.currentFunction.leaveBreakContext();\r\n\r\n    var expr = this.module.createBlock(breakLabel, [\r\n      initializer,\r\n      this.module.createLoop(continueLabel, this.module.createBlock(null, [\r\n        this.module.createIf(condition, this.module.createBlock(null, [\r\n          body,\r\n          incrementor,\r\n          this.module.createBreak(continueLabel)\r\n        ], NativeType.None))\r\n      ], NativeType.None))\r\n    ], NativeType.None);\r\n\r\n    // If the loop is guaranteed to run and return, propagate that and append a hint\r\n    if (alwaysReturns) {\r\n      this.currentFunction.flow.set(FlowFlags.RETURNS);\r\n      expr = this.module.createBlock(null, [\r\n        expr,\r\n        this.module.createUnreachable()\r\n      ]);\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  compileIfStatement(statement: IfStatement): ExpressionRef {\r\n\r\n    // The condition doesn't initiate a branch yet\r\n    var condition = this.compileExpression(statement.condition, Type.i32);\r\n\r\n    // Each arm initiates a branch\r\n    this.currentFunction.flow = this.currentFunction.flow.enterBranchOrScope();\r\n    var ifTrue = this.compileStatement(statement.ifTrue);\r\n    var ifTrueReturns = this.currentFunction.flow.is(FlowFlags.RETURNS);\r\n    this.currentFunction.flow = this.currentFunction.flow.leaveBranchOrScope();\r\n\r\n    var ifFalse: ExpressionRef = 0;\r\n    var ifFalseReturns = false;\r\n    if (statement.ifFalse) {\r\n      this.currentFunction.flow = this.currentFunction.flow.enterBranchOrScope();\r\n      ifFalse = this.compileStatement(statement.ifFalse);\r\n      ifFalseReturns = this.currentFunction.flow.is(FlowFlags.RETURNS);\r\n      this.currentFunction.flow = this.currentFunction.flow.leaveBranchOrScope();\r\n    }\r\n    if (ifTrueReturns && ifFalseReturns) // not necessary to append a hint\r\n      this.currentFunction.flow.set(FlowFlags.RETURNS);\r\n    return this.module.createIf(condition, ifTrue, ifFalse);\r\n  }\r\n\r\n  compileReturnStatement(statement: ReturnStatement): ExpressionRef {\r\n    var expression: ExpressionRef = 0;\r\n    if (statement.value)\r\n      expression = this.compileExpression(<Expression>statement.value, this.currentFunction.returnType);\r\n\r\n    // Remember that this flow returns\r\n    this.currentFunction.flow.set(FlowFlags.RETURNS);\r\n\r\n    return this.module.createReturn(expression);\r\n  }\r\n\r\n  compileSwitchStatement(statement: SwitchStatement): ExpressionRef {\r\n\r\n    // Everything within a switch uses the same break context\r\n    var context = this.currentFunction.enterBreakContext();\r\n\r\n    // introduce a local for evaluating the condition (exactly once)\r\n    var tempLocal = this.currentFunction.getTempLocal(Type.i32);\r\n    var k = statement.cases.length;\r\n\r\n    // Prepend initializer to inner block. Does not initiate a new branch, yet.\r\n    var breaks = new Array<ExpressionRef>(1 + k);\r\n    breaks[0] = this.module.createSetLocal(tempLocal.index, this.compileExpression(statement.condition, Type.i32)); // initializer\r\n\r\n    // make one br_if per (possibly dynamic) labeled case (binaryen optimizes to br_table where possible)\r\n    var breakIndex = 1;\r\n    var defaultIndex = -1;\r\n    for (var i = 0; i < k; ++i) {\r\n      var case_ = statement.cases[i];\r\n      if (case_.label) {\r\n        breaks[breakIndex++] = this.module.createBreak(\"case\" + i.toString(10) + \"|\" + context,\r\n          this.module.createBinary(BinaryOp.EqI32,\r\n            this.module.createGetLocal(tempLocal.index, NativeType.I32),\r\n            this.compileExpression(case_.label, Type.i32)\r\n          )\r\n        );\r\n      } else\r\n        defaultIndex = i;\r\n    }\r\n\r\n    this.currentFunction.freeTempLocal(tempLocal);\r\n\r\n    // otherwise br to default respectively out of the switch if there is no default case\r\n    breaks[breakIndex] = this.module.createBreak((defaultIndex >= 0\r\n        ? \"case\" + defaultIndex.toString(10)\r\n        : \"break\"\r\n      ) + \"|\" + context);\r\n\r\n    // nest blocks in order\r\n    var currentBlock = this.module.createBlock(\"case0|\" + context, breaks, NativeType.None);\r\n    var alwaysReturns = true;\r\n    for (i = 0; i < k; ++i) {\r\n      case_ = statement.cases[i];\r\n      var l = case_.statements.length;\r\n      var body = new Array<ExpressionRef>(1 + l);\r\n      body[0] = currentBlock;\r\n\r\n      // Each switch case initiates a new branch\r\n      this.currentFunction.flow = this.currentFunction.flow.enterBranchOrScope();\r\n      var breakLabel = this.currentFunction.flow.breakLabel = \"break|\" + context;\r\n\r\n      var fallsThrough = i != k - 1;\r\n      var nextLabel = !fallsThrough ? breakLabel : \"case\" + (i + 1).toString(10) + \"|\" + context;\r\n      for (var j = 0; j < l; ++j) {\r\n        body[j + 1] = this.compileStatement(case_.statements[j]);\r\n      }\r\n      if (!(fallsThrough || this.currentFunction.flow.is(FlowFlags.RETURNS)))\r\n        alwaysReturns = false; // ignore fall-throughs\r\n\r\n      // Switch back to the parent flow\r\n      this.currentFunction.flow = this.currentFunction.flow.leaveBranchOrScope();\r\n\r\n      currentBlock = this.module.createBlock(nextLabel, body, NativeType.None);\r\n    }\r\n    this.currentFunction.leaveBreakContext();\r\n\r\n    // If the switch has a default and always returns, propagate that\r\n    if (defaultIndex >= 0 && alwaysReturns) {\r\n      this.currentFunction.flow.set(FlowFlags.RETURNS);\r\n      // Binaryen understands that so we don't need a hint\r\n    }\r\n    return currentBlock;\r\n  }\r\n\r\n  compileThrowStatement(statement: ThrowStatement): ExpressionRef {\r\n\r\n    // Remember that this branch possibly throws\r\n    this.currentFunction.flow.set(FlowFlags.POSSIBLY_THROWS);\r\n\r\n    // FIXME: without try-catch it is safe to assume RETURNS as well for now\r\n    this.currentFunction.flow.set(FlowFlags.RETURNS);\r\n\r\n    // TODO: requires exception-handling spec.\r\n    return this.module.createUnreachable();\r\n  }\r\n\r\n  compileTryStatement(statement: TryStatement): ExpressionRef {\r\n    throw new Error(\"not implemented\");\r\n    // can't yet support something like: try { return ... } finally { ... }\r\n    // worthwhile to investigate lowering returns to block results (here)?\r\n  }\r\n\r\n  /**\r\n   * Compiles a variable statement. Returns `0` if an initializer is not\r\n   * necessary.\r\n   */\r\n  compileVariableStatement(statement: VariableStatement, isKnownGlobal: bool = false): ExpressionRef {\r\n    var declarations = statement.declarations;\r\n\r\n    // top-level variables and constants become globals\r\n    if (isKnownGlobal || (\r\n      this.currentFunction == this.startFunction &&\r\n      statement.parent && statement.parent.kind == NodeKind.SOURCE\r\n    )) {\r\n      // NOTE that the above condition also covers top-level variables declared with 'let', even\r\n      // though such variables could also become start function locals if, and only if, not used\r\n      // within any function declared in the same source, which is unknown at this point. the only\r\n      // efficient way to deal with this would be to keep track of all occasions it is used and\r\n      // replace these instructions afterwards, dynamically. (TOOD: what about a Binaryen pass?)\r\n      for (var i = 0, k = declarations.length; i < k; ++i)\r\n        this.compileGlobalDeclaration(declarations[i]);\r\n      return 0;\r\n    }\r\n\r\n    // other variables become locals\r\n    var initializers = new Array<ExpressionRef>();\r\n    for (i = 0, k = declarations.length; i < k; ++i) {\r\n      var declaration = declarations[i];\r\n      var name = declaration.name.text;\r\n      var type: Type | null = null;\r\n      var init: ExpressionRef = 0;\r\n      if (declaration.type) {\r\n        type = this.program.resolveType(<TypeNode>declaration.type, this.currentFunction.contextualTypeArguments, true); // reports\r\n        if (!type)\r\n          continue;\r\n        if (declaration.initializer)\r\n          init = this.compileExpression(declaration.initializer, type); // reports\r\n      } else if (declaration.initializer) { // infer type using void/NONE for proper literal inference\r\n        init = this.compileExpression(declaration.initializer, Type.void, ConversionKind.NONE); // reports\r\n        if (this.currentType == Type.void) {\r\n          this.error(DiagnosticCode.Type_0_is_not_assignable_to_type_1, declaration.range, this.currentType.toString(), \"<auto>\");\r\n          continue;\r\n        }\r\n        type = this.currentType;\r\n      } else {\r\n        this.error(DiagnosticCode.Type_expected, declaration.name.range.atEnd);\r\n        continue;\r\n      }\r\n      if (hasModifier(ModifierKind.CONST, declaration.modifiers)) {\r\n        if (init) {\r\n          init = this.precomputeExpressionRef(init);\r\n          if (_BinaryenExpressionGetId(init) == ExpressionId.Const) {\r\n            var local = new Local(this.program, name, -1, type);\r\n            switch (_BinaryenExpressionGetType(init)) {\r\n              case NativeType.I32:\r\n                local = local.withConstantIntegerValue(_BinaryenConstGetValueI32(init), 0);\r\n                break;\r\n              case NativeType.I64:\r\n                local = local.withConstantIntegerValue(_BinaryenConstGetValueI64Low(init), _BinaryenConstGetValueI64High(init));\r\n                break;\r\n              case NativeType.F32:\r\n                local = local.withConstantFloatValue(<f64>_BinaryenConstGetValueF32(init));\r\n                break;\r\n              case NativeType.F64:\r\n                local = local.withConstantFloatValue(_BinaryenConstGetValueF64(init));\r\n                break;\r\n              default:\r\n                throw new Error(\"concrete type expected\");\r\n            }\r\n            // Create a virtual local that doesn't actually exist in WebAssembly\r\n            var scopedLocals = this.currentFunction.flow.scopedLocals;\r\n            if (!scopedLocals)\r\n              scopedLocals = this.currentFunction.flow.scopedLocals = new Map();\r\n            else if (scopedLocals.has(name)) {\r\n              this.error(DiagnosticCode.Duplicate_identifier_0, declaration.name.range, name);\r\n              return 0;\r\n            }\r\n            scopedLocals.set(name, local);\r\n            return 0;\r\n          } else\r\n            this.warning(DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable, declaration.range);\r\n        } else\r\n          this.error(DiagnosticCode._const_declarations_must_be_initialized, declaration.range);\r\n      }\r\n      if (hasModifier(ModifierKind.LET, declaration.modifiers)) // here: not top-level\r\n        this.currentFunction.flow.addScopedLocal(name, type, declaration.name); // reports\r\n      else\r\n        this.currentFunction.addLocal(type, name); // reports\r\n      if (init)\r\n        initializers.push(this.compileAssignmentWithValue(declaration.name, init));\r\n    }\r\n    return initializers.length     // we can unwrap these here because the\r\n        ? initializers.length == 1 // source didn't tell us exactly what to do\r\n          ? initializers[0]\r\n          : this.module.createBlock(null, initializers, NativeType.None)\r\n        : 0;\r\n  }\r\n\r\n  compileWhileStatement(statement: WhileStatement): ExpressionRef {\r\n\r\n    // The condition does not yet initialize a branch\r\n    var condition = this.compileExpression(statement.condition, Type.i32);\r\n\r\n    // Statements initiate a new branch with its own break context\r\n    var label = this.currentFunction.enterBreakContext();\r\n    this.currentFunction.flow = this.currentFunction.flow.enterBranchOrScope();\r\n    var breakLabel = this.currentFunction.flow.breakLabel = \"break|\" + label;\r\n    var continueLabel = this.currentFunction.flow.continueLabel = \"continue|\" + label;\r\n\r\n    var body = this.compileStatement(statement.statement);\r\n    var alwaysReturns = false && this.currentFunction.flow.is(FlowFlags.RETURNS);\r\n    // TODO: evaluate possible always-true conditions\r\n\r\n    // Switch back to the parent flow\r\n    this.currentFunction.flow = this.currentFunction.flow.leaveBranchOrScope();\r\n    this.currentFunction.leaveBreakContext();\r\n\r\n    var expr = this.module.createBlock(breakLabel, [\r\n      this.module.createLoop(continueLabel,\r\n        this.module.createIf(condition, this.module.createBlock(null, [\r\n          body,\r\n          this.module.createBreak(continueLabel)\r\n        ], NativeType.None))\r\n      )\r\n    ], NativeType.None);\r\n\r\n    // If the loop is guaranteed to run and return, propagate that and append a hint\r\n    if (alwaysReturns) {\r\n      expr = this.module.createBlock(null, [\r\n        expr,\r\n        this.module.createUnreachable()\r\n      ]);\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  // expressions\r\n\r\n  /** Compiles an inlined constant value of a variable-like element. */\r\n  compileInlineConstant(element: VariableLikeElement, contextualType: Type): ExpressionRef {\r\n    assert(element.is(ElementFlags.INLINED));\r\n\r\n    switch (element.type.is(TypeFlags.INTEGER) && contextualType.is(TypeFlags.INTEGER) && element.type.size < contextualType.size\r\n      ? (this.currentType = contextualType).kind // essentially precomputes a (sign-)extension\r\n      : (this.currentType = element.type).kind\r\n    ) {\r\n\r\n      case TypeKind.I8:\r\n      case TypeKind.I16:\r\n        var shift = element.type.computeSmallIntegerShift(Type.i32);\r\n        return this.module.createI32(element.constantValueKind == ConstantValueKind.INTEGER ? i64_low(element.constantIntegerValue) << shift >> shift : 0);\r\n\r\n      case TypeKind.U8:\r\n      case TypeKind.U16:\r\n      case TypeKind.BOOL:\r\n        var mask = element.type.computeSmallIntegerMask(Type.i32);\r\n        return this.module.createI32(element.constantValueKind == ConstantValueKind.INTEGER ? i64_low(element.constantIntegerValue) & mask : 0);\r\n\r\n      case TypeKind.I32:\r\n      case TypeKind.U32:\r\n        return this.module.createI32(element.constantValueKind == ConstantValueKind.INTEGER ? i64_low(element.constantIntegerValue) : 0)\r\n\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE:\r\n        if (!element.program.options.isWasm64)\r\n          return this.module.createI32(element.constantValueKind == ConstantValueKind.INTEGER ? i64_low(element.constantIntegerValue) : 0)\r\n        // fall-through\r\n\r\n      case TypeKind.I64:\r\n      case TypeKind.U64:\r\n        return element.constantValueKind == ConstantValueKind.INTEGER\r\n          ? this.module.createI64(i64_low(element.constantIntegerValue), i64_high(element.constantIntegerValue))\r\n          : this.module.createI64(0);\r\n\r\n      case TypeKind.F32:\r\n        return this.module.createF32((<VariableLikeElement>element).constantFloatValue); // safe because it's a 'number' in JS\r\n\r\n      case TypeKind.F64:\r\n        return this.module.createF64((<VariableLikeElement>element).constantFloatValue);\r\n\r\n      default:\r\n        throw new Error(\"concrete type expected\");\r\n    }\r\n  }\r\n\r\n  compileExpression(expression: Expression, contextualType: Type, conversionKind: ConversionKind = ConversionKind.IMPLICIT, wrapSmallIntegers: bool = true): ExpressionRef {\r\n    this.currentType = contextualType;\r\n\r\n    var expr: ExpressionRef;\r\n    switch (expression.kind) {\r\n\r\n      case NodeKind.ASSERTION:\r\n        expr = this.compileAssertionExpression(<AssertionExpression>expression, contextualType);\r\n        break;\r\n\r\n      case NodeKind.BINARY:\r\n        expr = this.compileBinaryExpression(<BinaryExpression>expression, contextualType, wrapSmallIntegers);\r\n        break;\r\n\r\n      case NodeKind.CALL:\r\n        expr = this.compileCallExpression(<CallExpression>expression, contextualType);\r\n        break;\r\n\r\n      case NodeKind.COMMA:\r\n        expr = this.compileCommaExpression(<CommaExpression>expression, contextualType);\r\n        break;\r\n\r\n      case NodeKind.ELEMENTACCESS:\r\n        expr = this.compileElementAccessExpression(<ElementAccessExpression>expression, contextualType);\r\n        break;\r\n\r\n      case NodeKind.IDENTIFIER:\r\n      case NodeKind.FALSE:\r\n      case NodeKind.NULL:\r\n      case NodeKind.THIS:\r\n      case NodeKind.TRUE:\r\n        expr = this.compileIdentifierExpression(<IdentifierExpression>expression, contextualType);\r\n        break;\r\n\r\n      case NodeKind.LITERAL:\r\n        expr = this.compileLiteralExpression(<LiteralExpression>expression, contextualType);\r\n        break;\r\n\r\n      case NodeKind.NEW:\r\n        expr = this.compileNewExpression(<NewExpression>expression, contextualType);\r\n        break;\r\n\r\n      case NodeKind.PARENTHESIZED:\r\n        expr = this.compileParenthesizedExpression(<ParenthesizedExpression>expression, contextualType);\r\n        break;\r\n\r\n      case NodeKind.PROPERTYACCESS:\r\n        expr = this.compilePropertyAccessExpression(<PropertyAccessExpression>expression, contextualType);\r\n        break;\r\n\r\n      case NodeKind.TERNARY:\r\n        expr = this.compileTernaryExpression(<TernaryExpression>expression, contextualType);\r\n        break;\r\n\r\n      case NodeKind.UNARYPOSTFIX:\r\n        expr = this.compileUnaryPostfixExpression(<UnaryPostfixExpression>expression, contextualType);\r\n        break;\r\n\r\n      case NodeKind.UNARYPREFIX:\r\n        expr = this.compileUnaryPrefixExpression(<UnaryPrefixExpression>expression, contextualType, wrapSmallIntegers);\r\n        break;\r\n\r\n      default:\r\n        throw new Error(\"expression expected\");\r\n    }\r\n\r\n    if (conversionKind != ConversionKind.NONE && this.currentType != contextualType) {\r\n      expr = this.convertExpression(expr, this.currentType, contextualType, conversionKind, expression);\r\n      this.currentType = contextualType;\r\n    }\r\n\r\n    this.addDebugLocation(expr, expression.range);\r\n    return expr;\r\n  }\r\n\r\n  precomputeExpression(expression: Expression, contextualType: Type, conversionKind: ConversionKind = ConversionKind.IMPLICIT): ExpressionRef {\r\n    return this.precomputeExpressionRef(this.compileExpression(expression, contextualType, conversionKind));\r\n  }\r\n\r\n  precomputeExpressionRef(expr: ExpressionRef): ExpressionRef {\r\n    var nativeType = this.currentType.toNativeType();\r\n    var typeRef = this.module.getFunctionTypeBySignature(nativeType, []);\r\n    var typeRefAdded = false;\r\n    if (!typeRef) {\r\n      typeRef = this.module.addFunctionType(this.currentType.toSignatureString(), nativeType, []);\r\n      typeRefAdded = true;\r\n    }\r\n    var funcRef = this.module.addFunction(\"__precompute\", typeRef, [], expr);\r\n    this.module.runPasses([ \"precompute\" ], funcRef);\r\n    var ret = _BinaryenFunctionGetBody(funcRef);\r\n    this.module.removeFunction(\"__precompute\");\r\n    if (typeRefAdded) {\r\n      // TODO: also remove the function type somehow if no longer used or make the C-API accept\r\n      // a `null` typeRef, using an implicit type.\r\n    }\r\n    return ret;\r\n  }\r\n\r\n  convertExpression(expr: ExpressionRef, fromType: Type, toType: Type, conversionKind: ConversionKind, reportNode: Node): ExpressionRef {\r\n    if (conversionKind == ConversionKind.NONE) {\r\n      assert(false, \"concrete type expected\");\r\n      return expr;\r\n    }\r\n\r\n    // void to any\r\n    if (fromType.kind == TypeKind.VOID) {\r\n      this.error(DiagnosticCode.Type_0_is_not_assignable_to_type_1, reportNode.range, fromType.toString(), toType.toString());\r\n      return this.module.createUnreachable();\r\n    }\r\n\r\n    // any to void\r\n    if (toType.kind == TypeKind.VOID)\r\n      return this.module.createDrop(expr);\r\n\r\n    var mod = this.module;\r\n    var losesInformation = false;\r\n\r\n    if (fromType.is(TypeFlags.FLOAT)) {\r\n\r\n      // float to float\r\n      if (toType.is(TypeFlags.FLOAT)) {\r\n        if (fromType.kind == TypeKind.F32) {\r\n\r\n          // f32 to f64\r\n          if (toType.kind == TypeKind.F64)\r\n            expr = mod.createUnary(UnaryOp.PromoteF32, expr);\r\n\r\n          // otherwise f32 to f32\r\n\r\n        // f64 to f32\r\n        } else if (toType.kind == TypeKind.F32) {\r\n          losesInformation = true;\r\n          expr = mod.createUnary(UnaryOp.DemoteF64, expr);\r\n        }\r\n\r\n        // otherwise f64 to f64\r\n\r\n      // float to int\r\n      } else if (toType.is(TypeFlags.INTEGER)) {\r\n        losesInformation = true;\r\n\r\n        // f32 to int\r\n        if (fromType.kind == TypeKind.F32) {\r\n          if (toType.is(TypeFlags.SIGNED)) {\r\n            if (toType.is(TypeFlags.LONG))\r\n              expr = mod.createUnary(UnaryOp.TruncF32ToI64, expr);\r\n            else {\r\n              expr = mod.createUnary(UnaryOp.TruncF32ToI32, expr);\r\n              if (toType.is(TypeFlags.SMALL))\r\n                expr = makeSmallIntegerWrap(expr, toType, this.module);\r\n            }\r\n          } else {\r\n            if (toType.is(TypeFlags.LONG))\r\n              expr = mod.createUnary(UnaryOp.TruncF32ToU64, expr);\r\n            else {\r\n              expr = mod.createUnary(UnaryOp.TruncF32ToU32, expr);\r\n              if (toType.is(TypeFlags.SMALL))\r\n                expr = makeSmallIntegerWrap(expr, toType, this.module);\r\n            }\r\n          }\r\n\r\n        // f64 to int\r\n        } else {\r\n          if (toType.is(TypeFlags.SIGNED)) {\r\n            if (toType.is(TypeFlags.LONG))\r\n              expr = mod.createUnary(UnaryOp.TruncF64ToI64, expr);\r\n            else {\r\n              expr = mod.createUnary(UnaryOp.TruncF64ToI32, expr);\r\n              if (toType.is(TypeFlags.SMALL))\r\n                expr = makeSmallIntegerWrap(expr, toType, this.module);\r\n            }\r\n          } else {\r\n            if (toType.is(TypeFlags.LONG))\r\n              expr = mod.createUnary(UnaryOp.TruncF64ToU64, expr);\r\n            else {\r\n              expr = mod.createUnary(UnaryOp.TruncF64ToU32, expr);\r\n              if (toType.is(TypeFlags.SMALL))\r\n                expr = makeSmallIntegerWrap(expr, toType, this.module);\r\n            }\r\n          }\r\n        }\r\n\r\n      // float to void\r\n      } else {\r\n        assert(toType.flags == TypeFlags.NONE, \"void type expected\");\r\n        expr = this.module.createDrop(expr);\r\n      }\r\n\r\n    // int to float\r\n    } else if (fromType.is(TypeFlags.INTEGER) && toType.is(TypeFlags.FLOAT)) {\r\n\r\n      // int to f32\r\n      if (toType.kind == TypeKind.F32) {\r\n        if (fromType.is(TypeFlags.LONG)) {\r\n          losesInformation = true;\r\n          expr = mod.createUnary(fromType.is(TypeFlags.SIGNED) ? UnaryOp.ConvertI64ToF32 : UnaryOp.ConvertU64ToF32, expr);\r\n        } else {\r\n          losesInformation = !fromType.is(TypeFlags.SMALL);\r\n          expr = mod.createUnary(fromType.is(TypeFlags.SIGNED) ? UnaryOp.ConvertI32ToF32 : UnaryOp.ConvertU32ToF32, expr);\r\n        }\r\n\r\n      // int to f64\r\n      } else {\r\n        if (fromType.is(TypeFlags.LONG)) {\r\n          losesInformation = true;\r\n          expr = mod.createUnary(fromType.is(TypeFlags.SIGNED) ? UnaryOp.ConvertI64ToF64 : UnaryOp.ConvertU64ToF64, expr);\r\n        } else\r\n          expr = mod.createUnary(fromType.is(TypeFlags.SIGNED) ? UnaryOp.ConvertI32ToF64 : UnaryOp.ConvertU32ToF64, expr);\r\n      }\r\n\r\n    // int to int\r\n    } else {\r\n      if (fromType.is(TypeFlags.LONG)) {\r\n\r\n        // i64 to i32\r\n        if (!toType.is(TypeFlags.LONG)) {\r\n          losesInformation = true;\r\n          expr = mod.createUnary(UnaryOp.WrapI64, expr); // discards upper bits\r\n          if (toType.is(TypeFlags.SMALL))\r\n            expr = makeSmallIntegerWrap(expr, toType, this.module);\r\n        }\r\n\r\n      // i32 to i64\r\n      } else if (toType.is(TypeFlags.LONG)) {\r\n        expr = mod.createUnary(toType.is(TypeFlags.SIGNED) ? UnaryOp.ExtendI32 : UnaryOp.ExtendU32, expr);\r\n\r\n      // i32 or smaller to even smaller or same size int with change of sign\r\n      } else if (toType.is(TypeFlags.SMALL) && (fromType.size > toType.size || (fromType.size == toType.size && fromType.is(TypeFlags.SIGNED) != toType.is(TypeFlags.SIGNED)))) {\r\n        losesInformation = true;\r\n        expr = makeSmallIntegerWrap(expr, toType, this.module);\r\n      }\r\n\r\n      // otherwise (smaller) i32/u32 to (same size) i32/u32\r\n    }\r\n\r\n    if (losesInformation && conversionKind == ConversionKind.IMPLICIT)\r\n      this.error(DiagnosticCode.Conversion_from_type_0_to_1_possibly_loses_information_and_thus_requires_an_explicit_cast, reportNode.range, fromType.toString(), toType.toString());\r\n\r\n    return expr;\r\n  }\r\n\r\n  compileAssertionExpression(expression: AssertionExpression, contextualType: Type): ExpressionRef {\r\n    var toType = this.program.resolveType(expression.toType, this.currentFunction.contextualTypeArguments); // reports\r\n    if (!toType)\r\n      return this.module.createUnreachable();\r\n    return this.compileExpression(expression.expression, toType, ConversionKind.EXPLICIT);\r\n  }\r\n\r\n  compileBinaryExpression(expression: BinaryExpression, contextualType: Type, wrapSmallIntegers: bool = true): ExpressionRef {\r\n    var left: ExpressionRef;\r\n    var right: ExpressionRef;\r\n    var condition: ExpressionRef;\r\n    var expr: ExpressionRef;\r\n\r\n    var compound = false;\r\n    var possiblyOverflows = false;\r\n    var tempLocal: Local | null = null\r\n\r\n    switch (expression.operator) {\r\n\r\n      case Token.LESSTHAN:\r\n        left = this.compileExpression(expression.left, contextualType == Type.void ? Type.i32 : contextualType, ConversionKind.NONE);\r\n        right = this.compileExpression(expression.right, this.currentType);\r\n\r\n        switch (this.currentType.kind) {\r\n\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n            expr = this.module.createBinary(BinaryOp.LtI32, left, right);\r\n            break;\r\n\r\n          case TypeKind.I64:\r\n            expr = this.module.createBinary(BinaryOp.LtI64, left, right);\r\n            break;\r\n\r\n          case TypeKind.ISIZE:\r\n            expr = this.module.createBinary(this.options.target == Target.WASM64 ? BinaryOp.LtI64 : BinaryOp.LtI32, left, right);\r\n            break;\r\n\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL:\r\n            expr = this.module.createBinary(BinaryOp.LtU32, left, right);\r\n            break;\r\n\r\n          case TypeKind.USIZE:\r\n            // TODO: check operator overload\r\n            expr = this.module.createBinary(this.options.target == Target.WASM64 ? BinaryOp.LtU64 : BinaryOp.LtU32, left, right);\r\n            break;\r\n\r\n          case TypeKind.U64:\r\n            expr = this.module.createBinary(BinaryOp.LtU64, left, right);\r\n            break;\r\n\r\n          case TypeKind.F32:\r\n            expr = this.module.createBinary(BinaryOp.LtF32, left, right);\r\n            break;\r\n\r\n          case TypeKind.F64:\r\n            expr = this.module.createBinary(BinaryOp.LtF64, left, right);\r\n            break;\r\n\r\n          default:\r\n            this.error(DiagnosticCode.Operation_not_supported, expression.range);\r\n            throw new Error(\"concrete type expected\");\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n\r\n      case Token.GREATERTHAN:\r\n        left = this.compileExpression(expression.left, contextualType == Type.void ? Type.i32 : contextualType, ConversionKind.NONE);\r\n        right = this.compileExpression(expression.right, this.currentType);\r\n\r\n        switch (this.currentType.kind) {\r\n\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n            expr = this.module.createBinary(BinaryOp.GtI32, left, right);\r\n            break;\r\n\r\n          case TypeKind.ISIZE:\r\n            expr = this.module.createBinary(this.options.target == Target.WASM64 ? BinaryOp.GtI64 : BinaryOp.GtI32, left, right);\r\n            break;\r\n\r\n          case TypeKind.I64:\r\n            expr = this.module.createBinary(BinaryOp.GtI64, left, right);\r\n            break;\r\n\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL:\r\n            expr = this.module.createBinary(BinaryOp.GtU32, left, right);\r\n            break;\r\n\r\n          case TypeKind.USIZE:\r\n            // TODO: check operator overload\r\n            expr = this.module.createBinary(this.options.target == Target.WASM64 ? BinaryOp.GtU64 : BinaryOp.GtU32, left, right);\r\n            break;\r\n\r\n          case TypeKind.U64:\r\n            expr = this.module.createBinary(BinaryOp.GtU64, left, right);\r\n            break;\r\n\r\n          case TypeKind.F32:\r\n            expr = this.module.createBinary(BinaryOp.GtF32, left, right);\r\n            break;\r\n\r\n          case TypeKind.F64:\r\n            expr = this.module.createBinary(BinaryOp.GtF64, left, right);\r\n            break;\r\n\r\n          default:\r\n            this.error(DiagnosticCode.Operation_not_supported, expression.range);\r\n            throw new Error(\"concrete type expected\");\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n\r\n      case Token.LESSTHAN_EQUALS:\r\n        left = this.compileExpression(expression.left, contextualType == Type.void ? Type.i32 : contextualType, ConversionKind.NONE);\r\n        right = this.compileExpression(expression.right, this.currentType);\r\n\r\n        switch (this.currentType.kind) {\r\n\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n            expr = this.module.createBinary(BinaryOp.LeI32, left, right);\r\n            break;\r\n\r\n          case TypeKind.ISIZE:\r\n            expr = this.module.createBinary(this.options.target == Target.WASM64 ? BinaryOp.LeI64 : BinaryOp.LeI32, left, right);\r\n            break;\r\n\r\n          case TypeKind.I64:\r\n            expr = this.module.createBinary(BinaryOp.LeI64, left, right);\r\n            break;\r\n\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL:\r\n            expr = this.module.createBinary(BinaryOp.LeU32, left, right);\r\n            break;\r\n\r\n          case TypeKind.USIZE:\r\n            // TODO: check operator overload\r\n            expr = this.module.createBinary(this.options.target == Target.WASM64 ? BinaryOp.LeU64 : BinaryOp.LeU32, left, right);\r\n            break;\r\n\r\n          case TypeKind.U64:\r\n            expr = this.module.createBinary(BinaryOp.LeU64, left, right);\r\n            break;\r\n\r\n          case TypeKind.F32:\r\n            expr = this.module.createBinary(BinaryOp.LeF32, left, right);\r\n            break;\r\n\r\n          case TypeKind.F64:\r\n            expr = this.module.createBinary(BinaryOp.LeF64, left, right);\r\n            break;\r\n\r\n          default:\r\n            this.error(DiagnosticCode.Operation_not_supported, expression.range);\r\n            throw new Error(\"concrete type expected\");\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n\r\n      case Token.GREATERTHAN_EQUALS:\r\n        left = this.compileExpression(expression.left, contextualType == Type.void ? Type.i32 : contextualType, ConversionKind.NONE);\r\n        right = this.compileExpression(expression.right, this.currentType);\r\n\r\n        switch (this.currentType.kind) {\r\n\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n            expr = this.module.createBinary(BinaryOp.GeI32, left, right);\r\n            break;\r\n\r\n          case TypeKind.ISIZE:\r\n            expr = this.module.createBinary(this.options.target == Target.WASM64 ? BinaryOp.GeI64 : BinaryOp.GeI32, left, right);\r\n            break;\r\n\r\n          case TypeKind.I64:\r\n            expr = this.module.createBinary(BinaryOp.GeI64, left, right);\r\n            break;\r\n\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL:\r\n            expr = this.module.createBinary(BinaryOp.GeU32, left, right);\r\n            break;\r\n\r\n          case TypeKind.USIZE:\r\n            // TODO: check operator overload\r\n            expr = this.module.createBinary(this.options.target == Target.WASM64 ? BinaryOp.GeU64 : BinaryOp.GeU32, left, right);\r\n            break;\r\n\r\n          case TypeKind.U64:\r\n            expr = this.module.createBinary(BinaryOp.GeU64, left, right);\r\n            break;\r\n\r\n          case TypeKind.F32:\r\n            expr = this.module.createBinary(BinaryOp.GeF32, left, right);\r\n            break;\r\n\r\n          case TypeKind.F64:\r\n            expr = this.module.createBinary(BinaryOp.GeF64, left, right);\r\n            break;\r\n\r\n          default:\r\n            this.error(DiagnosticCode.Operation_not_supported, expression.range);\r\n            throw new Error(\"concrete type expected\");\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n\r\n      case Token.EQUALS_EQUALS_EQUALS:\r\n        // TODO?\r\n      case Token.EQUALS_EQUALS:\r\n\r\n        // NOTE that this favors correctness, in terms of emitting a binary expression, over\r\n        // checking for a possible use of unary EQZ. while the most classic of all optimizations,\r\n        // that's not what the source told us to do. for reference, `!left` emits unary EQZ.\r\n\r\n        left = this.compileExpression(expression.left, contextualType == Type.void ? Type.i32 : contextualType, ConversionKind.NONE);\r\n        right = this.compileExpression(expression.right, this.currentType);\r\n\r\n        switch (this.currentType.kind) {\r\n\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL:\r\n            expr = this.module.createBinary(BinaryOp.EqI32, left, right);\r\n            break;\r\n\r\n          case TypeKind.USIZE:\r\n            // TODO: check operator overload\r\n          case TypeKind.ISIZE:\r\n            expr = this.module.createBinary(this.options.target == Target.WASM64 ? BinaryOp.EqI64 : BinaryOp.EqI32, left, right);\r\n            break;\r\n\r\n          case TypeKind.I64:\r\n          case TypeKind.U64:\r\n            expr = this.module.createBinary(BinaryOp.EqI64, left, right);\r\n            break;\r\n\r\n          case TypeKind.F32:\r\n            expr = this.module.createBinary(BinaryOp.EqF32, left, right);\r\n            break;\r\n\r\n          case TypeKind.F64:\r\n            expr = this.module.createBinary(BinaryOp.EqF64, left, right);\r\n            break;\r\n\r\n          default:\r\n            this.error(DiagnosticCode.Operation_not_supported, expression.range);\r\n            throw new Error(\"concrete type expected\");\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n\r\n      case Token.EXCLAMATION_EQUALS_EQUALS:\r\n        // TODO?\r\n      case Token.EXCLAMATION_EQUALS:\r\n        left = this.compileExpression(expression.left, contextualType == Type.void ? Type.i32 : contextualType, ConversionKind.NONE);\r\n        right = this.compileExpression(expression.right, this.currentType);\r\n\r\n        switch (this.currentType.kind) {\r\n\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL:\r\n            expr = this.module.createBinary(BinaryOp.NeI32, left, right);\r\n            break;\r\n\r\n          case TypeKind.USIZE:\r\n            // TODO: check operator overload\r\n          case TypeKind.ISIZE:\r\n            expr = this.module.createBinary(this.options.target == Target.WASM64 ? BinaryOp.NeI64 : BinaryOp.NeI32, left, right);\r\n            break;\r\n\r\n          case TypeKind.I64:\r\n          case TypeKind.U64:\r\n            expr = this.module.createBinary(BinaryOp.NeI64, left, right);\r\n            break;\r\n\r\n          case TypeKind.F32:\r\n            expr = this.module.createBinary(BinaryOp.NeF32, left, right);\r\n            break;\r\n\r\n          case TypeKind.F64:\r\n            expr = this.module.createBinary(BinaryOp.NeF64, left, right);\r\n            break;\r\n\r\n          default:\r\n            this.error(DiagnosticCode.Operation_not_supported, expression.range);\r\n            throw new Error(\"concrete type expected\");\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n\r\n      case Token.EQUALS:\r\n        return this.compileAssignment(expression.left, expression.right, contextualType);\r\n\r\n      case Token.PLUS_EQUALS:\r\n        compound = true;\r\n      case Token.PLUS: // retains low bits of small integers\r\n        left = this.compileExpression(expression.left, contextualType == Type.void ? Type.i32 : contextualType, ConversionKind.NONE, false);\r\n        right = this.compileExpression(expression.right, this.currentType, ConversionKind.IMPLICIT, false);\r\n\r\n        switch (this.currentType.kind) {\r\n\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL:\r\n            possiblyOverflows = true;\r\n          case TypeKind.I32:\r\n          case TypeKind.U32:\r\n            expr = this.module.createBinary(BinaryOp.AddI32, left, right);\r\n            break;\r\n\r\n          case TypeKind.USIZE:\r\n            // TODO: check operator overload\r\n          case TypeKind.ISIZE:\r\n            expr = this.module.createBinary(this.options.target == Target.WASM64 ? BinaryOp.AddI64 : BinaryOp.AddI32, left, right);\r\n            break;\r\n\r\n          case TypeKind.I64:\r\n          case TypeKind.U64:\r\n            expr = this.module.createBinary(BinaryOp.AddI64, left, right);\r\n            break;\r\n\r\n          case TypeKind.F32:\r\n            expr = this.module.createBinary(BinaryOp.AddF32, left, right);\r\n            break;\r\n\r\n          case TypeKind.F64:\r\n            expr = this.module.createBinary(BinaryOp.AddF64, left, right);\r\n            break;\r\n\r\n          default:\r\n            throw new Error(\"concrete type expected\");\r\n        }\r\n        break;\r\n\r\n      case Token.MINUS_EQUALS:\r\n        compound = true;\r\n      case Token.MINUS: // retains low bits of small integers\r\n        left = this.compileExpression(expression.left, contextualType == Type.void ? Type.i32 : contextualType, ConversionKind.NONE, false);\r\n        right = this.compileExpression(expression.right, this.currentType, ConversionKind.IMPLICIT, false);\r\n\r\n        switch (this.currentType.kind) {\r\n\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL:\r\n            possiblyOverflows = true;\r\n          case TypeKind.I32:\r\n          case TypeKind.U32:\r\n            expr = this.module.createBinary(BinaryOp.SubI32, left, right);\r\n            break;\r\n\r\n          case TypeKind.USIZE:\r\n            // TODO: check operator overload\r\n          case TypeKind.ISIZE:\r\n            expr = this.module.createBinary(this.options.target == Target.WASM64 ? BinaryOp.SubI64 : BinaryOp.SubI32, left, right);\r\n            break;\r\n\r\n          case TypeKind.I64:\r\n          case TypeKind.U64:\r\n            expr = this.module.createBinary(BinaryOp.SubI64, left, right);\r\n            break;\r\n\r\n          case TypeKind.F32:\r\n            expr = this.module.createBinary(BinaryOp.SubF32, left, right);\r\n            break;\r\n\r\n          case TypeKind.F64:\r\n            expr = this.module.createBinary(BinaryOp.SubF64, left, right);\r\n            break;\r\n\r\n          default:\r\n            this.error(DiagnosticCode.Operation_not_supported, expression.range);\r\n            throw new Error(\"concrete type expected\");\r\n        }\r\n        break;\r\n\r\n      case Token.ASTERISK_EQUALS:\r\n        compound = true;\r\n      case Token.ASTERISK: // retains low bits of small integers\r\n        left = this.compileExpression(expression.left, contextualType == Type.void ? Type.i32 : contextualType, ConversionKind.NONE, false);\r\n        right = this.compileExpression(expression.right, this.currentType, ConversionKind.IMPLICIT, false);\r\n\r\n        switch (this.currentType.kind) {\r\n\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL:\r\n            possiblyOverflows = true;\r\n            // fall-through\r\n          case TypeKind.I32:\r\n          case TypeKind.U32:\r\n            expr = this.module.createBinary(BinaryOp.MulI32, left, right);\r\n            break;\r\n\r\n          case TypeKind.USIZE:\r\n            // TODO: check operator overload\r\n          case TypeKind.ISIZE:\r\n            expr = this.module.createBinary(this.options.target == Target.WASM64 ? BinaryOp.MulI64 : BinaryOp.MulI32, left, right);\r\n            break;\r\n\r\n          case TypeKind.I64:\r\n          case TypeKind.U64:\r\n            expr = this.module.createBinary(BinaryOp.MulI64, left, right);\r\n            break;\r\n\r\n          case TypeKind.F32:\r\n            expr = this.module.createBinary(BinaryOp.MulF32, left, right);\r\n            break;\r\n\r\n          case TypeKind.F64:\r\n            expr = this.module.createBinary(BinaryOp.MulF64, left, right);\r\n            break;\r\n\r\n          default:\r\n            this.error(DiagnosticCode.Operation_not_supported, expression.range);\r\n            throw new Error(\"concrete type expected\");\r\n        }\r\n        break;\r\n\r\n      case Token.SLASH_EQUALS:\r\n        compound = true;\r\n      case Token.SLASH: // TODO: when can division remain unwrapped? does it overflow?\r\n        left = this.compileExpression(expression.left, contextualType == Type.void ? Type.i32 : contextualType, ConversionKind.NONE);\r\n        right = this.compileExpression(expression.right, this.currentType, ConversionKind.IMPLICIT);\r\n\r\n        switch (this.currentType.kind) {\r\n\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n            possiblyOverflows = true;\r\n          case TypeKind.I32:\r\n            expr = this.module.createBinary(BinaryOp.DivI32, left, right);\r\n            break;\r\n\r\n          case TypeKind.ISIZE:\r\n            expr = this.module.createBinary(this.options.target == Target.WASM64 ? BinaryOp.DivI64 : BinaryOp.DivI32, left, right);\r\n            break;\r\n\r\n          case TypeKind.I64:\r\n            expr = this.module.createBinary(BinaryOp.DivI64, left, right);\r\n            break;\r\n\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL:\r\n            possiblyOverflows = true;\r\n          case TypeKind.U32:\r\n            expr = this.module.createBinary(BinaryOp.DivU32, left, right);\r\n            break;\r\n\r\n          case TypeKind.USIZE:\r\n            // TODO: check operator overload\r\n            expr = this.module.createBinary(this.options.target == Target.WASM64 ? BinaryOp.DivU64 : BinaryOp.DivU32, left, right);\r\n            break;\r\n\r\n          case TypeKind.U64:\r\n            expr = this.module.createBinary(BinaryOp.DivU64, left, right);\r\n            break;\r\n\r\n          case TypeKind.F32:\r\n            expr = this.module.createBinary(BinaryOp.DivF32, left, right);\r\n            break;\r\n\r\n          case TypeKind.F64:\r\n            expr = this.module.createBinary(BinaryOp.DivF64, left, right);\r\n            break;\r\n\r\n          default:\r\n            this.error(DiagnosticCode.Operation_not_supported, expression.range);\r\n            throw new Error(\"concrete type expected\");\r\n        }\r\n        break;\r\n\r\n      case Token.PERCENT_EQUALS:\r\n        compound = true;\r\n      case Token.PERCENT: // TODO: when can remainder remain unwrapped? may it overflow?\r\n        left = this.compileExpression(expression.left, contextualType == Type.void ? Type.i32 : contextualType, ConversionKind.NONE);\r\n        right = this.compileExpression(expression.right, this.currentType, ConversionKind.IMPLICIT);\r\n\r\n        switch (this.currentType.kind) {\r\n\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n            expr = this.module.createBinary(BinaryOp.RemI32, left, right);\r\n            break;\r\n\r\n          case TypeKind.ISIZE:\r\n            expr = this.module.createBinary(this.options.target == Target.WASM64 ? BinaryOp.RemI64 : BinaryOp.RemI32, left, right);\r\n            break;\r\n\r\n          case TypeKind.I64:\r\n            expr = this.module.createBinary(BinaryOp.RemI64, left, right);\r\n            break;\r\n\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL:\r\n            expr = this.module.createBinary(BinaryOp.RemU32, left, right);\r\n            break;\r\n\r\n          case TypeKind.USIZE:\r\n            // TODO: check operator overload\r\n            expr = this.module.createBinary(this.options.target == Target.WASM64 ? BinaryOp.RemU64 : BinaryOp.RemU32, left, right);\r\n            break;\r\n\r\n          case TypeKind.U64:\r\n            expr = this.module.createBinary(BinaryOp.RemU64, left, right);\r\n            break;\r\n\r\n          case TypeKind.F32:\r\n          case TypeKind.F64:\r\n            // TODO: internal fmod, possibly simply imported from JS\r\n            this.error(DiagnosticCode.Operation_not_supported, expression.range);\r\n            expr = this.module.createUnreachable();\r\n            break;\r\n\r\n          default:\r\n            this.error(DiagnosticCode.Operation_not_supported, expression.range);\r\n            throw new Error(\"concrete type expected\");\r\n        }\r\n        break;\r\n\r\n      case Token.LESSTHAN_LESSTHAN_EQUALS:\r\n        compound = true;\r\n      case Token.LESSTHAN_LESSTHAN: // retains low bits of small integers\r\n        left = this.compileExpression(expression.left, contextualType == Type.void ? Type.i32 : contextualType.is(TypeFlags.FLOAT) ? Type.i64 : contextualType, ConversionKind.NONE, false);\r\n        right = this.compileExpression(expression.right, this.currentType, ConversionKind.IMPLICIT, false);\r\n\r\n        switch (this.currentType.kind) {\r\n\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL:\r\n            possiblyOverflows = true;\r\n          default:\r\n            expr = this.module.createBinary(BinaryOp.ShlI32, left, right);\r\n            break;\r\n\r\n          case TypeKind.I64:\r\n          case TypeKind.U64:\r\n            expr = this.module.createBinary(BinaryOp.ShlI64, left, right);\r\n            break;\r\n\r\n          case TypeKind.USIZE:\r\n            // TODO: check operator overload\r\n          case TypeKind.ISIZE:\r\n            expr = this.module.createBinary(this.options.target == Target.WASM64 ? BinaryOp.ShlI64 : BinaryOp.ShlI32, left, right);\r\n            break;\r\n\r\n          case TypeKind.VOID:\r\n            this.error(DiagnosticCode.Operation_not_supported, expression.range);\r\n            throw new Error(\"concrete type expected\");\r\n        }\r\n        break;\r\n\r\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS:\r\n        compound = true;\r\n      case Token.GREATERTHAN_GREATERTHAN: // must wrap small integers\r\n        left = this.compileExpression(expression.left, contextualType == Type.void ? Type.i32 : contextualType.is(TypeFlags.FLOAT) ? Type.i64 : contextualType, ConversionKind.NONE);\r\n        right = this.compileExpression(expression.right, this.currentType, ConversionKind.IMPLICIT);\r\n\r\n        switch (this.currentType.kind) {\r\n\r\n          default:\r\n            // assumes signed shr on signed small integers does not overflow\r\n            expr = this.module.createBinary(BinaryOp.ShrI32, left, right);\r\n            break;\r\n\r\n          case TypeKind.I64:\r\n            expr = this.module.createBinary(BinaryOp.ShrI64, left, right);\r\n            break;\r\n\r\n          case TypeKind.ISIZE:\r\n            expr = this.module.createBinary(this.options.target == Target.WASM64 ? BinaryOp.ShrI64 : BinaryOp.ShrI32, left, right);\r\n            break;\r\n\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL:\r\n            // assumes unsigned shr on unsigned small integers does not overflow\r\n          case TypeKind.U32:\r\n            expr = this.module.createBinary(BinaryOp.ShrU32, left, right);\r\n            break;\r\n\r\n          case TypeKind.U64:\r\n            expr = this.module.createBinary(BinaryOp.ShrU64, left, right);\r\n            break;\r\n\r\n          case TypeKind.USIZE:\r\n            // TODO: check operator overload\r\n            expr = this.module.createBinary(this.options.target == Target.WASM64 ? BinaryOp.ShrU64 : BinaryOp.ShrU32, left, right);\r\n            break;\r\n\r\n          case TypeKind.VOID:\r\n            this.error(DiagnosticCode.Operation_not_supported, expression.range);\r\n            throw new Error(\"concrete type expected\");\r\n        }\r\n        break;\r\n\r\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\r\n        compound = true;\r\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: // modifies low bits of small integers if unsigned\r\n        left = this.compileExpression(expression.left, contextualType == Type.void ? Type.i32 : contextualType == Type.void ? Type.u64 : contextualType, ConversionKind.NONE);\r\n        right = this.compileExpression(expression.right, this.currentType, ConversionKind.IMPLICIT);\r\n\r\n        switch (this.currentType.kind) {\r\n\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n            possiblyOverflows = true;\r\n            // fall-through\r\n          default:\r\n            // assumes that unsigned shr on unsigned small integers does not overflow\r\n            expr = this.module.createBinary(BinaryOp.ShrU32, left, right);\r\n            break;\r\n\r\n          case TypeKind.I64:\r\n          case TypeKind.U64:\r\n            expr = this.module.createBinary(BinaryOp.ShrU64, left, right);\r\n            break;\r\n\r\n          case TypeKind.USIZE:\r\n            // TODO: check operator overload\r\n          case TypeKind.ISIZE:\r\n            expr = this.module.createBinary(this.options.target == Target.WASM64 ? BinaryOp.ShrU64 : BinaryOp.ShrU32, left, right);\r\n            break;\r\n\r\n          case TypeKind.VOID:\r\n            this.error(DiagnosticCode.Operation_not_supported, expression.range);\r\n            throw new Error(\"concrete type expected\");\r\n        }\r\n        break;\r\n\r\n      case Token.AMPERSAND_EQUALS:\r\n        compound = true;\r\n      case Token.AMPERSAND: // retains low bits of small integers\r\n        left = this.compileExpression(expression.left, contextualType == Type.void ? Type.i32 : contextualType.is(TypeFlags.FLOAT) ? Type.i64 : contextualType, ConversionKind.NONE, false);\r\n        right = this.compileExpression(expression.right, this.currentType, ConversionKind.IMPLICIT, false);\r\n\r\n        switch (this.currentType.kind) {\r\n\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL:\r\n            possiblyOverflows = true; // if left or right already did\r\n          default:\r\n            expr = this.module.createBinary(BinaryOp.AndI32, left, right);\r\n            break;\r\n\r\n          case TypeKind.I64:\r\n          case TypeKind.U64:\r\n            expr = this.module.createBinary(BinaryOp.AndI64, left, right);\r\n            break;\r\n\r\n          case TypeKind.USIZE:\r\n            // TODO: check operator overload\r\n          case TypeKind.ISIZE:\r\n            expr = this.module.createBinary(this.options.target == Target.WASM64 ? BinaryOp.AndI64 : BinaryOp.AndI32, left, right);\r\n            break;\r\n\r\n          case TypeKind.VOID:\r\n            this.error(DiagnosticCode.Operation_not_supported, expression.range);\r\n            throw new Error(\"concrete type expected\");\r\n        }\r\n        break;\r\n\r\n      case Token.BAR_EQUALS:\r\n        compound = true;\r\n      case Token.BAR: // retains low bits of small integers\r\n        left = this.compileExpression(expression.left, contextualType == Type.void ? Type.i32 : contextualType.is(TypeFlags.FLOAT) ? Type.i64 : contextualType, ConversionKind.NONE, false);\r\n        right = this.compileExpression(expression.right, this.currentType, ConversionKind.IMPLICIT, false);\r\n\r\n        switch (this.currentType.kind) {\r\n\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL:\r\n            possiblyOverflows = true; // if left or right already did\r\n          default:\r\n            expr = this.module.createBinary(BinaryOp.OrI32, left, right);\r\n            break;\r\n\r\n          case TypeKind.I64:\r\n          case TypeKind.U64:\r\n            expr = this.module.createBinary(BinaryOp.OrI64, left, right);\r\n            break;\r\n\r\n          case TypeKind.USIZE:\r\n            // TODO: check operator overload\r\n          case TypeKind.ISIZE:\r\n            expr = this.module.createBinary(this.options.target == Target.WASM64 ? BinaryOp.OrI64 : BinaryOp.OrI32, left, right);\r\n            break;\r\n\r\n          case TypeKind.VOID:\r\n            this.error(DiagnosticCode.Operation_not_supported, expression.range);\r\n            throw new Error(\"concrete type expected\");\r\n        }\r\n        break;\r\n\r\n      case Token.CARET_EQUALS:\r\n        compound = true;\r\n      case Token.CARET: // retains low bits of small integers\r\n        left = this.compileExpression(expression.left, contextualType == Type.void ? Type.i32 : contextualType.is(TypeFlags.FLOAT) ? Type.i64 : contextualType, ConversionKind.NONE, false);\r\n        right = this.compileExpression(expression.right, this.currentType, ConversionKind.IMPLICIT, false);\r\n\r\n        switch (this.currentType.kind) {\r\n\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL:\r\n            possiblyOverflows = true; // if left or right already did\r\n          default:\r\n            expr = this.module.createBinary(BinaryOp.XorI32, left, right);\r\n            break;\r\n\r\n          case TypeKind.I64:\r\n          case TypeKind.U64:\r\n            expr = this.module.createBinary(BinaryOp.XorI64, left, right);\r\n            break;\r\n\r\n          case TypeKind.USIZE:\r\n            // TODO: check operator overload\r\n          case TypeKind.ISIZE:\r\n            expr = this.module.createBinary(this.options.target == Target.WASM64 ? BinaryOp.XorI64 : BinaryOp.XorI32, left, right);\r\n            break;\r\n\r\n          case TypeKind.VOID:\r\n            this.error(DiagnosticCode.Operation_not_supported, expression.range);\r\n            throw new Error(\"concrete type expected\");\r\n        }\r\n        break;\r\n\r\n      // logical (no overloading)\r\n\r\n      case Token.AMPERSAND_AMPERSAND: // left && right\r\n        left = this.compileExpression(expression.left, contextualType == Type.void ? Type.i32 : contextualType, ConversionKind.NONE);\r\n        right = this.compileExpression(expression.right, this.currentType, ConversionKind.IMPLICIT, false);\r\n\r\n        // clone left if free of side effects\r\n        expr = this.module.cloneExpression(left, true, 0);\r\n\r\n        // if not possible, tee left to a temp. local\r\n        if (!expr) {\r\n          tempLocal = this.currentFunction.getAndFreeTempLocal(this.currentType);\r\n          left = this.module.createTeeLocal(tempLocal.index, left);\r\n        }\r\n\r\n        possiblyOverflows = this.currentType.is(TypeFlags.SMALL | TypeFlags.INTEGER);\r\n        condition = makeIsTrueish(left, this.currentType, this.module);\r\n\r\n        // simplify when cloning left without side effects was successful\r\n        if (expr)\r\n          expr = this.module.createIf(\r\n            condition, // left\r\n            right,     // ? right\r\n            expr       // : cloned left\r\n          );\r\n\r\n        // otherwise make use of the temp. local\r\n        else {\r\n          expr = this.module.createIf(\r\n            condition,\r\n            right,\r\n            this.module.createGetLocal(assert(tempLocal, \"tempLocal must be set\").index, this.currentType.toNativeType())\r\n          );\r\n        }\r\n        break;\r\n\r\n      case Token.BAR_BAR:  // left || right\r\n        left = this.compileExpression(expression.left, contextualType == Type.void ? Type.i32 : contextualType, ConversionKind.NONE);\r\n        right = this.compileExpression(expression.right, this.currentType, ConversionKind.IMPLICIT, false);\r\n\r\n        // clone left if free of side effects\r\n        expr = this.module.cloneExpression(left, true, 0);\r\n\r\n        // if not possible, tee left to a temp. local\r\n        if (!expr) {\r\n          tempLocal = this.currentFunction.getAndFreeTempLocal(this.currentType);\r\n          left = this.module.createTeeLocal(tempLocal.index, left);\r\n        }\r\n\r\n        possiblyOverflows = this.currentType.is(TypeFlags.SMALL | TypeFlags.INTEGER); // if right already did\r\n        condition = makeIsTrueish(left, this.currentType, this.module);\r\n\r\n        // simplify when cloning left without side effects was successful\r\n        if (expr)\r\n          expr = this.module.createIf(\r\n            condition, // left\r\n            expr,      // ? cloned left\r\n            right      // : right\r\n          );\r\n\r\n        // otherwise make use of the temp. local\r\n        else {\r\n          expr = this.module.createIf(\r\n            condition,\r\n            this.module.createGetLocal(assert(tempLocal, \"tempLocal must be set\").index, this.currentType.toNativeType()),\r\n            right\r\n          );\r\n        }\r\n        break;\r\n\r\n      default:\r\n        this.error(DiagnosticCode.Operation_not_supported, expression.range);\r\n        throw new Error(\"not implemented\");\r\n    }\r\n    if (possiblyOverflows && wrapSmallIntegers) {\r\n      assert(this.currentType.is(TypeFlags.SMALL | TypeFlags.INTEGER)), \"small integer type expected\";\r\n      expr = makeSmallIntegerWrap(expr, this.currentType, this.module);\r\n    }\r\n    return compound\r\n      ? this.compileAssignmentWithValue(expression.left, expr, contextualType != Type.void)\r\n      : expr;\r\n  }\r\n\r\n  compileAssignment(expression: Expression, valueExpression: Expression, contextualType: Type): ExpressionRef {\r\n    var resolved = this.program.resolveExpression(expression, this.currentFunction); // reports\r\n    if (!resolved)\r\n      return this.module.createUnreachable();\r\n\r\n    // to compile just the value, we need to know the target's type\r\n    var element = resolved.element;\r\n    var elementType: Type;\r\n    switch (element.kind) {\r\n\r\n      case ElementKind.GLOBAL:\r\n        if (!this.compileGlobal(<Global>element)) // reports; not yet compiled if a static field compiled as a global\r\n          return this.module.createUnreachable();\r\n        assert((<Global>element).type != Type.void, \"concrete type expected\");\r\n        // fall-through\r\n\r\n      case ElementKind.LOCAL:\r\n      case ElementKind.FIELD:\r\n        elementType = (<VariableLikeElement>element).type;\r\n        break;\r\n\r\n      case ElementKind.PROPERTY:\r\n        var setterPrototype = (<Property>element).setterPrototype;\r\n        if (setterPrototype) {\r\n          var setterInstance = setterPrototype.resolve(); // reports\r\n          if (!setterInstance)\r\n            return this.module.createUnreachable();\r\n          elementType = setterInstance.parameters[0].type;\r\n          break;\r\n        }\r\n        this.error(DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property, expression.range, (<Property>element).internalName);\r\n        return this.module.createUnreachable();\r\n\r\n      case ElementKind.FUNCTION_PROTOTYPE:\r\n        if (expression.kind == NodeKind.ELEMENTACCESS) { // @operator(\"[]\")\r\n          assert(resolved.target && resolved.target.kind == ElementKind.CLASS && element.simpleName == (<Class>resolved.target).prototype.fnIndexedGet)\r\n          var resolvedIndexedSet = (<FunctionPrototype>element).resolve(null);\r\n          if (resolvedIndexedSet) {\r\n            elementType = resolvedIndexedSet.returnType;\r\n            break;\r\n          }\r\n        }\r\n        // fall-through\r\n      default:\r\n        this.error(DiagnosticCode.Operation_not_supported, expression.range);\r\n        return this.module.createUnreachable();\r\n    }\r\n\r\n    // now compile the value and do the assignment\r\n    this.currentType = elementType;\r\n    return this.compileAssignmentWithValue(expression, this.compileExpression(valueExpression, elementType), contextualType != Type.void);\r\n  }\r\n\r\n  compileAssignmentWithValue(expression: Expression, valueWithCorrectType: ExpressionRef, tee: bool = false): ExpressionRef {\r\n    var resolved = this.program.resolveExpression(expression, this.currentFunction); // reports\r\n    if (!resolved)\r\n      return this.module.createUnreachable();\r\n\r\n    var element = resolved.element;\r\n    var tempLocal: Local;\r\n    var targetExpr: ExpressionRef;\r\n    switch (element.kind) {\r\n\r\n      case ElementKind.LOCAL:\r\n        this.currentType = tee ? (<Local>element).type : Type.void;\r\n        if ((<Local>element).is(ElementFlags.CONSTANT)) {\r\n          this.error(DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property, expression.range, (<Local>element).internalName);\r\n          return this.module.createUnreachable();\r\n        }\r\n        return tee\r\n          ? this.module.createTeeLocal((<Local>element).index, valueWithCorrectType)\r\n          : this.module.createSetLocal((<Local>element).index, valueWithCorrectType);\r\n\r\n      case ElementKind.GLOBAL:\r\n        if (!this.compileGlobal(<Global>element)) // reports; not yet compiled if a static field compiled as a global\r\n          return this.module.createUnreachable();\r\n        assert((<Global>element).type != Type.void, \"concrete type expected\");\r\n        this.currentType = tee ? (<Global>element).type : Type.void;\r\n        if ((<Local>element).is(ElementFlags.CONSTANT)) {\r\n          this.error(DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property, expression.range, (<Local>element).internalName);\r\n          return this.module.createUnreachable();\r\n        }\r\n        if (!tee)\r\n          return this.module.createSetGlobal((<Global>element).internalName, valueWithCorrectType);\r\n        var globalNativeType = (<Global>element).type.toNativeType();\r\n        return this.module.createBlock(null, [ // emulated teeGlobal\r\n          this.module.createSetGlobal((<Global>element).internalName, valueWithCorrectType),\r\n          this.module.createGetGlobal((<Global>element).internalName, globalNativeType)\r\n        ], globalNativeType);\r\n\r\n      case ElementKind.FIELD:\r\n        if ((<Field>element).prototype.isReadonly) {\r\n          this.error(DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property, expression.range, (<Field>element).internalName);\r\n          return this.module.createUnreachable();\r\n        }\r\n        assert(resolved.targetExpression != null, \"target expression expected\");\r\n        targetExpr = this.compileExpression(<Expression>resolved.targetExpression, this.options.target == Target.WASM64 ? Type.usize64 : Type.usize32, ConversionKind.NONE);\r\n        assert(this.currentType.classType, \"class type expected\");\r\n        this.currentType = tee ? (<Field>element).type : Type.void;\r\n        var elementNativeType = (<Field>element).type.toNativeType();\r\n        if (!tee)\r\n          return this.module.createStore((<Field>element).type.size >> 3, targetExpr, valueWithCorrectType, elementNativeType, (<Field>element).memoryOffset);\r\n        tempLocal = this.currentFunction.getAndFreeTempLocal((<Field>element).type);\r\n        return this.module.createBlock(null, [ // TODO: simplify if valueWithCorrectType has no side effects\r\n          this.module.createSetLocal(tempLocal.index, valueWithCorrectType),\r\n          this.module.createStore((<Field>element).type.size >> 3, targetExpr, this.module.createGetLocal(tempLocal.index, elementNativeType), elementNativeType, (<Field>element).memoryOffset),\r\n          this.module.createGetLocal(tempLocal.index, elementNativeType)\r\n        ], elementNativeType);\r\n\r\n      case ElementKind.PROPERTY:\r\n        var setterPrototype = (<Property>element).setterPrototype;\r\n        if (setterPrototype) {\r\n          var setterInstance = setterPrototype.resolve(); // reports\r\n          if (setterInstance) {\r\n            assert(setterInstance.parameters.length == 1);\r\n            if (!tee) {\r\n              if (setterInstance.is(ElementFlags.INSTANCE)) {\r\n                assert(resolved.targetExpression != null);\r\n                targetExpr = this.compileExpression(<Expression>resolved.targetExpression, this.options.target == Target.WASM64 ? Type.usize64 : Type.usize32, ConversionKind.NONE);\r\n                assert(this.currentType.classType);\r\n                this.currentType = Type.void;\r\n                return this.makeCall(setterInstance, [ targetExpr, valueWithCorrectType ]);\r\n              } else {\r\n                this.currentType = Type.void;\r\n                return this.makeCall(setterInstance, [ valueWithCorrectType ]);\r\n              }\r\n            }\r\n            var getterPrototype = (<Property>element).getterPrototype;\r\n            assert(getterPrototype != null);\r\n            var getterInstance = (<FunctionPrototype>getterPrototype).resolve(); // reports\r\n            if (getterInstance) {\r\n              assert(getterInstance.parameters.length == 0);\r\n              if (setterInstance.is(ElementFlags.INSTANCE)) {\r\n                assert(resolved.targetExpression != null);\r\n                targetExpr = this.compileExpression(<Expression>resolved.targetExpression, this.options.target == Target.WASM64 ? Type.usize64 : Type.usize32, ConversionKind.NONE);\r\n                assert(this.currentType.classType);\r\n                tempLocal = this.currentFunction.getAndFreeTempLocal(getterInstance.returnType);\r\n                return this.module.createBlock(null, [\r\n                  this.makeCall(setterInstance, [ this.module.createTeeLocal(tempLocal.index, targetExpr), valueWithCorrectType ]),\r\n                  this.makeCall(getterInstance, [ this.module.createGetLocal(tempLocal.index, tempLocal.type.toNativeType()) ])\r\n                ], (this.currentType = getterInstance.returnType).toNativeType());\r\n              } else\r\n                return this.module.createBlock(null, [\r\n                  this.makeCall(setterInstance, [ valueWithCorrectType ]),\r\n                  this.makeCall(getterInstance)\r\n                ], (this.currentType = getterInstance.returnType).toNativeType());\r\n            }\r\n          }\r\n        } else\r\n          this.error(DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property, expression.range, (<Property>element).internalName);\r\n        return this.module.createUnreachable();\r\n\r\n      case ElementKind.FUNCTION_PROTOTYPE:\r\n        if (expression.kind == NodeKind.ELEMENTACCESS) { // @operator(\"[]\")\r\n          assert(resolved.target && resolved.target.kind == ElementKind.CLASS);\r\n          var resolvedIndexedGet = (<FunctionPrototype>element).resolve();\r\n          if (!resolvedIndexedGet)\r\n            return this.module.createUnreachable();\r\n          var indexedSetName = (<Class>resolved.target).prototype.fnIndexedSet;\r\n          var indexedSet: Element | null;\r\n          if (indexedSetName != null && (<Class>resolved.target).members && (indexedSet = (<Map<string,Element>>(<Class>resolved.target).members).get(indexedSetName)) && indexedSet.kind == ElementKind.FUNCTION_PROTOTYPE) { // @operator(\"[]=\")\r\n            var resolvedIndexedSet = (<FunctionPrototype>indexedSet).resolve();\r\n            if (!resolvedIndexedSet)\r\n              return this.module.createUnreachable();\r\n            targetExpr = this.compileExpression(<Expression>resolved.targetExpression, this.options.target == Target.WASM64 ? Type.usize64 : Type.usize32, ConversionKind.NONE);\r\n            assert(this.currentType.classType);\r\n            var elementExpr = this.compileExpression((<ElementAccessExpression>expression).elementExpression, Type.i32);\r\n            if (!tee) {\r\n              this.currentType = resolvedIndexedSet.returnType;\r\n              return this.makeCall(resolvedIndexedSet, [ targetExpr, elementExpr, valueWithCorrectType ]);\r\n            }\r\n            this.currentType = resolvedIndexedGet.returnType;\r\n            tempLocal = this.currentFunction.getAndFreeTempLocal(this.currentType);\r\n            return this.module.createBlock(null, [\r\n              this.makeCall(resolvedIndexedSet, [ targetExpr, elementExpr, this.module.createTeeLocal(tempLocal.index, valueWithCorrectType) ]),\r\n              this.module.createGetLocal(tempLocal.index, tempLocal.type.toNativeType()) // TODO: could be different from an actual __get (needs 2 temp locals)\r\n            ], this.currentType.toNativeType());\r\n          } else {\r\n            this.error(DiagnosticCode.Index_signature_in_type_0_only_permits_reading, expression.range, (<Class>resolved.target).internalName);\r\n            return this.module.createUnreachable();\r\n          }\r\n        }\r\n        // fall-through\r\n    }\r\n    this.error(DiagnosticCode.Operation_not_supported, expression.range);\r\n    return this.module.createUnreachable();\r\n  }\r\n\r\n  compileCallExpression(expression: CallExpression, contextualType: Type): ExpressionRef {\r\n    var resolved = this.program.resolveExpression(expression.expression, this.currentFunction); // reports\r\n    if (!resolved)\r\n      return this.module.createUnreachable();\r\n\r\n    var element = resolved.element;\r\n    if (element.kind != ElementKind.FUNCTION_PROTOTYPE) {\r\n      this.error(DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures, expression.range, element.internalName);\r\n      return this.module.createUnreachable();\r\n    }\r\n\r\n    var functionPrototype = <FunctionPrototype>element;\r\n    var functionInstance: Function | null = null;\r\n\r\n    // TODO: generalize?\r\n    if (functionPrototype.is(ElementFlags.BUILTIN)) {\r\n      var resolvedTypeArguments: Type[] | null = null;\r\n      if (expression.typeArguments) {\r\n        var k = expression.typeArguments.length;\r\n        resolvedTypeArguments = new Array<Type>(k);\r\n        for (var i = 0; i < k; ++i) {\r\n          var resolvedType = this.program.resolveType(expression.typeArguments[i], this.currentFunction.contextualTypeArguments, true); // reports\r\n          if (!resolvedType)\r\n            return this.module.createUnreachable();\r\n          resolvedTypeArguments[i] = resolvedType;\r\n        }\r\n      }\r\n      var expr = compileBuiltinCall(this, functionPrototype, resolvedTypeArguments, expression.arguments, contextualType, expression);\r\n      if (!expr) {\r\n        this.error(DiagnosticCode.Operation_not_supported, expression.range);\r\n        return this.module.createUnreachable();\r\n      }\r\n      return expr;\r\n    }\r\n\r\n    // TODO: infer type arguments from parameter types if omitted\r\n    var functionInstance = functionPrototype.resolveInclTypeArguments(expression.typeArguments, this.currentFunction.contextualTypeArguments, expression); // reports\r\n    if (!functionInstance)\r\n      return this.module.createUnreachable();\r\n\r\n    // TODO: generalize? (see above)\r\n    /* if (functionInstance.is(ElementFlags.BUILTIN)) {\r\n      var expr = compileBuiltinCall(this, functionPrototype, functionInstance.typeArguments, expression.arguments, contextualType, expression);\r\n      if (!expr) {\r\n        this.error(DiagnosticCode.Operation_not_supported, expression.range);\r\n        return this.module.createUnreachable();\r\n      }\r\n      return expr;\r\n    } */\r\n\r\n    var numArguments = expression.arguments.length;\r\n    var numArgumentsInclThis = functionInstance.instanceMethodOf != null ? numArguments + 1 : numArguments;\r\n    var argumentIndex = 0;\r\n\r\n    var args = new Array<Expression>(numArgumentsInclThis);\r\n    if (functionInstance.instanceMethodOf) {\r\n      assert(resolved.targetExpression != null);\r\n      args[argumentIndex++] = <Expression>resolved.targetExpression;\r\n    }\r\n    for (i = 0; i < numArguments; ++i)\r\n      args[argumentIndex++] = expression.arguments[i];\r\n    return this.compileCall(functionInstance, args, expression);\r\n  }\r\n\r\n  /**\r\n   * Compiles a call to a function. If an instance method, `this` is the first element in\r\n   * `argumentExpressions` or can be specified explicitly as the last argument.\r\n   */\r\n  compileCall(functionInstance: Function, argumentExpressions: Expression[], reportNode: Node, thisArg: ExpressionRef = 0): ExpressionRef {\r\n\r\n    // validate and compile arguments\r\n    var parameters = functionInstance.parameters;\r\n\r\n    var numParameters = parameters.length;\r\n    var numParametersInclThis = functionInstance.instanceMethodOf != null ? numParameters + 1 : numParameters;\r\n    var numArgumentsInclThis = argumentExpressions.length;\r\n    var numArguments = functionInstance.instanceMethodOf != null ? numArgumentsInclThis - 1 : numArgumentsInclThis;\r\n    if (thisArg)\r\n      numArgumentsInclThis++;\r\n\r\n    if (numArgumentsInclThis > numParametersInclThis) { // too many arguments\r\n      this.error(DiagnosticCode.Expected_0_arguments_but_got_1, reportNode.range,\r\n        numParameters.toString(10),\r\n        numArguments.toString(10)\r\n      );\r\n      return this.module.createUnreachable();\r\n    }\r\n    var operands = new Array<ExpressionRef>(numParametersInclThis);\r\n    var operandIndex = 0;\r\n    var argumentIndex = 0;\r\n    if (functionInstance.instanceMethodOf) {\r\n      if (thisArg)\r\n        operands[operandIndex++] = thisArg;\r\n      else\r\n        operands[operandIndex++] = this.compileExpression(argumentExpressions[argumentIndex++], functionInstance.instanceMethodOf.type);\r\n    }\r\n    for (; operandIndex < numParametersInclThis; ++operandIndex) {\r\n\r\n      // argument has been provided\r\n      if (numArgumentsInclThis > operandIndex) {\r\n        operands[operandIndex] = this.compileExpression(argumentExpressions[argumentIndex++], parameters[operandIndex + numParameters - numParametersInclThis].type);\r\n\r\n      // argument has been omitted\r\n      } else {\r\n        var initializer = parameters[operandIndex + numParameters - numParametersInclThis].initializer;\r\n        if (initializer) { // fall back to provided initializer\r\n          operands[operandIndex] = this.compileExpression(initializer, parameters[operandIndex + numParameters - numParametersInclThis].type);\r\n          // FIXME: here, the initializer is compiled in the caller's scope.\r\n          // a solution could be to use a stub for each possible overload, calling the\r\n          // full function with optional arguments being part of the stub's body.\r\n\r\n        } else { // too few arguments\r\n          this.error(DiagnosticCode.Expected_at_least_0_arguments_but_got_1, reportNode.range,\r\n            (operandIndex + numParameters - numParametersInclThis).toString(10),\r\n            numArguments.toString(10)\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n      }\r\n    }\r\n\r\n    this.currentType = functionInstance.returnType;\r\n    return this.makeCall(functionInstance, operands);\r\n  }\r\n\r\n  /** Makes a call operation as is. */\r\n  makeCall(functionInstance: Function, operands: ExpressionRef[] | null = null): ExpressionRef {\r\n    if (!(functionInstance.is(ElementFlags.COMPILED) || this.compileFunction(functionInstance)))\r\n      return this.module.createUnreachable();\r\n\r\n    // imported function\r\n    if (functionInstance.is(ElementFlags.DECLARED))\r\n      return this.module.createCallImport(functionInstance.internalName, operands, functionInstance.returnType.toNativeType());\r\n\r\n    // internal function\r\n    return this.module.createCall(functionInstance.internalName, operands, functionInstance.returnType.toNativeType());\r\n  }\r\n\r\n  compileCommaExpression(expression: CommaExpression, contextualType: Type): ExpressionRef {\r\n    var expressions = expression.expressions;\r\n    var k = expressions.length;\r\n    var exprs = new Array<ExpressionRef>(k--);\r\n    for (var i = 0; i < k; ++i)\r\n      exprs[i] = this.compileExpression(expressions[i], Type.void);    // drop all\r\n    exprs[i] = this.compileExpression(expressions[i], contextualType); // except last\r\n    return this.module.createBlock(null, exprs, this.currentType.toNativeType());\r\n  }\r\n\r\n  compileElementAccessExpression(expression: ElementAccessExpression, contextualType: Type): ExpressionRef {\r\n    var resolved = this.program.resolveElementAccess(expression, this.currentFunction); // reports\r\n    if (!resolved)\r\n      return this.module.createUnreachable();\r\n    assert(resolved.element.kind == ElementKind.FUNCTION_PROTOTYPE && resolved.target && resolved.target.kind == ElementKind.CLASS);\r\n    var instance = (<FunctionPrototype>resolved.element).resolve(null, (<Class>resolved.target).contextualTypeArguments);\r\n    if (!instance)\r\n      return this.module.createUnreachable();\r\n    return this.compileCall(instance, [ expression.expression, expression.elementExpression ], expression);\r\n  }\r\n\r\n  compileIdentifierExpression(expression: IdentifierExpression, contextualType: Type): ExpressionRef {\r\n    // check special keywords first\r\n    switch (expression.kind) {\r\n\r\n      case NodeKind.NULL:\r\n        if (this.options.target == Target.WASM64) {\r\n          if (!contextualType.classType) {\r\n            assert(contextualType.kind == TypeKind.USIZE);\r\n            this.currentType = Type.usize64;\r\n          }\r\n          return this.module.createI64(0);\r\n        }\r\n        if (!contextualType.classType) {\r\n          assert(contextualType.kind == TypeKind.USIZE);\r\n          this.currentType = Type.usize32;\r\n        }\r\n        return this.module.createI32(0);\r\n\r\n      case NodeKind.TRUE:\r\n        this.currentType = Type.bool;\r\n        return this.module.createI32(1);\r\n\r\n      case NodeKind.FALSE:\r\n        this.currentType = Type.bool;\r\n        return this.module.createI32(0);\r\n\r\n      case NodeKind.THIS:\r\n        if (this.currentFunction.instanceMethodOf) {\r\n          this.currentType = this.currentFunction.instanceMethodOf.type;\r\n          return this.module.createGetLocal(0, this.currentType.toNativeType());\r\n        }\r\n        this.error(DiagnosticCode._this_cannot_be_referenced_in_current_location, expression.range);\r\n        this.currentType = this.options.target == Target.WASM64 ? Type.usize64 : Type.usize32;\r\n        return this.module.createUnreachable();\r\n\r\n      case NodeKind.SUPER:\r\n        if (this.currentFunction.instanceMethodOf && this.currentFunction.instanceMethodOf.base) {\r\n          this.currentType = this.currentFunction.instanceMethodOf.base.type;\r\n          return this.module.createGetLocal(0, this.currentType.toNativeType());\r\n        }\r\n        this.error(DiagnosticCode._super_can_only_be_referenced_in_a_derived_class, expression.range);\r\n        this.currentType = this.options.target == Target.WASM64 ? Type.usize64 : Type.usize32;\r\n        return this.module.createUnreachable();\r\n    }\r\n\r\n    // otherwise resolve\r\n    var resolved = this.program.resolveIdentifier(expression, this.currentFunction, this.currentEnum); // reports\r\n    if (!resolved)\r\n      return this.module.createUnreachable();\r\n\r\n    var element = resolved.element;\r\n    switch (element.kind) {\r\n\r\n      case ElementKind.LOCAL:\r\n        if ((<Local>element).is(ElementFlags.INLINED))\r\n          return this.compileInlineConstant(<Local>element, contextualType);\r\n        assert((<Local>element).index >= 0);\r\n        this.currentType = (<Local>element).type;\r\n        return this.module.createGetLocal((<Local>element).index, this.currentType.toNativeType());\r\n\r\n      case ElementKind.GLOBAL:\r\n        if (element.is(ElementFlags.BUILTIN))\r\n          return compileBuiltinGetConstant(this, <Global>element, expression);\r\n        if (!this.compileGlobal(<Global>element)) // reports; not yet compiled if a static field compiled as a global\r\n          return this.module.createUnreachable();\r\n        assert((<Global>element).type != Type.void);\r\n        if ((<Global>element).is(ElementFlags.INLINED))\r\n          return this.compileInlineConstant(<Global>element, contextualType);\r\n        this.currentType = (<Global>element).type;\r\n        return this.module.createGetGlobal((<Global>element).internalName, this.currentType.toNativeType());\r\n\r\n      case ElementKind.ENUMVALUE: // here: if referenced from within the same enum\r\n        if (!element.is(ElementFlags.COMPILED)) {\r\n          this.error(DiagnosticCode.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums, expression.range);\r\n          this.currentType = Type.i32;\r\n          return this.module.createUnreachable();\r\n        }\r\n        this.currentType = Type.i32;\r\n        if ((<EnumValue>element).is(ElementFlags.INLINED))\r\n          return this.module.createI32((<EnumValue>element).constantValue);\r\n        return this.module.createGetGlobal((<EnumValue>element).internalName, NativeType.I32);\r\n    }\r\n    this.error(DiagnosticCode.Operation_not_supported, expression.range);\r\n    return this.module.createUnreachable();\r\n  }\r\n\r\n  compileLiteralExpression(expression: LiteralExpression, contextualType: Type, implicitNegate: bool = false): ExpressionRef {\r\n    switch (expression.literalKind) {\r\n\r\n      case LiteralKind.ARRAY:\r\n        assert(!implicitNegate);\r\n        var classType = contextualType.classType;\r\n        if (classType && classType == this.program.elements.get(\"Array\") && classType.typeArguments && classType.typeArguments.length == 1)\r\n          return this.compileStaticArray(classType.typeArguments[0], (<ArrayLiteralExpression>expression).elementExpressions);\r\n        this.error(DiagnosticCode.Operation_not_supported, expression.range);\r\n        return this.module.createUnreachable();\r\n\r\n      case LiteralKind.FLOAT: {\r\n        var floatValue = (<FloatLiteralExpression>expression).value;\r\n        if (implicitNegate)\r\n          floatValue = -floatValue;\r\n        if (contextualType == Type.f32)\r\n          return this.module.createF32(<f32>floatValue);\r\n        this.currentType = Type.f64;\r\n        return this.module.createF64(floatValue);\r\n      }\r\n\r\n      case LiteralKind.INTEGER:\r\n        var intValue = (<IntegerLiteralExpression>expression).value;\r\n        if (implicitNegate)\r\n          intValue = i64_sub(i64_new(0), intValue);\r\n        switch (contextualType.kind) {\r\n\r\n          // compile to contextualType if matching\r\n\r\n          case TypeKind.I8:\r\n            if (i64_is_i8(intValue))\r\n              return this.module.createI32(i64_low(intValue));\r\n            break;\r\n\r\n          case TypeKind.I16:\r\n            if (i64_is_i16(intValue))\r\n              return this.module.createI32(i64_low(intValue));\r\n            break;\r\n\r\n          case TypeKind.I32:\r\n            if (i64_is_i32(intValue))\r\n              return this.module.createI32(i64_low(intValue));\r\n            break;\r\n\r\n          case TypeKind.U8:\r\n            if (i64_is_u8(intValue))\r\n              return this.module.createI32(i64_low(intValue));\r\n            break;\r\n\r\n          case TypeKind.U16:\r\n            if (i64_is_u16(intValue))\r\n              return this.module.createI32(i64_low(intValue));\r\n            break;\r\n\r\n          case TypeKind.U32:\r\n            if (i64_is_u32(intValue))\r\n              return this.module.createI32(i64_low(intValue));\r\n            break;\r\n\r\n          case TypeKind.BOOL:\r\n            if (i64_is_bool(intValue))\r\n              return this.module.createI32(i64_low(intValue));\r\n            break;\r\n\r\n          case TypeKind.ISIZE:\r\n            if (!this.options.isWasm64) {\r\n              if (i64_is_u32(intValue))\r\n                return this.module.createI32(i64_low(intValue));\r\n              break;\r\n            }\r\n            return this.module.createI64(i64_low(intValue), i64_high(intValue));\r\n\r\n          case TypeKind.USIZE:\r\n            if (!this.options.isWasm64) {\r\n              if (i64_is_u32(intValue))\r\n                return this.module.createI32(i64_low(intValue));\r\n              break;\r\n            }\r\n            return this.module.createI64(i64_low(intValue), i64_high(intValue));\r\n\r\n          case TypeKind.I64:\r\n          case TypeKind.U64:\r\n            return this.module.createI64(i64_low(intValue), i64_high(intValue));\r\n\r\n          case TypeKind.F32:\r\n            if (i64_is_f32(intValue))\r\n              return this.module.createF32(i64_to_f32(intValue));\r\n            break;\r\n\r\n          case TypeKind.F64:\r\n            if (i64_is_f64(intValue))\r\n              return this.module.createF64(i64_to_f64(intValue));\r\n            break;\r\n\r\n          case TypeKind.VOID:\r\n            break;\r\n\r\n          default:\r\n            assert(false);\r\n            break;\r\n        }\r\n\r\n        // otherwise compile to best fitting native type\r\n\r\n        if (i64_is_i32(intValue)) {\r\n          this.currentType = Type.i32;\r\n          return this.module.createI32(i64_low(intValue));\r\n        } else {\r\n          this.currentType = Type.i64;\r\n          return this.module.createI64(i64_low(intValue), i64_high(intValue));\r\n        }\r\n\r\n      case LiteralKind.STRING:\r\n        assert(!implicitNegate);\r\n        return this.compileStaticString((<StringLiteralExpression>expression).value);\r\n\r\n      // case LiteralKind.OBJECT:\r\n      // case LiteralKind.REGEXP:\r\n    }\r\n    throw new Error(\"not implemented\");\r\n  }\r\n\r\n  compileStaticString(stringValue: string): ExpressionRef {\r\n    var stringSegment: MemorySegment | null = this.stringSegments.get(stringValue);\r\n    if (!stringSegment) {\r\n      var stringLength = stringValue.length;\r\n      var stringBuffer = new Uint8Array(4 + stringLength * 2);\r\n      stringBuffer[0] =  stringLength         & 0xff;\r\n      stringBuffer[1] = (stringLength >>>  8) & 0xff;\r\n      stringBuffer[2] = (stringLength >>> 16) & 0xff;\r\n      stringBuffer[3] = (stringLength >>> 24) & 0xff;\r\n      for (var i = 0; i < stringLength; ++i) {\r\n        stringBuffer[4 + i * 2] =  stringValue.charCodeAt(i)        & 0xff;\r\n        stringBuffer[5 + i * 2] = (stringValue.charCodeAt(i) >>> 8) & 0xff;\r\n      }\r\n      stringSegment = this.addMemorySegment(stringBuffer, this.options.usizeType.byteSize);\r\n      this.stringSegments.set(stringValue, stringSegment);\r\n    }\r\n    var stringOffset = stringSegment.offset;\r\n    this.currentType = this.options.usizeType;\r\n    if (this.options.isWasm64)\r\n      return this.module.createI64(i64_low(stringOffset), i64_high(stringOffset));\r\n    assert(i64_is_i32(stringOffset));\r\n    return this.module.createI32(i64_low(stringOffset));\r\n  }\r\n\r\n  compileStaticArray(elementType: Type, expressions: (Expression | null)[]): ExpressionRef {\r\n    // compile as static if all element expressions are precomputable, otherwise\r\n    // initialize in place.\r\n    var isStatic = true;\r\n    var size = expressions.length;\r\n\r\n    var nativeType = elementType.toNativeType();\r\n    var values: usize;\r\n    switch (nativeType) {\r\n\r\n      case NativeType.I32:\r\n        values = changetype<usize>(new Int32Array(size));\r\n        break;\r\n\r\n      case NativeType.I64:\r\n        values = changetype<usize>(new Array<I64>(size));\r\n        break;\r\n\r\n      case NativeType.F32:\r\n        values = changetype<usize>(new Float32Array(size));\r\n        break;\r\n\r\n      case NativeType.F64:\r\n        values = changetype<usize>(new Float64Array(size));\r\n        break;\r\n\r\n      default:\r\n        throw new Error(\"concrete type expected\");\r\n    }\r\n\r\n    var exprs = new Array<ExpressionRef>(size);\r\n    var expr: BinaryenExpressionRef;\r\n    for (var i = 0; i < size; ++i) {\r\n      exprs[i] = expressions[i] ? this.compileExpression(<Expression>expressions[i], elementType) : elementType.toNativeZero(this.module);\r\n      if (isStatic) {\r\n        if (_BinaryenExpressionGetId(expr = this.precomputeExpressionRef(exprs[i])) == ExpressionId.Const) {\r\n          assert(_BinaryenExpressionGetType(expr) == nativeType);\r\n          switch (nativeType) {\r\n\r\n            case NativeType.I32:\r\n              changetype<i32[]>(values)[i] = _BinaryenConstGetValueI32(expr);\r\n              break;\r\n\r\n            case NativeType.I64:\r\n              changetype<I64[]>(values)[i] = i64_new(_BinaryenConstGetValueI64Low(expr), _BinaryenConstGetValueI64High(expr));\r\n              break;\r\n\r\n            case NativeType.F32:\r\n              changetype<f32[]>(values)[i] = _BinaryenConstGetValueF32(expr);\r\n              break;\r\n\r\n            case NativeType.F64:\r\n              changetype<f64[]>(values)[i] = _BinaryenConstGetValueF64(expr);\r\n              break;\r\n\r\n            default:\r\n              assert(false); // checked above\r\n          }\r\n        } else {\r\n          // TODO: emit a warning if declared 'const'\r\n          isStatic = false;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (isStatic) {\r\n      // TODO: convert to Uint8Array and create the segment\r\n    } else {\r\n      // TODO: initialize in place\r\n    }\r\n    // TODO: alternatively, static elements could go into data segments while\r\n    // dynamic ones are initialized on top? any benefits? (doesn't seem so)\r\n    throw new Error(\"not implemented\");\r\n  }\r\n\r\n  compileNewExpression(expression: NewExpression, contextualType: Type): ExpressionRef {\r\n    var resolved = this.program.resolveExpression(expression.expression, this.currentFunction); // reports\r\n    if (resolved) {\r\n      if (resolved.element.kind == ElementKind.CLASS_PROTOTYPE) {\r\n        var prototype = <ClassPrototype>resolved.element;\r\n        var instance = prototype.resolveInclTypeArguments(expression.typeArguments, null, expression); // reports\r\n        if (instance) {\r\n          var thisExpr = compileBuiltinAllocate(this, instance, expression);\r\n          var initializers = new Array<ExpressionRef>();\r\n\r\n          // use a temp local for 'this'\r\n          var tempLocal = this.currentFunction.getTempLocal(this.options.usizeType);\r\n          initializers.push(this.module.createSetLocal(tempLocal.index, thisExpr));\r\n\r\n          // apply field initializers\r\n          if (instance.members)\r\n            for (var member of instance.members.values()) {\r\n              if (member.kind == ElementKind.FIELD) {\r\n                var field = <Field>member;\r\n                var fieldDeclaration = field.prototype.declaration;\r\n                if (field.is(ElementFlags.CONSTANT)) {\r\n                  assert(false); // there are no built-in fields currently\r\n                } else if (fieldDeclaration && fieldDeclaration.initializer) {\r\n                  initializers.push(this.module.createStore(field.type.byteSize,\r\n                    this.module.createGetLocal(tempLocal.index, this.options.nativeSizeType),\r\n                    this.compileExpression(fieldDeclaration.initializer, field.type),\r\n                    field.type.toNativeType(),\r\n                    field.memoryOffset\r\n                  ));\r\n                }\r\n              }\r\n            }\r\n\r\n          // apply constructor\r\n          var constructorInstance = instance.constructorInstance;\r\n          if (constructorInstance)\r\n            initializers.push(this.compileCall(constructorInstance, expression.arguments, expression,\r\n              this.module.createGetLocal(tempLocal.index, this.options.nativeSizeType)\r\n            ));\r\n\r\n          // return 'this'\r\n          initializers.push(this.module.createGetLocal(tempLocal.index, this.options.nativeSizeType));\r\n          this.currentFunction.freeTempLocal(tempLocal);\r\n          thisExpr = this.module.createBlock(null, initializers, this.options.nativeSizeType);\r\n\r\n          this.currentType = instance.type;\r\n          return thisExpr;\r\n        }\r\n      } else\r\n        this.error(DiagnosticCode.Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature, expression.expression.range);\r\n    }\r\n    return this.module.createUnreachable();\r\n  }\r\n\r\n  compileParenthesizedExpression(expression: ParenthesizedExpression, contextualType: Type): ExpressionRef {\r\n    // does not change types, just order\r\n    return this.compileExpression(expression.expression, contextualType, ConversionKind.NONE);\r\n  }\r\n\r\n  compilePropertyAccessExpression(propertyAccess: PropertyAccessExpression, contextualType: Type): ExpressionRef {\r\n    var resolved = this.program.resolvePropertyAccess(propertyAccess, this.currentFunction); // reports\r\n    if (!resolved)\r\n      return this.module.createUnreachable();\r\n\r\n    var element = resolved.element;\r\n    var targetExpr: ExpressionRef;\r\n    switch (element.kind) {\r\n\r\n      case ElementKind.GLOBAL: // static property\r\n        if (element.is(ElementFlags.BUILTIN))\r\n          return compileBuiltinGetConstant(this, <Global>element, propertyAccess);\r\n        if (!this.compileGlobal(<Global>element)) // reports; not yet compiled if a static field compiled as a global\r\n          return this.module.createUnreachable();\r\n        assert((<Global>element).type != Type.void);\r\n        if ((<Global>element).is(ElementFlags.INLINED))\r\n          return this.compileInlineConstant(<Global>element, contextualType);\r\n        this.currentType = (<Global>element).type;\r\n        return this.module.createGetGlobal((<Global>element).internalName, this.currentType.toNativeType());\r\n\r\n      case ElementKind.ENUMVALUE: // enum value\r\n        if (!this.compileEnum((<EnumValue>element).enum))\r\n          return this.module.createUnreachable();\r\n        this.currentType = Type.i32;\r\n        if ((<EnumValue>element).is(ElementFlags.INLINED))\r\n          return this.module.createI32((<EnumValue>element).constantValue);\r\n        return this.module.createGetGlobal((<EnumValue>element).internalName, NativeType.I32);\r\n\r\n      case ElementKind.FIELD: // instance field\r\n        assert(resolved.target != null);\r\n        assert(resolved.targetExpression != null);\r\n        assert((<Field>element).memoryOffset >= 0);\r\n        targetExpr = this.compileExpression(<Expression>resolved.targetExpression, this.options.target == Target.WASM64 ? Type.usize64 : Type.usize32);\r\n        this.currentType = (<Field>element).type;\r\n        return this.module.createLoad((<Field>element).type.size >> 3, (<Field>element).type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\r\n          targetExpr,\r\n          (<Field>element).type.toNativeType(),\r\n          (<Field>element).memoryOffset\r\n        );\r\n\r\n      case ElementKind.PROPERTY: // instance property (here: getter)\r\n        var getter = (<Property>element).getterPrototype;\r\n        assert(getter != null);\r\n        var getterInstance = (<FunctionPrototype>getter).resolve(null); // reports\r\n        if (!getterInstance)\r\n          return this.module.createUnreachable();\r\n        assert(getterInstance.parameters.length == 0);\r\n        this.currentType = getterInstance.returnType;\r\n        if (getterInstance.is(ElementFlags.INSTANCE)) {\r\n          var targetExpr = this.compileExpression(<Expression>resolved.targetExpression, this.options.target == Target.WASM64 ? Type.usize64 : Type.usize32)\r\n          this.currentType = getterInstance.returnType;\r\n          return this.makeCall(getterInstance, [ targetExpr ]);\r\n        } else\r\n          return this.makeCall(getterInstance);\r\n    }\r\n    this.error(DiagnosticCode.Operation_not_supported, propertyAccess.range);\r\n    return this.module.createUnreachable();\r\n  }\r\n\r\n  compileTernaryExpression(expression: TernaryExpression, contextualType: Type): ExpressionRef {\r\n    var condition = this.compileExpression(expression.condition, Type.i32);\r\n    var ifThen = this.compileExpression(expression.ifThen, contextualType);\r\n    var ifElse = this.compileExpression(expression.ifElse, contextualType);\r\n    return this.module.createIf(condition, ifThen, ifElse);\r\n  }\r\n\r\n  compileUnaryPostfixExpression(expression: UnaryPostfixExpression, contextualType: Type): ExpressionRef {\r\n    var operator = expression.operator;\r\n\r\n    // make a getter for the expression (also obtains the type)\r\n    var getValue = this.compileExpression(expression.operand, contextualType == Type.void ? Type.i32 : contextualType, ConversionKind.NONE, false);\r\n\r\n    var op: BinaryOp;\r\n    var nativeType: NativeType;\r\n    var nativeOne: ExpressionRef;\r\n    var possiblyOverflows = false;\r\n\r\n    switch (expression.operator) {\r\n\r\n      case Token.PLUS_PLUS:\r\n        switch (this.currentType.kind) {\r\n\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL:\r\n            possiblyOverflows = true;\r\n          default:\r\n            op = BinaryOp.AddI32;\r\n            nativeType = NativeType.I32;\r\n            nativeOne = this.module.createI32(1);\r\n            break;\r\n\r\n          case TypeKind.USIZE:\r\n            // TODO: check operator overload\r\n          case TypeKind.ISIZE:\r\n            op = this.options.target == Target.WASM64 ? BinaryOp.AddI64 : BinaryOp.AddI32;\r\n            nativeType = this.options.target == Target.WASM64 ? NativeType.I64 : NativeType.I32;\r\n            nativeOne = this.currentType.toNativeOne(this.module);\r\n            break;\r\n\r\n          case TypeKind.I64:\r\n          case TypeKind.U64:\r\n            op = BinaryOp.AddI64;\r\n            nativeType = NativeType.I64;\r\n            nativeOne = this.module.createI64(1);\r\n            break;\r\n\r\n          case TypeKind.F32:\r\n            op = BinaryOp.AddF32;\r\n            nativeType = NativeType.F32;\r\n            nativeOne = this.module.createF32(1);\r\n            break;\r\n\r\n          case TypeKind.F64:\r\n            op = BinaryOp.AddF64;\r\n            nativeType = NativeType.F64;\r\n            nativeOne = this.module.createF64(1);\r\n            break;\r\n\r\n          case TypeKind.VOID:\r\n            this.error(DiagnosticCode.Operation_not_supported, expression.range);\r\n            throw new Error(\"concrete type expected\");\r\n        }\r\n        break;\r\n\r\n      case Token.MINUS_MINUS:\r\n        switch (this.currentType.kind) {\r\n\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL:\r\n            possiblyOverflows = true;\r\n          default:\r\n            op = BinaryOp.SubI32;\r\n            nativeType = NativeType.I32;\r\n            nativeOne = this.module.createI32(1);\r\n            break;\r\n\r\n          case TypeKind.USIZE:\r\n            // TODO: check operator overload\r\n          case TypeKind.ISIZE:\r\n            op = this.options.target == Target.WASM64 ? BinaryOp.SubI64 : BinaryOp.SubI32;\r\n            nativeType = this.options.target == Target.WASM64 ? NativeType.I64 : NativeType.I32;\r\n            nativeOne = this.currentType.toNativeOne(this.module);\r\n            break;\r\n\r\n          case TypeKind.I64:\r\n          case TypeKind.U64:\r\n            op = BinaryOp.SubI64;\r\n            nativeType = NativeType.I64;\r\n            nativeOne = this.module.createI64(1);\r\n            break;\r\n\r\n          case TypeKind.F32:\r\n            op = BinaryOp.SubF32;\r\n            nativeType = NativeType.F32;\r\n            nativeOne = this.module.createF32(1);\r\n            break;\r\n\r\n          case TypeKind.F64:\r\n            op = BinaryOp.SubF64;\r\n            nativeType = NativeType.F64;\r\n            nativeOne = this.module.createF64(1);\r\n            break;\r\n\r\n          case TypeKind.VOID:\r\n            this.error(DiagnosticCode.Operation_not_supported, expression.range);\r\n            throw new Error(\"concrete type expected\");\r\n        }\r\n        break;\r\n\r\n      default:\r\n        this.error(DiagnosticCode.Operation_not_supported, expression.range);\r\n        throw new Error(\"unary postfix operator expected\");\r\n    }\r\n\r\n    var setValue: ExpressionRef;\r\n    var tempLocal: Local | null = null;\r\n\r\n    // simplify if dropped anyway\r\n    if (contextualType == Type.void) {\r\n      setValue = this.module.createBinary(op,\r\n        getValue,\r\n        nativeOne\r\n      );\r\n\r\n    // otherwise use a temp local for the intermediate value\r\n    } else {\r\n      tempLocal = this.currentFunction.getTempLocal(this.currentType);\r\n      setValue = this.module.createBinary(op,\r\n        this.module.createGetLocal(tempLocal.index, nativeType),\r\n        nativeOne\r\n      );\r\n    }\r\n\r\n    if (possiblyOverflows) {\r\n      assert(this.currentType.is(TypeFlags.SMALL | TypeFlags.INTEGER));\r\n      setValue = makeSmallIntegerWrap(setValue, this.currentType, this.module);\r\n    }\r\n\r\n    setValue = this.compileAssignmentWithValue(expression.operand, setValue, false); // sets currentType = void\r\n    if (contextualType == Type.void) {\r\n      assert(!tempLocal);\r\n      return setValue;\r\n    }\r\n\r\n    this.currentType = assert(tempLocal).type;\r\n    this.currentFunction.freeTempLocal(<Local>tempLocal);\r\n    return this.module.createBlock(null, [\r\n      this.module.createSetLocal((<Local>tempLocal).index, getValue),\r\n      setValue,\r\n      this.module.createGetLocal((<Local>tempLocal).index, nativeType)\r\n    ], nativeType);\r\n  }\r\n\r\n  compileUnaryPrefixExpression(expression: UnaryPrefixExpression, contextualType: Type, wrapSmallIntegers: bool = true): ExpressionRef {\r\n    var possiblyOverflows = false;\r\n    var compound = false;\r\n    var expr: ExpressionRef;\r\n\r\n    switch (expression.operator) {\r\n\r\n      case Token.PLUS:\r\n        if (this.currentType.isReference) {\r\n          this.error(DiagnosticCode.Operation_not_supported, expression.range);\r\n          return this.module.createUnreachable();\r\n        }\r\n        expr = this.compileExpression(expression.operand, contextualType == Type.void ? Type.i32 : contextualType, ConversionKind.NONE, false);\r\n        possiblyOverflows = this.currentType.is(TypeFlags.SMALL | TypeFlags.INTEGER); // if operand already did\r\n        break;\r\n\r\n      case Token.MINUS:\r\n        if (expression.operand.kind == NodeKind.LITERAL && (\r\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.INTEGER ||\r\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.FLOAT\r\n        )) {\r\n          // implicitly negate integer and float literals. also enables proper checking of literal ranges.\r\n          expr = this.compileLiteralExpression(<LiteralExpression>expression.operand, contextualType, true);\r\n          this.addDebugLocation(expr, expression.range); // compileExpression normally does this\r\n        } else {\r\n          expr = this.compileExpression(expression.operand, contextualType == Type.void ? Type.i32 : contextualType, ConversionKind.NONE, false);\r\n          switch (this.currentType.kind) {\r\n\r\n            case TypeKind.I8:\r\n            case TypeKind.I16:\r\n            case TypeKind.U8:\r\n            case TypeKind.U16:\r\n            case TypeKind.BOOL:\r\n              possiblyOverflows = true; // or if operand already did\r\n            default:\r\n              expr = this.module.createBinary(BinaryOp.SubI32, this.module.createI32(0), expr);\r\n              break;\r\n\r\n            case TypeKind.USIZE:\r\n              if (this.currentType.isReference) {\r\n                this.error(DiagnosticCode.Operation_not_supported, expression.range);\r\n                return this.module.createUnreachable();\r\n              }\r\n            case TypeKind.ISIZE:\r\n              expr = this.module.createBinary(this.options.target == Target.WASM64 ? BinaryOp.SubI64 : BinaryOp.SubI32, this.currentType.toNativeZero(this.module), expr);\r\n              break;\r\n\r\n            case TypeKind.I64:\r\n            case TypeKind.U64:\r\n              expr = this.module.createBinary(BinaryOp.SubI64, this.module.createI64(0), expr);\r\n              break;\r\n\r\n            case TypeKind.F32:\r\n              expr = this.module.createUnary(UnaryOp.NegF32, expr);\r\n              break;\r\n\r\n            case TypeKind.F64:\r\n              expr = this.module.createUnary(UnaryOp.NegF64, expr);\r\n              break;\r\n          }\r\n        }\r\n        break;\r\n\r\n      case Token.PLUS_PLUS:\r\n        compound = true;\r\n        expr = this.compileExpression(expression.operand, contextualType == Type.void ? Type.i32 : contextualType, ConversionKind.NONE, false);\r\n\r\n        switch (this.currentType.kind) {\r\n\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL:\r\n            possiblyOverflows = true; // or if operand already did\r\n          default:\r\n            expr = this.module.createBinary(BinaryOp.AddI32, expr, this.module.createI32(1));\r\n            break;\r\n\r\n          case TypeKind.USIZE:\r\n            if (this.currentType.isReference) {\r\n              this.error(DiagnosticCode.Operation_not_supported, expression.range);\r\n              return this.module.createUnreachable();\r\n            }\r\n            // fall-through\r\n          case TypeKind.ISIZE:\r\n            expr = this.module.createBinary(this.options.target == Target.WASM64 ? BinaryOp.AddI64 : BinaryOp.AddI32, expr, this.currentType.toNativeOne(this.module));\r\n            break;\r\n\r\n          case TypeKind.I64:\r\n          case TypeKind.U64:\r\n            expr = this.module.createBinary(BinaryOp.AddI64, expr, this.module.createI64(1));\r\n            break;\r\n\r\n          case TypeKind.F32:\r\n            expr = this.module.createBinary(BinaryOp.AddF32, expr, this.module.createF32(1));\r\n            break;\r\n\r\n          case TypeKind.F64:\r\n            expr = this.module.createBinary(BinaryOp.AddF64, expr, this.module.createF64(1));\r\n            break;\r\n        }\r\n        break;\r\n\r\n      case Token.MINUS_MINUS:\r\n        compound = true;\r\n        expr = this.compileExpression(expression.operand, contextualType == Type.void ? Type.i32 : contextualType, ConversionKind.NONE, false);\r\n\r\n        switch (this.currentType.kind) {\r\n\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL:\r\n            possiblyOverflows = true; // or if operand already did\r\n            // fall-through\r\n          default:\r\n            expr = this.module.createBinary(BinaryOp.SubI32, expr, this.module.createI32(1));\r\n            break;\r\n\r\n          case TypeKind.USIZE:\r\n            if (this.currentType.isReference) {\r\n              this.error(DiagnosticCode.Operation_not_supported, expression.range);\r\n              return this.module.createUnreachable();\r\n            }\r\n            // fall-through\r\n          case TypeKind.ISIZE:\r\n            expr = this.module.createBinary(this.options.target == Target.WASM64 ? BinaryOp.SubI64 : BinaryOp.SubI32, expr, this.currentType.toNativeOne(this.module));\r\n            break;\r\n\r\n          case TypeKind.I64:\r\n          case TypeKind.U64:\r\n            expr = this.module.createBinary(BinaryOp.SubI64, expr, this.module.createI64(1));\r\n            break;\r\n\r\n          case TypeKind.F32:\r\n            expr = this.module.createBinary(BinaryOp.SubF32, expr, this.module.createF32(1));\r\n            break;\r\n\r\n          case TypeKind.F64:\r\n            expr = this.module.createBinary(BinaryOp.SubF64, expr, this.module.createF64(1));\r\n            break;\r\n        }\r\n        break;\r\n\r\n      case Token.EXCLAMATION: // must wrap small integers\r\n        expr = this.compileExpression(expression.operand, contextualType == Type.void ? Type.i32 : contextualType, ConversionKind.NONE);\r\n        expr = makeIsFalseish(expr, this.currentType, this.module);\r\n        this.currentType = Type.bool;\r\n        break;\r\n\r\n      case Token.TILDE: // retains low bits of small integers\r\n        expr = this.compileExpression(expression.operand, contextualType == Type.void ? Type.i32 : contextualType.is(TypeFlags.FLOAT) ? Type.i64 : contextualType, contextualType == Type.void ? ConversionKind.NONE : ConversionKind.IMPLICIT, false);\r\n\r\n        switch (this.currentType.kind) {\r\n\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL:\r\n            possiblyOverflows = true; // or if operand already did\r\n          default:\r\n            expr = this.module.createBinary(BinaryOp.XorI32, expr, this.module.createI32(-1));\r\n            break;\r\n\r\n          case TypeKind.USIZE:\r\n            if (this.currentType.isReference) {\r\n              this.error(DiagnosticCode.Operation_not_supported, expression.range);\r\n              return this.module.createUnreachable();\r\n            }\r\n            // fall-through\r\n          case TypeKind.ISIZE:\r\n            expr = this.module.createBinary(this.options.target == Target.WASM64 ? BinaryOp.XorI64 : BinaryOp.XorI32, expr, this.currentType.toNativeNegOne(this.module));\r\n            break;\r\n\r\n          case TypeKind.I64:\r\n          case TypeKind.U64:\r\n            expr = this.module.createBinary(BinaryOp.XorI64, expr, this.module.createI64(-1, -1));\r\n            break;\r\n        }\r\n        break;\r\n\r\n      case Token.TYPEOF:\r\n        // it might make sense to implement typeof in a way that a generic function can detect whether\r\n        // its type argument is a class type or string. that could then be used, for example, to\r\n        // generate hash codes for sets and maps, depending on the kind of type parameter we have.\r\n        // ideally the comparison would not involve actual string comparison and limit available\r\n        // operations to hard-coded string literals.\r\n        this.error(DiagnosticCode.Operation_not_supported, expression.range);\r\n        throw new Error(\"not implemented\");\r\n\r\n      default:\r\n        this.error(DiagnosticCode.Operation_not_supported, expression.range);\r\n        throw new Error(\"unary operator expected\");\r\n    }\r\n    if (possiblyOverflows && wrapSmallIntegers) {\r\n      assert(this.currentType.is(TypeFlags.SMALL | TypeFlags.INTEGER));\r\n      expr = makeSmallIntegerWrap(expr, this.currentType, this.module);\r\n    }\r\n    return compound\r\n      ? this.compileAssignmentWithValue(expression.operand, expr, contextualType != Type.void)\r\n      : expr;\r\n  }\r\n\r\n  addDebugLocation(expr: ExpressionRef, range: Range): void {\r\n    if (this.options.sourceMap != null) {\r\n      var source = range.source;\r\n      if (source.debugInfoIndex < 0)\r\n        source.debugInfoIndex = this.module.addDebugInfoFile(source.normalizedPath);\r\n      range.debugInfoRef = expr;\r\n      if (!this.currentFunction.debugLocations)\r\n        (this.currentFunction.debugLocations = new Array(8)).length = 0;\r\n      this.currentFunction.debugLocations.push(range);\r\n    }\r\n  }\r\n}\r\n\r\n// helpers\r\n\r\n/** Wraps a 32-bit integer expression so it evaluates to a valid value in the range of the specified small integer type. */\r\nexport function makeSmallIntegerWrap(expr: ExpressionRef, type: Type, module: Module) {\r\n  switch (type.kind) {\r\n\r\n    case TypeKind.I8:\r\n      expr = module.createBinary(BinaryOp.ShrI32,\r\n        module.createBinary(BinaryOp.ShlI32,\r\n          expr,\r\n          module.createI32(24)\r\n        ),\r\n        module.createI32(24)\r\n      );\r\n      break;\r\n\r\n    case TypeKind.I16:\r\n      expr = module.createBinary(BinaryOp.ShrI32,\r\n        module.createBinary(BinaryOp.ShlI32,\r\n          expr,\r\n          module.createI32(16)\r\n        ),\r\n        module.createI32(16)\r\n      );\r\n      break;\r\n\r\n    case TypeKind.U8:\r\n      expr = module.createBinary(BinaryOp.AndI32,\r\n        expr,\r\n        module.createI32(0xff)\r\n      );\r\n      break;\r\n\r\n    case TypeKind.U16:\r\n      expr = module.createBinary(BinaryOp.AndI32,\r\n        expr,\r\n        module.createI32(0xffff)\r\n      );\r\n      break;\r\n\r\n    case TypeKind.BOOL:\r\n      expr = module.createBinary(BinaryOp.AndI32,\r\n        expr,\r\n        module.createI32(0x1)\r\n      );\r\n      break;\r\n\r\n    case TypeKind.VOID:\r\n      throw new Error(\"concrete type expected\");\r\n  }\r\n  return expr;\r\n}\r\n\r\n/** Creates a comparison whether an expression is not 'true' in a broader sense. */\r\nexport function makeIsFalseish(expr: ExpressionRef, type: Type, module: Module): ExpressionRef {\r\n  switch (type.kind) {\r\n\r\n    default: // any integer up to 32 bits\r\n      expr = module.createUnary(UnaryOp.EqzI32, expr);\r\n      break;\r\n\r\n    case TypeKind.I64:\r\n    case TypeKind.U64:\r\n      expr = module.createUnary(UnaryOp.EqzI64, expr);\r\n      break;\r\n\r\n    case TypeKind.USIZE:\r\n      // TODO: strings\r\n    case TypeKind.ISIZE:\r\n      expr = module.createUnary(type.size == 64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32, expr);\r\n      break;\r\n\r\n    case TypeKind.F32:\r\n      expr = module.createBinary(BinaryOp.EqF32, expr, module.createF32(0));\r\n      break;\r\n\r\n    case TypeKind.F64:\r\n      expr = module.createBinary(BinaryOp.EqF64, expr, module.createF64(0));\r\n      break;\r\n\r\n    case TypeKind.VOID:\r\n      throw new Error(\"concrete type expected\");\r\n  }\r\n  return expr;\r\n}\r\n\r\n/** Creates a comparison whether an expression is 'true' in a broader sense. */\r\nexport function makeIsTrueish(expr: ExpressionRef, type: Type, module: Module): ExpressionRef {\r\n  switch (type.kind) {\r\n\r\n    default: // any integer up to 32 bits\r\n      expr = module.createBinary(BinaryOp.NeI32, expr, module.createI32(0));\r\n      break;\r\n\r\n    case TypeKind.I64:\r\n    case TypeKind.U64:\r\n      expr = module.createBinary(BinaryOp.NeI64, expr, module.createI64(0));\r\n      break;\r\n\r\n    case TypeKind.USIZE:\r\n      // TODO: strings\r\n    case TypeKind.ISIZE:\r\n      expr = type.size == 64\r\n        ? module.createBinary(BinaryOp.NeI64, expr, module.createI64(0))\r\n        : module.createBinary(BinaryOp.NeI32, expr, module.createI32(0));\r\n      break;\r\n\r\n    case TypeKind.F32:\r\n      expr = module.createBinary(BinaryOp.NeF32, expr, module.createF32(0));\r\n      break;\r\n\r\n    case TypeKind.F64:\r\n      expr = module.createBinary(BinaryOp.NeF64, expr, module.createF64(0));\r\n      break;\r\n\r\n    case TypeKind.VOID:\r\n      throw new Error(\"concrete type expected\");\r\n  }\r\n  return expr;\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/compiler.ts","import {\r\n  Target\r\n} from \"./compiler\";\r\n\r\nimport {\r\n  Class,\r\n  Function\r\n} from \"./program\";\r\n\r\nimport {\r\n  NativeType,\r\n  ExpressionRef,\r\n  Module\r\n} from \"./module\";\r\n\r\n/** Indicates the kind of a type. */\r\nexport const enum TypeKind {\r\n\r\n  // signed integers\r\n  I8,\r\n  I16,\r\n  I32,\r\n  I64,\r\n  ISIZE,\r\n\r\n  // unsigned integers\r\n  U8,\r\n  U16,\r\n  U32,\r\n  U64,\r\n  USIZE,\r\n  BOOL, // sic\r\n\r\n  // floats\r\n  F32,\r\n  F64,\r\n\r\n  // other\r\n  VOID\r\n}\r\n\r\n/** Indicates capabilities of a type. */\r\nexport const enum TypeFlags {\r\n  NONE = 0,\r\n  /** Is a signed type that can represent negative values. */\r\n  SIGNED = 1 << 0,\r\n  /** Is an unsigned type that cannot represent negative values. */\r\n  UNSIGNED = 1 << 1,\r\n  /** Is an integer type. */\r\n  INTEGER = 1 << 2,\r\n  /** Is a floating point type. */\r\n  FLOAT = 1 << 3,\r\n  /** Is a sized integer type with a target specific bit size. */\r\n  SIZE = 1 << 4,\r\n  /** Is a small type that is emulated in a larger type. */\r\n  SMALL = 1 << 5,\r\n  /** Is a long type larger than 32-bits. */\r\n  LONG = 1 << 6,\r\n  /** Is a value type. */\r\n  VALUE = 1 << 7,\r\n  /** Is a reference type. */\r\n  REFERENCE = 1 << 8,\r\n  /** Is a nullable type. */\r\n  NULLABLE = 1 << 9\r\n}\r\n\r\n/** Represents a resolved type. */\r\nexport class Type {\r\n\r\n  /** Type kind. */\r\n  kind: TypeKind;\r\n  /** Type flags. */\r\n  flags: TypeFlags;\r\n  /** Size in bits. */\r\n  size: u32;\r\n  /** Size in bytes. Ceiled to 8-bits. */\r\n  byteSize: i32;\r\n  /** Underlying class type, if a class type. */\r\n  classType: Class | null;\r\n  /** Underlying function type, if a function type. */\r\n  functionType: Function | null;\r\n  /** Respective nullable type, if non-nullable. */\r\n  nullableType: Type | null = null;\r\n  /** Respective non-nullable type, if nullable. */\r\n  nonNullableType: Type;\r\n\r\n  /** Constructs a new resolved type. */\r\n  constructor(kind: TypeKind, flags: TypeFlags, size: i32) {\r\n    this.kind = kind;\r\n    this.flags = flags;\r\n    this.size = size;\r\n    this.byteSize = <i32>ceil<f64>(<f64>size / 8);\r\n    this.classType = null;\r\n    this.nonNullableType = this;\r\n  }\r\n\r\n  /** Computes the sign-extending shift in the target type. */\r\n  computeSmallIntegerShift(targetType: Type): u32 {\r\n    return targetType.size - this.size;\r\n  }\r\n\r\n  /** Computes the truncating mask in the target type. */\r\n  computeSmallIntegerMask(targetType: Type): u32 {\r\n    return -1 >>> (targetType.size - this.size);\r\n  }\r\n\r\n  /** Tests if this type has the specified capabilities. */\r\n  is(flags: TypeFlags): bool {\r\n    return (this.flags & flags) == flags;\r\n  }\r\n\r\n  /** Tests if this type is a class type. */\r\n  get isClass(): bool { return this.classType != null; }\r\n  /** Tests if this type is a function type. */\r\n  get isFunction(): bool { return this.functionType != null; }\r\n  /** Tests if this type is a reference type. */\r\n  get isReference(): bool { return this.classType != null || this.functionType != null; }\r\n\r\n  /** Composes a class type from this type and a class. */\r\n  asClass(classType: Class): Type {\r\n    assert(this.kind == TypeKind.USIZE);\r\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\r\n    ret.classType = classType;\r\n    return ret;\r\n  }\r\n\r\n  /** Composes a function type from this type and a function. */\r\n  asFunction(functionType: Function): Type {\r\n    assert(this.kind == TypeKind.USIZE && !this.isReference);\r\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\r\n    ret.functionType = functionType;\r\n    return ret;\r\n  }\r\n\r\n  /** Composes the respective nullable type of this type. */\r\n  asNullable(): Type | null {\r\n    assert(this.kind == TypeKind.USIZE);\r\n    if (!this.nullableType) {\r\n      assert(!this.is(TypeFlags.NULLABLE) && this.isReference);\r\n      this.nullableType = new Type(this.kind, this.flags | TypeFlags.NULLABLE, this.size);\r\n      this.nullableType.classType = this.classType;\r\n      this.nullableType.functionType = this.functionType;\r\n    }\r\n    return this.nullableType;\r\n  }\r\n\r\n  /** Converts this type to its TypeScript representation. */\r\n  toString(kindOnly: bool = false): string {\r\n    switch (this.kind) {\r\n      case TypeKind.I8: return \"i8\";\r\n      case TypeKind.I16: return \"i16\";\r\n      case TypeKind.I32: return \"i32\";\r\n      case TypeKind.I64: return \"i64\";\r\n      case TypeKind.ISIZE: return \"isize\";\r\n      case TypeKind.U8: return \"u8\";\r\n      case TypeKind.U16: return \"u16\";\r\n      case TypeKind.U32: return \"u32\";\r\n      case TypeKind.U64: return \"u64\";\r\n      case TypeKind.USIZE:\r\n        if (kindOnly) return \"usize\";\r\n        return this.classType ? this.classType.toString()\r\n             : this.functionType ? this.functionType.toTypeString()\r\n             : \"usize\";\r\n      case TypeKind.BOOL: return \"bool\";\r\n      case TypeKind.F32: return \"f32\";\r\n      case TypeKind.F64: return \"f64\";\r\n      case TypeKind.VOID: return \"void\";\r\n      default: assert(false); return \"\";\r\n    }\r\n  }\r\n\r\n  // Binaryen specific\r\n\r\n  /** Converts this type to its respective native type. */\r\n  toNativeType(): NativeType {\r\n    switch (this.kind) {\r\n\r\n      default:\r\n        return NativeType.I32;\r\n\r\n      case TypeKind.I64:\r\n      case TypeKind.U64:\r\n        return NativeType.I64;\r\n\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE:\r\n        return this.size == 64 ? NativeType.I64 : NativeType.I32;\r\n\r\n      case TypeKind.F32:\r\n        return NativeType.F32;\r\n\r\n      case TypeKind.F64:\r\n        return NativeType.F64;\r\n\r\n      case TypeKind.VOID:\r\n        return NativeType.None;\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its native `0` value. */\r\n  toNativeZero(module: Module): ExpressionRef {\r\n    switch (this.kind) {\r\n\r\n      case TypeKind.VOID:\r\n        assert(false);\r\n\r\n      default:\r\n        return module.createI32(0);\r\n\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE:\r\n        if (this.size != 64)\r\n          return module.createI32(0);\r\n        // fall-through\r\n\r\n      case TypeKind.I64:\r\n      case TypeKind.U64:\r\n        return module.createI64(0);\r\n\r\n      case TypeKind.F32:\r\n        return module.createF32(0);\r\n\r\n      case TypeKind.F64:\r\n        return module.createF64(0);\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its native `1` value. */\r\n  toNativeOne(module: Module): ExpressionRef {\r\n    switch (this.kind) {\r\n\r\n      case TypeKind.VOID:\r\n        assert(false);\r\n\r\n      default:\r\n        return module.createI32(1);\r\n\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE:\r\n        if (this.size != 64)\r\n          return module.createI32(1);\r\n        // fall-through\r\n\r\n      case TypeKind.I64:\r\n      case TypeKind.U64:\r\n        return module.createI64(1);\r\n\r\n      case TypeKind.F32:\r\n        return module.createF32(1);\r\n\r\n      case TypeKind.F64:\r\n        return module.createF64(1);\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its native `-1` value. */\r\n  toNativeNegOne(module: Module): ExpressionRef {\r\n    switch (this.kind) {\r\n\r\n      case TypeKind.VOID:\r\n        assert(false);\r\n\r\n      default:\r\n        return module.createI32(-1);\r\n\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE:\r\n        if (this.size != 64)\r\n          return module.createI32(-1);\r\n        // fall-through\r\n\r\n      case TypeKind.I64:\r\n      case TypeKind.U64:\r\n        return module.createI64(-1, -1);\r\n\r\n      case TypeKind.F32:\r\n        return module.createF32(-1);\r\n\r\n      case TypeKind.F64:\r\n        return module.createF64(-1);\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its signature string. */\r\n  toSignatureString(): string {\r\n    switch (this.kind) {\r\n\r\n      default:\r\n        return \"i\";\r\n\r\n      case TypeKind.I64:\r\n      case TypeKind.U64:\r\n        return \"I\";\r\n\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE:\r\n        return this.size == 64 ? \"I\" : \"i\";\r\n\r\n      case TypeKind.F32:\r\n        return \"f\";\r\n\r\n      case TypeKind.F64:\r\n        return \"F\";\r\n\r\n      case TypeKind.VOID:\r\n        return \"v\";\r\n    }\r\n  }\r\n\r\n  // Types\r\n\r\n  /** An 8-bit signed integer. */\r\n  static readonly i8: Type  = new Type(TypeKind.I8,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.SMALL    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,   8\r\n  );\r\n\r\n  /** A 16-bit signed integer. */\r\n  static readonly i16: Type = new Type(TypeKind.I16,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.SMALL    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  16\r\n  );\r\n\r\n  /** A 32-bit signed integer. */\r\n  static readonly i32: Type = new Type(TypeKind.I32,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit signed integer. */\r\n  static readonly i64: Type = new Type(TypeKind.I64,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 32-bit signed size. WASM32 only. */\r\n  static readonly isize32: Type = new Type(TypeKind.ISIZE,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.SIZE     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit signed size. WASM64 only. */\r\n  static readonly isize64: Type = new Type(TypeKind.ISIZE,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.SIZE     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** An 8-bit unsigned integer. */\r\n  static readonly u8: Type = new Type(TypeKind.U8,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SMALL    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,   8\r\n  );\r\n\r\n  /** A 16-bit unsigned integer. */\r\n  static readonly u16: Type = new Type(TypeKind.U16,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SMALL    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  16\r\n  );\r\n\r\n  /** A 32-bit unsigned integer. */\r\n  static readonly u32: Type = new Type(TypeKind.U32,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit unsigned integer. */\r\n  static readonly u64: Type = new Type(TypeKind.U64,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 32-bit unsigned size. WASM32 only. */\r\n  static readonly usize32: Type = new Type(TypeKind.USIZE,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SIZE     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit unsigned size. WASM64 only. */\r\n  static readonly usize64: Type = new Type(TypeKind.USIZE,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.SIZE     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 1-bit unsigned integer. */\r\n  static readonly bool: Type = new Type(TypeKind.BOOL,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SMALL    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,   1\r\n  );\r\n\r\n  /** A 32-bit float. */\r\n  static readonly f32: Type = new Type(TypeKind.F32,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.FLOAT    |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit float. */\r\n  static readonly f64: Type = new Type(TypeKind.F64,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.FLOAT    |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** No return type. */\r\n  static readonly void: Type = new Type(TypeKind.VOID, TypeFlags.NONE, 0);\r\n}\r\n\r\n/** Converts an array of types to an array of native types. */\r\nexport function typesToNativeTypes(types: Type[]): NativeType[] {\r\n  var k = types.length;\r\n  var ret = new Array<NativeType>(k);\r\n  for (var i = 0; i < k; ++i)\r\n    ret[i] = types[i].toNativeType();\r\n  return ret;\r\n}\r\n\r\n/** Converts an array of types to its combined string representation. */\r\nexport function typesToString(types: Type[]): string {\r\n  var k = types.length;\r\n  if (!k)\r\n    return \"\";\r\n  var sb = new Array<string>(k);\r\n  for (var i = 0; i < k; ++i)\r\n    sb[i] = types[i].toString();\r\n  return sb.join(\", \");\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/types.ts","///////////////////////////// Abstract Syntax Tree /////////////////////////////\r\n\r\nimport {\r\n  PATH_DELIMITER,\r\n  STATIC_DELIMITER,\r\n  INSTANCE_DELIMITER\r\n} from \"./program\";\r\n\r\nimport {\r\n  Token,\r\n  Tokenizer,\r\n  Range\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  normalize as normalizePath,\r\n  resolve as resolvePath\r\n} from \"./util/path\";\r\n\r\nexport { Token, Range };\r\n\r\n/** Indicates the kind of a node. */\r\nexport enum NodeKind {\r\n\r\n  SOURCE,\r\n\r\n  // types\r\n  TYPE,\r\n  TYPEPARAMETER,\r\n\r\n  // expressions\r\n  IDENTIFIER,\r\n  ASSERTION,\r\n  BINARY,\r\n  CALL,\r\n  COMMA,\r\n  ELEMENTACCESS,\r\n  FALSE,\r\n  LITERAL,\r\n  NEW,\r\n  NULL,\r\n  PARENTHESIZED,\r\n  PROPERTYACCESS,\r\n  TERNARY,\r\n  SUPER,\r\n  THIS,\r\n  TRUE,\r\n  CONSTRUCTOR,\r\n  UNARYPOSTFIX,\r\n  UNARYPREFIX,\r\n\r\n  // statements\r\n  BLOCK,\r\n  BREAK,\r\n  CONTINUE,\r\n  DO,\r\n  EMPTY,\r\n  EXPORT,\r\n  EXPORTIMPORT,\r\n  EXPRESSION,\r\n  FOR,\r\n  IF,\r\n  IMPORT,\r\n  RETURN,\r\n  SWITCH,\r\n  THROW,\r\n  TRY,\r\n  VARIABLE,\r\n  WHILE,\r\n\r\n  // declaration statements\r\n  CLASSDECLARATION,\r\n  ENUMDECLARATION,\r\n  ENUMVALUEDECLARATION,\r\n  FIELDDECLARATION,\r\n  FUNCTIONDECLARATION,\r\n  IMPORTDECLARATION,\r\n  INTERFACEDECLARATION,\r\n  METHODDECLARATION,\r\n  NAMESPACEDECLARATION,\r\n  TYPEDECLARATION,\r\n  VARIABLEDECLARATION,\r\n\r\n  // other\r\n  DECORATOR,\r\n  EXPORTMEMBER,\r\n  MODIFIER,\r\n  PARAMETER,\r\n  SWITCHCASE\r\n}\r\n\r\n/** Base class of all nodes. */\r\nexport abstract class Node {\r\n\r\n  /** Node kind indicator. */\r\n  kind: NodeKind;\r\n  /** Source range. */\r\n  range: Range;\r\n  /** Parent node. */\r\n  parent: Node | null = null;\r\n\r\n  // types\r\n\r\n  static createType(\r\n    identifier: IdentifierExpression,\r\n    typeArguments: TypeNode[],\r\n    isNullable: bool,\r\n    range: Range\r\n  ): TypeNode {\r\n    var type = new TypeNode();\r\n    type.range = range;\r\n    type.name = identifier;\r\n    type.typeArguments = typeArguments;\r\n    type.isNullable = isNullable;\r\n    return type;\r\n  }\r\n\r\n  // expressions\r\n\r\n  static createIdentifierExpression(\r\n    name: string,\r\n    range: Range\r\n  ): IdentifierExpression {\r\n    var expr = new IdentifierExpression();\r\n    expr.range = range;\r\n    expr.text = name;\r\n    return expr;\r\n  }\r\n\r\n  static createArrayLiteralExpression(\r\n    elements: (Expression | null)[],\r\n    range: Range\r\n  ): ArrayLiteralExpression {\r\n    var expr = new ArrayLiteralExpression();\r\n    expr.range = range;\r\n    expr.elementExpressions = elements; setParentOpt(elements, expr);\r\n    return expr;\r\n  }\r\n\r\n  static createAssertionExpression(\r\n    assertionKind: AssertionKind,\r\n    expression: Expression,\r\n    toType: TypeNode,\r\n    range: Range\r\n  ): AssertionExpression {\r\n    var expr = new AssertionExpression();\r\n    expr.range = range;\r\n    expr.assertionKind = assertionKind;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.toType = toType; toType.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createBinaryExpression(\r\n    operator: Token,\r\n    left: Expression,\r\n    right: Expression,\r\n    range: Range\r\n  ): BinaryExpression {\r\n    var expr = new BinaryExpression();\r\n    expr.range = range;\r\n    expr.operator = operator;\r\n    expr.left = left; left.parent = expr;\r\n    expr.right = right; right.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createCallExpression(\r\n    expression: Expression,\r\n    typeArgs: TypeNode[] | null,\r\n    args: Expression[],\r\n    range: Range\r\n  ): CallExpression {\r\n    var expr = new CallExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.typeArguments = typeArgs; if (typeArgs) setParent(typeArgs, expr);\r\n    expr.arguments = args; setParent(args, expr);\r\n    return expr;\r\n  }\r\n\r\n  static createCommaExpression(\r\n    expressions: Expression[],\r\n    range: Range\r\n  ): CommaExpression {\r\n    var expr = new CommaExpression();\r\n    expr.range = range;\r\n    expr.expressions = expressions; setParent(expressions, expr);\r\n    return expr;\r\n  }\r\n\r\n  static createConstructorExpression(\r\n    range: Range\r\n  ): ConstructorExpression {\r\n    var expr = new ConstructorExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createElementAccessExpression(\r\n    expression: Expression,\r\n    element: Expression,\r\n    range: Range\r\n  ): ElementAccessExpression {\r\n    var expr = new ElementAccessExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.elementExpression = element; element.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createFalseExpression(\r\n    range: Range\r\n  ): FalseExpression {\r\n    var expr = new FalseExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createFloatLiteralExpression(\r\n    value: f64,\r\n    range: Range\r\n  ): FloatLiteralExpression {\r\n    var expr = new FloatLiteralExpression();\r\n    expr.range = range;\r\n    expr.value = value;\r\n    return expr;\r\n  }\r\n\r\n  static createIntegerLiteralExpression(\r\n    value: I64,\r\n    range: Range\r\n  ): IntegerLiteralExpression {\r\n    var expr = new IntegerLiteralExpression();\r\n    expr.range = range;\r\n    expr.value = value;\r\n    return expr;\r\n  }\r\n\r\n  static createNewExpression(\r\n    expression: Expression,\r\n    typeArgs: TypeNode[] | null,\r\n    args: Expression[],\r\n    range: Range\r\n  ): NewExpression {\r\n    var expr = new NewExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.typeArguments = typeArgs; if (typeArgs) setParent(typeArgs, expr);\r\n    expr.arguments = args; setParent(args, expr);\r\n    return expr;\r\n  }\r\n\r\n  static createNullExpression(\r\n    range: Range\r\n  ): NullExpression {\r\n    var expr = new NullExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createParenthesizedExpression(\r\n    expression: Expression,\r\n    range: Range\r\n  ): ParenthesizedExpression {\r\n    var expr = new ParenthesizedExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createPropertyAccessExpression(\r\n    expression: Expression,\r\n    property: IdentifierExpression,\r\n    range: Range\r\n  ): PropertyAccessExpression {\r\n    var expr = new PropertyAccessExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.property = property; property.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createRegexpLiteralExpression(\r\n    pattern: string,\r\n    flags: string,\r\n    range: Range\r\n  ): RegexpLiteralExpression {\r\n    var expr = new RegexpLiteralExpression();\r\n    expr.range = range;\r\n    expr.pattern = pattern;\r\n    expr.patternFlags = flags;\r\n    return expr;\r\n  }\r\n\r\n  static createTernaryExpression(\r\n    condition: Expression,\r\n    ifThen: Expression,\r\n    ifElse: Expression,\r\n    range: Range\r\n  ): TernaryExpression {\r\n    var expr = new TernaryExpression();\r\n    expr.range = range;\r\n    expr.condition = condition; condition.parent = expr;\r\n    expr.ifThen = ifThen; ifThen.parent = expr;\r\n    expr.ifElse = ifElse; ifElse.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createStringLiteralExpression(\r\n    value: string,\r\n    range: Range\r\n  ): StringLiteralExpression {\r\n    var expr = new StringLiteralExpression();\r\n    expr.range = range;\r\n    expr.value = value;\r\n    return expr;\r\n  }\r\n\r\n  static createSuperExpression(\r\n    range: Range\r\n  ): SuperExpression {\r\n    var expr = new SuperExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createThisExpression(\r\n    range: Range\r\n  ): ThisExpression {\r\n    var expr = new ThisExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createTrueExpression(\r\n    range: Range\r\n  ): TrueExpression {\r\n    var expr = new TrueExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createUnaryPostfixExpression(\r\n    operator: Token,\r\n    operand: Expression,\r\n    range: Range\r\n  ): UnaryPostfixExpression {\r\n    var expr = new UnaryPostfixExpression();\r\n    expr.range = range;\r\n    expr.operator = operator;\r\n    expr.operand = operand; operand.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createUnaryPrefixExpression(\r\n    operator: Token,\r\n    operand: Expression,\r\n    range: Range\r\n  ): UnaryPrefixExpression {\r\n    var expr = new UnaryPrefixExpression();\r\n    expr.range = range;\r\n    expr.operator = operator;\r\n    expr.operand = operand; operand.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  // statements\r\n\r\n  static createBlockStatement(\r\n    statements: Statement[],\r\n    range: Range\r\n  ): BlockStatement {\r\n    var stmt = new BlockStatement();\r\n    stmt.range = range;\r\n    stmt.statements = statements; setParent(statements, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createBreakStatement(\r\n    label: IdentifierExpression | null,\r\n    range: Range\r\n  ): BreakStatement {\r\n    var stmt = new BreakStatement();\r\n    stmt.range = range;\r\n    stmt.label = label; if (label) label.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createClassDeclaration(\r\n    identifier: IdentifierExpression,\r\n    typeParameters: TypeParameter[],\r\n    extendsType: TypeNode | null,\r\n    implementsTypes: TypeNode[],\r\n    members: DeclarationStatement[],\r\n    modifiers: Modifier[] | null,\r\n    decorators: Decorator[] | null,\r\n    range: Range\r\n  ): ClassDeclaration {\r\n    var stmt = new ClassDeclaration();\r\n    stmt.range = range;\r\n    stmt.name = identifier; identifier.parent = stmt;\r\n    stmt.typeParameters = typeParameters; setParent(typeParameters, stmt);\r\n    stmt.extendsType = extendsType; if (extendsType) extendsType.parent = stmt;\r\n    stmt.implementsTypes = implementsTypes; setParent(implementsTypes, stmt);\r\n    stmt.members = members; setParent(members, stmt);\r\n    stmt.modifiers = modifiers; if (modifiers) setParent(modifiers, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createContinueStatement(\r\n    label: IdentifierExpression | null,\r\n    range: Range\r\n  ): ContinueStatement {\r\n    var stmt = new ContinueStatement();\r\n    stmt.range = range;\r\n    stmt.label = label; if (label) label.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createDecorator(\r\n    expression: Expression,\r\n    args: Expression[] | null,\r\n    range: Range\r\n  ): Decorator {\r\n    var stmt = new Decorator();\r\n    stmt.range = range;\r\n    stmt.name = expression; expression.parent = stmt;\r\n    stmt.arguments = args; if (args) setParent(args, stmt);\r\n    if (expression.kind == NodeKind.IDENTIFIER) {\r\n      switch ((<IdentifierExpression>expression).text) {\r\n        case \"global\": stmt.decoratorKind = DecoratorKind.GLOBAL; break;\r\n        case \"operator\": stmt.decoratorKind = DecoratorKind.OPERATOR; break;\r\n        case \"unmanaged\": stmt.decoratorKind = DecoratorKind.UNMANAGED; break;\r\n        case \"offset\": stmt.decoratorKind = DecoratorKind.OFFSET; break;\r\n        default: stmt.decoratorKind = DecoratorKind.CUSTOM; break;\r\n      }\r\n    } else\r\n      stmt.decoratorKind = DecoratorKind.CUSTOM;\r\n    return stmt;\r\n  }\r\n\r\n  static createDoStatement(\r\n    statement: Statement,\r\n    condition: Expression,\r\n    range: Range\r\n  ): DoStatement {\r\n    var stmt = new DoStatement();\r\n    stmt.range = range;\r\n    stmt.statement = statement; statement.parent = stmt;\r\n    stmt.condition = condition; condition.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createEmptyStatement(\r\n    range: Range\r\n  ): EmptyStatement {\r\n    var stmt = new EmptyStatement();\r\n    stmt.range = range;\r\n    return stmt;\r\n  }\r\n\r\n  static createEnumDeclaration(\r\n    name: IdentifierExpression,\r\n    members: EnumValueDeclaration[],\r\n    modifiers: Modifier[] | null,\r\n    decorators: Decorator[] | null,\r\n    range: Range\r\n  ): EnumDeclaration {\r\n    var stmt = new EnumDeclaration();\r\n    stmt.range = range;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.values = members; setParent(members, stmt);\r\n    stmt.modifiers = modifiers; if (modifiers) setParent(modifiers, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createEnumValueDeclaration(\r\n    name: IdentifierExpression,\r\n    value: Expression | null,\r\n    range: Range\r\n  ): EnumValueDeclaration {\r\n    var stmt = new EnumValueDeclaration();\r\n    stmt.range = range;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.value = value; if (value) value.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createExportStatement(\r\n    members: ExportMember[],\r\n    path: StringLiteralExpression | null,\r\n    modifiers: Modifier[] | null,\r\n    range: Range\r\n  ): ExportStatement {\r\n    var stmt = new ExportStatement();\r\n    stmt.range = range;\r\n    stmt.members = members; setParent(members, stmt);\r\n    stmt.path = path;\r\n    if (path) {\r\n      var normalizedPath = normalizePath(path.value);\r\n      if (path.value.startsWith(\".\")) // relative\r\n        stmt.normalizedPath = resolvePath(\r\n          normalizedPath,\r\n          range.source.normalizedPath\r\n        );\r\n      else // absolute\r\n        stmt.normalizedPath = normalizedPath;\r\n      stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\r\n    } else {\r\n      stmt.normalizedPath = null;\r\n      stmt.internalPath = null;\r\n    }\r\n    stmt.modifiers = modifiers; if (modifiers) setParent(modifiers, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createExportImportStatement(\r\n    name: IdentifierExpression,\r\n    externalName: IdentifierExpression,\r\n    range: Range\r\n  ): ExportImportStatement {\r\n    var stmt = new ExportImportStatement();\r\n    stmt.range = range;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.externalName = externalName; externalName.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createExportMember(\r\n    name: IdentifierExpression,\r\n    externalName: IdentifierExpression | null,\r\n    range: Range\r\n  ): ExportMember {\r\n    var elem = new ExportMember();\r\n    elem.range = range;\r\n    elem.name = name; name.parent = elem;\r\n    if (!externalName)\r\n      externalName = name;\r\n    else\r\n      externalName.parent = elem;\r\n    elem.externalName = externalName;\r\n    return elem;\r\n  }\r\n\r\n  static createExpressionStatement(\r\n    expression: Expression\r\n  ): ExpressionStatement {\r\n    var stmt = new ExpressionStatement();\r\n    stmt.range = expression.range;\r\n    stmt.expression = expression; expression.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createIfStatement(\r\n    condition: Expression,\r\n    ifTrue: Statement,\r\n    ifFalse: Statement | null,\r\n    range: Range\r\n  ): IfStatement {\r\n    var stmt = new IfStatement();\r\n    stmt.range = range;\r\n    stmt.condition = condition; condition.parent = stmt;\r\n    stmt.ifTrue = ifTrue; ifTrue.parent = stmt;\r\n    stmt.ifFalse = ifFalse; if (ifFalse) ifFalse.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createImportStatement(\r\n    decls: ImportDeclaration[] | null,\r\n    path: StringLiteralExpression,\r\n    range: Range\r\n  ): ImportStatement {\r\n    var stmt = new ImportStatement();\r\n    stmt.range = range;\r\n    stmt.declarations = decls; if (decls) setParent(decls, stmt);\r\n    stmt.namespaceName = null;\r\n    stmt.path = path;\r\n    var normalizedPath = normalizePath(path.value);\r\n    if (path.value.startsWith(\".\")) // relative\r\n      stmt.normalizedPath = resolvePath(\r\n        normalizedPath,\r\n        range.source.normalizedPath\r\n      );\r\n    else // absolute\r\n      stmt.normalizedPath = normalizedPath;\r\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\r\n    return stmt;\r\n  }\r\n\r\n  static createImportStatementWithWildcard(\r\n    identifier: IdentifierExpression,\r\n    path: StringLiteralExpression,\r\n    range: Range\r\n  ): ImportStatement {\r\n    var stmt = new ImportStatement();\r\n    stmt.range = range;\r\n    stmt.declarations = null;\r\n    stmt.namespaceName = identifier;\r\n    stmt.path = path;\r\n    stmt.normalizedPath = resolvePath(\r\n      normalizePath(path.value),\r\n      range.source.normalizedPath\r\n    );\r\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\r\n    return stmt;\r\n  }\r\n\r\n  static createImportDeclaration(\r\n    externalName: IdentifierExpression,\r\n    name: IdentifierExpression | null,\r\n    range: Range\r\n  ): ImportDeclaration {\r\n    var elem = new ImportDeclaration();\r\n    elem.range = range;\r\n    elem.externalName = externalName; externalName.parent = elem;\r\n    if (!name)\r\n      name = externalName;\r\n    else\r\n      name.parent = elem;\r\n    elem.name = name;\r\n    return elem;\r\n  }\r\n\r\n  static createInterfaceDeclaration(\r\n    name: IdentifierExpression,\r\n    extendsType: TypeNode | null,\r\n    members: DeclarationStatement[],\r\n    modifiers: Modifier[] | null,\r\n    range: Range\r\n  ): InterfaceDeclaration {\r\n    var stmt = new InterfaceDeclaration();\r\n    stmt.range = range;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.extendsType = extendsType; if (extendsType) extendsType.parent = stmt;\r\n    stmt.members = members; setParent(members, stmt);\r\n    stmt.modifiers = modifiers; if (modifiers) setParent(modifiers, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createFieldDeclaration(\r\n    name: IdentifierExpression,\r\n    type: TypeNode | null,\r\n    initializer: Expression | null,\r\n    modifiers: Modifier[] | null,\r\n    decorators: Decorator[] | null,\r\n    range: Range\r\n  ): FieldDeclaration {\r\n    var stmt = new FieldDeclaration();\r\n    stmt.range = range;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.type = type; if (type) type.parent = stmt;\r\n    stmt.initializer = initializer; if (initializer) initializer.parent = stmt;\r\n    stmt.modifiers = modifiers; if (modifiers) setParent(modifiers, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createForStatement(\r\n    initializer: Statement | null,\r\n    condition: Expression | null,\r\n    incrementor: Expression | null,\r\n    statement: Statement,\r\n    range: Range\r\n  ): ForStatement {\r\n    var stmt = new ForStatement();\r\n    stmt.range = range;\r\n    stmt.initializer = initializer; if (initializer) initializer.parent = stmt;\r\n    stmt.condition = condition; if (condition) condition.parent = stmt;\r\n    stmt.incrementor = incrementor; if (incrementor) incrementor.parent = stmt;\r\n    stmt.statement = statement; statement.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createTypeParameter(\r\n    name: IdentifierExpression,\r\n    extendsType: TypeNode | null,\r\n    range: Range\r\n  ): TypeParameter {\r\n    var elem = new TypeParameter();\r\n    elem.range = range;\r\n    elem.name = name; name.parent = elem;\r\n    elem.extendsType = extendsType; if (extendsType) extendsType.parent = elem;\r\n    return elem;\r\n  }\r\n\r\n  static createParameter(\r\n    name: IdentifierExpression,\r\n    type: TypeNode | null,\r\n    initializer: Expression | null,\r\n    kind: ParameterKind,\r\n    range: Range\r\n  ): Parameter {\r\n    var elem = new Parameter();\r\n    elem.range = range;\r\n    elem.name = name; name.parent = elem;\r\n    elem.type = type; if (type) type.parent = elem;\r\n    elem.initializer = initializer; if (initializer) initializer.parent = elem;\r\n    elem.parameterKind = kind;\r\n    return elem;\r\n  }\r\n\r\n  static createFunctionDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameter[],\r\n    parameters: Parameter[],\r\n    returnType: TypeNode | null,\r\n    statements: Statement[] | null,\r\n    modifiers: Modifier[] | null,\r\n    decorators: Decorator[] | null,\r\n    range: Range\r\n  ): FunctionDeclaration {\r\n    var stmt = new FunctionDeclaration();\r\n    stmt.range = range;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.typeParameters = typeParameters; setParent(typeParameters, stmt);\r\n    stmt.parameters = parameters; setParent(parameters, stmt);\r\n    stmt.returnType = returnType; if (returnType) returnType.parent = stmt;\r\n    stmt.statements = statements; if (statements) setParent(statements, stmt);\r\n    stmt.modifiers = modifiers; if (modifiers) setParent(modifiers, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createMethodDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameter[],\r\n    parameters: Parameter[],\r\n    returnType: TypeNode | null,\r\n    statements: Statement[] | null,\r\n    modifiers: Modifier[] | null,\r\n    decorators: Decorator[] | null,\r\n    range: Range\r\n  ): MethodDeclaration {\r\n    var stmt = new MethodDeclaration();\r\n    stmt.range = range;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.typeParameters = typeParameters; setParent(typeParameters, stmt);\r\n    stmt.parameters = parameters; setParent(parameters, stmt);\r\n    stmt.returnType = returnType; if (returnType) returnType.parent = stmt;\r\n    stmt.statements = statements; if (statements) setParent(statements, stmt);\r\n    stmt.modifiers = modifiers; if (modifiers) setParent(modifiers, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createModifier(kind: ModifierKind, range: Range): Modifier {\r\n    var elem = new Modifier();\r\n    elem.range = range;\r\n    elem.modifierKind = kind;\r\n    return elem;\r\n  }\r\n\r\n  static createNamespaceDeclaration(\r\n    name: IdentifierExpression,\r\n    members: Statement[],\r\n    modifiers: Modifier[] | null,\r\n    decorators: Decorator[] | null,\r\n    range: Range\r\n  ): NamespaceDeclaration {\r\n    var stmt = new NamespaceDeclaration();\r\n    stmt.range = range;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.members = members; setParent(members, stmt);\r\n    stmt.modifiers = modifiers; if (modifiers) setParent(modifiers, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createReturnStatement(\r\n    value: Expression | null,\r\n    range: Range\r\n  ): ReturnStatement {\r\n    var stmt = new ReturnStatement();\r\n    stmt.range = range;\r\n    stmt.value = value; if (value) value.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createSwitchStatement(\r\n    condition: Expression,\r\n    cases: SwitchCase[],\r\n    range: Range\r\n  ): SwitchStatement {\r\n    var stmt = new SwitchStatement();\r\n    stmt.range = range;\r\n    stmt.condition = condition; condition.parent = stmt;\r\n    stmt.cases = cases; setParent(cases, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createSwitchCase(\r\n    label: Expression | null,\r\n    statements: Statement[],\r\n    range: Range\r\n  ): SwitchCase {\r\n    var elem = new SwitchCase();\r\n    elem.range = range;\r\n    elem.label = label; if (label) label.parent = elem;\r\n    elem.statements = statements; setParent(statements, elem);\r\n    return elem;\r\n  }\r\n\r\n  static createThrowStatement(\r\n    value: Expression,\r\n    range: Range\r\n  ): ThrowStatement {\r\n    var stmt = new ThrowStatement();\r\n    stmt.range = range;\r\n    stmt.value = value; value.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createTryStatement(\r\n    statements: Statement[],\r\n    catchVariable: IdentifierExpression | null,\r\n    catchStatements: Statement[] | null,\r\n    finallyStatements: Statement[] | null,\r\n    range: Range\r\n  ): TryStatement {\r\n    var stmt = new TryStatement();\r\n    stmt.range = range;\r\n    stmt.statements = statements; setParent(statements, stmt);\r\n    stmt.catchVariable = catchVariable;\r\n    if (catchVariable) catchVariable.parent = stmt;\r\n    stmt.catchStatements = catchStatements;\r\n    if (catchStatements) setParent(catchStatements, stmt);\r\n    stmt.finallyStatements = finallyStatements;\r\n    if (finallyStatements) setParent(finallyStatements, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createTypeDeclaration(\r\n    name: IdentifierExpression,\r\n    alias: TypeNode,\r\n    modifiers: Modifier[] | null,\r\n    decorators: Decorator[] | null,\r\n    range: Range\r\n  ): TypeDeclaration {\r\n    var stmt = new TypeDeclaration();\r\n    stmt.range = range;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.alias = alias; alias.parent = stmt;\r\n    stmt.modifiers = modifiers; if (modifiers) setParent(modifiers, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createVariableStatement(\r\n    declarations: VariableDeclaration[],\r\n    modifiers: Modifier[] | null,\r\n    decorators: Decorator[] | null,\r\n    range: Range\r\n  ): VariableStatement {\r\n    var stmt = new VariableStatement();\r\n    stmt.range = range;\r\n    stmt.declarations = declarations; setParent(declarations, stmt);\r\n    stmt.modifiers = modifiers; if (modifiers) setParent(modifiers, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createVariableDeclaration(\r\n    name: IdentifierExpression,\r\n    type: TypeNode | null,\r\n    initializer: Expression | null,\r\n    modifiers: Modifier[] | null,\r\n    decorators: Decorator[] | null,\r\n    range: Range\r\n  ): VariableDeclaration {\r\n    var elem = new VariableDeclaration();\r\n    elem.range = range;\r\n    elem.name = name; name.parent = elem;\r\n    elem.type = type; if (type) type.parent = elem;\r\n    elem.initializer = initializer; if (initializer) initializer.parent = elem;\r\n    elem.modifiers = modifiers; // inherited from parent VariableStatement\r\n    elem.decorators = decorators; // inherited\r\n    return elem;\r\n  }\r\n\r\n  static createWhileStatement(\r\n    condition: Expression,\r\n    statement: Statement,\r\n    range: Range\r\n  ): WhileStatement {\r\n    var stmt = new WhileStatement();\r\n    stmt.range = range;\r\n    stmt.condition = condition; condition.parent = stmt;\r\n    stmt.statement = statement; statement.parent = stmt;\r\n    return stmt;\r\n  }\r\n}\r\n\r\n// types\r\n\r\n/** Represents a type annotation. */\r\nexport class TypeNode extends Node {\r\n  kind = NodeKind.TYPE;\r\n\r\n  /** Identifier reference. */\r\n  name: IdentifierExpression;\r\n  /** Type argument references. */\r\n  typeArguments: TypeNode[];\r\n  /** Whether nullable or not. */\r\n  isNullable: bool;\r\n}\r\n\r\n/** Represents a type parameter. */\r\nexport class TypeParameter extends Node {\r\n  kind = NodeKind.TYPEPARAMETER;\r\n\r\n  /** Identifier reference. */\r\n  name: IdentifierExpression;\r\n  /** Extended type reference, if any. */\r\n  extendsType: TypeNode | null;\r\n}\r\n\r\n// expressions\r\n\r\n/** Base class of all expression nodes. */\r\nexport abstract class Expression extends Node { }\r\n\r\n/** Represents an identifier expression. */\r\nexport class IdentifierExpression extends Expression {\r\n  kind = NodeKind.IDENTIFIER;\r\n\r\n  /** Textual name. */\r\n  text: string;\r\n}\r\n\r\n/** Indicates the kind of a literal. */\r\nexport const enum LiteralKind {\r\n  FLOAT,\r\n  INTEGER,\r\n  STRING,\r\n  REGEXP,\r\n  ARRAY,\r\n  OBJECT\r\n}\r\n\r\n/** Base class of all literal expressions. */\r\nexport abstract class LiteralExpression extends Expression {\r\n  kind = NodeKind.LITERAL;\r\n\r\n  /** Specific literal kind. */\r\n  literalKind: LiteralKind;\r\n}\r\n\r\n/** Represents an `[]` literal expression. */\r\nexport class ArrayLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.ARRAY;\r\n\r\n  /** Nested element expressions. */\r\n  elementExpressions: (Expression | null)[];\r\n}\r\n\r\n/** Indicates the kind of an assertion. */\r\nexport const enum AssertionKind {\r\n  PREFIX,\r\n  AS\r\n}\r\n\r\n/** Represents an assertion expression. */\r\nexport class AssertionExpression extends Expression {\r\n  kind = NodeKind.ASSERTION;\r\n\r\n  /** Specific kind of this assertion. */\r\n  assertionKind: AssertionKind;\r\n  /** Expression being asserted. */\r\n  expression: Expression;\r\n  /** Target type. */\r\n  toType: TypeNode;\r\n}\r\n\r\n/** Represents a binary expression. */\r\nexport class BinaryExpression extends Expression {\r\n  kind = NodeKind.BINARY;\r\n\r\n  /** Operator token. */\r\n  operator: Token;\r\n  /** Left-hand side expression */\r\n  left: Expression;\r\n  /** Right-hand side expression. */\r\n  right: Expression;\r\n}\r\n\r\n/** Represents a call expression. */\r\nexport class CallExpression extends Expression {\r\n  kind = NodeKind.CALL;\r\n\r\n  /** Called expression. Usually an identifier or property access expression. */\r\n  expression: Expression;\r\n  /** Provided type arguments. */\r\n  typeArguments: TypeNode[] | null;\r\n  /** Provided arguments. */\r\n  arguments: Expression[];\r\n}\r\n\r\n/** Represents a comma expression composed of multiple sequential expressions. */\r\nexport class CommaExpression extends Expression {\r\n  kind = NodeKind.COMMA;\r\n\r\n  /** Sequential expressions. */\r\n  expressions: Expression[];\r\n}\r\n\r\n/** Represents a `constructor` expression. */\r\nexport class ConstructorExpression extends IdentifierExpression {\r\n  kind = NodeKind.CONSTRUCTOR;\r\n  text = \"constructor\";\r\n}\r\n\r\n/** Represents an element access expression, e.g., array access. */\r\nexport class ElementAccessExpression extends Expression {\r\n  kind = NodeKind.ELEMENTACCESS;\r\n\r\n  /** Expression being accessed. */\r\n  expression: Expression;\r\n  /** Element of the expression being accessed. */\r\n  elementExpression: Expression;\r\n}\r\n\r\n/** Represents a float literal expression. */\r\nexport class FloatLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.FLOAT;\r\n\r\n  /** Float value. */\r\n  value: f64;\r\n}\r\n\r\n/** Represents an integer literal expression. */\r\nexport class IntegerLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.INTEGER;\r\n\r\n  /** Integer value. */\r\n  value: I64;\r\n}\r\n\r\n/** Represents a `new` expression. Like a call but with its own kind. */\r\nexport class NewExpression extends CallExpression {\r\n  kind = NodeKind.NEW;\r\n}\r\n\r\n/** Represents a `null` expression. */\r\nexport class NullExpression extends IdentifierExpression {\r\n  kind = NodeKind.NULL;\r\n  text = \"null\";\r\n}\r\n\r\n/** Represents a parenthesized expression. */\r\nexport class ParenthesizedExpression extends Expression {\r\n  kind = NodeKind.PARENTHESIZED;\r\n\r\n  /** Expression in parenthesis. */\r\n  expression: Expression;\r\n}\r\n\r\n/** Represents a property access expression. */\r\nexport class PropertyAccessExpression extends Expression {\r\n  kind = NodeKind.PROPERTYACCESS;\r\n\r\n  /** Expression being accessed. */\r\n  expression: Expression;\r\n  /** Property of the expression being accessed. */\r\n  property: IdentifierExpression;\r\n}\r\n\r\n/** Represents a regular expression literal expression. */\r\nexport class RegexpLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.REGEXP;\r\n\r\n  /** Regular expression pattern. */\r\n  pattern: string;\r\n  /** Regular expression flags. */\r\n  patternFlags: string;\r\n}\r\n\r\n/** Represents a ternary expression, i.e., short if notation. */\r\nexport class TernaryExpression extends Expression {\r\n  kind = NodeKind.TERNARY;\r\n\r\n  /** Condition expression. */\r\n  condition: Expression;\r\n  /** Expression executed when condition is `true`. */\r\n  ifThen: Expression;\r\n  /** Expression executed when condition is `false`. */\r\n  ifElse: Expression;\r\n}\r\n\r\n/** Represents a string literal expression. */\r\nexport class StringLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.STRING;\r\n\r\n  /** String value without quotes. */\r\n  value: string;\r\n}\r\n\r\n/** Represents a `super` expression. */\r\nexport class SuperExpression extends IdentifierExpression {\r\n  kind = NodeKind.SUPER;\r\n  text = \"super\";\r\n}\r\n\r\n/** Represents a `this` expression. */\r\nexport class ThisExpression extends IdentifierExpression {\r\n  kind = NodeKind.THIS;\r\n  text = \"this\";\r\n}\r\n\r\n/** Represents a `true` expression. */\r\nexport class TrueExpression extends IdentifierExpression {\r\n  kind = NodeKind.TRUE;\r\n  text = \"true\";\r\n}\r\n\r\n/** Represents a `false` expression. */\r\nexport class FalseExpression extends IdentifierExpression {\r\n  kind = NodeKind.FALSE;\r\n  text = \"false\";\r\n}\r\n\r\n/** Base class of all unary expressions. */\r\nexport abstract class UnaryExpression extends Expression {\r\n\r\n  /** Operator token. */\r\n  operator: Token;\r\n  /** Operand expression. */\r\n  operand: Expression;\r\n}\r\n\r\n/** Represents a unary postfix expression, e.g. a postfix increment. */\r\nexport class UnaryPostfixExpression extends UnaryExpression {\r\n  kind = NodeKind.UNARYPOSTFIX;\r\n}\r\n\r\n/** Represents a unary prefix expression, e.g. a negation. */\r\nexport class UnaryPrefixExpression extends UnaryExpression {\r\n  kind = NodeKind.UNARYPREFIX;\r\n}\r\n\r\n// statements\r\n\r\n/** Indicates the specific kind of a modifier. */\r\nexport enum ModifierKind {\r\n  ASYNC,\r\n  CONST,\r\n  LET,\r\n  DECLARE,\r\n  EXPORT,\r\n  IMPORT,\r\n  STATIC,\r\n  ABSTRACT,\r\n  PUBLIC,\r\n  PRIVATE,\r\n  PROTECTED,\r\n  READONLY,\r\n  GET,\r\n  SET,\r\n}\r\n\r\n/** Base class of all statement nodes. */\r\nexport abstract class Statement extends Node { }\r\n\r\n/** Indicates the specific kind of a source. */\r\nexport enum SourceKind {\r\n  /** Default source. Usually imported from an entry file. */\r\n  DEFAULT,\r\n  /** Entry file. */\r\n  ENTRY,\r\n  /** Library file. */\r\n  LIBRARY\r\n}\r\n\r\n/** A top-level source node. */\r\nexport class Source extends Node {\r\n  kind = NodeKind.SOURCE;\r\n  parent = null;\r\n\r\n  /** Source kind. */\r\n  sourceKind: SourceKind;\r\n  /** Normalized path. */\r\n  normalizedPath: string;\r\n  /** Path used internally. */\r\n  internalPath: string;\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n  /** Full source text. */\r\n  text: string;\r\n  /** Tokenizer reference. */\r\n  tokenizer: Tokenizer | null = null;\r\n  /** Source map index. */\r\n  debugInfoIndex: i32 = -1;\r\n\r\n  /** Constructs a new source node. */\r\n  constructor(normalizedPath: string, text: string, kind: SourceKind) {\r\n    super();\r\n    this.sourceKind = kind;\r\n    this.normalizedPath = normalizedPath;\r\n    this.internalPath = mangleInternalPath(this.normalizedPath);\r\n    this.statements = new Array();\r\n    this.range = new Range(this, 0, text.length);\r\n    this.text = text;\r\n  }\r\n\r\n  /** Tests if this source is an entry file. */\r\n  get isEntry(): bool { return this.sourceKind == SourceKind.ENTRY; }\r\n  /** Tests if this source is a stdlib file. */\r\n  get isLibrary(): bool { return this.sourceKind == SourceKind.LIBRARY; }\r\n}\r\n\r\n/** Base class of all declaration statements. */\r\nexport abstract class DeclarationStatement extends Statement {\r\n\r\n  /** Simple name being declared. */\r\n  name: IdentifierExpression;\r\n  /** Array of modifiers. */\r\n  modifiers: Modifier[] | null;\r\n  /** Array of decorators. */\r\n  decorators: Decorator[] | null = null;\r\n\r\n  protected cachedProgramLevelInternalName: string | null = null;\r\n  protected cachedFileLevelInternalName: string | null = null;\r\n\r\n  /** Gets the mangled program-level internal name of this declaration. */\r\n  get programLevelInternalName(): string {\r\n    if (!this.cachedProgramLevelInternalName)\r\n      this.cachedProgramLevelInternalName = mangleInternalName(this, true);\r\n    return this.cachedProgramLevelInternalName;\r\n  }\r\n\r\n  /** Gets the mangled file-level internal name of this declaration. */\r\n  get fileLevelInternalName(): string {\r\n    if (!this.cachedFileLevelInternalName)\r\n      this.cachedFileLevelInternalName = mangleInternalName(this, false);\r\n    return this.cachedFileLevelInternalName;\r\n  }\r\n\r\n  /** Tests if this is a top-level declaration within its source file. */\r\n  get isTopLevel(): bool {\r\n    var parent = this.parent;\r\n    if (!parent)\r\n      return false;\r\n    if (parent.kind == NodeKind.VARIABLE)\r\n      if (!(parent = parent.parent))\r\n        return false;\r\n    return parent.kind == NodeKind.SOURCE;\r\n  }\r\n\r\n  /** Tests if this declaration is a top-level export within its source file. */\r\n  get isTopLevelExport(): bool {\r\n    var parent = this.parent;\r\n    if (!parent)\r\n      return false;\r\n    if (parent.kind == NodeKind.VARIABLE)\r\n      if (!(parent = parent.parent))\r\n        return false;\r\n    if (parent.kind == NodeKind.NAMESPACEDECLARATION)\r\n      return (\r\n        hasModifier(ModifierKind.EXPORT, this.modifiers) &&\r\n        (<NamespaceDeclaration>parent).isTopLevelExport\r\n      );\r\n    if (parent.kind == NodeKind.CLASSDECLARATION)\r\n      return (\r\n        hasModifier(ModifierKind.STATIC, this.modifiers) &&\r\n        (<ClassDeclaration>parent).isTopLevelExport\r\n      );\r\n    return (\r\n      parent.kind == NodeKind.SOURCE &&\r\n      hasModifier(ModifierKind.EXPORT, this.modifiers)\r\n    );\r\n  }\r\n\r\n  /** Tests if this declaration needs an explicit export. */\r\n  needsExplicitExport(member: ExportMember): bool {\r\n    // This is necessary because module-level exports are automatically created\r\n    // for top level declarations of all sorts. This function essentially tests\r\n    // that there isn't a otherwise duplicate top-level export already.\r\n    return (\r\n      member.name.text != member.externalName.text || // if aliased\r\n      this.range.source != member.range.source ||     // if a re-export\r\n      !this.isTopLevelExport                          // if not top-level\r\n    );\r\n  }\r\n}\r\n\r\n/** Base class of all variable-like declaration statements. */\r\nexport abstract class VariableLikeDeclarationStatement extends DeclarationStatement {\r\n\r\n  /** Variable type. */\r\n  type: TypeNode | null;\r\n  /** Variable initializer. */\r\n  initializer: Expression | null;\r\n}\r\n\r\n/** Represents a block statement. */\r\nexport class BlockStatement extends Statement {\r\n  kind = NodeKind.BLOCK;\r\n\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n}\r\n\r\n/** Represents a `break` statement. */\r\nexport class BreakStatement extends Statement {\r\n  kind = NodeKind.BREAK;\r\n\r\n  /** Target label, if applicable. */\r\n  label: IdentifierExpression | null;\r\n}\r\n\r\n/** Represents a `class` declaration. */\r\nexport class ClassDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.CLASSDECLARATION;\r\n\r\n  /** Accepted type parameters. */\r\n  typeParameters: TypeParameter[];\r\n  /** Base class type being extended. */\r\n  extendsType: TypeNode | null;\r\n  /** Interface types being implemented. */\r\n  implementsTypes: TypeNode[];\r\n  /** Class member declarations. */\r\n  members: DeclarationStatement[];\r\n}\r\n\r\n/** Represents a `continue` statement. */\r\nexport class ContinueStatement extends Statement {\r\n  kind = NodeKind.CONTINUE;\r\n\r\n  /** Target label, if applicable. */\r\n  label: IdentifierExpression | null;\r\n}\r\n\r\n/** Built-in decorator kinds. */\r\nexport const enum DecoratorKind {\r\n  CUSTOM,\r\n  GLOBAL,\r\n  OPERATOR,\r\n  UNMANAGED,\r\n  OFFSET\r\n}\r\n\r\n/** Depresents a decorator. */\r\nexport class Decorator extends Statement {\r\n  kind = NodeKind.DECORATOR;\r\n\r\n  /** Name expression. */\r\n  name: Expression;\r\n  /** Argument expressions. */\r\n  arguments: Expression[] | null;\r\n  /** Built-in kind, if applicable. */\r\n  decoratorKind: DecoratorKind;\r\n}\r\n\r\n/** Represents a `do` statement. */\r\nexport class DoStatement extends Statement {\r\n  kind = NodeKind.DO;\r\n\r\n  /** Statement being looped over. */\r\n  statement: Statement;\r\n  /** Condition when to repeat. */\r\n  condition: Expression;\r\n}\r\n\r\n/** Represents an empty statement, i.e., a semicolon terminating nothing. */\r\nexport class EmptyStatement extends Statement {\r\n  kind = NodeKind.EMPTY;\r\n}\r\n\r\n/** Represents an `enum` declaration. */\r\nexport class EnumDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.ENUMDECLARATION;\r\n\r\n  /** Enum value declarations. */\r\n  values: EnumValueDeclaration[];\r\n}\r\n\r\n/** Represents a value of an `enum` declaration. */\r\nexport class EnumValueDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.ENUMVALUEDECLARATION;\r\n  modifiers = null;\r\n  // name is inherited\r\n\r\n  /** Value expression. */\r\n  value: Expression | null;\r\n}\r\n\r\n/** Represents an `export import` statement of an interface. */\r\nexport class ExportImportStatement extends Node {\r\n  kind = NodeKind.EXPORTIMPORT;\r\n\r\n  /** Identifier being imported. */\r\n  name: IdentifierExpression;\r\n  /** Identifier being exported. */\r\n  externalName: IdentifierExpression;\r\n}\r\n\r\n/** Represents a member of an `export` statement. */\r\nexport class ExportMember extends Node {\r\n  kind = NodeKind.EXPORTMEMBER;\r\n\r\n  /** Identifier being exported. */\r\n  name: IdentifierExpression;\r\n  /** Identifier seen when imported again. */\r\n  externalName: IdentifierExpression;\r\n}\r\n\r\n/** Represents an `export` statement. */\r\nexport class ExportStatement extends Statement {\r\n  kind = NodeKind.EXPORT;\r\n\r\n  /** Array of modifiers. */\r\n  modifiers: Modifier[] | null;\r\n  /** Array of members. */\r\n  members: ExportMember[];\r\n  /** Path being exported from, if applicable. */\r\n  path: StringLiteralExpression | null;\r\n  /** Normalized path, if `path` is set. */\r\n  normalizedPath: string | null;\r\n  /** Mangled internal path being referenced, if `path` is set. */\r\n  internalPath: string | null;\r\n}\r\n\r\n/** Represents an expression that is used as a statement. */\r\nexport class ExpressionStatement extends Statement {\r\n  kind = NodeKind.EXPRESSION;\r\n\r\n  /** Expression being used as a statement.*/\r\n  expression: Expression;\r\n}\r\n\r\n/** Represents a field declaration within a `class`. */\r\nexport class FieldDeclaration extends VariableLikeDeclarationStatement {\r\n  kind = NodeKind.FIELDDECLARATION;\r\n}\r\n\r\n/** Represents a `for` statement. */\r\nexport class ForStatement extends Statement {\r\n  kind = NodeKind.FOR;\r\n\r\n  /**\r\n   * Initializer statement, if present.\r\n   * Either a {@link VariableStatement} or {@link ExpressionStatement}.\r\n   */\r\n  initializer: Statement | null;\r\n  /** Condition expression, if present. */\r\n  condition: Expression | null;\r\n  /** Incrementor expression, if present. */\r\n  incrementor: Expression | null;\r\n  /** Statement being looped over. */\r\n  statement: Statement;\r\n}\r\n\r\n/** Represents a `function` declaration. */\r\nexport class FunctionDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.FUNCTIONDECLARATION;\r\n\r\n  /** Accepted type parameters. */\r\n  typeParameters: TypeParameter[];\r\n  /** Accepted parameters. */\r\n  parameters: Parameter[];\r\n  /** Return type. */\r\n  returnType: TypeNode | null;\r\n  /** Contained statements. */\r\n  statements: Statement[] | null;\r\n}\r\n\r\n/** Represents an `if` statement. */\r\nexport class IfStatement extends Statement {\r\n  kind = NodeKind.IF;\r\n\r\n  /** Condition. */\r\n  condition: Expression;\r\n  /** Statement executed when condition is `true`. */\r\n  ifTrue: Statement;\r\n  /** Statement executed when condition is `false`. */\r\n  ifFalse: Statement | null;\r\n}\r\n\r\n/** Represents an `import` declaration part of an {@link ImportStatement}. */\r\nexport class ImportDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.IMPORTDECLARATION;\r\n  modifiers = null;\r\n\r\n  /** Identifier being imported. */\r\n  externalName: IdentifierExpression;\r\n}\r\n\r\n/** Represents an `import` statement. */\r\nexport class ImportStatement extends Statement {\r\n  kind = NodeKind.IMPORT;\r\n\r\n  /** Array of member declarations or `null` if an asterisk import. */\r\n  declarations: ImportDeclaration[] | null;\r\n  /** Name of the local namespace, if an asterisk import. */\r\n  namespaceName: IdentifierExpression | null;\r\n  /** Path being imported from. */\r\n  path: StringLiteralExpression;\r\n  /** Normalized path. */\r\n  normalizedPath: string;\r\n  /** Mangled internal path being referenced. */\r\n  internalPath: string;\r\n}\r\n\r\n/** Represents an `interfarce` declaration. */\r\nexport class InterfaceDeclaration extends ClassDeclaration {\r\n  kind = NodeKind.INTERFACEDECLARATION;\r\n}\r\n\r\n/** Represents a method declaration within a `class`. */\r\nexport class MethodDeclaration extends FunctionDeclaration {\r\n  kind = NodeKind.METHODDECLARATION;\r\n}\r\n\r\n/** Represents a `namespace` declaration. */\r\nexport class NamespaceDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.NAMESPACEDECLARATION;\r\n\r\n  /** Array of namespace members. */\r\n  members: Statement[];\r\n}\r\n\r\n/** Represents the kind of a parameter. */\r\nexport enum ParameterKind {\r\n  /** No specific flags. */\r\n  DEFAULT,\r\n  /** Is an optional parameter. */\r\n  OPTIONAL,\r\n  /** Is a rest parameter. */\r\n  REST\r\n}\r\n\r\n/** Represents a function parameter. */\r\nexport class Parameter extends Node {\r\n  kind = NodeKind.PARAMETER;\r\n\r\n  /** Parameter name. */\r\n  name: IdentifierExpression;\r\n  /** Parameter type. */\r\n  type: TypeNode | null;\r\n  /** Parameter kind. */\r\n  parameterKind: ParameterKind;\r\n  /** Initializer expression, if present. */\r\n  initializer: Expression | null;\r\n}\r\n\r\n/** Represents a single modifier. */\r\nexport class Modifier extends Node {\r\n  kind = NodeKind.MODIFIER;\r\n\r\n  /** Specific modifier kind. */\r\n  modifierKind: ModifierKind;\r\n}\r\n\r\n/** Represents a `return` statement. */\r\nexport class ReturnStatement extends Statement {\r\n  kind = NodeKind.RETURN;\r\n\r\n  /** Value expression being returned, if present. */\r\n  value: Expression | null;\r\n}\r\n\r\n/** Represents a single `case` within a `switch` statement. */\r\nexport class SwitchCase extends Node {\r\n  kind = NodeKind.SWITCHCASE;\r\n\r\n  /** Label expression. `null` indicates the default case. */\r\n  label: Expression | null;\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n}\r\n\r\n/** Represents a `switch` statement. */\r\nexport class SwitchStatement extends Statement {\r\n  kind = NodeKind.SWITCH;\r\n\r\n  /** Condition expression. */\r\n  condition: Expression;\r\n  /** Contained cases. */\r\n  cases: SwitchCase[];\r\n}\r\n\r\n/** Represents a `throw` statement. */\r\nexport class ThrowStatement extends Statement {\r\n  kind = NodeKind.THROW;\r\n\r\n  /** Value expression being thrown. */\r\n  value: Expression;\r\n}\r\n\r\n/** Represents a `try` statement. */\r\nexport class TryStatement extends Statement {\r\n  kind = NodeKind.TRY;\r\n\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n  /** Exception variable name, if a `catch` clause is present. */\r\n  catchVariable: IdentifierExpression | null;\r\n  /** Statements being executed on catch, if a `catch` clause is present. */\r\n  catchStatements: Statement[] | null;\r\n  /** Statements being executed afterwards, if a `finally` clause is present. */\r\n  finallyStatements: Statement[] | null;\r\n}\r\n\r\n/** Represents a `type` declaration. */\r\nexport class TypeDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.TYPEDECLARATION;\r\n\r\n  /** Type being aliased. */\r\n  alias: TypeNode;\r\n}\r\n\r\n/** Represents a variable declaration part of a {@link VariableStatement}. */\r\nexport class VariableDeclaration extends VariableLikeDeclarationStatement {\r\n  kind = NodeKind.VARIABLEDECLARATION;\r\n\r\n  /** Array of modifiers. */\r\n  modifiers: Modifier[] | null;\r\n}\r\n\r\n/** Represents a variable statement wrapping {@link VariableDeclaration}s. */\r\nexport class VariableStatement extends Statement {\r\n  kind = NodeKind.VARIABLE;\r\n\r\n  /** Array of modifiers. */\r\n  modifiers: Modifier[] | null;\r\n  /** Array of decorators. */\r\n  decorators: Decorator[] | null;\r\n  /** Array of member declarations. */\r\n  declarations: VariableDeclaration[];\r\n}\r\n\r\n/** Represents a `while` statement. */\r\nexport class WhileStatement extends Statement {\r\n  kind = NodeKind.WHILE;\r\n\r\n  /** Condition expression. */\r\n  condition: Expression;\r\n  /** Statement being looped over. */\r\n  statement: Statement;\r\n}\r\n\r\n/** Cached unused modifiers for reuse. */\r\nvar reusableModifiers: Modifier[] | null = null;\r\n\r\nexport function setReusableModifiers(\r\n  modifiers: Modifier[]\r\n): void {\r\n  reusableModifiers = modifiers;\r\n}\r\n\r\n/** Creates a new modifiers array. */\r\nexport function createModifiers(): Modifier[] {\r\n  var ret: Modifier[];\r\n  if (reusableModifiers != null) {\r\n    ret = reusableModifiers;\r\n    reusableModifiers = null;\r\n  } else\r\n    ret = new Array(1);\r\n  ret.length = 0;\r\n  return ret;\r\n}\r\n\r\n/** Adds a modifier to a set of modifiers. Creates a new set if `null`. */\r\nexport function addModifier(\r\n  modifier: Modifier,\r\n  modifiers: Modifier[] | null\r\n): Modifier[] {\r\n  if (modifiers == null)\r\n    modifiers = createModifiers();\r\n  modifiers.push(modifier);\r\n  return modifiers;\r\n}\r\n\r\n/** Gets a specific modifier from the specified set of modifiers. */\r\nexport function getModifier(\r\n  kind: ModifierKind,\r\n  modifiers: Modifier[] | null\r\n): Modifier | null {\r\n  if (modifiers)\r\n    for (var i = 0, k = modifiers.length; i < k; ++i)\r\n      if (modifiers[i].modifierKind == kind)\r\n        return modifiers[i];\r\n  return null;\r\n}\r\n\r\n/** Tests whether a modifier exists in the specified set of modifiers. */\r\nexport function hasModifier(\r\n  kind: ModifierKind,\r\n  modifiers: Modifier[] | null\r\n): bool {\r\n  return getModifier(kind, modifiers) != null;\r\n}\r\n\r\n/** Gets the first decorator by name within at set of decorators, if present. */\r\nexport function getFirstDecorator(\r\n  name: string,\r\n  decorators: Decorator[] | null\r\n): Decorator | null {\r\n  if (decorators)\r\n    for (var i = 0, k = decorators.length; i < k; ++i) {\r\n      var decorator = decorators[i];\r\n      var expression = decorator.name;\r\n      if (expression.kind == NodeKind.IDENTIFIER && (<IdentifierExpression>expression).text == name)\r\n        return decorator;\r\n    }\r\n  return null;\r\n}\r\n\r\n/** Tests if a specific decorator is present within the specified decorators. */\r\nexport function hasDecorator(\r\n  name: string,\r\n  decorators: Decorator[] | null\r\n): bool {\r\n  return getFirstDecorator(name, decorators) != null;\r\n}\r\n\r\n/** Mangles a declaration's name to an internal name. */\r\nexport function mangleInternalName(\r\n  declaration: DeclarationStatement,\r\n  asGlobal: bool = false\r\n): string {\r\n  var name = declaration.name.text;\r\n  var parent = declaration.parent;\r\n  if (!parent)\r\n    return name;\r\n  if (declaration.kind == NodeKind.VARIABLEDECLARATION && parent.kind == NodeKind.VARIABLE) // skip over\r\n    if (!(parent = parent.parent))\r\n      return name;\r\n  if (parent.kind == NodeKind.CLASSDECLARATION)\r\n    return mangleInternalName(<ClassDeclaration>parent, asGlobal) + (\r\n      hasModifier(ModifierKind.STATIC, declaration.modifiers) ? STATIC_DELIMITER : INSTANCE_DELIMITER\r\n    ) + name;\r\n  if (parent.kind == NodeKind.NAMESPACEDECLARATION || parent.kind == NodeKind.ENUMDECLARATION)\r\n    return mangleInternalName(<DeclarationStatement>parent, asGlobal) + STATIC_DELIMITER + name;\r\n  if (asGlobal)\r\n    return name;\r\n  return declaration.range.source.internalPath + PATH_DELIMITER + name;\r\n}\r\n\r\n/** Mangles an external to an internal path. */\r\nexport function mangleInternalPath(\r\n  path: string\r\n): string {\r\n  if (path.endsWith(\".ts\"))\r\n    path = path.substring(0, path.length - 3);\r\n  return path;\r\n}\r\n\r\nfunction setParent(\r\n  nodes: Node[],\r\n  parent: Node\r\n): void {\r\n  for (var i = 0, k = nodes.length; i < k; ++i)\r\n    nodes[i].parent = parent;\r\n}\r\n\r\nfunction setParentOpt(\r\n  nodes: (Node | null)[],\r\n  parent: Node\r\n): void {\r\n  for (var i = 0, k = nodes.length; i < k; ++i) {\r\n    var node = nodes[i];\r\n    if (node)\r\n      node.parent = parent;\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/ast.ts","/*\r\n\r\n This is a modified version of TypeScript's scanner that doesn't perform\r\n as much bookkeeping, simply skips over trivia and provides a more general\r\n mark/reset mechanism for the parser to utilize on ambiguous tokens.\r\n\r\n next()                 advances the token\r\n peek()                 peeks for the next token\r\n skip(token)            skips over a token if possible\r\n mark()                 marks at current token\r\n reset()                resets to marked state\r\n range()                gets the range of the current token\r\n\r\n readFloat()            on FLOATLITERAL\r\n readIdentifier()       on IDENTIFIER\r\n readInteger()          on INTEGERLITERAL\r\n readString()           on STRINGLITERAL\r\n\r\n*/\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticMessage,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Source\r\n} from \"./ast\";\r\n\r\nimport {\r\n  CharCode,\r\n  isLineBreak,\r\n  isWhiteSpace,\r\n  isIdentifierStart,\r\n  isIdentifierPart,\r\n  isDecimalDigit,\r\n  isOctalDigit,\r\n  isKeywordCharacter\r\n} from \"./util/charcode\";\r\n\r\n/** Named token types. */\r\nexport enum Token {\r\n\r\n  // keywords\r\n  // discarded: ANY, BOOLEAN, NEVER, NUMBER, STRING, SYMBOL, UNDEFINED, LESSTHAN_SLASH\r\n\r\n  ABSTRACT,\r\n  AS,\r\n  ASYNC,\r\n  AWAIT,        // ES2017\r\n  BREAK,        // ES2017\r\n  CASE,         // ES2017\r\n  CATCH,        // ES2017\r\n  CLASS,        // ES2017\r\n  CONST,        // ES2017\r\n  CONTINUE,     // ES2017\r\n  CONSTRUCTOR,\r\n  DEBUGGER,     // ES2017\r\n  DECLARE,\r\n  DEFAULT,      // ES2017\r\n  DELETE,       // ES2017\r\n  DO,           // ES2017\r\n  ELSE,         // ES2017\r\n  ENUM,         // ES2017 future\r\n  EXPORT,       // ES2017\r\n  EXTENDS,      // ES2017\r\n  FALSE,        // ES\r\n  FINALLY,      // ES2017\r\n  FOR,          // ES2017\r\n  FROM,         // AS possible identifier\r\n  FUNCTION,     // ES2017\r\n  GET,\r\n  IF,           // ES2017\r\n  IMPLEMENTS,   // ES2017 non-lexical\r\n  IMPORT,       // ES2017\r\n  IN,           // ES2017\r\n  INSTANCEOF,   // ES2017\r\n  INTERFACE,    // ES2017 non-lexical\r\n  IS,\r\n  KEYOF,\r\n  LET,          // ES2017 non-lexical\r\n  MODULE,       // AS possible identifier\r\n  NAMESPACE,    // AS possible identifier\r\n  NEW,          // ES2017\r\n  NULL,         // ES\r\n  OF,\r\n  PACKAGE,      // ES2017 non-lexical\r\n  PRIVATE,      // ES2017 non-lexical\r\n  PROTECTED,    // ES2017 non-lexical\r\n  PUBLIC,       // ES2017 non-lexical\r\n  READONLY,\r\n  RETURN,       // ES2017\r\n  SET,\r\n  STATIC,       // ES2017 non-lexical\r\n  SUPER,        // ES2017\r\n  SWITCH,       // ES2017\r\n  THIS,         // ES2017\r\n  THROW,        // ES2017\r\n  TRUE,         // ES\r\n  TRY,          // ES2017\r\n  TYPE,         // AS possible identifier\r\n  TYPEOF,       // ES2017\r\n  VAR,          // ES2017\r\n  VOID,         // ES2017\r\n  WHILE,        // ES2017\r\n  WITH,         // ES2017\r\n  YIELD,        // ES2017\r\n\r\n  // punctuation\r\n\r\n  OPENBRACE,\r\n  CLOSEBRACE,\r\n  OPENPAREN,\r\n  CLOSEPAREN,\r\n  OPENBRACKET,\r\n  CLOSEBRACKET,\r\n  DOT,\r\n  DOT_DOT_DOT,\r\n  SEMICOLON,\r\n  COMMA,\r\n  LESSTHAN,\r\n  GREATERTHAN,\r\n  LESSTHAN_EQUALS,\r\n  GREATERTHAN_EQUALS,\r\n  EQUALS_EQUALS,\r\n  EXCLAMATION_EQUALS,\r\n  EQUALS_EQUALS_EQUALS,\r\n  EXCLAMATION_EQUALS_EQUALS,\r\n  EQUALS_GREATERTHAN,\r\n  PLUS,\r\n  MINUS,\r\n  ASTERISK_ASTERISK,\r\n  ASTERISK,\r\n  SLASH,\r\n  PERCENT,\r\n  PLUS_PLUS,\r\n  MINUS_MINUS,\r\n  LESSTHAN_LESSTHAN,\r\n  GREATERTHAN_GREATERTHAN,\r\n  GREATERTHAN_GREATERTHAN_GREATERTHAN,\r\n  AMPERSAND,\r\n  BAR,\r\n  CARET,\r\n  EXCLAMATION,\r\n  TILDE,\r\n  AMPERSAND_AMPERSAND,\r\n  BAR_BAR,\r\n  QUESTION,\r\n  COLON,\r\n  EQUALS,\r\n  PLUS_EQUALS,\r\n  MINUS_EQUALS,\r\n  ASTERISK_EQUALS,\r\n  ASTERISK_ASTERISK_EQUALS,\r\n  SLASH_EQUALS,\r\n  PERCENT_EQUALS,\r\n  LESSTHAN_LESSTHAN_EQUALS,\r\n  GREATERTHAN_GREATERTHAN_EQUALS,\r\n  GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS,\r\n  AMPERSAND_EQUALS,\r\n  BAR_EQUALS,\r\n  CARET_EQUALS,\r\n  AT,\r\n\r\n  // literals\r\n\r\n  IDENTIFIER,\r\n  STRINGLITERAL,\r\n  INTEGERLITERAL,\r\n  FLOATLITERAL,\r\n\r\n  // meta\r\n\r\n  INVALID,\r\n  ENDOFFILE\r\n}\r\n\r\nexport namespace Token {\r\n\r\n  export function fromKeyword(text: string): Token {\r\n    switch (text) {\r\n      case \"abstract\": return Token.ABSTRACT;\r\n      case \"as\": return Token.AS;\r\n      case \"async\": return Token.ASYNC;\r\n      case \"await\": return Token.AWAIT;\r\n      case \"break\": return Token.BREAK;\r\n      case \"case\": return Token.CASE;\r\n      case \"catch\": return Token.CATCH;\r\n      case \"class\": return Token.CLASS;\r\n      case \"continue\": return Token.CONTINUE;\r\n      case \"const\": return Token.CONST;\r\n      case \"constructor\": return Token.CONSTRUCTOR;\r\n      case \"debugger\": return Token.DEBUGGER;\r\n      case \"declare\": return Token.DECLARE;\r\n      case \"default\": return Token.DEFAULT;\r\n      case \"delete\": return Token.DELETE;\r\n      case \"do\": return Token.DO;\r\n      case \"else\": return Token.ELSE;\r\n      case \"enum\": return Token.ENUM;\r\n      case \"export\": return Token.EXPORT;\r\n      case \"extends\": return Token.EXTENDS;\r\n      case \"false\": return Token.FALSE;\r\n      case \"finally\": return Token.FINALLY;\r\n      case \"for\": return Token.FOR;\r\n      case \"from\": return Token.FROM;\r\n      case \"function\": return Token.FUNCTION;\r\n      case \"get\": return Token.GET;\r\n      case \"if\": return Token.IF;\r\n      case \"implements\": return Token.IMPLEMENTS;\r\n      case \"import\": return Token.IMPORT;\r\n      case \"in\": return Token.IN;\r\n      case \"instanceof\": return Token.INSTANCEOF;\r\n      case \"interface\": return Token.INTERFACE;\r\n      case \"is\": return Token.IS;\r\n      case \"keyof\": return Token.KEYOF;\r\n      case \"let\": return Token.LET;\r\n      case \"module\": return Token.MODULE;\r\n      case \"namespace\": return Token.NAMESPACE;\r\n      case \"new\": return Token.NEW;\r\n      case \"null\": return Token.NULL;\r\n      case \"of\": return Token.OF;\r\n      case \"package\": return Token.PACKAGE;\r\n      case \"private\": return Token.PRIVATE;\r\n      case \"protected\": return Token.PROTECTED;\r\n      case \"public\": return Token.PUBLIC;\r\n      case \"readonly\": return Token.READONLY;\r\n      case \"return\": return Token.RETURN;\r\n      case \"set\": return Token.SET;\r\n      case \"static\": return Token.STATIC;\r\n      case \"super\": return Token.SUPER;\r\n      case \"switch\": return Token.SWITCH;\r\n      case \"this\": return Token.THIS;\r\n      case \"throw\": return Token.THROW;\r\n      case \"true\": return Token.TRUE;\r\n      case \"try\": return Token.TRY;\r\n      case \"type\": return Token.TYPE;\r\n      case \"typeof\": return Token.TYPEOF;\r\n      case \"var\": return Token.VAR;\r\n      case \"void\": return Token.VOID;\r\n      case \"while\": return Token.WHILE;\r\n      case \"with\": return Token.WITH;\r\n      case \"yield\": return Token.YIELD;\r\n      default: return Token.INVALID;\r\n    }\r\n  }\r\n\r\n  export function isAlsoIdentifier(token: Token): bool {\r\n    switch (token) {\r\n      case Token.ABSTRACT:\r\n      case Token.AS:\r\n      case Token.CONSTRUCTOR:\r\n      case Token.DECLARE:\r\n      case Token.DELETE:\r\n      case Token.FROM:\r\n      case Token.GET:\r\n      case Token.IS:\r\n      case Token.KEYOF:\r\n      case Token.MODULE:\r\n      case Token.NAMESPACE:\r\n      case Token.READONLY:\r\n      case Token.SET:\r\n      case Token.TYPE:\r\n        return true;\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n}\r\n\r\nexport class Range {\r\n\r\n  source: Source;\r\n  start: i32;\r\n  end: i32;\r\n\r\n  // TODO: set these while tokenizing\r\n  // line: i32;\r\n  // column: i32;\r\n\r\n  constructor(source: Source, start: i32, end: i32) {\r\n    this.source = source;\r\n    this.start = start;\r\n    this.end = end;\r\n  }\r\n\r\n  static join(a: Range, b: Range): Range {\r\n    if (a.source != b.source)\r\n      throw new Error(\"source mismatch\");\r\n    return new Range(a.source, a.start < b.start ? a.start : b.start, a.end > b.end ? a.end : b.end);\r\n  }\r\n\r\n  get atStart(): Range { return new Range(this.source, this.start, this.start); }\r\n  get atEnd(): Range { return new Range(this.source, this.end, this.end); }\r\n\r\n  get line(): i32 {\r\n    var text = this.source.text;\r\n    var pos = this.start;\r\n    var line = 1;\r\n    while (pos-- > 0)\r\n      if (text.charCodeAt(pos) == CharCode.LINEFEED)\r\n        line++;\r\n    return line;\r\n  }\r\n\r\n  get column(): i32 {\r\n    var text = this.source.text;\r\n    var pos = this.start;\r\n    var column = 0;\r\n    while (pos-- > 0) {\r\n      if (text.charCodeAt(pos) == CharCode.LINEFEED)\r\n        break;\r\n      column++;\r\n    }\r\n    return column;\r\n  }\r\n\r\n  toString(): string {\r\n    return this.source.text.substring(this.start, this.end);\r\n  }\r\n\r\n  debugInfoRef: usize = 0;\r\n}\r\n\r\ndeclare function parseFloat(str: string): f64;\r\n\r\nexport class Tokenizer extends DiagnosticEmitter {\r\n\r\n  source: Source;\r\n  end: i32 = 0;\r\n\r\n  pos: i32 = 0;\r\n  token: Token = -1;\r\n  tokenPos: i32 = 0;\r\n\r\n  markedPos: i32 = 0;\r\n  markedToken: Token = -1;\r\n  markedTokenPos: i32 = 0;\r\n\r\n  nextToken: Token = -1;\r\n  nextTokenOnNewLine: bool = false;\r\n\r\n  constructor(source: Source, diagnostics: DiagnosticMessage[] | null = null) {\r\n    super(diagnostics);\r\n    this.source = source;\r\n    this.pos = 0;\r\n    this.end = source.text.length;\r\n    this.diagnostics = diagnostics ? diagnostics : new Array();\r\n\r\n    var text = source.text;\r\n\r\n    // skip bom\r\n    if (this.pos < this.end && text.charCodeAt(this.pos) == CharCode.BYTEORDERMARK)\r\n      ++this.pos;\r\n\r\n    // skip shebang\r\n    if (this.pos + 1 < this.end && text.charCodeAt(this.pos) == CharCode.HASH && text.charCodeAt(this.pos + 1) == CharCode.EXCLAMATION) {\r\n      this.pos += 2;\r\n      while (this.pos < this.end && text.charCodeAt(this.pos) != CharCode.LINEFEED)\r\n        ++this.pos;\r\n      // 'next' now starts at lf or eof\r\n    }\r\n  }\r\n\r\n  next(preferIdentifier: bool = false): Token {\r\n    this.nextToken = -1;\r\n    return this.token = this.unsafeNext(preferIdentifier);\r\n  }\r\n\r\n  private unsafeNext(preferIdentifier: bool = false, maxCompoundLength: i32 = i32.MAX_VALUE): Token {\r\n    var text = this.source.text;\r\n    while (true) {\r\n      if (this.pos >= this.end)\r\n        return Token.ENDOFFILE;\r\n\r\n      this.tokenPos = this.pos;\r\n      var c = text.charCodeAt(this.pos);\r\n      switch (c) {\r\n\r\n        case CharCode.CARRIAGERETURN:\r\n          if (++this.pos < this.end && text.charCodeAt(this.pos) == CharCode.LINEFEED)\r\n            ++this.pos;\r\n          break;\r\n\r\n        case CharCode.LINEFEED:\r\n        case CharCode.TAB:\r\n        case CharCode.VERTICALTAB:\r\n        case CharCode.FORMFEED:\r\n        case CharCode.SPACE:\r\n          ++this.pos;\r\n          break;\r\n\r\n        case CharCode.EXCLAMATION:\r\n          ++this.pos;\r\n          if (maxCompoundLength > 1 && this.pos < this.end && text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n            ++this.pos;\r\n            if (maxCompoundLength > 2 && this.pos < this.end && text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.EXCLAMATION_EQUALS_EQUALS;\r\n            }\r\n            return Token.EXCLAMATION_EQUALS;\r\n          }\r\n          return Token.EXCLAMATION;\r\n\r\n        case CharCode.DOUBLEQUOTE:\r\n        case CharCode.SINGLEQUOTE:\r\n        case CharCode.BACKTICK: // TODO\r\n          return Token.STRINGLITERAL; // expects a call to readString\r\n\r\n        case CharCode.PERCENT:\r\n          ++this.pos;\r\n          if (maxCompoundLength > 1 && this.pos < this.end && text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n            ++this.pos;\r\n            return Token.PERCENT_EQUALS;\r\n          }\r\n          return Token.PERCENT;\r\n\r\n        case CharCode.AMPERSAND:\r\n          ++this.pos;\r\n          if (maxCompoundLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.AMPERSAND) {\r\n              ++this.pos;\r\n              return Token.AMPERSAND_AMPERSAND;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.AMPERSAND_EQUALS;\r\n            }\r\n          }\r\n          return Token.AMPERSAND;\r\n\r\n        case CharCode.OPENPAREN:\r\n          ++this.pos;\r\n          return Token.OPENPAREN;\r\n\r\n        case CharCode.CLOSEPAREN:\r\n          ++this.pos;\r\n          return Token.CLOSEPAREN;\r\n\r\n        case CharCode.ASTERISK:\r\n          ++this.pos;\r\n          if (maxCompoundLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.ASTERISK_EQUALS;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.ASTERISK) {\r\n              ++this.pos;\r\n              if (maxCompoundLength > 2 && this.pos < this.end && text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n                ++this.pos;\r\n                return Token.ASTERISK_ASTERISK_EQUALS;\r\n              }\r\n              return Token.ASTERISK_ASTERISK;\r\n            }\r\n          }\r\n          return Token.ASTERISK;\r\n\r\n        case CharCode.PLUS:\r\n          ++this.pos;\r\n          if (maxCompoundLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.PLUS) {\r\n              ++this.pos;\r\n              return Token.PLUS_PLUS;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.PLUS_EQUALS;\r\n            }\r\n          }\r\n          return Token.PLUS;\r\n\r\n        case CharCode.COMMA:\r\n          ++this.pos;\r\n          return Token.COMMA;\r\n\r\n        case CharCode.MINUS:\r\n          ++this.pos;\r\n          if (maxCompoundLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.MINUS) {\r\n              ++this.pos;\r\n              return Token.MINUS_MINUS;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.MINUS_EQUALS;\r\n            }\r\n          }\r\n          return Token.MINUS;\r\n\r\n        case CharCode.DOT:\r\n          ++this.pos;\r\n          if (maxCompoundLength > 1 && this.pos < this.end) {\r\n            if (isDecimalDigit(text.charCodeAt(this.pos))) {\r\n              --this.pos;\r\n              return Token.FLOATLITERAL; // expects a call to readFloat\r\n            }\r\n            if (maxCompoundLength > 2 && text.charCodeAt(this.pos) == CharCode.DOT && this.pos + 1 < this.end && text.charCodeAt(this.pos + 1) == CharCode.DOT) {\r\n              this.pos += 2;\r\n              return Token.DOT_DOT_DOT;\r\n            }\r\n          }\r\n          return Token.DOT;\r\n\r\n        case CharCode.SLASH:\r\n          ++this.pos;\r\n          if (maxCompoundLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.SLASH) { // single-line comment\r\n              if (this.pos + 1 < this.end && text.charCodeAt(this.pos + 1) == CharCode.SLASH) {\r\n                // TODO: triple-slash directives, i.e. '/// <reference path=\"some.d.ts\" />'\r\n              }\r\n              while (++this.pos < this.end) {\r\n                if (isLineBreak(text.charCodeAt(this.pos)))\r\n                  break;\r\n              }\r\n              continue;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.ASTERISK) { // multi-line comment\r\n              var closed = false;\r\n              while (++this.pos < this.end) {\r\n                c = text.charCodeAt(this.pos);\r\n                if (c == CharCode.ASTERISK && this.pos + 1 < this.end && text.charCodeAt(this.pos + 1) == CharCode.SLASH) {\r\n                  this.pos += 2;\r\n                  closed = true;\r\n                  break;\r\n                }\r\n              }\r\n              if (!closed)\r\n                this.error(DiagnosticCode._0_expected, this.range(this.pos), \"*/\");\r\n              continue;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.SLASH_EQUALS;\r\n            }\r\n          }\r\n          return Token.SLASH;\r\n\r\n        case CharCode._0:\r\n        case CharCode._1:\r\n        case CharCode._2:\r\n        case CharCode._3:\r\n        case CharCode._4:\r\n        case CharCode._5:\r\n        case CharCode._6:\r\n        case CharCode._7:\r\n        case CharCode._8:\r\n        case CharCode._9:\r\n          return this.testInteger()\r\n            ? Token.INTEGERLITERAL // expects a call to readInteger\r\n            : Token.FLOATLITERAL;  // expects a call to readFloat\r\n\r\n        case CharCode.COLON:\r\n          ++this.pos;\r\n          return Token.COLON;\r\n\r\n        case CharCode.SEMICOLON:\r\n          ++this.pos;\r\n          return Token.SEMICOLON;\r\n\r\n        case CharCode.LESSTHAN:\r\n          ++this.pos;\r\n          if (maxCompoundLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.LESSTHAN) {\r\n              ++this.pos;\r\n              if (maxCompoundLength > 2 && this.pos < this.end && text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n                ++this.pos;\r\n                return Token.LESSTHAN_LESSTHAN_EQUALS;\r\n              }\r\n              return Token.LESSTHAN_LESSTHAN;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.LESSTHAN_EQUALS;\r\n            }\r\n          }\r\n          return Token.LESSTHAN;\r\n\r\n        case CharCode.EQUALS:\r\n          ++this.pos;\r\n          if (maxCompoundLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              if (maxCompoundLength > 2 && this.pos < this.end && text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n                ++this.pos;\r\n                return Token.EQUALS_EQUALS_EQUALS;\r\n              }\r\n              return Token.EQUALS_EQUALS;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\r\n              ++this.pos;\r\n              return Token.EQUALS_GREATERTHAN;\r\n            }\r\n          }\r\n          return Token.EQUALS;\r\n\r\n        case CharCode.GREATERTHAN:\r\n          ++this.pos;\r\n          if (maxCompoundLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\r\n              ++this.pos;\r\n              if (maxCompoundLength > 2 && this.pos < this.end) {\r\n                if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\r\n                  ++this.pos;\r\n                  if (maxCompoundLength > 3 && this.pos < this.end && text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n                    ++this.pos;\r\n                    return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS;\r\n                  }\r\n                  return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN;\r\n                }\r\n                if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n                  ++this.pos;\r\n                  return Token.GREATERTHAN_GREATERTHAN_EQUALS;\r\n                }\r\n              }\r\n              return Token.GREATERTHAN_GREATERTHAN;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.GREATERTHAN_EQUALS;\r\n            }\r\n          }\r\n          return Token.GREATERTHAN;\r\n\r\n        case CharCode.QUESTION:\r\n          ++this.pos;\r\n          return Token.QUESTION;\r\n\r\n        case CharCode.OPENBRACKET:\r\n          ++this.pos;\r\n          return Token.OPENBRACKET;\r\n\r\n        case CharCode.CLOSEBRACKET:\r\n          ++this.pos;\r\n          return Token.CLOSEBRACKET;\r\n\r\n        case CharCode.CARET:\r\n          ++this.pos;\r\n          if (maxCompoundLength > 1 && this.pos < this.end && text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n            ++this.pos;\r\n            return Token.CARET_EQUALS;\r\n          }\r\n          return Token.CARET;\r\n\r\n        case CharCode.OPENBRACE:\r\n          ++this.pos;\r\n          return Token.OPENBRACE;\r\n\r\n        case CharCode.BAR:\r\n          ++this.pos;\r\n          if (maxCompoundLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.BAR) {\r\n              ++this.pos;\r\n              return Token.BAR_BAR;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.BAR_EQUALS;\r\n            }\r\n          }\r\n          return Token.BAR;\r\n\r\n        case CharCode.CLOSEBRACE:\r\n          ++this.pos;\r\n          return Token.CLOSEBRACE;\r\n\r\n        case CharCode.TILDE:\r\n          ++this.pos;\r\n          return Token.TILDE;\r\n\r\n        case CharCode.AT:\r\n          ++this.pos;\r\n          return Token.AT;\r\n\r\n        default:\r\n          if (isIdentifierStart(c)) {\r\n            if (isKeywordCharacter(c)) {\r\n              var posBefore = this.pos;\r\n              while (++this.pos < this.end && isIdentifierPart(c = text.charCodeAt(this.pos))) {\r\n                if (!isKeywordCharacter(c)) {\r\n                  this.pos = posBefore;\r\n                  return Token.IDENTIFIER;\r\n                }\r\n              }\r\n              var keywordText = text.substring(posBefore, this.pos);\r\n              var keywordToken = Token.fromKeyword(keywordText);\r\n              if (keywordToken != Token.INVALID && !(preferIdentifier && Token.isAlsoIdentifier(keywordToken)))\r\n                return keywordToken;\r\n              this.pos = posBefore;\r\n            }\r\n            return Token.IDENTIFIER; // expects a call to readIdentifier\r\n          } else if (isWhiteSpace(c)) {\r\n            ++this.pos;\r\n            break;\r\n          }\r\n          this.error(DiagnosticCode.Invalid_character, this.range(this.pos, this.pos + 1));\r\n          ++this.pos;\r\n          return Token.INVALID;\r\n      }\r\n    }\r\n  }\r\n\r\n  peek(checkOnNewLine: bool = false, preferIdentifier: bool = false, maxCompoundLength: i32 = i32.MAX_VALUE): Token {\r\n    var text = this.source.text;\r\n    if (this.nextToken < 0) {\r\n      var posBefore = this.pos;\r\n      var tokenBefore = this.token;\r\n      var tokenPosBefore = this.tokenPos;\r\n      this.nextToken = this.unsafeNext(preferIdentifier, maxCompoundLength);\r\n      if (checkOnNewLine) {\r\n        this.nextTokenOnNewLine = false;\r\n        while (--this.tokenPos > posBefore) {\r\n          if (isLineBreak(text.charCodeAt(this.tokenPos))) {\r\n            this.nextTokenOnNewLine = true;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      this.pos = posBefore;\r\n      this.token = tokenBefore;\r\n      this.tokenPos = tokenPosBefore;\r\n    }\r\n    return this.nextToken;\r\n  }\r\n\r\n  skip(token: Token): bool {\r\n    var posBefore = this.pos;\r\n    var tokenBefore = this.token;\r\n    var tokenPosBefore = this.tokenPos;\r\n    var maxCompoundLength = i32.MAX_VALUE;\r\n    switch (token) {\r\n      case Token.GREATERTHAN: // where parsing type arguments\r\n        maxCompoundLength = 1;\r\n        break;\r\n    }\r\n    if ((this.token = this.unsafeNext(token == Token.IDENTIFIER, maxCompoundLength)) == token) {\r\n      this.nextToken = -1;\r\n      return true;\r\n    } else {\r\n      this.pos = posBefore;\r\n      this.token = tokenBefore;\r\n      this.tokenPos = tokenPosBefore;\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // skipUntil(token1: Token, token2: Token = -1): bool {\r\n  //   var next: Token;\r\n  //   do {\r\n  //     if ((next = this.peek()) == Token.ENDOFFILE)\r\n  //       return false;\r\n  //     if (next == token1 || next == token2)\r\n  //       return true;\r\n  //     this.next();\r\n  //   } while (true);\r\n  // }\r\n\r\n  mark(): void {\r\n    this.markedPos = this.pos;\r\n    this.markedToken = this.token;\r\n    this.markedTokenPos = this.tokenPos;\r\n  }\r\n\r\n  reset(): void {\r\n    this.pos = this.markedPos;\r\n    this.token = this.markedToken;\r\n    this.tokenPos = this.markedTokenPos;\r\n    this.nextToken = -1;\r\n  }\r\n\r\n  range(start: i32 = -1, end: i32 = -1): Range {\r\n    if (start < 0) {\r\n      start = this.tokenPos;\r\n      end = this.pos;\r\n    } else if (end < 0)\r\n      end = start;\r\n    return new Range(this.source, start, end);\r\n  }\r\n\r\n  readIdentifier(): string {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    while (++this.pos < this.end && isIdentifierPart(text.charCodeAt(this.pos)));\r\n    return text.substring(start, this.pos);\r\n  }\r\n\r\n  readString(): string {\r\n    var text = this.source.text;\r\n    var quote = text.charCodeAt(this.pos++);\r\n    var start = this.pos;\r\n    var result = \"\";\r\n    while (true) {\r\n      if (this.pos >= this.end) {\r\n        result += text.substring(start, this.pos);\r\n        this.error(DiagnosticCode.Unterminated_string_literal, this.range(start - 1, this.end));\r\n        break;\r\n      }\r\n      var c = text.charCodeAt(this.pos);\r\n      if (c == quote) {\r\n        result += text.substring(start, this.pos++);\r\n        break;\r\n      }\r\n      if (c == CharCode.BACKSLASH) {\r\n        result += text.substring(start, this.pos);\r\n        result += this.readEscapeSequence();\r\n        start = this.pos;\r\n        continue;\r\n      }\r\n      if (isLineBreak(c)) {\r\n        result += text.substring(start, this.pos);\r\n        this.error(DiagnosticCode.Unterminated_string_literal, this.range(start - 1, this.pos));\r\n        break;\r\n      }\r\n      ++this.pos;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  readEscapeSequence(): string {\r\n    if (++this.pos >= this.end) {\r\n      this.error(DiagnosticCode.Unexpected_end_of_text, this.range(this.end));\r\n      return \"\";\r\n    }\r\n\r\n    var text = this.source.text;\r\n    var c = text.charCodeAt(this.pos++);\r\n    switch (c) {\r\n\r\n      case CharCode._0:\r\n        return \"\\0\";\r\n\r\n      case CharCode.b:\r\n        return \"\\b\";\r\n\r\n      case CharCode.t:\r\n        return \"\\t\";\r\n\r\n      case CharCode.n:\r\n        return \"\\n\";\r\n\r\n      case CharCode.v:\r\n        return \"\\v\";\r\n\r\n      case CharCode.f:\r\n        return \"\\f\";\r\n\r\n      case CharCode.r:\r\n        return \"\\r\";\r\n\r\n      case CharCode.SINGLEQUOTE:\r\n        return \"'\";\r\n\r\n      case CharCode.DOUBLEQUOTE:\r\n        return \"\\\"\";\r\n\r\n      case CharCode.u: {\r\n        if (this.pos < this.end && text.charCodeAt(this.pos) == CharCode.OPENBRACE) {\r\n          ++this.pos;\r\n          return this.readExtendedUnicodeEscape(); // \\u{DDDDDDDD}\r\n        }\r\n        return this.readUnicodeEscape(); // \\uDDDD\r\n      }\r\n\r\n      case CharCode.CARRIAGERETURN:\r\n        if (this.pos < this.end && text.charCodeAt(this.pos) == CharCode.LINEFEED)\r\n          ++this.pos;\r\n        // fall through\r\n\r\n      case CharCode.LINEFEED:\r\n      case CharCode.LINESEPARATOR:\r\n      case CharCode.PARAGRAPHSEPARATOR:\r\n        return \"\";\r\n      default:\r\n        return String.fromCharCode(c);\r\n    }\r\n  }\r\n\r\n  readRegexpPattern(): string {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var escaped = false;\r\n    while (true) {\r\n      if (this.pos >= this.end) {\r\n        this.error(DiagnosticCode.Unterminated_regular_expression_literal, this.range(start, this.end));\r\n        break;\r\n      }\r\n      if (text.charCodeAt(this.pos) == CharCode.BACKSLASH) {\r\n        ++this.pos;\r\n        escaped = true;\r\n        continue;\r\n      }\r\n      var c = text.charCodeAt(this.pos);\r\n      if (c == CharCode.SLASH && !escaped)\r\n        break;\r\n      if (isLineBreak(c)) {\r\n        this.error(DiagnosticCode.Unterminated_regular_expression_literal, this.range(start, this.pos));\r\n        break;\r\n      }\r\n      ++this.pos;\r\n      escaped = false;\r\n    }\r\n    return text.substring(start, this.pos);\r\n  }\r\n\r\n  readRegexpFlags(): string {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var flags = 0;\r\n    while (this.pos < this.end) {\r\n      var c: i32 = text.charCodeAt(this.pos);\r\n      if (!isIdentifierPart(c))\r\n        break;\r\n      ++this.pos;\r\n      switch (c) {\r\n\r\n        // make sure each supported flag is unique\r\n        case CharCode.g:\r\n          flags |= flags & 1 ? -1 : 1;\r\n          break;\r\n        case CharCode.i:\r\n          flags |= flags & 2 ? -1 : 2;\r\n          break;\r\n        case CharCode.m:\r\n          flags |= flags & 4 ? -1 : 4;\r\n          break;\r\n\r\n        default:\r\n          flags = -1;\r\n          break;\r\n      }\r\n    }\r\n    if (flags == -1)\r\n      this.error(DiagnosticCode.Invalid_regular_expression_flags, this.range(start, this.pos));\r\n    return text.substring(start, this.pos);\r\n  }\r\n\r\n  testInteger(): bool {\r\n    var text = this.source.text;\r\n    if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 1 < this.end) {\r\n      switch (text.charCodeAt(this.pos + 2)) {\r\n        case CharCode.X:\r\n        case CharCode.x:\r\n        case CharCode.B:\r\n        case CharCode.b:\r\n        case CharCode.O:\r\n        case CharCode.o:\r\n          return true;\r\n      }\r\n    }\r\n    var pos = this.pos;\r\n    while (pos < this.end) {\r\n      var c = text.charCodeAt(pos);\r\n      if (c == CharCode.DOT || c == CharCode.E || c == CharCode.e)\r\n        return false;\r\n      if (c < CharCode._0 || c > CharCode._9)\r\n        break;\r\n      pos++;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  readInteger(): I64 {\r\n    var text = this.source.text;\r\n    if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\r\n      switch (text.charCodeAt(this.pos + 1)) {\r\n        case CharCode.X:\r\n        case CharCode.x:\r\n          this.pos += 2;\r\n          return this.readHexInteger();\r\n        case CharCode.B:\r\n        case CharCode.b:\r\n          this.pos += 2;\r\n          return this.readBinaryInteger();\r\n        case CharCode.O:\r\n        case CharCode.o:\r\n          this.pos += 2;\r\n          return this.readOctalInteger();\r\n      }\r\n      if (isOctalDigit(text.charCodeAt(this.pos + 1))) {\r\n        var start = this.pos;\r\n        ++this.pos;\r\n        var value = this.readOctalInteger();\r\n        this.error(DiagnosticCode.Octal_literals_are_not_allowed_in_strict_mode, this.range(start, this.pos));\r\n        return value;\r\n      }\r\n    }\r\n    return this.readDecimalInteger();\r\n  }\r\n\r\n  readHexInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0, 0);\r\n    var i64_16 = i64_new(16, 0);\r\n    while (this.pos < this.end) {\r\n      var c = text.charCodeAt(this.pos);\r\n      if (c >= CharCode._0 && c <= CharCode._9) {\r\n        // value = value * 16 + c - CharCode._0;\r\n        value = i64_add(i64_mul(value, i64_16), i64_new(c - CharCode._0, 0));\r\n       } else if (c >= CharCode.A && c <= CharCode.F) {\r\n        // value = value * 16 + 10 + c - CharCode.A;\r\n        value = i64_add(i64_mul(value, i64_16), i64_new(10 + c - CharCode.A, 0));\r\n      } else if (c >= CharCode.a && c <= CharCode.f) {\r\n        // value = value * 16 + 10 + c - CharCode.a;\r\n        value = i64_add(i64_mul(value, i64_16), i64_new(10 + c - CharCode.a, 0));\r\n      } else\r\n        break;\r\n      ++this.pos;\r\n    }\r\n    if (this.pos == start)\r\n      this.error(DiagnosticCode.Hexadecimal_digit_expected, this.range(start));\r\n    return value;\r\n  }\r\n\r\n  readDecimalInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0, 0);\r\n    var i64_10 = i64_new(10, 0);\r\n    while (this.pos < this.end) {\r\n      var c = text.charCodeAt(this.pos);\r\n      if (c >= CharCode._0 && c <= CharCode._9) {\r\n        // value = value * 10 + c - CharCode._0;\r\n        value = i64_add(i64_mul(value, i64_10), i64_new(c - CharCode._0, 0));\r\n      } else\r\n        break;\r\n      ++this.pos;\r\n    }\r\n    if (this.pos == start)\r\n      this.error(DiagnosticCode.Digit_expected, this.range(start));\r\n    return value;\r\n  }\r\n\r\n  readOctalInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0, 0);\r\n    var i64_8 = i64_new(8, 0);\r\n    while (this.pos < this.end) {\r\n      var c = text.charCodeAt(this.pos);\r\n      if (c >= CharCode._0 && c <= CharCode._7) {\r\n        // value = value * 8 + c - CharCode._0;\r\n        value = i64_add(i64_mul(value, i64_8), i64_new(c - CharCode._0, 0));\r\n      } else\r\n        break;\r\n      ++this.pos;\r\n    }\r\n    if (this.pos == start)\r\n      this.error(DiagnosticCode.Octal_digit_expected, this.range(start));\r\n    return value;\r\n  }\r\n\r\n  readBinaryInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0, 0);\r\n    var i64_2 = i64_new(2, 0);\r\n    var i64_1 = i64_new(1, 0);\r\n    while (this.pos < this.end) {\r\n      var c = text.charCodeAt(this.pos);\r\n      if (c == CharCode._0) {\r\n        // value = value * 2;\r\n        value = i64_mul(value, i64_2);\r\n      } else if (c == CharCode._1) {\r\n        // value = value * 2 + 1;\r\n        value = i64_add(i64_mul(value, i64_2), i64_1);\r\n      } else\r\n        break;\r\n      ++this.pos;\r\n    }\r\n    if (this.pos == start)\r\n      this.error(DiagnosticCode.Binary_digit_expected, this.range(start));\r\n    return value;\r\n  }\r\n\r\n  readFloat(): f64 {\r\n    var start = this.pos;\r\n    var text = this.source.text;\r\n    while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos)))\r\n      ++this.pos;\r\n    if (this.pos < this.end && text.charCodeAt(this.pos) == CharCode.DOT) {\r\n      ++this.pos;\r\n      while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos)))\r\n        ++this.pos;\r\n    }\r\n    if (this.pos < this.end) {\r\n      var c = text.charCodeAt(this.pos);\r\n      if (c == CharCode.E || c == CharCode.e) {\r\n        if (++this.pos < this.end && (text.charCodeAt(this.pos) == CharCode.MINUS || text.charCodeAt(this.pos) == CharCode.PLUS) && isDecimalDigit(text.charCodeAt(this.pos + 1)))\r\n          ++this.pos;\r\n        while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos)))\r\n          ++this.pos;\r\n      }\r\n    }\r\n    return parseFloat(text.substring(start, this.pos));\r\n  }\r\n\r\n  readUnicodeEscape(): string {\r\n    var remain = 4;\r\n    var value = 0;\r\n    var text = this.source.text;\r\n    while (this.pos < this.end) {\r\n      var c = text.charCodeAt(this.pos++);\r\n      if (c >= CharCode._0 && c <= CharCode._9)\r\n        value = value * 16 + c - CharCode._0;\r\n      else if (c >= CharCode.A && c <= CharCode.F)\r\n        value = value * 16 + 10 + c - CharCode.A;\r\n      else if (c >= CharCode.a && c <= CharCode.f)\r\n        value = value * 16 + 10 + c - CharCode.a;\r\n      else {\r\n        this.error(DiagnosticCode.Hexadecimal_digit_expected, this.range(this.pos - 1, this.pos));\r\n        return \"\";\r\n      }\r\n      if (--remain == 0)\r\n        break;\r\n    }\r\n    if (remain) {\r\n      this.error(DiagnosticCode.Unexpected_end_of_text, this.range(this.pos));\r\n      return \"\";\r\n    }\r\n    return String.fromCharCode(value);\r\n  }\r\n\r\n  private readExtendedUnicodeEscape(): string {\r\n    var start = this.pos;\r\n    var value = this.readHexInteger();\r\n    var value32 = i64_low(value);\r\n    var invalid = false;\r\n\r\n    assert(!i64_high(value));\r\n    if (value32 > 0x10FFFF) {\r\n      this.error(DiagnosticCode.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive, this.range(start, this.pos));\r\n      invalid = true;\r\n    }\r\n\r\n    var text = this.source.text;\r\n    if (this.pos >= this.end) {\r\n      this.error(DiagnosticCode.Unexpected_end_of_text, this.range(start, this.end));\r\n      invalid = true;\r\n    } else if (text.charCodeAt(this.pos) == CharCode.CLOSEBRACE) {\r\n      ++this.pos;\r\n    } else {\r\n      this.error(DiagnosticCode.Unterminated_Unicode_escape_sequence, this.range(start, this.pos));\r\n      invalid = true;\r\n    }\r\n\r\n    if (invalid)\r\n      return \"\";\r\n    return value32 < 65536\r\n      ? String.fromCharCode(value32)\r\n      : String.fromCharCode((((value32 - 65536) / 1024 | 0) + 0xD800) as i32, ((value32 - 65536) % 1024 + 0xDC00) as i32);\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/tokenizer.ts","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/global.js\n// module id = 7\n// module chunks = 0","// code below is generated from diagnosticsMessages.json by scripts/build-diagnostics\n\nexport enum DiagnosticCode {\n  Operation_not_supported = 100,\n  Operation_is_unsafe = 101,\n  Conversion_from_type_0_to_1_possibly_loses_information_and_thus_requires_an_explicit_cast = 200,\n  Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit = 201,\n  Type_0_cannot_be_changed_to_type_1 = 202,\n  Type_0_cannot_be_reinterpreted_as_type_1 = 203,\n  Basic_type_0_cannot_be_nullable = 204,\n  Cannot_export_a_mutable_global = 205,\n  Compiling_constant_with_non_constant_initializer_as_mutable = 206,\n  Structs_cannot_extend_classes_and_vice_versa = 207,\n  Structs_cannot_implement_interfaces = 208,\n  Invalid_regular_expression_flags = 209,\n  Implementation_0_must_match_the_signature_1 = 210,\n  Unterminated_string_literal = 1002,\n  Identifier_expected = 1003,\n  _0_expected = 1005,\n  A_file_cannot_have_a_reference_to_itself = 1006,\n  Trailing_comma_not_allowed = 1009,\n  Unexpected_token = 1012,\n  A_rest_parameter_must_be_last_in_a_parameter_list = 1014,\n  Parameter_cannot_have_question_mark_and_initializer = 1015,\n  A_required_parameter_cannot_follow_an_optional_parameter = 1016,\n  Enum_member_must_have_initializer = 1061,\n  Statements_are_not_allowed_in_ambient_contexts = 1036,\n  Initializers_are_not_allowed_in_ambient_contexts = 1039,\n  _0_modifier_cannot_be_used_here = 1042,\n  A_rest_parameter_cannot_be_optional = 1047,\n  A_rest_parameter_cannot_have_an_initializer = 1048,\n  A_set_accessor_must_have_exactly_one_parameter = 1049,\n  A_set_accessor_parameter_cannot_have_an_initializer = 1052,\n  A_get_accessor_cannot_have_parameters = 1054,\n  Type_parameters_cannot_appear_on_a_constructor_declaration = 1092,\n  Type_annotation_cannot_appear_on_a_constructor_declaration = 1093,\n  An_accessor_cannot_have_type_parameters = 1094,\n  A_set_accessor_cannot_have_a_return_type_annotation = 1095,\n  Type_parameter_list_cannot_be_empty = 1098,\n  A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement = 1104,\n  A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement = 1105,\n  A_return_statement_can_only_be_used_within_a_function_body = 1108,\n  Expression_expected = 1109,\n  Type_expected = 1110,\n  A_default_clause_cannot_appear_more_than_once_in_a_switch_statement = 1113,\n  Duplicate_label_0 = 1114,\n  Octal_literals_are_not_allowed_in_strict_mode = 1121,\n  Digit_expected = 1124,\n  Hexadecimal_digit_expected = 1125,\n  Unexpected_end_of_text = 1126,\n  Invalid_character = 1127,\n  _case_or_default_expected = 1130,\n  Type_argument_expected = 1140,\n  String_literal_expected = 1141,\n  Line_break_not_permitted_here = 1142,\n  Declaration_expected = 1146,\n  _const_declarations_must_be_initialized = 1155,\n  Unterminated_regular_expression_literal = 1161,\n  Binary_digit_expected = 1177,\n  Octal_digit_expected = 1178,\n  An_implementation_cannot_be_declared_in_ambient_contexts = 1183,\n  An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive = 1198,\n  Unterminated_Unicode_escape_sequence = 1199,\n  Decorators_are_not_valid_here = 1206,\n  _abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration = 1242,\n  A_class_may_only_extend_another_class = 1311,\n  Duplicate_identifier_0 = 2300,\n  Cannot_find_name_0 = 2304,\n  Module_0_has_no_exported_member_1 = 2305,\n  Generic_type_0_requires_1_type_argument_s = 2314,\n  Type_0_is_not_generic = 2315,\n  Type_0_is_not_assignable_to_type_1 = 2322,\n  Index_signature_is_missing_in_type_0 = 2329,\n  _this_cannot_be_referenced_in_current_location = 2332,\n  _super_can_only_be_referenced_in_a_derived_class = 2335,\n  Property_0_does_not_exist_on_type_1 = 2339,\n  Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures = 2349,\n  Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature = 2351,\n  A_function_whose_declared_type_is_not_void_must_return_a_value = 2355,\n  The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access = 2357,\n  The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access = 2364,\n  _get_and_set_accessor_must_have_the_same_type = 2380,\n  Constructor_implementation_is_missing = 2390,\n  Function_implementation_is_missing_or_not_immediately_following_the_declaration = 2391,\n  Multiple_constructor_implementations_are_not_allowed = 2392,\n  Duplicate_function_implementation = 2393,\n  Export_declaration_conflicts_with_exported_declaration_of_0 = 2484,\n  Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property = 2540,\n  The_target_of_an_assignment_must_be_a_variable_or_a_property_access = 2541,\n  Index_signature_in_type_0_only_permits_reading = 2542,\n  Expected_0_arguments_but_got_1 = 2554,\n  Expected_at_least_0_arguments_but_got_1 = 2555,\n  Expected_0_type_arguments_but_got_1 = 2558,\n  A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums = 2651,\n  Namespace_0_has_no_exported_member_1 = 2694,\n  File_0_not_found = 6054\n}\n\nexport function diagnosticCodeToString(code: DiagnosticCode): string {\n  switch (code) {\n    case 100: return \"Operation not supported.\";\n    case 101: return \"Operation is unsafe.\";\n    case 200: return \"Conversion from type '{0}' to '{1}' possibly loses information and thus requires an explicit cast.\";\n    case 201: return \"Conversion from type '{0}' to '{1}' will require an explicit cast when switching between 32/64-bit.\";\n    case 202: return \"Type '{0}' cannot be changed to type '{1}'.\";\n    case 203: return \"Type '{0}' cannot be reinterpreted as type '{1}'.\";\n    case 204: return \"Basic type '{0}' cannot be nullable.\";\n    case 205: return \"Cannot export a mutable global.\";\n    case 206: return \"Compiling constant with non-constant initializer as mutable.\";\n    case 207: return \"Structs cannot extend classes and vice-versa.\";\n    case 208: return \"Structs cannot implement interfaces.\";\n    case 209: return \"Invalid regular expression flags.\";\n    case 210: return \"Implementation '{0}' must match the signature '{1}'.\";\n    case 1002: return \"Unterminated string literal.\";\n    case 1003: return \"Identifier expected.\";\n    case 1005: return \"'{0}' expected.\";\n    case 1006: return \"A file cannot have a reference to itself.\";\n    case 1009: return \"Trailing comma not allowed.\";\n    case 1012: return \"Unexpected token.\";\n    case 1014: return \"A rest parameter must be last in a parameter list.\";\n    case 1015: return \"Parameter cannot have question mark and initializer.\";\n    case 1016: return \"A required parameter cannot follow an optional parameter.\";\n    case 1061: return \"Enum member must have initializer.\";\n    case 1036: return \"Statements are not allowed in ambient contexts.\";\n    case 1039: return \"Initializers are not allowed in ambient contexts.\";\n    case 1042: return \"'{0}' modifier cannot be used here.\";\n    case 1047: return \"A rest parameter cannot be optional.\";\n    case 1048: return \"A rest parameter cannot have an initializer.\";\n    case 1049: return \"A 'set' accessor must have exactly one parameter.\";\n    case 1052: return \"A 'set' accessor parameter cannot have an initializer.\";\n    case 1054: return \"A 'get' accessor cannot have parameters.\";\n    case 1092: return \"Type parameters cannot appear on a constructor declaration.\";\n    case 1093: return \"Type annotation cannot appear on a constructor declaration.\";\n    case 1094: return \"An accessor cannot have type parameters.\";\n    case 1095: return \"A 'set' accessor cannot have a return type annotation.\";\n    case 1098: return \"Type parameter list cannot be empty.\";\n    case 1104: return \"A 'continue' statement can only be used within an enclosing iteration statement.\";\n    case 1105: return \"A 'break' statement can only be used within an enclosing iteration or switch statement.\";\n    case 1108: return \"A 'return' statement can only be used within a function body.\";\n    case 1109: return \"Expression expected.\";\n    case 1110: return \"Type expected.\";\n    case 1113: return \"A 'default' clause cannot appear more than once in a 'switch' statement.\";\n    case 1114: return \"Duplicate label '{0}'.\";\n    case 1121: return \"Octal literals are not allowed in strict mode.\";\n    case 1124: return \"Digit expected.\";\n    case 1125: return \"Hexadecimal digit expected.\";\n    case 1126: return \"Unexpected end of text.\";\n    case 1127: return \"Invalid character.\";\n    case 1130: return \"'case' or 'default' expected.\";\n    case 1140: return \"Type argument expected.\";\n    case 1141: return \"String literal expected.\";\n    case 1142: return \"Line break not permitted here.\";\n    case 1146: return \"Declaration expected.\";\n    case 1155: return \"'const' declarations must be initialized.\";\n    case 1161: return \"Unterminated regular expression literal.\";\n    case 1177: return \"Binary digit expected.\";\n    case 1178: return \"Octal digit expected.\";\n    case 1183: return \"An implementation cannot be declared in ambient contexts.\";\n    case 1198: return \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\";\n    case 1199: return \"Unterminated Unicode escape sequence.\";\n    case 1206: return \"Decorators are not valid here.\";\n    case 1242: return \"'abstract' modifier can only appear on a class, method, or property declaration.\";\n    case 1311: return \"A class may only extend another class.\";\n    case 2300: return \"Duplicate identifier '{0}'.\";\n    case 2304: return \"Cannot find name '{0}'.\";\n    case 2305: return \"Module '{0}' has no exported member '{1}'.\";\n    case 2314: return \"Generic type '{0}' requires {1} type argument(s).\";\n    case 2315: return \"Type '{0}' is not generic.\";\n    case 2322: return \"Type '{0}' is not assignable to type '{1}'.\";\n    case 2329: return \"Index signature is missing in type '{0}'.\";\n    case 2332: return \"'this' cannot be referenced in current location.\";\n    case 2335: return \"'super' can only be referenced in a derived class.\";\n    case 2339: return \"Property '{0}' does not exist on type '{1}'.\";\n    case 2349: return \"Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.\";\n    case 2351: return \"Cannot use 'new' with an expression whose type lacks a construct signature.\";\n    case 2355: return \"A function whose declared type is not 'void' must return a value.\";\n    case 2357: return \"The operand of an increment or decrement operator must be a variable or a property access.\";\n    case 2364: return \"The left-hand side of an assignment expression must be a variable or a property access.\";\n    case 2380: return \"'get' and 'set' accessor must have the same type.\";\n    case 2390: return \"Constructor implementation is missing.\";\n    case 2391: return \"Function implementation is missing or not immediately following the declaration.\";\n    case 2392: return \"Multiple constructor implementations are not allowed.\";\n    case 2393: return \"Duplicate function implementation.\";\n    case 2484: return \"Export declaration conflicts with exported declaration of '{0}'.\";\n    case 2540: return \"Cannot assign to '{0}' because it is a constant or a read-only property.\";\n    case 2541: return \"The target of an assignment must be a variable or a property access.\";\n    case 2542: return \"Index signature in type '{0}' only permits reading.\";\n    case 2554: return \"Expected {0} arguments, but got {1}.\";\n    case 2555: return \"Expected at least {0} arguments, but got {1}.\";\n    case 2558: return \"Expected {0} type arguments, but got {1}.\";\n    case 2651: return \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\";\n    case 2694: return \"Namespace '{0}' has no exported member '{1}'.\";\n    case 6054: return \"File '{0}' not found.\";\n    default: return \"\";\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/diagnosticMessages.generated.ts","//////////////////////////// Character codes utility ////////////////////////////\r\n\r\n/** An enum of named character codes. */\r\nexport const enum CharCode {\r\n\r\n  NULL = 0,\r\n  LINEFEED = 0x0A,\r\n  CARRIAGERETURN = 0x0D,\r\n  LINESEPARATOR = 0x2028,\r\n  PARAGRAPHSEPARATOR = 0x2029,\r\n  NEXTLINE = 0x0085,\r\n\r\n  SPACE = 0x20,\r\n  NONBREAKINGSPACE = 0xA0,\r\n  ENQUAD = 0x2000,\r\n  EMQUAD = 0x2001,\r\n  ENSPACE = 0x2002,\r\n  EMSPACE = 0x2003,\r\n  THREEPEREMSPACE = 0x2004,\r\n  FOURPEREMSPACE = 0x2005,\r\n  SIXPEREMSPACE = 0x2006,\r\n  FIGURESPACE = 0x2007,\r\n  PUNCTUATIONSPACE = 0x2008,\r\n  THINSPACE = 0x2009,\r\n  HAIRSPACE = 0x200A,\r\n  ZEROWIDTHSPACE = 0x200B,\r\n  NARROWNOBREAKSPACE = 0x202F,\r\n  IDEOGRAPHICSPACE = 0x3000,\r\n  MATHEMATICALSPACE = 0x205F,\r\n  OGHAM = 0x1680,\r\n\r\n  _ = 0x5F,\r\n\r\n  _0 = 0x30,\r\n  _1 = 0x31,\r\n  _2 = 0x32,\r\n  _3 = 0x33,\r\n  _4 = 0x34,\r\n  _5 = 0x35,\r\n  _6 = 0x36,\r\n  _7 = 0x37,\r\n  _8 = 0x38,\r\n  _9 = 0x39,\r\n\r\n  a = 0x61,\r\n  b = 0x62,\r\n  c = 0x63,\r\n  d = 0x64,\r\n  e = 0x65,\r\n  f = 0x66,\r\n  g = 0x67,\r\n  h = 0x68,\r\n  i = 0x69,\r\n  j = 0x6A,\r\n  k = 0x6B,\r\n  l = 0x6C,\r\n  m = 0x6D,\r\n  n = 0x6E,\r\n  o = 0x6F,\r\n  p = 0x70,\r\n  q = 0x71,\r\n  r = 0x72,\r\n  s = 0x73,\r\n  t = 0x74,\r\n  u = 0x75,\r\n  v = 0x76,\r\n  w = 0x77,\r\n  x = 0x78,\r\n  y = 0x79,\r\n  z = 0x7A,\r\n\r\n  A = 0x41,\r\n  B = 0x42,\r\n  C = 0x43,\r\n  D = 0x44,\r\n  E = 0x45,\r\n  F = 0x46,\r\n  G = 0x47,\r\n  H = 0x48,\r\n  I = 0x49,\r\n  J = 0x4A,\r\n  K = 0x4B,\r\n  L = 0x4C,\r\n  M = 0x4D,\r\n  N = 0x4E,\r\n  O = 0x4F,\r\n  P = 0x50,\r\n  Q = 0x51,\r\n  R = 0x52,\r\n  S = 0x53,\r\n  T = 0x54,\r\n  U = 0x55,\r\n  V = 0x56,\r\n  W = 0x57,\r\n  X = 0x58,\r\n  Y = 0x59,\r\n  Z = 0x5a,\r\n\r\n  AMPERSAND = 0x26,\r\n  ASTERISK = 0x2A,\r\n  AT = 0x40,\r\n  BACKSLASH = 0x5C,\r\n  BACKTICK = 0x60,\r\n  BAR = 0x7C,\r\n  CARET = 0x5E,\r\n  CLOSEBRACE = 0x7D,\r\n  CLOSEBRACKET = 0x5D,\r\n  CLOSEPAREN = 0x29,\r\n  COLON = 0x3A,\r\n  COMMA = 0x2C,\r\n  DOLLAR = 0x24,\r\n  DOT = 0x2E,\r\n  DOUBLEQUOTE = 0x22,\r\n  EQUALS = 0x3D,\r\n  EXCLAMATION = 0x21,\r\n  GREATERTHAN = 0x3E,\r\n  HASH = 0x23,\r\n  LESSTHAN = 0x3C,\r\n  MINUS = 0x2D,\r\n  OPENBRACE = 0x7B,\r\n  OPENBRACKET = 0x5B,\r\n  OPENPAREN = 0x28,\r\n  PERCENT = 0x25,\r\n  PLUS = 0x2B,\r\n  QUESTION = 0x3F,\r\n  SEMICOLON = 0x3B,\r\n  SINGLEQUOTE = 0x27,\r\n  SLASH = 0x2F,\r\n  TILDE = 0x7E,\r\n\r\n  BACKSPACE = 0x08,\r\n  FORMFEED = 0x0C,\r\n  BYTEORDERMARK = 0xFEFF,\r\n  TAB = 0x09,\r\n  VERTICALTAB = 0x0B\r\n}\r\n\r\n/** Tests if the specified character code is some sort of line break. */\r\nexport function isLineBreak(c: CharCode): bool {\r\n  switch (c) {\r\n    case CharCode.LINEFEED:\r\n    case CharCode.CARRIAGERETURN:\r\n    case CharCode.LINESEPARATOR:\r\n    case CharCode.PARAGRAPHSEPARATOR:\r\n      return true;\r\n    default:\r\n      return false;\r\n  }\r\n}\r\n\r\n/** Tests if the specified character code is some sort of white space. */\r\nexport function isWhiteSpace(c: i32): bool {\r\n  switch (c) {\r\n    case CharCode.SPACE:\r\n    case CharCode.TAB:\r\n    case CharCode.VERTICALTAB:\r\n    case CharCode.FORMFEED:\r\n    case CharCode.NONBREAKINGSPACE:\r\n    case CharCode.NEXTLINE:\r\n    case CharCode.OGHAM:\r\n    case CharCode.NARROWNOBREAKSPACE:\r\n    case CharCode.MATHEMATICALSPACE:\r\n    case CharCode.IDEOGRAPHICSPACE:\r\n    case CharCode.BYTEORDERMARK:\r\n      return true;\r\n    default:\r\n      return c >= CharCode.ENQUAD && c <= CharCode.ZEROWIDTHSPACE;\r\n  }\r\n}\r\n\r\n/** Tests if the specified character code is a decimal digit. */\r\nexport function isDecimalDigit(c: i32): bool {\r\n  return c >= CharCode._0 && c <= CharCode._9;\r\n}\r\n\r\n/** Tests if the specified character code is an octal digit. */\r\nexport function isOctalDigit(c: i32): bool {\r\n  return c >= CharCode._0 && c <= CharCode._7;\r\n}\r\n\r\n/** Tests if the specified character code is a valid start of an identifier. */\r\nexport function isIdentifierStart(c: i32): bool {\r\n  return c >= CharCode.A && c <= CharCode.Z\r\n      || c >= CharCode.a && c <= CharCode.z\r\n      || c == CharCode.DOLLAR\r\n      || c == CharCode._\r\n      || c > 0x7f && isUnicodeIdentifierStart(c);\r\n}\r\n\r\n/** Tests if the specified character code is a valid keyword character. */\r\nexport function isKeywordCharacter(c: i32): bool {\r\n  return c >= CharCode.a && c <= CharCode.z;\r\n}\r\n\r\n/** Tests if the specified character code is a valid part of an identifier. */\r\nexport function isIdentifierPart(c: i32): bool {\r\n  return c >= CharCode.A && c <= CharCode.Z\r\n      || c >= CharCode.a && c <= CharCode.z\r\n      || c >= CharCode._0 && c <= CharCode._9\r\n      || c == CharCode.DOLLAR\r\n      || c == CharCode._\r\n      || c > 0x7f && isUnicodeIdentifierPart(c);\r\n}\r\n\r\n// storing as u16 to save memory\r\nconst unicodeIdentifierStart: u16[] = [\r\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\r\n  740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906,\r\n  908, 908, 910, 929, 931,\r\n  1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\r\n  1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774,\r\n  1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,\r\n  1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088,\r\n  2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384,\r\n  2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474,\r\n  2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\r\n  2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613,\r\n  2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705,\r\n  2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,\r\n  2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,\r\n  2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958,\r\n  2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,\r\n  2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,\r\n  3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\r\n  3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333,\r\n  3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\r\n  3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\r\n  3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725,\r\n  3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\r\n  3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,\r\n  3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,\r\n  4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293,\r\n  4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696,\r\n  4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798,\r\n  4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\r\n  5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872,\r\n  5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016,\r\n  6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389,\r\n  6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688,\r\n  6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141,\r\n  7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424,\r\n  7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025,\r\n  8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,\r\n  8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\r\n  8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469,\r\n  8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,\r\n  8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584,\r\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520,\r\n  11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670,\r\n  11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,\r\n  11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329,\r\n  12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540,\r\n  12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893,\r\n  19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538,\r\n  42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888,\r\n  42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015,\r\n  43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\r\n  43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520,\r\n  43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695,\r\n  43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739,\r\n  43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798,\r\n  43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243,\r\n  55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285,\r\n  64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323,\r\n  64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\r\n  65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\r\n  65479, 65482, 65487, 65490, 65495, 65498, 65500,\r\n];\r\nconst unicodeIdentifierPart: u16[] = [\r\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\r\n  740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906,\r\n  908, 908, 910, 929, 931,\r\n  1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415,\r\n  1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520,\r\n  1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,\r\n  1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112,\r\n  2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423,\r\n  2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,\r\n  2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,\r\n  2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602,\r\n  2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632,\r\n  2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693,\r\n  2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757,\r\n  2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821,\r\n  2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884,\r\n  2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,\r\n  2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972,\r\n  2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018,\r\n  3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088,\r\n  3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157,\r\n  3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216,\r\n  3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285,\r\n  3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,\r\n  3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,\r\n  3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515,\r\n  3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570,\r\n  3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720,\r\n  3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,\r\n  3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789,\r\n  3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895,\r\n  3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028,\r\n  4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304,\r\n  4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744,\r\n  4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\r\n  4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108,\r\n  5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902,\r\n  5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099,\r\n  6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272,\r\n  6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,\r\n  6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783,\r\n  6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155,\r\n  7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676,\r\n  7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\r\n  8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134,\r\n  8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205,\r\n  8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417,\r\n  8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477,\r\n  8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,\r\n  8521, 8526, 8526, 8544, 8584,\r\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,\r\n  11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686,\r\n  11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728,\r\n  11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335,\r\n  12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449,\r\n  12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799,\r\n  13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512,\r\n  42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783,\r\n  42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072,\r\n  43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309,\r\n  43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584,\r\n  43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741,\r\n  43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808,\r\n  43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,\r\n  55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275,\r\n  64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,\r\n  64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,\r\n  65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140,\r\n  65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382,\r\n  65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\r\n];\r\n\r\nfunction lookupInUnicodeMap(code: u16, map: u16[]): bool {\r\n  if (code < map[0])\r\n    return false;\r\n\r\n  var lo = 0;\r\n  var hi = map.length;\r\n  var mid: i32;\r\n\r\n  while (lo + 1 < hi) {\r\n    mid = lo + (hi - lo) / 2;\r\n    mid -= mid % 2;\r\n    if (map[mid] <= code && code <= map[mid + 1])\r\n      return true;\r\n    if (code < map[mid])\r\n      hi = mid;\r\n    else\r\n      lo = mid + 2;\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction isUnicodeIdentifierStart(code: i32): bool {\r\n  return code < 0 || code > 0xffff ? false\r\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierStart);\r\n}\r\n\r\nfunction isUnicodeIdentifierPart(code: i32): bool {\r\n  return code < 0 || code > 0xffff ? false\r\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierPart);\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/util/charcode.ts","//////////////////////////// Internal path utility /////////////////////////////\r\n\r\nimport {\r\n  CharCode\r\n} from \"./charcode\";\r\n\r\nconst separator = CharCode.SLASH;\r\n\r\n/**\r\n * Normalizes the specified path, removing interior placeholders.\r\n * Expects a posix-compatible relative path (not Windows compatible).\r\n */\r\nexport function normalize(path: string): string {\r\n  var pos = 0;\r\n  var len = path.length;\r\n\r\n  // trim leading './'\r\n  while (pos + 1 < len &&\r\n    path.charCodeAt(pos) == CharCode.DOT &&\r\n    path.charCodeAt(pos + 1) == separator\r\n  ) {\r\n    pos += 2;\r\n  }\r\n\r\n  if (pos > 0 || len < path.length) {\r\n    path = path.substring(pos, len);\r\n    len -= pos;\r\n    pos = 0;\r\n  }\r\n\r\n  var atEnd: bool;\r\n  while (pos + 1 < len) {\r\n    atEnd = false;\r\n\r\n    // we are only interested in '/.' sequences ...\r\n    if (\r\n      path.charCodeAt(pos) == separator &&\r\n      path.charCodeAt(pos + 1) == CharCode.DOT\r\n    ) {\r\n      // '/.' ( '/' | $ )\r\n      atEnd = pos + 2 == len;\r\n      if (atEnd ||\r\n        pos + 2 < len &&\r\n        path.charCodeAt(pos + 2) == separator\r\n      ) {\r\n        path = atEnd\r\n          ? path.substring(0, pos)\r\n          : path.substring(0, pos) + path.substring(pos + 2);\r\n        len -= 2;\r\n        continue;\r\n      }\r\n\r\n      // '/.' ( './' | '.' $ )\r\n      atEnd = pos + 3 == len;\r\n      if (atEnd && path.charCodeAt(pos + 2) == CharCode.DOT ||\r\n        pos + 3 < len &&\r\n        path.charCodeAt(pos + 2) == CharCode.DOT &&\r\n        path.charCodeAt(pos + 3) == separator\r\n      ) {\r\n        // find preceeding '/'\r\n        var ipos = pos;\r\n        while (--ipos >= 0) {\r\n          if (path.charCodeAt(ipos) == separator) {\r\n            if (pos - ipos != 3 ||\r\n              path.charCodeAt(ipos + 1) != CharCode.DOT ||\r\n              path.charCodeAt(ipos + 2) != CharCode.DOT\r\n            ) { // exclude '..' itself\r\n              path = atEnd\r\n                ? path.substring(0, ipos)\r\n                : path.substring(0, ipos) + path.substring(pos + 3);\r\n              len -= pos + 3 - ipos;\r\n              pos = ipos - 1; // incremented again at end of loop\r\n            }\r\n            break;\r\n          }\r\n        }\r\n\r\n        // if there's no preceeding '/', trim start if non-empty\r\n        if (ipos < 0 && pos > 0) {\r\n          if (pos != 2 ||\r\n            path.charCodeAt(0) != CharCode.DOT ||\r\n            path.charCodeAt(1) != CharCode.DOT\r\n          ) { // exclude '..' itself\r\n            path = path.substring(pos + 4);\r\n            len = path.length;\r\n            continue;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    pos++;\r\n  }\r\n  return len > 0 ? path : \".\";\r\n}\r\n\r\n/** Resolves the specified path relative to the specified origin. */\r\nexport function resolve(normalizedPath: string, origin: string): string {\r\n  if (normalizedPath.startsWith(\"std/\"))\r\n    return normalizedPath;\r\n  return normalize(\r\n    dirname(origin) + String.fromCharCode(separator) + normalizedPath\r\n  );\r\n}\r\n\r\n/** Obtains the directory portion of a normalized path. */\r\nexport function dirname(normalizedPath: string): string {\r\n  var pos = normalizedPath.length;\r\n  while (--pos > 0)\r\n    if (normalizedPath.charCodeAt(pos) == separator)\r\n      return normalizedPath.substring(0, pos);\r\n  return \".\";\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/util/path.ts","import \"../../../std/portable\";\r\n\r\n// Copy Binaryen exports to global scope\r\n\r\ndeclare const global: any;\r\ndeclare function require(name: string): any;\r\n\r\nconst binaryen: any = global.Binaryen || require(\"binaryen\");\r\n\r\nfor (let key in binaryen)\r\n  if (key.startsWith(\"_Binaryen\") || key.startsWith(\"_Relooper\"))\r\n    global[key] = (<any>binaryen)[key];\r\n\r\n// Use Binaryen's heap instead of std heap\r\n\r\nglobal.allocate_memory = function(size: number): number {\r\n  if (!size) return 0; // should be safe in our case\r\n  return (<any>binaryen)._malloc(size);\r\n};\r\n\r\nglobal.free_memory = function(ptr: number): void {\r\n  if (ptr) (<any>binaryen)._free(ptr);\r\n};\r\n\r\nglobal.move_memory = function(dest: number, src: number, n: number): number {\r\n  return (<any>binaryen)._memmove(dest, src, n);\r\n};\r\n\r\nglobal.store = function(ptr: number, val: number): void {\r\n  (<any>binaryen).HEAPU8[ptr] = val;\r\n};\r\n\r\nglobal.load = function(ptr: number): number {\r\n  return (<any>binaryen).HEAPU8[ptr];\r\n};\r\n\r\n// Implement module stubs\r\n\r\nimport { Module } from \"../../module\";\r\n\r\nModule.prototype.toText = function toText() {\r\n  var previousPrint = binaryen.print;\r\n  var ret = \"\";\r\n  binaryen.print = (x: string) => { ret += x + \"\\n\" };\r\n  this.print();\r\n  binaryen.print = previousPrint;\r\n  return ret;\r\n};\r\n\r\nModule.prototype.toAsmjs = function toAsmjs() {\r\n  var previousPrint = binaryen.print;\r\n  var ret = \"\";\r\n  binaryen.print = (x: string) => { ret += x + \"\\n\" };\r\n  this.printAsmjs();\r\n  binaryen.print = previousPrint;\r\n  return ret;\r\n};\r\n\r\n// Implement I64 using long.js\r\n\r\nimport * as Long from \"long\";\r\n\r\n/// <reference path=\"./i64.d.ts\" />\r\n\r\nglobal.i64_new = function(lo: number, hi: number = 0): I64 {\r\n  return Long.fromBits(lo, hi);\r\n};\r\n\r\nglobal.i64_low = function(value: I64): i32 {\r\n  return value.low;\r\n};\r\n\r\nglobal.i64_high = function(value: I64): i32 {\r\n  return value.high;\r\n};\r\n\r\nglobal.i64_add = function(left: I64, right: I64): I64 {\r\n  return left.add(right);\r\n};\r\n\r\nglobal.i64_sub = function(left: I64, right: I64): I64 {\r\n  return left.sub(right);\r\n};\r\n\r\nglobal.i64_mul = function(left: I64, right: I64): I64 {\r\n  return left.mul(right);\r\n};\r\n\r\nglobal.i64_div = function(left: I64, right: I64): I64 {\r\n  return left.div(right);\r\n};\r\n\r\nglobal.i64_div_u = function(left: I64, right: I64): I64 {\r\n  return left.toUnsigned().div(right.toUnsigned()).toSigned();\r\n};\r\n\r\nglobal.i64_rem = function(left: I64, right: I64): I64 {\r\n  return left.mod(right);\r\n};\r\n\r\nglobal.i64_rem_u = function(left: I64, right: I64): I64 {\r\n  return left.toUnsigned().mod(right.toUnsigned()).toSigned();\r\n};\r\n\r\nglobal.i64_and = function(left: I64, right: I64): I64 {\r\n  return left.and(right);\r\n};\r\n\r\nglobal.i64_or = function(left: I64, right: I64): I64 {\r\n  return left.or(right);\r\n};\r\n\r\nglobal.i64_xor = function(left: I64, right: I64): I64 {\r\n  return left.xor(right);\r\n};\r\n\r\nglobal.i64_shl = function(left: I64, right: I64): I64 {\r\n  return left.shl(right);\r\n};\r\n\r\nglobal.i64_shr = function(left: I64, right: I64): I64 {\r\n  return left.shr(right);\r\n};\r\n\r\nglobal.i64_shr_u = function(left: I64, right: I64): I64 {\r\n  return left.shru(right);\r\n};\r\n\r\nglobal.i64_not = function(value: I64): I64 {\r\n  return value.not();\r\n};\r\n\r\nglobal.i64_align = function(value: I64, alignment: i32): I64 {\r\n  assert(alignment && (alignment & (alignment - 1)) == 0);\r\n  var mask = Long.fromInt(alignment - 1);\r\n  return value.add(mask).and(mask.not());\r\n};\r\n\r\nglobal.i64_is_i8 = function(value: I64): bool {\r\n  return value.high === 0 && (value.low >= 0 && value.low <= i8.MAX_VALUE)\r\n      || value.high === -1 && (value.low >= i8.MIN_VALUE && value.low < 0);\r\n};\r\n\r\nglobal.i64_is_i16 = function(value: I64): bool {\r\n  return value.high === 0 && (value.low >= 0 && value.low <= i16.MAX_VALUE)\r\n      || value.high === -1 && (value.low >= i16.MIN_VALUE && value.low < 0);\r\n};\r\n\r\nglobal.i64_is_i32 = function(value: I64): bool {\r\n  return (value.high === 0 && value.low >= 0) || (value.high === -1 && value.low < 0);\r\n};\r\n\r\nglobal.i64_is_u8 = function(value: I64): bool {\r\n  return value.high === 0 && value.low >= 0 && value.low <= u8.MAX_VALUE;\r\n};\r\n\r\nglobal.i64_is_u16 = function(value: I64): bool {\r\n  return value.high === 0 && value.low >= 0 && value.low <= u16.MAX_VALUE;\r\n};\r\n\r\nglobal.i64_is_u32 = function(value: I64): bool {\r\n  return value.high === 0;\r\n};\r\n\r\nglobal.i64_is_bool = function(value: I64): bool {\r\n  return value.high === 0 && (value.low === 0 || value.low === 1);\r\n};\r\n\r\nconst minSafeF32 = Long.fromNumber(f32.MIN_SAFE_INTEGER);\r\nconst maxSafeF32 = Long.fromNumber(f32.MAX_SAFE_INTEGER);\r\n\r\nglobal.i64_is_f32 = function(value: I64): bool {\r\n  return value.gte(minSafeF32) && value.lte(maxSafeF32);\r\n};\r\n\r\nconst minSafeF64 = Long.fromNumber(f64.MIN_SAFE_INTEGER);\r\nconst maxSafeF64 = Long.fromNumber(f64.MAX_SAFE_INTEGER);\r\n\r\nglobal.i64_is_f64 = function(value: I64): bool {\r\n  return value.gte(minSafeF64) && value.lte(maxSafeF64);\r\n};\r\n\r\nglobal.i64_to_f32 = function(value: I64): f64 {\r\n  return global.Math.fround(value.toNumber());\r\n};\r\n\r\nglobal.i64_to_f64 = function(value: I64): f64 {\r\n  return value.toNumber();\r\n};\r\n\r\nglobal.i64_to_string = function(value: I64, unsigned: bool = false): string {\r\n  return (unsigned ? value.toUnsigned() : value).toString(10);\r\n};\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/glue/js/index.ts","var globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\r\n\r\nObject.defineProperties(\r\n  globalScope[\"i8\"] = function i8(value) { return value << 24 >> 24; }\r\n, {\r\n  \"MIN_VALUE\": { value: -128, writable: false },\r\n  \"MAX_VALUE\": { value: 127, writable: false }\r\n});\r\nObject.defineProperties(\r\n  globalScope[\"i16\"] = function i16(value) { return value << 16 >> 16; }\r\n, {\r\n  \"MIN_VALUE\": { value: -32768, writable: false },\r\n  \"MAX_VALUE\": { value: 32767, writable: false }\r\n});\r\nObject.defineProperties(\r\n  globalScope[\"i32\"] = globalScope[\"isize\"] = function i32(value) { return value | 0; }\r\n, {\r\n  \"MIN_VALUE\": { value: -2147483648, writable: false },\r\n  \"MAX_VALUE\": { value: 2147483647, writable: false }\r\n});\r\nObject.defineProperties(\r\n  globalScope[\"u8\"] = function u8(value) { return value & 0xff; }\r\n, {\r\n  \"MIN_VALUE\": { value: 0, writable: false },\r\n  \"MAX_VALUE\": { value: 255, writable: false }\r\n});\r\nObject.defineProperties(\r\n  globalScope[\"u16\"] = function u16(value) { return value & 0xffff; }\r\n, {\r\n  \"MIN_VALUE\": { value: 0, writable: false },\r\n  \"MAX_VALUE\": { value: 65535, writable: false }\r\n});\r\nObject.defineProperties(\r\n  globalScope[\"u32\"] = globalScope[\"usize\"] = function u32(value) { return value >>> 0; }\r\n, {\r\n  \"MIN_VALUE\": { value: 0, writable: false },\r\n  \"MAX_VALUE\": { value: 4294967295, writable: false }\r\n});\r\nObject.defineProperties(\r\n  globalScope[\"bool\"] = function bool(value) { return !!value; }\r\n, {\r\n  \"MIN_VALUE\": { value: 0, writable: false },\r\n  \"MAX_VALUE\": { value: 1, writable: false }\r\n});\r\nObject.defineProperties(\r\n  globalScope[\"f32\"] = function f32(value) { return Math.fround(value); }\r\n, {\r\n  \"MIN_VALUE\": { value: Math.fround(-3.40282347e+38), writable: false },\r\n  \"MAX_VALUE\": { value: Math.fround(3.40282347e+38), writable: false },\r\n  \"MIN_SAFE_INTEGER\": { value: -16777215, writable: false },\r\n  \"MAX_SAFE_INTEGER\": { value: 16777215, writable: false },\r\n  \"EPSILON\": { value: Math.fround(1.19209290e-07), writable: false }\r\n});\r\nObject.defineProperties(\r\n  globalScope[\"f64\"] = function f64(value) { return +value; }\r\n, {\r\n  \"MIN_VALUE\": { value: -1.7976931348623157e+308, writable: false },\r\n  \"MAX_VALUE\": { value: 1.7976931348623157e+308, writable: false },\r\n  \"MIN_SAFE_INTEGER\": { value: -9007199254740991, writable: false },\r\n  \"MAX_SAFE_INTEGER\": { value: 9007199254740991, writable: false },\r\n  \"EPSILON\": { value: 2.2204460492503131e-16, writable: false }\r\n});\r\n\r\nglobalScope[\"clz\"] = Math.clz32;\r\nglobalScope[\"abs\"] = Math.abs;\r\nglobalScope[\"max\"] = Math.max;\r\nglobalScope[\"min\"] = Math.min;\r\nglobalScope[\"ceil\"] = Math.ceil;\r\nglobalScope[\"floor\"] = Math.floor;\r\nglobalScope[\"select\"] = function select(ifTrue, ifFalse, condition) { return condition ? ifTrue : ifFalse; };\r\nglobalScope[\"sqrt\"] = Math.sqrt;\r\nglobalScope[\"trunc\"] = Math.trunc;\r\n\r\nfunction UnreachableError() {\r\n  if (Error.captureStackTrace)\r\n    Error.captureStackTrace(this, UnreachableError);\r\n  else\r\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\r\n}\r\nUnreachableError.prototype = Object.create(Error.prototype);\r\nUnreachableError.prototype.name = \"UnreachableError\";\r\nUnreachableError.prototype.message = \"unreachable\";\r\n\r\nglobalScope[\"unreachable\"] = function unreachable() { throw new UnreachableError(); };\r\n\r\nfunction AssertionError(message) {\r\n  this.message = message || \"assertion failed\";\r\n  if (Error.captureStackTrace)\r\n    Error.captureStackTrace(this, AssertionError);\r\n  else\r\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\r\n}\r\nAssertionError.prototype = Object.create(Error.prototype);\r\nAssertionError.prototype.name = \"AssertionError\";\r\n\r\nglobalScope[\"assert\"] = function assert(isTrueish, message) { if (isTrueish) return isTrueish; throw new AssertionError(message); };\r\nglobalScope[\"changetype\"] = function changetype(value) { return value; }\r\n\r\nString[\"fromCharCodes\"] = function fromCharCodes(arr) { return String.fromCharCode.apply(String, arr); }\r\nString[\"fromCodePoints\"] = function fromCodePoints(arr) { return String.fromCodePoint.apply(String, arr); }\r\n\r\nglobalScope[\"parseI32\"] = function parseI32(str, radix) {\r\n  return parseInt(str) | 0;\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./std/portable.js\n// module id = 13\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_14__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"binaryen\"\n// module id = 14\n// module chunks = 0","import {\r\n  Compiler,\r\n  Target,\r\n  ConversionKind,\r\n\r\n  makeSmallIntegerWrap\r\n} from \"./compiler\";\r\n\r\nimport {\r\n  DiagnosticCode\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Node,\r\n  Expression\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind,\r\n  TypeFlags\r\n} from \"./types\";\r\n\r\nimport {\r\n  UnaryOp,\r\n  BinaryOp,\r\n  HostOp,\r\n  NativeType,\r\n  ExpressionRef,\r\n  FunctionTypeRef,\r\n  ExpressionId\r\n} from \"./module\";\r\n\r\nimport {\r\n  Global,\r\n  FunctionPrototype,\r\n  Local,\r\n  ElementFlags,\r\n  Class,\r\n  ElementKind\r\n} from \"./program\";\r\n\r\n/** Compiles a get of a built-in global. */\r\nexport function compileGetConstant(compiler: Compiler, global: Global, reportNode: Node): ExpressionRef {\r\n  switch (global.internalName) {\r\n\r\n    case \"NaN\": // context-sensitive\r\n      if (compiler.currentType == Type.f32)\r\n        return compiler.module.createF32(NaN);\r\n      compiler.currentType = Type.f64;\r\n      return compiler.module.createF64(NaN);\r\n\r\n    case \"Infinity\": // context-sensitive\r\n      if (compiler.currentType == Type.f32)\r\n        return compiler.module.createF32(Infinity);\r\n      compiler.currentType = Type.f64;\r\n      return compiler.module.createF64(Infinity);\r\n\r\n    case \"HEAP_BASE\": // never inlined for linking purposes\r\n      compiler.currentType = compiler.options.usizeType;\r\n      return compiler.module.createGetGlobal(\"HEAP_BASE\", compiler.options.nativeSizeType);\r\n  }\r\n  compiler.error(DiagnosticCode.Operation_not_supported, reportNode.range);\r\n  return compiler.module.createUnreachable();\r\n}\r\n\r\n/** Compiles a call to a built-in function. */\r\nexport function compileCall(compiler: Compiler, prototype: FunctionPrototype, typeArguments: Type[] | null, operands: Expression[], contextualType: Type, reportNode: Node): ExpressionRef {\r\n  var module = compiler.module;\r\n\r\n  var arg0: ExpressionRef,\r\n      arg1: ExpressionRef,\r\n      arg2: ExpressionRef,\r\n      ret: ExpressionRef;\r\n\r\n  var tempLocal0: Local,\r\n      tempLocal1: Local;\r\n\r\n  var type: Type,\r\n      offset: i32;\r\n\r\n  // NOTE that some implementations below make use of the select expression where straight-forward.\r\n  // whether worth or not should probably be tested once it's known if/how embedders handle it.\r\n  // search: createSelect\r\n\r\n  switch (prototype.internalName) {\r\n\r\n    // math\r\n\r\n    case \"isNaN\": // isNaN<T?>(value: T) -> bool\r\n      compiler.currentType = Type.bool;\r\n      if (operands.length != 1) {\r\n        if (typeArguments && typeArguments.length != 1)\r\n          compiler.error(DiagnosticCode.Expected_0_type_arguments_but_got_1, reportNode.range, \"1\", typeArguments.length.toString(10));\r\n        compiler.error(DiagnosticCode.Expected_0_arguments_but_got_1, reportNode.range, \"1\", operands.length.toString(10));\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          compiler.error(DiagnosticCode.Expected_0_type_arguments_but_got_1, reportNode.range, \"1\", typeArguments.length.toString(10));\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n\r\n      switch (compiler.currentType.kind) {\r\n\r\n        case TypeKind.F32:\r\n          tempLocal0 = compiler.currentFunction.getAndFreeTempLocal(Type.f32);\r\n          ret = module.createBinary(BinaryOp.NeF32,\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createGetLocal(tempLocal0.index, NativeType.F32)\r\n          );\r\n          break;\r\n\r\n        case TypeKind.F64:\r\n          tempLocal0 = compiler.currentFunction.getAndFreeTempLocal(Type.f64);\r\n          ret = module.createBinary(BinaryOp.NeF64,\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createGetLocal(tempLocal0.index, NativeType.F64)\r\n          );\r\n          break;\r\n\r\n        case TypeKind.VOID:\r\n          compiler.error(DiagnosticCode.Operation_not_supported, reportNode.range);\r\n          ret = module.createUnreachable();\r\n          break;\r\n\r\n        default: // every other type is never NaN\r\n          ret = module.createI32(0);\r\n          break;\r\n\r\n      }\r\n      compiler.currentType = Type.bool;\r\n      return ret;\r\n\r\n    case \"isFinite\": // isFinite<T?>(value: T) -> bool\r\n      compiler.currentType = Type.bool;\r\n      if (operands.length != 1) {\r\n        if (typeArguments && typeArguments.length != 1)\r\n          compiler.error(DiagnosticCode.Expected_0_type_arguments_but_got_1, reportNode.range, \"1\", typeArguments.length.toString(10));\r\n        compiler.error(DiagnosticCode.Expected_0_arguments_but_got_1, reportNode.range, \"1\", operands.length.toString(10));\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          compiler.error(DiagnosticCode.Expected_0_type_arguments_but_got_1, reportNode.range, \"1\", typeArguments.length.toString(10));\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n\r\n      switch (compiler.currentType.kind) {\r\n\r\n        case TypeKind.F32:\r\n          tempLocal0 = compiler.currentFunction.getAndFreeTempLocal(Type.f32);\r\n          ret = module.createSelect(\r\n            module.createBinary(BinaryOp.NeF32,\r\n              module.createUnary(UnaryOp.AbsF32,\r\n                module.createTeeLocal(tempLocal0.index, arg0)\r\n              ),\r\n              module.createF32(Infinity)\r\n            ),\r\n            module.createI32(0),\r\n            module.createBinary(BinaryOp.EqF32,\r\n              module.createGetLocal(tempLocal0.index, NativeType.F32),\r\n              module.createGetLocal(tempLocal0.index, NativeType.F32)\r\n            )\r\n          );\r\n          break;\r\n\r\n        case TypeKind.F64:\r\n          tempLocal0 = compiler.currentFunction.getAndFreeTempLocal(Type.f64);\r\n          ret = module.createSelect(\r\n            module.createBinary(BinaryOp.NeF64,\r\n              module.createUnary(UnaryOp.AbsF64,\r\n                module.createTeeLocal(tempLocal0.index, arg0)\r\n              ),\r\n              module.createF64(Infinity)\r\n            ),\r\n            module.createI32(0),\r\n            module.createBinary(BinaryOp.EqF64,\r\n              module.createGetLocal(tempLocal0.index, NativeType.F64),\r\n              module.createGetLocal(tempLocal0.index, NativeType.F64)\r\n            )\r\n          );\r\n          break;\r\n\r\n        case TypeKind.VOID:\r\n          compiler.error(DiagnosticCode.Operation_not_supported, reportNode.range);\r\n          ret = module.createUnreachable();\r\n          break;\r\n\r\n        default: // every other type is always finite\r\n          ret = module.createI32(1);\r\n          break;\r\n      }\r\n      compiler.currentType = Type.bool;\r\n      return ret;\r\n\r\n    case \"clz\": // clz<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length)\r\n            compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1)\r\n            compiler.error(DiagnosticCode.Expected_0_type_arguments_but_got_1, reportNode.range, \"1\", typeArguments.length.toString(10));\r\n        }\r\n        compiler.error(DiagnosticCode.Expected_0_arguments_but_got_1, reportNode.range, \"1\", operands.length.toString(10));\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length)\r\n            compiler.currentType = typeArguments[0];\r\n          compiler.error(DiagnosticCode.Expected_0_type_arguments_but_got_1, reportNode.range, \"1\", typeArguments.length.toString(10));\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE);\r\n\r\n      switch (compiler.currentType.kind) {\r\n\r\n        default: // any integer up to 32-bits incl. bool\r\n          ret = module.createUnary(UnaryOp.ClzI32, arg0);\r\n          break;\r\n\r\n        case TypeKind.USIZE:\r\n          if (compiler.currentType.isReference) {\r\n            compiler.error(DiagnosticCode.Operation_not_supported, reportNode.range);\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        case TypeKind.ISIZE:\r\n          ret = module.createUnary(compiler.options.target == Target.WASM64 ? UnaryOp.ClzI64 : UnaryOp.ClzI32, arg0);\r\n          break;\r\n\r\n        case TypeKind.I64:\r\n        case TypeKind.U64:\r\n          ret = module.createUnary(UnaryOp.ClzI64, arg0);\r\n          break;\r\n\r\n        case TypeKind.F32:\r\n        case TypeKind.F64:\r\n        case TypeKind.VOID:\r\n          compiler.error(DiagnosticCode.Operation_not_supported, reportNode.range);\r\n          ret = module.createUnreachable();\r\n          break;\r\n      }\r\n      return ret;\r\n\r\n    case \"ctz\": // ctz<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length)\r\n            compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1)\r\n            compiler.error(DiagnosticCode.Expected_0_type_arguments_but_got_1, reportNode.range, \"1\", typeArguments.length.toString(10));\r\n        }\r\n        compiler.error(DiagnosticCode.Expected_0_arguments_but_got_1, reportNode.range, \"1\", operands.length.toString(10));\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length)\r\n            compiler.currentType = typeArguments[0];\r\n          compiler.error(DiagnosticCode.Expected_0_type_arguments_but_got_1, reportNode.range, \"1\", typeArguments.length.toString(10));\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE);\r\n\r\n      switch (compiler.currentType.kind) {\r\n\r\n        default: // any integer up to 32-bits incl. bool\r\n          ret = module.createUnary(UnaryOp.CtzI32, arg0);\r\n          break;\r\n\r\n        case TypeKind.USIZE:\r\n          if (compiler.currentType.isReference) {\r\n            compiler.error(DiagnosticCode.Operation_not_supported, reportNode.range);\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        case TypeKind.ISIZE:\r\n          ret = module.createUnary(compiler.options.target == Target.WASM64 ? UnaryOp.CtzI64 : UnaryOp.CtzI32, arg0);\r\n          break;\r\n\r\n        case TypeKind.I64:\r\n        case TypeKind.U64:\r\n          ret = module.createUnary(UnaryOp.CtzI64, arg0);\r\n          break;\r\n\r\n        case TypeKind.F32:\r\n        case TypeKind.F64:\r\n        case TypeKind.VOID:\r\n          compiler.error(DiagnosticCode.Operation_not_supported, reportNode.range);\r\n          ret = module.createUnreachable();\r\n          break;\r\n      }\r\n      return ret;\r\n\r\n    case \"popcnt\": // popcnt<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length)\r\n            compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1)\r\n            compiler.error(DiagnosticCode.Expected_0_type_arguments_but_got_1, reportNode.range, \"1\", typeArguments.length.toString(10));\r\n        }\r\n        compiler.error(DiagnosticCode.Expected_0_arguments_but_got_1, reportNode.range, \"1\", operands.length.toString(10));\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length)\r\n            compiler.currentType = typeArguments[0];\r\n          compiler.error(DiagnosticCode.Expected_0_type_arguments_but_got_1, reportNode.range, \"1\", typeArguments.length.toString(10));\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE);\r\n\r\n      switch (compiler.currentType.kind) {\r\n\r\n        default: // any integer up to 32-bits incl. bool\r\n          ret = module.createUnary(UnaryOp.PopcntI32, arg0);\r\n          break;\r\n\r\n        case TypeKind.USIZE:\r\n          if (compiler.currentType.isReference) {\r\n            compiler.error(DiagnosticCode.Operation_not_supported, reportNode.range);\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        case TypeKind.ISIZE:\r\n          ret = module.createUnary(compiler.options.target == Target.WASM64 ? UnaryOp.PopcntI64 : UnaryOp.PopcntI32, arg0);\r\n          break;\r\n\r\n        case TypeKind.I64:\r\n        case TypeKind.U64:\r\n          ret = module.createUnary(UnaryOp.PopcntI64, arg0);\r\n          break;\r\n\r\n        case TypeKind.F32:\r\n        case TypeKind.F64:\r\n        case TypeKind.VOID:\r\n          compiler.error(DiagnosticCode.Operation_not_supported, reportNode.range);\r\n          ret = module.createUnreachable();\r\n          break;\r\n      }\r\n      return ret;\r\n\r\n    case \"rotl\": // rotl<T?>(value: T, shift: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length)\r\n            compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1)\r\n            compiler.error(DiagnosticCode.Expected_0_type_arguments_but_got_1, reportNode.range, \"1\", typeArguments.length.toString(10));\r\n        }\r\n        compiler.error(DiagnosticCode.Expected_0_arguments_but_got_1, reportNode.range, \"2\", operands.length.toString(10));\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length)\r\n            compiler.currentType = typeArguments[0];\r\n          compiler.error(DiagnosticCode.Expected_0_type_arguments_but_got_1, reportNode.range, \"1\", typeArguments.length.toString(10));\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE);\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType);\r\n\r\n      switch (compiler.currentType.kind) {\r\n\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.BOOL:\r\n          ret = makeSmallIntegerWrap(module.createBinary(BinaryOp.RotlI32, arg0, arg1), compiler.currentType, module);\r\n\r\n        case TypeKind.I32:\r\n        case TypeKind.U32:\r\n          ret = module.createBinary(BinaryOp.RotlI32, arg0, arg1);\r\n          break;\r\n\r\n        case TypeKind.USIZE:\r\n          if (compiler.currentType.isReference) {\r\n            compiler.error(DiagnosticCode.Operation_not_supported, reportNode.range);\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        case TypeKind.ISIZE:\r\n          ret = module.createBinary(compiler.options.target == Target.WASM64 ? BinaryOp.RotlI64 : BinaryOp.RotlI32, arg0, arg1);\r\n          break;\r\n\r\n        case TypeKind.I64:\r\n        case TypeKind.U64:\r\n          ret = module.createBinary(BinaryOp.RotlI64, arg0, arg1);\r\n          break;\r\n\r\n        default:\r\n          compiler.error(DiagnosticCode.Operation_not_supported, reportNode.range);\r\n          ret = module.createUnreachable();\r\n          break;\r\n      }\r\n      return ret;\r\n\r\n    case \"rotr\": // rotr<T?>(value: T, shift: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length)\r\n            compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1)\r\n            compiler.error(DiagnosticCode.Expected_0_type_arguments_but_got_1, reportNode.range, \"1\", typeArguments.length.toString(10));\r\n        }\r\n        compiler.error(DiagnosticCode.Expected_0_arguments_but_got_1, reportNode.range, \"2\", operands.length.toString(10));\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length)\r\n            compiler.currentType = typeArguments[0];\r\n          compiler.error(DiagnosticCode.Expected_0_type_arguments_but_got_1, reportNode.range, \"1\", typeArguments.length.toString(10));\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE);\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType);\r\n\r\n      switch (compiler.currentType.kind) {\r\n\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.BOOL:\r\n          ret = makeSmallIntegerWrap(module.createBinary(BinaryOp.RotrI32, arg0, arg1), compiler.currentType, module);\r\n          break;\r\n\r\n        case TypeKind.I32:\r\n        case TypeKind.U32:\r\n          ret = module.createBinary(BinaryOp.RotrI32, arg0, arg1);\r\n          break;\r\n\r\n        case TypeKind.USIZE:\r\n          if (compiler.currentType.isReference) {\r\n            compiler.error(DiagnosticCode.Operation_not_supported, reportNode.range);\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        case TypeKind.ISIZE:\r\n          ret = module.createBinary(compiler.options.target == Target.WASM64 ? BinaryOp.RotrI64 : BinaryOp.RotrI32, arg0, arg1);\r\n          break;\r\n\r\n        case TypeKind.I64:\r\n        case TypeKind.U64:\r\n          ret = module.createBinary(BinaryOp.RotrI64, arg0, arg1);\r\n          break;\r\n\r\n        default:\r\n          compiler.error(DiagnosticCode.Operation_not_supported, reportNode.range);\r\n          ret = module.createUnreachable();\r\n          break;\r\n      }\r\n      return ret;\r\n\r\n    case \"abs\": // abs<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length)\r\n            compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1)\r\n            compiler.error(DiagnosticCode.Expected_0_type_arguments_but_got_1, reportNode.range, \"1\", typeArguments.length.toString(10));\r\n        }\r\n        compiler.error(DiagnosticCode.Expected_0_arguments_but_got_1, reportNode.range, \"1\", operands.length.toString(10));\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length)\r\n            compiler.currentType = typeArguments[0];\r\n          compiler.error(DiagnosticCode.Expected_0_type_arguments_but_got_1, reportNode.range, \"1\", typeArguments.length.toString(10));\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n\r\n      switch (compiler.currentType.kind) {\r\n\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n          // doesn't need sign-extension here because ifFalse below is either positive\r\n          // or MIN_VALUE (-MIN_VALUE == MIN_VALUE) if selected\r\n        case TypeKind.I32:\r\n          tempLocal0 = compiler.currentFunction.getAndFreeTempLocal(Type.i32);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createBinary(BinaryOp.SubI32, // ifFalse\r\n              module.createI32(0),\r\n              module.createGetLocal(tempLocal0.index, NativeType.I32)\r\n            ),\r\n            module.createBinary(BinaryOp.GtI32,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\r\n              module.createI32(0)\r\n            )\r\n          );\r\n          break;\r\n\r\n        case TypeKind.ISIZE:\r\n          tempLocal0 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createBinary(compiler.options.target == Target.WASM64 ? BinaryOp.SubI64 : BinaryOp.SubI32,\r\n              compiler.options.usizeType.toNativeZero(module),\r\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType)\r\n            ),\r\n            module.createBinary(compiler.options.target == Target.WASM64 ? BinaryOp.GtI64 : BinaryOp.GtI32,\r\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\r\n              compiler.options.usizeType.toNativeZero(module)\r\n            )\r\n          );\r\n          break;\r\n\r\n        case TypeKind.I64:\r\n          tempLocal0 = compiler.currentFunction.getAndFreeTempLocal(Type.i64);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createBinary(BinaryOp.SubI64,\r\n              module.createI64(0, 0),\r\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\r\n            ),\r\n            module.createBinary(BinaryOp.GtI64,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\r\n              module.createI64(0, 0)\r\n            )\r\n          );\r\n          break;\r\n\r\n        case TypeKind.USIZE:\r\n          if (compiler.currentType.isReference) {\r\n            compiler.error(DiagnosticCode.Operation_not_supported, reportNode.range);\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.U64:\r\n        case TypeKind.BOOL:\r\n          ret = arg0;\r\n          break;\r\n\r\n        case TypeKind.F32:\r\n          ret = module.createUnary(UnaryOp.AbsF32, arg0);\r\n          break;\r\n\r\n        case TypeKind.F64:\r\n          ret = module.createUnary(UnaryOp.AbsF64, arg0);\r\n          break;\r\n\r\n        case TypeKind.VOID:\r\n          ret = module.createUnreachable();\r\n          break;\r\n\r\n        default: // void\r\n          compiler.error(DiagnosticCode.Operation_not_supported, reportNode.range);\r\n          ret = module.createUnreachable();\r\n          break;\r\n      }\r\n      return ret;\r\n\r\n    case \"max\": // max<T?>(left: T, right: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length)\r\n            compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1)\r\n            compiler.error(DiagnosticCode.Expected_0_type_arguments_but_got_1, reportNode.range, \"1\", typeArguments.length.toString(10));\r\n        }\r\n        compiler.error(DiagnosticCode.Expected_0_arguments_but_got_1, reportNode.range, \"2\", operands.length.toString(10));\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length)\r\n            compiler.currentType = typeArguments[0];\r\n          compiler.error(DiagnosticCode.Expected_0_type_arguments_but_got_1, reportNode.range, \"1\", typeArguments.length.toString(10));\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType);\r\n\r\n      switch (compiler.currentType.kind) {\r\n\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32:\r\n          tempLocal0 = compiler.currentFunction.getTempLocal(Type.i32);\r\n          tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i32);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.GtI32,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\r\n            )\r\n          );\r\n          break;\r\n\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.BOOL:\r\n          tempLocal0 = compiler.currentFunction.getTempLocal(Type.i32);\r\n          tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i32);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.GtU32,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\r\n            )\r\n          );\r\n          break;\r\n\r\n        case TypeKind.I64:\r\n          tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64);\r\n          tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.GtI64,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\r\n            )\r\n          );\r\n          break;\r\n\r\n        case TypeKind.U64:\r\n          tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64);\r\n          tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.GtU64,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\r\n            )\r\n          );\r\n          break;\r\n\r\n        case TypeKind.ISIZE:\r\n          tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType);\r\n          tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(compiler.options.target == Target.WASM64 ? BinaryOp.GtI64 : BinaryOp.GtI32,\r\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\r\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\r\n            )\r\n          );\r\n          break;\r\n\r\n        case TypeKind.USIZE:\r\n          if (compiler.currentType.isReference) {\r\n            compiler.error(DiagnosticCode.Operation_not_supported, reportNode.range);\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType);\r\n          tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(compiler.options.target == Target.WASM64 ? BinaryOp.GtU64 : BinaryOp.GtU32,\r\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\r\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\r\n            )\r\n          );\r\n          break;\r\n\r\n        case TypeKind.F32:\r\n          ret = module.createBinary(BinaryOp.MaxF32, arg0, arg1);\r\n          break;\r\n\r\n        case TypeKind.F64:\r\n          ret = module.createBinary(BinaryOp.MaxF64, arg0, arg1);\r\n          break;\r\n\r\n        default: // void\r\n          compiler.error(DiagnosticCode.Operation_not_supported, reportNode.range);\r\n          ret = module.createUnreachable();\r\n          break;\r\n      }\r\n      return ret;\r\n\r\n    case \"min\": // min<T?>(left: T, right: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length)\r\n            compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1)\r\n            compiler.error(DiagnosticCode.Expected_0_type_arguments_but_got_1, reportNode.range, \"1\", typeArguments.length.toString(10));\r\n        }\r\n        compiler.error(DiagnosticCode.Expected_0_arguments_but_got_1, reportNode.range, \"2\", operands.length.toString(10));\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length)\r\n            compiler.currentType = typeArguments[0];\r\n          compiler.error(DiagnosticCode.Expected_0_type_arguments_but_got_1, reportNode.range, \"1\", typeArguments.length.toString(10));\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType);\r\n\r\n      switch (compiler.currentType.kind) {\r\n\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32:\r\n          tempLocal0 = compiler.currentFunction.getTempLocal(Type.i32);\r\n          tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i32);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.LtI32,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\r\n            )\r\n          );\r\n          break;\r\n\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.BOOL:\r\n          tempLocal0 = compiler.currentFunction.getTempLocal(Type.i32);\r\n          tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i32);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.LtU32,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\r\n            )\r\n          );\r\n          break;\r\n\r\n        case TypeKind.I64:\r\n          tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64);\r\n          tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.LtI64,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\r\n            )\r\n          );\r\n          break;\r\n\r\n        case TypeKind.U64:\r\n          tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64);\r\n          tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.LtU64,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\r\n            )\r\n          );\r\n          break;\r\n\r\n        case TypeKind.ISIZE:\r\n          tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType);\r\n          tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(compiler.options.target == Target.WASM64 ? BinaryOp.LtI64 : BinaryOp.LtI32,\r\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\r\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\r\n            )\r\n          );\r\n          break;\r\n\r\n        case TypeKind.USIZE:\r\n          if (compiler.currentType.isReference) {\r\n            compiler.error(DiagnosticCode.Operation_not_supported, reportNode.range);\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType);\r\n          tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(compiler.options.target == Target.WASM64 ? BinaryOp.LtU64 : BinaryOp.LtU32,\r\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\r\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\r\n            )\r\n          );\r\n          break;\r\n\r\n        case TypeKind.F32:\r\n          ret = module.createBinary(BinaryOp.MinF32, arg0, arg1);\r\n          break;\r\n\r\n        case TypeKind.F64:\r\n          ret = module.createBinary(BinaryOp.MinF64, arg0, arg1);\r\n          break;\r\n\r\n        default: // void\r\n          compiler.error(DiagnosticCode.Operation_not_supported, reportNode.range);\r\n          ret = module.createUnreachable();\r\n          break;\r\n      }\r\n      return ret;\r\n\r\n    case \"ceil\": // ceil<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length)\r\n            compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1)\r\n            compiler.error(DiagnosticCode.Expected_0_type_arguments_but_got_1, reportNode.range, \"1\", typeArguments.length.toString(10));\r\n        }\r\n        compiler.error(DiagnosticCode.Expected_0_arguments_but_got_1, reportNode.range, \"1\", operands.length.toString(10));\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length)\r\n            compiler.currentType = typeArguments[0];\r\n          compiler.error(DiagnosticCode.Expected_0_type_arguments_but_got_1, reportNode.range, \"1\", typeArguments.length.toString(10));\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n\r\n      switch (compiler.currentType.kind) {\r\n\r\n        case TypeKind.USIZE:\r\n          if (compiler.currentType.isReference) {\r\n            compiler.error(DiagnosticCode.Operation_not_supported, reportNode.range);\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        default: // any integer\r\n          ret = arg0;\r\n          break;\r\n\r\n        case TypeKind.F32:\r\n          ret = module.createUnary(UnaryOp.CeilF32, arg0);\r\n          break;\r\n\r\n        case TypeKind.F64:\r\n          ret = module.createUnary(UnaryOp.CeilF64, arg0);\r\n          break;\r\n\r\n        case TypeKind.VOID:\r\n          compiler.error(DiagnosticCode.Operation_not_supported, reportNode.range);\r\n          ret = module.createUnreachable();\r\n          break;\r\n      }\r\n      return ret;\r\n\r\n    case \"floor\": // floor<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length)\r\n            compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1)\r\n            compiler.error(DiagnosticCode.Expected_0_type_arguments_but_got_1, reportNode.range, \"1\", typeArguments.length.toString(10));\r\n        }\r\n        compiler.error(DiagnosticCode.Expected_0_arguments_but_got_1, reportNode.range, \"1\", operands.length.toString(10));\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length)\r\n            compiler.currentType = typeArguments[0];\r\n          compiler.error(DiagnosticCode.Expected_0_type_arguments_but_got_1, reportNode.range, \"1\", typeArguments.length.toString(10));\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n\r\n      switch (compiler.currentType.kind) {\r\n\r\n        case TypeKind.USIZE:\r\n          if (compiler.currentType.isReference) {\r\n            compiler.error(DiagnosticCode.Operation_not_supported, reportNode.range);\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        default: // any integer\r\n          ret = arg0;\r\n          break;\r\n\r\n        case TypeKind.F32:\r\n          ret = module.createUnary(UnaryOp.FloorF32, arg0);\r\n          break;\r\n\r\n        case TypeKind.F64:\r\n          ret = module.createUnary(UnaryOp.FloorF64, arg0);\r\n          break;\r\n\r\n        case TypeKind.VOID:\r\n          compiler.error(DiagnosticCode.Operation_not_supported, reportNode.range);\r\n          ret = module.createUnreachable();\r\n          break;\r\n      }\r\n      return ret;\r\n\r\n    case \"copysign\": // copysign<T?>(left: T, right: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length)\r\n            compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1)\r\n            compiler.error(DiagnosticCode.Expected_0_type_arguments_but_got_1, reportNode.range, \"1\", typeArguments.length.toString(10));\r\n        }\r\n        compiler.error(DiagnosticCode.Expected_0_arguments_but_got_1, reportNode.range, \"2\", operands.length.toString(10));\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length)\r\n            compiler.currentType = typeArguments[0];\r\n          compiler.error(DiagnosticCode.Expected_0_type_arguments_but_got_1, reportNode.range, \"1\", typeArguments.length.toString(10));\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType);\r\n\r\n      switch (compiler.currentType.kind) {\r\n\r\n        // TODO: does an integer version make sense?\r\n\r\n        case TypeKind.F32:\r\n          ret = module.createBinary(BinaryOp.CopysignF32, arg0, arg1);\r\n          break;\r\n\r\n        case TypeKind.F64:\r\n          ret = module.createBinary(BinaryOp.CopysignF64, arg0, arg1);\r\n          break;\r\n\r\n        default:\r\n          compiler.error(DiagnosticCode.Operation_not_supported, reportNode.range);\r\n          ret = module.createUnreachable();\r\n          break;\r\n      }\r\n      return ret;\r\n\r\n    case \"nearest\": // nearest<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length)\r\n            compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1)\r\n            compiler.error(DiagnosticCode.Expected_0_type_arguments_but_got_1, reportNode.range, \"1\", typeArguments.length.toString(10));\r\n        }\r\n        compiler.error(DiagnosticCode.Expected_0_arguments_but_got_1, reportNode.range, \"1\", operands.length.toString(10));\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length)\r\n            compiler.currentType = typeArguments[0];\r\n          compiler.error(DiagnosticCode.Expected_0_type_arguments_but_got_1, reportNode.range, \"1\", typeArguments.length.toString(10));\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n\r\n      switch (compiler.currentType.kind) {\r\n\r\n        case TypeKind.USIZE:\r\n          if (compiler.currentType.isReference) {\r\n            compiler.error(DiagnosticCode.Operation_not_supported, reportNode.range);\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        default: // any integer\r\n          ret = arg0;\r\n          break;\r\n\r\n        case TypeKind.F32:\r\n          ret = module.createUnary(UnaryOp.NearestF32, arg0);\r\n          break;\r\n\r\n        case TypeKind.F64:\r\n          ret = module.createUnary(UnaryOp.NearestF64, arg0);\r\n          break;\r\n\r\n        case TypeKind.VOID:\r\n          compiler.error(DiagnosticCode.Operation_not_supported, reportNode.range);\r\n          ret = module.createUnreachable();\r\n          break;\r\n      }\r\n      return ret;\r\n\r\n    case \"reinterpret\": // reinterpret<T!>(value: *) -> T\r\n      if (operands.length != 1) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          if (typeArguments && typeArguments.length)\r\n            compiler.currentType = typeArguments[0];\r\n          compiler.error(DiagnosticCode.Expected_0_type_arguments_but_got_1, reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\");\r\n        }\r\n        compiler.error(DiagnosticCode.Expected_0_arguments_but_got_1, reportNode.range, \"1\", operands.length.toString(10));\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        if (typeArguments && typeArguments.length)\r\n          compiler.currentType = typeArguments[0];\r\n        compiler.error(DiagnosticCode.Expected_0_type_arguments_but_got_1, reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\");\r\n        return module.createUnreachable();\r\n      }\r\n\r\n      switch (typeArguments[0].kind) {\r\n\r\n        case TypeKind.I32:\r\n        case TypeKind.U32:\r\n          arg0 = compiler.compileExpression(operands[0], Type.f32);\r\n          ret = module.createUnary(UnaryOp.ReinterpretF32, arg0);\r\n          break;\r\n\r\n        case TypeKind.I64:\r\n        case TypeKind.U64:\r\n          arg0 = compiler.compileExpression(operands[0], Type.f64);\r\n          ret = module.createUnary(UnaryOp.ReinterpretF64, arg0);\r\n          break;\r\n\r\n        case TypeKind.USIZE:\r\n          if (typeArguments[0].isReference) {\r\n            compiler.error(DiagnosticCode.Operation_not_supported, reportNode.range);\r\n            compiler.currentType = typeArguments[0];\r\n            return module.createUnreachable();\r\n          }\r\n          // fall-through\r\n        case TypeKind.ISIZE:\r\n          arg0 = compiler.compileExpression(operands[0], compiler.options.target == Target.WASM64 ? Type.f64 : Type.f32);\r\n          ret = module.createUnary(compiler.options.target == Target.WASM64 ? UnaryOp.ReinterpretF64 : UnaryOp.ReinterpretF32, arg0);\r\n          break;\r\n\r\n        case TypeKind.F32:\r\n          arg0 = compiler.compileExpression(operands[0], Type.u32);\r\n          ret = module.createUnary(UnaryOp.ReinterpretI32, arg0);\r\n          break;\r\n\r\n        case TypeKind.F64:\r\n          arg0 = compiler.compileExpression(operands[0], Type.u64);\r\n          ret = module.createUnary(UnaryOp.ReinterpretI64, arg0);\r\n          break;\r\n\r\n        default: // small integers and void\r\n          compiler.error(DiagnosticCode.Operation_not_supported, reportNode.range);\r\n          ret = module.createUnreachable();\r\n          break;\r\n      }\r\n      compiler.currentType = typeArguments[0];\r\n      return ret;\r\n\r\n    case \"sqrt\": // sqrt<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length)\r\n            compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1)\r\n            compiler.error(DiagnosticCode.Expected_0_type_arguments_but_got_1, reportNode.range, \"1\", typeArguments.length.toString(10));\r\n        }\r\n        compiler.error(DiagnosticCode.Expected_0_arguments_but_got_1, reportNode.range, \"1\", operands.length.toString(10));\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length)\r\n            compiler.currentType = typeArguments[0];\r\n          compiler.error(DiagnosticCode.Expected_0_type_arguments_but_got_1, reportNode.range, \"1\", typeArguments.length.toString(10));\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n\r\n      switch (compiler.currentType.kind) {\r\n\r\n        // TODO: integer versions (that return f64 or convert)?\r\n\r\n        case TypeKind.F32:\r\n          ret = module.createUnary(UnaryOp.SqrtF32, arg0);\r\n          break;\r\n\r\n        case TypeKind.F64:\r\n          ret = module.createUnary(UnaryOp.SqrtF64, arg0);\r\n          break;\r\n\r\n        default:\r\n        // case TypeKind.VOID:\r\n          compiler.error(DiagnosticCode.Operation_not_supported, reportNode.range);\r\n          ret = module.createUnreachable();\r\n          break;\r\n      }\r\n      return ret;\r\n\r\n    case \"trunc\": // trunc<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length)\r\n            compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1)\r\n            compiler.error(DiagnosticCode.Expected_0_type_arguments_but_got_1, reportNode.range, \"1\", typeArguments.length.toString(10));\r\n        }\r\n        compiler.error(DiagnosticCode.Expected_0_arguments_but_got_1, reportNode.range, \"1\", operands.length.toString(10));\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments && typeArguments.length) {\r\n        compiler.currentType = typeArguments[0];\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length)\r\n            compiler.currentType = typeArguments[0];\r\n          compiler.error(DiagnosticCode.Expected_0_type_arguments_but_got_1, reportNode.range, \"1\", typeArguments.length.toString(10));\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n\r\n      switch (compiler.currentType.kind) {\r\n\r\n        case TypeKind.USIZE:\r\n          if (compiler.currentType.isReference) {\r\n            compiler.error(DiagnosticCode.Operation_not_supported, reportNode.range);\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        default: // any integer\r\n          ret = arg0;\r\n          break;\r\n\r\n        // TODO: truncate to contextual type directly (if not void etc.)?\r\n\r\n        case TypeKind.F32:\r\n          ret = module.createUnary(UnaryOp.TruncF32, arg0);\r\n          break;\r\n\r\n        case TypeKind.F64:\r\n          ret = module.createUnary(UnaryOp.TruncF64, arg0);\r\n          break;\r\n\r\n        case TypeKind.VOID:\r\n          compiler.error(DiagnosticCode.Operation_not_supported, reportNode.range);\r\n          ret = module.createUnreachable();\r\n          break;\r\n      }\r\n      return ret;\r\n\r\n    // memory access\r\n\r\n    case \"load\": // load<T!>(offset: usize, constantOffset?: usize) -> *\r\n      if (operands.length < 1 || operands.length > 2) {\r\n        if (!(typeArguments && typeArguments.length == 1))\r\n          compiler.error(DiagnosticCode.Expected_0_type_arguments_but_got_1, reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\");\r\n        if (operands.length < 1)\r\n          compiler.error(DiagnosticCode.Expected_at_least_0_arguments_but_got_1, reportNode.range, \"1\", operands.length.toString(10));\r\n        else\r\n          compiler.error(DiagnosticCode.Expected_0_arguments_but_got_1, reportNode.range, \"2\", operands.length.toString(10));\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        if (typeArguments && typeArguments.length)\r\n          compiler.currentType = typeArguments[0];\r\n        compiler.error(DiagnosticCode.Expected_0_type_arguments_but_got_1, reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\");\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType);\r\n      offset = operands.length == 2 ? evaluateConstantOffset(compiler, operands[1]) : 0; // reports\r\n      if (offset < 0)\r\n        return module.createUnreachable();\r\n      return module.createLoad(typeArguments[0].byteSize, typeArguments[0].is(TypeFlags.SIGNED | TypeFlags.INTEGER), arg0,\r\n        typeArguments[0].is(TypeFlags.INTEGER) && contextualType.is(TypeFlags.INTEGER) && contextualType.size >= typeArguments[0].size\r\n          ? (compiler.currentType = contextualType).toNativeType()\r\n          : (compiler.currentType = typeArguments[0]).toNativeType()\r\n      , offset);\r\n\r\n    case \"store\": // store<T!>(offset: usize, value: *, constantOffset?: usize) -> void\r\n      compiler.currentType = Type.void;\r\n      if (operands.length < 2 || operands.length > 3) {\r\n        if (!(typeArguments && typeArguments.length == 1))\r\n          compiler.error(DiagnosticCode.Expected_0_type_arguments_but_got_1, reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\");\r\n        if (operands.length < 2)\r\n          compiler.error(DiagnosticCode.Expected_at_least_0_arguments_but_got_1, reportNode.range, \"2\", operands.length.toString(10));\r\n        else\r\n          compiler.error(DiagnosticCode.Expected_0_arguments_but_got_1, reportNode.range, \"3\", operands.length.toString(10));\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(DiagnosticCode.Expected_0_type_arguments_but_got_1, reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\");\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType);\r\n      arg1 = compiler.compileExpression(operands[1], typeArguments[0],\r\n        typeArguments[0].is(TypeFlags.INTEGER)\r\n          ? ConversionKind.NONE // wraps a larger integer type to a smaller one, i.e. i32.store8\r\n          : ConversionKind.IMPLICIT\r\n      );\r\n      if (compiler.currentType.is(TypeFlags.INTEGER) && typeArguments[0].is(TypeFlags.INTEGER) && typeArguments[0].size > compiler.currentType.size) {\r\n        arg1 = compiler.convertExpression(arg1, compiler.currentType, typeArguments[0], ConversionKind.IMPLICIT, operands[1]);\r\n        type = typeArguments[0];\r\n      } else\r\n        type = compiler.currentType;\r\n      offset = operands.length == 3 ? evaluateConstantOffset(compiler, operands[2]) : 0; // reports\r\n      if (offset < 0)\r\n        return module.createUnreachable();\r\n      compiler.currentType = Type.void;\r\n      return module.createStore(typeArguments[0].byteSize, arg0, arg1, type.toNativeType(), offset);\r\n\r\n    case \"sizeof\": // sizeof<T!>() -> usize\r\n      compiler.currentType = compiler.options.usizeType;\r\n      if (operands.length != 0) {\r\n        if (!(typeArguments && typeArguments.length == 1))\r\n          compiler.error(DiagnosticCode.Expected_0_type_arguments_but_got_1, reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\");\r\n        compiler.error(DiagnosticCode.Expected_0_arguments_but_got_1, reportNode.range, \"0\", operands.length.toString(10));\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          compiler.error(DiagnosticCode.Expected_0_type_arguments_but_got_1, reportNode.range, \"1\", typeArguments.length.toString(10));\r\n          return module.createUnreachable();\r\n        }\r\n        ret = compiler.options.isWasm64 ? module.createI64(typeArguments[0].byteSize, 0) : module.createI32(typeArguments[0].byteSize);\r\n      } else {\r\n        compiler.error(DiagnosticCode.Expected_0_type_arguments_but_got_1, reportNode.range, \"1\", \"0\");\r\n        return module.createUnreachable();\r\n      }\r\n      return ret;\r\n\r\n    // control flow\r\n\r\n    case \"select\": // select<T?>(ifTrue: T, ifFalse: T, condition: bool) -> T\r\n      if (operands.length != 3) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length)\r\n            compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1)\r\n            compiler.error(DiagnosticCode.Expected_0_type_arguments_but_got_1, reportNode.range, \"1\", typeArguments.length.toString(10));\r\n        }\r\n        compiler.error(DiagnosticCode.Expected_0_arguments_but_got_1, reportNode.range, \"3\", operands.length.toString(10));\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length)\r\n            compiler.currentType = typeArguments[0];\r\n          compiler.error(DiagnosticCode.Expected_0_type_arguments_but_got_1, reportNode.range, \"1\", typeArguments.length.toString(10));\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE);\r\n      arg1 = compiler.compileExpression(operands[1], type = compiler.currentType);\r\n      arg2 = compiler.compileExpression(operands[2], Type.bool);\r\n      compiler.currentType = type;\r\n\r\n      switch (compiler.currentType.kind) {\r\n\r\n        default: // any value type\r\n          ret = module.createSelect(arg0, arg1, arg2);\r\n          break;\r\n\r\n        case TypeKind.VOID:\r\n          compiler.error(DiagnosticCode.Operation_not_supported, reportNode.range);\r\n          ret = module.createUnreachable();\r\n          break;\r\n      }\r\n      return ret;\r\n\r\n    case \"unreachable\": // unreachable() -> *\r\n      if (operands.length != 0)\r\n        compiler.error(DiagnosticCode.Expected_0_arguments_but_got_1, reportNode.range, \"0\", operands.length.toString(10));\r\n      if (typeArguments)\r\n        compiler.error(DiagnosticCode.Type_0_is_not_generic, reportNode.range, prototype.internalName);\r\n      return module.createUnreachable();\r\n\r\n    // host operations\r\n\r\n    case \"current_memory\": // current_memory() -> i32\r\n      compiler.currentType = Type.i32;\r\n      if (operands.length != 0)\r\n        compiler.error(DiagnosticCode.Expected_0_arguments_but_got_1, reportNode.range, \"0\", operands.length.toString(10));\r\n      if (typeArguments)\r\n        compiler.error(DiagnosticCode.Type_0_is_not_generic, reportNode.range, prototype.internalName);\r\n      return module.createHost(HostOp.CurrentMemory);\r\n\r\n    case \"grow_memory\": // grow_memory(pages: i32) -> i32\r\n      compiler.currentType = Type.i32;\r\n      if (operands.length != 1) {\r\n        compiler.error(DiagnosticCode.Expected_0_arguments_but_got_1, reportNode.range, \"0\", operands.length.toString(10));\r\n        arg0 = module.createUnreachable();\r\n      } else\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32);\r\n      if (typeArguments)\r\n        compiler.error(DiagnosticCode.Type_0_is_not_generic, reportNode.range, prototype.internalName);\r\n      return module.createHost(HostOp.GrowMemory, null, [ arg0 ]);\r\n\r\n    // see: https://github.com/WebAssembly/bulk-memory-operations/blob/master/proposals/bulk-memory-operations/Overview.md\r\n    case \"move_memory\": // move_memory(dest: usize, src: usize: n: usize) -> void\r\n      if (typeArguments)\r\n        compiler.error(DiagnosticCode.Type_0_is_not_generic, reportNode.range, prototype.internalName);\r\n      if (operands.length != 3) {\r\n        compiler.error(DiagnosticCode.Expected_0_arguments_but_got_1, reportNode.range, \"3\", operands.length.toString(10));\r\n        compiler.currentType = Type.void;\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType);\r\n      arg1 = compiler.compileExpression(operands[1], compiler.options.usizeType);\r\n      arg2 = compiler.compileExpression(operands[2], compiler.options.usizeType);\r\n      compiler.currentType = Type.void;\r\n      throw new Error(\"not implemented\");\r\n      // return module.createHost(HostOp.MoveMemory, null, [ arg0, arg1, arg2 ]);\r\n\r\n    case \"set_memory\": // set_memory(dest: usize, value: u32, n: usize) -> void\r\n      if (typeArguments)\r\n        compiler.error(DiagnosticCode.Type_0_is_not_generic, reportNode.range, prototype.internalName);\r\n      if (operands.length != 3) {\r\n        compiler.error(DiagnosticCode.Expected_0_arguments_but_got_1, reportNode.range, \"3\", operands.length.toString(10));\r\n        compiler.currentType = Type.void;\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType);\r\n      arg1 = compiler.compileExpression(operands[1], Type.u32);\r\n      arg2 = compiler.compileExpression(operands[2], compiler.options.usizeType);\r\n      compiler.currentType = Type.void;\r\n      throw new Error(\"not implemented\");\r\n      // return module.createHost(HostOp.SetMemory, null, [ arg0, arg1, arg2 ]);\r\n\r\n    // other\r\n\r\n    case \"changetype\": // changetype<T!>(value: *) -> T\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        if (typeArguments && typeArguments.length)\r\n          compiler.currentType = typeArguments[0];\r\n        compiler.error(DiagnosticCode.Expected_0_type_arguments_but_got_1, reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\");\r\n        return module.createUnreachable();\r\n      } else if (typeArguments[0].kind != TypeKind.USIZE) { // any usize\r\n        compiler.error(DiagnosticCode.Operation_not_supported, reportNode.range);\r\n        compiler.currentType = typeArguments[0];\r\n        return module.createUnreachable();\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(DiagnosticCode.Expected_0_arguments_but_got_1, reportNode.range, \"1\", operands.length.toString(10));\r\n        compiler.currentType = typeArguments[0];\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, ConversionKind.NONE);\r\n      compiler.currentType = typeArguments[0];\r\n      if (compiler.currentType.kind != TypeKind.USIZE) {\r\n        compiler.error(DiagnosticCode.Operation_not_supported, reportNode.range);\r\n        return module.createUnreachable();\r\n      }\r\n      // if (reportNode.range.source.sourceKind != SourceKind.STDLIB)\r\n      //  compiler.warning(DiagnosticCode.Operation_is_unsafe, reportNode.range);\r\n      return arg0; // any usize to any usize\r\n\r\n    case \"assert\": // assert<T?>(isTrueish: T, message?: string) -> T with T != null (see also assembly.d.ts)\r\n      if (operands.length < 1 || operands.length > 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length)\r\n            compiler.currentType = typeArguments[0].nonNullableType;\r\n          if (typeArguments.length != 1)\r\n            compiler.error(DiagnosticCode.Expected_0_type_arguments_but_got_1, reportNode.range, \"1\", typeArguments.length.toString(10));\r\n        }\r\n        if (operands.length < 1)\r\n          compiler.error(DiagnosticCode.Expected_at_least_0_arguments_but_got_1, reportNode.range, \"1\", operands.length.toString(10));\r\n        else if (operands.length > 2)\r\n          compiler.error(DiagnosticCode.Expected_0_arguments_but_got_1, reportNode.range, \"2\", operands.length.toString(10));\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length)\r\n          compiler.currentType = typeArguments[0].nonNullableType;\r\n        if (typeArguments.length != 1) {\r\n          compiler.error(DiagnosticCode.Expected_0_type_arguments_but_got_1, reportNode.range, \"1\", typeArguments.length.toString(10));\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE);\r\n\r\n      type = compiler.currentType;\r\n      compiler.currentType = type.nonNullableType;\r\n\r\n      // just return ifTrueish if assertions are disabled, or simplify if dropped anyway\r\n      if (compiler.options.noAssert) {\r\n        if (contextualType == Type.void) {\r\n          compiler.currentType = Type.void;\r\n          return module.createNop();\r\n        }\r\n        return arg0;\r\n      }\r\n\r\n      var abort = compileAbort(compiler, operands.length == 2 ? operands[1] : null, reportNode);\r\n\r\n      compiler.currentType = type.nonNullableType;\r\n\r\n      if (contextualType == Type.void) { // simplify if dropped anyway\r\n        switch (compiler.currentType.kind) {\r\n\r\n          default: // any integer up to 32-bits incl. bool\r\n            ret = module.createIf(\r\n              module.createUnary(UnaryOp.EqzI32,\r\n                arg0\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n\r\n          case TypeKind.I64:\r\n          case TypeKind.U64:\r\n            ret = module.createIf(\r\n              module.createUnary(UnaryOp.EqzI64,\r\n                arg0\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n\r\n          case TypeKind.ISIZE:\r\n          case TypeKind.USIZE:\r\n            ret = module.createIf(\r\n              module.createUnary(compiler.options.target == Target.WASM64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\r\n                arg0\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n\r\n          // TODO: also check for NaN in float assertions, as in `Boolean(NaN) -> false`?\r\n\r\n          case TypeKind.F32:\r\n            ret = module.createIf(\r\n              module.createBinary(BinaryOp.EqF32,\r\n                arg0,\r\n                module.createF32(0)\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n\r\n          case TypeKind.F64:\r\n            ret = module.createIf(\r\n              module.createBinary(BinaryOp.EqF64,\r\n                arg0,\r\n                module.createF64(0)\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n\r\n          case TypeKind.VOID:\r\n            compiler.error(DiagnosticCode.Operation_not_supported, reportNode.range);\r\n            ret = abort;\r\n            break;\r\n        }\r\n        compiler.currentType = Type.void;\r\n      } else {\r\n        switch (compiler.currentType.kind) {\r\n\r\n          default: // any integer up to 32-bits incl. bool\r\n            tempLocal0 = compiler.currentFunction.getAndFreeTempLocal(Type.i32);\r\n            ret = module.createIf(\r\n              module.createUnary(UnaryOp.EqzI32,\r\n                module.createTeeLocal(tempLocal0.index, arg0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I32)\r\n            );\r\n            break;\r\n\r\n          case TypeKind.I64:\r\n          case TypeKind.U64:\r\n            tempLocal0 = compiler.currentFunction.getAndFreeTempLocal(Type.i64);\r\n            ret = module.createIf(\r\n              module.createUnary(UnaryOp.EqzI64,\r\n                module.createTeeLocal(tempLocal0.index, arg0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I64)\r\n            );\r\n            break;\r\n\r\n          case TypeKind.ISIZE:\r\n          case TypeKind.USIZE:\r\n            tempLocal0 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType);\r\n            ret = module.createIf(\r\n              module.createUnary(compiler.options.target == Target.WASM64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\r\n                module.createTeeLocal(tempLocal0.index, arg0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType)\r\n            );\r\n            break;\r\n\r\n          case TypeKind.F32:\r\n            tempLocal0 = compiler.currentFunction.getAndFreeTempLocal(Type.f32);\r\n            ret = module.createIf(\r\n              module.createBinary(BinaryOp.EqF32,\r\n                module.createTeeLocal(tempLocal0.index, arg0),\r\n                module.createF32(0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal0.index, NativeType.F32)\r\n            );\r\n            break;\r\n\r\n          case TypeKind.F64:\r\n            tempLocal0 = compiler.currentFunction.getAndFreeTempLocal(Type.f64);\r\n            ret = module.createIf(\r\n              module.createBinary(BinaryOp.EqF64,\r\n                module.createTeeLocal(tempLocal0.index, arg0),\r\n                module.createF64(0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal0.index, NativeType.F64)\r\n            );\r\n            break;\r\n\r\n          case TypeKind.VOID:\r\n            compiler.error(DiagnosticCode.Operation_not_supported, reportNode.range);\r\n            ret = abort;\r\n            break;\r\n        }\r\n      }\r\n      return ret;\r\n\r\n    // conversions\r\n\r\n    case \"i8\":\r\n      if (typeArguments)\r\n        compiler.error(DiagnosticCode.Type_0_is_not_generic, reportNode.range, prototype.internalName);\r\n      if (operands.length != 1) {\r\n        compiler.error(DiagnosticCode.Expected_0_arguments_but_got_1, reportNode.range, \"1\", operands.length.toString(10));\r\n        compiler.currentType = Type.i8;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.i8, ConversionKind.EXPLICIT);\r\n\r\n    case \"i16\":\r\n      if (typeArguments)\r\n        compiler.error(DiagnosticCode.Type_0_is_not_generic, reportNode.range, prototype.internalName);\r\n      if (operands.length != 1) {\r\n        compiler.error(DiagnosticCode.Expected_0_arguments_but_got_1, reportNode.range, \"1\", operands.length.toString(10));\r\n        compiler.currentType = Type.i16;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.i16, ConversionKind.EXPLICIT);\r\n\r\n    case \"i32\":\r\n      if (typeArguments)\r\n        compiler.error(DiagnosticCode.Type_0_is_not_generic, reportNode.range, prototype.internalName);\r\n      if (operands.length != 1) {\r\n        compiler.error(DiagnosticCode.Expected_0_arguments_but_got_1, reportNode.range, \"1\", operands.length.toString(10));\r\n        compiler.currentType = Type.i32;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.i32, ConversionKind.EXPLICIT);\r\n\r\n    case \"i64\":\r\n      if (typeArguments)\r\n        compiler.error(DiagnosticCode.Type_0_is_not_generic, reportNode.range, prototype.internalName);\r\n      if (operands.length != 1) {\r\n        compiler.error(DiagnosticCode.Expected_0_arguments_but_got_1, reportNode.range, \"1\", operands.length.toString(10));\r\n        compiler.currentType = Type.i64;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.i64, ConversionKind.EXPLICIT);\r\n\r\n    case \"isize\":\r\n      if (typeArguments)\r\n        compiler.error(DiagnosticCode.Type_0_is_not_generic, reportNode.range, prototype.internalName);\r\n      if (operands.length != 1) {\r\n        compiler.error(DiagnosticCode.Expected_0_arguments_but_got_1, reportNode.range, \"1\", operands.length.toString(10));\r\n        compiler.currentType = compiler.options.target == Target.WASM64 ? Type.isize64 : Type.isize32;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], compiler.options.target == Target.WASM64 ? Type.isize64 : Type.isize32, ConversionKind.EXPLICIT);\r\n\r\n    case \"u8\":\r\n      if (typeArguments)\r\n        compiler.error(DiagnosticCode.Type_0_is_not_generic, reportNode.range, prototype.internalName);\r\n      if (operands.length != 1) {\r\n        compiler.error(DiagnosticCode.Expected_0_arguments_but_got_1, reportNode.range, \"1\", operands.length.toString(10));\r\n        compiler.currentType = Type.u8;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.u8, ConversionKind.EXPLICIT);\r\n\r\n    case \"u16\":\r\n      if (typeArguments)\r\n        compiler.error(DiagnosticCode.Type_0_is_not_generic, reportNode.range, prototype.internalName);\r\n      if (operands.length != 1) {\r\n        compiler.error(DiagnosticCode.Expected_0_arguments_but_got_1, reportNode.range, \"1\", operands.length.toString(10));\r\n        compiler.currentType = Type.u16;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.u16, ConversionKind.EXPLICIT);\r\n\r\n    case \"u32\":\r\n      if (typeArguments)\r\n        compiler.error(DiagnosticCode.Type_0_is_not_generic, reportNode.range, prototype.internalName);\r\n      if (operands.length != 1) {\r\n        compiler.error(DiagnosticCode.Expected_0_arguments_but_got_1, reportNode.range, \"1\", operands.length.toString(10));\r\n        compiler.currentType = Type.u32;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.u32, ConversionKind.EXPLICIT);\r\n\r\n    case \"u64\":\r\n      if (typeArguments)\r\n        compiler.error(DiagnosticCode.Type_0_is_not_generic, reportNode.range, prototype.internalName);\r\n      if (operands.length != 1) {\r\n        compiler.error(DiagnosticCode.Expected_0_arguments_but_got_1, reportNode.range, \"1\", operands.length.toString(10));\r\n        compiler.currentType = Type.u64;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.u64, ConversionKind.EXPLICIT);\r\n\r\n    case \"usize\":\r\n      if (typeArguments)\r\n        compiler.error(DiagnosticCode.Type_0_is_not_generic, reportNode.range, prototype.internalName);\r\n      if (operands.length != 1) {\r\n        compiler.error(DiagnosticCode.Expected_0_arguments_but_got_1, reportNode.range, \"1\", operands.length.toString(10));\r\n        compiler.currentType = compiler.options.usizeType;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], compiler.options.usizeType, ConversionKind.EXPLICIT);\r\n\r\n    case \"bool\":\r\n      if (typeArguments)\r\n        compiler.error(DiagnosticCode.Type_0_is_not_generic, reportNode.range, prototype.internalName);\r\n      if (operands.length != 1) {\r\n        compiler.error(DiagnosticCode.Expected_0_arguments_but_got_1, reportNode.range, \"1\", operands.length.toString(10));\r\n        compiler.currentType = Type.bool;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.bool, ConversionKind.EXPLICIT);\r\n\r\n    case \"f32\":\r\n      if (typeArguments)\r\n        compiler.error(DiagnosticCode.Type_0_is_not_generic, reportNode.range, prototype.internalName);\r\n      if (operands.length != 1) {\r\n        compiler.error(DiagnosticCode.Expected_0_arguments_but_got_1, reportNode.range, \"1\", operands.length.toString(10));\r\n        compiler.currentType = Type.f32;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.f32, ConversionKind.EXPLICIT);\r\n\r\n    case \"f64\":\r\n      if (typeArguments)\r\n        compiler.error(DiagnosticCode.Type_0_is_not_generic, reportNode.range, prototype.internalName);\r\n      if (operands.length != 1) {\r\n        compiler.error(DiagnosticCode.Expected_0_arguments_but_got_1, reportNode.range, \"1\", operands.length.toString(10));\r\n        compiler.currentType = Type.f64;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.f64, ConversionKind.EXPLICIT);\r\n  }\r\n  compiler.error(DiagnosticCode.Operation_not_supported, reportNode.range);\r\n  return module.createUnreachable();\r\n}\r\n\r\nfunction evaluateConstantOffset(compiler: Compiler, expression: Expression): i32 {\r\n  var expr: ExpressionRef;\r\n  var value: i32;\r\n  if (compiler.options.target == Target.WASM64) {\r\n    expr = compiler.precomputeExpression(expression, Type.i64);\r\n    if (\r\n      _BinaryenExpressionGetId(expr) != ExpressionId.Const ||\r\n      _BinaryenExpressionGetType(expr) != NativeType.I64 ||\r\n      _BinaryenConstGetValueI64High(expr) != 0 ||\r\n      (value = _BinaryenConstGetValueI64Low(expr)) < 0\r\n    ) {\r\n      compiler.error(DiagnosticCode.Operation_not_supported, expression.range);\r\n      value = -1;\r\n    }\r\n  } else {\r\n    expr = compiler.precomputeExpression(expression, Type.i32);\r\n    if (\r\n      _BinaryenExpressionGetId(expr) != ExpressionId.Const ||\r\n      _BinaryenExpressionGetType(expr) != NativeType.I32 ||\r\n      (value = _BinaryenConstGetValueI32(expr)) < 0\r\n    ) {\r\n      compiler.error(DiagnosticCode.Operation_not_supported, expression.range);\r\n      value = -1;\r\n    }\r\n  }\r\n  return value;\r\n}\r\n\r\n/** Compiles a memory allocation for an instance of the specified class. */\r\nexport function compileAllocate(compiler: Compiler, cls: Class, reportNode: Node): ExpressionRef {\r\n  var program = cls.program;\r\n  var prototype = program.elements.get(compiler.options.allocateImpl);\r\n  if (prototype) {\r\n    if (prototype.kind == ElementKind.FUNCTION_PROTOTYPE) {\r\n      var instance = (<FunctionPrototype>prototype).resolve(); // reports\r\n      if (instance) {\r\n        if (!instance.is(ElementFlags.GENERIC) && instance.returnType == compiler.options.usizeType && instance.parameters.length == 1 && instance.parameters[0].type == compiler.options.usizeType) {\r\n          if (compiler.compileFunction(instance)) // reports\r\n            return compiler.makeCall(instance, [\r\n              compiler.options.isWasm64\r\n                ? compiler.module.createI64(cls.currentMemoryOffset)\r\n                : compiler.module.createI32(cls.currentMemoryOffset)\r\n            ]);\r\n        } else\r\n          program.error(DiagnosticCode.Implementation_0_must_match_the_signature_1, reportNode.range, compiler.options.allocateImpl, \"(size: usize): usize\");\r\n      }\r\n    } else\r\n      program.error(DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures, reportNode.range, prototype.internalName);\r\n  } else\r\n    program.error(DiagnosticCode.Cannot_find_name_0, reportNode.range, compiler.options.allocateImpl);\r\n  return compiler.module.createUnreachable();\r\n}\r\n\r\n/** Compiles an abort wired to the conditionally imported 'abort' function. */\r\nexport function compileAbort(compiler: Compiler, message: Expression | null, reportNode: Node): ExpressionRef {\r\n  var module = compiler.module;\r\n\r\n  var abort: ExpressionRef = module.createUnreachable();\r\n  var abortPrototype = compiler.program.elements.get(\"abort\");\r\n  var stringType = compiler.program.types.get(\"string\");\r\n  if (abortPrototype && abortPrototype.kind == ElementKind.FUNCTION_PROTOTYPE && stringType) {\r\n    var abortInstance = (<FunctionPrototype>abortPrototype).resolve();\r\n    if (abortInstance && compiler.compileFunction(abortInstance)) { // reports\r\n      assert(abortInstance.parameters.length == 4); // to be sure\r\n      abort = module.createBlock(null, [\r\n        compiler.makeCall(abortInstance, [\r\n          message != null\r\n            ? compiler.compileExpression(message, stringType)\r\n            : compiler.options.usizeType.toNativeZero(module),\r\n          compiler.compileStaticString(reportNode.range.source.normalizedPath),\r\n          module.createI32(reportNode.range.line),\r\n          module.createI32(reportNode.range.column)\r\n        ]),\r\n        abort\r\n      ]);\r\n    }\r\n  }\r\n  return abort;\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/builtins.ts","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/long/src/long.js\n// module id = 16\n// module chunks = 0","//////////////////////// Low-level C-Like Compiler API /////////////////////////\r\n\r\nimport {\r\n  Compiler,\r\n  Options,\r\n  Target\r\n} from \"./compiler\";\r\n\r\nimport {\r\n  Decompiler\r\n} from \"./decompiler\";\r\n\r\nimport {\r\n  DiagnosticMessage,\r\n  DiagnosticCategory,\r\n  formatDiagnosticMessage\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Module\r\n} from \"./module\";\r\n\r\nimport {\r\n  Parser\r\n} from \"./parser\";\r\n\r\n/** Parses a source file. If `parser` has been omitted a new one is created. */\r\nexport function parseFile(text: string, path: string, isEntry: bool = false,\r\n  parser: Parser | null = null\r\n): Parser {\r\n  if (!parser) {\r\n    parser = new Parser();\r\n    isEntry = true;\r\n  }\r\n  parser.parseFile(text, path, isEntry);\r\n  return parser;\r\n}\r\n\r\n/** Obtains the next required file's path. Returns `null` once complete. */\r\nexport function nextFile(parser: Parser): string | null {\r\n  return parser.nextFile();\r\n}\r\n\r\n/** Obtains the next diagnostic message. Returns `null` once complete. */\r\nexport function nextDiagnostic(parser: Parser): DiagnosticMessage | null {\r\n  var program = parser.program;\r\n  return program.diagnosticsOffset < program.diagnostics.length\r\n    ? program.diagnostics[program.diagnosticsOffset++]\r\n    : null;\r\n}\r\n\r\n/** Formats a diagnostic message to a string. */\r\nexport { formatDiagnosticMessage as formatDiagnostic };\r\n\r\n/** Tests whether a diagnostic is informatory. */\r\nexport function isInfo(message: DiagnosticMessage): bool {\r\n  return message.category == DiagnosticCategory.INFO;\r\n}\r\n\r\n/** Tests whether a diagnostic is a warning. */\r\nexport function isWarning(message: DiagnosticMessage): bool {\r\n  return message.category == DiagnosticCategory.WARNING;\r\n}\r\n\r\n/** Tests whether a diagnostic is an error. */\r\nexport function isError(message: DiagnosticMessage): bool {\r\n  return message.category == DiagnosticCategory.ERROR;\r\n}\r\n\r\n/** Creates a new set of compiler options. */\r\nexport function createOptions(): Options {\r\n  return new Options();\r\n}\r\n\r\n/** Sets the `target` option. */\r\nexport function setTarget(options: Options, target: Target): void {\r\n  options.target = target;\r\n}\r\n\r\n/** Sets the `noTreeShaking` option. */\r\nexport function setNoTreeShaking(options: Options, noTreeShaking: bool): void {\r\n  options.noTreeShaking = noTreeShaking;\r\n}\r\n\r\n/** Sets the `noAssert` option. */\r\nexport function setNoAssert(options: Options, noAssert: bool): void {\r\n  options.noAssert = noAssert;\r\n}\r\n\r\n/** Sets the `noMemory` option. */\r\nexport function setNoMemory(options: Options, noMemory: bool): void {\r\n  options.noMemory = noMemory;\r\n}\r\n\r\n/** Sets the `sourceMap` option. */\r\nexport function setSourceMap(options: Options, sourceMap: bool): void {\r\n  options.sourceMap = sourceMap;\r\n}\r\n\r\n/** Compiles the sources computed by the parser to a module. */\r\nexport function compile(parser: Parser, options: Options | null = null): Module {\r\n  var program = parser.finish();\r\n  var compiler = new Compiler(program, options);\r\n  return compiler.compile();\r\n}\r\n\r\n/** Decompiles a module to its (low level) source. */\r\nexport function decompile(module: Module): string {\r\n  var decompiler = new Decompiler();\r\n  decompiler.decompile(module);\r\n  return decompiler.finish();\r\n}\r\n\r\n/** Prefix indicating a library file. */\r\nexport { LIBRARY_PREFIX } from \"./program\";\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.ts","import {\r\n  Module,\r\n  NativeType,\r\n  ExpressionId,\r\n  UnaryOp,\r\n  BinaryOp,\r\n  HostOp,\r\n  FunctionRef,\r\n  ExpressionRef,\r\n  Index,\r\n  readString\r\n} from \"./module\";\r\n\r\n// TODO :-)\r\n\r\nexport class Decompiler {\r\n\r\n  static decompile(module: Module): string {\r\n    var decompiler = new Decompiler();\r\n    decompiler.decompile(module);\r\n    return decompiler.finish();\r\n  }\r\n\r\n  text: string[] = [];\r\n  functionId: i32 = 0;\r\n\r\n  constructor() { }\r\n\r\n  /** Decompiles a module to an AST that can then be serialized. */\r\n  decompile(module: Module) {\r\n    throw new Error(\"not implemented\");\r\n  }\r\n\r\n  decompileFunction(func: FunctionRef): void {\r\n    var name = readString(_BinaryenFunctionGetName(func)) || \"$\" + this.functionId.toString(10);\r\n    var body = _BinaryenFunctionGetBody(func);\r\n    this.push(\"function \");\r\n    this.push(name);\r\n    this.push(\"(\");\r\n     for (var i: Index = 0, k: Index = _BinaryenFunctionGetNumParams(func); i < k; ++i) {\r\n      if (i > 0)\r\n        this.push(\", \");\r\n      this.push(\"$\");\r\n      this.push(i.toString(10));\r\n      this.push(\": \");\r\n      this.push(nativeTypeToType(_BinaryenFunctionGetParam(func, i)));\r\n    }\r\n    this.push(\"): \");\r\n    this.push(nativeTypeToType(_BinaryenFunctionGetResult(func)));\r\n    this.push(\" \");\r\n    if (_BinaryenExpressionGetId(body) != ExpressionId.Block) {\r\n      this.push(\"{\\n\");\r\n    }\r\n    this.decompileExpression(body);\r\n    if (_BinaryenExpressionGetId(body) != ExpressionId.Block) {\r\n      this.push(\"\\n}\\n\");\r\n    }\r\n    ++this.functionId;\r\n  }\r\n\r\n  decompileExpression(expr: ExpressionRef): void {\r\n    var id = _BinaryenExpressionGetId(expr);\r\n    var type = _BinaryenExpressionGetType(expr);\r\n\r\n    var nested: ExpressionRef;\r\n    var string: string | null;\r\n    var i: Index, k: Index;\r\n\r\n    switch (id) {\r\n\r\n      case ExpressionId.Block: // TODO: magic\r\n        if ((string = readString(_BinaryenBlockGetName(expr))) != null) {\r\n          this.push(string);\r\n          this.push(\": \");\r\n        }\r\n        this.push(\"{\\n\");\r\n        k = _BinaryenBlockGetNumChildren(expr);\r\n        for (i = 0; i < k; ++i) {\r\n          this.decompileExpression(_BinaryenBlockGetChild(expr, i));\r\n        }\r\n        this.push(\"}\\n\");\r\n        return;\r\n\r\n      case ExpressionId.If:\r\n        if (type == NativeType.None) {\r\n          this.push(\"if (\");\r\n          this.decompileExpression(_BinaryenIfGetCondition(expr));\r\n          this.push(\") \");\r\n          this.decompileExpression(_BinaryenIfGetIfTrue(expr));\r\n          if (nested = _BinaryenIfGetIfFalse(expr)) {\r\n            this.push(\" else \");\r\n            this.decompileExpression(nested);\r\n          }\r\n        } else {\r\n          this.decompileExpression(_BinaryenIfGetCondition(expr));\r\n          this.push(\" ? \");\r\n          this.decompileExpression(_BinaryenIfGetIfTrue(expr));\r\n          this.push(\" : \");\r\n          this.decompileExpression(_BinaryenIfGetIfFalse(expr));\r\n        }\r\n        return;\r\n\r\n      case ExpressionId.Loop:\r\n        if ((string = readString(_BinaryenLoopGetName(expr))) != null) {\r\n          this.push(string);\r\n          this.push(\": \");\r\n        }\r\n        this.push(\"do \");\r\n        this.decompileExpression(_BinaryenLoopGetBody(expr));\r\n        this.push(\"while (0);\\n\");\r\n\r\n      case ExpressionId.Break:\r\n        if (nested = _BinaryenBreakGetCondition(expr)) {\r\n          this.push(\"if (\");\r\n          this.decompileExpression(nested);\r\n          this.push(\") \");\r\n        }\r\n        if ((string = readString(_BinaryenBreakGetName(expr))) != null) {\r\n          this.push(\"break \");\r\n          this.push(string);\r\n          this.push(\";\\n\");\r\n        } else\r\n          this.push(\"break;\\n\");\r\n        return;\r\n\r\n      case ExpressionId.Switch:\r\n\r\n      case ExpressionId.Call:\r\n\r\n      case ExpressionId.CallImport:\r\n\r\n      case ExpressionId.CallIndirect:\r\n\r\n      case ExpressionId.GetLocal:\r\n        this.push(\"$\");\r\n        this.push(_BinaryenGetLocalGetIndex(expr).toString(10));\r\n        return;\r\n\r\n      case ExpressionId.SetLocal:\r\n        this.push(\"$\");\r\n        this.push(_BinaryenSetLocalGetIndex(expr).toString(10));\r\n        this.push(\" = \");\r\n        this.decompileExpression(_BinaryenSetLocalGetValue(expr));\r\n        return;\r\n\r\n      case ExpressionId.GetGlobal:\r\n\r\n      case ExpressionId.SetGlobal:\r\n\r\n      case ExpressionId.Load:\r\n        this.push(\"load<\");\r\n        this.push(nativeTypeToType(type));\r\n        this.push(\">(\");\r\n        this.push(_BinaryenLoadGetOffset(expr).toString(10));\r\n        this.push(\" + \");\r\n        this.decompileExpression(_BinaryenLoadGetPtr(expr));\r\n        this.push(\")\");\r\n        return;\r\n\r\n      case ExpressionId.Store:\r\n        this.push(\"store<\");\r\n        this.push(nativeTypeToType(type));\r\n        this.push(\">(\");\r\n        this.push(_BinaryenStoreGetOffset(expr).toString(10));\r\n        this.push(\" + \");\r\n        this.decompileExpression(_BinaryenStoreGetPtr(expr));\r\n        this.push(\", \");\r\n        this.decompileExpression(_BinaryenStoreGetValue(expr));\r\n        this.push(\")\");\r\n        return;\r\n\r\n      case ExpressionId.Const:\r\n        switch (type) {\r\n\r\n          case NativeType.I32:\r\n            this.push(_BinaryenConstGetValueI32(expr).toString(10));\r\n            return;\r\n\r\n          case NativeType.I64:\r\n            this.push(\r\n              i64_to_string(\r\n                i64_new(\r\n                  _BinaryenConstGetValueI64Low(expr),\r\n                  _BinaryenConstGetValueI64High(expr)\r\n                )\r\n              )\r\n            );\r\n            return;\r\n\r\n          case NativeType.F32:\r\n            this.push(_BinaryenConstGetValueF32(expr).toString(10));\r\n            return;\r\n\r\n          case NativeType.F64:\r\n            this.push(_BinaryenConstGetValueF64(expr).toString(10));\r\n            return;\r\n        }\r\n        break;\r\n\r\n      case ExpressionId.Unary:\r\n        switch (_BinaryenUnaryGetOp(expr)) {\r\n\r\n          case UnaryOp.ClzI32:\r\n            this.push(\"clz<i32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n\r\n          case UnaryOp.CtzI32:\r\n            this.push(\"ctz<i32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n\r\n          case UnaryOp.PopcntI32:\r\n            this.push(\"popcnt<i32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n\r\n          case UnaryOp.NegF32:\r\n          case UnaryOp.NegF64:\r\n            this.push(\"-\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n\r\n          case UnaryOp.AbsF32:\r\n            this.push(\"abs<f32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n\r\n          case UnaryOp.CeilF32:\r\n            this.push(\"ceil<f32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n\r\n          case UnaryOp.FloorF32:\r\n            this.push(\"floor<f32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n\r\n          case UnaryOp.TruncF32:\r\n            this.push(\"trunc<f32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n\r\n          case UnaryOp.NearestF32:\r\n            this.push(\"nearest<i32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n\r\n          case UnaryOp.SqrtF32:\r\n            this.push(\"sqrt<f32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n\r\n          case UnaryOp.EqzI32:\r\n          case UnaryOp.EqzI64:\r\n            this.push(\"!\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n\r\n          case UnaryOp.ClzI64:\r\n            this.push(\"clz<i64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n\r\n          case UnaryOp.CtzI64:\r\n            this.push(\"ctz<i64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n\r\n          case UnaryOp.PopcntI64:\r\n            this.push(\"popcnt<i64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n\r\n          case UnaryOp.AbsF64:\r\n            this.push(\"abs<f64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n\r\n          case UnaryOp.CeilF64:\r\n            this.push(\"ceil<f64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n\r\n          case UnaryOp.FloorF64:\r\n            this.push(\"floor<f64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n\r\n          case UnaryOp.TruncF64:\r\n            this.push(\"trunc<f64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n\r\n          case UnaryOp.NearestF64:\r\n            this.push(\"nearest<f64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n\r\n          case UnaryOp.SqrtF64:\r\n            this.push(\"sqrt<f64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n\r\n          case UnaryOp.ExtendI32:\r\n            this.push(\"<i64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n\r\n          case UnaryOp.ExtendU32:\r\n            this.push(\"<i64><u64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n\r\n          case UnaryOp.WrapI64:\r\n            this.push(\"<i32>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n\r\n          case UnaryOp.TruncF32ToI32:\r\n            this.push(\"<i32>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n\r\n          case UnaryOp.TruncF32ToI64:\r\n            this.push(\"<i64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n\r\n          case UnaryOp.TruncF32ToU32:\r\n            this.push(\"<i32><u32>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n\r\n          case UnaryOp.TruncF32ToU64:\r\n            this.push(\"<i64><u64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n\r\n          case UnaryOp.TruncF64ToI32:\r\n            this.push(\"<i32>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n\r\n          case UnaryOp.TruncF64ToI64:\r\n            this.push(\"<i64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n\r\n          case UnaryOp.TruncF64ToU32:\r\n            this.push(\"<i32><u32>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n\r\n          case UnaryOp.TruncF64ToU64:\r\n            this.push(\"<i64><u64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n\r\n          case UnaryOp.ReinterpretF32:\r\n            this.push(\"reinterpret<f32,i32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n\r\n          case UnaryOp.ReinterpretF64:\r\n            this.push(\"reinterpret<f64,i64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n\r\n          case UnaryOp.ConvertI32ToF32:\r\n            this.push(\"<f32>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n\r\n          case UnaryOp.ConvertI32ToF64:\r\n            this.push(\"<f64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n\r\n          case UnaryOp.ConvertU32ToF32:\r\n            this.push(\"<f32><u32>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n\r\n          case UnaryOp.ConvertU32ToF64:\r\n            this.push(\"<f64><u32>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n\r\n          case UnaryOp.ConvertI64ToF32:\r\n            this.push(\"<f32>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n\r\n          case UnaryOp.ConvertI64ToF64:\r\n            this.push(\"<f64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n\r\n          case UnaryOp.ConvertU64ToF32:\r\n            this.push(\"<f32><u64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n\r\n          case UnaryOp.ConvertU64ToF64:\r\n            this.push(\"<f64><u64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n\r\n          case UnaryOp.PromoteF32:\r\n            this.push(\"<f64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n\r\n          case UnaryOp.DemoteF64:\r\n            this.push(\"<f32>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n\r\n          case UnaryOp.ReinterpretI32:\r\n            this.push(\"reinterpret<i32,f32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n\r\n          case UnaryOp.ReinterpretI64:\r\n            this.push(\"reinterpret<i64,f64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n        }\r\n        break;\r\n\r\n      case ExpressionId.Binary: // TODO: precedence\r\n        switch (_BinaryenBinaryGetOp(expr)) {\r\n\r\n          case BinaryOp.AddI32:\r\n          case BinaryOp.AddI64:\r\n          case BinaryOp.AddF32:\r\n          case BinaryOp.AddF64:\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" + \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n\r\n          case BinaryOp.SubI32:\r\n          case BinaryOp.SubI64:\r\n          case BinaryOp.SubF32:\r\n          case BinaryOp.SubF64:\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" - \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n\r\n          case BinaryOp.MulI32:\r\n          case BinaryOp.MulI64:\r\n          case BinaryOp.MulF32:\r\n          case BinaryOp.MulF64:\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" * \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n\r\n          case BinaryOp.DivI32:\r\n          case BinaryOp.DivI64:\r\n          case BinaryOp.DivF32:\r\n          case BinaryOp.DivF64:\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" / \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n\r\n          case BinaryOp.DivU32:\r\n            this.push(\"<i32>(<u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" / <u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n\r\n          case BinaryOp.RemI32:\r\n          case BinaryOp.RemI64:\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" % \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n\r\n          case BinaryOp.RemU32:\r\n            this.push(\"<i32>(<u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" / <u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n\r\n          case BinaryOp.AndI32:\r\n          case BinaryOp.AndI64:\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" & \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n\r\n          case BinaryOp.OrI32:\r\n          case BinaryOp.OrI64:\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" | \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n\r\n          case BinaryOp.XorI32:\r\n          case BinaryOp.XorI64:\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" ^ \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n\r\n          case BinaryOp.ShlI32:\r\n          case BinaryOp.ShlI64:\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" << \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n\r\n          case BinaryOp.ShrU32:\r\n          case BinaryOp.ShrU64:\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" >>> \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n\r\n          case BinaryOp.ShrI32:\r\n          case BinaryOp.ShrI64:\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" >> \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n\r\n          case BinaryOp.RotlI32:\r\n            this.push(\"rotl<i32>(\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n\r\n          case BinaryOp.RotrI32:\r\n            this.push(\"rotr<i32>(\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n\r\n          case BinaryOp.EqI32:\r\n          case BinaryOp.EqI64:\r\n          case BinaryOp.EqF32:\r\n          case BinaryOp.EqF64:\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" == \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n\r\n          case BinaryOp.NeI32:\r\n          case BinaryOp.NeI64:\r\n          case BinaryOp.NeF32:\r\n          case BinaryOp.NeF64:\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" != \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n\r\n          case BinaryOp.LtI32:\r\n          case BinaryOp.LtI64:\r\n          case BinaryOp.LtF32:\r\n          case BinaryOp.LtF64:\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" < \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n\r\n          case BinaryOp.LtU32:\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" < <u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n\r\n          case BinaryOp.LeI32:\r\n          case BinaryOp.LeI64:\r\n          case BinaryOp.LeF32:\r\n          case BinaryOp.LeF64:\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" <= \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n\r\n          case BinaryOp.LeU32:\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" <= <u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n\r\n          case BinaryOp.GtI32:\r\n          case BinaryOp.GtI64:\r\n          case BinaryOp.GtF32:\r\n          case BinaryOp.GtF64:\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" > \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n\r\n          case BinaryOp.GtU32:\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" > <u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n\r\n          case BinaryOp.GeI32:\r\n          case BinaryOp.GeI64:\r\n          case BinaryOp.GeF32:\r\n          case BinaryOp.GeF64:\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" >= \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n\r\n          case BinaryOp.GeU32:\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" >= <u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n\r\n          case BinaryOp.DivU64:\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" / <u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n\r\n          case BinaryOp.RemU64:\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" % <u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n\r\n           case BinaryOp.RotlI64:\r\n            this.push(\"rotl<i64>(\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n\r\n          case BinaryOp.RotrI64:\r\n            this.push(\"rotr<i64>(\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n\r\n          case BinaryOp.LtU64:\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" < <u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n\r\n          case BinaryOp.LeU64:\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" <= <u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n\r\n          case BinaryOp.GtU64:\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" > <u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n\r\n          case BinaryOp.GeU64:\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" >= <u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n\r\n          case BinaryOp.CopysignF32:\r\n            this.push(\"copysign<f32>(\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n\r\n          case BinaryOp.MinF32:\r\n            this.push(\"min<f32>(\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n\r\n          case BinaryOp.MaxF32:\r\n            this.push(\"max<f32>(\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n\r\n            case BinaryOp.CopysignF64:\r\n            this.push(\"copysign<f64>(\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n\r\n          case BinaryOp.MinF64:\r\n            this.push(\"min<f64>(\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n\r\n          case BinaryOp.MaxF64:\r\n            this.push(\"max<f64>(\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n        }\r\n        return;\r\n\r\n      case ExpressionId.Select:\r\n        this.push(\"select<\");\r\n        this.push(nativeTypeToType(type));\r\n        this.push(\">(\");\r\n        this.decompileExpression(_BinaryenSelectGetIfTrue(expr));\r\n        this.push(\", \");\r\n        this.decompileExpression(_BinaryenSelectGetIfFalse(expr));\r\n        this.push(\", \");\r\n        this.decompileExpression(_BinaryenSelectGetCondition(expr));\r\n        this.push(\")\");\r\n        return;\r\n\r\n      case ExpressionId.Drop:\r\n        this.decompileExpression(_BinaryenDropGetValue(expr));\r\n        this.push(\";\\n\");\r\n        return;\r\n\r\n      case ExpressionId.Return:\r\n        if (nested = _BinaryenReturnGetValue(expr)) {\r\n          this.push(\"return \");\r\n          this.decompileExpression(nested);\r\n          this.push(\";\\n\");\r\n        } else {\r\n          this.push(\"return;\\n\");\r\n        }\r\n        return;\r\n\r\n      case ExpressionId.Host:\r\n        switch (_BinaryenHostGetOp(expr)) {\r\n          case HostOp.CurrentMemory:\r\n            this.push(\"current_memory()\");\r\n            return;\r\n          case HostOp.GrowMemory:\r\n            this.push(\"grow_memory(\");\r\n            this.decompileExpression(_BinaryenHostGetOperand(expr, 0));\r\n            this.push(\")\");\r\n            return;\r\n        }\r\n        break;\r\n\r\n      case ExpressionId.Nop:\r\n        this.push(\";\\n\");\r\n        return;\r\n\r\n      case ExpressionId.Unreachable:\r\n        this.push(\"unreachable()\");\r\n        return;\r\n\r\n      case ExpressionId.AtomicCmpxchg:\r\n\r\n      case ExpressionId.AtomicRMW:\r\n\r\n      case ExpressionId.AtomicWait:\r\n\r\n      case ExpressionId.AtomicWake:\r\n    }\r\n    throw new Error(\"not implemented\");\r\n  }\r\n\r\n  private push(text: string): void {\r\n    // mostly here so we can add debugging if necessary\r\n    this.text.push(text);\r\n  }\r\n\r\n  finish(): string {\r\n    var ret = this.text.join(\"\");\r\n    this.text = [];\r\n    return ret;\r\n  }\r\n}\r\n\r\nfunction nativeTypeToType(type: NativeType): string {\r\n  switch (type) {\r\n    case NativeType.None: return \"void\";\r\n    case NativeType.I32: return \"i32\";\r\n    case NativeType.I64: return \"i64\";\r\n    case NativeType.F32: return \"f32\";\r\n    case NativeType.F64: return \"f64\";\r\n    case NativeType.Unreachable: throw new Error(\"unreachable type\");\r\n    case NativeType.Auto: throw new Error(\"auto type\");\r\n    default: throw new Error(\"unexpected type\");\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/decompiler.ts","/*\r\n\r\n This is a custom parser specifically written for the AssemblyScript subset. It\r\n accepts some of the most common TypeScript-only patterns that it knows an\r\n appropriate error message for but, though it uses TypeScript's codes for\r\n diagnostics, doesn't ultimately aim at full compatibility.\r\n\r\n*/\r\n\r\nimport {\r\n  Program,\r\n  LIBRARY_PREFIX\r\n} from \"./program\";\r\n\r\nimport {\r\n  Tokenizer,\r\n  Token,\r\n  Range\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  normalize as normalizePath\r\n} from \"./util/path\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  Source,\r\n  SourceKind,\r\n  TypeNode,\r\n\r\n  Expression,\r\n  AssertionKind,\r\n  CallExpression,\r\n  ElementAccessExpression,\r\n  IdentifierExpression,\r\n  StringLiteralExpression,\r\n\r\n  Statement,\r\n  BlockStatement,\r\n  BreakStatement,\r\n  ClassDeclaration,\r\n  ContinueStatement,\r\n  DeclarationStatement,\r\n  Decorator,\r\n  DoStatement,\r\n  EnumDeclaration,\r\n  EnumValueDeclaration,\r\n  ExportImportStatement,\r\n  ExportMember,\r\n  ExportStatement,\r\n  ExpressionStatement,\r\n  FieldDeclaration,\r\n  ForStatement,\r\n  FunctionDeclaration,\r\n  IfStatement,\r\n  ImportDeclaration,\r\n  ImportStatement,\r\n  MethodDeclaration,\r\n  Modifier,\r\n  ModifierKind,\r\n  NamespaceDeclaration,\r\n  Parameter,\r\n  ParameterKind,\r\n  ReturnStatement,\r\n  SwitchCase,\r\n  SwitchStatement,\r\n  ThrowStatement,\r\n  TryStatement,\r\n  TypeDeclaration,\r\n  TypeParameter,\r\n  VariableStatement,\r\n  VariableDeclaration,\r\n  WhileStatement,\r\n\r\n  addModifier,\r\n  getModifier,\r\n  hasModifier,\r\n  setReusableModifiers\r\n} from \"./ast\";\r\n\r\n/** Parser interface. */\r\nexport class Parser extends DiagnosticEmitter {\r\n\r\n  /** Program being created. */\r\n  program: Program;\r\n  /** Log of source file names to be requested. */\r\n  backlog: string[] = new Array();\r\n  /** Log of source file names already processed. */\r\n  seenlog: Set<string> = new Set();\r\n\r\n  /** Constructs a new parser. */\r\n  constructor() {\r\n    super();\r\n    this.program = new Program(this.diagnostics);\r\n  }\r\n\r\n  /** Parses a file and adds its definitions to the program. */\r\n  parseFile(text: string, path: string, isEntry: bool): void {\r\n    var normalizedPath = normalizePath(path);\r\n    for (var i = 0, k = this.program.sources.length; i < k; ++i)\r\n      if (this.program.sources[i].normalizedPath == normalizedPath)\r\n        return; // already parsed\r\n    this.seenlog.add(normalizedPath);\r\n\r\n    var source = new Source(normalizedPath, text, isEntry ? SourceKind.ENTRY : path.startsWith(LIBRARY_PREFIX) ? SourceKind.LIBRARY : SourceKind.DEFAULT);\r\n    this.program.sources.push(source);\r\n\r\n    var tn = new Tokenizer(source, this.program.diagnostics);\r\n    // tn.silentDiagnostics = this.silentDiagnostics;\r\n    source.tokenizer = tn;\r\n\r\n    while (!tn.skip(Token.ENDOFFILE)) {\r\n      var statement = this.parseTopLevelStatement(tn);\r\n      if (statement) {\r\n        statement.parent = source;\r\n        source.statements.push(statement);\r\n      }\r\n    }\r\n  }\r\n\r\n  parseTopLevelStatement(tn: Tokenizer, isNamespaceMember: bool = false): Statement | null {\r\n    var decorators: Decorator[] | null = null;\r\n\r\n    while (tn.skip(Token.AT)) {\r\n      var decorator = this.parseDecorator(tn);\r\n      if (!decorator)\r\n        break;\r\n      if (!decorators)\r\n        decorators = new Array();\r\n      (<Decorator[]>decorators).push(<Decorator>decorator);\r\n    }\r\n\r\n    var modifiers: Modifier[] | null = null;\r\n\r\n    if (tn.skip(Token.EXPORT))\r\n      modifiers = addModifier(Node.createModifier(ModifierKind.EXPORT, tn.range()), modifiers);\r\n\r\n    if (tn.skip(Token.DECLARE)) {\r\n      modifiers = addModifier(Node.createModifier(ModifierKind.DECLARE, tn.range()), modifiers);\r\n      tn.peek(true);\r\n      if (tn.nextTokenOnNewLine)\r\n        this.error(DiagnosticCode.Line_break_not_permitted_here, tn.range(tn.pos)); // recoverable, compatibility\r\n    }\r\n\r\n    tn.mark();\r\n\r\n    var statement: Statement | null = null;\r\n    var modifier: Modifier | null;\r\n    switch (tn.next()) {\r\n\r\n      case Token.CONST:\r\n        modifiers = addModifier(Node.createModifier(ModifierKind.CONST, tn.range()), modifiers);\r\n        if (tn.skip(Token.ENUM)) {\r\n          statement = this.parseEnum(tn, modifiers, decorators);\r\n          break;\r\n        }\r\n        statement = this.parseVariable(tn, modifiers, decorators);\r\n        decorators = null;\r\n        break;\r\n\r\n      case Token.LET:\r\n        modifiers = addModifier(Node.createModifier(ModifierKind.LET, tn.range()), modifiers);\r\n      case Token.VAR:\r\n        statement = this.parseVariable(tn, modifiers, decorators);\r\n        decorators = null;\r\n        break;\r\n\r\n      case Token.ENUM:\r\n        statement = this.parseEnum(tn, modifiers, decorators);\r\n        decorators = null;\r\n        break;\r\n\r\n      case Token.FUNCTION:\r\n        statement = this.parseFunction(tn, modifiers, decorators);\r\n        decorators = null;\r\n        break;\r\n\r\n      case Token.ABSTRACT:\r\n        if (!tn.skip(Token.CLASS)) {\r\n          this.error(DiagnosticCode._0_expected, tn.range(tn.pos), \"class\");\r\n          break;\r\n        }\r\n        modifiers = addModifier(Node.createModifier(ModifierKind.ABSTRACT, tn.range()), modifiers);\r\n        // fall through\r\n\r\n      case Token.CLASS:\r\n        statement = this.parseClass(tn, modifiers, decorators);\r\n        decorators = null;\r\n        break;\r\n\r\n      case Token.NAMESPACE:\r\n        statement = this.parseNamespace(tn, modifiers, decorators);\r\n        decorators = null;\r\n        break;\r\n\r\n      case Token.IMPORT:\r\n        if (modifier = getModifier(ModifierKind.EXPORT, modifiers)) {\r\n          statement = this.parseExportImport(tn, modifier.range);\r\n        } else\r\n          statement = this.parseImport(tn);\r\n        if (modifiers)\r\n          setReusableModifiers(modifiers);\r\n        break;\r\n\r\n      case Token.TYPE:\r\n        statement = this.parseTypeDeclaration(tn, modifiers, decorators);\r\n        decorators = null;\r\n        break;\r\n\r\n      default:\r\n        if (hasModifier(ModifierKind.EXPORT, modifiers)) {\r\n          tn.reset();\r\n          statement = this.parseExport(tn, modifiers); // TODO: why exactly does this have modifiers again? 'declare'?\r\n        } else {\r\n          if (modifiers) {\r\n            if (modifier = getModifier(ModifierKind.DECLARE, modifiers))\r\n              this.error(DiagnosticCode._0_modifier_cannot_be_used_here, modifier.range, \"declare\"); // recoverable\r\n            setReusableModifiers(modifiers);\r\n          }\r\n          tn.reset();\r\n          if (!isNamespaceMember)\r\n            statement = this.parseStatement(tn, true);\r\n        }\r\n        break;\r\n    }\r\n\r\n    if (decorators /* not consumed */)\r\n      for (var i = 0, k = (<Decorator[]>decorators).length; i < k; ++i)\r\n        this.error(DiagnosticCode.Decorators_are_not_valid_here, (<Decorator[]>decorators)[i].range);\r\n\r\n    return statement;\r\n  }\r\n\r\n  /** Obtains the next file to parse. */\r\n  nextFile(): string | null {\r\n    return this.backlog.length ? this.backlog.shift() : null;\r\n  }\r\n\r\n  /** Finishes parsing and returns the program. */\r\n  finish(): Program {\r\n    if (this.backlog.length)\r\n      throw new Error(\"backlog is not empty\");\r\n    this.backlog = [];\r\n    this.seenlog.clear();\r\n    return this.program;\r\n  }\r\n\r\n  parseType(tn: Tokenizer, acceptParenthesized: bool = true, suppressErrors: bool = false): TypeNode | null {\r\n    // not TypeScript-compatible\r\n    var token = tn.next();\r\n    var startPos = tn.tokenPos;\r\n\r\n    // void\r\n    if (token == Token.VOID)\r\n      return Node.createType(Node.createIdentifierExpression(\"void\", tn.range()), [], false, tn.range(startPos, tn.pos));\r\n\r\n    var type: TypeNode;\r\n\r\n    // ( ... )\r\n    if (acceptParenthesized && token == Token.OPENPAREN) {\r\n      var innerType = this.parseType(tn, false, suppressErrors);\r\n      if (!innerType)\r\n        return null;\r\n      if (!tn.skip(Token.CLOSEPAREN)) {\r\n        if (!suppressErrors)\r\n          this.error(DiagnosticCode._0_expected, tn.range(tn.pos), \"}\");\r\n        return null;\r\n      }\r\n      type = innerType;\r\n      type.range.start = startPos;\r\n      type.range.end = tn.pos;\r\n\r\n    // this\r\n    } else if (token == Token.THIS) {\r\n      type = Node.createType(Node.createThisExpression(tn.range()), [], false, tn.range(startPos, tn.pos));\r\n\r\n    // true\r\n    } else if (token == Token.TRUE || token == Token.FALSE) {\r\n      type = Node.createType(Node.createIdentifierExpression(\"bool\", tn.range()), [], false, tn.range(startPos, tn.pos));\r\n\r\n    // string literal\r\n    } else if (token == Token.STRINGLITERAL) {\r\n      tn.readString();\r\n      type = Node.createType(Node.createIdentifierExpression(\"string\", tn.range()), [], false, tn.range(startPos, tn.pos));\r\n\r\n    // Name\r\n    } else if (token == Token.IDENTIFIER) {\r\n      var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      var parameters = new Array<TypeNode>();\r\n      var nullable = false;\r\n\r\n      // Name<T>\r\n      if (tn.skip(Token.LESSTHAN)) {\r\n        do {\r\n          var parameter = this.parseType(tn, true, suppressErrors);\r\n          if (!parameter)\r\n            return null;\r\n          parameters.push(<TypeNode>parameter);\r\n        } while (tn.skip(Token.COMMA));\r\n        if (!tn.skip(Token.GREATERTHAN)) {\r\n          if (!suppressErrors)\r\n            this.error(DiagnosticCode._0_expected, tn.range(tn.pos), \">\");\r\n          return null;\r\n        }\r\n      }\r\n      // ... | null\r\n      if (tn.skip(Token.BAR)) {\r\n        if (tn.skip(Token.NULL)) {\r\n          nullable = true;\r\n        } else {\r\n          if (!suppressErrors)\r\n            this.error(DiagnosticCode._0_expected, tn.range(tn.pos), \"null\");\r\n          return null;\r\n        }\r\n      }\r\n      type = Node.createType(identifier, parameters, nullable, tn.range(startPos, tn.pos));\r\n\r\n    } else {\r\n      if (!suppressErrors)\r\n        this.error(DiagnosticCode.Identifier_expected, tn.range());\r\n      return null;\r\n    }\r\n    // ... [][]\r\n    while (tn.skip(Token.OPENBRACKET)) {\r\n      var bracketStart = tn.tokenPos;\r\n      if (!tn.skip(Token.CLOSEBRACKET)) {\r\n        if (!suppressErrors)\r\n          this.error(DiagnosticCode._0_expected, tn.range(), \"]\");\r\n        return null;\r\n      }\r\n      var bracketRange = tn.range(bracketStart, tn.pos);\r\n\r\n      // ...[] | null\r\n      nullable = false;\r\n      if (tn.skip(Token.BAR)) {\r\n        if (tn.skip(Token.NULL)) {\r\n          nullable = true;\r\n        } else {\r\n          if (!suppressErrors)\r\n            this.error(DiagnosticCode._0_expected, tn.range(), \"null\");\r\n          return null;\r\n        }\r\n      }\r\n      type = Node.createType(Node.createIdentifierExpression(\"Array\", bracketRange), [ type ], nullable, tn.range(startPos, tn.pos));\r\n      if (nullable)\r\n        break;\r\n    }\r\n\r\n    return type;\r\n  }\r\n\r\n  // statements\r\n\r\n  parseDecorator(tn: Tokenizer): Decorator | null {\r\n    // at '@': Identifier ('.' Identifier)* '(' Arguments\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.IDENTIFIER)) {\r\n      var name = tn.readIdentifier();\r\n      var expression: Expression = Node.createIdentifierExpression(name, tn.range(startPos, tn.pos));\r\n      while (tn.skip(Token.DOT)) {\r\n        if (tn.skip(Token.IDENTIFIER)) {\r\n          name = tn.readIdentifier();\r\n          expression = Node.createPropertyAccessExpression(expression, Node.createIdentifierExpression(name, tn.range()), tn.range(startPos, tn.pos));\r\n        } else {\r\n          this.error(DiagnosticCode.Identifier_expected, tn.range());\r\n          return null;\r\n        }\r\n      }\r\n      var args: Expression[] | null;\r\n      if (tn.skip(Token.OPENPAREN)) {\r\n        args = this.parseArguments(tn);\r\n        if (args)\r\n          return Node.createDecorator(expression, args, tn.range(startPos, tn.pos));\r\n      } else\r\n        return Node.createDecorator(expression, null, tn.range(startPos, tn.pos));\r\n    } else\r\n      this.error(DiagnosticCode.Identifier_expected, tn.range());\r\n    return null;\r\n  }\r\n\r\n  parseVariable(tn: Tokenizer, modifiers: Modifier[] | null, decorators: Decorator[] | null): VariableStatement | null {\r\n    // at ('const' | 'let' | 'var'): VariableDeclaration (',' VariableDeclaration)* ';'?\r\n    var startPos = modifiers && modifiers.length ? modifiers[0].range.start : tn.tokenPos;\r\n    var members = new Array<VariableDeclaration>();\r\n    var isDeclare = hasModifier(ModifierKind.DECLARE, modifiers);\r\n    do {\r\n      var member = this.parseVariableDeclaration(tn, isDeclare, modifiers, decorators);\r\n      if (!member)\r\n        return null;\r\n      members.push(<VariableDeclaration>member);\r\n    } while (tn.skip(Token.COMMA));\r\n\r\n    var ret = Node.createVariableStatement(members, modifiers, decorators, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseVariableDeclaration(tn: Tokenizer, isDeclare: bool = false, parentModifiers: Modifier[] | null, parentDecorators: Decorator[] | null): VariableDeclaration | null {\r\n    // Identifier (':' Type)? ('=' Expression)?\r\n    if (!tn.skip(Token.IDENTIFIER)) {\r\n      this.error(DiagnosticCode.Identifier_expected, tn.range());\r\n      return null;\r\n    }\r\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n\r\n    var type: TypeNode | null = null;\r\n    if (tn.skip(Token.COLON))\r\n      type = this.parseType(tn);\r\n\r\n    var initializer: Expression | null = null;\r\n    if (tn.skip(Token.EQUALS)) {\r\n      if (isDeclare)\r\n        this.error(DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts, tn.range()); // recoverable\r\n      initializer = this.parseExpression(tn, Precedence.COMMA + 1);\r\n      if (!initializer)\r\n        return null;\r\n    } else {\r\n      if (hasModifier(ModifierKind.CONST, parentModifiers)) {\r\n        if (!hasModifier(ModifierKind.DECLARE, parentModifiers))\r\n          this.error(DiagnosticCode._const_declarations_must_be_initialized, identifier.range);\r\n      } else if (!type) // neither type nor initializer\r\n        this.error(DiagnosticCode.Type_expected, tn.range(tn.pos)); // recoverable\r\n    }\r\n    return Node.createVariableDeclaration(identifier, type, initializer, parentModifiers, parentDecorators, Range.join(identifier.range, tn.range()));\r\n  }\r\n\r\n  parseEnum(tn: Tokenizer, modifiers: Modifier[] | null, decorators: Decorator[] | null): EnumDeclaration | null {\r\n    // at 'enum': Identifier '{' (EnumValueDeclaration (',' EnumValueDeclaration )*)? '}' ';'?\r\n    var startPos = modifiers && modifiers.length ? modifiers[0].range.start : tn.tokenPos;\r\n    if (tn.next() != Token.IDENTIFIER) {\r\n      this.error(DiagnosticCode.Identifier_expected, tn.range());\r\n      return null;\r\n    }\r\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    if (tn.next() != Token.OPENBRACE) {\r\n      this.error(DiagnosticCode._0_expected, tn.range(), \"{\");\r\n      return null;\r\n    }\r\n    var members = new Array<EnumValueDeclaration>();\r\n    if (!tn.skip(Token.CLOSEBRACE)) {\r\n      do {\r\n        var member = this.parseEnumValue(tn);\r\n        if (!member)\r\n          return null;\r\n        members.push(<EnumValueDeclaration>member);\r\n      } while (tn.skip(Token.COMMA));\r\n      if (!tn.skip(Token.CLOSEBRACE)) {\r\n        this.error(DiagnosticCode._0_expected, tn.range(), \"}\");\r\n        return null;\r\n      }\r\n    }\r\n    var ret = Node.createEnumDeclaration(identifier, members, modifiers, decorators, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseEnumValue(tn: Tokenizer): EnumValueDeclaration | null {\r\n    // Identifier ('=' Expression)?\r\n    if (!tn.skip(Token.IDENTIFIER)) {\r\n      this.error(DiagnosticCode.Identifier_expected, tn.range());\r\n      return null;\r\n    }\r\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var value: Expression | null = null;\r\n    if (tn.skip(Token.EQUALS)) {\r\n      value = this.parseExpression(tn, Precedence.COMMA + 1);\r\n      if (!value)\r\n        return null;\r\n    }\r\n    return Node.createEnumValueDeclaration(identifier, value, Range.join(identifier.range, tn.range()));\r\n  }\r\n\r\n  parseReturn(tn: Tokenizer): ReturnStatement | null {\r\n    // at 'return': Expression | (';' | '}' | ...'\\n')\r\n    var expr: Expression | null = null;\r\n    if (tn.peek(true) != Token.SEMICOLON && tn.nextToken != Token.CLOSEBRACE && !tn.nextTokenOnNewLine) {\r\n      expr = this.parseExpression(tn);\r\n      if (!expr)\r\n        return null;\r\n    }\r\n    var ret = Node.createReturnStatement(expr, tn.range());\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseTypeParameters(tn: Tokenizer): TypeParameter[] | null {\r\n    // at '<': TypeParameter (',' TypeParameter)* '>'\r\n    var typeParameters = new Array<TypeParameter>();\r\n    if (!tn.skip(Token.GREATERTHAN)) {\r\n      do {\r\n        var typeParameter = this.parseTypeParameter(tn);\r\n        if (!typeParameter)\r\n          return null;\r\n        typeParameters.push(<TypeParameter>typeParameter);\r\n      } while (tn.skip(Token.COMMA));\r\n      if (!tn.skip(Token.GREATERTHAN)) {\r\n        this.error(DiagnosticCode._0_expected, tn.range(), \">\");\r\n        return null;\r\n      }\r\n    } else\r\n      this.error(DiagnosticCode.Type_parameter_list_cannot_be_empty, tn.range()); // recoverable\r\n    return typeParameters;\r\n  }\r\n\r\n  parseTypeParameter(tn: Tokenizer): TypeParameter | null {\r\n    // Identifier ('extends' Type)?\r\n    if (tn.next() == Token.IDENTIFIER) {\r\n      var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      var extendsType: TypeNode | null = null;\r\n      if (tn.skip(Token.EXTENDS)) {\r\n        extendsType = this.parseType(tn);\r\n        if (!extendsType)\r\n          return null;\r\n      }\r\n      return Node.createTypeParameter(identifier, extendsType, Range.join(identifier.range, tn.range()));\r\n    } else\r\n      this.error(DiagnosticCode.Identifier_expected, tn.range());\r\n    return null;\r\n  }\r\n\r\n  parseParameters(tn: Tokenizer): Parameter[] | null {\r\n    // at '(': (Parameter (',' Parameter)*)? ')'\r\n    var parameters = new Array<Parameter>();\r\n    var seenRest: Parameter | null = null;\r\n    var seenOptional = false;\r\n    var reportedRest = false;\r\n    if (tn.peek() != Token.CLOSEPAREN) {\r\n      do {\r\n        var param = this.parseParameter(tn);\r\n        if (!param)\r\n          return null;\r\n        if (seenRest && !reportedRest) {\r\n          this.error(DiagnosticCode.A_rest_parameter_must_be_last_in_a_parameter_list, seenRest.name.range);\r\n          reportedRest = true;\r\n        }\r\n        switch (param.parameterKind) {\r\n\r\n          default:\r\n            if (seenOptional)\r\n              this.error(DiagnosticCode.A_required_parameter_cannot_follow_an_optional_parameter, param.name.range);\r\n            break;\r\n\r\n          case ParameterKind.OPTIONAL:\r\n            seenOptional = true;\r\n            break;\r\n\r\n          case ParameterKind.REST:\r\n            seenRest = param;\r\n            break;\r\n        }\r\n        parameters.push(param);\r\n      } while (tn.skip(Token.COMMA));\r\n    }\r\n    if (tn.skip(Token.CLOSEPAREN))\r\n      return parameters;\r\n    else\r\n      this.error(DiagnosticCode._0_expected, tn.range(), \")\");\r\n    return null;\r\n  }\r\n\r\n  parseParameter(tn: Tokenizer): Parameter | null {\r\n    // '...'? Identifier '?'? (':' Type)? ('=' Expression)?\r\n    var isRest = false;\r\n    var seenRest = false;\r\n    var isOptional = false;\r\n    var seenOptional = false;\r\n    var startRange: Range | null = null;\r\n    if (tn.skip(Token.DOT_DOT_DOT)) {\r\n      isRest = true;\r\n      startRange = tn.range();\r\n    }\r\n    if (tn.skip(Token.IDENTIFIER)) {\r\n      if (!isRest)\r\n        startRange = tn.range();\r\n      var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      var type: TypeNode | null = null;\r\n      if (isOptional = tn.skip(Token.QUESTION)) {\r\n        if (isRest)\r\n          this.error(DiagnosticCode.A_rest_parameter_cannot_be_optional, identifier.range);\r\n      }\r\n      if (tn.skip(Token.COLON)) {\r\n        type = this.parseType(tn);\r\n        if (!type)\r\n          return null;\r\n      }\r\n      var initializer: Expression | null = null;\r\n      if (tn.skip(Token.EQUALS)) {\r\n        if (isRest)\r\n          this.error(DiagnosticCode.A_rest_parameter_cannot_have_an_initializer, identifier.range);\r\n        if (isOptional)\r\n          this.error(DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer, identifier.range);\r\n        else\r\n          isOptional = true;\r\n        initializer = this.parseExpression(tn, Precedence.COMMA + 1);\r\n        if (!initializer)\r\n          return null;\r\n      }\r\n      return Node.createParameter(identifier, type, initializer, isRest ? ParameterKind.REST : isOptional ? ParameterKind.OPTIONAL : ParameterKind.DEFAULT, Range.join(<Range>startRange, tn.range()));\r\n    } else\r\n      this.error(DiagnosticCode.Identifier_expected, tn.range());\r\n    return null;\r\n  }\r\n\r\n  parseFunction(tn: Tokenizer, modifiers: Modifier[] | null, decorators: Decorator[] | null): FunctionDeclaration | null {\r\n    // at 'function': Identifier ('<' TypeParameters)? '(' Parameters (':' Type)? '{' Statement* '}' ';'?\r\n    var startPos = modifiers && modifiers.length ? modifiers[0].range.start : tn.tokenPos;\r\n\r\n    if (!tn.skip(Token.IDENTIFIER)) {\r\n      this.error(DiagnosticCode.Identifier_expected, tn.range(tn.pos));\r\n      return null;\r\n    }\r\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var typeParameters: TypeParameter[] | null = null;\r\n    if (tn.skip(Token.LESSTHAN)) {\r\n      typeParameters = this.parseTypeParameters(tn);\r\n      if (!typeParameters)\r\n        return null;\r\n    } else\r\n      typeParameters = [];\r\n    if (!tn.skip(Token.OPENPAREN)) {\r\n      this.error(DiagnosticCode._0_expected, tn.range(tn.pos), \"(\");\r\n      return null;\r\n    }\r\n    var parameters = this.parseParameters(tn);\r\n    if (!parameters)\r\n      return null;\r\n    var isSetter = hasModifier(ModifierKind.SET, modifiers);\r\n    if (isSetter) {\r\n      if (parameters.length != 1)\r\n        this.error(DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter, identifier.range); // recoverable\r\n      if (parameters.length && parameters[0].initializer)\r\n        this.error(DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer, identifier.range); // recoverable\r\n    }\r\n    var isGetter = hasModifier(ModifierKind.GET, modifiers);\r\n    if (isGetter && parameters.length)\r\n      this.error(DiagnosticCode.A_get_accessor_cannot_have_parameters, identifier.range); // recoverable\r\n    var returnType: TypeNode | null = null;\r\n    if (tn.skip(Token.COLON)) {\r\n      returnType = this.parseType(tn, isSetter);\r\n      if (!returnType)\r\n        return null;\r\n    } else if (!isSetter) {\r\n      this.error(DiagnosticCode.Type_expected, tn.range(tn.pos)); // recoverable\r\n    }\r\n    var isDeclare = hasModifier(ModifierKind.DECLARE, modifiers);\r\n    var statements: Statement[] | null = null;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      statements = new Array();\r\n      if (isDeclare)\r\n        this.error(DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts, tn.range()); // recoverable\r\n      while (!tn.skip(Token.CLOSEBRACE)) {\r\n        var statement = this.parseStatement(tn);\r\n        if (!statement)\r\n          return null;\r\n        statements.push(<Statement>statement);\r\n      }\r\n    } else if (!isDeclare)\r\n      this.error(DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration, tn.range(tn.pos));\r\n    var ret = Node.createFunctionDeclaration(identifier, typeParameters, <Parameter[]>parameters, returnType, statements, modifiers, decorators, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseClass(tn: Tokenizer, modifiers: Modifier[] | null, decorators: Decorator[] | null): ClassDeclaration | null {\r\n    // at 'class': Identifier ('<' TypeParameters)? ('extends' Type)? ('implements' Type (',' Type)*)? '{' ClassMember* '}'\r\n    var startPos = decorators && decorators.length\r\n      ? decorators[0].range.start\r\n      : modifiers && modifiers.length\r\n      ? modifiers[0].range.start\r\n      : tn.tokenPos;\r\n\r\n    if (tn.skip(Token.IDENTIFIER)) {\r\n      var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      var typeParameters: TypeParameter[] | null;\r\n\r\n      if (tn.skip(Token.LESSTHAN)) {\r\n        typeParameters = this.parseTypeParameters(tn);\r\n        if (!typeParameters)\r\n          return null;\r\n      } else\r\n        typeParameters = [];\r\n\r\n      var extendsType: TypeNode | null = null;\r\n      if (tn.skip(Token.EXTENDS)) {\r\n        extendsType = this.parseType(tn);\r\n        if (!extendsType)\r\n          return null;\r\n      }\r\n\r\n      var implementsTypes = new Array<TypeNode>();\r\n      if (tn.skip(Token.IMPLEMENTS)) {\r\n        do {\r\n          var type = this.parseType(tn);\r\n          if (!type)\r\n            return null;\r\n          implementsTypes.push(<TypeNode>type);\r\n        } while (tn.skip(Token.COMMA));\r\n      }\r\n\r\n      if (tn.skip(Token.OPENBRACE)) {\r\n        var members = new Array<DeclarationStatement>();\r\n        if (!tn.skip(Token.CLOSEBRACE)) {\r\n          var isDeclare = hasModifier(ModifierKind.DECLARE, modifiers);\r\n          do {\r\n            var member = this.parseClassMember(tn, isDeclare);\r\n            if (!member)\r\n              return null;\r\n            members.push(<DeclarationStatement>member);\r\n          } while (!tn.skip(Token.CLOSEBRACE));\r\n        }\r\n        return Node.createClassDeclaration(identifier, <TypeParameter[]>typeParameters, extendsType, implementsTypes, members, modifiers, decorators, tn.range(startPos, tn.pos));\r\n      } else\r\n        this.error(DiagnosticCode._0_expected, tn.range(), \"{\");\r\n    } else\r\n      this.error(DiagnosticCode.Identifier_expected, tn.range());\r\n    return null;\r\n  }\r\n\r\n  parseClassMember(tn: Tokenizer, parentIsDeclare: bool): DeclarationStatement | null {\r\n    // ('public' | 'private' | 'protected')? ('static' | 'abstract')? ('get' | 'set')? Identifier ...\r\n    var startPos = tn.pos;\r\n\r\n    var decorators = new Array<Decorator>();\r\n\r\n    while (tn.skip(Token.AT)) {\r\n      var decorator = this.parseDecorator(tn);\r\n      if (!decorator)\r\n        break;\r\n      decorators.push(<Decorator>decorator);\r\n    }\r\n\r\n    var modifiers: Modifier[] | null = null;\r\n\r\n    if (tn.skip(Token.PUBLIC))\r\n      modifiers = addModifier(Node.createModifier(ModifierKind.PUBLIC, tn.range()), modifiers);\r\n    else if (tn.skip(Token.PRIVATE))\r\n      modifiers = addModifier(Node.createModifier(ModifierKind.PRIVATE, tn.range()), modifiers);\r\n    else if (tn.skip(Token.PROTECTED))\r\n      modifiers = addModifier(Node.createModifier(ModifierKind.PROTECTED, tn.range()), modifiers);\r\n\r\n    if (tn.skip(Token.STATIC))\r\n      modifiers = addModifier(Node.createModifier(ModifierKind.STATIC, tn.range()), modifiers);\r\n    else if (tn.skip(Token.ABSTRACT))\r\n      modifiers = addModifier(Node.createModifier(ModifierKind.ABSTRACT, tn.range()), modifiers);\r\n\r\n    if (tn.skip(Token.READONLY))\r\n      modifiers = addModifier(Node.createModifier(ModifierKind.READONLY, tn.range()), modifiers);\r\n\r\n    // check if accessor: ('get' | 'set') ^\\n Identifier\r\n    tn.mark();\r\n    var isGetter = false;\r\n    var isSetter = false;\r\n    if (isGetter = tn.skip(Token.GET)) {\r\n      if (tn.peek(true, true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine)\r\n        modifiers = addModifier(Node.createModifier(ModifierKind.GET, tn.range()), modifiers);\r\n      else {\r\n        tn.reset();\r\n        isGetter = false;\r\n      }\r\n    } else if (isSetter = tn.skip(Token.SET)) { // can't be both\r\n      if (tn.peek(true, true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine)\r\n        modifiers = addModifier(Node.createModifier(ModifierKind.SET, tn.range()), modifiers);\r\n      else {\r\n        tn.reset();\r\n        isSetter = false;\r\n      }\r\n    }\r\n\r\n    var isConstructor = tn.skip(Token.CONSTRUCTOR);\r\n    if (isConstructor || tn.skip(Token.IDENTIFIER)) {\r\n      var identifier = isConstructor\r\n        ? Node.createConstructorExpression(tn.range())\r\n        : Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      var typeParameters: TypeParameter[] | null;\r\n      if (tn.skip(Token.LESSTHAN)) {\r\n        if (isConstructor)\r\n          this.error(DiagnosticCode.Type_parameters_cannot_appear_on_a_constructor_declaration, tn.range()); // recoverable\r\n        typeParameters = this.parseTypeParameters(tn);\r\n        if (!typeParameters)\r\n          return null;\r\n      } else\r\n        typeParameters = [];\r\n\r\n      // method: '(' Parameters (':' Type)? '{' Statement* '}' ';'?\r\n      if (tn.skip(Token.OPENPAREN)) {\r\n        var parameters = this.parseParameters(tn);\r\n        if (!parameters)\r\n          return null;\r\n        if (isGetter && parameters.length)\r\n          this.error(DiagnosticCode.A_get_accessor_cannot_have_parameters, identifier.range);\r\n        if (isSetter) {\r\n          if (parameters.length != 1)\r\n            this.error(DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter, identifier.range);\r\n          if (parameters.length && parameters[0].initializer)\r\n            this.error(DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer, identifier.range);\r\n        }\r\n        var returnType: TypeNode | null = null;\r\n        if (tn.skip(Token.COLON)) {\r\n          if (identifier.kind == NodeKind.CONSTRUCTOR)\r\n            this.error(DiagnosticCode.Type_annotation_cannot_appear_on_a_constructor_declaration, tn.range());\r\n          else if (isSetter)\r\n            this.error(DiagnosticCode.A_set_accessor_cannot_have_a_return_type_annotation, tn.range());\r\n          returnType = this.parseType(tn, identifier.kind == NodeKind.CONSTRUCTOR || isSetter);\r\n          if (!returnType)\r\n            return null;\r\n        } else if (!isSetter && identifier.kind != NodeKind.CONSTRUCTOR)\r\n          this.error(DiagnosticCode.Type_expected, tn.range()); // recoverable\r\n        var statements: Statement[] | null = null;\r\n        if (tn.skip(Token.OPENBRACE)) {\r\n          if (parentIsDeclare)\r\n            this.error(DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts, tn.range()); // recoverable\r\n          statements = new Array();\r\n          while (!tn.skip(Token.CLOSEBRACE)) {\r\n            var statement = this.parseStatement(tn);\r\n            if (!statement)\r\n              return null;\r\n            statements.push(<Statement>statement);\r\n          }\r\n        } else {\r\n          if (!parentIsDeclare)\r\n            this.error(DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration, tn.range()); // recoverable\r\n        }\r\n\r\n        var retMethod = Node.createMethodDeclaration(identifier, <TypeParameter[]>typeParameters, <Parameter[]>parameters, returnType, statements, modifiers, decorators, tn.range(startPos, tn.pos));\r\n        tn.skip(Token.SEMICOLON);\r\n        return retMethod;\r\n\r\n      } else if (isConstructor) {\r\n        this.error(DiagnosticCode.Constructor_implementation_is_missing, identifier.range());\r\n\r\n      } else if (isGetter || isSetter) {\r\n        this.error(DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration, identifier.range());\r\n\r\n      // field: (':' Type)? ('=' Expression)? ';'?\r\n      } else {\r\n        var modifier: Modifier | null;\r\n        if (modifier = getModifier(ModifierKind.ABSTRACT, modifiers))\r\n          this.error(DiagnosticCode._0_modifier_cannot_be_used_here, modifier.range, \"abstract\"); // recoverable\r\n        if (modifier = getModifier(ModifierKind.GET, modifiers))\r\n          this.error(DiagnosticCode._0_modifier_cannot_be_used_here, modifier.range, \"get\"); // recoverable\r\n        if (modifier = getModifier(ModifierKind.SET, modifiers))\r\n          this.error(DiagnosticCode._0_modifier_cannot_be_used_here, modifier.range, \"set\"); // recoverable\r\n        var type: TypeNode | null = null;\r\n        if (tn.skip(Token.COLON)) {\r\n          type = this.parseType(tn);\r\n          if (!type)\r\n            return null;\r\n        } else\r\n          this.error(DiagnosticCode.Type_expected, tn.range()); // recoverable\r\n        var initializer: Expression | null = null;\r\n        if (tn.skip(Token.EQUALS)) {\r\n          initializer = this.parseExpression(tn);\r\n          if (!initializer)\r\n            return null;\r\n        }\r\n        var retField = Node.createFieldDeclaration(identifier, type, initializer, modifiers, decorators, tn.range(startPos, tn.pos));\r\n        tn.skip(Token.SEMICOLON);\r\n        return retField;\r\n      }\r\n    } else\r\n      this.error(DiagnosticCode.Identifier_expected, tn.range());\r\n    return null;\r\n  }\r\n\r\n  parseNamespace(tn: Tokenizer, modifiers: Modifier[] | null, decorators: Decorator[] | null): NamespaceDeclaration | null {\r\n    // at 'namespace': Identifier '{' (Variable | Function)* '}'\r\n    var startPos = modifiers && modifiers.length ? modifiers[0].range.start : tn.tokenPos;\r\n    if (tn.skip(Token.IDENTIFIER)) {\r\n      var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      if (tn.skip(Token.OPENBRACE)) {\r\n        var members = new Array<Statement>();\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          var member = this.parseTopLevelStatement(tn, true);\r\n          if (!member)\r\n            return null;\r\n          members.push(member);\r\n        }\r\n        var ret = Node.createNamespaceDeclaration(identifier, members, modifiers, decorators, tn.range(startPos, tn.pos));\r\n        tn.skip(Token.SEMICOLON);\r\n        return ret;\r\n      } else\r\n        this.error(DiagnosticCode._0_expected, tn.range(), \"{\");\r\n    } else\r\n      this.error(DiagnosticCode.Identifier_expected, tn.range());\r\n    return null;\r\n  }\r\n\r\n  parseExport(tn: Tokenizer, modifiers: Modifier[] | null): ExportStatement | null {\r\n    // at 'export': '{' ExportMember (',' ExportMember)* }' ('from' StringLiteral)? ';'?\r\n    var startPos = modifiers && modifiers.length ? modifiers[0].range.start : tn.tokenPos;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      var members = new Array<ExportMember>();\r\n      if (!tn.skip(Token.CLOSEBRACE)) {\r\n        do {\r\n          var member = this.parseExportMember(tn);\r\n          if (!member)\r\n            return null;\r\n          members.push(member);\r\n        } while (tn.skip(Token.COMMA));\r\n        if (!tn.skip(Token.CLOSEBRACE)) {\r\n          this.error(DiagnosticCode._0_expected, tn.range(), \"}\");\r\n          return null;\r\n        }\r\n      }\r\n      var path: StringLiteralExpression | null = null;\r\n      if (tn.skip(Token.FROM)) {\r\n        if (tn.skip(Token.STRINGLITERAL))\r\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\r\n        else {\r\n          this.error(DiagnosticCode.String_literal_expected, tn.range());\r\n          return null;\r\n        }\r\n      }\r\n      var ret = Node.createExportStatement(members, path, modifiers, tn.range(startPos, tn.pos));\r\n      if (ret.normalizedPath && !this.seenlog.has(<string>ret.normalizedPath)) {\r\n        this.backlog.push(<string>ret.normalizedPath);\r\n        this.seenlog.add(<string>ret.normalizedPath);\r\n      }\r\n      tn.skip(Token.SEMICOLON);\r\n      return ret;\r\n    } else\r\n      this.error(DiagnosticCode._0_expected, tn.range(), \"{\");\r\n    return null;\r\n  }\r\n\r\n  parseExportMember(tn: Tokenizer): ExportMember | null {\r\n    // Identifier ('as' Identifier)?\r\n    if (tn.skip(Token.IDENTIFIER)) {\r\n      var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      var asIdentifier: IdentifierExpression | null = null;\r\n      if (tn.skip(Token.AS)) {\r\n        if (tn.skip(Token.IDENTIFIER))\r\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        else {\r\n          this.error(DiagnosticCode.Identifier_expected, tn.range());\r\n          return null;\r\n        }\r\n      }\r\n      return Node.createExportMember(identifier, asIdentifier, asIdentifier ? Range.join(identifier.range, asIdentifier.range) : identifier.range);\r\n    } else\r\n      this.error(DiagnosticCode.Identifier_expected, tn.range());\r\n    return null;\r\n  }\r\n\r\n  parseImport(tn: Tokenizer): ImportStatement | null {\r\n    // at 'import': ('{' (ImportMember (',' ImportMember)*)? '}' | '*' 'as' Identifier)? 'from' StringLiteral ';'?\r\n    var startPos = tn.tokenPos;\r\n    var members: ImportDeclaration[] | null = null;\r\n    var namespaceName: IdentifierExpression | null = null;\r\n    var skipFrom = false;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      members = new Array();\r\n      if (!tn.skip(Token.CLOSEBRACE)) {\r\n        do {\r\n          var member = this.parseImportDeclaration(tn);\r\n          if (!member)\r\n            return null;\r\n          members.push(member);\r\n        } while (tn.skip(Token.COMMA));\r\n        if (!tn.skip(Token.CLOSEBRACE)) {\r\n          this.error(DiagnosticCode._0_expected, tn.range(), \"}\");\r\n          return null;\r\n        }\r\n      }\r\n    } else if (tn.skip(Token.ASTERISK)) {\r\n      if (tn.skip(Token.AS)) {\r\n        if (tn.skip(Token.IDENTIFIER)) {\r\n          namespaceName = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        } else {\r\n          this.error(DiagnosticCode.Identifier_expected, tn.range());\r\n          return null;\r\n        }\r\n      } else {\r\n        this.error(DiagnosticCode._0_expected, tn.range(), \"as\");\r\n        return null;\r\n      }\r\n    } else\r\n      skipFrom = true;\r\n\r\n    if (skipFrom || tn.skip(Token.FROM)) {\r\n      if (tn.skip(Token.STRINGLITERAL)) {\r\n        var path = Node.createStringLiteralExpression(tn.readString(), tn.range());\r\n        var ret: ImportStatement;\r\n        if (namespaceName) {\r\n          assert(!members);\r\n          ret = Node.createImportStatementWithWildcard(namespaceName, path, tn.range(startPos, tn.pos));\r\n        } else {\r\n          ret = Node.createImportStatement(members, path, tn.range(startPos, tn.pos));\r\n        }\r\n        if (!this.seenlog.has(ret.normalizedPath)) {\r\n          this.backlog.push(ret.normalizedPath);\r\n          this.seenlog.add(ret.normalizedPath);\r\n        }\r\n        tn.skip(Token.SEMICOLON);\r\n        return ret;\r\n      } else\r\n        this.error(DiagnosticCode.String_literal_expected, tn.range());\r\n    } else\r\n      this.error(DiagnosticCode._0_expected, tn.range(), \"from\");\r\n    return null;\r\n  }\r\n\r\n  parseImportDeclaration(tn: Tokenizer): ImportDeclaration | null {\r\n    // Identifier ('as' Identifier)?\r\n    if (tn.skip(Token.IDENTIFIER)) {\r\n      var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      var asIdentifier: IdentifierExpression | null = null;\r\n      if (tn.skip(Token.AS)) {\r\n        if (tn.skip(Token.IDENTIFIER))\r\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        else {\r\n          this.error(DiagnosticCode.Identifier_expected, tn.range());\r\n          return null;\r\n        }\r\n      }\r\n      return Node.createImportDeclaration(identifier, asIdentifier, asIdentifier ? Range.join(identifier.range, asIdentifier.range) : identifier.range);\r\n    } else\r\n      this.error(DiagnosticCode.Identifier_expected, tn.range());\r\n    return null;\r\n  }\r\n\r\n  parseExportImport(tn: Tokenizer, startRange: Range): ExportImportStatement | null {\r\n    // at 'export' 'import': Identifier ('=' Identifier)? ';'?\r\n    if (tn.skip(Token.IDENTIFIER)) {\r\n      var asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      if (tn.skip(Token.EQUALS)) {\r\n        if (tn.skip(Token.IDENTIFIER)) {\r\n          var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n          var ret = Node.createExportImportStatement(identifier, asIdentifier, Range.join(startRange, tn.range()));\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else\r\n          this.error(DiagnosticCode.Identifier_expected, tn.range());\r\n      } else\r\n        this.error(DiagnosticCode._0_expected, tn.range(), \"=\");\r\n    } else\r\n      this.error(DiagnosticCode.Identifier_expected, tn.range());\r\n    return null;\r\n  }\r\n\r\n  parseStatement(tn: Tokenizer, topLevel: bool = false): Statement | null {\r\n    // at previous token\r\n    tn.mark();\r\n    var token = tn.next();\r\n    switch (token) {\r\n\r\n      case Token.BREAK:\r\n        return this.parseBreak(tn);\r\n\r\n      case Token.CONST:\r\n        return this.parseVariable(tn, [ Node.createModifier(ModifierKind.CONST, tn.range()) ], null);\r\n\r\n      case Token.CONTINUE:\r\n        return this.parseContinue(tn);\r\n\r\n      case Token.DO:\r\n        return this.parseDoStatement(tn);\r\n\r\n      case Token.FOR:\r\n        return this.parseForStatement(tn);\r\n\r\n      case Token.IF:\r\n        return this.parseIfStatement(tn);\r\n\r\n      case Token.LET:\r\n        return this.parseVariable(tn, [ Node.createModifier(ModifierKind.LET, tn.range()) ], null);\r\n\r\n      case Token.VAR:\r\n        return this.parseVariable(tn, null, null);\r\n\r\n      case Token.OPENBRACE:\r\n        return this.parseBlockStatement(tn, topLevel);\r\n\r\n      case Token.RETURN:\r\n        if (topLevel)\r\n          this.error(DiagnosticCode.A_return_statement_can_only_be_used_within_a_function_body, tn.range()); // recoverable\r\n        return this.parseReturn(tn);\r\n\r\n      case Token.SEMICOLON:\r\n        return Node.createEmptyStatement(tn.range(tn.tokenPos));\r\n\r\n      case Token.SWITCH:\r\n        return this.parseSwitchStatement(tn);\r\n\r\n      case Token.THROW:\r\n        return this.parseThrowStatement(tn);\r\n\r\n      case Token.TRY:\r\n        return this.parseTryStatement(tn);\r\n\r\n      case Token.TYPE:\r\n        return this.parseTypeDeclaration(tn, null);\r\n\r\n      case Token.WHILE:\r\n        return this.parseWhileStatement(tn);\r\n\r\n      default:\r\n        tn.reset();\r\n        return this.parseExpressionStatement(tn);\r\n    }\r\n  }\r\n\r\n  parseBlockStatement(tn: Tokenizer, topLevel: bool): BlockStatement | null {\r\n    // at '{': Statement* '}' ';'?\r\n    var startPos = tn.tokenPos;\r\n    var statements = new Array<Statement>();\r\n    while (!tn.skip(Token.CLOSEBRACE)) {\r\n      var statement = this.parseStatement(tn, topLevel);\r\n      if (!statement)\r\n        return null;\r\n      statements.push(statement);\r\n    }\r\n    var ret = Node.createBlockStatement(statements, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseBreak(tn: Tokenizer): BreakStatement | null {\r\n    // at 'break': Identifier? ';'?\r\n    var identifier: IdentifierExpression | null = null;\r\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n      tn.next(true);\r\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    }\r\n    var ret = Node.createBreakStatement(identifier, tn.range());\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseContinue(tn: Tokenizer): ContinueStatement | null {\r\n    // at 'continue': Identifier? ';'?\r\n    var identifier: IdentifierExpression | null = null;\r\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n      tn.next(true);\r\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    }\r\n    var ret = Node.createContinueStatement(identifier, tn.range());\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseDoStatement(tn: Tokenizer): DoStatement | null {\r\n    // at 'do': Statement 'while' '(' Expression ')' ';'?\r\n    var startPos = tn.tokenPos;\r\n    var statement = this.parseStatement(tn);\r\n    if (!statement)\r\n      return null;\r\n    if (tn.skip(Token.WHILE)) {\r\n      if (tn.skip(Token.OPENPAREN)) {\r\n        var condition = this.parseExpression(tn);\r\n        if (!condition)\r\n          return null;\r\n        if (tn.skip(Token.CLOSEPAREN)) {\r\n          var ret = Node.createDoStatement(<Statement>statement, <Expression>condition, tn.range(startPos, tn.pos));\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        }\r\n        this.error(DiagnosticCode._0_expected, tn.range(), \")\");\r\n      } else\r\n        this.error(DiagnosticCode._0_expected, tn.range(), \"(\");\r\n    } else\r\n      this.error(DiagnosticCode._0_expected, tn.range(), \"while\");\r\n    return null;\r\n  }\r\n\r\n  parseExpressionStatement(tn: Tokenizer): ExpressionStatement | null {\r\n    // at previous token\r\n    var expr = this.parseExpression(tn);\r\n    if (!expr)\r\n      return null;\r\n    var ret = Node.createExpressionStatement(expr);\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseForStatement(tn: Tokenizer): ForStatement | null {\r\n    // at 'for': '(' Statement? Expression? ';' Expression? ')' Statement\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      var initializer: Statement | null = null;\r\n      if (tn.skip(Token.LET) || tn.skip(Token.CONST) || tn.skip(Token.VAR)) {\r\n        initializer = this.parseVariable(tn, null, null);\r\n      } else if (!tn.skip(Token.SEMICOLON)) {\r\n        initializer = this.parseExpressionStatement(tn);\r\n        if (!initializer)\r\n          return null;\r\n      }\r\n      if (tn.token == Token.SEMICOLON) {\r\n        var condition: ExpressionStatement | null = null;\r\n        if (!tn.skip(Token.SEMICOLON)) {\r\n          condition = this.parseExpressionStatement(tn);\r\n          if (!condition)\r\n            return null;\r\n        }\r\n        if (tn.token == Token.SEMICOLON) {\r\n          var incrementor: Expression | null = null;\r\n          if (!tn.skip(Token.CLOSEPAREN)) {\r\n            incrementor = this.parseExpression(tn);\r\n            if (!incrementor)\r\n              return null;\r\n            if (!tn.skip(Token.CLOSEPAREN)) {\r\n              this.error(DiagnosticCode._0_expected, tn.range(), \")\");\r\n              return null;\r\n            }\r\n          }\r\n          var statement = this.parseStatement(tn);\r\n          if (!statement)\r\n            return null;\r\n          return Node.createForStatement(initializer, condition ? condition.expression : null, incrementor, statement, tn.range(startPos, tn.pos));\r\n        } else\r\n          this.error(DiagnosticCode._0_expected, tn.range(), \";\");\r\n      } else\r\n        this.error(DiagnosticCode._0_expected, tn.range(), \";\");\r\n    } else\r\n      this.error(DiagnosticCode._0_expected, tn.range(), \"(\");\r\n    return null;\r\n  }\r\n\r\n  parseIfStatement(tn: Tokenizer): IfStatement | null {\r\n    // at 'if': '(' Expression ')' Statement ('else' Statement)?\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      var condition = this.parseExpression(tn);\r\n      if (!condition)\r\n        return null;\r\n      if (tn.skip(Token.CLOSEPAREN)) {\r\n        var statement = this.parseStatement(tn);\r\n        if (!statement)\r\n          return null;\r\n        var elseStatement: Statement | null = null;\r\n        if (tn.skip(Token.ELSE)) {\r\n          elseStatement = this.parseStatement(tn);\r\n          if (!elseStatement)\r\n            return null;\r\n        }\r\n        return Node.createIfStatement(<Expression>condition, <Statement>statement, elseStatement, tn.range(startPos, tn.pos));\r\n      }\r\n      this.error(DiagnosticCode._0_expected, tn.range(), \")\");\r\n    } else\r\n      this.error(DiagnosticCode._0_expected, tn.range(), \"(\");\r\n    return null;\r\n  }\r\n\r\n  parseSwitchStatement(tn: Tokenizer): SwitchStatement | null {\r\n    // at 'switch': '(' Expression ')' '{' SwitchCase* '}' ';'?\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      var condition = this.parseExpression(tn);\r\n      if (!condition)\r\n        return null;\r\n      if (tn.skip(Token.CLOSEPAREN)) {\r\n        if (tn.skip(Token.OPENBRACE)) {\r\n          var cases = new Array<SwitchCase>();\r\n          while (!tn.skip(Token.CLOSEBRACE)) {\r\n            var case_ = this.parseSwitchCase(tn);\r\n            if (!case_)\r\n              return null;\r\n            cases.push(<SwitchCase>case_);\r\n          }\r\n          var ret = Node.createSwitchStatement(condition, cases, tn.range(startPos, tn.pos));\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else\r\n          this.error(DiagnosticCode._0_expected, tn.range(), \"{\");\r\n      } else\r\n        this.error(DiagnosticCode._0_expected, tn.range(), \")\");\r\n    } else\r\n      this.error(DiagnosticCode._0_expected, tn.range(), \"(\");\r\n    return null;\r\n  }\r\n\r\n  parseSwitchCase(tn: Tokenizer): SwitchCase | null {\r\n    var startPos = tn.tokenPos;\r\n    var statements: Statement[],\r\n        statement: Statement | null;\r\n\r\n    // 'case' Expression ':' Statement*\r\n    if (tn.skip(Token.CASE)) {\r\n      var label = this.parseExpression(tn);\r\n      if (!label)\r\n        return null;\r\n      if (tn.skip(Token.COLON)) {\r\n        statements = new Array<Statement>();\r\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\r\n          statement = this.parseStatement(tn);\r\n          if (!statement)\r\n            return null;\r\n          statements.push(<Statement>statement);\r\n        }\r\n        return Node.createSwitchCase(<Expression>label, statements, tn.range(startPos, tn.pos));\r\n      } else\r\n        this.error(DiagnosticCode._0_expected, tn.range(), \":\");\r\n\r\n    // 'default' ':' Statement*\r\n    } else if (tn.skip(Token.DEFAULT)) {\r\n      if (tn.skip(Token.COLON)) {\r\n        statements = new Array<Statement>();\r\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\r\n          statement = this.parseStatement(tn);\r\n          if (!statement)\r\n            return null;\r\n          statements.push(statement);\r\n        }\r\n        return Node.createSwitchCase(null, statements, tn.range(startPos, tn.pos));\r\n      } else\r\n        this.error(DiagnosticCode._0_expected, tn.range(), \":\");\r\n\r\n    } else\r\n      this.error(DiagnosticCode._case_or_default_expected, tn.range());\r\n\r\n    return null;\r\n  }\r\n\r\n  parseThrowStatement(tn: Tokenizer): ThrowStatement | null {\r\n    // at 'throw': Expression ';'?\r\n    var startPos = tn.tokenPos;\r\n    var expression = this.parseExpression(tn);\r\n    if (!expression)\r\n      return null;\r\n    var ret = Node.createThrowStatement(<Expression>expression, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseTryStatement(tn: Tokenizer): TryStatement | null {\r\n    // at 'try': '{' Statement* '}' ('catch' '(' VariableMember ')' '{' Statement* '}')? ('finally' '{' Statement* '}'? ';'?\r\n    var startPos = tn.tokenPos;\r\n    var stmt: Statement | null;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      var statements = new Array<Statement>();\r\n      while (!tn.skip(Token.CLOSEBRACE)) {\r\n        stmt = this.parseStatement(tn);\r\n        if (!stmt)\r\n          return null;\r\n        statements.push(<Statement>stmt);\r\n      }\r\n      var catchVariable: IdentifierExpression | null = null;\r\n      var catchStatements: Statement[] | null = null;\r\n      var finallyStatements: Statement[] | null = null;\r\n      if (tn.skip(Token.CATCH)) {\r\n        if (!tn.skip(Token.OPENPAREN)) {\r\n          this.error(DiagnosticCode._0_expected, tn.range(), \"(\");\r\n          return null;\r\n        }\r\n        if (!tn.skip(Token.IDENTIFIER)) {\r\n          this.error(DiagnosticCode.Identifier_expected, tn.range());\r\n          return null;\r\n        }\r\n        catchVariable = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        if (!tn.skip(Token.CLOSEPAREN)) {\r\n          this.error(DiagnosticCode._0_expected, tn.range(), \")\");\r\n          return null;\r\n        }\r\n        if (!tn.skip(Token.OPENBRACE)) {\r\n          this.error(DiagnosticCode._0_expected, tn.range(), \"{\");\r\n          return null;\r\n        }\r\n        catchStatements = new Array();\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          var stmt = this.parseStatement(tn);\r\n          if (!stmt)\r\n            return null;\r\n          catchStatements.push(<Statement>stmt);\r\n        }\r\n      }\r\n      if (tn.skip(Token.FINALLY)) {\r\n        if (!tn.skip(Token.OPENBRACE)) {\r\n          this.error(DiagnosticCode._0_expected, tn.range(), \"{\");\r\n          return null;\r\n        }\r\n        finallyStatements = new Array();\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          stmt = this.parseStatement(tn);\r\n          if (!stmt)\r\n            return null;\r\n          finallyStatements.push(<Statement>stmt);\r\n        }\r\n      }\r\n      if (!(catchStatements || finallyStatements)) {\r\n        this.error(DiagnosticCode._0_expected, tn.range(), \"catch\");\r\n        return null;\r\n      }\r\n      var ret = Node.createTryStatement(statements, catchVariable, catchStatements, finallyStatements, tn.range(startPos, tn.pos));\r\n      tn.skip(Token.SEMICOLON);\r\n      return ret;\r\n    } else\r\n      this.error(DiagnosticCode._0_expected, tn.range(), \"{\");\r\n    return null;\r\n  }\r\n\r\n  parseTypeDeclaration(tn: Tokenizer, modifiers: Modifier[] | null = null, decorators: Decorator[] | null = null): TypeDeclaration | null {\r\n    // at 'type': Identifier '=' Type ';'?\r\n    var startPos = decorators && decorators.length ? decorators[0].range.start\r\n                 : modifiers && modifiers.length ? modifiers[0].range.start\r\n                 : tn.tokenPos;\r\n    if (tn.skip(Token.IDENTIFIER)) {\r\n      var name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      if (tn.skip(Token.EQUALS)) {\r\n        var type = this.parseType(tn);\r\n        if (!type)\r\n          return null;\r\n        var ret = Node.createTypeDeclaration(name, type, modifiers, decorators, tn.range(startPos, tn.pos));\r\n        tn.skip(Token.SEMICOLON);\r\n        return ret;\r\n      } else\r\n        this.error(DiagnosticCode._0_expected, tn.range(), \"=\");\r\n    } else\r\n      this.error(DiagnosticCode.Identifier_expected, tn.range());\r\n    return null;\r\n  }\r\n\r\n  parseWhileStatement(tn: Tokenizer): WhileStatement | null {\r\n    // at 'while': '(' Expression ')' Statement ';'?\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      var expression = this.parseExpression(tn);\r\n      if (!expression)\r\n        return null;\r\n      if (tn.skip(Token.CLOSEPAREN)) {\r\n        var statement = this.parseStatement(tn);\r\n        if (!statement)\r\n          return null;\r\n        var ret = Node.createWhileStatement(<Expression>expression, <Statement>statement, tn.range(startPos, tn.pos));\r\n        tn.skip(Token.SEMICOLON);\r\n        return ret;\r\n      } else\r\n        this.error(DiagnosticCode._0_expected, tn.range(), \")\");\r\n    } else\r\n      this.error(DiagnosticCode._0_expected, tn.range(), \"(\");\r\n    return null;\r\n  }\r\n\r\n  // expressions\r\n  // see: http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing\r\n\r\n  parseExpressionStart(tn: Tokenizer): Expression | null {\r\n    var token = tn.next(true);\r\n    var startPos = tn.tokenPos;\r\n    var expr: Expression | null = null;\r\n\r\n    if (token == Token.NULL)\r\n      return Node.createNullExpression(tn.range());\r\n    if (token == Token.TRUE)\r\n      return Node.createTrueExpression(tn.range());\r\n    if (token == Token.FALSE)\r\n      return Node.createFalseExpression(tn.range());\r\n\r\n    var p = determinePrecedenceStart(token);\r\n    if (p != Precedence.INVALID) {\r\n      var operand: Expression | null;\r\n\r\n      // TODO: SpreadExpression, YieldExpression (currently become unsupported UnaryPrefixExpressions)\r\n\r\n      // NewExpression\r\n      if (token == Token.NEW) {\r\n        operand = this.parseExpression(tn, Precedence.CALL);\r\n        if (!operand)\r\n          return null;\r\n        if (operand.kind == NodeKind.CALL)\r\n          return Node.createNewExpression((<CallExpression>operand).expression, (<CallExpression>operand).typeArguments, (<CallExpression>operand).arguments, tn.range(startPos, tn.pos));\r\n        this.error(DiagnosticCode.Operation_not_supported, tn.range());\r\n        return null;\r\n      } else {\r\n        operand = this.parseExpression(tn, p);\r\n        if (!operand)\r\n          return null;\r\n      }\r\n\r\n      // UnaryPrefixExpression\r\n      if (token == Token.PLUS_PLUS || token == Token.MINUS_MINUS)\r\n        if ((<Expression>operand).kind != NodeKind.IDENTIFIER && (<Expression>operand).kind != NodeKind.ELEMENTACCESS && (<Expression>operand).kind != NodeKind.PROPERTYACCESS)\r\n          this.error(DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access, (<Expression>operand).range);\r\n      return Node.createUnaryPrefixExpression(token, <Expression>operand, tn.range(startPos, tn.pos));\r\n    }\r\n\r\n    switch (token) {\r\n\r\n      // ParenthesizedExpression\r\n      case Token.OPENPAREN: {\r\n        expr = this.parseExpression(tn);\r\n        if (!expr)\r\n          return null;\r\n        if (!tn.skip(Token.CLOSEPAREN)) {\r\n          this.error(DiagnosticCode._0_expected, tn.range(), \")\");\r\n          return null;\r\n        }\r\n        return Node.createParenthesizedExpression(expr, tn.range(startPos, tn.pos));\r\n      }\r\n\r\n      // ArrayLiteralExpression\r\n      case Token.OPENBRACKET: {\r\n        var elementExpressions = new Array<Expression | null>();\r\n        if (!tn.skip(Token.CLOSEBRACKET)) {\r\n          do {\r\n            if (tn.peek() == Token.COMMA)\r\n              expr = null; // omitted\r\n            else {\r\n              expr = this.parseExpression(tn, Precedence.COMMA + 1);\r\n              if (!expr)\r\n                return null;\r\n            }\r\n            elementExpressions.push(expr);\r\n            if (tn.peek() == Token.CLOSEBRACKET)\r\n              break;\r\n          } while (tn.skip(Token.COMMA));\r\n          if (!tn.skip(Token.CLOSEBRACKET)) {\r\n            this.error(DiagnosticCode._0_expected, tn.range(), \"]\");\r\n            return null;\r\n          }\r\n        }\r\n        return Node.createArrayLiteralExpression(elementExpressions, tn.range(startPos, tn.pos));\r\n      }\r\n\r\n      // AssertionExpression (unary prefix)\r\n      case Token.LESSTHAN: {\r\n        var toType = this.parseType(tn);\r\n        if (!toType)\r\n          return null;\r\n        if (!tn.skip(Token.GREATERTHAN)) {\r\n          this.error(DiagnosticCode._0_expected, tn.range(), \">\");\r\n          return null;\r\n        }\r\n        expr = this.parseExpression(tn, Precedence.CALL);\r\n        if (!expr)\r\n          return null;\r\n        return Node.createAssertionExpression(AssertionKind.PREFIX, <Expression>expr, <TypeNode>toType, tn.range(startPos, tn.pos));\r\n      }\r\n\r\n      // IdentifierExpression\r\n      case Token.IDENTIFIER:\r\n        return Node.createIdentifierExpression(tn.readIdentifier(), tn.range(startPos, tn.pos));\r\n\r\n      case Token.THIS:\r\n        return Node.createThisExpression(tn.range(startPos, tn.pos));\r\n\r\n      case Token.CONSTRUCTOR:\r\n        return Node.createConstructorExpression(tn.range(startPos, tn.pos));\r\n\r\n      case Token.SUPER:\r\n        return Node.createSuperExpression(tn.range(startPos, tn.pos));\r\n\r\n      // StringLiteralExpression\r\n      case Token.STRINGLITERAL:\r\n        return Node.createStringLiteralExpression(tn.readString(), tn.range(startPos, tn.pos));\r\n\r\n      // IntegerLiteralExpression\r\n      case Token.INTEGERLITERAL:\r\n        return Node.createIntegerLiteralExpression(tn.readInteger(), tn.range(startPos, tn.pos));\r\n\r\n      // FloatLiteralExpression\r\n      case Token.FLOATLITERAL:\r\n        return Node.createFloatLiteralExpression(tn.readFloat(), tn.range(startPos, tn.pos));\r\n\r\n      // RegexpLiteralExpression\r\n      // note that this also continues on invalid ones so the surrounding AST remains intact\r\n      case Token.SLASH:\r\n        var regexpPattern = tn.readRegexpPattern(); // also reports\r\n        if (!tn.skip(Token.SLASH)) {\r\n          this.error(DiagnosticCode._0_expected, tn.range(), \"/\");\r\n          return null;\r\n        }\r\n        return Node.createRegexpLiteralExpression(regexpPattern, tn.readRegexpFlags() /* also reports */, tn.range(startPos, tn.pos));\r\n\r\n      default:\r\n        this.error(DiagnosticCode.Expression_expected, tn.range());\r\n        return null;\r\n    }\r\n  }\r\n\r\n  tryParseTypeArgumentsBeforeArguments(tn: Tokenizer): TypeNode[] | null {\r\n    // at '<': Type (',' Type)* '>' '('\r\n    tn.mark();\r\n    if (!tn.skip(Token.LESSTHAN))\r\n      return null;\r\n\r\n    var typeArguments = new Array<TypeNode>();\r\n    do {\r\n      var type = this.parseType(tn, true, true);\r\n      if (!type) {\r\n        tn.reset();\r\n        return null;\r\n      }\r\n      typeArguments.push(type);\r\n    } while (tn.skip(Token.COMMA));\r\n\r\n    if (tn.skip(Token.GREATERTHAN) && tn.skip(Token.OPENPAREN))\r\n      return typeArguments;\r\n\r\n    tn.reset();\r\n    return null;\r\n  }\r\n\r\n  parseArguments(tn: Tokenizer): Expression[] | null {\r\n    // at '(': (Expression (',' Expression)*)? ')'\r\n    var args = new Array<Expression>();\r\n    if (!tn.skip(Token.CLOSEPAREN)) {\r\n      do {\r\n        var expr = this.parseExpression(tn, Precedence.COMMA + 1);\r\n        if (!expr)\r\n          return null;\r\n        args.push(<Expression>expr);\r\n      } while (tn.skip(Token.COMMA));\r\n      if (!tn.skip(Token.CLOSEPAREN)) {\r\n        this.error(DiagnosticCode._0_expected, tn.range(), \")\");\r\n        return null;\r\n      }\r\n    }\r\n    return args;\r\n  }\r\n\r\n  parseExpression(tn: Tokenizer, precedence: Precedence = 0): Expression | null {\r\n    var expr = this.parseExpressionStart(tn);\r\n    if (!expr)\r\n      return null;\r\n\r\n    var startPos = expr.range.start;\r\n\r\n    // CallExpression\r\n    var typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn); // skips '(' on success\r\n    // there might be better ways to distinguish a LESSTHAN from a CALL with type arguments\r\n    if (typeArguments || tn.skip(Token.OPENPAREN)) {\r\n      var args = this.parseArguments(tn);\r\n      if (!args)\r\n        return null;\r\n      expr = Node.createCallExpression(expr, typeArguments, args, tn.range(startPos, tn.pos));\r\n    }\r\n\r\n    var token: Token;\r\n    var next: Expression | null = null;\r\n    var nextPrecedence: Precedence;\r\n    while ((nextPrecedence = determinePrecedence(token = tn.peek())) >= precedence) { // precedence climbing\r\n      tn.next();\r\n\r\n      switch (token) {\r\n\r\n        // AssertionExpression\r\n        case Token.AS:\r\n          var toType = this.parseType(tn);\r\n          if (!toType)\r\n            return null;\r\n          expr = Node.createAssertionExpression(AssertionKind.AS, expr, toType, tn.range(startPos, tn.pos));\r\n          break;\r\n\r\n        // ElementAccessExpression\r\n        case Token.OPENBRACKET:\r\n          next = this.parseExpression(tn);\r\n          if (!next)\r\n            return null;\r\n          if (!tn.skip(Token.CLOSEBRACKET)) {\r\n            this.error(DiagnosticCode._0_expected, tn.range(), \"]\");\r\n            return null;\r\n          }\r\n          expr = Node.createElementAccessExpression(<Expression>expr, <Expression>next, tn.range(startPos, tn.pos));\r\n          break;\r\n\r\n        // UnaryPostfixExpression\r\n        case Token.PLUS_PLUS:\r\n        case Token.MINUS_MINUS:\r\n          if (expr.kind != NodeKind.IDENTIFIER && expr.kind != NodeKind.ELEMENTACCESS && expr.kind != NodeKind.PROPERTYACCESS)\r\n            this.error(DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access, expr.range);\r\n          expr = Node.createUnaryPostfixExpression(token, expr, tn.range(startPos, tn.pos));\r\n          break;\r\n\r\n        // TernaryExpression\r\n        case Token.QUESTION:\r\n          var ifThen = this.parseExpression(tn);\r\n          if (!ifThen)\r\n            return null;\r\n          if (tn.skip(Token.COLON)) {\r\n            var ifElse = this.parseExpression(tn);\r\n            if (!ifElse)\r\n              return null;\r\n            expr = Node.createTernaryExpression(<Expression>expr, <Expression>ifThen, <Expression>ifElse, tn.range(startPos, tn.pos));\r\n          } else {\r\n            this.error(DiagnosticCode._0_expected, tn.range(), \":\");\r\n            return null;\r\n          }\r\n          break;\r\n\r\n        // CommaExpression\r\n        case Token.COMMA:\r\n          var commaExprs = new Array<Expression>(1);\r\n          commaExprs[0] = <Expression>expr;\r\n          do {\r\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\r\n            if (!expr)\r\n              return null;\r\n            commaExprs.push(expr);\r\n          } while (tn.skip(Token.COMMA));\r\n          expr = Node.createCommaExpression(commaExprs, tn.range(startPos, tn.pos));\r\n          break;\r\n\r\n        default:\r\n          next = this.parseExpression(tn, isRightAssociative(token) ? nextPrecedence : 1 + nextPrecedence);\r\n          if (!next)\r\n            return null;\r\n\r\n          // PropertyAccessExpression\r\n          if (token == Token.DOT) {\r\n            if (next.kind == NodeKind.IDENTIFIER)\r\n              expr = Node.createPropertyAccessExpression(<Expression>expr, <IdentifierExpression>next, tn.range(startPos, tn.pos));\r\n            else if (next.kind == NodeKind.CALL) { // join\r\n              var propertyCall = <CallExpression>next;\r\n              if (propertyCall.expression.kind == NodeKind.IDENTIFIER) {\r\n                propertyCall.expression = Node.createPropertyAccessExpression(<Expression>expr, <IdentifierExpression>propertyCall.expression, tn.range(startPos, tn.pos));\r\n              } else {\r\n                this.error(DiagnosticCode.Identifier_expected, propertyCall.expression.range);\r\n                return null;\r\n              }\r\n              expr = propertyCall;\r\n            } else {\r\n              this.error(DiagnosticCode.Identifier_expected, next.range);\r\n              return null;\r\n            }\r\n\r\n          // BinaryExpression\r\n          } else\r\n            expr = Node.createBinaryExpression(token, <Expression>expr, <Expression>next, tn.range(startPos, tn.pos));\r\n\r\n          break;\r\n      }\r\n    }\r\n    return expr;\r\n  }\r\n}\r\n\r\n/** Operator precedence from least to largest. */\r\nexport const enum Precedence {\r\n  COMMA,\r\n  SPREAD,\r\n  YIELD,\r\n  ASSIGNMENT,\r\n  CONDITIONAL,\r\n  LOGICAL_OR,\r\n  LOGICAL_AND,\r\n  BITWISE_OR,\r\n  BITWISE_XOR,\r\n  BITWISE_AND,\r\n  EQUALITY,\r\n  RELATIONAL,\r\n  SHIFT,\r\n  ADDITIVE,\r\n  MULTIPLICATIVE,\r\n  EXPONENTIATED,\r\n  UNARY_PREFIX,\r\n  UNARY_POSTFIX,\r\n  CALL,\r\n  MEMBERACCESS,\r\n  GROUPING,\r\n  INVALID = -1\r\n}\r\n\r\n/** Determines the precedence of a starting token. */\r\nfunction determinePrecedenceStart(kind: Token): i32 {\r\n  switch (kind) {\r\n\r\n    case Token.DOT_DOT_DOT:\r\n      return Precedence.SPREAD;\r\n\r\n    case Token.YIELD:\r\n      return Precedence.YIELD;\r\n\r\n    case Token.EXCLAMATION:\r\n    case Token.TILDE:\r\n    case Token.PLUS:\r\n    case Token.MINUS:\r\n    case Token.PLUS_PLUS:\r\n    case Token.MINUS_MINUS:\r\n    case Token.TYPEOF:\r\n    case Token.VOID:\r\n    case Token.DELETE:\r\n      return Precedence.UNARY_PREFIX;\r\n\r\n    case Token.NEW:\r\n      return Precedence.MEMBERACCESS;\r\n\r\n    default:\r\n      return Precedence.INVALID;\r\n  }\r\n}\r\n\r\n/** Determines the precende of a non-starting token. */\r\nfunction determinePrecedence(kind: Token): i32 {\r\n  switch (kind) {\r\n\r\n    case Token.COMMA:\r\n      return Precedence.COMMA;\r\n\r\n    case Token.EQUALS:\r\n    case Token.PLUS_EQUALS:\r\n    case Token.MINUS_EQUALS:\r\n    case Token.ASTERISK_ASTERISK_EQUALS:\r\n    case Token.ASTERISK_EQUALS:\r\n    case Token.SLASH_EQUALS:\r\n    case Token.PERCENT_EQUALS:\r\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.AMPERSAND_EQUALS:\r\n    case Token.CARET_EQUALS:\r\n    case Token.BAR_EQUALS:\r\n      return Precedence.ASSIGNMENT;\r\n\r\n    case Token.QUESTION:\r\n      return Precedence.CONDITIONAL;\r\n\r\n    case Token.BAR_BAR:\r\n      return Precedence.LOGICAL_OR;\r\n\r\n    case Token.AMPERSAND_AMPERSAND:\r\n      return Precedence.LOGICAL_AND;\r\n\r\n    case Token.BAR:\r\n      return Precedence.BITWISE_OR;\r\n\r\n    case Token.CARET:\r\n      return Precedence.BITWISE_XOR;\r\n\r\n    case Token.AMPERSAND:\r\n      return Precedence.BITWISE_AND;\r\n\r\n    case Token.EQUALS_EQUALS:\r\n    case Token.EXCLAMATION_EQUALS:\r\n    case Token.EQUALS_EQUALS_EQUALS:\r\n    case Token.EXCLAMATION_EQUALS_EQUALS:\r\n      return Precedence.EQUALITY;\r\n\r\n    case Token.AS:\r\n    case Token.IN:\r\n    case Token.INSTANCEOF:\r\n    case Token.LESSTHAN:\r\n    case Token.GREATERTHAN:\r\n    case Token.LESSTHAN_EQUALS:\r\n    case Token.GREATERTHAN_EQUALS:\r\n      return Precedence.RELATIONAL;\r\n\r\n    case Token.LESSTHAN_LESSTHAN:\r\n    case Token.GREATERTHAN_GREATERTHAN:\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN:\r\n      return Precedence.SHIFT;\r\n\r\n    case Token.PLUS:\r\n    case Token.MINUS:\r\n      return Precedence.ADDITIVE;\r\n\r\n    case Token.ASTERISK:\r\n    case Token.SLASH:\r\n    case Token.PERCENT:\r\n      return Precedence.MULTIPLICATIVE;\r\n\r\n    case Token.ASTERISK_ASTERISK:\r\n      return Precedence.EXPONENTIATED;\r\n\r\n    case Token.PLUS_PLUS:\r\n    case Token.MINUS_MINUS:\r\n      return Precedence.UNARY_POSTFIX;\r\n\r\n    case Token.DOT:\r\n    case Token.NEW:\r\n    case Token.OPENBRACKET:\r\n      return Precedence.MEMBERACCESS;\r\n\r\n    default:\r\n      return Precedence.INVALID;\r\n  }\r\n}\r\n\r\n/** Determines whether a non-starting token is right associative. */\r\nfunction isRightAssociative(kind: Token): bool {\r\n  switch (kind) {\r\n\r\n    case Token.EQUALS:\r\n    case Token.PLUS_EQUALS:\r\n    case Token.MINUS_EQUALS:\r\n    case Token.ASTERISK_ASTERISK_EQUALS:\r\n    case Token.ASTERISK_EQUALS:\r\n    case Token.SLASH_EQUALS:\r\n    case Token.PERCENT_EQUALS:\r\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.AMPERSAND_EQUALS:\r\n    case Token.CARET_EQUALS:\r\n    case Token.BAR_EQUALS:\r\n    case Token.QUESTION:\r\n    case Token.ASTERISK_ASTERISK:\r\n      return true;\r\n\r\n    default:\r\n      return false;\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/parser.ts"],"sourceRoot":""}
{"version":3,"sources":["webpack://assemblyscript/webpack/universalModuleDefinition","webpack://assemblyscript/webpack/bootstrap","webpack://assemblyscript/./src/program.ts","webpack://assemblyscript/./src/util/index.ts","webpack://assemblyscript/./src/diagnostics.ts","webpack://assemblyscript/./src/module.ts","webpack://assemblyscript/./src/ast.ts","webpack://assemblyscript/(webpack)/buildin/global.js","webpack://assemblyscript/./src/tokenizer.ts","webpack://assemblyscript/./src/types.ts","webpack://assemblyscript/./src/compiler.ts","webpack://assemblyscript/./src/diagnosticMessages.generated.ts","webpack://assemblyscript/./src/parser.ts","webpack://assemblyscript/./src/definitions.ts","webpack://assemblyscript/./src/decompiler.ts","webpack://assemblyscript/./src/index.ts","webpack://assemblyscript/./src/glue/js/float.js","webpack://assemblyscript/./node_modules/long/src/long.js","webpack://assemblyscript/./src/glue/js/i64.js","webpack://assemblyscript/./src/util/binary.ts","webpack://assemblyscript/./src/util/text.ts","webpack://assemblyscript/./src/util/path.ts","webpack://assemblyscript/./src/util/charcode.ts","webpack://assemblyscript/./src/builtins.ts","webpack://assemblyscript/external \"binaryen\"","webpack://assemblyscript/./src/glue/js/binaryen.js","webpack://assemblyscript/./std/portable/memory.js","webpack://assemblyscript/./std/portable/math.js","webpack://assemblyscript/./std/portable.js","webpack://assemblyscript/./src/glue/js/index.ts"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__22__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","diagnostics_1","types_1","ast_1","module_1","PATH_DELIMITER","PARENT_SUBST","GETTER_PREFIX","SETTER_PREFIX","INSTANCE_DELIMITER","STATIC_DELIMITER","LIBRARY_SUBST","LIBRARY_PREFIX","QueuedExport","QueuedImport","TypeAlias","noTypesYet","Map","Program","_super","diagnostics","_this","diagnosticsOffset","elementsLookup","typesLookup","typeAliases","fileLevelExports","moduleLevelExports","arrayPrototype","stringInstance","sources","__extends","initialize","options","Type","i8","i16","i32","i64","isizeType","u8","u16","u32","u64","usizeType","bool","f32","f64","void","queuedExports","queuedImports","Array","queuedDerivedClasses","k","length","statements","j","statement","kind","NodeKind","CLASSDECLARATION","initializeClass","ENUMDECLARATION","initializeEnum","EXPORT","initializeExports","FUNCTIONDECLARATION","initializeFunction","IMPORT","initializeImports","INTERFACEDECLARATION","initializeInterface","NAMESPACEDECLARATION","initializeNamespace","TYPEDECLARATION","initializeTypeAlias","VARIABLE","initializeVariables","queuedImport","element","tryResolveImport","referencedName","set","internalName","splice","referencedNameAlt","error","DiagnosticCode","Module_0_has_no_exported_member_1","declaration","range","parent","path","externalName","text","queuedExports_1","__values","queuedExports_1_1","next","done","_a","__read","exportName","queuedExport","currentExport","isReExport","member","setExportAndCheckLibrary","Cannot_find_name_0","derivedDeclaration","derivedType","assert","extendsType","resolved","resolveIdentifier","ElementKind","CLASS_PROTOTYPE","A_class_may_only_extend_another_class","basePrototype","globalAliases","globalAliases_1","globalAliases_1_1","_c","alias","stringPrototype","resolve","has","Duplicate_identifier_0","programLevelInternalName","type","checkGlobalOptions","parentNode","is","CommonFlags","GLOBAL","source","isLibrary","SOURCE","simpleName","BUILTIN","namespace","fileLevelInternalName","ClassPrototype","implementsTypes","numImplementsTypes","UNMANAGED","Structs_cannot_implement_interfaces","Range","join","Operation_not_supported","push","members","MODULE_EXPORT","Export_declaration_conflicts_with_exported_declaration_of_0","isEntry","memberDeclarations","memberDeclaration","FIELDDECLARATION","initializeField","METHODDECLARATION","isAny","GET","SET","initializeAccessor","initializeMethod","Error","classPrototype","STATIC","staticField","Global","instanceMembers","instanceField","FieldPrototype","CONSTRUCTOR","FunctionPrototype","constructorPrototype","Multiple_constructor_implementations_are_not_allowed","checkOperators","decorators","decorator","decoratorKind","DecoratorKind","OPERATOR","numArgs","arguments","firstArg","LITERAL","literalKind","LiteralKind","STRING","fnIndexedGet","fnIndexedSet","fnConcat","fnSubtract","fnMultiply","fnDivide","fnFractional","fnBitwiseAnd","fnBitwiseOr","fnBitwiseXor","fnEquals","fnNotEquals","fnGreaterThan","fnGreaterThanEquals","fnLessThan","fnLessThanEquals","String_literal_expected","Expected_0_arguments_but_got_1","toString","CUSTOM","internalPropertyName","propertyElement","isGetter","isNew","PROPERTY","getterPrototype","setterPrototype","Property","baseName","staticName","staticPrototype","instanceName","instancePrototype","Enum","values","initializeEnumValue","enm","isModuleExport","EnumValue","initializeExport","internalPath","identifier","referencedElement","seen","Set","add","declarations","initializeImport","namespaceName","indexPart","endsWith","substring","InterfacePrototype","queuedExtendingClasses","parentNamespace","Namespace","existingExport","Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local","typeParameters","global_1","resolveSignature","node","contextualTypeArguments","reportNotFound","explicitThisType","thisType","resolveType","parameterTypeNodes","parameterTypes","numParameters","parameterNames","requiredParameters","hasRest","parameterTypeNode","parameterKind","ParameterKind","DEFAULT","REST","parameterType","returnType","returnTypeNode","signature","Signature","SIGNATURE","asFunction","typeNode","globalName","localName","instance","resolveUsingTypeArguments","typeArguments","paramTypes","paramType","instanceKey","typesToString","placeholderType","resolveTypeArguments","typeArgumentNodes","alternativeReportNode","parameterCount","argumentCount","Expected_0_type_arguments_but_got_1","atEnd","contextualFunction","contextualEnum","ENUMVALUE","resolvedElement","ResolvedElement","flow","getScopedLocal","resolvePropertyAccess","propertyAccess","targetExpression","expression","resolveExpression","targetType","target","propertyName","LOCAL","FIELD","classReference","Property_0_does_not_exist_on_type_1","CLASS","withTarget","base","resolveElementAccess","elementAccess","indexedGetName","indexedGet","FUNCTION_PROTOTYPE","Index_signature_is_missing_in_type_0","PARENTHESIZED","ASSERTION","toType","classType","BINARY","THIS","memberOf","_this_cannot_be_referenced_in_current_location","SUPER","_super_can_only_be_referenced_in_a_derived_class","IDENTIFIER","PROPERTYACCESS","ELEMENTACCESS","CALL","signatureReference","functionTarget","cachedFunctionTarget","FunctionTarget","DiagnosticEmitter","Element","program","flags","NONE","flag","NAMESPACE","ENUM","constantValue","enum","ConstantValueKind","VariableLikeElement","constantValueKind","withConstantIntegerValue","lo","hi","constantIntegerValue","i64_new","CONST","INLINED","withConstantFloatValue","constantFloatValue","Parameter","initializer","Local","index","scopedGlobal","instances","classTypeArguments","functionTypeArguments","isInstance","INSTANCE","inheritedTypeArguments","inheritedTypeArguments_1","inheritedTypeArguments_1_1","inheritedName","inheritedType","classTypeParameters","numClassTypeParameters","numFunctionTypeArguments","signatureNode","functionTypeParameters","classInstance","signatureParameters","signatureParameterCount","parameterDeclaration","Function","resolvePartial","partialPrototype","reportNode","resolvedTypeArguments","GENERIC","resolveBuiltinTypeArguments","resolvedType","FUNCTION","locals","additionalLocals","breakContext","debugLocations","ref","functionTableIndex","trampoline","outerScope","nextBreakId","breakStack","tempI32s","tempI64s","tempF32s","tempF64s","AMBIENT","DECLARE","localIndex","contextualTypeArguments_1","contextualTypeArguments_1_1","parameterName","getParameterName","Flow","create","addLocal","local","getTempLocal","temps","toNativeType","NativeType","I32","I64","F32","F64","ret","pop","freeTempLocal","getAndFreeTempLocal","enterBreakContext","id","leaveBreakContext","finalize","sourceMap","debugLocation","setDebugLocation","debugInfoRef","debugInfoIndex","line","column","FUNCTION_TARGET","toSignatureString","FIELD_PROTOTYPE","Field","memoryOffset","inheritedTypeArguments_2","inheritedTypeArguments_2_1","baseClass","baseClassType","SEALED","Class_0_is_sealed_and_cannot_be_extended","Structs_cannot_extend_classes_and_vice_versa","Class","currentMemoryOffset","_d","inheritedMember","partialConstructor","constructorInstance","_f","_g","fieldDeclaration","fieldType","fieldInstance","byteSize","methodPrototype","instanceProperty","partialGetterPrototype","partialSetterPrototype","asClass","_b","baseType","isAssignableTo","current","INTERFACE_PROTOTYPE","Interface","INTERFACE","FlowFlags","scopedLocals","currentFunction","parentFlow","continueLabel","breakLabel","unset","enterBranchOrScope","branch","leaveBranchOrScope","scopedLocal","addScopedLocal","__export","DiagnosticCategory","diagnosticMessages_generated_1","util_1","diagnosticMessages_generated_2","diagnosticCategoryToString","category","INFO","WARNING","ERROR","diagnosticCategoryToColor","COLOR_BLUE","COLOR_YELLOW","COLOR_RED","diagnosticCodeToString","COLOR_RESET","DiagnosticMessage","code","message","arg0","arg1","arg2","replace","createInfo","createWarning","createError","withRange","normalizedPath","formatDiagnosticContext","useColors","len","start","end","isLineBreak","charCodeAt","sb","formatDiagnosticMessage","showContext","emitDiagnostic","info","warning","ExpressionId","compiler_1","_BinaryenTypeNone","_BinaryenTypeInt32","_BinaryenTypeInt64","_BinaryenTypeFloat32","_BinaryenTypeFloat64","_BinaryenTypeUnreachable","_BinaryenTypeAuto","_BinaryenInvalidId","_BinaryenBlockId","_BinaryenIfId","_BinaryenLoopId","_BinaryenBreakId","_BinaryenSwitchId","_BinaryenCallId","_BinaryenCallImportId","_BinaryenCallIndirectId","_BinaryenGetLocalId","_BinaryenSetLocalId","_BinaryenGetGlobalId","_BinaryenSetGlobalId","_BinaryenLoadId","_BinaryenStoreId","_BinaryenConstId","_BinaryenUnaryId","_BinaryenBinaryId","_BinaryenSelectId","_BinaryenDropId","_BinaryenReturnId","_BinaryenHostId","_BinaryenNopId","_BinaryenUnreachableId","_BinaryenAtomicCmpxchgId","_BinaryenAtomicRMWId","_BinaryenAtomicWaitId","_BinaryenAtomicWakeId","UnaryOp","_BinaryenClzInt32","_BinaryenCtzInt32","_BinaryenPopcntInt32","_BinaryenNegFloat32","_BinaryenAbsFloat32","_BinaryenCeilFloat32","_BinaryenFloorFloat32","_BinaryenTruncFloat32","_BinaryenNearestFloat32","_BinaryenSqrtFloat32","_BinaryenEqZInt32","_BinaryenClzInt64","_BinaryenCtzInt64","_BinaryenPopcntInt64","_BinaryenNegFloat64","_BinaryenAbsFloat64","_BinaryenCeilFloat64","_BinaryenFloorFloat64","_BinaryenTruncFloat64","_BinaryenNearestFloat64","_BinaryenSqrtFloat64","_BinaryenEqZInt64","_BinaryenExtendSInt32","_BinaryenExtendUInt32","_BinaryenWrapInt64","_BinaryenTruncSFloat32ToInt32","_BinaryenTruncSFloat32ToInt64","_BinaryenTruncUFloat32ToInt32","_BinaryenTruncUFloat32ToInt64","_BinaryenTruncSFloat64ToInt32","_BinaryenTruncSFloat64ToInt64","_BinaryenTruncUFloat64ToInt32","_BinaryenTruncUFloat64ToInt64","_BinaryenReinterpretFloat32","_BinaryenReinterpretFloat64","_BinaryenConvertSInt32ToFloat32","_BinaryenConvertSInt32ToFloat64","_BinaryenConvertUInt32ToFloat32","_BinaryenConvertUInt32ToFloat64","_BinaryenConvertSInt64ToFloat32","_BinaryenConvertSInt64ToFloat64","_BinaryenConvertUInt64ToFloat32","_BinaryenConvertUInt64ToFloat64","_BinaryenPromoteFloat32","_BinaryenDemoteFloat64","_BinaryenReinterpretInt32","_BinaryenReinterpretInt64","BinaryOp","_BinaryenAddInt32","_BinaryenSubInt32","_BinaryenMulInt32","_BinaryenDivSInt32","_BinaryenDivUInt32","_BinaryenRemSInt32","_BinaryenRemUInt32","_BinaryenAndInt32","_BinaryenOrInt32","_BinaryenXorInt32","_BinaryenShlInt32","_BinaryenShrUInt32","_BinaryenShrSInt32","_BinaryenRotLInt32","_BinaryenRotRInt32","_BinaryenEqInt32","_BinaryenNeInt32","_BinaryenLtSInt32","_BinaryenLtUInt32","_BinaryenLeSInt32","_BinaryenLeUInt32","_BinaryenGtSInt32","_BinaryenGtUInt32","_BinaryenGeSInt32","_BinaryenGeUInt32","_BinaryenAddInt64","_BinaryenSubInt64","_BinaryenMulInt64","_BinaryenDivSInt64","_BinaryenDivUInt64","_BinaryenRemSInt64","_BinaryenRemUInt64","_BinaryenAndInt64","_BinaryenOrInt64","_BinaryenXorInt64","_BinaryenShlInt64","_BinaryenShrUInt64","_BinaryenShrSInt64","_BinaryenRotLInt64","_BinaryenRotRInt64","_BinaryenEqInt64","_BinaryenNeInt64","_BinaryenLtSInt64","_BinaryenLtUInt64","_BinaryenLeSInt64","_BinaryenLeUInt64","_BinaryenGtSInt64","_BinaryenGtUInt64","_BinaryenGeSInt64","_BinaryenGeUInt64","_BinaryenAddFloat32","_BinaryenSubFloat32","_BinaryenMulFloat32","_BinaryenDivFloat32","_BinaryenCopySignFloat32","_BinaryenMinFloat32","_BinaryenMaxFloat32","_BinaryenEqFloat32","_BinaryenNeFloat32","_BinaryenLtFloat32","_BinaryenLeFloat32","_BinaryenGtFloat32","_BinaryenGeFloat32","_BinaryenAddFloat64","_BinaryenSubFloat64","_BinaryenMulFloat64","_BinaryenDivFloat64","_BinaryenCopySignFloat64","_BinaryenMinFloat64","_BinaryenMaxFloat64","_BinaryenEqFloat64","_BinaryenNeFloat64","_BinaryenLtFloat64","_BinaryenLeFloat64","_BinaryenGtFloat64","_BinaryenGeFloat64","HostOp","_BinaryenPageSize","_BinaryenCurrentMemory","_BinaryenGrowMemory","_BinaryenHasFeature","AtomicRMWOp","_BinaryenAtomicRMWAdd","_BinaryenAtomicRMWSub","_BinaryenAtomicRMWAnd","_BinaryenAtomicRMWOr","_BinaryenAtomicRMWXor","_BinaryenAtomicRMWXchg","MemorySegment","buffer","offset","segment","Module","_BinaryenModuleCreate","out","allocate_memory","createFrom","cArr","allocU8Array","_BinaryenModuleRead","free_memory","changetype","addFunctionType","result","cStr","allocString","allocI32Array","_BinaryenAddFunctionType","getFunctionTypeBySignature","_BinaryenGetFunctionTypeBySignature","createI32","_BinaryenLiteralInt32","_BinaryenConst","createI64","valueLow","valueHigh","_BinaryenLiteralInt64","createF32","_BinaryenLiteralFloat32","createF64","_BinaryenLiteralFloat64","createUnary","op","expr","_BinaryenUnary","createBinary","left","right","_BinaryenBinary","createHost","operands","_BinaryenHost","createGetLocal","_BinaryenGetLocal","createTeeLocal","_BinaryenTeeLocal","createGetGlobal","_BinaryenGetGlobal","createLoad","bytes","signed","ptr","_BinaryenLoad","createStore","_BinaryenStore","createAtomicLoad","_BinaryenAtomicLoad","createAtomicStore","_BinaryenAtomicStore","createAtomicRMW","_BinaryenAtomicRMW","createAtomicCmpxchg","expected","replacement","_BinaryenAtomicCmpxchg","createAtomicWait","timeout","expectedType","_BinaryenAtomicWait","createAtomicWake","wakeCount","_BinaryenAtomicWake","createSetLocal","_BinaryenSetLocal","createSetGlobal","_BinaryenSetGlobal","createBlock","label","children","None","_BinaryenBlock","createBreak","condition","_BinaryenBreak","createDrop","_BinaryenDrop","createLoop","body","_BinaryenLoop","createIf","ifTrue","ifFalse","_BinaryenIf","createNop","_BinaryenNop","createReturn","_BinaryenReturn","createSelect","_BinaryenSelect","createSwitch","names","defaultName","numNames","strs","_BinaryenSwitch","createCall","_BinaryenCall","createCallImport","_BinaryenCallImport","createCallIndirect","typeName","_BinaryenCallIndirect","createUnreachable","_BinaryenUnreachable","addGlobal","mutable","_BinaryenAddGlobal","addFunction","varTypes","_BinaryenAddFunction","removeFunction","_BinaryenRemoveFunction","addFunctionExport","cStr1","cStr2","_BinaryenAddFunctionExport","addTableExport","_BinaryenAddTableExport","addMemoryExport","_BinaryenAddMemoryExport","addGlobalExport","_BinaryenAddGlobalExport","removeExport","_BinaryenRemoveExport","addFunctionImport","externalModuleName","externalBaseName","functionType","cStr3","_BinaryenAddFunctionImport","addTableImport","_BinaryenAddTableImport","addMemoryImport","_BinaryenAddMemoryImport","addGlobalImport","globalType","_BinaryenAddGlobalImport","removeImport","_BinaryenRemoveImport","setMemory","initial","maximum","segments","segs","offs","sizs","Target","WASM64","i64_low","i64_high","cArr1","cArr2","cArr3","_BinaryenSetMemory","setFunctionTable","funcs","_BinaryenSetFunctionTable","setStart","func","_BinaryenSetStart","setOptimizeLevel","level","_BinaryenSetOptimizeLevel","setShrinkLevel","_BinaryenSetShrinkLevel","setDebugInfo","on","_BinaryenSetDebugInfo","optimize","_BinaryenFunctionOptimize","_BinaryenModuleOptimize","runPasses","passes","_BinaryenFunctionRunPasses","_BinaryenModuleRunPasses","validate","_BinaryenModuleValidate","interpret","_BinaryenModuleInterpret","toBinary","sourceMapUrl","binaryPtr","sourceMapPtr","_BinaryenModuleAllocateAndWrite","readInt","binaryBytes","BinaryModule","output","Uint8Array","load","readBuffer","readString","toText","toAsmjs","dispose","_BinaryenModuleDispose","createRelooper","Relooper","cloneExpression","noSideEffects","maxDepth","MAX_VALUE","nested1","nested2","_BinaryenExpressionGetId","Const","_BinaryenExpressionGetType","_BinaryenConstGetValueI32","_BinaryenConstGetValueI64Low","_BinaryenConstGetValueI64High","_BinaryenConstGetValueF32","_BinaryenConstGetValueF64","GetLocal","_BinaryenGetLocalGetIndex","GetGlobal","_BinaryenGetGlobalGetName","Load","_BinaryenLoadGetPtr","_BinaryenLoadIsAtomic","_BinaryenLoadGetBytes","_BinaryenLoadGetOffset","_BinaryenLoadIsSigned","_BinaryenLoadGetAlign","Unary","_BinaryenUnaryGetValue","_BinaryenUnaryGetOp","Binary","_BinaryenBinaryGetLeft","_BinaryenBinaryGetRight","_BinaryenBinaryGetOp","addDebugInfoFile","_BinaryenModuleAddDebugInfoFileName","getDebugInfoFile","_BinaryenModuleGetDebugInfoFileName","fileIndex","lineNumber","columnNumber","_BinaryenFunctionSetDebugLocation","MAX_MEMORY_WASM32","MAX_MEMORY_WASM64","relooper","_RelooperCreate","createStub","addBlock","_RelooperAddBlock","addBranch","from","to","_RelooperAddBranch","addBlockWithSwitch","_RelooperAddBlockWithSwitch","addBranchForSwitch","indexes","_RelooperAddBranchForSwitch","renderAndDispose","entry","labelHelper","_RelooperRenderAndDispose","u8s","numValues","idx","store","i32s","val","str","u","stringLengthUTF8","cp","u1","u2","u3","u4","arr","String","fromCodePoints","program_1","tokenizer_1","Token","Node","createType","isNullable","TypeNode","setParent","createOmittedType","createIdentifierExpression","createTypeParameter","elem","TypeParameterNode","createParameter","ParameterNode","createSignature","parameters","sig","SignatureNode","createDecorator","args","stmt","DecoratorNode","OFFSET","createComment","CommentNode","commentKind","IdentifierExpression","createEmptyIdentifierExpression","createArrayLiteralExpression","elements","ArrayLiteralExpression","elementExpressions","nodes","setParentIfNotNull","createAssertionExpression","assertionKind","AssertionExpression","createBinaryExpression","operator","BinaryExpression","createCallExpression","typeArgs","CallExpression","createCommaExpression","expressions","CommaExpression","createConstructorExpression","ConstructorExpression","createElementAccessExpression","ElementAccessExpression","elementExpression","createFalseExpression","FalseExpression","createFloatLiteralExpression","FloatLiteralExpression","createFunctionExpression","FunctionExpression","ARROW","createIntegerLiteralExpression","IntegerLiteralExpression","createNewExpression","NewExpression","createNullExpression","NullExpression","createParenthesizedExpression","ParenthesizedExpression","createPropertyAccessExpression","PropertyAccessExpression","createRegexpLiteralExpression","pattern","RegexpLiteralExpression","patternFlags","createTernaryExpression","ifThen","ifElse","TernaryExpression","createStringLiteralExpression","StringLiteralExpression","createSuperExpression","SuperExpression","createThisExpression","ThisExpression","createTrueExpression","TrueExpression","createUnaryPostfixExpression","operand","UnaryPostfixExpression","createUnaryPrefixExpression","UnaryPrefixExpression","createBlockStatement","BlockStatement","createBreakStatement","BreakStatement","createClassDeclaration","ClassDeclaration","createContinueStatement","ContinueStatement","createDoStatement","DoStatement","createEmptyStatement","EmptyStatement","createEnumDeclaration","EnumDeclaration","createEnumValueDeclaration","EnumValueDeclaration","createExportStatement","ExportStatement","normalizePath","startsWith","resolvePath","mangleInternalPath","createExportImportStatement","ExportImportStatement","createExportMember","ExportMember","createExpressionStatement","ExpressionStatement","createIfStatement","IfStatement","createImportStatement","decls","ImportStatement","createImportStatementWithWildcard","createImportDeclaration","ImportDeclaration","createInterfaceDeclaration","InterfaceDeclaration","createFieldDeclaration","FieldDeclaration","createForStatement","incrementor","ForStatement","createFunctionDeclaration","FunctionDeclaration","createMethodDeclaration","MethodDeclaration","createNamespaceDeclaration","NamespaceDeclaration","createReturnStatement","ReturnStatement","createSwitchStatement","cases","SwitchStatement","createSwitchCase","SwitchCase","createThrowStatement","ThrowStatement","createTryStatement","catchVariable","catchStatements","finallyStatements","TryStatement","createTypeDeclaration","TypeDeclaration","createVariableStatement","VariableStatement","createVariableDeclaration","VariableDeclaration","createVoidStatement","VoidStatement","createWhileStatement","WhileStatement","CommonTypeNode","apply","TYPE","TYPEPARAMETER","PARAMETER","implicitFieldDeclaration","DECORATOR","CommentKind","COMMENT","Expression","LiteralExpression","ARRAY","AssertionKind","COMMA","FLOAT","INTEGER","NEW","NULL","REGEXP","TERNARY","TRUE","FALSE","UnaryExpression","UNARYPOSTFIX","UNARYPREFIX","SourceKind","Statement","Source","tokenizer","sourceKind","ENTRY","LIBRARY","DeclarationStatement","cachedProgramLevelInternalName","cachedFileLevelInternalName","mangleInternalName","isTopLevelExport","needsExplicitExport","VariableLikeDeclarationStatement","BLOCK","BREAK","CONTINUE","DO","EMPTY","ENUMVALUEDECLARATION","EXPORTIMPORT","EXPORTMEMBER","EXPRESSION","parameterIndex","FOR","IF","IMPORTDECLARATION","RETURN","SWITCHCASE","SWITCH","THROW","TRY","VARIABLEDECLARATION","VOID","WHILE","getFirstDecorator","asGlobal","hasDecorator","g","eval","e","window","tokenFomKeyword","ABSTRACT","AS","ASYNC","AWAIT","CASE","CATCH","DEBUGGER","DELETE","ELSE","EXTENDS","FINALLY","FROM","IMPLEMENTS","IN","INSTANCEOF","IS","KEYOF","LET","MODULE","OF","PACKAGE","PRIVATE","PROTECTED","PUBLIC","READONLY","TYPEOF","VAR","WITH","YIELD","INVALID","tokenIsAlsoIdentifier","token","operatorTokenToString","DOT_DOT_DOT","LESSTHAN","GREATERTHAN","LESSTHAN_EQUALS","GREATERTHAN_EQUALS","EQUALS_EQUALS","EXCLAMATION_EQUALS","EQUALS_EQUALS_EQUALS","EXCLAMATION_EQUALS_EQUALS","PLUS","MINUS","ASTERISK_ASTERISK","ASTERISK","SLASH","PERCENT","PLUS_PLUS","MINUS_MINUS","LESSTHAN_LESSTHAN","GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_GREATERTHAN","AMPERSAND","BAR","CARET","EXCLAMATION","TILDE","AMPERSAND_AMPERSAND","BAR_BAR","EQUALS","PLUS_EQUALS","MINUS_EQUALS","ASTERISK_EQUALS","ASTERISK_ASTERISK_EQUALS","SLASH_EQUALS","PERCENT_EQUALS","LESSTHAN_LESSTHAN_EQUALS","GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS","AMPERSAND_EQUALS","BAR_EQUALS","CARET_EQUALS","a","b","pos","Tokenizer","tokenPos","nextToken","nextTokenPos","nextTokenOnNewLine","onComment","preferIdentifier","unsafeNext","maxTokenLength","STRINGLITERAL","OPENPAREN","CLOSEPAREN","isDecimalDigit","FLOATLITERAL","DOT","commentStartPos","LINE","TRIPLE","closed","_0_expected","testInteger","INTEGERLITERAL","COLON","SEMICOLON","EQUALS_GREATERTHAN","QUESTION","OPENBRACKET","CLOSEBRACKET","OPENBRACE","CLOSEBRACE","AT","isIdentifierStart","isKeywordCharacter","posBefore","isIdentifierPart","keywordToken","isWhiteSpace","Invalid_character","ENDOFFILE","peek","checkOnNewLine","maxCompoundLength","tokenBefore","tokenPosBefore","skip","mark","state","reusableState","State","discard","reset","readIdentifier","quote","Unterminated_string_literal","readEscapeSequence","Unexpected_end_of_text","readExtendedUnicodeEscape","readUnicodeEscape","fromCharCode","readRegexpPattern","escaped","Unterminated_regular_expression_literal","readRegexpFlags","Invalid_regular_expression_flags","readInteger","readHexInteger","readBinaryInteger","readOctalInteger","isOctalDigit","Octal_literals_are_not_allowed_in_strict_mode","readDecimalInteger","i64_16","i64_add","i64_mul","Hexadecimal_digit_expected","i64_10","Digit_expected","i64_8","Octal_digit_expected","i64_2","i64_1","Binary_digit_expected","readFloat","readDecimalFloat","parseFloat","readHexFloat","remain","value32","invalid","An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive","Unterminated_Unicode_escape_sequence","finish","TypeKind","TypeFlags","size","nullableType","ceil","nonNullableType","computeSmallIntegerShift","computeSmallIntegerMask","asNullable","signednessIsImportant","currentClass","targetClass","targetFunction","commonCompatible","kindOnly","toNativeZero","toNativeOne","toNativeNegOne","isize32","isize64","usize32","usize64","typesToNativeTypes","types","numTypes","getGenericParameterName","thisThisType","targetThisType","thisParameterTypes","targetParameterTypes","thisParameterType","targetParameterType","thisReturnType","targetReturnType","includeThis","optionalStart","restIndex","cachedGenericParameterNames","builtins_1","Options","WASM32","noTreeShaking","noAssert","noMemory","importMemory","importTable","memoryBase","ConversionKind","Compiler","outerFunction","currentEnum","currentType","startFunctionBody","memorySegments","stringSegments","functionTable","argumentCountRef","files","f32ModInstance","f64ModInstance","f32PowInstance","f64PowInstance","max","compile","startFunctionPrototype","startFunctionInstance","startFunction","compileSource","funcRef","typeRef","ensureFunctionType","i64_align","isWasm64","pages","i64_shr_u","functionTableSize","entries","compileSourceByPath","normalizedPathWithoutExtension","File_0_not_found","isGeneric","compileClassDeclaration","compileEnumDeclaration","compileFunctionDeclaration","compileNamespaceDeclaration","variableInit","compileVariableStatement","compileExportStatement","previousFunction","compileStatement","compileGlobalDeclaration","compileGlobal","global","COMPILED","initExpr","Type_expected","compileExpression","Type_0_is_not_assignable_to_type_1","nativeType","isConstant","MODULE_IMPORT","initializeInStart","compileInlineConstant","precomputeExpressionRef","Compiling_constant_with_non_constant_initializer_as_mutable","isTopLevel","compileEnum","previousValue","initInStart","valueDeclaration","AddI32","Cannot_export_a_mutable_global","compileFunctionUsingTypeArguments","compileFunction","resultType","An_implementation_cannot_be_declared_in_ambient_contexts","Function_implementation_is_missing_or_not_immediately_following_the_declaration","isConstructor","nativeSizeType","makeConditionalAllocate","A_function_whose_declared_type_is_not_void_must_return_a_value","compileInterfaceDeclaration","compileNamespace","ns","compileClassUsingTypeArguments","internalExportName","functionInstance","functionDeclaration","globalDeclaration","compileClass","addMemorySegment","alignment","ensureFunctionTableEntry","TRAMPOLINE","ensureTrampoline","compileBlockStatement","compileBreakStatement","compileContinueStatement","compileDoStatement","compileEmptyStatement","compileExpressionStatement","compileForStatement","compileIfStatement","compileReturnStatement","compileSwitchStatement","compileThrowStatement","compileTryStatement","compileVoidStatement","compileWhileStatement","addDebugLocation","compileStatements","numStatements","stmts","stmtReturns","stmtThrows","stmtAllocates","A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement","A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement","previousBreakLabel","previousContinueLabel","condExpr","makeIsTrueish","context","alwaysReturns","alwaysThrows","alwaysAllocates","GENERIC_CONTEXT","ifTrueExpr","ifTrueReturns","ifTrueThrows","ifTrueAllocates","ifFalseExpr","ifFalseReturns","ifFalseThrows","ifFalseAllocates","tempLocal","tempLocalIndex","numCases","breaks","breakIndex","defaultIndex","EqI32","currentBlock","fallsThrough","nextLabel","isKnownGlobal","numDeclarations","initializers","init","isInlined","_const_declarations_must_be_initialized","compileAssignmentWithValue","contextualType","retainType","shift","mask","conversionKind","wrapSmallIntegers","compileAssertionExpression","compileBinaryExpression","compileCallExpression","compileCommaExpression","compileElementAccessExpression","compileFunctionExpression","compileIdentifierExpression","compileLiteralExpression","compileNewExpression","compileParenthesizedExpression","compilePropertyAccessExpression","compileTernaryExpression","compileUnaryPostfixExpression","compileUnaryPrefixExpression","convertExpression","compileExpressionRetainType","precomputeExpression","_BinaryenFunctionGetBody","fromType","Conversion_from_type_0_to_1_requires_an_explicit_cast","PromoteF32","DemoteF64","TruncF32ToI64","TruncF32ToI32","makeSmallIntegerWrap","TruncF32ToU64","TruncF32ToU32","TruncF64ToI64","TruncF64ToI32","TruncF64ToU64","TruncF64ToU32","ConvertI64ToF32","ConvertU64ToF32","ConvertI32ToF32","ConvertU32ToF32","ConvertI64ToF64","ConvertU64ToF64","ConvertI32ToF64","ConvertU32ToF64","WrapI64","ExtendI32","ExtendU32","leftExpr","leftType","rightExpr","rightType","commonType","compound","possiblyOverflows","Operator_0_cannot_be_applied_to_types_1_and_2","LtI32","LtI64","LtU32","operatorName","compileOperatorOverload","LtU64","LtF32","LtF64","GtI32","GtI64","GtU32","GtU64","GtF32","GtF64","LeI32","LeI64","LeU32","LeU64","LeF32","LeF64","GeI32","GeI64","GeU32","GeU64","GeF32","GeF64","EqI64","EqF32","EqF64","NeI32","NeI64","NeF32","NeF64","compileAssignment","AddI64","AddF32","AddF64","SubI32","SubI64","SubF32","SubF64","MulI32","MulI64","MulF32","MulF64","makeCallDirect","DivI32","DivI64","DivU32","DivU64","DivF32","DivF64","RemI32","RemI64","RemU32","RemU64","ShlI32","ShlI64","The_0_operator_cannot_be_applied_to_type_1","ShrI32","ShrI64","ShrU32","ShrU64","AndI32","AndI64","OrI32","OrI64","XorI32","XorI64","operatorPrototype","operatorInstance","valueExpression","elementType","Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property","resolvedIndexedSet","valueExpr","valueWithCorrectType","tee","isInstanceTarget","targetExpr","setterInstance","thisArg","getterInstance","nativeReturnType","setElementName","setElement","elementExpr","tempLocalTarget","tempLocalElement","Index_signature_in_type_0_only_permits_reading","indexArg","compileCall","compileCallDirect","Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures","compileCallIndirect","checkCallSignature","numArguments","hasThis","minimum","Expected_at_least_0_arguments_but_got_1","argumentExpressions","numArgumentsInclThis","original","originalSignature","originalName","originalParameterTypes","originalParameterDeclarations","commonReturnType","commonThisType","minArguments","minOperands","maxArguments","maxOperands","numOptional","forwardedOperands","operandIndex","trampolineSignature","trampolineName","ofN","numOperands","isCallImport","ensureArgumentCount","makeCallIndirect","numExpressions","exprs","retainConstantType","superType","localType","compileGetConstant","A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums","implicitNegate","compileStaticArray","floatValue","intValue","i64_sub","i64_is_i8","i64_is_u8","i64_is_i16","i64_is_u16","i64_is_i32","i64_is_u32","i64_is_bool","i64_is_f32","i64_to_f32","i64_is_f64","i64_to_f64","compileStaticString","stringValue","stringSegment","stringLength","stringBuffer","stringOffset","stringType","isStatic","arrayType","memorySize","elementSize","Int32Array","Float32Array","Float64Array","usizeTypeSize","headerSize","writeI64","writeI32","writeF32","writeF64","Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature","makeAllocate","ifThenExpr","ifElseExpr","ifThenAllocates","ifElseAllocates","getValue","Unreachable","nativeOne","setValue","NegF32","NegF64","makeIsFalseish","EqzI32","EqzI64","compiler","compileAllocate","field","nativeFieldType","builtinsFile","Parser","backlog","seenlog","tryParseSignatureIsSignature","parseFile","indexOf","tn","parseTopLevelStatement","startPos","parseDecorator","exportStart","exportEnd","contextIsAmbient","A_declare_modifier_cannot_be_used_in_an_already_ambient_context","first","parseEnum","parseVariable","parseFunction","parseClassOrInterface","parseNamespace","parseExportImport","parseImport","parseTypeDeclaration","parseExport","_0_modifier_cannot_be_used_here","parseStatement","Decorators_are_not_valid_here","nextFile","clear","parseType","acceptParenthesized","suppressErrors","isNullableSignature","tryParseSignature","Unexpected_token","innerType","Identifier_expected","nullable","parameter","bracketStart","bracketRange","isSignature","t","A_rest_parameter_cannot_be_optional","OPTIONAL","param","parseArguments","parseVariableDeclaration","parentFlags","parentDecorators","Initializers_are_not_allowed_in_ambient_contexts","parseExpression","parseEnumValue","parseReturn","parseTypeParameters","Type_parameter_list_cannot_be_empty","typeParameter","parseTypeParameter","parseParameters","seenRest","seenOptional","reportedRest","parseParameter","A_rest_parameter_must_be_last_in_a_parameter_list","A_required_parameter_cannot_follow_an_optional_parameter","isRest","isOptional","startRange","accessFlags","A_parameter_property_cannot_be_declared_using_a_rest_parameter","A_rest_parameter_cannot_have_an_initializer","Parameter_cannot_have_question_mark_and_initializer","signatureStart","isSetter","A_set_accessor_must_have_exactly_one_parameter","A_set_accessor_parameter_cannot_have_an_initializer","A_get_accessor_cannot_have_parameters","parseBlockStatement","parseFunctionExpression","isArrow","parseFunctionExpressionCommon","isInterface","Interface_declaration_cannot_have_implements_clause","parseClassMember","staticStart","staticEnd","abstractStart","abstractEnd","readonlyStart","readonlyEnd","setEnd","typeParametersStart","Type_parameters_cannot_appear_on_a_constructor_declaration","An_accessor_cannot_have_type_parameters","Type_annotation_cannot_appear_on_a_constructor_declaration","A_set_accessor_cannot_have_a_return_type_annotation","retMethod","Constructor_implementation_is_missing","retField","parseExportMember","asIdentifier","skipFrom","parseImportDeclaration","topLevel","parseBreak","parseContinue","parseDoStatement","parseForStatement","parseIfStatement","A_return_statement_can_only_be_used_within_a_function_body","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVoidStatement","parseWhileStatement","parseExpressionStatement","skipStatement","elseStatement","case_","parseSwitchCase","_case_or_default_expected","parseExpressionStart","determinePrecedenceStart","The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access","again","PREFIX","regexpPattern","Expression_expected","tryParseTypeArgumentsBeforeArguments","precedence","nextPrecedence","determinePrecedence","commaExprs","isRightAssociative","propertyCall","Precedence","ExportsWalker","walk","visitElement","visitGlobal","visitEnum","visitFunction","_e","visitClass","visitNamespace","IDLBuilder","indentLevel","build","isConst","indent","typeToString","i64_to_string","members_1","members_1_1","visitInterface","TSDBuilder","numMembers","members_2","members_2_1","Decompiler","functionId","decompile","decompiler","decompileFunction","_BinaryenFunctionGetName","_BinaryenFunctionGetNumParams","nativeTypeToType","_BinaryenFunctionGetParam","_BinaryenFunctionGetResult","Block","decompileExpression","nested","string","_BinaryenBlockGetName","_BinaryenBlockGetNumChildren","_BinaryenBlockGetChild","If","_BinaryenIfGetCondition","_BinaryenIfGetIfTrue","_BinaryenIfGetIfFalse","Loop","_BinaryenLoopGetName","_BinaryenLoopGetBody","Break","_BinaryenBreakGetCondition","_BinaryenBreakGetName","Switch","Call","CallImport","CallIndirect","SetLocal","_BinaryenSetLocalGetIndex","_BinaryenSetLocalGetValue","SetGlobal","Store","_BinaryenStoreGetOffset","_BinaryenStoreGetPtr","_BinaryenStoreGetValue","ClzI32","CtzI32","PopcntI32","AbsF32","CeilF32","FloorF32","TruncF32","NearestF32","SqrtF32","ClzI64","CtzI64","PopcntI64","AbsF64","CeilF64","FloorF64","TruncF64","NearestF64","SqrtF64","ReinterpretF32","ReinterpretF64","ReinterpretI32","ReinterpretI64","RotlI32","RotrI32","RotlI64","RotrI64","CopysignF32","MinF32","MaxF32","CopysignF64","MinF64","MaxF64","Select","_BinaryenSelectGetIfTrue","_BinaryenSelectGetIfFalse","_BinaryenSelectGetCondition","Drop","_BinaryenDropGetValue","Return","_BinaryenReturnGetValue","Host","_BinaryenHostGetOp","CurrentMemory","GrowMemory","_BinaryenHostGetOperand","Nop","AtomicCmpxchg","AtomicRMW","AtomicWait","AtomicWake","Auto","decompiler_1","definitions_1","formatDiagnostic","parser_1","parser","nextDiagnostic","isInfo","isWarning","isError","createOptions","setTarget","setNoTreeShaking","setNoAssert","setNoMemory","setImportMemory","setImportTable","setSourceMap","setMemoryBase","setGlobalAlias","finishParsing","compileProgram","decompileModule","buildIDL","buildTSD","f32_as_i32","i32_as_f32","f64_as_i64","i64_as_f64","Long","wasm","WebAssembly","Instance","low","high","unsigned","isLong","obj","__isLong__","INT_CACHE","UINT_CACHE","fromInt","cachedObj","cache","fromBits","fromNumber","isNaN","UZERO","ZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","Math","pow","fromString","radix","RangeError","radixToPower","min","parseInt","power","mul","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","toNumber","isZero","isNegative","eq","radixLong","div","rem1","sub","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","equals","other","notEquals","neq","ne","lessThan","comp","lt","lessThanOrEqual","lte","le","greaterThan","gt","greaterThanOrEqual","gte","ge","compare","thisNeg","otherNeg","negate","not","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","res","div_u","div_s","toUnsigned","shru","shr","shl","floor","log2","log","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","mod","and","or","xor","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toSigned","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","i64_div","i64_div_u","i64_rem","i64_rem_u","i64_and","i64_or","i64_xor","i64_shl","i64_shr","i64_not","minSafeF32","MIN_SAFE_INTEGER","maxSafeF32","MAX_SAFE_INTEGER","minSafeF64","maxSafeF64","fround","valueI64","indentX1","indentX2","indentX4","separator","ipos","dirname","origin","CharCode","lookupInUnicodeMap","unicodeIdentifierStart","unicodeIdentifierPart","map","mid","evaluateConstantOffset","NaN","Infinity","Type_0_is_not_generic","tempLocal0","tempLocal1","alignLog2","fieldName","Type_0_has_no_property_1","abort","compileAbort","allocateInternalName","allocatePrototype","allocateInstance","abortInternalName","abortPrototype","abortInstance","messageArg","filenameArg","binaryen","Binaryen","key","_malloc","_free","move_memory","dest","src","_memmove","HEAPU8","previousPrint","print","x","_BinaryenModulePrint","_BinaryenModulePrintAsmjs","globalScope","HEAP","HEAP_OFFSET","oldHeap","copyWithin","off","UnreachableError","captureStackTrace","stack","AssertionError","defineProperties","writable","MIN_POSITIVE_VALUE","EPSILON","clz32","abs","sqrt","trunc","isTrueish","undefined","fromCodePoint","Number","isInteger","arg","isArray","y"],"mappings":"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AAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEtCC,GACJ,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KACxB,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACt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","file":"assemblyscript.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"binaryen\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"binaryen\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"assemblyscript\"] = factory(require(\"binaryen\"));\n\telse\n\t\troot[\"assemblyscript\"] = factory(root[\"binaryen\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__22__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 28);\n","/**\r\n * AssemblyScript's intermediate representation describing a program's elements.\r\n * @module program\r\n *//***/\r\n\r\nimport {\r\n  Options\r\n} from \"./compiler\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticMessage,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Type,\r\n  Signature,\r\n\r\n  typesToString\r\n} from \"./types\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  Source,\r\n  Range,\r\n  CommonTypeNode,\r\n  TypeNode,\r\n  TypeParameterNode,\r\n  // ParameterNode,\r\n  // ParameterKind,\r\n  // SignatureNode,\r\n  DecoratorNode,\r\n  DecoratorKind,\r\n\r\n  Expression,\r\n  AssertionExpression,\r\n  ElementAccessExpression,\r\n  IdentifierExpression,\r\n  LiteralExpression,\r\n  LiteralKind,\r\n  ParenthesizedExpression,\r\n  PropertyAccessExpression,\r\n  StringLiteralExpression,\r\n  CallExpression,\r\n\r\n  ClassDeclaration,\r\n  DeclarationStatement,\r\n  EnumDeclaration,\r\n  EnumValueDeclaration,\r\n  ExportMember,\r\n  ExportStatement,\r\n  FieldDeclaration,\r\n  FunctionDeclaration,\r\n  ImportDeclaration,\r\n  ImportStatement,\r\n  InterfaceDeclaration,\r\n  MethodDeclaration,\r\n  NamespaceDeclaration,\r\n  TypeDeclaration,\r\n  VariableLikeDeclarationStatement,\r\n  VariableStatement,\r\n\r\n  ParameterKind,\r\n  SignatureNode,\r\n  VariableDeclaration\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Module,\r\n  NativeType,\r\n  FunctionRef,\r\n} from \"./module\";\r\n\r\n/** Path delimiter inserted between file system levels. */\r\nexport const PATH_DELIMITER = \"/\";\r\n/** Substitution used to indicate the parent directory. */\r\nexport const PARENT_SUBST = \"..\";\r\n/** Function name prefix used for getters. */\r\nexport const GETTER_PREFIX = \"get:\";\r\n/** Function name prefix used for setters. */\r\nexport const SETTER_PREFIX = \"set:\";\r\n/** Delimiter used between class names and instance members. */\r\nexport const INSTANCE_DELIMITER = \"#\";\r\n/** Delimiter used between class and namespace names and static members. */\r\nexport const STATIC_DELIMITER = \".\";\r\n/** Substitution used to indicate a library directory. */\r\nexport const LIBRARY_SUBST = \"~lib\";\r\n/** Library directory prefix. */\r\nexport const LIBRARY_PREFIX = LIBRARY_SUBST + PATH_DELIMITER;\r\n\r\n/** Represents a yet unresolved export. */\r\nclass QueuedExport {\r\n  isReExport: bool;\r\n  referencedName: string;\r\n  member: ExportMember;\r\n}\r\n\r\n/** Represents a yet unresolved import. */\r\nclass QueuedImport {\r\n  internalName: string;\r\n  referencedName: string;\r\n  referencedNameAlt: string;\r\n  declaration: ImportDeclaration;\r\n}\r\n\r\n/** Represents a type alias. */\r\nclass TypeAlias {\r\n  typeParameters: TypeParameterNode[] | null;\r\n  type: CommonTypeNode;\r\n}\r\n\r\nconst noTypesYet = new Map<string,Type>();\r\n\r\n/** Represents an AssemblyScript program. */\r\nexport class Program extends DiagnosticEmitter {\r\n\r\n  /** Array of source files. */\r\n  sources: Source[];\r\n  /** Diagnostic offset used where repeatedly obtaining the next diagnostic. */\r\n  diagnosticsOffset: i32 = 0;\r\n  /** Compiler options. */\r\n  options: Options;\r\n  /** Elements by internal name. */\r\n  elementsLookup: Map<string,Element> = new Map();\r\n  /** Types by internal name. */\r\n  typesLookup: Map<string,Type> = noTypesYet;\r\n  /** Declared type aliases. */\r\n  typeAliases: Map<string,TypeAlias> = new Map();\r\n  /** File-level exports by exported name. */\r\n  fileLevelExports: Map<string,Element> = new Map();\r\n  /** Module-level exports by exported name. */\r\n  moduleLevelExports: Map<string,Element> = new Map();\r\n  /** Array prototype reference. */\r\n  arrayPrototype: ClassPrototype | null = null;\r\n  /** String instance reference. */\r\n  stringInstance: Class | null = null;\r\n\r\n  /** Constructs a new program, optionally inheriting parser diagnostics. */\r\n  constructor(diagnostics: DiagnosticMessage[] | null = null) {\r\n    super(diagnostics);\r\n    this.sources = [];\r\n  }\r\n\r\n  /** Initializes the program and its elements prior to compilation. */\r\n  initialize(options: Options): void {\r\n    this.options = options;\r\n    this.typesLookup = new Map([\r\n      [\"i8\", Type.i8],\r\n      [\"i16\", Type.i16],\r\n      [\"i32\", Type.i32],\r\n      [\"i64\", Type.i64],\r\n      [\"isize\", options.isizeType],\r\n      [\"u8\", Type.u8],\r\n      [\"u16\", Type.u16],\r\n      [\"u32\", Type.u32],\r\n      [\"u64\", Type.u64],\r\n      [\"usize\", options.usizeType],\r\n      [\"bool\", Type.bool],\r\n      [\"f32\", Type.f32],\r\n      [\"f64\", Type.f64],\r\n      [\"void\", Type.void],\r\n      [\"number\", Type.f64],\r\n      [\"boolean\", Type.bool]\r\n    ]);\r\n\r\n    var queuedExports = new Map<string,QueuedExport>();\r\n    var queuedImports = new Array<QueuedImport>();\r\n    var queuedDerivedClasses = new Array<ClassPrototype>();\r\n\r\n    // build initial lookup maps of internal names to declarations\r\n    for (let i = 0, k = this.sources.length; i < k; ++i) {\r\n      let source = this.sources[i];\r\n      let statements = source.statements;\r\n      for (let j = 0, l = statements.length; j < l; ++j) {\r\n        let statement = statements[j];\r\n        switch (statement.kind) {\r\n          case NodeKind.CLASSDECLARATION: {\r\n            this.initializeClass(<ClassDeclaration>statement, queuedDerivedClasses);\r\n            break;\r\n          }\r\n          case NodeKind.ENUMDECLARATION: {\r\n            this.initializeEnum(<EnumDeclaration>statement);\r\n            break;\r\n          }\r\n          case NodeKind.EXPORT: {\r\n            this.initializeExports(<ExportStatement>statement, queuedExports);\r\n            break;\r\n          }\r\n          case NodeKind.FUNCTIONDECLARATION: {\r\n            this.initializeFunction(<FunctionDeclaration>statement);\r\n            break;\r\n          }\r\n          case NodeKind.IMPORT: {\r\n            this.initializeImports(<ImportStatement>statement, queuedExports, queuedImports);\r\n            break;\r\n          }\r\n          case NodeKind.INTERFACEDECLARATION: {\r\n            this.initializeInterface(<InterfaceDeclaration>statement);\r\n            break;\r\n          }\r\n          case NodeKind.NAMESPACEDECLARATION: {\r\n            this.initializeNamespace(<NamespaceDeclaration>statement, queuedDerivedClasses);\r\n            break;\r\n          }\r\n          case NodeKind.TYPEDECLARATION: {\r\n            this.initializeTypeAlias(<TypeDeclaration>statement);\r\n            break;\r\n          }\r\n          case NodeKind.VARIABLE: {\r\n            this.initializeVariables(<VariableStatement>statement);\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // queued imports should be resolvable now through traversing exports and queued exports\r\n    for (let i = 0; i < queuedImports.length;) {\r\n      let queuedImport = queuedImports[i];\r\n      let element = this.tryResolveImport(queuedImport.referencedName, queuedExports);\r\n      if (element) {\r\n        this.elementsLookup.set(queuedImport.internalName, element);\r\n        queuedImports.splice(i, 1);\r\n      } else {\r\n        if (element = this.tryResolveImport(queuedImport.referencedNameAlt, queuedExports)) {\r\n          this.elementsLookup.set(queuedImport.internalName, element);\r\n          queuedImports.splice(i, 1);\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Module_0_has_no_exported_member_1,\r\n            queuedImport.declaration.range,\r\n            (<ImportStatement>queuedImport.declaration.parent).path.value,\r\n            queuedImport.declaration.externalName.text\r\n          );\r\n          ++i;\r\n        }\r\n      }\r\n    }\r\n\r\n    // queued exports should be resolvable now that imports are finalized\r\n    for (let [exportName, queuedExport] of queuedExports) {\r\n      let currentExport: QueuedExport | null = queuedExport; // nullable below\r\n      let element: Element | null;\r\n      do {\r\n        if (currentExport.isReExport) {\r\n          if (element = this.fileLevelExports.get(currentExport.referencedName)) {\r\n            this.setExportAndCheckLibrary(\r\n              exportName,\r\n              element,\r\n              currentExport.member.externalName\r\n            );\r\n            break;\r\n          }\r\n          currentExport = queuedExports.get(currentExport.referencedName);\r\n          if (!currentExport) {\r\n            this.error(\r\n              DiagnosticCode.Module_0_has_no_exported_member_1,\r\n              queuedExport.member.externalName.range,\r\n              (<StringLiteralExpression>(<ExportStatement>queuedExport.member.parent).path).value,\r\n              queuedExport.member.externalName.text\r\n            );\r\n          }\r\n        } else {\r\n          if (\r\n            // normal export\r\n            (element = this.elementsLookup.get(currentExport.referencedName)) ||\r\n            // library re-export\r\n            (element = this.elementsLookup.get(currentExport.member.name.text))\r\n          ) {\r\n            this.setExportAndCheckLibrary(\r\n              exportName,\r\n              element,\r\n              currentExport.member.externalName\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Cannot_find_name_0,\r\n              queuedExport.member.range, queuedExport.member.name.text\r\n            );\r\n          }\r\n          break;\r\n        }\r\n      } while (currentExport);\r\n    }\r\n\r\n    // resolve base prototypes of derived classes\r\n    for (let i = 0, k = queuedDerivedClasses.length; i < k; ++i) {\r\n      let derivedDeclaration = queuedDerivedClasses[i].declaration;\r\n      let derivedType = assert(derivedDeclaration.extendsType);\r\n      let resolved = this.resolveIdentifier(derivedType.name, null);\r\n      if (resolved) {\r\n        if (resolved.element.kind != ElementKind.CLASS_PROTOTYPE) {\r\n          this.error(\r\n            DiagnosticCode.A_class_may_only_extend_another_class,\r\n            derivedType.range\r\n          );\r\n          continue;\r\n        }\r\n        queuedDerivedClasses[i].basePrototype = (\r\n          <ClassPrototype>resolved.element\r\n        );\r\n      }\r\n    }\r\n\r\n    // set up global aliases\r\n    var globalAliases = options.globalAliases;\r\n    if (globalAliases) {\r\n      for (let [alias, name] of globalAliases) {\r\n        let element = this.elementsLookup.get(name); // TODO: error? has no source range\r\n        if (element) this.elementsLookup.set(alias, element);\r\n      }\r\n    }\r\n\r\n    // register array\r\n    var arrayPrototype = this.elementsLookup.get(\"Array\");\r\n    if (arrayPrototype) {\r\n      assert(arrayPrototype.kind == ElementKind.CLASS_PROTOTYPE);\r\n      this.arrayPrototype = <ClassPrototype>arrayPrototype;\r\n    }\r\n\r\n    // register string\r\n    var stringPrototype = this.elementsLookup.get(\"String\");\r\n    if (stringPrototype) {\r\n      assert(stringPrototype.kind == ElementKind.CLASS_PROTOTYPE);\r\n      let stringInstance = (<ClassPrototype>stringPrototype).resolve(null); // reports\r\n      if (stringInstance) {\r\n        if (this.typesLookup.has(\"string\")) {\r\n          let declaration = (<ClassPrototype>stringPrototype).declaration;\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, declaration.programLevelInternalName\r\n          );\r\n        } else {\r\n          this.stringInstance = stringInstance;\r\n          this.typesLookup.set(\"string\", stringInstance.type);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Tries to resolve an import by traversing exports and queued exports. */\r\n  private tryResolveImport(\r\n    referencedName: string,\r\n    queuedExports: Map<string,QueuedExport>\r\n  ): Element | null {\r\n    var element: Element | null;\r\n    var fileLevelExports = this.fileLevelExports;\r\n    do {\r\n      if (element = fileLevelExports.get(referencedName)) return element;\r\n      let queuedExport = queuedExports.get(referencedName);\r\n      if (!queuedExport) return null;\r\n      if (queuedExport.isReExport) {\r\n        referencedName = queuedExport.referencedName;\r\n        continue;\r\n      }\r\n      return this.elementsLookup.get(queuedExport.referencedName);\r\n    } while (true);\r\n  }\r\n\r\n  /** Processes global options, if present. */\r\n  private checkGlobalOptions(\r\n    element: Element,\r\n    declaration: DeclarationStatement\r\n  ): void {\r\n    var parentNode = declaration.parent;\r\n    if (\r\n      element.is(CommonFlags.GLOBAL) ||\r\n      (\r\n        declaration.range.source.isLibrary &&\r\n        element.is(CommonFlags.EXPORT) &&\r\n        (\r\n          assert(parentNode).kind == NodeKind.SOURCE ||\r\n          (\r\n            <Node>parentNode).kind == NodeKind.VARIABLE &&\r\n            assert((<Node>parentNode).parent).kind == NodeKind.SOURCE\r\n          )\r\n        )\r\n    ) {\r\n      let simpleName = declaration.name.text;\r\n      if (this.elementsLookup.has(simpleName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, element.internalName\r\n        );\r\n      } else {\r\n        element.set(CommonFlags.GLOBAL);\r\n        this.elementsLookup.set(simpleName, element);\r\n        if (element.is(CommonFlags.BUILTIN)) {\r\n          element.internalName = simpleName;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeClass(\r\n    declaration: ClassDeclaration,\r\n    queuedDerivedClasses: ClassPrototype[],\r\n    namespace: Element | null = null\r\n  ): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (this.elementsLookup.has(internalName)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, internalName\r\n      );\r\n      return;\r\n    }\r\n    var simpleName = declaration.name.text;\r\n    var prototype = new ClassPrototype(\r\n      this,\r\n      simpleName,\r\n      internalName,\r\n      declaration\r\n    );\r\n    prototype.namespace = namespace;\r\n    this.elementsLookup.set(internalName, prototype);\r\n\r\n    var implementsTypes = declaration.implementsTypes;\r\n    if (implementsTypes) {\r\n      let numImplementsTypes = implementsTypes.length;\r\n      if (prototype.is(CommonFlags.UNMANAGED)) {\r\n        if (numImplementsTypes) {\r\n          this.error(\r\n            DiagnosticCode.Structs_cannot_implement_interfaces,\r\n            Range.join(\r\n              declaration.name.range,\r\n              implementsTypes[numImplementsTypes - 1].range\r\n            )\r\n          );\r\n        }\r\n      } else if (numImplementsTypes) {\r\n        for (let i = 0; i < numImplementsTypes; ++i) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            implementsTypes[i].range\r\n          );\r\n        }\r\n      }\r\n    }\r\n\r\n    // remember classes that extend another one\r\n    if (declaration.extendsType) {\r\n      queuedDerivedClasses.push(prototype);\r\n    }\r\n\r\n    // add as namespace member if applicable\r\n    if (namespace) {\r\n      if (namespace.members) {\r\n        if (namespace.members.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        namespace.members = new Map();\r\n      }\r\n      namespace.members.set(simpleName, prototype);\r\n      if (namespace.is(CommonFlags.MODULE_EXPORT)) {\r\n        if (prototype.is(CommonFlags.EXPORT)) {\r\n          prototype.set(CommonFlags.MODULE_EXPORT);\r\n        }\r\n      }\r\n\r\n    // otherwise add to file-level exports if exported\r\n    } else if (prototype.is(CommonFlags.EXPORT)) {\r\n      if (this.fileLevelExports.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n      this.fileLevelExports.set(internalName, prototype);\r\n      if (prototype.is(CommonFlags.EXPORT) && declaration.range.source.isEntry) {\r\n        if (this.moduleLevelExports.has(internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n        this.moduleLevelExports.set(internalName, prototype);\r\n      }\r\n    }\r\n\r\n    // initialize members\r\n    var memberDeclarations = declaration.members;\r\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\r\n      let memberDeclaration = memberDeclarations[i];\r\n      switch (memberDeclaration.kind) {\r\n        case NodeKind.FIELDDECLARATION: {\r\n          this.initializeField(<FieldDeclaration>memberDeclaration, prototype);\r\n          break;\r\n        }\r\n        case NodeKind.METHODDECLARATION: {\r\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\r\n            this.initializeAccessor(<MethodDeclaration>memberDeclaration, prototype);\r\n          } else {\r\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, prototype);\r\n          }\r\n          break;\r\n        }\r\n        default: {\r\n          throw new Error(\"class member expected\");\r\n        }\r\n      }\r\n    }\r\n\r\n    this.checkGlobalOptions(prototype, declaration);\r\n  }\r\n\r\n  private initializeField(\r\n    declaration: FieldDeclaration,\r\n    classPrototype: ClassPrototype\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var internalName = declaration.fileLevelInternalName;\r\n\r\n    // static fields become global variables\r\n    if (declaration.is(CommonFlags.STATIC)) {\r\n      if (this.elementsLookup.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n      if (classPrototype.members) {\r\n        if (classPrototype.members.has(name)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        classPrototype.members = new Map();\r\n      }\r\n      let staticField = new Global(\r\n        this,\r\n        name,\r\n        internalName,\r\n        Type.void, // resolved later on\r\n        declaration\r\n      );\r\n      classPrototype.members.set(name, staticField);\r\n      this.elementsLookup.set(internalName, staticField);\r\n\r\n    // instance fields are remembered until resolved\r\n    } else {\r\n      if (classPrototype.instanceMembers) {\r\n        if (classPrototype.instanceMembers.has(name)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        classPrototype.instanceMembers = new Map();\r\n      }\r\n      let instanceField = new FieldPrototype(\r\n        classPrototype,\r\n        name,\r\n        internalName,\r\n        declaration\r\n      );\r\n      classPrototype.instanceMembers.set(name, instanceField);\r\n    }\r\n  }\r\n\r\n  private initializeMethod(\r\n    declaration: MethodDeclaration,\r\n    classPrototype: ClassPrototype\r\n  ): void {\r\n    var simpleName = declaration.name.text;\r\n    var internalName = declaration.fileLevelInternalName;\r\n    var prototype: FunctionPrototype | null = null;\r\n\r\n    // static methods become global functions\r\n    if (declaration.is(CommonFlags.STATIC)) {\r\n      assert(declaration.name.kind != NodeKind.CONSTRUCTOR);\r\n\r\n      if (this.elementsLookup.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0, declaration.name.range,\r\n          internalName\r\n        );\r\n        return;\r\n      }\r\n      if (classPrototype.members) {\r\n        if (classPrototype.members.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        classPrototype.members = new Map();\r\n      }\r\n      prototype = new FunctionPrototype(\r\n        this,\r\n        simpleName,\r\n        internalName,\r\n        declaration,\r\n        classPrototype\r\n      );\r\n      classPrototype.members.set(simpleName, prototype);\r\n      this.elementsLookup.set(internalName, prototype);\r\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n\r\n    // instance methods are remembered until resolved\r\n    } else {\r\n      if (classPrototype.instanceMembers) {\r\n        if (classPrototype.instanceMembers.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        classPrototype.instanceMembers = new Map();\r\n      }\r\n      prototype = new FunctionPrototype(\r\n        this,\r\n        simpleName,\r\n        internalName,\r\n        declaration,\r\n        classPrototype\r\n      );\r\n      // if (classPrototype.isUnmanaged && instancePrototype.isAbstract) {\r\n      //   this.error( Unmanaged classes cannot declare abstract methods. );\r\n      // }\r\n      if (declaration.name.kind == NodeKind.CONSTRUCTOR) {\r\n        if (classPrototype.constructorPrototype) {\r\n          this.error(\r\n            DiagnosticCode.Multiple_constructor_implementations_are_not_allowed,\r\n            declaration.name.range\r\n          );\r\n        } else {\r\n          prototype.set(CommonFlags.CONSTRUCTOR);\r\n          classPrototype.constructorPrototype = prototype;\r\n        }\r\n      } else {\r\n        classPrototype.instanceMembers.set(simpleName, prototype);\r\n      }\r\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    }\r\n\r\n    this.checkOperators(declaration.decorators, prototype, classPrototype);\r\n  }\r\n\r\n  private checkOperators(\r\n    decorators: DecoratorNode[] | null,\r\n    prototype: FunctionPrototype,\r\n    classPrototype: ClassPrototype\r\n  ): void {\r\n    // handle operator annotations. operators are either instance methods taking\r\n    // a second argument of the instance's type or static methods taking two\r\n    // arguments of the instance's type. return values vary depending on the\r\n    // operation.\r\n    if (decorators) {\r\n      for (let i = 0, k = decorators.length; i < k; ++i) {\r\n        let decorator = decorators[i];\r\n        if (decorator.decoratorKind == DecoratorKind.OPERATOR) {\r\n          if (!prototype) {\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              decorator.range\r\n            );\r\n            continue;\r\n          }\r\n          let numArgs = decorator.arguments && decorator.arguments.length || 0;\r\n          if (numArgs == 1) {\r\n            let firstArg = (<Expression[]>decorator.arguments)[0];\r\n            if (\r\n              firstArg.kind == NodeKind.LITERAL &&\r\n              (<LiteralExpression>firstArg).literalKind == LiteralKind.STRING\r\n            ) {\r\n              switch ((<StringLiteralExpression>firstArg).value) {\r\n                case \"[]\": {\r\n                  classPrototype.fnIndexedGet = prototype.simpleName;\r\n                  break;\r\n                }\r\n                case \"[]=\": {\r\n                  classPrototype.fnIndexedSet = prototype.simpleName;\r\n                  break;\r\n                }\r\n                case \"+\": {\r\n                  classPrototype.fnConcat = prototype.simpleName;\r\n                  break;\r\n                }\r\n                case \"-\": {\r\n                  classPrototype.fnSubtract = prototype.simpleName;\r\n                  break;\r\n                }\r\n                case \"*\": {\r\n                  classPrototype.fnMultiply = prototype.simpleName;\r\n                  break;\r\n                }\r\n                case \"/\": {\r\n                  classPrototype.fnDivide = prototype.simpleName;\r\n                  break;\r\n                }\r\n                case \"%\": {\r\n                  classPrototype.fnFractional = prototype.simpleName;\r\n                  break;\r\n                }\r\n                case \"&\": {\r\n                  classPrototype.fnBitwiseAnd = prototype.simpleName;\r\n                  break;\r\n                }\r\n                case \"|\": {\r\n                  classPrototype.fnBitwiseOr = prototype.simpleName;\r\n                  break;\r\n                }\r\n                case \"^\": {\r\n                  classPrototype.fnBitwiseXor = prototype.simpleName;\r\n                  break;\r\n                }\r\n                case \"==\": {\r\n                  classPrototype.fnEquals = prototype.simpleName;\r\n                  break;\r\n                }\r\n                case \"!=\": {\r\n                  classPrototype.fnNotEquals = prototype.simpleName;\r\n                  break;\r\n                }\r\n                case \">\": {\r\n                  classPrototype.fnGreaterThan = prototype.simpleName;\r\n                  break;\r\n                }\r\n                case \">=\": {\r\n                  classPrototype.fnGreaterThanEquals = prototype.simpleName;\r\n                  break;\r\n                }\r\n                case \"<\": {\r\n                  classPrototype.fnLessThan = prototype.simpleName;\r\n                  break;\r\n                }\r\n                case \"<=\": {\r\n                  classPrototype.fnLessThanEquals = prototype.simpleName;\r\n                  break;\r\n                }\r\n                default: {\r\n                  this.error(\r\n                    DiagnosticCode.Operation_not_supported,\r\n                    firstArg.range\r\n                  );\r\n                }\r\n              }\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.String_literal_expected,\r\n                firstArg.range\r\n              );\r\n            }\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Expected_0_arguments_but_got_1,\r\n              decorator.range, \"1\", numArgs.toString(0)\r\n            );\r\n          }\r\n        } else if (decorator.decoratorKind != DecoratorKind.CUSTOM) {\r\n          // methods support built-in @operator only\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            decorator.range\r\n          );\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeAccessor(\r\n    declaration: MethodDeclaration,\r\n    classPrototype: ClassPrototype\r\n  ): void {\r\n    var simpleName = declaration.name.text;\r\n    var internalPropertyName = declaration.fileLevelInternalName;\r\n    var propertyElement = this.elementsLookup.get(internalPropertyName);\r\n    var isGetter = declaration.is(CommonFlags.GET);\r\n    var isNew = false;\r\n    if (propertyElement) {\r\n      if (\r\n        propertyElement.kind != ElementKind.PROPERTY ||\r\n        (isGetter\r\n          ? (<Property>propertyElement).getterPrototype\r\n          : (<Property>propertyElement).setterPrototype\r\n        ) != null\r\n      ) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, internalPropertyName\r\n        );\r\n        return;\r\n      }\r\n    } else {\r\n      propertyElement = new Property(\r\n        this,\r\n        simpleName,\r\n        internalPropertyName,\r\n        classPrototype\r\n      );\r\n      isNew = true;\r\n    }\r\n\r\n    var baseName = (isGetter ? GETTER_PREFIX : SETTER_PREFIX) + simpleName;\r\n\r\n    // static accessors become global functions\r\n    if (declaration.is(CommonFlags.STATIC)) {\r\n      let staticName = classPrototype.internalName + STATIC_DELIMITER + baseName;\r\n      if (this.elementsLookup.has(staticName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, staticName\r\n        );\r\n        return;\r\n      }\r\n      let staticPrototype = new FunctionPrototype(\r\n        this,\r\n        baseName,\r\n        staticName,\r\n        declaration,\r\n        null\r\n      );\r\n      if (isGetter) {\r\n        (<Property>propertyElement).getterPrototype = staticPrototype;\r\n      } else {\r\n        (<Property>propertyElement).setterPrototype = staticPrototype;\r\n      }\r\n      if (isNew) {\r\n        if (classPrototype.members) {\r\n          if (classPrototype.members.has(simpleName)) {\r\n            this.error(\r\n              DiagnosticCode.Duplicate_identifier_0,\r\n              declaration.name.range, staticName\r\n            );\r\n            return;\r\n          }\r\n        } else {\r\n          classPrototype.members = new Map();\r\n        }\r\n        classPrototype.members.set(simpleName, propertyElement); // check above\r\n      } else {\r\n        assert(classPrototype.members && classPrototype.members.has(simpleName));\r\n      }\r\n      this.elementsLookup.set(internalPropertyName, propertyElement);\r\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\r\n        propertyElement.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n\r\n    // instance accessors are remembered until resolved\r\n    } else {\r\n      let instanceName = classPrototype.internalName + INSTANCE_DELIMITER + baseName;\r\n      if (classPrototype.instanceMembers) {\r\n        if (classPrototype.instanceMembers.has(baseName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalPropertyName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        classPrototype.instanceMembers = new Map();\r\n      }\r\n      let instancePrototype = new FunctionPrototype(\r\n        this,\r\n        baseName,\r\n        instanceName,\r\n        declaration,\r\n        classPrototype\r\n      );\r\n      if (isGetter) {\r\n        (<Property>propertyElement).getterPrototype = instancePrototype;\r\n      } else {\r\n        (<Property>propertyElement).setterPrototype = instancePrototype;\r\n      }\r\n      classPrototype.instanceMembers.set(baseName, propertyElement);\r\n      this.elementsLookup.set(internalPropertyName, propertyElement);\r\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\r\n        propertyElement.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeEnum(\r\n    declaration: EnumDeclaration,\r\n    namespace: Element | null = null\r\n  ): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (this.elementsLookup.has(internalName)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, internalName\r\n      );\r\n      return;\r\n    }\r\n    var simpleName = declaration.name.text;\r\n    var element = new Enum(this, simpleName, internalName, declaration);\r\n    element.namespace = namespace;\r\n    this.elementsLookup.set(internalName, element);\r\n\r\n    if (namespace) {\r\n      if (namespace.members) {\r\n        if (namespace.members.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        namespace.members = new Map();\r\n      }\r\n      namespace.members.set(simpleName, element);\r\n      if (namespace.is(CommonFlags.MODULE_EXPORT)) {\r\n        element.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    } else if (element.is(CommonFlags.EXPORT)) { // no namespace\r\n      if (this.fileLevelExports.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n      this.fileLevelExports.set(internalName, element);\r\n      if (declaration.range.source.isEntry) {\r\n        if (this.moduleLevelExports.has(internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n        element.set(CommonFlags.MODULE_EXPORT);\r\n        this.moduleLevelExports.set(internalName, element);\r\n      }\r\n    }\r\n\r\n    var values = declaration.values;\r\n    for (let i = 0, k = values.length; i < k; ++i) {\r\n      this.initializeEnumValue(values[i], element);\r\n    }\r\n\r\n    this.checkGlobalOptions(element, declaration);\r\n  }\r\n\r\n  private initializeEnumValue(\r\n    declaration: EnumValueDeclaration,\r\n    enm: Enum\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var internalName = declaration.fileLevelInternalName;\r\n    var isModuleExport = enm.is(CommonFlags.MODULE_EXPORT);\r\n    if (enm.members) {\r\n      if (enm.members.has(name)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n    } else {\r\n      enm.members = new Map();\r\n    }\r\n    var value = new EnumValue(enm, this, name, internalName, declaration);\r\n    enm.members.set(name, value);\r\n    if (isModuleExport) {\r\n      value.set(CommonFlags.MODULE_EXPORT);\r\n    }\r\n  }\r\n\r\n  private initializeExports(\r\n    statement: ExportStatement,\r\n    queuedExports: Map<string,QueuedExport>\r\n  ): void {\r\n    var members = statement.members;\r\n    for (let i = 0, k = members.length; i < k; ++i) {\r\n      this.initializeExport(members[i], statement.internalPath, queuedExports);\r\n    }\r\n  }\r\n\r\n  private setExportAndCheckLibrary(\r\n    name: string,\r\n    element: Element,\r\n    identifier: IdentifierExpression\r\n  ): void {\r\n    this.fileLevelExports.set(name, element);\r\n    if (identifier.range.source.isLibrary) { // add global alias\r\n      if (this.elementsLookup.has(identifier.text)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          identifier.range, identifier.text\r\n        );\r\n      } else {\r\n        element.internalName = identifier.text;\r\n        this.elementsLookup.set(identifier.text, element);\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeExport(\r\n    member: ExportMember,\r\n    internalPath: string | null,\r\n    queuedExports: Map<string,QueuedExport>\r\n  ): void {\r\n    var externalName = member.range.source.internalPath + PATH_DELIMITER + member.externalName.text;\r\n    if (this.fileLevelExports.has(externalName)) {\r\n      this.error(\r\n        DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n        member.externalName.range, externalName\r\n      );\r\n      return;\r\n    }\r\n    var referencedName: string;\r\n    var referencedElement: Element | null;\r\n    var queuedExport: QueuedExport | null;\r\n\r\n    // export local element\r\n    if (internalPath == null) {\r\n      referencedName = member.range.source.internalPath + PATH_DELIMITER + member.name.text;\r\n\r\n      // resolve right away if the element exists\r\n      if (referencedElement = this.elementsLookup.get(referencedName)) {\r\n        this.setExportAndCheckLibrary(\r\n          externalName,\r\n          referencedElement,\r\n          member.externalName\r\n        );\r\n        return;\r\n      }\r\n\r\n      // otherwise queue it\r\n      if (queuedExports.has(externalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          member.externalName.range, externalName\r\n        );\r\n        return;\r\n      }\r\n      queuedExport = new QueuedExport();\r\n      queuedExport.isReExport = false;\r\n      queuedExport.referencedName = referencedName; // -> internal name\r\n      queuedExport.member = member;\r\n      queuedExports.set(externalName, queuedExport);\r\n\r\n    // export external element\r\n    } else {\r\n      referencedName = internalPath + PATH_DELIMITER + member.name.text;\r\n\r\n      // resolve right away if the export exists\r\n      referencedElement = this.elementsLookup.get(referencedName);\r\n      if (referencedElement) {\r\n        this.setExportAndCheckLibrary(\r\n          externalName,\r\n          referencedElement,\r\n          member.externalName\r\n        );\r\n        return;\r\n      }\r\n\r\n      // walk already known queued exports\r\n      let seen = new Set<QueuedExport>();\r\n      while (queuedExport = queuedExports.get(referencedName)) {\r\n        if (queuedExport.isReExport) {\r\n          referencedElement = this.fileLevelExports.get(queuedExport.referencedName);\r\n          if (referencedElement) {\r\n            this.setExportAndCheckLibrary(\r\n              externalName,\r\n              referencedElement,\r\n              member.externalName\r\n            );\r\n            return;\r\n          }\r\n          referencedName = queuedExport.referencedName;\r\n          if (seen.has(queuedExport)) break;\r\n          seen.add(queuedExport);\r\n        } else {\r\n          referencedElement = this.elementsLookup.get(queuedExport.referencedName);\r\n          if (referencedElement) {\r\n            this.setExportAndCheckLibrary(\r\n              externalName,\r\n              referencedElement,\r\n              member.externalName\r\n            );\r\n            return;\r\n          }\r\n          break;\r\n        }\r\n      }\r\n\r\n      // otherwise queue it\r\n      if (queuedExports.has(externalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          member.externalName.range, externalName\r\n        );\r\n        return;\r\n      }\r\n      queuedExport = new QueuedExport();\r\n      queuedExport.isReExport = true;\r\n      queuedExport.referencedName = referencedName; // -> export name\r\n      queuedExport.member = member;\r\n      queuedExports.set(externalName, queuedExport);\r\n    }\r\n  }\r\n\r\n  private initializeFunction(\r\n    declaration: FunctionDeclaration,\r\n    namespace: Element | null = null\r\n  ): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (this.elementsLookup.has(internalName)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, internalName\r\n      );\r\n      return;\r\n    }\r\n    var simpleName = declaration.name.text;\r\n    var prototype = new FunctionPrototype(\r\n      this,\r\n      simpleName,\r\n      internalName,\r\n      declaration,\r\n      null\r\n    );\r\n    prototype.namespace = namespace;\r\n    this.elementsLookup.set(internalName, prototype);\r\n\r\n    if (namespace) {\r\n      if (namespace.members) {\r\n        if (namespace.members.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        namespace.members = new Map();\r\n      }\r\n      namespace.members.set(simpleName, prototype);\r\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    } else if (prototype.is(CommonFlags.EXPORT)) { // no namespace\r\n      if (this.fileLevelExports.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n      this.fileLevelExports.set(internalName, prototype);\r\n      if (declaration.range.source.isEntry) {\r\n        if (this.moduleLevelExports.has(internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n        this.moduleLevelExports.set(internalName, prototype);\r\n      }\r\n    }\r\n\r\n    this.checkGlobalOptions(prototype, declaration);\r\n  }\r\n\r\n  private initializeImports(\r\n    statement: ImportStatement,\r\n    queuedExports: Map<string,QueuedExport>,\r\n    queuedImports: QueuedImport[]\r\n  ): void {\r\n    var declarations = statement.declarations;\r\n    if (declarations) {\r\n      for (let i = 0, k = declarations.length; i < k; ++i) {\r\n        this.initializeImport(\r\n          declarations[i],\r\n          statement.internalPath,\r\n          queuedExports, queuedImports\r\n        );\r\n      }\r\n    } else if (statement.namespaceName) {\r\n      let internalName = (\r\n        statement.range.source.internalPath +\r\n        PATH_DELIMITER +\r\n        statement.namespaceName.text\r\n      );\r\n      if (this.elementsLookup.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          statement.namespaceName.range,\r\n          internalName\r\n        );\r\n        return;\r\n      }\r\n      this.error( // TODO\r\n        DiagnosticCode.Operation_not_supported,\r\n        statement.range\r\n      );\r\n    }\r\n  }\r\n\r\n  private initializeImport(\r\n    declaration: ImportDeclaration,\r\n    internalPath: string,\r\n    queuedExports: Map<string,QueuedExport>,\r\n    queuedImports: QueuedImport[]\r\n  ): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (this.elementsLookup.has(internalName)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, internalName\r\n      );\r\n      return;\r\n    }\r\n\r\n    var referencedName = internalPath + PATH_DELIMITER + declaration.externalName.text;\r\n\r\n    // resolve right away if the exact export exists\r\n    var element: Element | null;\r\n    if (element = this.fileLevelExports.get(referencedName)) {\r\n      this.elementsLookup.set(internalName, element);\r\n      return;\r\n    }\r\n\r\n    // otherwise queue it\r\n    var indexPart = PATH_DELIMITER + \"index\";\r\n    var queuedImport = new QueuedImport();\r\n    queuedImport.internalName = internalName;\r\n    if (internalPath.endsWith(indexPart)) {\r\n      queuedImport.referencedName = referencedName; // try exact first\r\n      queuedImport.referencedNameAlt = (\r\n        internalPath.substring(0, internalPath.length - indexPart.length + 1) +\r\n        declaration.externalName.text\r\n      );\r\n    } else {\r\n      queuedImport.referencedName = referencedName; // try exact first\r\n      queuedImport.referencedNameAlt = (\r\n        internalPath +\r\n        indexPart +\r\n        PATH_DELIMITER +\r\n        declaration.externalName.text\r\n      );\r\n    }\r\n    queuedImport.declaration = declaration;\r\n    queuedImports.push(queuedImport);\r\n  }\r\n\r\n  private initializeInterface(declaration: InterfaceDeclaration, namespace: Element | null = null): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (this.elementsLookup.has(internalName)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, internalName\r\n      );\r\n      return;\r\n    }\r\n    var prototype = new InterfacePrototype(this, declaration.name.text, internalName, declaration);\r\n    prototype.namespace = namespace;\r\n    this.elementsLookup.set(internalName, prototype);\r\n\r\n    if (namespace) {\r\n      if (namespace.members) {\r\n        if (namespace.members.has(prototype.internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        namespace.members = new Map();\r\n      }\r\n      namespace.members.set(prototype.internalName, prototype);\r\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    } else if (prototype.is(CommonFlags.EXPORT)) { // no namespace\r\n      if (this.fileLevelExports.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n      this.fileLevelExports.set(internalName, prototype);\r\n      if (declaration.range.source.isEntry) {\r\n        if (this.moduleLevelExports.has(internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n        this.moduleLevelExports.set(internalName, prototype);\r\n      }\r\n    }\r\n\r\n    var memberDeclarations = declaration.members;\r\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\r\n      let memberDeclaration = memberDeclarations[i];\r\n      switch (memberDeclaration.kind) {\r\n\r\n        case NodeKind.FIELDDECLARATION: {\r\n          this.initializeField(<FieldDeclaration>memberDeclaration, prototype);\r\n          break;\r\n        }\r\n        case NodeKind.METHODDECLARATION: {\r\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\r\n            this.initializeAccessor(<MethodDeclaration>memberDeclaration, prototype);\r\n          } else {\r\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, prototype);\r\n          }\r\n          break;\r\n        }\r\n        default: {\r\n          throw new Error(\"interface member expected\");\r\n        }\r\n      }\r\n    }\r\n\r\n    this.checkGlobalOptions(prototype, declaration);\r\n  }\r\n\r\n  private initializeNamespace(\r\n    declaration: NamespaceDeclaration,\r\n    queuedExtendingClasses: ClassPrototype[],\r\n    parentNamespace: Element | null = null\r\n  ): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    var simpleName = declaration.name.text;\r\n    var namespace = this.elementsLookup.get(internalName);\r\n    if (!namespace) {\r\n      namespace = new Namespace(this, simpleName, internalName, declaration);\r\n      namespace.namespace = parentNamespace;\r\n      this.elementsLookup.set(internalName, namespace);\r\n      this.checkGlobalOptions(namespace, declaration);\r\n    }\r\n\r\n    if (parentNamespace) {\r\n      if (parentNamespace.members) {\r\n        if (parentNamespace.members.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        parentNamespace.members = new Map();\r\n      }\r\n      parentNamespace.members.set(simpleName, namespace);\r\n      if (parentNamespace.is(CommonFlags.MODULE_EXPORT) && namespace.is(CommonFlags.EXPORT)) {\r\n        namespace.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    } else if (namespace.is(CommonFlags.EXPORT)) { // no parent namespace\r\n      let existingExport = this.fileLevelExports.get(internalName);\r\n      if (existingExport) {\r\n        if (!existingExport.is(CommonFlags.EXPORT)) {\r\n          this.error(\r\n            DiagnosticCode.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local,\r\n            declaration.name.range, namespace.internalName\r\n          ); // recoverable\r\n        }\r\n        namespace = existingExport; // join\r\n      } else {\r\n        this.fileLevelExports.set(internalName, namespace);\r\n      }\r\n      if (declaration.range.source.isEntry) {\r\n        if (this.moduleLevelExports.has(internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n        namespace.set(CommonFlags.MODULE_EXPORT);\r\n        this.moduleLevelExports.set(internalName, namespace);\r\n      }\r\n    }\r\n\r\n    var members = declaration.members;\r\n    for (let i = 0, k = members.length; i < k; ++i) {\r\n      switch (members[i].kind) {\r\n        case NodeKind.CLASSDECLARATION: {\r\n          this.initializeClass(<ClassDeclaration>members[i], queuedExtendingClasses, namespace);\r\n          break;\r\n        }\r\n        case NodeKind.ENUMDECLARATION: {\r\n          this.initializeEnum(<EnumDeclaration>members[i], namespace);\r\n          break;\r\n        }\r\n        case NodeKind.FUNCTIONDECLARATION: {\r\n          this.initializeFunction(<FunctionDeclaration>members[i], namespace);\r\n          break;\r\n        }\r\n        case NodeKind.INTERFACEDECLARATION: {\r\n          this.initializeInterface(<InterfaceDeclaration>members[i], namespace);\r\n          break;\r\n        }\r\n        case NodeKind.NAMESPACEDECLARATION: {\r\n          this.initializeNamespace(<NamespaceDeclaration>members[i], queuedExtendingClasses, namespace);\r\n          break;\r\n        }\r\n        case NodeKind.TYPEDECLARATION: {\r\n          // this.initializeTypeAlias(<TypeDeclaration>members[i], namespace);\r\n          // TODO: what about namespaced types?\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            members[i].range\r\n          );\r\n          break;\r\n        }\r\n        case NodeKind.VARIABLE: {\r\n          this.initializeVariables(<VariableStatement>members[i], namespace);\r\n          break;\r\n        }\r\n        default: {\r\n          throw new Error(\"namespace member expected\");\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeTypeAlias(declaration: TypeDeclaration, namespace: Element | null = null): void {\r\n    // type aliases are program globals\r\n    // TODO: what about namespaced types?\r\n    var name = declaration.name.text;\r\n    if (this.typesLookup.has(name) || this.typeAliases.has(name)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, name\r\n      );\r\n      return;\r\n    }\r\n    var alias = new TypeAlias();\r\n    alias.typeParameters = declaration.typeParameters;\r\n    alias.type = declaration.type;\r\n    this.typeAliases.set(name, alias);\r\n  }\r\n\r\n  private initializeVariables(statement: VariableStatement, namespace: Element | null = null): void {\r\n    var declarations = statement.declarations;\r\n    for (let i = 0, k = declarations.length; i < k; ++i) {\r\n      let declaration = declarations[i];\r\n      let internalName = declaration.fileLevelInternalName;\r\n      if (this.elementsLookup.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        continue;\r\n      }\r\n      let simpleName = declaration.name.text;\r\n      let global = new Global(\r\n        this,\r\n        simpleName,\r\n        internalName,\r\n        Type.void, // resolved later on\r\n        declaration\r\n      );\r\n      global.namespace = namespace;\r\n      this.elementsLookup.set(internalName, global);\r\n\r\n      if (namespace) {\r\n        if (namespace.members) {\r\n          if (namespace.members.has(simpleName)) {\r\n            this.error(\r\n              DiagnosticCode.Duplicate_identifier_0,\r\n              declaration.name.range, internalName\r\n            );\r\n            continue;\r\n          }\r\n        } else {\r\n          namespace.members = new Map();\r\n        }\r\n        namespace.members.set(simpleName, global);\r\n        if (namespace.is(CommonFlags.MODULE_EXPORT) && global.is(CommonFlags.EXPORT)) {\r\n          global.set(CommonFlags.MODULE_EXPORT);\r\n        }\r\n      } else if (global.is(CommonFlags.EXPORT)) { // no namespace\r\n        if (this.fileLevelExports.has(internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n        } else {\r\n          this.fileLevelExports.set(internalName, global);\r\n        }\r\n        if (declaration.range.source.isEntry) {\r\n          if (this.moduleLevelExports.has(internalName)) {\r\n            this.error(\r\n              DiagnosticCode.Duplicate_identifier_0,\r\n              declaration.name.range, internalName\r\n            );\r\n            continue;\r\n          }\r\n          global.set(CommonFlags.MODULE_EXPORT);\r\n          this.moduleLevelExports.set(internalName, global);\r\n        }\r\n      }\r\n      this.checkGlobalOptions(global, declaration);\r\n    }\r\n  }\r\n\r\n  /** Resolves a {@link SignatureNode} to a concrete {@link Signature}. */\r\n  resolveSignature(\r\n    node: SignatureNode,\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    reportNotFound: bool = true\r\n  ): Signature | null {\r\n    var explicitThisType = node.explicitThisType;\r\n    var thisType: Type | null = null;\r\n    if (explicitThisType) {\r\n      thisType = this.resolveType(\r\n        explicitThisType,\r\n        contextualTypeArguments,\r\n        reportNotFound\r\n      );\r\n      if (!thisType) return null;\r\n    }\r\n    var parameterTypeNodes = node.parameterTypes;\r\n    var numParameters = parameterTypeNodes.length;\r\n    var parameterTypes = new Array<Type>(numParameters);\r\n    var parameterNames = new Array<string>(numParameters);\r\n    var requiredParameters = 0;\r\n    var hasRest = false;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      let parameterTypeNode = parameterTypeNodes[i];\r\n      switch (parameterTypeNode.parameterKind) {\r\n        case ParameterKind.DEFAULT: {\r\n          requiredParameters = i + 1;\r\n          break;\r\n        }\r\n        case ParameterKind.REST: {\r\n          assert(i == numParameters);\r\n          hasRest = true;\r\n          break;\r\n        }\r\n      }\r\n      let parameterType = this.resolveType(\r\n        assert(parameterTypeNode.type),\r\n        contextualTypeArguments,\r\n        reportNotFound\r\n      );\r\n      if (!parameterType) return null;\r\n      parameterTypes[i] = parameterType;\r\n      parameterNames[i] = parameterTypeNode.name.text;\r\n    }\r\n    var returnTypeNode = node.returnType;\r\n    var returnType: Type | null;\r\n    if (returnTypeNode) {\r\n      returnType = this.resolveType(\r\n        returnTypeNode,\r\n        contextualTypeArguments,\r\n        reportNotFound\r\n      );\r\n      if (!returnType) return null;\r\n    } else {\r\n      returnType = Type.void;\r\n    }\r\n    var signature = new Signature(parameterTypes, returnType, thisType);\r\n    signature.parameterNames = parameterNames;\r\n    signature.requiredParameters = requiredParameters;\r\n    signature.hasRest = hasRest;\r\n    return signature;\r\n  }\r\n\r\n  /** Resolves a {@link CommonTypeNode} to a concrete {@link Type}. */\r\n  resolveType(\r\n    node: CommonTypeNode,\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    reportNotFound: bool = true\r\n  ): Type | null {\r\n    if (node.kind == NodeKind.SIGNATURE) {\r\n      let signature = this.resolveSignature(<SignatureNode>node, contextualTypeArguments, reportNotFound);\r\n      if (!signature) return null;\r\n      return Type.u32.asFunction(signature);\r\n    }\r\n    var typeNode = <TypeNode>node;\r\n    var simpleName = typeNode.name.text;\r\n    var globalName = simpleName;\r\n    var localName = typeNode.range.source.internalPath + PATH_DELIMITER + simpleName;\r\n\r\n    var element: Element | null;\r\n\r\n    // check file-global / program-global element\r\n    if ((element = this.elementsLookup.get(localName)) || (element = this.elementsLookup.get(globalName))) {\r\n      switch (element.kind) {\r\n        case ElementKind.CLASS_PROTOTYPE: {\r\n          let instance = (<ClassPrototype>element).resolveUsingTypeArguments(\r\n            typeNode.typeArguments,\r\n            contextualTypeArguments,\r\n            null\r\n          ); // reports\r\n          return instance ? instance.type : null;\r\n        }\r\n      }\r\n    }\r\n\r\n    // check (global) type alias\r\n    var alias = this.typeAliases.get(simpleName);\r\n    if (alias) return this.resolveType(alias.type, contextualTypeArguments, reportNotFound);\r\n\r\n    // resolve parameters\r\n    if (typeNode.typeArguments) {\r\n      let k = typeNode.typeArguments.length;\r\n      let paramTypes = new Array<Type>(k);\r\n      for (let i = 0; i < k; ++i) {\r\n        let paramType = this.resolveType( // reports\r\n          typeNode.typeArguments[i],\r\n          contextualTypeArguments,\r\n          reportNotFound\r\n        );\r\n        if (!paramType) return null;\r\n        paramTypes[i] = paramType;\r\n      }\r\n\r\n      if (k) { // can't be a placeholder if it has parameters\r\n        let instanceKey = typesToString(paramTypes);\r\n        if (instanceKey.length) {\r\n          localName += \"<\" + instanceKey + \">\";\r\n          globalName += \"<\" + instanceKey + \">\";\r\n        }\r\n      } else if (contextualTypeArguments) {\r\n        let placeholderType = contextualTypeArguments.get(globalName);\r\n        if (placeholderType) return placeholderType;\r\n      }\r\n    }\r\n\r\n    var type: Type | null;\r\n\r\n    // check file-global / program-global type\r\n    if ((type = this.typesLookup.get(localName)) || (type = this.typesLookup.get(globalName))) {\r\n      return type;\r\n    }\r\n\r\n    if (reportNotFound) {\r\n      this.error(\r\n        DiagnosticCode.Cannot_find_name_0,\r\n        typeNode.name.range, globalName\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves an array of type arguments to concrete types. */\r\n  resolveTypeArguments(\r\n    typeParameters: TypeParameterNode[],\r\n    typeArgumentNodes: CommonTypeNode[] | null,\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    alternativeReportNode: Node | null = null\r\n  ): Type[] | null {\r\n    var parameterCount = typeParameters.length;\r\n    var argumentCount = typeArgumentNodes ? typeArgumentNodes.length : 0;\r\n    if (parameterCount != argumentCount) {\r\n      if (argumentCount) {\r\n        this.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          Range.join(\r\n            (<TypeNode[]>typeArgumentNodes)[0].range,\r\n            (<TypeNode[]>typeArgumentNodes)[argumentCount - 1].range\r\n          ),\r\n          parameterCount.toString(10), argumentCount.toString(10)\r\n        );\r\n      } else if (alternativeReportNode) {\r\n        this.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          alternativeReportNode.range.atEnd, parameterCount.toString(10), \"0\"\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n    var typeArguments = new Array<Type>(parameterCount);\r\n    for (let i = 0; i < parameterCount; ++i) {\r\n      let type = this.resolveType( // reports\r\n        (<TypeNode[]>typeArgumentNodes)[i],\r\n        contextualTypeArguments,\r\n        true\r\n      );\r\n      if (!type) return null;\r\n      // TODO: check extendsType\r\n      typeArguments[i] = type;\r\n    }\r\n    return typeArguments;\r\n  }\r\n\r\n  /** Resolves an identifier to the element it refers to. */\r\n  resolveIdentifier(\r\n    identifier: IdentifierExpression,\r\n    contextualFunction: Function | null,\r\n    contextualEnum: Enum | null = null\r\n  ): ResolvedElement | null {\r\n    var name = identifier.text;\r\n\r\n    var element: Element | null;\r\n    var namespace: Element | null;\r\n\r\n    // check siblings\r\n    if (contextualEnum) {\r\n\r\n      if (\r\n        contextualEnum.members &&\r\n        (element = contextualEnum.members.get(name)) &&\r\n        element.kind == ElementKind.ENUMVALUE\r\n      ) {\r\n        if (!resolvedElement) resolvedElement = new ResolvedElement();\r\n        return resolvedElement.set(element);\r\n      }\r\n\r\n    } else if (contextualFunction) {\r\n\r\n      // check locals\r\n      if (element = contextualFunction.flow.getScopedLocal(name)) {\r\n        if (!resolvedElement) resolvedElement = new ResolvedElement();\r\n        return resolvedElement.set(element);\r\n      }\r\n\r\n      // check outer scope locals\r\n      // let outerScope = contextualFunction.outerScope;\r\n      // while (outerScope) {\r\n      //   if (element = outerScope.getScopedLocal(name)) {\r\n      //     let scopedLocal = <Local>element;\r\n      //     let scopedGlobal = scopedLocal.scopedGlobal;\r\n      //     if (!scopedGlobal) scopedGlobal = outerScope.addScopedGlobal(scopedLocal);\r\n      //     if (!resolvedElement) resolvedElement = new ResolvedElement();\r\n      //     return resolvedElement.set(scopedGlobal);\r\n      //   }\r\n      //   outerScope = outerScope.currentFunction.outerScope;\r\n      // }\r\n\r\n      // search contextual parent namespaces if applicable\r\n      if (namespace = contextualFunction.prototype.namespace) {\r\n        do {\r\n          if (element = this.elementsLookup.get(namespace.internalName + STATIC_DELIMITER + name)) {\r\n            if (!resolvedElement) resolvedElement = new ResolvedElement();\r\n            return resolvedElement.set(element);\r\n          }\r\n        } while (namespace = namespace.namespace);\r\n      }\r\n    }\r\n\r\n    // search current file\r\n    if (element = this.elementsLookup.get(identifier.range.source.internalPath + PATH_DELIMITER + name)) {\r\n      if (!resolvedElement) resolvedElement = new ResolvedElement();\r\n      return resolvedElement.set(element);\r\n    }\r\n\r\n    // search global scope\r\n    if (element = this.elementsLookup.get(name)) {\r\n      if (!resolvedElement) resolvedElement = new ResolvedElement();\r\n      return resolvedElement.set(element);\r\n    }\r\n\r\n    this.error(\r\n      DiagnosticCode.Cannot_find_name_0,\r\n      identifier.range, name\r\n    );\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a property access to the element it refers to. */\r\n  resolvePropertyAccess(\r\n    propertyAccess: PropertyAccessExpression,\r\n    contextualFunction: Function\r\n  ): ResolvedElement | null {\r\n    // start by resolving the lhs target (expression before the last dot)\r\n    var targetExpression = propertyAccess.expression;\r\n    resolvedElement = this.resolveExpression( // reports\r\n      targetExpression,\r\n      contextualFunction\r\n    );\r\n    if (!resolvedElement) return null;\r\n    var target = resolvedElement.element;\r\n\r\n    // at this point we know exactly what the target is, so look up the element within\r\n    var propertyName = propertyAccess.property.text;\r\n    var targetType: Type;\r\n    var member: Element | null;\r\n\r\n    // Resolve variable-likes to their class type first\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL:\r\n      case ElementKind.LOCAL:\r\n      case ElementKind.FIELD: {\r\n        if (!(targetType = (<VariableLikeElement>target).type).classReference) {\r\n          this.error(\r\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n            propertyAccess.property.range, propertyName, targetType.toString()\r\n          );\r\n          return null;\r\n        }\r\n        target = <Class>targetType.classReference;\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: {\r\n        let getter = assert((<Property>target).getterPrototype).resolve(); // reports\r\n        if (!getter) return null;\r\n        if (!(targetType = getter.signature.returnType).classReference) {\r\n          this.error(\r\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n            propertyAccess.property.range, propertyName, targetType.toString()\r\n          );\r\n          return null;\r\n        }\r\n        target = <Class>targetType.classReference;\r\n        break;\r\n      }\r\n    }\r\n\r\n    // Look up the member within\r\n    switch (target.kind) {\r\n      case ElementKind.CLASS_PROTOTYPE:\r\n      case ElementKind.CLASS: {\r\n        do {\r\n          if (target.members && (member = target.members.get(propertyName))) {\r\n            return resolvedElement.set(member).withTarget(target, targetExpression);\r\n          }\r\n          // check inherited static members on the base prototype while target is a class prototype\r\n          if (target.kind == ElementKind.CLASS_PROTOTYPE) {\r\n            if ((<ClassPrototype>target).basePrototype) {\r\n              target = <ClassPrototype>(<ClassPrototype>target).basePrototype;\r\n            } else {\r\n              break;\r\n            }\r\n          // or inherited instance members on the base class while target is a class instance\r\n          } else if (target.kind == ElementKind.CLASS) {\r\n            if ((<Class>target).base) {\r\n              target = <Class>(<Class>target).base;\r\n            } else {\r\n              break;\r\n            }\r\n          } else {\r\n            break;\r\n          }\r\n        } while (true);\r\n        break;\r\n      }\r\n      default: { // enums or other namespace-like elements\r\n        if (target.members && (member = target.members.get(propertyName))) {\r\n          return resolvedElement.set(member).withTarget(target, targetExpression);\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n      propertyAccess.property.range, propertyName, target.internalName\r\n    );\r\n    return null;\r\n  }\r\n\r\n  resolveElementAccess(\r\n    elementAccess: ElementAccessExpression,\r\n    contextualFunction: Function\r\n  ): ResolvedElement | null {\r\n    // start by resolving the lhs target\r\n    var targetExpression = elementAccess.expression;\r\n    resolvedElement = this.resolveExpression(\r\n      targetExpression,\r\n      contextualFunction\r\n    );\r\n    if (!resolvedElement) return null;\r\n    var target = resolvedElement.element;\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL:\r\n      case ElementKind.LOCAL:\r\n      case ElementKind.FIELD: {\r\n        let type = (<VariableLikeElement>target).type;\r\n        if (type.classReference) {\r\n          let indexedGetName = (target = type.classReference).prototype.fnIndexedGet;\r\n          let indexedGet: Element | null;\r\n          if (\r\n            indexedGetName != null &&\r\n            target.members &&\r\n            (indexedGet = target.members.get(indexedGetName)) &&\r\n            indexedGet.kind == ElementKind.FUNCTION_PROTOTYPE\r\n          ) {\r\n            return resolvedElement.set(indexedGet).withTarget(type.classReference, targetExpression);\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      // FIXME: indexed access on indexed access\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n      targetExpression.range, target.internalName\r\n    );\r\n    return null;\r\n  }\r\n\r\n  resolveExpression(\r\n    expression: Expression,\r\n    contextualFunction: Function\r\n  ): ResolvedElement | null {\r\n    while (expression.kind == NodeKind.PARENTHESIZED) {\r\n      expression = (<ParenthesizedExpression>expression).expression;\r\n    }\r\n    switch (expression.kind) {\r\n      case NodeKind.ASSERTION: {\r\n        let type = this.resolveType((<AssertionExpression>expression).toType); // reports\r\n        if (type) {\r\n          let classType = type.classReference;\r\n          if (classType) {\r\n            if (!resolvedElement) resolvedElement = new ResolvedElement();\r\n            return resolvedElement.set(classType);\r\n          }\r\n        }\r\n        return null;\r\n      }\r\n      case NodeKind.BINARY: { // TODO: string concatenation, mostly\r\n        throw new Error(\"not implemented\");\r\n      }\r\n      case NodeKind.THIS: { // -> Class / ClassPrototype\r\n        let parent = contextualFunction.memberOf;\r\n        if (parent) {\r\n          if (!resolvedElement) resolvedElement = new ResolvedElement();\r\n          return resolvedElement.set(parent);\r\n        }\r\n        this.error(\r\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\r\n          expression.range\r\n        );\r\n        return null;\r\n      }\r\n      case NodeKind.SUPER: { // -> Class\r\n        let parent = contextualFunction.memberOf;\r\n        if (parent && parent.kind == ElementKind.CLASS && (parent = (<Class>parent).base)) {\r\n          if (!resolvedElement) resolvedElement = new ResolvedElement();\r\n          return resolvedElement.set(parent);\r\n        }\r\n        this.error(\r\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\r\n          expression.range\r\n        );\r\n        return null;\r\n      }\r\n      case NodeKind.IDENTIFIER: {\r\n        return this.resolveIdentifier(<IdentifierExpression>expression, contextualFunction);\r\n      }\r\n      case NodeKind.PROPERTYACCESS: {\r\n        return this.resolvePropertyAccess(\r\n          <PropertyAccessExpression>expression,\r\n          contextualFunction\r\n        );\r\n      }\r\n      case NodeKind.ELEMENTACCESS: {\r\n        return this.resolveElementAccess(\r\n          <ElementAccessExpression>expression,\r\n          contextualFunction\r\n        );\r\n      }\r\n      case NodeKind.CALL: {\r\n        let resolved = this.resolveExpression(\r\n          (<CallExpression>expression).expression,\r\n          contextualFunction\r\n        );\r\n        if (resolved) {\r\n          let element = resolved.element;\r\n          if (element && element.kind == ElementKind.FUNCTION_PROTOTYPE) {\r\n            let instance = (<FunctionPrototype>element).resolveUsingTypeArguments(\r\n              (<CallExpression>expression).typeArguments,\r\n              contextualFunction.contextualTypeArguments,\r\n              expression\r\n            );\r\n            if (instance) {\r\n              let returnType = instance.signature.returnType;\r\n              let classType = returnType.classReference;\r\n              if (classType) {\r\n                if (!resolvedElement) resolvedElement = new ResolvedElement();\r\n                return resolvedElement.set(classType);\r\n              } else {\r\n                let signature = returnType.signatureReference;\r\n                if (signature) {\r\n                  let functionTarget = signature.cachedFunctionTarget;\r\n                  if (!functionTarget) {\r\n                    functionTarget = new FunctionTarget(this, signature);\r\n                    signature.cachedFunctionTarget = functionTarget;\r\n                  }\r\n                  if (!resolvedElement) resolvedElement = new ResolvedElement();\r\n                  return resolvedElement.set(functionTarget);\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    return null;\r\n  }\r\n}\r\n\r\n/** Common result structure returned when calling any of the resolve functions on a {@link Program}. */\r\nexport class ResolvedElement {\r\n\r\n  /** The target element, if a property or element access */\r\n  target: Element | null;\r\n  /** The target element's expression, if a property or element access. */\r\n  targetExpression: Expression | null;\r\n  /** The element being accessed. */\r\n  element: Element;\r\n\r\n  /** Clears the target and sets the resolved element. */\r\n  set(element: Element): this {\r\n    this.target = null;\r\n    this.targetExpression = null;\r\n    this.element = element;\r\n    return this;\r\n  }\r\n\r\n  /** Sets the resolved target in addition to the previously set element. */\r\n  withTarget(target: Element, targetExpression: Expression): this {\r\n    this.target = target;\r\n    this.targetExpression = targetExpression;\r\n    return this;\r\n  }\r\n\r\n  /** Tests if the target is a valid instance target. */\r\n  get isInstanceTarget(): bool {\r\n    return (\r\n      this.target != null &&\r\n      this.target.kind == ElementKind.CLASS &&\r\n      this.targetExpression != null\r\n    );\r\n  }\r\n}\r\n\r\n// Cached result structure instance\r\nvar resolvedElement: ResolvedElement | null;\r\n\r\n/** Indicates the specific kind of an {@link Element}. */\r\nexport enum ElementKind {\r\n  /** A {@link Global}. */\r\n  GLOBAL,\r\n  /** A {@link Local}. */\r\n  LOCAL,\r\n  /** An {@link Enum}. */\r\n  ENUM,\r\n  /** An {@link EnumValue}. */\r\n  ENUMVALUE,\r\n  /** A {@link FunctionPrototype}. */\r\n  FUNCTION_PROTOTYPE,\r\n  /** A {@link Function}. */\r\n  FUNCTION,\r\n  /** A {@link FunctionTarget}. */\r\n  FUNCTION_TARGET,\r\n  /** A {@link ClassPrototype}. */\r\n  CLASS_PROTOTYPE,\r\n  /** A {@link Class}. */\r\n  CLASS,\r\n  /** An {@link InterfacePrototype}. */\r\n  INTERFACE_PROTOTYPE,\r\n  /** An {@link Interface}. */\r\n  INTERFACE,\r\n  /** A {@link FieldPrototype}. */\r\n  FIELD_PROTOTYPE,\r\n  /** A {@link Field}. */\r\n  FIELD,\r\n  /** A {@link Property}. */\r\n  PROPERTY,\r\n  /** A {@link Namespace}. */\r\n  NAMESPACE\r\n}\r\n\r\n/** Indicates traits of a {@link Node} or {@link Element}. */\r\nexport enum CommonFlags {\r\n  /** No flags set. */\r\n  NONE = 0,\r\n\r\n  // Basic modifiers\r\n\r\n  /** Has an `import` modifier. */\r\n  IMPORT = 1 << 0,\r\n  /** Has an `export` modifier. */\r\n  EXPORT = 1 << 1,\r\n  /** Has a `declare` modifier. */\r\n  DECLARE = 1 << 2,\r\n  /** Has a `const` modifier. */\r\n  CONST = 1 << 3,\r\n  /** Has a `let` modifier. */\r\n  LET = 1 << 4,\r\n  /** Has a `static` modifier. */\r\n  STATIC = 1 << 5,\r\n  /** Has a `readonly` modifier. */\r\n  READONLY = 1 << 6,\r\n  /** Has an `abstract` modifier. */\r\n  ABSTRACT = 1 << 7,\r\n  /** Has a `public` modifier. */\r\n  PUBLIC = 1 << 8,\r\n  /** Has a `private` modifier. */\r\n  PRIVATE = 1 << 9,\r\n  /** Has a `protected` modifier. */\r\n  PROTECTED = 1 << 10,\r\n  /** Has a `get` modifier. */\r\n  GET = 1 << 11,\r\n  /** Has a `set` modifier. */\r\n  SET = 1 << 12,\r\n\r\n  // Internal decorators\r\n\r\n  /** Is global. */\r\n  GLOBAL = 1 << 13,\r\n  /** Is built-in. */\r\n  BUILTIN = 1 << 14,\r\n  /** Is unmanaged. */\r\n  UNMANAGED = 1 << 15,\r\n  /** Is sealed. */\r\n  SEALED = 1 << 16,\r\n\r\n  // Extended modifiers usually derived from basic modifiers or internal decorators\r\n\r\n  /** Is ambient, that is either declared or nested in a declared element. */\r\n  AMBIENT = 1 << 17,\r\n  /** Is generic. */\r\n  GENERIC = 1 << 18,\r\n  /** Is part of a generic context. */\r\n  GENERIC_CONTEXT = 1 << 19,\r\n  /** Is an instance member. */\r\n  INSTANCE = 1 << 20,\r\n  /** Is a constructor. */\r\n  CONSTRUCTOR = 1 << 21,\r\n  /** Is an arrow function. */\r\n  ARROW = 1 << 22,\r\n  /** Is a module export. */\r\n  MODULE_EXPORT = 1 << 23,\r\n  /** Is a module import. */\r\n  MODULE_IMPORT = 1 << 24,\r\n\r\n  // Compilation states\r\n\r\n  /** Is compiled. */\r\n  COMPILED = 1 << 25,\r\n  /** Has a constant value and is therefore inlined. */\r\n  INLINED = 1 << 26,\r\n  /** Is scoped. */\r\n  SCOPED = 1 << 27,\r\n  /** Is a trampoline. */\r\n  TRAMPOLINE = 1 << 28\r\n}\r\n\r\n/** Base class of all program elements. */\r\nexport abstract class Element {\r\n\r\n  /** Specific element kind. */\r\n  kind: ElementKind;\r\n  /** Containing {@link Program}. */\r\n  program: Program;\r\n  /** Simple name. */\r\n  simpleName: string;\r\n  /** Internal name referring to this element. */\r\n  internalName: string;\r\n  /** Common flags indicating specific traits. */\r\n  flags: CommonFlags = CommonFlags.NONE;\r\n  /** Namespaced member elements. */\r\n  members: Map<string,Element> | null = null;\r\n  /** Parent namespace, if applicable. */\r\n  namespace: Element | null = null;\r\n\r\n  /** Constructs a new element, linking it to its containing {@link Program}. */\r\n  protected constructor(program: Program, simpleName: string, internalName: string) {\r\n    this.program = program;\r\n    this.simpleName = simpleName;\r\n    this.internalName = internalName;\r\n  }\r\n\r\n  /** Tests if this element has a specific flag or flags. */\r\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Tests if this element has any of the specified flags. */\r\n  isAny(flags: CommonFlags): bool { return (this.flags & flags) != 0; }\r\n  /** Sets a specific flag or flags. */\r\n  set(flag: CommonFlags): void { this.flags |= flag; }\r\n}\r\n\r\n/** A namespace. */\r\nexport class Namespace extends Element {\r\n\r\n  // All elements have namespace semantics. This is an explicitly declared one.\r\n  kind = ElementKind.NAMESPACE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: NamespaceDeclaration; // more specific\r\n\r\n  /** Constructs a new namespace. */\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: NamespaceDeclaration\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n  }\r\n}\r\n\r\n/** An enum. */\r\nexport class Enum extends Element {\r\n\r\n  kind = ElementKind.ENUM;\r\n\r\n  /** Declaration reference. */\r\n  declaration: EnumDeclaration;\r\n\r\n  /** Constructs a new enum. */\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: EnumDeclaration\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n  }\r\n}\r\n\r\n/** An enum value. */\r\nexport class EnumValue extends Element {\r\n\r\n  kind = ElementKind.ENUMVALUE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: EnumValueDeclaration;\r\n  /** Parent enum. */\r\n  enum: Enum;\r\n  /** Constant value, if applicable. */\r\n  constantValue: i32 = 0;\r\n\r\n  constructor(\r\n    enm: Enum,\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: EnumValueDeclaration\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.enum = enm;\r\n    this.declaration = declaration;\r\n  }\r\n}\r\n\r\nexport const enum ConstantValueKind {\r\n  NONE,\r\n  INTEGER,\r\n  FLOAT\r\n}\r\n\r\nexport class VariableLikeElement extends Element {\r\n\r\n  // kind varies\r\n\r\n  /** Declaration reference. */\r\n  declaration: VariableLikeDeclarationStatement | null;\r\n  /** Variable type. Is {@link Type.void} for type-inferred {@link Global}s before compilation. */\r\n  type: Type;\r\n  /** Constant value kind. */\r\n  constantValueKind: ConstantValueKind = ConstantValueKind.NONE;\r\n  /** Constant integer value, if applicable. */\r\n  constantIntegerValue: I64;\r\n  /** Constant float value, if applicable. */\r\n  constantFloatValue: f64;\r\n\r\n  protected constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    type: Type,\r\n    declaration: VariableLikeDeclarationStatement | null\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.type = type;\r\n    this.declaration = declaration;\r\n  }\r\n\r\n  withConstantIntegerValue(lo: i32, hi: i32): this {\r\n    this.constantValueKind = ConstantValueKind.INTEGER;\r\n    this.constantIntegerValue = i64_new(lo, hi);\r\n    this.set(CommonFlags.CONST | CommonFlags.INLINED);\r\n    return this;\r\n  }\r\n\r\n  withConstantFloatValue(value: f64): this {\r\n    this.constantValueKind = ConstantValueKind.FLOAT;\r\n    this.constantFloatValue = value;\r\n    this.set(CommonFlags.CONST | CommonFlags.INLINED);\r\n    return this;\r\n  }\r\n}\r\n\r\n/** A global variable. */\r\nexport class Global extends VariableLikeElement {\r\n\r\n  kind = ElementKind.GLOBAL;\r\n\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    type: Type,\r\n    declaration: VariableLikeDeclarationStatement | null\r\n  ) {\r\n    super(program, simpleName, internalName, type, declaration);\r\n    this.flags = declaration ? declaration.flags : CommonFlags.NONE;\r\n    this.type = type; // resolved later if `void`\r\n  }\r\n}\r\n\r\n/** A function parameter. */\r\nexport class Parameter {\r\n\r\n  // not an Element on its own\r\n\r\n  /** Parameter name. */\r\n  name: string;\r\n  /** Parameter type. */\r\n  type: Type;\r\n  /** Parameter initializer. */\r\n  initializer: Expression | null;\r\n\r\n  /** Constructs a new function parameter. */\r\n  constructor(name: string, type: Type, initializer: Expression | null = null) {\r\n    this.name = name;\r\n    this.type = type;\r\n    this.initializer = initializer;\r\n  }\r\n}\r\n\r\n/** A function local. */\r\nexport class Local extends VariableLikeElement {\r\n\r\n  kind = ElementKind.LOCAL;\r\n\r\n  /** Local index. */\r\n  index: i32;\r\n  /** Respective scoped global, if any. */\r\n  scopedGlobal: Global | null = null;\r\n\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    index: i32,\r\n    type: Type,\r\n    declaration: VariableLikeDeclarationStatement | null = null\r\n  ) {\r\n    super(program, simpleName, simpleName, type, declaration);\r\n    this.index = index;\r\n  }\r\n}\r\n\r\n/** A yet unresolved function prototype. */\r\nexport class FunctionPrototype extends Element {\r\n\r\n  kind = ElementKind.FUNCTION_PROTOTYPE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: FunctionDeclaration;\r\n  /** If an instance method, the class prototype reference. */\r\n  classPrototype: ClassPrototype | null;\r\n  /** Resolved instances. */\r\n  instances: Map<string,Function> = new Map();\r\n  /** Class type arguments, if a partially resolved method of a generic class. Not set otherwise. */\r\n  classTypeArguments: Type[] | null = null;\r\n\r\n  /** Constructs a new function prototype. */\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: FunctionDeclaration,\r\n    classPrototype: ClassPrototype | null = null\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n    this.classPrototype = classPrototype;\r\n  }\r\n\r\n  /** Resolves this prototype to an instance using the specified concrete type arguments. */\r\n  resolve(\r\n    functionTypeArguments: Type[] | null = null,\r\n    contextualTypeArguments: Map<string,Type> | null = null\r\n  ): Function | null {\r\n    var instanceKey = functionTypeArguments ? typesToString(functionTypeArguments) : \"\";\r\n    var instance = this.instances.get(instanceKey);\r\n    if (instance) return instance;\r\n\r\n    var declaration = this.declaration;\r\n    var isInstance = this.is(CommonFlags.INSTANCE);\r\n    var classPrototype = this.classPrototype;\r\n\r\n    // inherit contextual type arguments as provided. might be be overridden.\r\n    var inheritedTypeArguments = contextualTypeArguments;\r\n    contextualTypeArguments = new Map();\r\n    if (inheritedTypeArguments) {\r\n      for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\r\n        contextualTypeArguments.set(\r\n          inheritedName,\r\n          inheritedType\r\n        );\r\n      }\r\n    }\r\n\r\n    // override with class type arguments if a partially resolved instance method\r\n    var classTypeArguments = this.classTypeArguments;\r\n    if (classTypeArguments) { // set only if partially resolved\r\n      assert(this.is(CommonFlags.INSTANCE));\r\n      let classDeclaration = assert(classPrototype).declaration;\r\n      let classTypeParameters = classDeclaration.typeParameters;\r\n      let numClassTypeParameters = classTypeParameters.length;\r\n      assert(numClassTypeParameters == classTypeArguments.length);\r\n      for (let i = 0; i < numClassTypeParameters; ++i) {\r\n        contextualTypeArguments.set(\r\n          classTypeParameters[i].name.text,\r\n          classTypeArguments[i]\r\n        );\r\n      }\r\n    } else {\r\n      assert(!classTypeArguments);\r\n    }\r\n\r\n    // override with function specific type arguments\r\n    var signatureNode = declaration.signature;\r\n    var functionTypeParameters = declaration.typeParameters;\r\n    var numFunctionTypeArguments: i32;\r\n    if (functionTypeArguments && (numFunctionTypeArguments = functionTypeArguments.length)) {\r\n      assert(functionTypeParameters && numFunctionTypeArguments == functionTypeParameters.length);\r\n      for (let i = 0; i < numFunctionTypeArguments; ++i) {\r\n        contextualTypeArguments.set(\r\n          (<TypeParameterNode[]>functionTypeParameters)[i].name.text,\r\n          functionTypeArguments[i]\r\n        );\r\n      }\r\n    } else {\r\n      assert(!functionTypeParameters || functionTypeParameters.length == 0);\r\n    }\r\n\r\n    // resolve class if an instance method\r\n    var classInstance: Class | null = null;\r\n    var thisType: Type | null = null;\r\n    if (isInstance) {\r\n      classInstance = assert(classPrototype).resolve(classTypeArguments, contextualTypeArguments); // reports\r\n      if (!classInstance) return null;\r\n      thisType = classInstance.type;\r\n    }\r\n\r\n    // resolve signature node\r\n    var signatureParameters = signatureNode.parameterTypes;\r\n    var signatureParameterCount = signatureParameters.length;\r\n    var parameterTypes = new Array<Type>(signatureParameterCount);\r\n    var parameterNames = new Array<string>(signatureParameterCount);\r\n    var requiredParameters = 0;\r\n    for (let i = 0; i < signatureParameterCount; ++i) {\r\n      let parameterDeclaration = signatureParameters[i];\r\n      if (parameterDeclaration.parameterKind == ParameterKind.DEFAULT) {\r\n        requiredParameters = i + 1;\r\n      }\r\n      let typeNode = assert(parameterDeclaration.type);\r\n      let parameterType = this.program.resolveType(typeNode, contextualTypeArguments, true); // reports\r\n      if (!parameterType) return null;\r\n      parameterTypes[i] = parameterType;\r\n      parameterNames[i] = parameterDeclaration.name.text;\r\n    }\r\n\r\n    var returnType: Type;\r\n    if (this.is(CommonFlags.SET)) {\r\n      returnType = Type.void; // not annotated\r\n    } else if (this.is(CommonFlags.CONSTRUCTOR)) {\r\n      returnType = assert(classInstance).type; // not annotated\r\n    } else {\r\n      let typeNode = assert(signatureNode.returnType);\r\n      let type = this.program.resolveType(typeNode, contextualTypeArguments, true); // reports\r\n      if (!type) return null;\r\n      returnType = type;\r\n    }\r\n\r\n    var signature = new Signature(parameterTypes, returnType, thisType);\r\n    signature.parameterNames = parameterNames;\r\n    signature.requiredParameters = requiredParameters;\r\n\r\n    var internalName = this.internalName;\r\n    if (instanceKey.length) internalName += \"<\" + instanceKey + \">\";\r\n    instance = new Function(this, internalName, signature, classInstance ? classInstance : classPrototype);\r\n    instance.contextualTypeArguments = contextualTypeArguments;\r\n    this.instances.set(instanceKey, instance);\r\n    return instance;\r\n  }\r\n\r\n  /** Resolves this prototype partially by applying the specified inherited class type arguments. */\r\n  resolvePartial(classTypeArguments: Type[] | null): FunctionPrototype | null {\r\n    assert(this.is(CommonFlags.INSTANCE));\r\n    assert(this.classPrototype);\r\n    if (classTypeArguments && classTypeArguments.length) {\r\n      let partialPrototype = new FunctionPrototype(\r\n        this.program,\r\n        this.simpleName,\r\n        this.internalName,\r\n        this.declaration,\r\n        this.classPrototype\r\n      );\r\n      partialPrototype.flags = this.flags;\r\n      partialPrototype.classTypeArguments = classTypeArguments;\r\n      return partialPrototype;\r\n    }\r\n    return this; // no need to clone\r\n  }\r\n\r\n  /** Resolves the specified type arguments prior to resolving this prototype to an instance. */\r\n  resolveUsingTypeArguments(\r\n    typeArgumentNodes: CommonTypeNode[] | null,\r\n    contextualTypeArguments: Map<string,Type> | null,\r\n    reportNode: Node\r\n  ): Function | null {\r\n    var resolvedTypeArguments: Type[] | null = null;\r\n    if (this.is(CommonFlags.GENERIC)) {\r\n      assert(typeArgumentNodes != null && typeArgumentNodes.length != 0);\r\n      resolvedTypeArguments = this.program.resolveTypeArguments(\r\n        assert(this.declaration.typeParameters),\r\n        typeArgumentNodes,\r\n        contextualTypeArguments,\r\n        reportNode\r\n      );\r\n      if (!resolvedTypeArguments) return null;\r\n    }\r\n    return this.resolve(resolvedTypeArguments, contextualTypeArguments);\r\n  }\r\n\r\n  /** Resolves the type arguments to use when compiling a built-in call. Must be a built-in. */\r\n  resolveBuiltinTypeArguments(\r\n    typeArgumentNodes: CommonTypeNode[] | null,\r\n    contextualTypeArguments: Map<string,Type> | null\r\n  ): Type[] | null {\r\n    assert(this.is(CommonFlags.BUILTIN));\r\n    var resolvedTypeArguments: Type[] | null = null;\r\n    if (typeArgumentNodes) {\r\n      let k = typeArgumentNodes.length;\r\n      resolvedTypeArguments = new Array<Type>(k);\r\n      for (let i = 0; i < k; ++i) {\r\n        let resolvedType = this.program.resolveType( // reports\r\n          typeArgumentNodes[i],\r\n          contextualTypeArguments,\r\n          true\r\n        );\r\n        if (!resolvedType) return null;\r\n        resolvedTypeArguments[i] = resolvedType;\r\n      }\r\n    }\r\n    return resolvedTypeArguments;\r\n  }\r\n\r\n  toString(): string { return this.simpleName; }\r\n}\r\n\r\n/** A resolved function. */\r\nexport class Function extends Element {\r\n\r\n  kind = ElementKind.FUNCTION;\r\n\r\n  /** Prototype reference. */\r\n  prototype: FunctionPrototype;\r\n  /** Function signature. */\r\n  signature: Signature;\r\n  /** If a member of another namespace-like element, the concrete element it is a member of. */\r\n  memberOf: Element | null;\r\n  /** Map of locals by name. */\r\n  locals: Map<string,Local> = new Map();\r\n  /** List of additional non-parameter locals. */\r\n  additionalLocals: Type[] = [];\r\n  /** Current break context label. */\r\n  breakContext: string | null = null;\r\n  /** Contextual type arguments. */\r\n  contextualTypeArguments: Map<string,Type> | null;\r\n  /** Current control flow. */\r\n  flow: Flow;\r\n  /** Remembered debug locations. */\r\n  debugLocations: Range[] | null = null;\r\n  /** Function reference, if compiled. */\r\n  ref: FunctionRef = 0;\r\n  /** Function table index, if any. */\r\n  functionTableIndex: i32 = -1;\r\n  /** Trampoline function for calling with omitted arguments. */\r\n  trampoline: Function | null = null;\r\n  /** The outer scope, if a function expression. */\r\n  outerScope: Flow | null = null;\r\n\r\n  private nextBreakId: i32 = 0;\r\n  private breakStack: i32[] | null = null;\r\n\r\n  /** Constructs a new concrete function. */\r\n  constructor(\r\n    prototype: FunctionPrototype,\r\n    internalName: string,\r\n    signature: Signature,\r\n    memberOf: Element | null = null\r\n  ) {\r\n    super(prototype.program, prototype.simpleName, internalName);\r\n    this.prototype = prototype;\r\n    this.signature = signature;\r\n    this.memberOf = memberOf;\r\n    this.flags = prototype.flags;\r\n    if (!(prototype.is(CommonFlags.AMBIENT | CommonFlags.BUILTIN) || prototype.is(CommonFlags.DECLARE))) {\r\n      let localIndex = 0;\r\n      if (memberOf && memberOf.kind == ElementKind.CLASS) {\r\n        assert(this.is(CommonFlags.INSTANCE));\r\n        this.locals.set(\r\n          \"this\",\r\n          new Local(\r\n            prototype.program,\r\n            \"this\",\r\n            localIndex++,\r\n            assert(signature.thisType)\r\n          )\r\n        );\r\n        let contextualTypeArguments = (<Class>memberOf).contextualTypeArguments;\r\n        if (contextualTypeArguments) {\r\n          if (!this.contextualTypeArguments) {\r\n            this.contextualTypeArguments = new Map();\r\n          }\r\n          for (let [inheritedName, inheritedType] of contextualTypeArguments) {\r\n            this.contextualTypeArguments.set(inheritedName, inheritedType);\r\n          }\r\n        }\r\n      } else {\r\n        assert(!this.is(CommonFlags.INSTANCE)); // internal error\r\n      }\r\n      let parameterTypes = signature.parameterTypes;\r\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\r\n        let parameterType = parameterTypes[i];\r\n        let parameterName = signature.getParameterName(i);\r\n        this.locals.set(\r\n          parameterName,\r\n          new Local(\r\n            prototype.program,\r\n            parameterName,\r\n            localIndex++,\r\n            parameterType\r\n            // FIXME: declaration?\r\n          )\r\n        );\r\n      }\r\n    }\r\n    this.flow = Flow.create(this);\r\n  }\r\n\r\n  /** Adds a local of the specified type, with an optional name. */\r\n  addLocal(type: Type, name: string | null = null, declaration: VariableDeclaration | null = null): Local {\r\n    // if it has a name, check previously as this method will throw otherwise\r\n    var localIndex = this.signature.parameterTypes.length + this.additionalLocals.length;\r\n    if (this.is(CommonFlags.INSTANCE)) ++localIndex;\r\n    var local = new Local(\r\n      this.prototype.program,\r\n      name\r\n        ? name\r\n        : \"var$\" + localIndex.toString(10),\r\n      localIndex,\r\n      type,\r\n      declaration\r\n    );\r\n    if (name) {\r\n      if (this.locals.has(name)) throw new Error(\"duplicate local name\");\r\n      this.locals.set(name, local);\r\n    }\r\n    this.additionalLocals.push(type);\r\n    return local;\r\n  }\r\n\r\n  private tempI32s: Local[] | null = null;\r\n  private tempI64s: Local[] | null = null;\r\n  private tempF32s: Local[] | null = null;\r\n  private tempF64s: Local[] | null = null;\r\n\r\n  /** Gets a free temporary local of the specified type. */\r\n  getTempLocal(type: Type): Local {\r\n    var temps: Local[] | null;\r\n    switch (type.toNativeType()) {\r\n      case NativeType.I32: {\r\n        temps = this.tempI32s;\r\n        break;\r\n      }\r\n      case NativeType.I64: {\r\n        temps = this.tempI64s;\r\n        break;\r\n      }\r\n      case NativeType.F32: {\r\n        temps = this.tempF32s;\r\n        break;\r\n      }\r\n      case NativeType.F64: {\r\n        temps = this.tempF64s;\r\n        break;\r\n      }\r\n      default: throw new Error(\"concrete type expected\");\r\n    }\r\n    if (temps && temps.length) {\r\n      let ret = temps.pop();\r\n      ret.type = type;\r\n      return ret;\r\n    }\r\n    return this.addLocal(type);\r\n  }\r\n\r\n  /** Frees the temporary local for reuse. */\r\n  freeTempLocal(local: Local): void {\r\n    var temps: Local[];\r\n    assert(local.type != null); // internal error\r\n    switch ((<Type>local.type).toNativeType()) {\r\n      case NativeType.I32: {\r\n        temps = this.tempI32s || (this.tempI32s = []);\r\n        break;\r\n      }\r\n      case NativeType.I64: {\r\n        temps = this.tempI64s || (this.tempI64s = []);\r\n        break;\r\n      }\r\n      case NativeType.F32: {\r\n        temps = this.tempF32s || (this.tempF32s = []);\r\n        break;\r\n      }\r\n      case NativeType.F64: {\r\n        temps = this.tempF64s || (this.tempF64s = []);\r\n        break;\r\n      }\r\n      default: throw new Error(\"concrete type expected\");\r\n    }\r\n    temps.push(local);\r\n  }\r\n\r\n  /** Gets and immediately frees a temporary local of the specified type. */\r\n  getAndFreeTempLocal(type: Type): Local {\r\n    var temps: Local[];\r\n    switch (type.toNativeType()) {\r\n      case NativeType.I32: {\r\n        temps = this.tempI32s || (this.tempI32s = []);\r\n        break;\r\n      }\r\n      case NativeType.I64: {\r\n        temps = this.tempI64s || (this.tempI64s = []);\r\n        break;\r\n      }\r\n      case NativeType.F32: {\r\n        temps = this.tempF32s || (this.tempF32s = []);\r\n        break;\r\n      }\r\n      case NativeType.F64: {\r\n        temps = this.tempF64s || (this.tempF64s = []);\r\n        break;\r\n      }\r\n      default: throw new Error(\"concrete type expected\");\r\n    }\r\n    if (temps.length > 0) {\r\n      return temps[temps.length - 1];\r\n    }\r\n    var local: Local = this.addLocal(type);\r\n    temps.push(local);\r\n    return local;\r\n  }\r\n\r\n  /** Enters a(nother) break context. */\r\n  enterBreakContext(): string {\r\n    var id = this.nextBreakId++;\r\n    if (!this.breakStack) {\r\n      this.breakStack = [ id ];\r\n    } else {\r\n      this.breakStack.push(id);\r\n    }\r\n    return this.breakContext = id.toString(10);\r\n  }\r\n\r\n  /** Leaves the current break context. */\r\n  leaveBreakContext(): void {\r\n    assert(this.breakStack != null);\r\n    var length = (<i32[]>this.breakStack).length;\r\n    assert(length > 0);\r\n    (<i32[]>this.breakStack).pop();\r\n    if (length > 1) {\r\n      this.breakContext = (<i32[]>this.breakStack)[length - 2].toString(10);\r\n    } else {\r\n      this.breakContext = null;\r\n      this.breakStack = null;\r\n    }\r\n  }\r\n\r\n  /** Finalizes the function once compiled, releasing no longer needed resources. */\r\n  finalize(module: Module, ref: FunctionRef): void {\r\n    this.ref = ref;\r\n    assert(!this.breakStack || !this.breakStack.length); // internal error\r\n    this.breakStack = null;\r\n    this.breakContext = null;\r\n    this.tempI32s = this.tempI64s = this.tempF32s = this.tempF64s = null;\r\n    if (this.program.options.sourceMap) {\r\n      let debugLocations = this.debugLocations;\r\n      if (debugLocations) {\r\n        for (let i = 0, k = debugLocations.length; i < k; ++i) {\r\n          let debugLocation = debugLocations[i];\r\n          module.setDebugLocation(\r\n            ref,\r\n            debugLocation.debugInfoRef,\r\n            debugLocation.source.debugInfoIndex,\r\n            debugLocation.line,\r\n            debugLocation.column\r\n          );\r\n        }\r\n      }\r\n    }\r\n    this.debugLocations = null;\r\n  }\r\n\r\n  /** Returns the TypeScript representation of this function. */\r\n  toString(): string { return this.prototype.simpleName; }\r\n}\r\n\r\n/** A resolved function target, that is a function called indirectly by an index and signature. */\r\nexport class FunctionTarget extends Element {\r\n\r\n  kind = ElementKind.FUNCTION_TARGET;\r\n\r\n  /** Underlying signature. */\r\n  signature: Signature;\r\n  /** Function type. */\r\n  type: Type;\r\n\r\n  /** Constructs a new function target. */\r\n  constructor(program: Program, signature: Signature) {\r\n    super(program, \"\", \"\");\r\n    var simpleName = signature.toSignatureString();\r\n    this.simpleName = simpleName;\r\n    this.internalName = simpleName;\r\n    this.signature = signature;\r\n    this.type = Type.u32.asFunction(signature);\r\n  }\r\n}\r\n\r\n/** A yet unresolved instance field prototype. */\r\nexport class FieldPrototype extends Element {\r\n\r\n  kind = ElementKind.FIELD_PROTOTYPE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: FieldDeclaration;\r\n  /** Parent class prototype. */\r\n  classPrototype: ClassPrototype;\r\n\r\n  /** Constructs a new field prototype. */\r\n  constructor(\r\n    classPrototype: ClassPrototype,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: FieldDeclaration\r\n  ) {\r\n    super(classPrototype.program, simpleName, internalName);\r\n    this.classPrototype = classPrototype;\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n  }\r\n}\r\n\r\n/** A resolved instance field. */\r\nexport class Field extends VariableLikeElement {\r\n\r\n  kind = ElementKind.FIELD;\r\n\r\n  /** Field prototype reference. */\r\n  prototype: FieldPrototype;\r\n  /** Field memory offset, if an instance field. */\r\n  memoryOffset: i32 = -1;\r\n\r\n  /** Constructs a new field. */\r\n  constructor(\r\n    prototype: FieldPrototype,\r\n    internalName: string,\r\n    type: Type,\r\n    declaration: FieldDeclaration\r\n  ) {\r\n    super(prototype.program, prototype.simpleName, internalName, type, declaration);\r\n    this.prototype = prototype;\r\n    this.flags = prototype.flags;\r\n    this.type = type;\r\n  }\r\n}\r\n\r\n/** A property comprised of a getter and a setter function. */\r\nexport class Property extends Element {\r\n\r\n  kind = ElementKind.PROPERTY;\r\n\r\n  /** Parent class prototype. */\r\n  parent: ClassPrototype;\r\n  /** Getter prototype. */\r\n  getterPrototype: FunctionPrototype | null = null;\r\n  /** Setter prototype. */\r\n  setterPrototype: FunctionPrototype | null = null;\r\n\r\n  /** Constructs a new property prototype. */\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    parent: ClassPrototype\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.parent = parent;\r\n  }\r\n}\r\n\r\n/** A yet unresolved class prototype. */\r\nexport class ClassPrototype extends Element {\r\n\r\n  kind = ElementKind.CLASS_PROTOTYPE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: ClassDeclaration;\r\n  /** Resolved instances. */\r\n  instances: Map<string,Class> = new Map();\r\n  /** Instance member prototypes. */\r\n  instanceMembers: Map<string,Element> | null = null;\r\n  /** Base class prototype, if applicable. */\r\n  basePrototype: ClassPrototype | null = null; // set in Program#initialize\r\n  /** Constructor prototype. */\r\n  constructorPrototype: FunctionPrototype | null = null;\r\n\r\n  /** Overloaded indexed get method, if any. */\r\n  fnIndexedGet: string | null = null;\r\n  /** Overloaded indexed set method, if any. */\r\n  fnIndexedSet: string | null = null;\r\n  /** Overloaded concatenation method, if any. */\r\n  fnConcat: string | null = null;\r\n  /** Overloaded subtraction method, if any. */\r\n  fnSubtract: string | null = null;\r\n  /** Overloaded multiply method, if any. */\r\n  fnMultiply: string | null = null;\r\n  /** Overloaded divide method, if any. */\r\n  fnDivide: string | null = null;\r\n  /** Overloaded fractional method, if any. */\r\n  fnFractional: string | null = null;\r\n  /** Overloaded bitwise and method, if any. */\r\n  fnBitwiseAnd: string | null = null;\r\n  /** Overloaded bitwise or method, if any. */\r\n  fnBitwiseOr: string | null = null;\r\n  /** Overloaded bitwise xor method, if any. */\r\n  fnBitwiseXor: string | null = null;\r\n  /** Overloaded equality comparison method, if any. */\r\n  fnEquals: string | null = null;\r\n  /** Overloaded non-equality comparison method, if any. */\r\n  fnNotEquals: string | null = null;\r\n  /** Overloaded greater comparison method, if any. */\r\n  fnGreaterThan: string | null = null;\r\n  /** Overloaded greater or equal comparison method, if any. */\r\n  fnGreaterThanEquals: string | null = null;\r\n  /** Overloaded less comparison method, if any. */\r\n  fnLessThan: string | null = null;\r\n  /** Overloaded less or equal comparison method, if any. */\r\n  fnLessThanEquals: string | null = null;\r\n\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: ClassDeclaration\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n  }\r\n\r\n  /** Resolves this prototype to an instance using the specified concrete type arguments. */\r\n  resolve(\r\n    typeArguments: Type[] | null,\r\n    contextualTypeArguments: Map<string,Type> | null = null\r\n  ): Class | null {\r\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\r\n    var instance = this.instances.get(instanceKey);\r\n    if (instance) return instance;\r\n\r\n    // inherit contextual type arguments\r\n    var inheritedTypeArguments = contextualTypeArguments;\r\n    contextualTypeArguments = new Map();\r\n    if (inheritedTypeArguments) {\r\n      for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\r\n        contextualTypeArguments.set(inheritedName, inheritedType);\r\n      }\r\n    }\r\n\r\n    var declaration = this.declaration;\r\n    var baseClass: Class | null = null;\r\n    if (declaration.extendsType) {\r\n      let baseClassType = this.program.resolveType(declaration.extendsType, null); // reports\r\n      if (!baseClassType) return null;\r\n      if (!(baseClass = baseClassType.classReference)) {\r\n        this.program.error(\r\n          DiagnosticCode.A_class_may_only_extend_another_class,\r\n          declaration.extendsType.range\r\n        );\r\n        return null;\r\n      }\r\n      if (baseClass.is(CommonFlags.SEALED)) {\r\n        this.program.error(\r\n          DiagnosticCode.Class_0_is_sealed_and_cannot_be_extended,\r\n          declaration.extendsType.range, baseClass.internalName\r\n        );\r\n        return null;\r\n      }\r\n      if (baseClass.prototype.is(CommonFlags.UNMANAGED) != this.is(CommonFlags.UNMANAGED)) {\r\n        this.program.error(\r\n          DiagnosticCode.Structs_cannot_extend_classes_and_vice_versa,\r\n          Range.join(declaration.name.range, declaration.extendsType.range)\r\n        );\r\n        return null;\r\n      }\r\n    }\r\n\r\n    // override call specific contextual type arguments if provided\r\n    var i: i32, k: i32;\r\n    if (typeArguments) {\r\n      if ((k = typeArguments.length) != declaration.typeParameters.length) {\r\n        throw new Error(\"type argument count mismatch\");\r\n      }\r\n      for (i = 0; i < k; ++i) {\r\n        contextualTypeArguments.set(declaration.typeParameters[i].name.text, typeArguments[i]);\r\n      }\r\n    } else if (declaration.typeParameters.length) {\r\n      throw new Error(\"type argument count mismatch\");\r\n    }\r\n\r\n    var simpleName = this.simpleName;\r\n    var internalName = this.internalName;\r\n    if (instanceKey.length) {\r\n      simpleName += \"<\" + instanceKey + \">\";\r\n      internalName += \"<\" + instanceKey + \">\";\r\n    }\r\n    instance = new Class(this, simpleName, internalName, typeArguments, baseClass);\r\n    instance.contextualTypeArguments = contextualTypeArguments;\r\n    this.instances.set(instanceKey, instance);\r\n\r\n    var memoryOffset: u32 = 0;\r\n    if (baseClass) {\r\n      memoryOffset = baseClass.currentMemoryOffset;\r\n      if (baseClass.members) {\r\n        if (!instance.members) instance.members = new Map();\r\n        for (let inheritedMember of baseClass.members.values()) {\r\n          instance.members.set(inheritedMember.simpleName, inheritedMember);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (this.constructorPrototype) {\r\n      let partialConstructor = this.constructorPrototype.resolvePartial(typeArguments); // reports\r\n      if (partialConstructor) {\r\n        instance.constructorInstance = partialConstructor.resolve(); // reports\r\n      }\r\n      // TODO: ^ doesn't know the return type, hence returns null\r\n    }\r\n\r\n    if (this.instanceMembers) {\r\n      for (let member of this.instanceMembers.values()) {\r\n        switch (member.kind) {\r\n          case ElementKind.FIELD_PROTOTYPE: { // fields are layed out in advance\r\n            if (!instance.members) instance.members = new Map();\r\n            let fieldDeclaration = (<FieldPrototype>member).declaration;\r\n            if (!fieldDeclaration.type) {\r\n              throw new Error(\"type expected\"); // TODO: check if parent class defines a type\r\n            }\r\n            let fieldType = this.program.resolveType( // reports\r\n              fieldDeclaration.type,\r\n              instance.contextualTypeArguments\r\n            );\r\n            if (fieldType) {\r\n              let fieldInstance = new Field(\r\n                <FieldPrototype>member,\r\n                internalName + INSTANCE_DELIMITER + (<FieldPrototype>member).simpleName,\r\n                fieldType,\r\n                fieldDeclaration\r\n              );\r\n              switch (fieldType.byteSize) { // align\r\n                case 1: break;\r\n                case 2: {\r\n                  if (memoryOffset & 1) ++memoryOffset;\r\n                  break;\r\n                }\r\n                case 4: {\r\n                  if (memoryOffset & 3) memoryOffset = (memoryOffset | 3) + 1;\r\n                  break;\r\n                }\r\n                case 8: {\r\n                  if (memoryOffset & 7) memoryOffset = (memoryOffset | 7) + 1;\r\n                  break;\r\n                }\r\n                default: assert(false);\r\n              }\r\n              fieldInstance.memoryOffset = memoryOffset;\r\n              memoryOffset += fieldType.byteSize;\r\n              instance.members.set(member.simpleName, fieldInstance);\r\n            }\r\n            break;\r\n          }\r\n          case ElementKind.FUNCTION_PROTOTYPE: { // instance methods remain partially resolved prototypes until compiled\r\n            if (!instance.members) instance.members = new Map();\r\n            let methodPrototype = (<FunctionPrototype>member).resolvePartial(typeArguments); // reports\r\n            if (methodPrototype) {\r\n              methodPrototype.internalName = internalName + INSTANCE_DELIMITER + methodPrototype.simpleName;\r\n              instance.members.set(member.simpleName, methodPrototype);\r\n            }\r\n            break;\r\n          }\r\n          case ElementKind.PROPERTY: { // instance properties are cloned with partially resolved getters and setters\r\n            if (!instance.members) instance.members = new Map();\r\n            let getterPrototype = assert((<Property>member).getterPrototype);\r\n            let setterPrototype = (<Property>member).setterPrototype;\r\n            let instanceProperty = new Property(\r\n              this.program,\r\n              member.simpleName,\r\n              internalName + INSTANCE_DELIMITER + member.simpleName,\r\n              this\r\n            );\r\n            let partialGetterPrototype = getterPrototype.resolvePartial(typeArguments);\r\n            if (!partialGetterPrototype) return null;\r\n            partialGetterPrototype.internalName = (\r\n              internalName + INSTANCE_DELIMITER + partialGetterPrototype.simpleName\r\n            );\r\n            instanceProperty.getterPrototype = partialGetterPrototype;\r\n            if (setterPrototype) {\r\n              let partialSetterPrototype = setterPrototype.resolvePartial(typeArguments);\r\n              if (!partialSetterPrototype) return null;\r\n              partialSetterPrototype.internalName = (\r\n                internalName + INSTANCE_DELIMITER + partialSetterPrototype.simpleName\r\n              );\r\n              instanceProperty.setterPrototype = partialSetterPrototype;\r\n            }\r\n            instance.members.set(member.simpleName, instanceProperty);\r\n            break;\r\n          }\r\n          default: assert(false);\r\n        }\r\n      }\r\n    }\r\n    instance.currentMemoryOffset = memoryOffset; // offsetof<this>() is the class' byte size in memory\r\n    return instance;\r\n  }\r\n\r\n  /** Resolves the specified type arguments prior to resolving this prototype to an instance. */\r\n  resolveUsingTypeArguments(\r\n    typeArgumentNodes: CommonTypeNode[] | null,\r\n    contextualTypeArguments: Map<string,Type> | null,\r\n    alternativeReportNode: Node | null\r\n  ): Class | null {\r\n    var resolvedTypeArguments: Type[] | null = null;\r\n    if (this.is(CommonFlags.GENERIC)) {\r\n      assert(typeArgumentNodes != null && typeArgumentNodes.length != 0);\r\n      resolvedTypeArguments = this.program.resolveTypeArguments(\r\n        this.declaration.typeParameters,\r\n        typeArgumentNodes,\r\n        contextualTypeArguments,\r\n        alternativeReportNode\r\n      );\r\n      if (!resolvedTypeArguments) return null;\r\n    } else {\r\n      assert(typeArgumentNodes == null || !typeArgumentNodes.length);\r\n    }\r\n    return this.resolve(resolvedTypeArguments, contextualTypeArguments);\r\n  }\r\n\r\n  toString(): string {\r\n    return this.simpleName;\r\n  }\r\n}\r\n\r\n/** A resolved class. */\r\nexport class Class extends Element {\r\n\r\n  kind = ElementKind.CLASS;\r\n\r\n  /** Prototype reference. */\r\n  prototype: ClassPrototype;\r\n  /** Resolved type arguments. */\r\n  typeArguments: Type[] | null;\r\n  /** Resolved class type. */\r\n  type: Type;\r\n  /** Base class, if applicable. */\r\n  base: Class | null;\r\n  /** Contextual type arguments for fields and methods. */\r\n  contextualTypeArguments: Map<string,Type> | null = null;\r\n  /** Current member memory offset. */\r\n  currentMemoryOffset: u32 = 0;\r\n  /** Constructor instance. */\r\n  constructorInstance: Function | null = null;\r\n\r\n  /** Constructs a new class. */\r\n  constructor(\r\n    prototype: ClassPrototype,\r\n    simpleName: string,\r\n    internalName: string,\r\n    typeArguments: Type[] | null = null,\r\n    base: Class | null = null\r\n  ) {\r\n    super(prototype.program, simpleName, internalName);\r\n    this.prototype = prototype;\r\n    this.flags = prototype.flags;\r\n    this.typeArguments = typeArguments;\r\n    this.type = prototype.program.options.usizeType.asClass(this);\r\n    this.base = base;\r\n\r\n    // inherit static members and contextual type arguments from base class\r\n    if (base) {\r\n      if (base.contextualTypeArguments) {\r\n        if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\r\n        for (let [baseName, baseType] of base.contextualTypeArguments) {\r\n          this.contextualTypeArguments.set(baseName, baseType);\r\n        }\r\n      }\r\n    }\r\n\r\n    // apply instance-specific contextual type arguments\r\n    var declaration = this.prototype.declaration;\r\n    var i: i32, k: i32;\r\n    if (declaration) { // irrelevant for built-ins\r\n      let typeParameters = declaration.typeParameters;\r\n      if (typeArguments) {\r\n        if ((k = typeArguments.length) != typeParameters.length) {\r\n          throw new Error(\"type argument count mismatch\");\r\n        }\r\n        if (k) {\r\n          if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\r\n          for (i = 0; i < k; ++i) {\r\n            this.contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\r\n          }\r\n        }\r\n      } else if (typeParameters.length) {\r\n        throw new Error(\"type argument count mismatch\");\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Tests if a value of this class type is assignable to a target of the specified class type. */\r\n  isAssignableTo(target: Class): bool {\r\n    var current: Class | null = this;\r\n    do {\r\n      if (current == target) {\r\n        return true;\r\n      }\r\n    } while (current = current.base);\r\n    return false;\r\n  }\r\n\r\n  toString(): string {\r\n    return this.simpleName;\r\n  }\r\n}\r\n\r\n/** A yet unresolved interface. */\r\nexport class InterfacePrototype extends ClassPrototype {\r\n\r\n  kind = ElementKind.INTERFACE_PROTOTYPE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: InterfaceDeclaration; // more specific\r\n\r\n  /** Constructs a new interface prototype. */\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: InterfaceDeclaration\r\n  ) {\r\n    super(program, simpleName, internalName, declaration);\r\n  }\r\n}\r\n\r\n/** A resolved interface. */\r\nexport class Interface extends Class {\r\n\r\n  kind = ElementKind.INTERFACE;\r\n\r\n  /** Prototype reference. */\r\n  prototype: InterfacePrototype; // more specific\r\n  /** Base interface, if applcable. */\r\n  base: Interface | null; // more specific\r\n\r\n  /** Constructs a new interface. */\r\n  constructor(\r\n    prototype: InterfacePrototype,\r\n    simpleName: string,\r\n    internalName: string,\r\n    typeArguments: Type[] = [],\r\n    base: Interface | null = null\r\n  ) {\r\n    super(prototype, simpleName, internalName, typeArguments, base);\r\n  }\r\n}\r\n\r\n/** Control flow flags indicating specific conditions. */\r\nexport const enum FlowFlags {\r\n  /** No specific conditions. */\r\n  NONE = 0,\r\n\r\n  /** This branch always returns. */\r\n  RETURNS = 1 << 0,\r\n  /** This branch always throws. */\r\n  THROWS = 1 << 1,\r\n  /** This branch always breaks. */\r\n  BREAKS = 1 << 2,\r\n  /** This branch always continues. */\r\n  CONTINUES = 1 << 3,\r\n  /** This branch always allocates. Constructors only. */\r\n  ALLOCATES = 1 << 4,\r\n\r\n  /** This branch conditionally returns in a child branch. */\r\n  CONDITIONALLY_RETURNS = 1 << 5,\r\n  /** This branch conditionally throws in a child branch. */\r\n  CONDITIONALLY_THROWS = 1 << 6,\r\n  /** This branch conditionally breaks in a child branch. */\r\n  CONDITIONALLY_BREAKS = 1 << 7,\r\n  /** This branch conditionally continues in a child branch. */\r\n  CONDITIONALLY_CONTINUES = 1 << 8,\r\n  /** This branch conditionally allocates in a child branch. Constructors only. */\r\n  CONDITIONALLY_ALLOCATES = 1 << 9\r\n}\r\n\r\n/** A control flow evaluator. */\r\nexport class Flow {\r\n\r\n  /** Parent flow. */\r\n  parent: Flow | null;\r\n  /** Flow flags indicating specific conditions. */\r\n  flags: FlowFlags;\r\n  /** Function this flow belongs to. */\r\n  currentFunction: Function;\r\n  /** The label we break to when encountering a continue statement. */\r\n  continueLabel: string | null;\r\n  /** The label we break to when encountering a break statement. */\r\n  breakLabel: string | null;\r\n  /** Scoped local variables. */\r\n  scopedLocals: Map<string,Local> | null = null;\r\n  /** Scoped global variables. */\r\n  // scopedGlobals: Map<Local,Global> | null = null;\r\n\r\n  /** Creates the parent flow of the specified function. */\r\n  static create(currentFunction: Function): Flow {\r\n    var parentFlow = new Flow();\r\n    parentFlow.parent = null;\r\n    parentFlow.flags = FlowFlags.NONE;\r\n    parentFlow.currentFunction = currentFunction;\r\n    parentFlow.continueLabel = null;\r\n    parentFlow.breakLabel = null;\r\n    return parentFlow;\r\n  }\r\n\r\n  private constructor() { }\r\n\r\n  /** Tests if this flow has the specified flag or flags. */\r\n  is(flag: FlowFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Sets the specified flag or flags. */\r\n  set(flag: FlowFlags): void { this.flags |= flag; }\r\n  /** Unsets the specified flag or flags. */\r\n  unset(flag: FlowFlags): void { this.flags &= ~flag; }\r\n\r\n  /** Enters a new branch or scope and returns the new flow. */\r\n  enterBranchOrScope(): Flow {\r\n    var branch = new Flow();\r\n    branch.parent = this;\r\n    branch.flags = this.flags;\r\n    branch.currentFunction = this.currentFunction;\r\n    branch.continueLabel = this.continueLabel;\r\n    branch.breakLabel = this.breakLabel;\r\n    return branch;\r\n  }\r\n\r\n  /** Leaves the current branch or scope and returns the parent flow. */\r\n  leaveBranchOrScope(): Flow {\r\n    var parent = assert(this.parent);\r\n\r\n    // Free block-scoped locals\r\n    if (this.scopedLocals) {\r\n      for (let scopedLocal of this.scopedLocals.values()) {\r\n        this.currentFunction.freeTempLocal(scopedLocal);\r\n      }\r\n      this.scopedLocals = null;\r\n    }\r\n\r\n    // Propagate flags to parent\r\n    if (this.is(FlowFlags.RETURNS)) {\r\n      parent.set(FlowFlags.CONDITIONALLY_RETURNS);\r\n    }\r\n    if (this.is(FlowFlags.THROWS)) {\r\n      parent.set(FlowFlags.CONDITIONALLY_THROWS);\r\n    }\r\n    if (this.is(FlowFlags.BREAKS) && parent.breakLabel == this.breakLabel) {\r\n      parent.set(FlowFlags.CONDITIONALLY_BREAKS);\r\n    }\r\n    if (this.is(FlowFlags.CONTINUES) && parent.continueLabel == this.continueLabel) {\r\n      parent.set(FlowFlags.CONDITIONALLY_CONTINUES);\r\n    }\r\n    if (this.is(FlowFlags.ALLOCATES)) {\r\n      parent.set(FlowFlags.CONDITIONALLY_ALLOCATES);\r\n    }\r\n\r\n    return parent;\r\n  }\r\n\r\n  /** Adds a new scoped local of the specified name. */\r\n  addScopedLocal(type: Type, name: string, declaration: VariableDeclaration): void {\r\n    var scopedLocal = this.currentFunction.getTempLocal(type);\r\n    if (!this.scopedLocals) this.scopedLocals = new Map();\r\n    else if (this.scopedLocals.has(name)) {\r\n      this.currentFunction.program.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range\r\n      );\r\n      return;\r\n    }\r\n    this.scopedLocals.set(name, scopedLocal);\r\n  }\r\n\r\n  /** Gets the local of the specified name in the current scope. */\r\n  getScopedLocal(name: string): Local | null {\r\n    var local: Local | null;\r\n    var current: Flow | null = this;\r\n    do {\r\n      if (current.scopedLocals && (local = current.scopedLocals.get(name))) {\r\n        return local;\r\n      }\r\n    } while (current = current.parent);\r\n    return this.currentFunction.locals.get(name);\r\n  }\r\n\r\n  /** Adds a scoped global for an outer scoped local. */\r\n  // addScopedGlobal(scopedLocal: Local): Global {\r\n  //   var scopedGlobals = this.scopedGlobals;\r\n  //   var scopedGlobal: Global | null;\r\n  //   if (!scopedGlobals) {\r\n  //     this.scopedGlobals = scopedGlobals = new Map();\r\n  //   } else {\r\n  //     scopedGlobal = scopedGlobals.get(scopedLocal);\r\n  //     if (scopedGlobal) return scopedGlobal;\r\n  //   }\r\n  //   scopedGlobal = new Global(\r\n  //     scopedLocal.program,\r\n  //     scopedLocal.simpleName,\r\n  //     this.currentFunction.internalName + \"~\" + scopedLocal.internalName,\r\n  //     scopedLocal.type,\r\n  //     assert(scopedLocal.declaration)\r\n  //   );\r\n  //   scopedGlobals.set(scopedLocal, scopedGlobal);\r\n  //   return scopedGlobal;\r\n  // }\r\n\r\n  /** Finalizes this flow. Must be the topmost parent flow of the function. */\r\n  finalize(): void {\r\n    assert(this.parent == null, \"must be the topmost parent flow\");\r\n    this.continueLabel = null;\r\n    this.breakLabel = null;\r\n  }\r\n}\r\n","/**\r\n * Various compiler utilities.\r\n * @module util\r\n * @preferred\r\n *//***/\r\n\r\nexport * from \"./charcode\";\r\nexport * from \"./path\";\r\nexport * from \"./text\";\r\nexport * from \"./binary\";\r\n","/**\r\n * Shared diagnostic handling inherited by the parser and the compiler.\r\n * @module diagnostics\r\n * @preferred\r\n *//***/\r\n\r\nimport {\r\n  Range\r\n} from \"./ast\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  diagnosticCodeToString\r\n} from \"./diagnosticMessages.generated\";\r\n\r\nimport {\r\n  isLineBreak\r\n} from \"./util\";\r\n\r\nexport {\r\n  DiagnosticCode,\r\n  diagnosticCodeToString\r\n} from \"./diagnosticMessages.generated\";\r\n\r\n/** Indicates the category of a {@link DiagnosticMessage}. */\r\nexport enum DiagnosticCategory {\r\n  /** Informatory message. */\r\n  INFO,\r\n  /** Warning message. */\r\n  WARNING,\r\n  /** Error message. */\r\n  ERROR\r\n}\r\n\r\n/** Returns the string representation of the specified diagnostic category. */\r\nexport function diagnosticCategoryToString(category: DiagnosticCategory): string {\r\n  switch (category) {\r\n    case DiagnosticCategory.INFO: return \"INFO\";\r\n    case DiagnosticCategory.WARNING: return \"WARNING\";\r\n    case DiagnosticCategory.ERROR: return \"ERROR\";\r\n    default: {\r\n      assert(false);\r\n      return \"\";\r\n    }\r\n  }\r\n}\r\n\r\n/** ANSI escape sequence for blue foreground. */\r\nexport const COLOR_BLUE: string = \"\\u001b[93m\";\r\n/** ANSI escape sequence for yellow foreground. */\r\nexport const COLOR_YELLOW: string = \"\\u001b[93m\";\r\n/** ANSI escape sequence for red foreground. */\r\nexport const COLOR_RED: string = \"\\u001b[91m\";\r\n/** ANSI escape sequence to reset the foreground color. */\r\nexport const COLOR_RESET: string = \"\\u001b[0m\";\r\n\r\n/** Returns the ANSI escape sequence for the specified category. */\r\nexport function diagnosticCategoryToColor(category: DiagnosticCategory): string {\r\n  switch (category) {\r\n    case DiagnosticCategory.INFO: return COLOR_BLUE;\r\n    case DiagnosticCategory.WARNING: return COLOR_YELLOW;\r\n    case DiagnosticCategory.ERROR: return COLOR_RED;\r\n    default: {\r\n      assert(false);\r\n      return \"\";\r\n    }\r\n  }\r\n}\r\n\r\n/** Represents a diagnostic message. */\r\nexport class DiagnosticMessage {\r\n\r\n  /** Message code. */\r\n  code: i32;\r\n  /** Message category. */\r\n  category: DiagnosticCategory;\r\n  /** Message text. */\r\n  message: string;\r\n  /** Respective source range, if any. */\r\n  range: Range | null = null;\r\n\r\n  /** Constructs a new diagnostic message. */\r\n  private constructor(code: i32, category: DiagnosticCategory, message: string) {\r\n    this.code = code;\r\n    this.category = category;\r\n    this.message = message;\r\n  }\r\n\r\n  /** Creates a new diagnostic message of the specified category. */\r\n  static create(\r\n    code: DiagnosticCode,\r\n    category: DiagnosticCategory,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): DiagnosticMessage {\r\n    var message = diagnosticCodeToString(code);\r\n    if (arg0 != null) message = message.replace(\"{0}\", arg0);\r\n    if (arg1 != null) message = message.replace(\"{1}\", arg1);\r\n    if (arg2 != null) message = message.replace(\"{2}\", arg2);\r\n    return new DiagnosticMessage(code, category, message);\r\n  }\r\n\r\n  /** Creates a new informatory diagnostic message. */\r\n  static createInfo(\r\n    code: DiagnosticCode,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null\r\n  ): DiagnosticMessage {\r\n    return DiagnosticMessage.create(code, DiagnosticCategory.INFO, arg0, arg1);\r\n  }\r\n\r\n  /** Creates a new warning diagnostic message. */\r\n  static createWarning(\r\n    code: DiagnosticCode,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null\r\n  ): DiagnosticMessage {\r\n    return DiagnosticMessage.create(code, DiagnosticCategory.WARNING, arg0, arg1);\r\n  }\r\n\r\n  /** Creates a new error diagnostic message. */\r\n  static createError(\r\n    code: DiagnosticCode,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null\r\n  ): DiagnosticMessage {\r\n    return DiagnosticMessage.create(code, DiagnosticCategory.ERROR, arg0, arg1);\r\n  }\r\n\r\n  /** Adds a source range to this message. */\r\n  withRange(range: Range): this {\r\n    this.range = range;\r\n    return this;\r\n  }\r\n\r\n  /** Converts this message to a string. */\r\n  toString(): string {\r\n    if (this.range) {\r\n      return (\r\n        diagnosticCategoryToString(this.category) +\r\n        \" \" +\r\n        this.code.toString(10) +\r\n        \": \\\"\" +\r\n        this.message +\r\n        \"\\\" in \" +\r\n        this.range.source.normalizedPath +\r\n        \":\" +\r\n        this.range.line.toString(10) +\r\n        \":\" +\r\n        this.range.column.toString(10)\r\n      );\r\n    }\r\n    return (\r\n      diagnosticCategoryToString(this.category) +\r\n      \" \" +\r\n      this.code.toString(10) +\r\n      \": \" +\r\n      this.message\r\n    );\r\n  }\r\n}\r\n\r\n/** Formats a diagnostic message, optionally with terminal colors and source context. */\r\nexport function formatDiagnosticMessage(\r\n  message: DiagnosticMessage,\r\n  useColors: bool = false,\r\n  showContext: bool = false\r\n): string {\r\n\r\n  // general information\r\n  var sb: string[] = [];\r\n  if (useColors) sb.push(diagnosticCategoryToColor(message.category));\r\n  sb.push(diagnosticCategoryToString(message.category));\r\n  if (useColors) sb.push(COLOR_RESET);\r\n  sb.push(message.code < 1000 ? \" AS\" : \" TS\");\r\n  sb.push(message.code.toString(10));\r\n  sb.push(\": \");\r\n  sb.push(message.message);\r\n\r\n  // include range information if available\r\n  if (message.range) {\r\n\r\n    // include context information if requested\r\n    let range = message.range;\r\n    if (showContext) {\r\n      sb.push(\"\\n\");\r\n      sb.push(formatDiagnosticContext(message.range, useColors));\r\n    }\r\n\r\n    sb.push(\"\\n\");\r\n    sb.push(\" in \");\r\n    sb.push(range.source.normalizedPath);\r\n    sb.push(\"(\");\r\n    sb.push(range.line.toString(10));\r\n    sb.push(\",\");\r\n    sb.push(range.column.toString(10));\r\n    sb.push(\")\");\r\n  }\r\n  return sb.join(\"\");\r\n}\r\n\r\n/** Formats the diagnostic context for the specified range, optionally with terminal colors. */\r\nexport function formatDiagnosticContext(range: Range, useColors: bool = false): string {\r\n  var text = range.source.text;\r\n  var len = text.length;\r\n  var start = range.start;\r\n  var end = range.end;\r\n  while (start > 0 && !isLineBreak(text.charCodeAt(start - 1))) {\r\n    start--;\r\n  }\r\n  while (end < len && !isLineBreak(text.charCodeAt(end))) {\r\n    end++;\r\n  }\r\n  var sb: string[] = [\r\n    \"\\n \",\r\n    text.substring(start, end),\r\n    \"\\n \"\r\n  ];\r\n  while (start < range.start) {\r\n    sb.push(\" \");\r\n    start++;\r\n  }\r\n  if (useColors) sb.push(COLOR_RED);\r\n  if (range.start == range.end) {\r\n    sb.push(\"^\");\r\n  } else {\r\n    while (start++ < range.end) {\r\n      sb.push(\"~\");\r\n    }\r\n  }\r\n  if (useColors) sb.push(COLOR_RESET);\r\n  return sb.join(\"\");\r\n}\r\n\r\n/** Base class of all diagnostic emitters. */\r\nexport abstract class DiagnosticEmitter {\r\n\r\n  /** Diagnostic messages emitted so far. */\r\n  diagnostics: DiagnosticMessage[];\r\n\r\n  /** Initializes this diagnostic emitter. */\r\n  protected constructor(diagnostics: DiagnosticMessage[] | null = null) {\r\n    this.diagnostics = diagnostics ? <DiagnosticMessage[]>diagnostics : new Array();\r\n  }\r\n\r\n  /** Emits a diagnostic message of the specified category. */\r\n  emitDiagnostic(\r\n    code: DiagnosticCode,\r\n    category: DiagnosticCategory,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    var message = DiagnosticMessage.create(code, category, arg0, arg1, arg2).withRange(range);\r\n    this.diagnostics.push(message);\r\n    // console.log(formatDiagnosticMessage(message, true, true) + \"\\n\"); // temporary\r\n    // console.log(<string>new Error(\"stack\").stack);\r\n  }\r\n\r\n  /** Emits an informatory diagnostic message. */\r\n  info(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, arg0, arg1, arg2);\r\n  }\r\n\r\n  /** Emits a warning diagnostic message. */\r\n  warning(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, arg0, arg1, arg2);\r\n  }\r\n\r\n  /** Emits an error diagnostic message. */\r\n  error(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, arg0, arg1, arg2);\r\n  }\r\n}\r\n","/**\r\n * A thin wrapper around Binaryen's C-API.\r\n * @module module\r\n *//***/\r\n\r\nimport {\r\n  Target\r\n} from \"./compiler\";\r\n\r\nexport type ModuleRef = usize;\r\nexport type FunctionTypeRef = usize;\r\nexport type FunctionRef = usize;\r\nexport type ExpressionRef = usize;\r\nexport type GlobalRef = usize;\r\nexport type ImportRef = usize;\r\nexport type ExportRef = usize;\r\nexport type Index = u32;\r\n\r\nexport enum NativeType {\r\n  None = _BinaryenTypeNone(),\r\n  I32 = _BinaryenTypeInt32(),\r\n  I64 = _BinaryenTypeInt64(),\r\n  F32 = _BinaryenTypeFloat32(),\r\n  F64 =  _BinaryenTypeFloat64(),\r\n  Unreachable = _BinaryenTypeUnreachable(),\r\n  Auto = _BinaryenTypeAuto()\r\n}\r\n\r\nexport enum ExpressionId {\r\n  Invalid = _BinaryenInvalidId(),\r\n  Block = _BinaryenBlockId(),\r\n  If = _BinaryenIfId(),\r\n  Loop = _BinaryenLoopId(),\r\n  Break = _BinaryenBreakId(),\r\n  Switch = _BinaryenSwitchId(),\r\n  Call = _BinaryenCallId(),\r\n  CallImport = _BinaryenCallImportId(),\r\n  CallIndirect = _BinaryenCallIndirectId(),\r\n  GetLocal = _BinaryenGetLocalId(),\r\n  SetLocal = _BinaryenSetLocalId(),\r\n  GetGlobal = _BinaryenGetGlobalId(),\r\n  SetGlobal = _BinaryenSetGlobalId(),\r\n  Load = _BinaryenLoadId(),\r\n  Store = _BinaryenStoreId(),\r\n  Const = _BinaryenConstId(),\r\n  Unary = _BinaryenUnaryId(),\r\n  Binary = _BinaryenBinaryId(),\r\n  Select = _BinaryenSelectId(),\r\n  Drop = _BinaryenDropId(),\r\n  Return = _BinaryenReturnId(),\r\n  Host = _BinaryenHostId(),\r\n  Nop = _BinaryenNopId(),\r\n  Unreachable = _BinaryenUnreachableId(),\r\n  AtomicCmpxchg = _BinaryenAtomicCmpxchgId(),\r\n  AtomicRMW = _BinaryenAtomicRMWId(),\r\n  AtomicWait = _BinaryenAtomicWaitId(),\r\n  AtomicWake = _BinaryenAtomicWakeId()\r\n}\r\n\r\nexport enum UnaryOp {\r\n  ClzI32 = _BinaryenClzInt32(),\r\n  CtzI32 = _BinaryenCtzInt32(),\r\n  PopcntI32 = _BinaryenPopcntInt32(),\r\n  NegF32 = _BinaryenNegFloat32(),\r\n  AbsF32 = _BinaryenAbsFloat32(),\r\n  CeilF32 = _BinaryenCeilFloat32(),\r\n  FloorF32 = _BinaryenFloorFloat32(),\r\n  TruncF32 = _BinaryenTruncFloat32(),\r\n  NearestF32 = _BinaryenNearestFloat32(),\r\n  SqrtF32 = _BinaryenSqrtFloat32(),\r\n  EqzI32 = _BinaryenEqZInt32(),\r\n  ClzI64 = _BinaryenClzInt64(),\r\n  CtzI64 = _BinaryenCtzInt64(),\r\n  PopcntI64 = _BinaryenPopcntInt64(),\r\n  NegF64 = _BinaryenNegFloat64(),\r\n  AbsF64 = _BinaryenAbsFloat64(),\r\n  CeilF64 = _BinaryenCeilFloat64(),\r\n  FloorF64 = _BinaryenFloorFloat64(),\r\n  TruncF64 = _BinaryenTruncFloat64(),\r\n  NearestF64 = _BinaryenNearestFloat64(),\r\n  SqrtF64 = _BinaryenSqrtFloat64(),\r\n  EqzI64 = _BinaryenEqZInt64(),\r\n  ExtendI32 = _BinaryenExtendSInt32(),\r\n  ExtendU32 = _BinaryenExtendUInt32(),\r\n  WrapI64 = _BinaryenWrapInt64(),\r\n  TruncF32ToI32 = _BinaryenTruncSFloat32ToInt32(),\r\n  TruncF32ToI64 = _BinaryenTruncSFloat32ToInt64(),\r\n  TruncF32ToU32 = _BinaryenTruncUFloat32ToInt32(),\r\n  TruncF32ToU64 = _BinaryenTruncUFloat32ToInt64(),\r\n  TruncF64ToI32 = _BinaryenTruncSFloat64ToInt32(),\r\n  TruncF64ToI64 = _BinaryenTruncSFloat64ToInt64(),\r\n  TruncF64ToU32 = _BinaryenTruncUFloat64ToInt32(),\r\n  TruncF64ToU64 = _BinaryenTruncUFloat64ToInt64(),\r\n  ReinterpretF32 = _BinaryenReinterpretFloat32(),\r\n  ReinterpretF64 = _BinaryenReinterpretFloat64(),\r\n  ConvertI32ToF32 = _BinaryenConvertSInt32ToFloat32(),\r\n  ConvertI32ToF64 = _BinaryenConvertSInt32ToFloat64(),\r\n  ConvertU32ToF32 = _BinaryenConvertUInt32ToFloat32(),\r\n  ConvertU32ToF64 = _BinaryenConvertUInt32ToFloat64(),\r\n  ConvertI64ToF32 = _BinaryenConvertSInt64ToFloat32(),\r\n  ConvertI64ToF64 = _BinaryenConvertSInt64ToFloat64(),\r\n  ConvertU64ToF32 = _BinaryenConvertUInt64ToFloat32(),\r\n  ConvertU64ToF64 = _BinaryenConvertUInt64ToFloat64(),\r\n  PromoteF32 = _BinaryenPromoteFloat32(),\r\n  DemoteF64 = _BinaryenDemoteFloat64(),\r\n  ReinterpretI32 = _BinaryenReinterpretInt32(),\r\n  ReinterpretI64 = _BinaryenReinterpretInt64()\r\n\r\n  // see: https://github.com/WebAssembly/threads/blob/master/proposals/threads/Overview.md#new-sign-extending-operators\r\n  // ExtendI8ToI32 =_BinaryenExtendS8Int32()\r\n  // ExtendI16ToI32 = _BinaryenExtendS16Int32()\r\n  // ExtendI8ToI64 = _BinaryenExtendS8Int64() // operand is I64\r\n  // ExtendI16ToI64 = _BinaryenExtendS16Int64()\r\n  // ExtendI32ToI64 = _BinaryenExtendS32Int64()\r\n\r\n  // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\r\n  // TruncF32ToI32Sat\r\n  // TruncF32ToU32Sat\r\n  // TruncF64ToI32Sat\r\n  // TruncF64ToU32Sat\r\n  // TruncF32ToI64Sat\r\n  // TruncF32ToU64Sat\r\n  // TruncF64ToI64Sat\r\n  // TruncF64ToU64Sat\r\n}\r\n\r\nexport enum BinaryOp {\r\n  AddI32 = _BinaryenAddInt32(),\r\n  SubI32 = _BinaryenSubInt32(),\r\n  MulI32 = _BinaryenMulInt32(),\r\n  DivI32 = _BinaryenDivSInt32(),\r\n  DivU32 = _BinaryenDivUInt32(),\r\n  RemI32 = _BinaryenRemSInt32(),\r\n  RemU32 = _BinaryenRemUInt32(),\r\n  AndI32 = _BinaryenAndInt32(),\r\n  OrI32 = _BinaryenOrInt32(),\r\n  XorI32 = _BinaryenXorInt32(),\r\n  ShlI32 = _BinaryenShlInt32(),\r\n  ShrU32 = _BinaryenShrUInt32(),\r\n  ShrI32 = _BinaryenShrSInt32(),\r\n  RotlI32 = _BinaryenRotLInt32(),\r\n  RotrI32 = _BinaryenRotRInt32(),\r\n  EqI32 = _BinaryenEqInt32(),\r\n  NeI32 = _BinaryenNeInt32(),\r\n  LtI32 = _BinaryenLtSInt32(),\r\n  LtU32 = _BinaryenLtUInt32(),\r\n  LeI32 = _BinaryenLeSInt32(),\r\n  LeU32 = _BinaryenLeUInt32(),\r\n  GtI32 = _BinaryenGtSInt32(),\r\n  GtU32 = _BinaryenGtUInt32(),\r\n  GeI32 = _BinaryenGeSInt32(),\r\n  GeU32 = _BinaryenGeUInt32(),\r\n  AddI64 = _BinaryenAddInt64(),\r\n  SubI64 = _BinaryenSubInt64(),\r\n  MulI64 = _BinaryenMulInt64(),\r\n  DivI64 = _BinaryenDivSInt64(),\r\n  DivU64 = _BinaryenDivUInt64(),\r\n  RemI64 = _BinaryenRemSInt64(),\r\n  RemU64 = _BinaryenRemUInt64(),\r\n  AndI64 = _BinaryenAndInt64(),\r\n  OrI64 = _BinaryenOrInt64(),\r\n  XorI64 = _BinaryenXorInt64(),\r\n  ShlI64 = _BinaryenShlInt64(),\r\n  ShrU64 = _BinaryenShrUInt64(),\r\n  ShrI64 = _BinaryenShrSInt64(),\r\n  RotlI64 = _BinaryenRotLInt64(),\r\n  RotrI64 = _BinaryenRotRInt64(),\r\n  EqI64 = _BinaryenEqInt64(),\r\n  NeI64 = _BinaryenNeInt64(),\r\n  LtI64 = _BinaryenLtSInt64(),\r\n  LtU64 = _BinaryenLtUInt64(),\r\n  LeI64 = _BinaryenLeSInt64(),\r\n  LeU64 = _BinaryenLeUInt64(),\r\n  GtI64 = _BinaryenGtSInt64(),\r\n  GtU64 = _BinaryenGtUInt64(),\r\n  GeI64 = _BinaryenGeSInt64(),\r\n  GeU64 = _BinaryenGeUInt64(),\r\n  AddF32 = _BinaryenAddFloat32(),\r\n  SubF32 = _BinaryenSubFloat32(),\r\n  MulF32 = _BinaryenMulFloat32(),\r\n  DivF32 = _BinaryenDivFloat32(),\r\n  CopysignF32 = _BinaryenCopySignFloat32(),\r\n  MinF32 = _BinaryenMinFloat32(),\r\n  MaxF32 = _BinaryenMaxFloat32(),\r\n  EqF32 = _BinaryenEqFloat32(),\r\n  NeF32 = _BinaryenNeFloat32(),\r\n  LtF32 = _BinaryenLtFloat32(),\r\n  LeF32 = _BinaryenLeFloat32(),\r\n  GtF32 = _BinaryenGtFloat32(),\r\n  GeF32 = _BinaryenGeFloat32(),\r\n  AddF64 = _BinaryenAddFloat64(),\r\n  SubF64 = _BinaryenSubFloat64(),\r\n  MulF64 = _BinaryenMulFloat64(),\r\n  DivF64 = _BinaryenDivFloat64(),\r\n  CopysignF64 = _BinaryenCopySignFloat64(),\r\n  MinF64 = _BinaryenMinFloat64(),\r\n  MaxF64 = _BinaryenMaxFloat64(),\r\n  EqF64 = _BinaryenEqFloat64(),\r\n  NeF64 = _BinaryenNeFloat64(),\r\n  LtF64 = _BinaryenLtFloat64(),\r\n  LeF64 = _BinaryenLeFloat64(),\r\n  GtF64 = _BinaryenGtFloat64(),\r\n  GeF64 = _BinaryenGeFloat64()\r\n}\r\n\r\nexport enum HostOp {\r\n  PageSize = _BinaryenPageSize(),\r\n  CurrentMemory = _BinaryenCurrentMemory(),\r\n  GrowMemory = _BinaryenGrowMemory(),\r\n  HasFeature = _BinaryenHasFeature(),\r\n\r\n  // see: https://github.com/WebAssembly/bulk-memory-operations\r\n  // MoveMemory\r\n  // SetMemory\r\n}\r\n\r\nexport enum AtomicRMWOp {\r\n  Add = _BinaryenAtomicRMWAdd(),\r\n  Sub = _BinaryenAtomicRMWSub(),\r\n  And = _BinaryenAtomicRMWAnd(),\r\n  Or = _BinaryenAtomicRMWOr(),\r\n  Xor = _BinaryenAtomicRMWXor(),\r\n  Xchg = _BinaryenAtomicRMWXchg()\r\n}\r\n\r\nexport class MemorySegment {\r\n\r\n  buffer: Uint8Array;\r\n  offset: I64;\r\n\r\n  static create(buffer: Uint8Array, offset: I64): MemorySegment {\r\n    var segment = new MemorySegment();\r\n    segment.buffer = buffer;\r\n    segment.offset = offset;\r\n    return segment;\r\n  }\r\n}\r\n\r\nexport class Module {\r\n\r\n  ref: ModuleRef;\r\n  out: usize;\r\n\r\n  /** Maximum number of pages when targeting WASM32. */\r\n  static readonly MAX_MEMORY_WASM32: Index = 0xffff;\r\n\r\n  /** Maximum number of pages when targeting WASM64. */\r\n  static readonly MAX_MEMORY_WASM64: Index = 0xffff; // TODO\r\n\r\n  static create(): Module {\r\n    var module = new Module();\r\n    module.ref = _BinaryenModuleCreate();\r\n    module.out = allocate_memory(16);\r\n    return module;\r\n  }\r\n\r\n  static createFrom(buffer: Uint8Array): Module {\r\n    var cArr = allocU8Array(buffer);\r\n    try {\r\n      let module = new Module();\r\n      module.ref = _BinaryenModuleRead(cArr, buffer.length);\r\n      module.out = allocate_memory(3 * 8); // LLVM C-ABI, max used is 3 * usize\r\n      return module;\r\n    } finally {\r\n      free_memory(changetype<usize>(cArr));\r\n    }\r\n  }\r\n\r\n  private constructor() { }\r\n\r\n  // types\r\n\r\n  addFunctionType(\r\n    name: string,\r\n    result: NativeType,\r\n    paramTypes: NativeType[] | null\r\n  ): FunctionRef {\r\n    var cStr = allocString(name);\r\n    var cArr = allocI32Array(paramTypes);\r\n    try {\r\n      return _BinaryenAddFunctionType(this.ref, cStr, result, cArr, paramTypes ? paramTypes.length : 0);\r\n    } finally {\r\n      free_memory(cArr);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  getFunctionTypeBySignature(\r\n    result: NativeType,\r\n    paramTypes: NativeType[] | null\r\n  ): FunctionTypeRef {\r\n    var cArr = allocI32Array(paramTypes);\r\n    try {\r\n      return _BinaryenGetFunctionTypeBySignature(this.ref, result, cArr, paramTypes ? paramTypes.length : 0);\r\n    } finally {\r\n      free_memory(cArr);\r\n    }\r\n  }\r\n\r\n  // constants\r\n\r\n  createI32(value: i32): ExpressionRef {\r\n    var out = this.out;\r\n    _BinaryenLiteralInt32(out, value);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  createI64(valueLow: i32, valueHigh: i32 = 0): ExpressionRef {\r\n    var out = this.out;\r\n    _BinaryenLiteralInt64(out, valueLow, valueHigh);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  createF32(value: f32): ExpressionRef {\r\n    var out = this.out;\r\n    _BinaryenLiteralFloat32(out, value);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  createF64(value: f64): ExpressionRef {\r\n    var out = this.out;\r\n    _BinaryenLiteralFloat64(out, value);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  // expressions\r\n\r\n  createUnary(\r\n    op: UnaryOp,\r\n    expr: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenUnary(this.ref, op, expr);\r\n  }\r\n\r\n  createBinary(\r\n    op: BinaryOp,\r\n    left: ExpressionRef,\r\n    right: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenBinary(this.ref, op, left, right);\r\n  }\r\n\r\n  createHost(\r\n    op: HostOp,\r\n    name: string | null = null,\r\n    operands: ExpressionRef[] | null = null\r\n  ): ExpressionRef {\r\n    var cStr = allocString(name);\r\n    var cArr = allocI32Array(operands);\r\n    try {\r\n      return _BinaryenHost(this.ref, op, cStr, cArr, operands ? (<ExpressionRef[]>operands).length : 0);\r\n    } finally {\r\n      free_memory(cArr);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createGetLocal(\r\n    index: i32,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenGetLocal(this.ref, index, type);\r\n  }\r\n\r\n  createTeeLocal(\r\n    index: i32,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenTeeLocal(this.ref, index, value);\r\n  }\r\n\r\n  createGetGlobal(\r\n    name: string,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    var cStr = allocString(name);\r\n    try {\r\n      return _BinaryenGetGlobal(this.ref, cStr, type);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createLoad(\r\n    bytes: Index,\r\n    signed: bool,\r\n    ptr: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenLoad(this.ref, bytes, signed ? 1 : 0, offset, /* always aligned */ bytes, type, ptr);\r\n  }\r\n\r\n  createStore(\r\n    bytes: Index,\r\n    ptr: ExpressionRef,\r\n    value: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenStore(this.ref, bytes, offset, /* always aligned */ bytes, ptr, value, type);\r\n  }\r\n\r\n  createAtomicLoad(\r\n    bytes: Index,\r\n    ptr: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicLoad(this.ref, bytes, offset, type, ptr);\r\n  }\r\n\r\n  createAtomicStore(\r\n    bytes: Index,\r\n    ptr: ExpressionRef,\r\n    value: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicStore(this.ref, bytes, offset, ptr, value, type);\r\n  }\r\n\r\n  createAtomicRMW(\r\n    op: AtomicRMWOp,\r\n    bytes: Index,\r\n    offset: Index,\r\n    ptr: ExpressionRef,\r\n    value: ExpressionRef,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicRMW(this.ref, op, bytes, offset, ptr, value, type);\r\n  }\r\n\r\n  createAtomicCmpxchg(\r\n    bytes: Index,\r\n    offset: Index,\r\n    ptr: ExpressionRef,\r\n    expected: ExpressionRef,\r\n    replacement: ExpressionRef,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicCmpxchg(this.ref, bytes, offset, ptr, expected, replacement, type);\r\n  }\r\n\r\n  createAtomicWait(\r\n    ptr: ExpressionRef,\r\n    expected: ExpressionRef,\r\n    timeout: ExpressionRef,\r\n    expectedType: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicWait(this.ref, ptr, expected, timeout, expectedType);\r\n  }\r\n\r\n  createAtomicWake(\r\n    ptr: ExpressionRef,\r\n    wakeCount: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicWake(this.ref, ptr, wakeCount);\r\n  }\r\n\r\n  // statements\r\n\r\n  createSetLocal(\r\n    index: Index,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenSetLocal(this.ref, index, value);\r\n  }\r\n\r\n  createSetGlobal(\r\n    name: string,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    var cStr = allocString(name);\r\n    try {\r\n      return _BinaryenSetGlobal(this.ref, cStr, value);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createBlock(\r\n    label: string | null,\r\n    children: ExpressionRef[],\r\n    type: NativeType = NativeType.None\r\n  ): ExpressionRef {\r\n    var cStr = allocString(label);\r\n    var cArr = allocI32Array(children);\r\n    try {\r\n      return _BinaryenBlock(this.ref, cStr, cArr, children.length, type);\r\n    } finally {\r\n      free_memory(cArr);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createBreak(\r\n    label: string | null,\r\n    condition: ExpressionRef = 0,\r\n    value: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var cStr = allocString(label);\r\n    try {\r\n      return _BinaryenBreak(this.ref, cStr, condition, value);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createDrop(\r\n    expression: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenDrop(this.ref, expression);\r\n  }\r\n\r\n  createLoop(\r\n    label: string | null,\r\n    body: ExpressionRef\r\n  ): ExpressionRef {\r\n    var cStr = allocString(label);\r\n    try {\r\n      return _BinaryenLoop(this.ref, cStr, body);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createIf(\r\n    condition: ExpressionRef,\r\n    ifTrue: ExpressionRef,\r\n    ifFalse: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenIf(this.ref, condition, ifTrue, ifFalse);\r\n  }\r\n\r\n  createNop(): ExpressionRef {\r\n    return _BinaryenNop(this.ref);\r\n  }\r\n\r\n  createReturn(\r\n    expression: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenReturn(this.ref, expression);\r\n  }\r\n\r\n  createSelect(\r\n    ifTrue: ExpressionRef,\r\n    ifFalse: ExpressionRef,\r\n    condition: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenSelect(this.ref, condition, ifTrue, ifFalse);\r\n  }\r\n\r\n  createSwitch(\r\n    names: string[],\r\n    defaultName: string | null,\r\n    condition: ExpressionRef,\r\n    value: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var numNames = names.length;\r\n    var strs = new Array<usize>(numNames);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      strs[i] = allocString(names[i]);\r\n    }\r\n    var cArr = allocI32Array(strs);\r\n    var cStr = allocString(defaultName);\r\n    try {\r\n      return _BinaryenSwitch(this.ref, cArr, numNames, cStr, condition, value);\r\n    } finally {\r\n      free_memory(cStr);\r\n      free_memory(cArr);\r\n      for (let i = numNames - 1; i >= 0; --i) free_memory(strs[i]);\r\n    }\r\n  }\r\n\r\n  createCall(\r\n    target: string,\r\n    operands: ExpressionRef[] | null,\r\n    returnType: NativeType\r\n  ): ExpressionRef {\r\n    var cStr = allocString(target);\r\n    var cArr = allocI32Array(operands);\r\n    try {\r\n      return _BinaryenCall(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\r\n    } finally {\r\n      free_memory(cArr);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createCallImport(\r\n    target: string,\r\n    operands: ExpressionRef[] | null,\r\n    returnType: NativeType\r\n  ): ExpressionRef {\r\n    var cStr = allocString(target);\r\n    var cArr = allocI32Array(operands);\r\n    try {\r\n      return _BinaryenCallImport(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\r\n    } finally {\r\n      free_memory(cArr);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createCallIndirect(\r\n    index: ExpressionRef,\r\n    operands: ExpressionRef[] | null,\r\n    typeName: string\r\n  ): ExpressionRef {\r\n    var cArr = allocI32Array(operands);\r\n    var cStr = allocString(typeName);\r\n    try {\r\n      return _BinaryenCallIndirect(this.ref, index, cArr, operands && operands.length || 0, cStr);\r\n    } finally {\r\n      free_memory(cStr);\r\n      free_memory(cArr);\r\n    }\r\n  }\r\n\r\n  createUnreachable(): ExpressionRef {\r\n    return _BinaryenUnreachable(this.ref);\r\n  }\r\n\r\n  // meta\r\n\r\n  addGlobal(\r\n    name: string,\r\n    type: NativeType,\r\n    mutable: bool,\r\n    initializer: ExpressionRef\r\n  ): GlobalRef {\r\n    var cStr = allocString(name);\r\n    try {\r\n      return _BinaryenAddGlobal(this.ref, cStr, type, mutable ? 1 : 0, initializer);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  addFunction(\r\n    name: string,\r\n    type: FunctionTypeRef,\r\n    varTypes: NativeType[] | null,\r\n    body: ExpressionRef\r\n  ): FunctionRef {\r\n    var cStr = allocString(name);\r\n    var cArr = allocI32Array(varTypes);\r\n    try {\r\n      return _BinaryenAddFunction(this.ref, cStr, type, cArr, varTypes ? varTypes.length : 0, body);\r\n    } finally {\r\n      free_memory(cArr);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  removeFunction(name: string): void {\r\n    var cStr = allocString(name);\r\n    try {\r\n      _BinaryenRemoveFunction(this.ref, cStr);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  addFunctionExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalName);\r\n    try {\r\n      return _BinaryenAddFunctionExport(this.ref, cStr1, cStr2);\r\n    } finally {\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  addTableExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalName);\r\n    try {\r\n      return _BinaryenAddTableExport(this.ref, cStr1, cStr2);\r\n    } finally {\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  addMemoryExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalName);\r\n    try {\r\n      return _BinaryenAddMemoryExport(this.ref, cStr1, cStr2);\r\n    } finally {\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  addGlobalExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalName);\r\n    try {\r\n      return _BinaryenAddGlobalExport(this.ref, cStr1, cStr2);\r\n    } finally {\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  removeExport(externalName: string): void {\r\n    var cStr = allocString(externalName);\r\n    try {\r\n      _BinaryenRemoveExport(this.ref, cStr);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  addFunctionImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string,\r\n    functionType: FunctionTypeRef\r\n  ): ImportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalModuleName);\r\n    var cStr3 = allocString(externalBaseName);\r\n    try {\r\n      return _BinaryenAddFunctionImport(this.ref, cStr1, cStr2, cStr3, functionType);\r\n    } finally {\r\n      free_memory(cStr3);\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  addTableImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string\r\n  ): ImportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalModuleName);\r\n    var cStr3 = allocString(externalBaseName);\r\n    try {\r\n      return _BinaryenAddTableImport(this.ref, cStr1, cStr2, cStr3);\r\n    } finally {\r\n      free_memory(cStr3);\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  addMemoryImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string\r\n  ): ImportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalModuleName);\r\n    var cStr3 = allocString(externalBaseName);\r\n    try {\r\n      return _BinaryenAddMemoryImport(this.ref, cStr1, cStr2, cStr3);\r\n    } finally {\r\n      free_memory(cStr3);\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  addGlobalImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string,\r\n    globalType: NativeType\r\n  ): ImportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalModuleName);\r\n    var cStr3 = allocString(externalBaseName);\r\n    try {\r\n      return _BinaryenAddGlobalImport(this.ref, cStr1, cStr2, cStr3, globalType);\r\n    } finally {\r\n      free_memory(cStr3);\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  removeImport(internalName: string): void {\r\n    var cStr = allocString(internalName);\r\n    try {\r\n      _BinaryenRemoveImport(this.ref, cStr);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  setMemory(\r\n    initial: Index,\r\n    maximum: Index,\r\n    segments: MemorySegment[],\r\n    target: Target,\r\n    exportName: string | null = null\r\n  ): void {\r\n    var cStr = allocString(exportName);\r\n    var k = segments.length;\r\n    var segs = new Array<usize>(k);\r\n    var offs = new Array<ExpressionRef>(k);\r\n    var sizs = new Array<Index>(k);\r\n    for (let i = 0; i < k; ++i) {\r\n      let buffer = segments[i].buffer;\r\n      let offset = segments[i].offset;\r\n      segs[i] = allocU8Array(buffer);\r\n      offs[i] = target == Target.WASM64\r\n        ? this.createI64(i64_low(offset), i64_high(offset))\r\n        : this.createI32(i64_low(offset));\r\n      sizs[i] = buffer.length;\r\n    }\r\n    var cArr1 = allocI32Array(segs);\r\n    var cArr2 = allocI32Array(offs);\r\n    var cArr3 = allocI32Array(sizs);\r\n    try {\r\n      _BinaryenSetMemory(this.ref, initial, maximum, cStr, cArr1, cArr2, cArr3, k);\r\n    } finally {\r\n      free_memory(cArr3);\r\n      free_memory(cArr2);\r\n      free_memory(cArr1);\r\n      for (let i = k - 1; i >= 0; --i) free_memory(segs[i]);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  setFunctionTable(funcs: FunctionRef[]): void {\r\n    var cArr = allocI32Array(funcs);\r\n    try {\r\n      _BinaryenSetFunctionTable(this.ref, cArr, funcs.length);\r\n    } finally {\r\n      free_memory(cArr);\r\n    }\r\n  }\r\n\r\n  setStart(func: FunctionRef): void {\r\n    _BinaryenSetStart(this.ref, func);\r\n  }\r\n\r\n  setOptimizeLevel(level: i32 = 2): void {\r\n    _BinaryenSetOptimizeLevel(level);\r\n  }\r\n\r\n  setShrinkLevel(level: i32 = 1): void {\r\n    _BinaryenSetShrinkLevel(level);\r\n  }\r\n\r\n  setDebugInfo(on: bool = false): void {\r\n    _BinaryenSetDebugInfo(on);\r\n  }\r\n\r\n  optimize(func: FunctionRef = 0): void {\r\n    if (func) {\r\n      _BinaryenFunctionOptimize(func, this.ref);\r\n    } else {\r\n      _BinaryenModuleOptimize(this.ref);\r\n    }\r\n  }\r\n\r\n  runPasses(passes: string[], func: FunctionRef = 0): void {\r\n    var numNames = passes.length;\r\n    var names = new Array<usize>(numNames);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      names[i] = allocString(passes[i]);\r\n    }\r\n    var cArr = allocI32Array(names);\r\n    try {\r\n      if (func) {\r\n        _BinaryenFunctionRunPasses(func, this.ref, cArr, numNames);\r\n      } else {\r\n        _BinaryenModuleRunPasses(this.ref, cArr, numNames);\r\n      }\r\n    } finally {\r\n      free_memory(cArr);\r\n      for (let i = numNames; i >= 0; --i) {\r\n        free_memory(names[i]);\r\n      }\r\n    }\r\n  }\r\n\r\n  validate(): bool {\r\n    return _BinaryenModuleValidate(this.ref) == 1;\r\n  }\r\n\r\n  interpret(): void {\r\n    _BinaryenModuleInterpret(this.ref);\r\n  }\r\n\r\n  toBinary(sourceMapUrl: string | null): BinaryModule {\r\n    var out = this.out;\r\n    var cStr = allocString(sourceMapUrl);\r\n    var binaryPtr: usize = 0;\r\n    var sourceMapPtr: usize = 0;\r\n    try {\r\n      _BinaryenModuleAllocateAndWrite(out, this.ref, cStr);\r\n      binaryPtr = readInt(out);\r\n      let binaryBytes = readInt(out + 4);\r\n      sourceMapPtr = readInt(out + 4 * 2);\r\n      let ret = new BinaryModule();\r\n      ret.output = readBuffer(binaryPtr, binaryBytes);\r\n      ret.sourceMap = readString(sourceMapPtr);\r\n      return ret;\r\n    } finally {\r\n      if (cStr) free_memory(cStr);\r\n      if (binaryPtr) free_memory(binaryPtr);\r\n      if (sourceMapPtr) free_memory(sourceMapPtr);\r\n    }\r\n  }\r\n\r\n  toText(): string {\r\n    throw new Error(\"not implemented\"); // JS glue overrides this\r\n  }\r\n\r\n  toAsmjs(): string {\r\n    throw new Error(\"not implemented\"); // JS glue overrides this\r\n  }\r\n\r\n  dispose(): void {\r\n    if (!this.ref) return; // sic\r\n    _BinaryenModuleDispose(this.ref);\r\n    free_memory(this.out);\r\n  }\r\n\r\n  createRelooper(): Relooper {\r\n    return Relooper.create(this);\r\n  }\r\n\r\n  cloneExpression(expr: ExpressionRef,\r\n    noSideEffects: bool = false,\r\n    maxDepth: i32 = i32.MAX_VALUE\r\n  ): ExpressionRef { // currently supports side effect free expressions only\r\n    if (maxDepth < 0) return 0;\r\n    maxDepth -= 1;\r\n\r\n    var nested1: ExpressionRef,\r\n        nested2: ExpressionRef;\r\n\r\n    switch (_BinaryenExpressionGetId(expr)) {\r\n      case ExpressionId.Const: {\r\n        switch (_BinaryenExpressionGetType(expr)) {\r\n          case NativeType.I32: {\r\n            return this.createI32(_BinaryenConstGetValueI32(expr));\r\n          }\r\n          case NativeType.I64: {\r\n            return this.createI64(\r\n              _BinaryenConstGetValueI64Low(expr),\r\n              _BinaryenConstGetValueI64High(expr)\r\n            );\r\n          }\r\n          case NativeType.F32: {\r\n            return this.createF32(_BinaryenConstGetValueF32(expr));\r\n          }\r\n          case NativeType.F64: {\r\n            return this.createF64(_BinaryenConstGetValueF64(expr));\r\n          }\r\n          default: {\r\n            throw new Error(\"concrete type expected\");\r\n          }\r\n        }\r\n      }\r\n      case ExpressionId.GetLocal: {\r\n        return _BinaryenGetLocal(this.ref,\r\n          _BinaryenGetLocalGetIndex(expr),\r\n          _BinaryenExpressionGetType(expr)\r\n        );\r\n      }\r\n      case ExpressionId.GetGlobal: {\r\n        let globalName = _BinaryenGetGlobalGetName(expr);\r\n        if (!globalName) break;\r\n        return _BinaryenGetGlobal(this.ref, globalName, _BinaryenExpressionGetType(expr));\r\n      }\r\n      case ExpressionId.Load: {\r\n        if (!(nested1 = this.cloneExpression(_BinaryenLoadGetPtr(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        return _BinaryenLoadIsAtomic(expr)\r\n          ? _BinaryenAtomicLoad(this.ref,\r\n              _BinaryenLoadGetBytes(expr),\r\n              _BinaryenLoadGetOffset(expr),\r\n              _BinaryenExpressionGetType(expr),\r\n              nested1\r\n            )\r\n          : _BinaryenLoad(this.ref,\r\n              _BinaryenLoadGetBytes(expr),\r\n              _BinaryenLoadIsSigned(expr) ? 1 : 0,\r\n              _BinaryenLoadGetOffset(expr),\r\n               _BinaryenLoadGetAlign(expr),\r\n               _BinaryenExpressionGetType(expr),\r\n               nested1\r\n            );\r\n      }\r\n      case ExpressionId.Unary: {\r\n        if (!(nested1 = this.cloneExpression(_BinaryenUnaryGetValue(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        return _BinaryenUnary(this.ref, _BinaryenUnaryGetOp(expr), nested1);\r\n      }\r\n      case ExpressionId.Binary: {\r\n        if (!(nested1 = this.cloneExpression(_BinaryenBinaryGetLeft(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        if (!(nested2 = this.cloneExpression(_BinaryenBinaryGetRight(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        return _BinaryenBinary(this.ref, _BinaryenBinaryGetOp(expr), nested1, nested2);\r\n      }\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  // source map generation\r\n\r\n  addDebugInfoFile(name: string): Index {\r\n    var cStr = allocString(name);\r\n    try {\r\n      return _BinaryenModuleAddDebugInfoFileName(this.ref, cStr);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  getDebugInfoFile(index: Index): string | null {\r\n    return readString(_BinaryenModuleGetDebugInfoFileName(this.ref, index));\r\n  }\r\n\r\n  setDebugLocation(\r\n    func: FunctionRef,\r\n    expr: ExpressionRef,\r\n    fileIndex: Index,\r\n    lineNumber: Index,\r\n    columnNumber: Index\r\n  ): void {\r\n    _BinaryenFunctionSetDebugLocation(func, expr, fileIndex, lineNumber, columnNumber);\r\n  }\r\n}\r\n\r\nexport class Relooper {\r\n\r\n  module: Module;\r\n  ref: RelooperRef;\r\n\r\n  static create(module: Module): Relooper {\r\n    var relooper = new Relooper();\r\n    relooper.module = module;\r\n    relooper.ref = _RelooperCreate();\r\n      return relooper;\r\n  }\r\n\r\n  static createStub(module: Module): Relooper {\r\n    var relooper = new Relooper();\r\n    relooper.module = module;\r\n    relooper.ref = 0;\r\n    return relooper;\r\n  }\r\n\r\n  private constructor() {}\r\n\r\n  addBlock(code: ExpressionRef): RelooperBlockRef {\r\n    return _RelooperAddBlock(this.ref, code);\r\n  }\r\n\r\n  addBranch(from: RelooperBlockRef, to: RelooperBlockRef, condition: ExpressionRef = 0, code: ExpressionRef = 0): void {\r\n    _RelooperAddBranch(from, to, condition, code);\r\n  }\r\n\r\n  addBlockWithSwitch(code: ExpressionRef, condition: ExpressionRef): RelooperBlockRef {\r\n    return _RelooperAddBlockWithSwitch(this.ref, code, condition);\r\n  }\r\n\r\n  addBranchForSwitch(from: RelooperBlockRef, to: RelooperBlockRef, indexes: i32[], code: ExpressionRef = 0): void {\r\n    var cArr = allocI32Array(indexes);\r\n    try {\r\n      _RelooperAddBranchForSwitch(from, to, cArr, indexes.length, code);\r\n    } finally {\r\n      free_memory(cArr);\r\n    }\r\n  }\r\n\r\n  renderAndDispose(entry: RelooperBlockRef, labelHelper: Index): ExpressionRef {\r\n    return _RelooperRenderAndDispose(this.ref, entry, labelHelper, this.module.ref);\r\n  }\r\n}\r\n\r\n// helpers\r\n// can't do stack allocation here: STACKTOP is a global in WASM but a hidden variable in asm.js\r\n\r\nfunction allocU8Array(u8s: Uint8Array | null): usize {\r\n  if (!u8s) return 0;\r\n  var numValues = u8s.length;\r\n  var ptr = allocate_memory(numValues);\r\n  var idx = ptr;\r\n  for (let i = 0; i < numValues; ++i) {\r\n    store<u8>(idx++, u8s[i]);\r\n  }\r\n  return ptr;\r\n}\r\n\r\nfunction allocI32Array(i32s: i32[] | null): usize {\r\n  if (!i32s) return 0;\r\n  var ptr = allocate_memory(i32s.length << 2);\r\n  var idx = ptr;\r\n  for (let i = 0, k = i32s.length; i < k; ++i) {\r\n    let val = i32s[i];\r\n    // store<i32>(idx, val) is not portable\r\n    store<u8>(idx    , ( val         & 0xff) as u8);\r\n    store<u8>(idx + 1, ((val >>   8) & 0xff) as u8);\r\n    store<u8>(idx + 2, ((val >>  16) & 0xff) as u8);\r\n    store<u8>(idx + 3, ( val >>> 24        ) as u8);\r\n    idx += 4;\r\n  }\r\n  return ptr;\r\n}\r\n\r\nfunction stringLengthUTF8(str: string): usize {\r\n  var len = 0;\r\n  for (let i = 0, k = str.length; i < k; ++i) {\r\n    let u = str.charCodeAt(i);\r\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\r\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\r\n    }\r\n    if (u <= 0x7F) {\r\n      ++len;\r\n    } else if (u <= 0x7FF) {\r\n      len += 2;\r\n    } else if (u <= 0xFFFF) {\r\n      len += 3;\r\n    } else if (u <= 0x1FFFFF) {\r\n      len += 4;\r\n    } else if (u <= 0x3FFFFFF) {\r\n      len += 5;\r\n    } else {\r\n      len += 6;\r\n    }\r\n  }\r\n  return len;\r\n}\r\n\r\nfunction allocString(str: string | null): usize {\r\n  if (str == null) return 0;\r\n  var ptr = allocate_memory(stringLengthUTF8(str) + 1);\r\n  var idx = ptr;\r\n  for (let i = 0, k = str.length; i < k; ++i) {\r\n    let u = str.charCodeAt(i);\r\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\r\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\r\n    }\r\n    if (u <= 0x7F) {\r\n      store<u8>(idx++, u as u8);\r\n    } else if (u <= 0x7FF) {\r\n      store<u8>(idx++, (0xC0 |  (u >>> 6)       ) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else if (u <= 0xFFFF) {\r\n      store<u8>(idx++, (0xE0 |  (u >>> 12)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else if (u <= 0x1FFFFF) {\r\n      store<u8>(idx++, (0xF0 |  (u >>> 18)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else if (u <= 0x3FFFFFF) {\r\n      store<u8>(idx++, (0xF8 |  (u >>> 24)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else {\r\n      store<u8>(idx++, (0xFC |  (u >>> 30)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 24) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    }\r\n  }\r\n  store<u8>(idx, 0);\r\n  return ptr;\r\n}\r\n\r\nfunction readInt(ptr: usize): i32 {\r\n  return (\r\n     load<u8>(ptr    )        |\r\n    (load<u8>(ptr + 1) <<  8) |\r\n    (load<u8>(ptr + 2) << 16) |\r\n    (load<u8>(ptr + 3) << 24)\r\n  );\r\n}\r\n\r\nfunction readBuffer(ptr: usize, length: usize): Uint8Array {\r\n  var ret = new Uint8Array(length);\r\n  for (let i: usize = 0; i < length; ++i) {\r\n    ret[i] = load<u8>(ptr + i);\r\n  }\r\n  return ret;\r\n}\r\n\r\nexport function readString(ptr: usize): string | null {\r\n  if (!ptr) return null;\r\n  var arr = new Array<i32>();\r\n  // the following is based on Emscripten's UTF8ArrayToString\r\n  var cp: u32;\r\n  var u1: u32, u2: u32, u3: u32, u4: u32, u5: u32;\r\n  while (cp = load<u8>(ptr++)) {\r\n    if (!(cp & 0x80)) {\r\n      arr.push(cp);\r\n      continue;\r\n    }\r\n    u1 = load<u8>(ptr++) & 63;\r\n    if ((cp & 0xE0) == 0xC0) {\r\n      arr.push(((cp & 31) << 6) | u1);\r\n      continue;\r\n    }\r\n    u2 = load<u8>(ptr++) & 63;\r\n    if ((cp & 0xF0) == 0xE0) {\r\n      cp = ((cp & 15) << 12) | (u1 << 6) | u2;\r\n    } else {\r\n      u3 = load<u8>(ptr++) & 63;\r\n      if ((cp & 0xF8) == 0xF0) {\r\n        cp = ((cp & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\r\n      } else {\r\n        u4 = load<u8>(ptr++) & 63;\r\n        if ((cp & 0xFC) == 0xF8) {\r\n          cp = ((cp & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;\r\n        } else {\r\n          u5 = load<u8>(ptr++) & 63;\r\n          cp = ((cp & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;\r\n        }\r\n      }\r\n    }\r\n    // if (cp < 0x10000) {\r\n    //   arr.push(cp);\r\n    // } else {\r\n    //   var ch = cp - 0x10000;\r\n    //   arr.push(0xD800 | (ch >> 10));\r\n    //   arr.push(0xDC00 | (ch & 0x3FF));\r\n    // }\r\n  }\r\n  // return String.fromCharCodes(arr);\r\n  return String.fromCodePoints(arr);\r\n}\r\n\r\n/** Result structure of {@link Module#toBinary}. */\r\nexport class BinaryModule {\r\n  /** WebAssembly binary. */\r\n  output: Uint8Array;\r\n  /** Source map, if generated. */\r\n  sourceMap: string | null;\r\n}\r\n","/**\r\n * Abstract syntax tree representing a source file once parsed.\r\n * @module ast\r\n *//***/\r\n\r\nimport {\r\n  CommonFlags,\r\n  PATH_DELIMITER,\r\n  STATIC_DELIMITER,\r\n  INSTANCE_DELIMITER,\r\n  LIBRARY_PREFIX\r\n} from \"./program\";\r\n\r\nimport {\r\n  Token,\r\n  Tokenizer,\r\n  Range\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  normalizePath,\r\n  resolvePath\r\n} from \"./util\";\r\n\r\nexport { Token, Range };\r\n\r\n/** Indicates the kind of a node. */\r\nexport enum NodeKind {\r\n\r\n  SOURCE,\r\n\r\n  // types\r\n  TYPE,\r\n  TYPEPARAMETER,\r\n  PARAMETER,\r\n  SIGNATURE,\r\n\r\n  // expressions\r\n  IDENTIFIER,\r\n  ASSERTION,\r\n  BINARY,\r\n  CALL,\r\n  COMMA,\r\n  ELEMENTACCESS,\r\n  FALSE,\r\n  FUNCTION,\r\n  LITERAL,\r\n  NEW,\r\n  NULL,\r\n  PARENTHESIZED,\r\n  PROPERTYACCESS,\r\n  TERNARY,\r\n  SUPER,\r\n  THIS,\r\n  TRUE,\r\n  CONSTRUCTOR,\r\n  UNARYPOSTFIX,\r\n  UNARYPREFIX,\r\n\r\n  // statements\r\n  BLOCK,\r\n  BREAK,\r\n  CONTINUE,\r\n  DO,\r\n  EMPTY,\r\n  EXPORT,\r\n  EXPORTIMPORT,\r\n  EXPRESSION,\r\n  FOR,\r\n  IF,\r\n  IMPORT,\r\n  RETURN,\r\n  SWITCH,\r\n  THROW,\r\n  TRY,\r\n  VARIABLE,\r\n  VOID,\r\n  WHILE,\r\n\r\n  // declaration statements\r\n  CLASSDECLARATION,\r\n  ENUMDECLARATION,\r\n  ENUMVALUEDECLARATION,\r\n  FIELDDECLARATION,\r\n  FUNCTIONDECLARATION,\r\n  IMPORTDECLARATION,\r\n  INTERFACEDECLARATION,\r\n  METHODDECLARATION,\r\n  NAMESPACEDECLARATION,\r\n  TYPEDECLARATION,\r\n  VARIABLEDECLARATION,\r\n\r\n  // special\r\n  DECORATOR,\r\n  EXPORTMEMBER,\r\n  SWITCHCASE,\r\n  COMMENT\r\n}\r\n\r\n/** Base class of all nodes. */\r\nexport abstract class Node {\r\n\r\n  /** Node kind indicator. */\r\n  kind: NodeKind;\r\n  /** Source range. */\r\n  range: Range;\r\n  /** Parent node. */\r\n  parent: Node | null = null;\r\n  /** Common flags indicating specific traits. */\r\n  flags: CommonFlags = CommonFlags.NONE;\r\n\r\n  /** Tests if this node has the specified flag or flags. */\r\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Tests if this node has one of the specified flags. */\r\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\r\n  /** Sets a specific flag or flags. */\r\n  set(flag: CommonFlags): void { this.flags |= flag; }\r\n\r\n  // types\r\n\r\n  static createType(\r\n    name: IdentifierExpression,\r\n    typeArguments: CommonTypeNode[] | null,\r\n    isNullable: bool,\r\n    range: Range\r\n  ): TypeNode {\r\n    var type = new TypeNode();\r\n    type.range = range;\r\n    type.name = name; name.parent = type;\r\n    type.typeArguments = typeArguments; if (typeArguments) setParent(typeArguments, type);\r\n    type.isNullable = isNullable;\r\n    return type;\r\n  }\r\n\r\n  static createOmittedType(\r\n    range: Range\r\n  ): TypeNode {\r\n    return Node.createType(\r\n      Node.createIdentifierExpression(\"\", range),\r\n      null,\r\n      false,\r\n      range\r\n    );\r\n  }\r\n\r\n  static createTypeParameter(\r\n    name: IdentifierExpression,\r\n    extendsType: TypeNode | null,\r\n    range: Range\r\n  ): TypeParameterNode {\r\n    var elem = new TypeParameterNode();\r\n    elem.range = range;\r\n    elem.name = name; name.parent = elem;\r\n    elem.extendsType = extendsType; if (extendsType) extendsType.parent = elem;\r\n    return elem;\r\n  }\r\n\r\n  static createParameter(\r\n    name: IdentifierExpression,\r\n    type: CommonTypeNode,\r\n    initializer: Expression | null,\r\n    kind: ParameterKind,\r\n    range: Range\r\n  ): ParameterNode {\r\n    var elem = new ParameterNode();\r\n    elem.range = range;\r\n    elem.name = name; name.parent = elem;\r\n    elem.type = type; if (type) type.parent = elem;\r\n    elem.initializer = initializer; if (initializer) initializer.parent = elem;\r\n    elem.parameterKind = kind;\r\n    return elem;\r\n  }\r\n\r\n  static createSignature(\r\n    parameters: ParameterNode[],\r\n    returnType: CommonTypeNode,\r\n    explicitThisType: TypeNode | null,\r\n    isNullable: bool,\r\n    range: Range\r\n  ): SignatureNode {\r\n    var sig = new SignatureNode();\r\n    sig.range = range;\r\n    sig.parameterTypes = parameters; setParent(parameters, sig);\r\n    sig.returnType = returnType; returnType.parent = sig;\r\n    sig.explicitThisType = explicitThisType; if (explicitThisType) explicitThisType.parent = sig;\r\n    sig.isNullable = isNullable;\r\n    return sig;\r\n  }\r\n\r\n  // special\r\n\r\n  static createDecorator(\r\n    expression: Expression,\r\n    args: Expression[] | null,\r\n    range: Range\r\n  ): DecoratorNode {\r\n    var stmt = new DecoratorNode();\r\n    stmt.range = range;\r\n    stmt.name = expression; expression.parent = stmt;\r\n    stmt.arguments = args; if (args) setParent(args, stmt);\r\n    if (expression.kind == NodeKind.IDENTIFIER) {\r\n      switch ((<IdentifierExpression>expression).text) {\r\n        case \"global\": {\r\n          stmt.decoratorKind = DecoratorKind.GLOBAL;\r\n          break;\r\n        }\r\n        case \"operator\": {\r\n          stmt.decoratorKind = DecoratorKind.OPERATOR;\r\n          break;\r\n        }\r\n        case \"unmanaged\": {\r\n          stmt.decoratorKind = DecoratorKind.UNMANAGED;\r\n          break;\r\n        }\r\n        case \"offset\": {\r\n          stmt.decoratorKind = DecoratorKind.OFFSET;\r\n          break;\r\n        }\r\n        default: {\r\n          stmt.decoratorKind = DecoratorKind.CUSTOM;\r\n          break;\r\n        }\r\n      }\r\n    } else {\r\n      stmt.decoratorKind = DecoratorKind.CUSTOM;\r\n    }\r\n    return stmt;\r\n  }\r\n\r\n  static createComment(\r\n    text: string,\r\n    kind: CommentKind,\r\n    range: Range\r\n  ): CommentNode {\r\n    var node = new CommentNode();\r\n    node.range = range;\r\n    node.commentKind = kind;\r\n    node.text = text;\r\n    return node;\r\n  }\r\n\r\n  // expressions\r\n\r\n  static createIdentifierExpression(\r\n    name: string,\r\n    range: Range\r\n  ): IdentifierExpression {\r\n    var expr = new IdentifierExpression();\r\n    expr.range = range;\r\n    expr.text = name;\r\n    return expr;\r\n  }\r\n\r\n  static createEmptyIdentifierExpression(\r\n    range: Range\r\n  ): IdentifierExpression {\r\n    var expr = new IdentifierExpression();\r\n    expr.range = range;\r\n    expr.text = \"\";\r\n    return expr;\r\n  }\r\n\r\n  static createArrayLiteralExpression(\r\n    elements: (Expression | null)[],\r\n    range: Range\r\n  ): ArrayLiteralExpression {\r\n    var expr = new ArrayLiteralExpression();\r\n    expr.range = range;\r\n    expr.elementExpressions = elements; setParentIfNotNull(elements, expr);\r\n    return expr;\r\n  }\r\n\r\n  static createAssertionExpression(\r\n    assertionKind: AssertionKind,\r\n    expression: Expression,\r\n    toType: CommonTypeNode,\r\n    range: Range\r\n  ): AssertionExpression {\r\n    var expr = new AssertionExpression();\r\n    expr.range = range;\r\n    expr.assertionKind = assertionKind;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.toType = toType; toType.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createBinaryExpression(\r\n    operator: Token,\r\n    left: Expression,\r\n    right: Expression,\r\n    range: Range\r\n  ): BinaryExpression {\r\n    var expr = new BinaryExpression();\r\n    expr.range = range;\r\n    expr.operator = operator;\r\n    expr.left = left; left.parent = expr;\r\n    expr.right = right; right.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createCallExpression(\r\n    expression: Expression,\r\n    typeArgs: CommonTypeNode[] | null,\r\n    args: Expression[],\r\n    range: Range\r\n  ): CallExpression {\r\n    var expr = new CallExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.typeArguments = typeArgs; if (typeArgs) setParent(typeArgs, expr);\r\n    expr.arguments = args; setParent(args, expr);\r\n    return expr;\r\n  }\r\n\r\n  static createCommaExpression(\r\n    expressions: Expression[],\r\n    range: Range\r\n  ): CommaExpression {\r\n    var expr = new CommaExpression();\r\n    expr.range = range;\r\n    expr.expressions = expressions; setParent(expressions, expr);\r\n    return expr;\r\n  }\r\n\r\n  static createConstructorExpression(\r\n    range: Range\r\n  ): ConstructorExpression {\r\n    var expr = new ConstructorExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createElementAccessExpression(\r\n    expression: Expression,\r\n    element: Expression,\r\n    range: Range\r\n  ): ElementAccessExpression {\r\n    var expr = new ElementAccessExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.elementExpression = element; element.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createFalseExpression(\r\n    range: Range\r\n  ): FalseExpression {\r\n    var expr = new FalseExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createFloatLiteralExpression(\r\n    value: f64,\r\n    range: Range\r\n  ): FloatLiteralExpression {\r\n    var expr = new FloatLiteralExpression();\r\n    expr.range = range;\r\n    expr.value = value;\r\n    return expr;\r\n  }\r\n\r\n  static createFunctionExpression(\r\n    declaration: FunctionDeclaration\r\n  ): FunctionExpression {\r\n    var expr = new FunctionExpression();\r\n    expr.flags = declaration.flags & CommonFlags.ARROW;\r\n    expr.range = declaration.range;\r\n    expr.declaration = declaration;\r\n    return expr;\r\n  }\r\n\r\n  static createIntegerLiteralExpression(\r\n    value: I64,\r\n    range: Range\r\n  ): IntegerLiteralExpression {\r\n    var expr = new IntegerLiteralExpression();\r\n    expr.range = range;\r\n    expr.value = value;\r\n    return expr;\r\n  }\r\n\r\n  static createNewExpression(\r\n    expression: Expression,\r\n    typeArgs: CommonTypeNode[] | null,\r\n    args: Expression[],\r\n    range: Range\r\n  ): NewExpression {\r\n    var expr = new NewExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.typeArguments = typeArgs; if (typeArgs) setParent(typeArgs, expr);\r\n    expr.arguments = args; setParent(args, expr);\r\n    return expr;\r\n  }\r\n\r\n  static createNullExpression(\r\n    range: Range\r\n  ): NullExpression {\r\n    var expr = new NullExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createParenthesizedExpression(\r\n    expression: Expression,\r\n    range: Range\r\n  ): ParenthesizedExpression {\r\n    var expr = new ParenthesizedExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createPropertyAccessExpression(\r\n    expression: Expression,\r\n    property: IdentifierExpression,\r\n    range: Range\r\n  ): PropertyAccessExpression {\r\n    var expr = new PropertyAccessExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.property = property; property.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createRegexpLiteralExpression(\r\n    pattern: string,\r\n    flags: string,\r\n    range: Range\r\n  ): RegexpLiteralExpression {\r\n    var expr = new RegexpLiteralExpression();\r\n    expr.range = range;\r\n    expr.pattern = pattern;\r\n    expr.patternFlags = flags;\r\n    return expr;\r\n  }\r\n\r\n  static createTernaryExpression(\r\n    condition: Expression,\r\n    ifThen: Expression,\r\n    ifElse: Expression,\r\n    range: Range\r\n  ): TernaryExpression {\r\n    var expr = new TernaryExpression();\r\n    expr.range = range;\r\n    expr.condition = condition; condition.parent = expr;\r\n    expr.ifThen = ifThen; ifThen.parent = expr;\r\n    expr.ifElse = ifElse; ifElse.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createStringLiteralExpression(\r\n    value: string,\r\n    range: Range\r\n  ): StringLiteralExpression {\r\n    var expr = new StringLiteralExpression();\r\n    expr.range = range;\r\n    expr.value = value;\r\n    return expr;\r\n  }\r\n\r\n  static createSuperExpression(\r\n    range: Range\r\n  ): SuperExpression {\r\n    var expr = new SuperExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createThisExpression(\r\n    range: Range\r\n  ): ThisExpression {\r\n    var expr = new ThisExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createTrueExpression(\r\n    range: Range\r\n  ): TrueExpression {\r\n    var expr = new TrueExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createUnaryPostfixExpression(\r\n    operator: Token,\r\n    operand: Expression,\r\n    range: Range\r\n  ): UnaryPostfixExpression {\r\n    var expr = new UnaryPostfixExpression();\r\n    expr.range = range;\r\n    expr.operator = operator;\r\n    expr.operand = operand; operand.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createUnaryPrefixExpression(\r\n    operator: Token,\r\n    operand: Expression,\r\n    range: Range\r\n  ): UnaryPrefixExpression {\r\n    var expr = new UnaryPrefixExpression();\r\n    expr.range = range;\r\n    expr.operator = operator;\r\n    expr.operand = operand; operand.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  // statements\r\n\r\n  static createBlockStatement(\r\n    statements: Statement[],\r\n    range: Range\r\n  ): BlockStatement {\r\n    var stmt = new BlockStatement();\r\n    stmt.range = range;\r\n    stmt.statements = statements; setParent(statements, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createBreakStatement(\r\n    label: IdentifierExpression | null,\r\n    range: Range\r\n  ): BreakStatement {\r\n    var stmt = new BreakStatement();\r\n    stmt.range = range;\r\n    stmt.label = label; if (label) label.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createClassDeclaration(\r\n    identifier: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[],\r\n    extendsType: TypeNode | null, // can't be a function\r\n    implementsTypes: TypeNode[] | null, // can't be functions\r\n    members: DeclarationStatement[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): ClassDeclaration {\r\n    var stmt = new ClassDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = identifier; identifier.parent = stmt;\r\n    stmt.typeParameters = typeParameters; setParent(typeParameters, stmt);\r\n    stmt.extendsType = extendsType; if (extendsType) extendsType.parent = stmt;\r\n    stmt.implementsTypes = implementsTypes; if (implementsTypes) setParent(implementsTypes, stmt);\r\n    stmt.members = members; setParent(members, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createContinueStatement(\r\n    label: IdentifierExpression | null,\r\n    range: Range\r\n  ): ContinueStatement {\r\n    var stmt = new ContinueStatement();\r\n    stmt.range = range;\r\n    stmt.label = label; if (label) label.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createDoStatement(\r\n    statement: Statement,\r\n    condition: Expression,\r\n    range: Range\r\n  ): DoStatement {\r\n    var stmt = new DoStatement();\r\n    stmt.range = range;\r\n    stmt.statement = statement; statement.parent = stmt;\r\n    stmt.condition = condition; condition.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createEmptyStatement(\r\n    range: Range\r\n  ): EmptyStatement {\r\n    var stmt = new EmptyStatement();\r\n    stmt.range = range;\r\n    return stmt;\r\n  }\r\n\r\n  static createEnumDeclaration(\r\n    name: IdentifierExpression,\r\n    members: EnumValueDeclaration[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): EnumDeclaration {\r\n    var stmt = new EnumDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.values = members; setParent(members, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createEnumValueDeclaration(\r\n    name: IdentifierExpression,\r\n    value: Expression | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): EnumValueDeclaration {\r\n    var stmt = new EnumValueDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.value = value; if (value) value.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createExportStatement(\r\n    members: ExportMember[],\r\n    path: StringLiteralExpression | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): ExportStatement {\r\n    var stmt = new ExportStatement();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.members = members; setParent(members, stmt);\r\n    stmt.path = path;\r\n    if (path) {\r\n      let normalizedPath = normalizePath(path.value);\r\n      if (path.value.startsWith(\".\")) { // relative\r\n        stmt.normalizedPath = resolvePath(\r\n          normalizedPath,\r\n          range.source.normalizedPath\r\n        );\r\n      } else { // absolute\r\n        stmt.normalizedPath = normalizedPath;\r\n      }\r\n      stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\r\n    } else {\r\n      stmt.normalizedPath = null;\r\n      stmt.internalPath = null;\r\n    }\r\n    return stmt;\r\n  }\r\n\r\n  static createExportImportStatement(\r\n    name: IdentifierExpression,\r\n    externalName: IdentifierExpression,\r\n    range: Range\r\n  ): ExportImportStatement {\r\n    var stmt = new ExportImportStatement();\r\n    stmt.range = range;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.externalName = externalName; externalName.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createExportMember(\r\n    name: IdentifierExpression,\r\n    externalName: IdentifierExpression | null,\r\n    range: Range\r\n  ): ExportMember {\r\n    var elem = new ExportMember();\r\n    elem.range = range;\r\n    elem.name = name; name.parent = elem;\r\n    if (!externalName) {\r\n      externalName = name;\r\n    } else {\r\n      externalName.parent = elem;\r\n    }\r\n    elem.externalName = externalName;\r\n    return elem;\r\n  }\r\n\r\n  static createExpressionStatement(\r\n    expression: Expression\r\n  ): ExpressionStatement {\r\n    var stmt = new ExpressionStatement();\r\n    stmt.range = expression.range;\r\n    stmt.expression = expression; expression.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createIfStatement(\r\n    condition: Expression,\r\n    ifTrue: Statement,\r\n    ifFalse: Statement | null,\r\n    range: Range\r\n  ): IfStatement {\r\n    var stmt = new IfStatement();\r\n    stmt.range = range;\r\n    stmt.condition = condition; condition.parent = stmt;\r\n    stmt.ifTrue = ifTrue; ifTrue.parent = stmt;\r\n    stmt.ifFalse = ifFalse; if (ifFalse) ifFalse.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createImportStatement(\r\n    decls: ImportDeclaration[] | null,\r\n    path: StringLiteralExpression,\r\n    range: Range\r\n  ): ImportStatement {\r\n    var stmt = new ImportStatement();\r\n    stmt.range = range;\r\n    stmt.declarations = decls; if (decls) setParent(decls, stmt);\r\n    stmt.namespaceName = null;\r\n    stmt.path = path;\r\n    var normalizedPath = normalizePath(path.value);\r\n    if (path.value.startsWith(\".\")) { // relative in project\r\n      stmt.normalizedPath = resolvePath(\r\n        normalizedPath,\r\n        range.source.normalizedPath\r\n      );\r\n    } else { // absolute in library\r\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) {\r\n        normalizedPath = LIBRARY_PREFIX + normalizedPath;\r\n      }\r\n      stmt.normalizedPath = normalizedPath;\r\n    }\r\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\r\n    return stmt;\r\n  }\r\n\r\n  static createImportStatementWithWildcard(\r\n    identifier: IdentifierExpression,\r\n    path: StringLiteralExpression,\r\n    range: Range\r\n  ): ImportStatement {\r\n    var stmt = new ImportStatement();\r\n    stmt.range = range;\r\n    stmt.declarations = null;\r\n    stmt.namespaceName = identifier;\r\n    stmt.path = path;\r\n    stmt.normalizedPath = resolvePath(\r\n      normalizePath(path.value),\r\n      range.source.normalizedPath\r\n    );\r\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\r\n    return stmt;\r\n  }\r\n\r\n  static createImportDeclaration(\r\n    externalName: IdentifierExpression,\r\n    name: IdentifierExpression | null,\r\n    range: Range\r\n  ): ImportDeclaration {\r\n    var elem = new ImportDeclaration();\r\n    elem.range = range;\r\n    elem.externalName = externalName; externalName.parent = elem;\r\n    if (!name) {\r\n      name = externalName;\r\n    } else {\r\n      name.parent = elem;\r\n    }\r\n    elem.name = name;\r\n    return elem;\r\n  }\r\n\r\n  static createInterfaceDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[],\r\n    extendsType: TypeNode | null, // can't be a function\r\n    members: DeclarationStatement[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): InterfaceDeclaration {\r\n    var stmt = new InterfaceDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\r\n    stmt.extendsType = extendsType; if (extendsType) extendsType.parent = stmt;\r\n    stmt.members = members; setParent(members, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createFieldDeclaration(\r\n    name: IdentifierExpression,\r\n    type: CommonTypeNode | null,\r\n    initializer: Expression | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): FieldDeclaration {\r\n    var stmt = new FieldDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.type = type; if (type) type.parent = stmt;\r\n    stmt.initializer = initializer; if (initializer) initializer.parent = stmt;\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createForStatement(\r\n    initializer: Statement | null,\r\n    condition: Expression | null,\r\n    incrementor: Expression | null,\r\n    statement: Statement,\r\n    range: Range\r\n  ): ForStatement {\r\n    var stmt = new ForStatement();\r\n    stmt.range = range;\r\n    stmt.initializer = initializer; if (initializer) initializer.parent = stmt;\r\n    stmt.condition = condition; if (condition) condition.parent = stmt;\r\n    stmt.incrementor = incrementor; if (incrementor) incrementor.parent = stmt;\r\n    stmt.statement = statement; statement.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createFunctionDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    signature: SignatureNode,\r\n    body: Statement | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): FunctionDeclaration {\r\n    var stmt = new FunctionDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\r\n    stmt.signature = signature; signature.parent = stmt;\r\n    stmt.body = body; if (body) body.parent = stmt;\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createMethodDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    signature: SignatureNode,\r\n    body: Statement | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): MethodDeclaration {\r\n    var stmt = new MethodDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\r\n    stmt.signature = signature; signature.parent = stmt;\r\n    stmt.body = body; if (body) body.parent = stmt;\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createNamespaceDeclaration(\r\n    name: IdentifierExpression,\r\n    members: Statement[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): NamespaceDeclaration {\r\n    var stmt = new NamespaceDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.members = members; setParent(members, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createReturnStatement(\r\n    value: Expression | null,\r\n    range: Range\r\n  ): ReturnStatement {\r\n    var stmt = new ReturnStatement();\r\n    stmt.range = range;\r\n    stmt.value = value; if (value) value.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createSwitchStatement(\r\n    condition: Expression,\r\n    cases: SwitchCase[],\r\n    range: Range\r\n  ): SwitchStatement {\r\n    var stmt = new SwitchStatement();\r\n    stmt.range = range;\r\n    stmt.condition = condition; condition.parent = stmt;\r\n    stmt.cases = cases; setParent(cases, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createSwitchCase(\r\n    label: Expression | null,\r\n    statements: Statement[],\r\n    range: Range\r\n  ): SwitchCase {\r\n    var elem = new SwitchCase();\r\n    elem.range = range;\r\n    elem.label = label; if (label) label.parent = elem;\r\n    elem.statements = statements; setParent(statements, elem);\r\n    return elem;\r\n  }\r\n\r\n  static createThrowStatement(\r\n    value: Expression,\r\n    range: Range\r\n  ): ThrowStatement {\r\n    var stmt = new ThrowStatement();\r\n    stmt.range = range;\r\n    stmt.value = value; value.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createTryStatement(\r\n    statements: Statement[],\r\n    catchVariable: IdentifierExpression | null,\r\n    catchStatements: Statement[] | null,\r\n    finallyStatements: Statement[] | null,\r\n    range: Range\r\n  ): TryStatement {\r\n    var stmt = new TryStatement();\r\n    stmt.range = range;\r\n    stmt.statements = statements; setParent(statements, stmt);\r\n    stmt.catchVariable = catchVariable;\r\n    if (catchVariable) catchVariable.parent = stmt;\r\n    stmt.catchStatements = catchStatements;\r\n    if (catchStatements) setParent(catchStatements, stmt);\r\n    stmt.finallyStatements = finallyStatements;\r\n    if (finallyStatements) setParent(finallyStatements, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createTypeDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    alias: CommonTypeNode,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): TypeDeclaration {\r\n    var stmt = new TypeDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\r\n    stmt.type = alias; alias.parent = stmt;\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createVariableStatement(\r\n    declarations: VariableDeclaration[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): VariableStatement {\r\n    var stmt = new VariableStatement();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.declarations = declarations; setParent(declarations, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createVariableDeclaration(\r\n    name: IdentifierExpression,\r\n    type: CommonTypeNode | null,\r\n    initializer: Expression | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): VariableDeclaration {\r\n    var elem = new VariableDeclaration();\r\n    elem.range = range;\r\n    elem.flags = flags;\r\n    elem.name = name; name.parent = elem;\r\n    elem.type = type; if (type) type.parent = elem;\r\n    elem.initializer = initializer; if (initializer) initializer.parent = elem;\r\n    elem.decorators = decorators; // inherited\r\n    return elem;\r\n  }\r\n\r\n  static createVoidStatement(\r\n    expression: Expression,\r\n    range: Range\r\n  ): VoidStatement {\r\n    var stmt = new VoidStatement();\r\n    stmt.range = range;\r\n    stmt.expression = expression;\r\n    return stmt;\r\n  }\r\n\r\n  static createWhileStatement(\r\n    condition: Expression,\r\n    statement: Statement,\r\n    range: Range\r\n  ): WhileStatement {\r\n    var stmt = new WhileStatement();\r\n    stmt.range = range;\r\n    stmt.condition = condition; condition.parent = stmt;\r\n    stmt.statement = statement; statement.parent = stmt;\r\n    return stmt;\r\n  }\r\n}\r\n\r\n// types\r\n\r\nexport abstract class CommonTypeNode extends Node {\r\n  // kind varies\r\n\r\n  /** Whether nullable or not. */\r\n  isNullable: bool;\r\n}\r\n\r\n/** Represents a type annotation. */\r\nexport class TypeNode extends CommonTypeNode {\r\n  kind = NodeKind.TYPE;\r\n\r\n  /** Identifier reference. */\r\n  name: IdentifierExpression;\r\n  /** Type argument references. */\r\n  typeArguments: CommonTypeNode[] | null;\r\n}\r\n\r\n/** Represents a type parameter. */\r\nexport class TypeParameterNode extends Node {\r\n  kind = NodeKind.TYPEPARAMETER;\r\n\r\n  /** Identifier reference. */\r\n  name: IdentifierExpression;\r\n  /** Extended type reference, if any. */\r\n  extendsType: TypeNode | null; // can't be a function\r\n}\r\n\r\n/** Represents the kind of a parameter. */\r\nexport enum ParameterKind {\r\n  /** No specific flags. */\r\n  DEFAULT,\r\n  /** Is an optional parameter. */\r\n  OPTIONAL,\r\n  /** Is a rest parameter. */\r\n  REST\r\n}\r\n\r\n/** Represents a function parameter. */\r\nexport class ParameterNode extends Node {\r\n  kind = NodeKind.PARAMETER;\r\n\r\n  /** Parameter kind. */\r\n  parameterKind: ParameterKind;\r\n  /** Parameter name. */\r\n  name: IdentifierExpression;\r\n  /** Parameter type. */\r\n  type: CommonTypeNode;\r\n  /** Initializer expression, if present. */\r\n  initializer: Expression | null;\r\n  /** Implicit field declaration, if applicable. */\r\n  implicitFieldDeclaration: FieldDeclaration | null = null;\r\n}\r\n\r\n/** Represents a function signature. */\r\nexport class SignatureNode extends CommonTypeNode {\r\n  kind = NodeKind.SIGNATURE;\r\n\r\n  /** Accepted parameters. */\r\n  parameterTypes: ParameterNode[];\r\n  /** Return type. */\r\n  returnType: CommonTypeNode;\r\n  /** Explicitly provided this type, if any. */\r\n  explicitThisType: TypeNode | null; // can't be a function\r\n}\r\n\r\n// special\r\n\r\n/** Built-in decorator kinds. */\r\nexport enum DecoratorKind {\r\n  CUSTOM,\r\n  GLOBAL,\r\n  OPERATOR,\r\n  UNMANAGED,\r\n  OFFSET\r\n}\r\n\r\n/** Represents a decorator. */\r\nexport class DecoratorNode extends Node {\r\n  kind = NodeKind.DECORATOR;\r\n\r\n  /** Built-in kind, if applicable. */\r\n  decoratorKind: DecoratorKind;\r\n  /** Name expression. */\r\n  name: Expression;\r\n  /** Argument expressions. */\r\n  arguments: Expression[] | null;\r\n}\r\n\r\n/** Comment kinds. */\r\nexport enum CommentKind {\r\n  /** Line comment. */\r\n  LINE,\r\n  /** Triple-slash comment. */\r\n  TRIPLE,\r\n  /** Block comment. */\r\n  BLOCK\r\n}\r\n\r\n/** Represents a comment. */\r\nexport class CommentNode extends Node {\r\n  kind = NodeKind.COMMENT;\r\n\r\n  /** Comment kind. */\r\n  commentKind: CommentKind;\r\n  /** Comment text. */\r\n  text: string;\r\n}\r\n\r\n// expressions\r\n\r\n/** Base class of all expression nodes. */\r\nexport abstract class Expression extends Node { }\r\n\r\n/** Represents an identifier expression. */\r\nexport class IdentifierExpression extends Expression {\r\n  kind = NodeKind.IDENTIFIER;\r\n\r\n  /** Textual name. */\r\n  text: string;\r\n}\r\n\r\n/** Indicates the kind of a literal. */\r\nexport enum LiteralKind {\r\n  FLOAT,\r\n  INTEGER,\r\n  STRING,\r\n  REGEXP,\r\n  ARRAY,\r\n  OBJECT\r\n}\r\n\r\n/** Base class of all literal expressions. */\r\nexport abstract class LiteralExpression extends Expression {\r\n  kind = NodeKind.LITERAL;\r\n\r\n  /** Specific literal kind. */\r\n  literalKind: LiteralKind;\r\n}\r\n\r\n/** Represents an `[]` literal expression. */\r\nexport class ArrayLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.ARRAY;\r\n\r\n  /** Nested element expressions. */\r\n  elementExpressions: (Expression | null)[];\r\n}\r\n\r\n/** Indicates the kind of an assertion. */\r\nexport enum AssertionKind {\r\n  PREFIX,\r\n  AS\r\n}\r\n\r\n/** Represents an assertion expression. */\r\nexport class AssertionExpression extends Expression {\r\n  kind = NodeKind.ASSERTION;\r\n\r\n  /** Specific kind of this assertion. */\r\n  assertionKind: AssertionKind;\r\n  /** Expression being asserted. */\r\n  expression: Expression;\r\n  /** Target type. */\r\n  toType: CommonTypeNode;\r\n}\r\n\r\n/** Represents a binary expression. */\r\nexport class BinaryExpression extends Expression {\r\n  kind = NodeKind.BINARY;\r\n\r\n  /** Operator token. */\r\n  operator: Token;\r\n  /** Left-hand side expression */\r\n  left: Expression;\r\n  /** Right-hand side expression. */\r\n  right: Expression;\r\n}\r\n\r\n/** Represents a call expression. */\r\nexport class CallExpression extends Expression {\r\n  kind = NodeKind.CALL;\r\n\r\n  /** Called expression. Usually an identifier or property access expression. */\r\n  expression: Expression;\r\n  /** Provided type arguments. */\r\n  typeArguments: CommonTypeNode[] | null;\r\n  /** Provided arguments. */\r\n  arguments: Expression[];\r\n}\r\n\r\n/** Represents a comma expression composed of multiple expressions. */\r\nexport class CommaExpression extends Expression {\r\n  kind = NodeKind.COMMA;\r\n\r\n  /** Sequential expressions. */\r\n  expressions: Expression[];\r\n}\r\n\r\n/** Represents a `constructor` expression. */\r\nexport class ConstructorExpression extends IdentifierExpression {\r\n  kind = NodeKind.CONSTRUCTOR;\r\n  text = \"constructor\";\r\n}\r\n\r\n/** Represents an element access expression, e.g., array access. */\r\nexport class ElementAccessExpression extends Expression {\r\n  kind = NodeKind.ELEMENTACCESS;\r\n\r\n  /** Expression being accessed. */\r\n  expression: Expression;\r\n  /** Element of the expression being accessed. */\r\n  elementExpression: Expression;\r\n}\r\n\r\n/** Represents a float literal expression. */\r\nexport class FloatLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.FLOAT;\r\n\r\n  /** Float value. */\r\n  value: f64;\r\n}\r\n\r\n/** Represents a function expression using the 'function' keyword. */\r\nexport class FunctionExpression extends Expression {\r\n  kind = NodeKind.FUNCTION;\r\n\r\n  /** Inline function declaration. */\r\n  declaration: FunctionDeclaration;\r\n}\r\n\r\n/** Represents an integer literal expression. */\r\nexport class IntegerLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.INTEGER;\r\n\r\n  /** Integer value. */\r\n  value: I64;\r\n}\r\n\r\n/** Represents a `new` expression. Like a call but with its own kind. */\r\nexport class NewExpression extends CallExpression {\r\n  kind = NodeKind.NEW;\r\n}\r\n\r\n/** Represents a `null` expression. */\r\nexport class NullExpression extends IdentifierExpression {\r\n  kind = NodeKind.NULL;\r\n  text = \"null\";\r\n}\r\n\r\n/** Represents a parenthesized expression. */\r\nexport class ParenthesizedExpression extends Expression {\r\n  kind = NodeKind.PARENTHESIZED;\r\n\r\n  /** Expression in parenthesis. */\r\n  expression: Expression;\r\n}\r\n\r\n/** Represents a property access expression. */\r\nexport class PropertyAccessExpression extends Expression {\r\n  kind = NodeKind.PROPERTYACCESS;\r\n\r\n  /** Expression being accessed. */\r\n  expression: Expression;\r\n  /** Property of the expression being accessed. */\r\n  property: IdentifierExpression;\r\n}\r\n\r\n/** Represents a regular expression literal expression. */\r\nexport class RegexpLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.REGEXP;\r\n\r\n  /** Regular expression pattern. */\r\n  pattern: string;\r\n  /** Regular expression flags. */\r\n  patternFlags: string;\r\n}\r\n\r\n/** Represents a ternary expression, i.e., short if notation. */\r\nexport class TernaryExpression extends Expression {\r\n  kind = NodeKind.TERNARY;\r\n\r\n  /** Condition expression. */\r\n  condition: Expression;\r\n  /** Expression executed when condition is `true`. */\r\n  ifThen: Expression;\r\n  /** Expression executed when condition is `false`. */\r\n  ifElse: Expression;\r\n}\r\n\r\n/** Represents a string literal expression. */\r\nexport class StringLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.STRING;\r\n\r\n  /** String value without quotes. */\r\n  value: string;\r\n}\r\n\r\n/** Represents a `super` expression. */\r\nexport class SuperExpression extends IdentifierExpression {\r\n  kind = NodeKind.SUPER;\r\n  text = \"super\";\r\n}\r\n\r\n/** Represents a `this` expression. */\r\nexport class ThisExpression extends IdentifierExpression {\r\n  kind = NodeKind.THIS;\r\n  text = \"this\";\r\n}\r\n\r\n/** Represents a `true` expression. */\r\nexport class TrueExpression extends IdentifierExpression {\r\n  kind = NodeKind.TRUE;\r\n  text = \"true\";\r\n}\r\n\r\n/** Represents a `false` expression. */\r\nexport class FalseExpression extends IdentifierExpression {\r\n  kind = NodeKind.FALSE;\r\n  text = \"false\";\r\n}\r\n\r\n/** Base class of all unary expressions. */\r\nexport abstract class UnaryExpression extends Expression {\r\n\r\n  /** Operator token. */\r\n  operator: Token;\r\n  /** Operand expression. */\r\n  operand: Expression;\r\n}\r\n\r\n/** Represents a unary postfix expression, e.g. a postfix increment. */\r\nexport class UnaryPostfixExpression extends UnaryExpression {\r\n  kind = NodeKind.UNARYPOSTFIX;\r\n}\r\n\r\n/** Represents a unary prefix expression, e.g. a negation. */\r\nexport class UnaryPrefixExpression extends UnaryExpression {\r\n  kind = NodeKind.UNARYPREFIX;\r\n}\r\n\r\n// statements\r\n\r\n/** Base class of all statement nodes. */\r\nexport abstract class Statement extends Node { }\r\n\r\n/** Indicates the specific kind of a source. */\r\nexport enum SourceKind {\r\n  /** Default source. Usually imported from an entry file. */\r\n  DEFAULT,\r\n  /** Entry file. */\r\n  ENTRY,\r\n  /** Library file. */\r\n  LIBRARY\r\n}\r\n\r\n/** A top-level source node. */\r\nexport class Source extends Node {\r\n  kind = NodeKind.SOURCE;\r\n  parent = null;\r\n\r\n  /** Source kind. */\r\n  sourceKind: SourceKind;\r\n  /** Normalized path. */\r\n  normalizedPath: string;\r\n  /** Path used internally. */\r\n  internalPath: string;\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n  /** Full source text. */\r\n  text: string;\r\n  /** Tokenizer reference. */\r\n  tokenizer: Tokenizer | null = null;\r\n  /** Source map index. */\r\n  debugInfoIndex: i32 = -1;\r\n\r\n  /** Constructs a new source node. */\r\n  constructor(normalizedPath: string, text: string, kind: SourceKind) {\r\n    super();\r\n    this.sourceKind = kind;\r\n    this.normalizedPath = normalizedPath;\r\n    this.internalPath = mangleInternalPath(this.normalizedPath);\r\n    this.statements = new Array();\r\n    this.range = new Range(this, 0, text.length);\r\n    this.text = text;\r\n  }\r\n\r\n  /** Tests if this source is an entry file. */\r\n  get isEntry(): bool { return this.sourceKind == SourceKind.ENTRY; }\r\n  /** Tests if this source is a stdlib file. */\r\n  get isLibrary(): bool { return this.sourceKind == SourceKind.LIBRARY; }\r\n}\r\n\r\n/** Base class of all declaration statements. */\r\nexport abstract class DeclarationStatement extends Statement {\r\n\r\n  /** Simple name being declared. */\r\n  name: IdentifierExpression;\r\n  /** Array of decorators. */\r\n  decorators: DecoratorNode[] | null = null;\r\n\r\n  protected cachedProgramLevelInternalName: string | null = null;\r\n  protected cachedFileLevelInternalName: string | null = null;\r\n\r\n  /** Gets the mangled program-level internal name of this declaration. */\r\n  get programLevelInternalName(): string {\r\n    if (!this.cachedProgramLevelInternalName) {\r\n      this.cachedProgramLevelInternalName = mangleInternalName(this, true);\r\n    }\r\n    return this.cachedProgramLevelInternalName;\r\n  }\r\n\r\n  /** Gets the mangled file-level internal name of this declaration. */\r\n  get fileLevelInternalName(): string {\r\n    if (!this.cachedFileLevelInternalName) {\r\n      this.cachedFileLevelInternalName = mangleInternalName(this, false);\r\n    }\r\n    return this.cachedFileLevelInternalName;\r\n  }\r\n\r\n  /** Tests if this is a top-level declaration within its source file. */\r\n  get isTopLevel(): bool {\r\n    var parent = this.parent;\r\n    if (!parent) {\r\n      return false;\r\n    }\r\n    if (parent.kind == NodeKind.VARIABLE && !(parent = parent.parent)) {\r\n      return false;\r\n    }\r\n    return parent.kind == NodeKind.SOURCE;\r\n  }\r\n\r\n  /** Tests if this declaration is a top-level export within its source file. */\r\n  get isTopLevelExport(): bool {\r\n    var parent = this.parent;\r\n    if (!parent || (parent.kind == NodeKind.VARIABLE && !(parent = parent.parent))) {\r\n      return false;\r\n    }\r\n    if (parent.kind == NodeKind.NAMESPACEDECLARATION) {\r\n      return this.is(CommonFlags.EXPORT) && (<NamespaceDeclaration>parent).isTopLevelExport;\r\n    }\r\n    if (parent.kind == NodeKind.CLASSDECLARATION) {\r\n      return this.is(CommonFlags.STATIC) && (<ClassDeclaration>parent).isTopLevelExport;\r\n    }\r\n    return parent.kind == NodeKind.SOURCE && this.is(CommonFlags.EXPORT);\r\n  }\r\n\r\n  /** Tests if this declaration needs an explicit export. */\r\n  needsExplicitExport(member: ExportMember): bool {\r\n    // This is necessary because module-level exports are automatically created\r\n    // for top level declarations of all sorts. This function essentially tests\r\n    // that there isn't a otherwise duplicate top-level export already.\r\n    return (\r\n      member.name.text != member.externalName.text || // if aliased\r\n      this.range.source != member.range.source ||     // if a re-export\r\n      !this.isTopLevelExport                          // if not top-level\r\n    );\r\n  }\r\n}\r\n\r\n/** Base class of all variable-like declaration statements. */\r\nexport abstract class VariableLikeDeclarationStatement extends DeclarationStatement {\r\n\r\n  /** Variable type. */\r\n  type: CommonTypeNode | null;\r\n  /** Variable initializer. */\r\n  initializer: Expression | null;\r\n}\r\n\r\n/** Represents a block statement. */\r\nexport class BlockStatement extends Statement {\r\n  kind = NodeKind.BLOCK;\r\n\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n}\r\n\r\n/** Represents a `break` statement. */\r\nexport class BreakStatement extends Statement {\r\n  kind = NodeKind.BREAK;\r\n\r\n  /** Target label, if applicable. */\r\n  label: IdentifierExpression | null;\r\n}\r\n\r\n/** Represents a `class` declaration. */\r\nexport class ClassDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.CLASSDECLARATION;\r\n\r\n  /** Accepted type parameters. */\r\n  typeParameters: TypeParameterNode[];\r\n  /** Base class type being extended, if any. */\r\n  extendsType: TypeNode | null; // can't be a function\r\n  /** Interface types being implemented, if any. */\r\n  implementsTypes: TypeNode[] | null; // can't be functions\r\n  /** Class member declarations. */\r\n  members: DeclarationStatement[];\r\n\r\n  get isGeneric(): bool {\r\n    var typeParameters = this.typeParameters;\r\n    return typeParameters != null && typeParameters.length > 0;\r\n  }\r\n}\r\n\r\n/** Represents a `continue` statement. */\r\nexport class ContinueStatement extends Statement {\r\n  kind = NodeKind.CONTINUE;\r\n\r\n  /** Target label, if applicable. */\r\n  label: IdentifierExpression | null;\r\n}\r\n\r\n/** Represents a `do` statement. */\r\nexport class DoStatement extends Statement {\r\n  kind = NodeKind.DO;\r\n\r\n  /** Statement being looped over. */\r\n  statement: Statement;\r\n  /** Condition when to repeat. */\r\n  condition: Expression;\r\n}\r\n\r\n/** Represents an empty statement, i.e., a semicolon terminating nothing. */\r\nexport class EmptyStatement extends Statement {\r\n  kind = NodeKind.EMPTY;\r\n}\r\n\r\n/** Represents an `enum` declaration. */\r\nexport class EnumDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.ENUMDECLARATION;\r\n\r\n  /** Enum value declarations. */\r\n  values: EnumValueDeclaration[];\r\n}\r\n\r\n/** Represents a value of an `enum` declaration. */\r\nexport class EnumValueDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.ENUMVALUEDECLARATION;\r\n  // name is inherited\r\n\r\n  /** Value expression. */\r\n  value: Expression | null;\r\n}\r\n\r\n/** Represents an `export import` statement of an interface. */\r\nexport class ExportImportStatement extends Node {\r\n  kind = NodeKind.EXPORTIMPORT;\r\n\r\n  /** Identifier being imported. */\r\n  name: IdentifierExpression;\r\n  /** Identifier being exported. */\r\n  externalName: IdentifierExpression;\r\n}\r\n\r\n/** Represents a member of an `export` statement. */\r\nexport class ExportMember extends Node {\r\n  kind = NodeKind.EXPORTMEMBER;\r\n\r\n  /** Identifier being exported. */\r\n  name: IdentifierExpression;\r\n  /** Identifier seen when imported again. */\r\n  externalName: IdentifierExpression;\r\n}\r\n\r\n/** Represents an `export` statement. */\r\nexport class ExportStatement extends Statement {\r\n  kind = NodeKind.EXPORT;\r\n\r\n  /** Array of members. */\r\n  members: ExportMember[];\r\n  /** Path being exported from, if applicable. */\r\n  path: StringLiteralExpression | null;\r\n  /** Normalized path, if `path` is set. */\r\n  normalizedPath: string | null;\r\n  /** Mangled internal path being referenced, if `path` is set. */\r\n  internalPath: string | null;\r\n}\r\n\r\n/** Represents an expression that is used as a statement. */\r\nexport class ExpressionStatement extends Statement {\r\n  kind = NodeKind.EXPRESSION;\r\n\r\n  /** Expression being used as a statement.*/\r\n  expression: Expression;\r\n}\r\n\r\n/** Represents a field declaration within a `class`. */\r\nexport class FieldDeclaration extends VariableLikeDeclarationStatement {\r\n  kind = NodeKind.FIELDDECLARATION;\r\n\r\n  /** Parameter index within the constructor, if applicable. */\r\n  parameterIndex: i32 = -1;\r\n}\r\n\r\n/** Represents a `for` statement. */\r\nexport class ForStatement extends Statement {\r\n  kind = NodeKind.FOR;\r\n\r\n  /**\r\n   * Initializer statement, if present.\r\n   * Either a {@link VariableStatement} or {@link ExpressionStatement}.\r\n   */\r\n  initializer: Statement | null;\r\n  /** Condition expression, if present. */\r\n  condition: Expression | null;\r\n  /** Incrementor expression, if present. */\r\n  incrementor: Expression | null;\r\n  /** Statement being looped over. */\r\n  statement: Statement;\r\n}\r\n\r\n/** Represents a `function` declaration. */\r\nexport class FunctionDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.FUNCTIONDECLARATION;\r\n\r\n  /** Type parameters, if any. */\r\n  typeParameters: TypeParameterNode[] | null;\r\n  /** Function signature. */\r\n  signature: SignatureNode;\r\n  /** Body statement. Usually a block. */\r\n  body: Statement | null;\r\n\r\n  get isGeneric(): bool {\r\n    var typeParameters = this.typeParameters;\r\n    return typeParameters != null && typeParameters.length > 0;\r\n  }\r\n}\r\n\r\n/** Represents an `if` statement. */\r\nexport class IfStatement extends Statement {\r\n  kind = NodeKind.IF;\r\n\r\n  /** Condition. */\r\n  condition: Expression;\r\n  /** Statement executed when condition is `true`. */\r\n  ifTrue: Statement;\r\n  /** Statement executed when condition is `false`. */\r\n  ifFalse: Statement | null;\r\n}\r\n\r\n/** Represents an `import` declaration part of an {@link ImportStatement}. */\r\nexport class ImportDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.IMPORTDECLARATION;\r\n\r\n  /** Identifier being imported. */\r\n  externalName: IdentifierExpression;\r\n}\r\n\r\n/** Represents an `import` statement. */\r\nexport class ImportStatement extends Statement {\r\n  kind = NodeKind.IMPORT;\r\n\r\n  /** Array of member declarations or `null` if an asterisk import. */\r\n  declarations: ImportDeclaration[] | null;\r\n  /** Name of the local namespace, if an asterisk import. */\r\n  namespaceName: IdentifierExpression | null;\r\n  /** Path being imported from. */\r\n  path: StringLiteralExpression;\r\n  /** Normalized path. */\r\n  normalizedPath: string;\r\n  /** Mangled internal path being referenced. */\r\n  internalPath: string;\r\n}\r\n\r\n/** Represents an `interfarce` declaration. */\r\nexport class InterfaceDeclaration extends ClassDeclaration {\r\n  kind = NodeKind.INTERFACEDECLARATION;\r\n}\r\n\r\n/** Represents a method declaration within a `class`. */\r\nexport class MethodDeclaration extends FunctionDeclaration {\r\n  kind = NodeKind.METHODDECLARATION;\r\n}\r\n\r\n/** Represents a `namespace` declaration. */\r\nexport class NamespaceDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.NAMESPACEDECLARATION;\r\n\r\n  /** Array of namespace members. */\r\n  members: Statement[];\r\n}\r\n\r\n/** Represents a `return` statement. */\r\nexport class ReturnStatement extends Statement {\r\n  kind = NodeKind.RETURN;\r\n\r\n  /** Value expression being returned, if present. */\r\n  value: Expression | null;\r\n}\r\n\r\n/** Represents a single `case` within a `switch` statement. */\r\nexport class SwitchCase extends Node {\r\n  kind = NodeKind.SWITCHCASE;\r\n\r\n  /** Label expression. `null` indicates the default case. */\r\n  label: Expression | null;\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n}\r\n\r\n/** Represents a `switch` statement. */\r\nexport class SwitchStatement extends Statement {\r\n  kind = NodeKind.SWITCH;\r\n\r\n  /** Condition expression. */\r\n  condition: Expression;\r\n  /** Contained cases. */\r\n  cases: SwitchCase[];\r\n}\r\n\r\n/** Represents a `throw` statement. */\r\nexport class ThrowStatement extends Statement {\r\n  kind = NodeKind.THROW;\r\n\r\n  /** Value expression being thrown. */\r\n  value: Expression;\r\n}\r\n\r\n/** Represents a `try` statement. */\r\nexport class TryStatement extends Statement {\r\n  kind = NodeKind.TRY;\r\n\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n  /** Exception variable name, if a `catch` clause is present. */\r\n  catchVariable: IdentifierExpression | null;\r\n  /** Statements being executed on catch, if a `catch` clause is present. */\r\n  catchStatements: Statement[] | null;\r\n  /** Statements being executed afterwards, if a `finally` clause is present. */\r\n  finallyStatements: Statement[] | null;\r\n}\r\n\r\n/** Represents a `type` declaration. */\r\nexport class TypeDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.TYPEDECLARATION;\r\n\r\n  /** Type parameters, if any. */\r\n  typeParameters: TypeParameterNode[] | null;\r\n  /** Type being aliased. */\r\n  type: CommonTypeNode;\r\n}\r\n\r\n/** Represents a variable declaration part of a {@link VariableStatement}. */\r\nexport class VariableDeclaration extends VariableLikeDeclarationStatement {\r\n  kind = NodeKind.VARIABLEDECLARATION;\r\n}\r\n\r\n/** Represents a variable statement wrapping {@link VariableDeclaration}s. */\r\nexport class VariableStatement extends Statement {\r\n  kind = NodeKind.VARIABLE;\r\n\r\n  /** Array of decorators. */\r\n  decorators: DecoratorNode[] | null;\r\n  /** Array of member declarations. */\r\n  declarations: VariableDeclaration[];\r\n}\r\n\r\n/** Represents a void statement dropping an expression's value. */\r\nexport class VoidStatement extends Statement {\r\n  kind = NodeKind.VOID;\r\n\r\n  /** Expression being dropped. */\r\n  expression: Expression;\r\n}\r\n\r\n/** Represents a `while` statement. */\r\nexport class WhileStatement extends Statement {\r\n  kind = NodeKind.WHILE;\r\n\r\n  /** Condition expression. */\r\n  condition: Expression;\r\n  /** Statement being looped over. */\r\n  statement: Statement;\r\n}\r\n\r\n/** Gets the first decorator by name within at set of decorators, if present. */\r\nexport function getFirstDecorator(name: string, decorators: DecoratorNode[] | null): DecoratorNode | null {\r\n  if (decorators) {\r\n    for (let i = 0, k = decorators.length; i < k; ++i) {\r\n      let decorator = decorators[i];\r\n      let expression = decorator.name;\r\n      if (expression.kind == NodeKind.IDENTIFIER && (<IdentifierExpression>expression).text == name) {\r\n        return decorator;\r\n      }\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\n/** Tests if a specific decorator is present within the specified decorators. */\r\nexport function hasDecorator(name: string, decorators: DecoratorNode[] | null): bool {\r\n  return getFirstDecorator(name, decorators) != null;\r\n}\r\n\r\n/** Mangles a declaration's name to an internal name. */\r\nexport function mangleInternalName(declaration: DeclarationStatement, asGlobal: bool = false): string {\r\n  var name = declaration.name.text;\r\n  var parent = declaration.parent;\r\n  if (!parent) return name;\r\n  if (\r\n    declaration.kind == NodeKind.VARIABLEDECLARATION &&\r\n    parent.kind == NodeKind.VARIABLE\r\n  ) { // skip over\r\n    if (!(parent = parent.parent)) return name;\r\n  }\r\n  if (parent.kind == NodeKind.CLASSDECLARATION) {\r\n    return mangleInternalName(<ClassDeclaration>parent, asGlobal) + (\r\n      declaration.is(CommonFlags.STATIC)\r\n        ? STATIC_DELIMITER\r\n        : INSTANCE_DELIMITER\r\n    ) + name;\r\n  }\r\n  if (\r\n    parent.kind == NodeKind.NAMESPACEDECLARATION ||\r\n    parent.kind == NodeKind.ENUMDECLARATION\r\n  ) {\r\n    return mangleInternalName(<DeclarationStatement>parent, asGlobal) +\r\n           STATIC_DELIMITER + name;\r\n  }\r\n  return asGlobal\r\n    ? name\r\n    : declaration.range.source.internalPath + PATH_DELIMITER + name;\r\n}\r\n\r\n/** Mangles an external to an internal path. */\r\nexport function mangleInternalPath(path: string): string {\r\n  if (path.endsWith(\".ts\")) path = path.substring(0, path.length - 3);\r\n  return path;\r\n}\r\n\r\n// Helpers\r\n\r\n/** Sets the parent node on an array of nodes. */\r\nfunction setParent(nodes: Node[], parent: Node): void {\r\n  for (let i = 0, k = nodes.length; i < k; ++i) {\r\n    nodes[i].parent = parent;\r\n  }\r\n}\r\n\r\n/** Sets the parent node on an array of nullable nodes. */\r\nfunction setParentIfNotNull(nodes: (Node | null)[], parent: Node): void {\r\n  for (let i = 0, k = nodes.length; i < k; ++i) {\r\n    let node = nodes[i];\r\n    if (node) node.parent = parent;\r\n  }\r\n}\r\n","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\r\n} catch (e) {\r\n\t// This works if the window reference is available\r\n\tif (typeof window === \"object\") g = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n","/**\r\n * A TypeScript tokenizer modified for AssemblyScript.\r\n *\r\n * Skips over trivia and provides a general mark/reset mechanism for the parser to utilize on\r\n * ambiguous tokens.\r\n *\r\n * @module tokenizer\r\n *//***/\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticMessage,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Source,\r\n  CommentKind\r\n} from \"./ast\";\r\n\r\nimport {\r\n  CharCode,\r\n  isLineBreak,\r\n  isWhiteSpace,\r\n  isIdentifierStart,\r\n  isIdentifierPart,\r\n  isDecimalDigit,\r\n  isOctalDigit,\r\n  isKeywordCharacter\r\n} from \"./util\";\r\n\r\n/** Named token types. */\r\nexport enum Token {\r\n\r\n  // keywords\r\n  // discarded: ANY, BOOLEAN, NEVER, NUMBER, STRING, SYMBOL, UNDEFINED, LESSTHAN_SLASH\r\n\r\n  ABSTRACT,\r\n  AS,\r\n  ASYNC,\r\n  AWAIT,        // ES2017\r\n  BREAK,        // ES2017\r\n  CASE,         // ES2017\r\n  CATCH,        // ES2017\r\n  CLASS,        // ES2017\r\n  CONST,        // ES2017\r\n  CONTINUE,     // ES2017\r\n  CONSTRUCTOR,\r\n  DEBUGGER,     // ES2017\r\n  DECLARE,\r\n  DEFAULT,      // ES2017\r\n  DELETE,       // ES2017\r\n  DO,           // ES2017\r\n  ELSE,         // ES2017\r\n  ENUM,         // ES2017 future\r\n  EXPORT,       // ES2017\r\n  EXTENDS,      // ES2017\r\n  FALSE,        // ES\r\n  FINALLY,      // ES2017\r\n  FOR,          // ES2017\r\n  FROM,         // AS possible identifier\r\n  FUNCTION,     // ES2017\r\n  GET,\r\n  IF,           // ES2017\r\n  IMPLEMENTS,   // ES2017 non-lexical\r\n  IMPORT,       // ES2017\r\n  IN,           // ES2017\r\n  INSTANCEOF,   // ES2017\r\n  INTERFACE,    // ES2017 non-lexical\r\n  IS,\r\n  KEYOF,\r\n  LET,          // ES2017 non-lexical\r\n  MODULE,       // AS possible identifier\r\n  NAMESPACE,    // AS possible identifier\r\n  NEW,          // ES2017\r\n  NULL,         // ES\r\n  OF,\r\n  PACKAGE,      // ES2017 non-lexical\r\n  PRIVATE,      // ES2017 non-lexical\r\n  PROTECTED,    // ES2017 non-lexical\r\n  PUBLIC,       // ES2017 non-lexical\r\n  READONLY,\r\n  RETURN,       // ES2017\r\n  SET,\r\n  STATIC,       // ES2017 non-lexical\r\n  SUPER,        // ES2017\r\n  SWITCH,       // ES2017\r\n  THIS,         // ES2017\r\n  THROW,        // ES2017\r\n  TRUE,         // ES\r\n  TRY,          // ES2017\r\n  TYPE,         // AS possible identifier\r\n  TYPEOF,       // ES2017\r\n  VAR,          // ES2017\r\n  VOID,         // ES2017\r\n  WHILE,        // ES2017\r\n  WITH,         // ES2017\r\n  YIELD,        // ES2017\r\n\r\n  // punctuation\r\n\r\n  OPENBRACE,\r\n  CLOSEBRACE,\r\n  OPENPAREN,\r\n  CLOSEPAREN,\r\n  OPENBRACKET,\r\n  CLOSEBRACKET,\r\n  DOT,\r\n  DOT_DOT_DOT,\r\n  SEMICOLON,\r\n  COMMA,\r\n  LESSTHAN,\r\n  GREATERTHAN,\r\n  LESSTHAN_EQUALS,\r\n  GREATERTHAN_EQUALS,\r\n  EQUALS_EQUALS,\r\n  EXCLAMATION_EQUALS,\r\n  EQUALS_EQUALS_EQUALS,\r\n  EXCLAMATION_EQUALS_EQUALS,\r\n  EQUALS_GREATERTHAN,\r\n  PLUS,\r\n  MINUS,\r\n  ASTERISK_ASTERISK,\r\n  ASTERISK,\r\n  SLASH,\r\n  PERCENT,\r\n  PLUS_PLUS,\r\n  MINUS_MINUS,\r\n  LESSTHAN_LESSTHAN,\r\n  GREATERTHAN_GREATERTHAN,\r\n  GREATERTHAN_GREATERTHAN_GREATERTHAN,\r\n  AMPERSAND,\r\n  BAR,\r\n  CARET,\r\n  EXCLAMATION,\r\n  TILDE,\r\n  AMPERSAND_AMPERSAND,\r\n  BAR_BAR,\r\n  QUESTION,\r\n  COLON,\r\n  EQUALS,\r\n  PLUS_EQUALS,\r\n  MINUS_EQUALS,\r\n  ASTERISK_EQUALS,\r\n  ASTERISK_ASTERISK_EQUALS,\r\n  SLASH_EQUALS,\r\n  PERCENT_EQUALS,\r\n  LESSTHAN_LESSTHAN_EQUALS,\r\n  GREATERTHAN_GREATERTHAN_EQUALS,\r\n  GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS,\r\n  AMPERSAND_EQUALS,\r\n  BAR_EQUALS,\r\n  CARET_EQUALS,\r\n  AT,\r\n\r\n  // literals\r\n\r\n  IDENTIFIER,\r\n  STRINGLITERAL,\r\n  INTEGERLITERAL,\r\n  FLOATLITERAL,\r\n\r\n  // meta\r\n\r\n  INVALID,\r\n  ENDOFFILE\r\n}\r\n\r\nexport function tokenFomKeyword(text: string): Token {\r\n  switch (text) {\r\n    case \"abstract\": return Token.ABSTRACT;\r\n    case \"as\": return Token.AS;\r\n    case \"async\": return Token.ASYNC;\r\n    case \"await\": return Token.AWAIT;\r\n    case \"break\": return Token.BREAK;\r\n    case \"case\": return Token.CASE;\r\n    case \"catch\": return Token.CATCH;\r\n    case \"class\": return Token.CLASS;\r\n    case \"continue\": return Token.CONTINUE;\r\n    case \"const\": return Token.CONST;\r\n    case \"constructor\": return Token.CONSTRUCTOR;\r\n    case \"debugger\": return Token.DEBUGGER;\r\n    case \"declare\": return Token.DECLARE;\r\n    case \"default\": return Token.DEFAULT;\r\n    case \"delete\": return Token.DELETE;\r\n    case \"do\": return Token.DO;\r\n    case \"else\": return Token.ELSE;\r\n    case \"enum\": return Token.ENUM;\r\n    case \"export\": return Token.EXPORT;\r\n    case \"extends\": return Token.EXTENDS;\r\n    case \"false\": return Token.FALSE;\r\n    case \"finally\": return Token.FINALLY;\r\n    case \"for\": return Token.FOR;\r\n    case \"from\": return Token.FROM;\r\n    case \"function\": return Token.FUNCTION;\r\n    case \"get\": return Token.GET;\r\n    case \"if\": return Token.IF;\r\n    case \"implements\": return Token.IMPLEMENTS;\r\n    case \"import\": return Token.IMPORT;\r\n    case \"in\": return Token.IN;\r\n    case \"instanceof\": return Token.INSTANCEOF;\r\n    case \"interface\": return Token.INTERFACE;\r\n    case \"is\": return Token.IS;\r\n    case \"keyof\": return Token.KEYOF;\r\n    case \"let\": return Token.LET;\r\n    case \"module\": return Token.MODULE;\r\n    case \"namespace\": return Token.NAMESPACE;\r\n    case \"new\": return Token.NEW;\r\n    case \"null\": return Token.NULL;\r\n    case \"of\": return Token.OF;\r\n    case \"package\": return Token.PACKAGE;\r\n    case \"private\": return Token.PRIVATE;\r\n    case \"protected\": return Token.PROTECTED;\r\n    case \"public\": return Token.PUBLIC;\r\n    case \"readonly\": return Token.READONLY;\r\n    case \"return\": return Token.RETURN;\r\n    case \"set\": return Token.SET;\r\n    case \"static\": return Token.STATIC;\r\n    case \"super\": return Token.SUPER;\r\n    case \"switch\": return Token.SWITCH;\r\n    case \"this\": return Token.THIS;\r\n    case \"throw\": return Token.THROW;\r\n    case \"true\": return Token.TRUE;\r\n    case \"try\": return Token.TRY;\r\n    case \"type\": return Token.TYPE;\r\n    case \"typeof\": return Token.TYPEOF;\r\n    case \"var\": return Token.VAR;\r\n    case \"void\": return Token.VOID;\r\n    case \"while\": return Token.WHILE;\r\n    case \"with\": return Token.WITH;\r\n    case \"yield\": return Token.YIELD;\r\n    default: return Token.INVALID;\r\n  }\r\n}\r\n\r\nexport function tokenIsAlsoIdentifier(token: Token): bool {\r\n  switch (token) {\r\n    case Token.ABSTRACT:\r\n    case Token.AS:\r\n    case Token.CONSTRUCTOR:\r\n    case Token.DECLARE:\r\n    case Token.DELETE:\r\n    case Token.FROM:\r\n    case Token.GET:\r\n    case Token.IS:\r\n    case Token.KEYOF:\r\n    case Token.MODULE:\r\n    case Token.NAMESPACE:\r\n    case Token.READONLY:\r\n    case Token.SET:\r\n    case Token.TYPE: return true;\r\n    default: return false;\r\n  }\r\n}\r\n\r\nexport function operatorTokenToString(token: Token): string {\r\n  switch (token) {\r\n    case Token.DELETE: return \"delete\";\r\n    case Token.IN: return \"in\";\r\n    case Token.INSTANCEOF: return \"instanceof\";\r\n    case Token.NEW: return \"new\";\r\n    case Token.TYPEOF: return \"typeof\";\r\n    case Token.VOID: return \"void\";\r\n    case Token.YIELD: return \"yield\";\r\n    case Token.DOT_DOT_DOT: return \"...\";\r\n    case Token.COMMA: return \",\";\r\n    case Token.LESSTHAN: return \"<\";\r\n    case Token.GREATERTHAN: return \">\";\r\n    case Token.LESSTHAN_EQUALS: return \"<=\";\r\n    case Token.GREATERTHAN_EQUALS: return \">=\";\r\n    case Token.EQUALS_EQUALS: return \"==\";\r\n    case Token.EXCLAMATION_EQUALS: return \"!=\";\r\n    case Token.EQUALS_EQUALS_EQUALS: return \"===\";\r\n    case Token.EXCLAMATION_EQUALS_EQUALS: return \"!==\";\r\n    case Token.PLUS: return \"+\";\r\n    case Token.MINUS: return \"-\";\r\n    case Token.ASTERISK_ASTERISK: return \"**\";\r\n    case Token.ASTERISK: return \"*\";\r\n    case Token.SLASH: return \"/\";\r\n    case Token.PERCENT: return \"%\";\r\n    case Token.PLUS_PLUS: return \"++\";\r\n    case Token.MINUS_MINUS: return \"--\";\r\n    case Token.LESSTHAN_LESSTHAN: return \"<<\";\r\n    case Token.GREATERTHAN_GREATERTHAN: return \">>\";\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return \">>>\";\r\n    case Token.AMPERSAND: return \"&\";\r\n    case Token.BAR: return \"|\";\r\n    case Token.CARET: return \"^\";\r\n    case Token.EXCLAMATION: return \"!\";\r\n    case Token.TILDE: return \"~\";\r\n    case Token.AMPERSAND_AMPERSAND: return \"&&\";\r\n    case Token.BAR_BAR: return \"||\";\r\n    case Token.EQUALS: return \"=\";\r\n    case Token.PLUS_EQUALS: return \"+=\";\r\n    case Token.MINUS_EQUALS: return \"-=\";\r\n    case Token.ASTERISK_EQUALS: return \"*=\";\r\n    case Token.ASTERISK_ASTERISK_EQUALS: return \"**=\";\r\n    case Token.SLASH_EQUALS: return \"/=\";\r\n    case Token.PERCENT_EQUALS: return \"%=\";\r\n    case Token.LESSTHAN_LESSTHAN_EQUALS: return \"<<=\";\r\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS: return \">>=\";\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return \">>>=\";\r\n    case Token.AMPERSAND_EQUALS: return \"&=\";\r\n    case Token.BAR_EQUALS: return \"|=\";\r\n    case Token.CARET_EQUALS: return \"^=\";\r\n    default: {\r\n      assert(false);\r\n      return \"\";\r\n    }\r\n  }\r\n}\r\n\r\nexport class Range {\r\n\r\n  source: Source;\r\n  start: i32;\r\n  end: i32;\r\n\r\n  // TODO: set these while tokenizing\r\n  // line: i32;\r\n  // column: i32;\r\n\r\n  constructor(source: Source, start: i32, end: i32) {\r\n    this.source = source;\r\n    this.start = start;\r\n    this.end = end;\r\n  }\r\n\r\n  static join(a: Range, b: Range): Range {\r\n    if (a.source != b.source) throw new Error(\"source mismatch\");\r\n    return new Range(a.source,\r\n      a.start < b.start ? a.start : b.start,\r\n      a.end > b.end ? a.end : b.end\r\n    );\r\n  }\r\n\r\n  get atStart(): Range {\r\n    return new Range(this.source, this.start, this.start);\r\n  }\r\n  get atEnd(): Range {\r\n    return new Range(this.source, this.end, this.end);\r\n  }\r\n\r\n  get line(): i32 {\r\n    var text = this.source.text;\r\n    var line = 1;\r\n    for (let pos = this.start; pos >= 0; --pos) {\r\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) line++;\r\n    }\r\n    return line;\r\n  }\r\n\r\n  get column(): i32 {\r\n    var text = this.source.text;\r\n    var column = 0;\r\n    for (let pos = this.start - 1; pos >= 0; --pos) {\r\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) break;\r\n      ++column;\r\n    }\r\n    return column;\r\n  }\r\n\r\n  toString(): string {\r\n    return this.source.text.substring(this.start, this.end);\r\n  }\r\n\r\n  debugInfoRef: usize = 0;\r\n}\r\n\r\ndeclare function parseFloat(str: string): f64;\r\n\r\n/** Handler for intercepting comments while tokenizing. */\r\nexport type CommentHandler = (kind: CommentKind, text: string, range: Range) => void;\r\n\r\n/** Tokenizes a source to individual {@link Token}s. */\r\nexport class Tokenizer extends DiagnosticEmitter {\r\n\r\n  source: Source;\r\n  end: i32 = 0;\r\n\r\n  pos: i32 = 0;\r\n  token: Token = -1;\r\n  tokenPos: i32 = 0;\r\n\r\n  nextToken: Token = -1;\r\n  nextTokenPos: i32 = 0;\r\n  nextTokenOnNewLine: bool = false;\r\n\r\n  onComment: CommentHandler | null = null;\r\n\r\n  /** Constructs a new tokenizer. */\r\n  constructor(source: Source, diagnostics: DiagnosticMessage[] | null = null) {\r\n    super(diagnostics);\r\n    this.source = source;\r\n    this.pos = 0;\r\n    this.end = source.text.length;\r\n    this.diagnostics = diagnostics ? diagnostics : new Array();\r\n\r\n    var text = source.text;\r\n\r\n    // skip bom\r\n    if (\r\n      this.pos < this.end &&\r\n      text.charCodeAt(this.pos) == CharCode.BYTEORDERMARK\r\n    ) {\r\n      ++this.pos;\r\n    }\r\n\r\n    // skip shebang\r\n    if (\r\n      this.pos + 1 < this.end &&\r\n      text.charCodeAt(this.pos) == CharCode.HASH &&\r\n      text.charCodeAt(this.pos + 1) == CharCode.EXCLAMATION\r\n    ) {\r\n      this.pos += 2;\r\n      while (\r\n        this.pos < this.end &&\r\n        text.charCodeAt(this.pos) != CharCode.LINEFEED\r\n      ) {\r\n        ++this.pos;\r\n      }\r\n      // 'next' now starts at lf or eof\r\n    }\r\n  }\r\n\r\n  next(preferIdentifier: bool = false): Token {\r\n    this.nextToken = -1;\r\n    return this.token = this.unsafeNext(preferIdentifier);\r\n  }\r\n\r\n  private unsafeNext(preferIdentifier: bool = false, maxTokenLength: i32 = i32.MAX_VALUE): Token {\r\n    var text = this.source.text;\r\n    while (this.pos < this.end) {\r\n      this.tokenPos = this.pos;\r\n      let c = text.charCodeAt(this.pos);\r\n      switch (c) {\r\n        case CharCode.CARRIAGERETURN: {\r\n          if (\r\n            ++this.pos < this.end &&\r\n            text.charCodeAt(this.pos) == CharCode.LINEFEED\r\n          ) {\r\n            ++this.pos;\r\n          }\r\n          break;\r\n        }\r\n        case CharCode.LINEFEED:\r\n        case CharCode.TAB:\r\n        case CharCode.VERTICALTAB:\r\n        case CharCode.FORMFEED:\r\n        case CharCode.SPACE: {\r\n          ++this.pos;\r\n          break;\r\n        }\r\n        case CharCode.EXCLAMATION: {\r\n          ++this.pos;\r\n          if (\r\n            maxTokenLength > 1 && this.pos < this.end &&\r\n            text.charCodeAt(this.pos) == CharCode.EQUALS\r\n          ) {\r\n            ++this.pos;\r\n            if (\r\n              maxTokenLength > 2 && this.pos < this.end &&\r\n              text.charCodeAt(this.pos) == CharCode.EQUALS\r\n            ) {\r\n              ++this.pos;\r\n              return Token.EXCLAMATION_EQUALS_EQUALS;\r\n            }\r\n            return Token.EXCLAMATION_EQUALS;\r\n          }\r\n          return Token.EXCLAMATION;\r\n        }\r\n        case CharCode.DOUBLEQUOTE:\r\n        case CharCode.SINGLEQUOTE:\r\n        case CharCode.BACKTICK: { // TODO\r\n          return Token.STRINGLITERAL; // expects a call to readString\r\n        }\r\n        case CharCode.PERCENT: {\r\n          ++this.pos;\r\n          if (\r\n            maxTokenLength > 1 && this.pos < this.end &&\r\n            text.charCodeAt(this.pos) == CharCode.EQUALS\r\n          ) {\r\n            ++this.pos;\r\n            return Token.PERCENT_EQUALS;\r\n          }\r\n          return Token.PERCENT;\r\n        }\r\n        case CharCode.AMPERSAND: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.AMPERSAND) {\r\n              ++this.pos;\r\n              return Token.AMPERSAND_AMPERSAND;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.AMPERSAND_EQUALS;\r\n            }\r\n          }\r\n          return Token.AMPERSAND;\r\n        }\r\n        case CharCode.OPENPAREN: {\r\n          ++this.pos;\r\n          return Token.OPENPAREN;\r\n        }\r\n        case CharCode.CLOSEPAREN: {\r\n          ++this.pos;\r\n          return Token.CLOSEPAREN;\r\n        }\r\n        case CharCode.ASTERISK: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.ASTERISK_EQUALS;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.ASTERISK) {\r\n              ++this.pos;\r\n              if (\r\n                maxTokenLength > 2 && this.pos < this.end &&\r\n                text.charCodeAt(this.pos) == CharCode.EQUALS\r\n              ) {\r\n                ++this.pos;\r\n                return Token.ASTERISK_ASTERISK_EQUALS;\r\n              }\r\n              return Token.ASTERISK_ASTERISK;\r\n            }\r\n          }\r\n          return Token.ASTERISK;\r\n        }\r\n        case CharCode.PLUS: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.PLUS) {\r\n              ++this.pos;\r\n              return Token.PLUS_PLUS;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.PLUS_EQUALS;\r\n            }\r\n          }\r\n          return Token.PLUS;\r\n        }\r\n        case CharCode.COMMA: {\r\n          ++this.pos;\r\n          return Token.COMMA;\r\n        }\r\n        case CharCode.MINUS: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.MINUS) {\r\n              ++this.pos;\r\n              return Token.MINUS_MINUS;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.MINUS_EQUALS;\r\n            }\r\n          }\r\n          return Token.MINUS;\r\n        }\r\n        case CharCode.DOT: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (isDecimalDigit(text.charCodeAt(this.pos))) {\r\n              --this.pos;\r\n              return Token.FLOATLITERAL; // expects a call to readFloat\r\n            }\r\n            if (\r\n              maxTokenLength > 2 && this.pos + 1 < this.end &&\r\n              text.charCodeAt(this.pos) == CharCode.DOT &&\r\n              text.charCodeAt(this.pos + 1) == CharCode.DOT\r\n            ) {\r\n              this.pos += 2;\r\n              return Token.DOT_DOT_DOT;\r\n            }\r\n          }\r\n          return Token.DOT;\r\n        }\r\n        case CharCode.SLASH: {\r\n          let commentStartPos = this.pos;\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.SLASH) { // single-line\r\n              let commentKind = CommentKind.LINE;\r\n              if (\r\n                this.pos + 1 < this.end &&\r\n                text.charCodeAt(this.pos + 1) == CharCode.SLASH\r\n              ) {\r\n                ++this.pos;\r\n                commentKind = CommentKind.TRIPLE;\r\n              }\r\n              while (++this.pos < this.end) {\r\n                if (text.charCodeAt(this.pos) == CharCode.LINEFEED) {\r\n                  ++this.pos;\r\n                  break;\r\n                }\r\n              }\r\n              if (this.onComment) {\r\n                this.onComment(\r\n                  commentKind,\r\n                  text.substring(commentStartPos, this.pos),\r\n                  this.range(commentStartPos, this.pos)\r\n                );\r\n              }\r\n              break;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.ASTERISK) { // multi-line\r\n              let closed = false;\r\n              while (++this.pos < this.end) {\r\n                c = text.charCodeAt(this.pos);\r\n                if (\r\n                  c == CharCode.ASTERISK &&\r\n                  this.pos + 1 < this.end &&\r\n                  text.charCodeAt(this.pos + 1) == CharCode.SLASH\r\n                ) {\r\n                  this.pos += 2;\r\n                  closed = true;\r\n                  break;\r\n                }\r\n              }\r\n              if (!closed) {\r\n                this.error(\r\n                  DiagnosticCode._0_expected,\r\n                  this.range(this.pos), \"*/\"\r\n                );\r\n              } else if (this.onComment) {\r\n                this.onComment(\r\n                  CommentKind.BLOCK,\r\n                  text.substring(commentStartPos, this.pos),\r\n                  this.range(commentStartPos, this.pos)\r\n                );\r\n              }\r\n              break;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.SLASH_EQUALS;\r\n            }\r\n          }\r\n          return Token.SLASH;\r\n        }\r\n        case CharCode._0:\r\n        case CharCode._1:\r\n        case CharCode._2:\r\n        case CharCode._3:\r\n        case CharCode._4:\r\n        case CharCode._5:\r\n        case CharCode._6:\r\n        case CharCode._7:\r\n        case CharCode._8:\r\n        case CharCode._9: {\r\n          return this.testInteger()\r\n            ? Token.INTEGERLITERAL // expects a call to readInteger\r\n            : Token.FLOATLITERAL;  // expects a call to readFloat\r\n        }\r\n        case CharCode.COLON: {\r\n          ++this.pos;\r\n          return Token.COLON;\r\n        }\r\n        case CharCode.SEMICOLON: {\r\n          ++this.pos;\r\n          return Token.SEMICOLON;\r\n        }\r\n        case CharCode.LESSTHAN: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.LESSTHAN) {\r\n              ++this.pos;\r\n              if (\r\n                maxTokenLength > 2 &&\r\n                this.pos < this.end &&\r\n                text.charCodeAt(this.pos) == CharCode.EQUALS\r\n              ) {\r\n                ++this.pos;\r\n                return Token.LESSTHAN_LESSTHAN_EQUALS;\r\n              }\r\n              return Token.LESSTHAN_LESSTHAN;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.LESSTHAN_EQUALS;\r\n            }\r\n          }\r\n          return Token.LESSTHAN;\r\n        }\r\n        case CharCode.EQUALS: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              if (\r\n                maxTokenLength > 2 &&\r\n                this.pos < this.end &&\r\n                text.charCodeAt(this.pos) == CharCode.EQUALS\r\n              ) {\r\n                ++this.pos;\r\n                return Token.EQUALS_EQUALS_EQUALS;\r\n              }\r\n              return Token.EQUALS_EQUALS;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\r\n              ++this.pos;\r\n              return Token.EQUALS_GREATERTHAN;\r\n            }\r\n          }\r\n          return Token.EQUALS;\r\n        }\r\n        case CharCode.GREATERTHAN: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\r\n              ++this.pos;\r\n              if (maxTokenLength > 2 && this.pos < this.end) {\r\n                if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\r\n                  ++this.pos;\r\n                  if (\r\n                    maxTokenLength > 3 && this.pos < this.end &&\r\n                    text.charCodeAt(this.pos) == CharCode.EQUALS\r\n                  ) {\r\n                    ++this.pos;\r\n                    return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS;\r\n                  }\r\n                  return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN;\r\n                }\r\n                if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n                  ++this.pos;\r\n                  return Token.GREATERTHAN_GREATERTHAN_EQUALS;\r\n                }\r\n              }\r\n              return Token.GREATERTHAN_GREATERTHAN;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.GREATERTHAN_EQUALS;\r\n            }\r\n          }\r\n          return Token.GREATERTHAN;\r\n        }\r\n        case CharCode.QUESTION: {\r\n          ++this.pos;\r\n          return Token.QUESTION;\r\n        }\r\n        case CharCode.OPENBRACKET: {\r\n          ++this.pos;\r\n          return Token.OPENBRACKET;\r\n        }\r\n        case CharCode.CLOSEBRACKET: {\r\n          ++this.pos;\r\n          return Token.CLOSEBRACKET;\r\n        }\r\n        case CharCode.CARET: {\r\n          ++this.pos;\r\n          if (\r\n            maxTokenLength > 1 && this.pos < this.end &&\r\n            text.charCodeAt(this.pos) == CharCode.EQUALS\r\n          ) {\r\n            ++this.pos;\r\n            return Token.CARET_EQUALS;\r\n          }\r\n          return Token.CARET;\r\n        }\r\n        case CharCode.OPENBRACE: {\r\n          ++this.pos;\r\n          return Token.OPENBRACE;\r\n        }\r\n        case CharCode.BAR: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.BAR) {\r\n              ++this.pos;\r\n              return Token.BAR_BAR;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.BAR_EQUALS;\r\n            }\r\n          }\r\n          return Token.BAR;\r\n        }\r\n        case CharCode.CLOSEBRACE: {\r\n          ++this.pos;\r\n          return Token.CLOSEBRACE;\r\n        }\r\n        case CharCode.TILDE: {\r\n          ++this.pos;\r\n          return Token.TILDE;\r\n        }\r\n        case CharCode.AT: {\r\n          ++this.pos;\r\n          return Token.AT;\r\n        }\r\n        default: {\r\n          if (isIdentifierStart(c)) {\r\n            if (isKeywordCharacter(c)) {\r\n              let posBefore = this.pos;\r\n              while (\r\n                ++this.pos < this.end &&\r\n                isIdentifierPart(c = text.charCodeAt(this.pos))\r\n              ) {\r\n                if (!isKeywordCharacter(c)) {\r\n                  this.pos = posBefore;\r\n                  return Token.IDENTIFIER;\r\n                }\r\n              }\r\n              let keywordText = text.substring(posBefore, this.pos);\r\n              let keywordToken = tokenFomKeyword(keywordText);\r\n              if (\r\n                keywordToken != Token.INVALID &&\r\n                !(preferIdentifier && tokenIsAlsoIdentifier(keywordToken))\r\n              ) {\r\n                return keywordToken;\r\n              }\r\n              this.pos = posBefore;\r\n            }\r\n            return Token.IDENTIFIER; // expects a call to readIdentifier\r\n          } else if (isWhiteSpace(c)) {\r\n            ++this.pos;\r\n            break;\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Invalid_character,\r\n            this.range(this.pos, this.pos + 1)\r\n          );\r\n          ++this.pos;\r\n          return Token.INVALID;\r\n        }\r\n      }\r\n    }\r\n    return Token.ENDOFFILE;\r\n  }\r\n\r\n  peek(\r\n    checkOnNewLine: bool = false,\r\n    preferIdentifier: bool = false,\r\n    maxCompoundLength: i32 = i32.MAX_VALUE\r\n  ): Token {\r\n    var text = this.source.text;\r\n    if (this.nextToken < 0) {\r\n      let posBefore = this.pos;\r\n      let tokenBefore = this.token;\r\n      let tokenPosBefore = this.tokenPos;\r\n      this.nextToken = this.unsafeNext(preferIdentifier, maxCompoundLength);\r\n      this.nextTokenPos = this.tokenPos;\r\n      if (checkOnNewLine) {\r\n        this.nextTokenOnNewLine = false;\r\n        while (--this.tokenPos > posBefore) {\r\n          if (isLineBreak(text.charCodeAt(this.tokenPos))) {\r\n            this.nextTokenOnNewLine = true;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      this.pos = posBefore;\r\n      this.token = tokenBefore;\r\n      this.tokenPos = tokenPosBefore;\r\n    }\r\n    return this.nextToken;\r\n  }\r\n\r\n  skip(token: Token): bool {\r\n    var posBefore = this.pos;\r\n    var tokenBefore = this.token;\r\n    var tokenPosBefore = this.tokenPos;\r\n    var maxCompoundLength = i32.MAX_VALUE;\r\n    switch (token) {\r\n      case Token.GREATERTHAN: { // where parsing type arguments\r\n        maxCompoundLength = 1;\r\n        break;\r\n      }\r\n    }\r\n    this.token = this.unsafeNext(token == Token.IDENTIFIER, maxCompoundLength);\r\n    if (this.token == token) {\r\n      this.nextToken = -1;\r\n      return true;\r\n    } else {\r\n      this.pos = posBefore;\r\n      this.token = tokenBefore;\r\n      this.tokenPos = tokenPosBefore;\r\n      return false;\r\n    }\r\n  }\r\n\r\n  mark(): State {\r\n    var state: State;\r\n    if (reusableState) {\r\n      state = reusableState;\r\n      reusableState = null;\r\n    } else {\r\n      state = new State();\r\n    }\r\n    state.pos = this.pos;\r\n    state.token = this.token;\r\n    state.tokenPos = this.tokenPos;\r\n    return state;\r\n  }\r\n\r\n  discard(state: State): void {\r\n    reusableState = state;\r\n  }\r\n\r\n  reset(state: State): void {\r\n    this.pos = state.pos;\r\n    this.token = state.token;\r\n    this.tokenPos = state.tokenPos;\r\n    this.nextToken = -1;\r\n    reusableState = state;\r\n  }\r\n\r\n  range(start: i32 = -1, end: i32 = -1): Range {\r\n    if (start < 0) {\r\n      start = this.tokenPos;\r\n      end = this.pos;\r\n    } else if (end < 0) {\r\n      end = start;\r\n    }\r\n    return new Range(this.source, start, end);\r\n  }\r\n\r\n  readIdentifier(): string {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    while (\r\n      ++this.pos < this.end &&\r\n      isIdentifierPart(text.charCodeAt(this.pos))\r\n    );\r\n    return text.substring(start, this.pos);\r\n  }\r\n\r\n  readString(): string {\r\n    var text = this.source.text;\r\n    var quote = text.charCodeAt(this.pos++);\r\n    var start = this.pos;\r\n    var result = \"\";\r\n    while (true) {\r\n      if (this.pos >= this.end) {\r\n        result += text.substring(start, this.pos);\r\n        this.error(\r\n          DiagnosticCode.Unterminated_string_literal,\r\n          this.range(start - 1, this.end)\r\n        );\r\n        break;\r\n      }\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c == quote) {\r\n        result += text.substring(start, this.pos++);\r\n        break;\r\n      }\r\n      if (c == CharCode.BACKSLASH) {\r\n        result += text.substring(start, this.pos);\r\n        result += this.readEscapeSequence();\r\n        start = this.pos;\r\n        continue;\r\n      }\r\n      if (isLineBreak(c)) {\r\n        result += text.substring(start, this.pos);\r\n        this.error(\r\n          DiagnosticCode.Unterminated_string_literal,\r\n          this.range(start - 1, this.pos)\r\n        );\r\n        break;\r\n      }\r\n      ++this.pos;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  readEscapeSequence(): string {\r\n    if (++this.pos >= this.end) {\r\n      this.error(\r\n        DiagnosticCode.Unexpected_end_of_text,\r\n        this.range(this.end)\r\n      );\r\n      return \"\";\r\n    }\r\n\r\n    var text = this.source.text;\r\n    var c = text.charCodeAt(this.pos++);\r\n    switch (c) {\r\n      case CharCode._0: return \"\\0\";\r\n      case CharCode.b: return \"\\b\";\r\n      case CharCode.t: return \"\\t\";\r\n      case CharCode.n: return \"\\n\";\r\n      case CharCode.v: return \"\\v\";\r\n      case CharCode.f: return \"\\f\";\r\n      case CharCode.r: return \"\\r\";\r\n      case CharCode.SINGLEQUOTE: return \"'\";\r\n      case CharCode.DOUBLEQUOTE: return \"\\\"\";\r\n      case CharCode.u: {\r\n        if (\r\n          this.pos < this.end &&\r\n          text.charCodeAt(this.pos) == CharCode.OPENBRACE\r\n        ) {\r\n          ++this.pos;\r\n          return this.readExtendedUnicodeEscape(); // \\u{DDDDDDDD}\r\n        }\r\n        return this.readUnicodeEscape(); // \\uDDDD\r\n      }\r\n      case CharCode.CARRIAGERETURN: {\r\n        if (\r\n          this.pos < this.end &&\r\n          text.charCodeAt(this.pos) == CharCode.LINEFEED\r\n        ) {\r\n          ++this.pos;\r\n        }\r\n        // fall through\r\n      }\r\n      case CharCode.LINEFEED:\r\n      case CharCode.LINESEPARATOR:\r\n      case CharCode.PARAGRAPHSEPARATOR: return \"\";\r\n      default: return String.fromCharCode(c);\r\n    }\r\n  }\r\n\r\n  readRegexpPattern(): string {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var escaped = false;\r\n    while (true) {\r\n      if (this.pos >= this.end) {\r\n        this.error(\r\n          DiagnosticCode.Unterminated_regular_expression_literal,\r\n          this.range(start, this.end)\r\n        );\r\n        break;\r\n      }\r\n      if (text.charCodeAt(this.pos) == CharCode.BACKSLASH) {\r\n        ++this.pos;\r\n        escaped = true;\r\n        continue;\r\n      }\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c == CharCode.SLASH && !escaped) break;\r\n      if (isLineBreak(c)) {\r\n        this.error(\r\n          DiagnosticCode.Unterminated_regular_expression_literal,\r\n          this.range(start, this.pos)\r\n        );\r\n        break;\r\n      }\r\n      ++this.pos;\r\n      escaped = false;\r\n    }\r\n    return text.substring(start, this.pos);\r\n  }\r\n\r\n  readRegexpFlags(): string {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var flags = 0;\r\n    while (this.pos < this.end) {\r\n      let c: i32 = text.charCodeAt(this.pos);\r\n      if (!isIdentifierPart(c)) break;\r\n      ++this.pos;\r\n\r\n      // make sure each supported flag is unique\r\n      switch (c) {\r\n        case CharCode.g: {\r\n          flags |= flags & 1 ? -1 : 1;\r\n          break;\r\n        }\r\n        case CharCode.i: {\r\n          flags |= flags & 2 ? -1 : 2;\r\n          break;\r\n        }\r\n        case CharCode.m: {\r\n          flags |= flags & 4 ? -1 : 4;\r\n          break;\r\n        }\r\n        default: {\r\n          flags = -1;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    if (flags == -1) {\r\n      this.error(\r\n        DiagnosticCode.Invalid_regular_expression_flags,\r\n        this.range(start, this.pos)\r\n      );\r\n    }\r\n    return text.substring(start, this.pos);\r\n  }\r\n\r\n  testInteger(): bool {\r\n    var text = this.source.text;\r\n    if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 1 < this.end) {\r\n      switch (text.charCodeAt(this.pos + 2)) {\r\n        case CharCode.X:\r\n        case CharCode.x:\r\n        case CharCode.B:\r\n        case CharCode.b:\r\n        case CharCode.O:\r\n        case CharCode.o: return true;\r\n      }\r\n    }\r\n    var pos = this.pos;\r\n    while (pos < this.end) {\r\n      let c = text.charCodeAt(pos);\r\n      if (c == CharCode.DOT || c == CharCode.E || c == CharCode.e) {\r\n        return false;\r\n      }\r\n      if (c < CharCode._0 || c > CharCode._9) break;\r\n      pos++;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  readInteger(): I64 {\r\n    var text = this.source.text;\r\n    if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\r\n      switch (text.charCodeAt(this.pos + 1)) {\r\n        case CharCode.X:\r\n        case CharCode.x: {\r\n          this.pos += 2;\r\n          return this.readHexInteger();\r\n        }\r\n        case CharCode.B:\r\n        case CharCode.b: {\r\n          this.pos += 2;\r\n          return this.readBinaryInteger();\r\n        }\r\n        case CharCode.O:\r\n        case CharCode.o: {\r\n          this.pos += 2;\r\n          return this.readOctalInteger();\r\n        }\r\n      }\r\n      if (isOctalDigit(text.charCodeAt(this.pos + 1))) {\r\n        let start = this.pos;\r\n        ++this.pos;\r\n        let value = this.readOctalInteger();\r\n        this.error(\r\n          DiagnosticCode.Octal_literals_are_not_allowed_in_strict_mode,\r\n          this.range(start, this.pos)\r\n        );\r\n        return value;\r\n      }\r\n    }\r\n    return this.readDecimalInteger();\r\n  }\r\n\r\n  readHexInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0, 0);\r\n    var i64_16 = i64_new(16, 0);\r\n    while (this.pos < this.end) {\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c >= CharCode._0 && c <= CharCode._9) {\r\n        // value = value * 16 + c - CharCode._0;\r\n        value = i64_add(\r\n          i64_mul(value, i64_16),\r\n          i64_new(c - CharCode._0, 0)\r\n        );\r\n       } else if (c >= CharCode.A && c <= CharCode.F) {\r\n        // value = value * 16 + 10 + c - CharCode.A;\r\n        value = i64_add(\r\n          i64_mul(value, i64_16),\r\n          i64_new(10 + c - CharCode.A, 0)\r\n        );\r\n      } else if (c >= CharCode.a && c <= CharCode.f) {\r\n        // value = value * 16 + 10 + c - CharCode.a;\r\n        value = i64_add(\r\n          i64_mul(value, i64_16),\r\n          i64_new(10 + c - CharCode.a, 0)\r\n        );\r\n      } else {\r\n        break;\r\n      }\r\n      ++this.pos;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Hexadecimal_digit_expected,\r\n        this.range(start)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readDecimalInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0, 0);\r\n    var i64_10 = i64_new(10, 0);\r\n    while (this.pos < this.end) {\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c >= CharCode._0 && c <= CharCode._9) {\r\n        // value = value * 10 + c - CharCode._0;\r\n        value = i64_add(\r\n          i64_mul(value, i64_10),\r\n          i64_new(c - CharCode._0, 0)\r\n        );\r\n      } else {\r\n        break;\r\n      }\r\n      ++this.pos;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Digit_expected,\r\n        this.range(start)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readOctalInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0, 0);\r\n    var i64_8 = i64_new(8, 0);\r\n    while (this.pos < this.end) {\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c >= CharCode._0 && c <= CharCode._7) {\r\n        // value = value * 8 + c - CharCode._0;\r\n        value = i64_add(\r\n          i64_mul(value, i64_8),\r\n          i64_new(c - CharCode._0, 0)\r\n        );\r\n      } else {\r\n        break;\r\n      }\r\n      ++this.pos;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Octal_digit_expected,\r\n        this.range(start)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readBinaryInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0, 0);\r\n    var i64_2 = i64_new(2, 0);\r\n    var i64_1 = i64_new(1, 0);\r\n    while (this.pos < this.end) {\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c == CharCode._0) {\r\n        // value = value * 2;\r\n        value = i64_mul(\r\n          value,\r\n          i64_2\r\n        );\r\n      } else if (c == CharCode._1) {\r\n        // value = value * 2 + 1;\r\n        value = i64_add(\r\n          i64_mul(value, i64_2),\r\n          i64_1\r\n        );\r\n      } else {\r\n        break;\r\n      }\r\n      ++this.pos;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Binary_digit_expected,\r\n        this.range(start)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readFloat(): f64 {\r\n    // var text = this.source.text;\r\n    // if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\r\n    //   switch (text.charCodeAt(this.pos + 1)) {\r\n    //     case CharCode.X:\r\n    //     case CharCode.x: {\r\n    //       this.pos += 2;\r\n    //       return this.readHexFloat();\r\n    //     }\r\n    //   }\r\n    // }\r\n    return this.readDecimalFloat();\r\n  }\r\n\r\n  readDecimalFloat(): f64 {\r\n    var start = this.pos;\r\n    var text = this.source.text;\r\n    while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\r\n      ++this.pos;\r\n    }\r\n    if (this.pos < this.end && text.charCodeAt(this.pos) == CharCode.DOT) {\r\n      ++this.pos;\r\n      while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\r\n        ++this.pos;\r\n      }\r\n    }\r\n    if (this.pos < this.end) {\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c == CharCode.E || c == CharCode.e) {\r\n        if (\r\n          ++this.pos < this.end && (\r\n            text.charCodeAt(this.pos) == CharCode.MINUS ||\r\n            text.charCodeAt(this.pos) == CharCode.PLUS\r\n          ) &&\r\n          isDecimalDigit(text.charCodeAt(this.pos + 1))\r\n        ) {\r\n          ++this.pos;\r\n        }\r\n        while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\r\n          ++this.pos;\r\n        }\r\n      }\r\n    }\r\n    return parseFloat(text.substring(start, this.pos));\r\n  }\r\n\r\n  readHexFloat(): f64 {\r\n    throw new Error(\"not implemented\"); // TBD\r\n  }\r\n\r\n  readUnicodeEscape(): string {\r\n    var remain = 4;\r\n    var value = 0;\r\n    var text = this.source.text;\r\n    while (this.pos < this.end) {\r\n      let c = text.charCodeAt(this.pos++);\r\n      if (c >= CharCode._0 && c <= CharCode._9) {\r\n        value = value * 16 + c - CharCode._0;\r\n      } else if (c >= CharCode.A && c <= CharCode.F) {\r\n        value = value * 16 + 10 + c - CharCode.A;\r\n      } else if (c >= CharCode.a && c <= CharCode.f) {\r\n        value = value * 16 + 10 + c - CharCode.a;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Hexadecimal_digit_expected,\r\n          this.range(this.pos - 1, this.pos)\r\n        );\r\n        return \"\";\r\n      }\r\n      if (--remain == 0) break;\r\n    }\r\n    if (remain) {\r\n      this.error(\r\n        DiagnosticCode.Unexpected_end_of_text,\r\n        this.range(this.pos)\r\n      );\r\n      return \"\";\r\n    }\r\n    return String.fromCharCode(value);\r\n  }\r\n\r\n  private readExtendedUnicodeEscape(): string {\r\n    var start = this.pos;\r\n    var value = this.readHexInteger();\r\n    var value32 = i64_low(value);\r\n    var invalid = false;\r\n\r\n    assert(!i64_high(value));\r\n    if (value32 > 0x10FFFF) {\r\n      this.error(\r\n        DiagnosticCode.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive,\r\n        this.range(start, this.pos)\r\n      );\r\n      invalid = true;\r\n    }\r\n\r\n    var text = this.source.text;\r\n    if (this.pos >= this.end) {\r\n      this.error(\r\n        DiagnosticCode.Unexpected_end_of_text,\r\n        this.range(start, this.end)\r\n      );\r\n      invalid = true;\r\n    } else if (text.charCodeAt(this.pos) == CharCode.CLOSEBRACE) {\r\n      ++this.pos;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Unterminated_Unicode_escape_sequence,\r\n        this.range(start, this.pos)\r\n      );\r\n      invalid = true;\r\n    }\r\n\r\n    if (invalid) return \"\";\r\n    return value32 < 65536\r\n      ? String.fromCharCode(value32)\r\n      : String.fromCharCode(\r\n        (((value32 - 65536) / 1024 | 0) + 0xD800) as i32,\r\n        ( (value32 - 65536) % 1024      + 0xDC00) as i32\r\n      );\r\n  }\r\n\r\n  finish(): void {\r\n  }\r\n}\r\n\r\n/** Tokenizer state as returned by {@link Tokenizer#mark} and consumed by {@link Tokenizer#reset}. */\r\nexport class State {\r\n  /** Current position. */\r\n  pos: i32;\r\n  /** Current token. */\r\n  token: Token;\r\n  /** Current token's position. */\r\n  tokenPos: i32;\r\n}\r\n\r\n// Reusable state object to reduce allocations\r\nvar reusableState: State | null = null;\r\n","/**\r\n * Mappings from AssemblyScript types to WebAssembly types.\r\n * @module types\r\n *//***/\r\n\r\nimport {\r\n  Class,\r\n  FunctionTarget\r\n} from \"./program\";\r\n\r\nimport {\r\n  NativeType,\r\n  ExpressionRef,\r\n  Module\r\n} from \"./module\";\r\n\r\n/** Indicates the kind of a type. */\r\nexport const enum TypeKind {\r\n\r\n  // signed integers\r\n\r\n  /** An 8-bit signed integer. */\r\n  I8,\r\n  /** A 16-bit signed integer. */\r\n  I16,\r\n  /** A 32-bit signed integer. */\r\n  I32,\r\n  /** A 64-bit signed integer. */\r\n  I64,\r\n  /** A 32-bit/64-bit signed integer, depending on the target. */\r\n  ISIZE,\r\n\r\n  // unsigned integers\r\n\r\n  /** An 8-bit unsigned integer. */\r\n  U8,\r\n  /** A 16-bit unsigned integer. */\r\n  U16,\r\n  /** A 32-bit unsigned integer. Also the base of function types. */\r\n  U32,\r\n  /** A 64-bit unsigned integer. */\r\n  U64,\r\n  /** A 32-bit/64-bit unsigned integer, depending on the target. Also the base of class types. */\r\n  USIZE,\r\n  /** A 1-bit unsigned integer. */\r\n  BOOL, // sic\r\n\r\n  // floats\r\n\r\n  /** A 32-bit float. */\r\n  F32,\r\n  /** A 64-bit double. */\r\n  F64,\r\n\r\n  // other\r\n\r\n  /** No return type. */\r\n  VOID\r\n}\r\n\r\n/** Indicates capabilities of a type. */\r\nexport const enum TypeFlags {\r\n  NONE = 0,\r\n  /** Is a signed type that can represent negative values. */\r\n  SIGNED = 1 << 0,\r\n  /** Is an unsigned type that cannot represent negative values. */\r\n  UNSIGNED = 1 << 1,\r\n  /** Is an integer type. */\r\n  INTEGER = 1 << 2,\r\n  /** Is a floating point type. */\r\n  FLOAT = 1 << 3,\r\n  /** Is a sized integer type with a target specific bit size. */\r\n  SIZE = 1 << 4,\r\n  /** Is a small type that is emulated in a larger type. */\r\n  SMALL = 1 << 5,\r\n  /** Is a long type larger than 32-bits. */\r\n  LONG = 1 << 6,\r\n  /** Is a value type. */\r\n  VALUE = 1 << 7,\r\n  /** Is a reference type. */\r\n  REFERENCE = 1 << 8,\r\n  /** Is a nullable type. */\r\n  NULLABLE = 1 << 9\r\n}\r\n\r\n/** Represents a resolved type. */\r\nexport class Type {\r\n\r\n  /** Type kind. */\r\n  kind: TypeKind;\r\n  /** Type flags. */\r\n  flags: TypeFlags;\r\n  /** Size in bits. */\r\n  size: u32;\r\n  /** Size in bytes. Ceiled to 8-bits. */\r\n  byteSize: i32;\r\n  /** Underlying class reference, if a class type. */\r\n  classReference: Class | null;\r\n  /** Underlying function reference, if a function type. */\r\n  signatureReference: Signature | null;\r\n  /** Respective nullable type, if non-nullable. */\r\n  nullableType: Type | null = null;\r\n  /** Respective non-nullable type, if nullable. */\r\n  nonNullableType: Type;\r\n\r\n  /** Constructs a new resolved type. */\r\n  constructor(kind: TypeKind, flags: TypeFlags, size: i32) {\r\n    this.kind = kind;\r\n    this.flags = flags;\r\n    this.size = size;\r\n    this.byteSize = <i32>ceil<f64>(<f64>size / 8);\r\n    this.classReference = null;\r\n    this.signatureReference = null;\r\n    this.nonNullableType = this;\r\n  }\r\n\r\n  /** Computes the sign-extending shift in the target type. */\r\n  computeSmallIntegerShift(targetType: Type): u32 {\r\n    return targetType.size - this.size;\r\n  }\r\n\r\n  /** Computes the truncating mask in the target type. */\r\n  computeSmallIntegerMask(targetType: Type): u32 {\r\n    return ~0 >>> (targetType.size - this.size);\r\n  }\r\n\r\n  /** Tests if this type has the specified flags. */\r\n  is(flags: TypeFlags): bool { return (this.flags & flags) == flags; }\r\n  /** Tests if this type has any of the specified flags. */\r\n  isAny(flags: TypeFlags): bool { return (this.flags & flags) != 0; }\r\n\r\n  /** Composes a class type from this type and a class. */\r\n  asClass(classType: Class): Type {\r\n    assert(this.kind == TypeKind.USIZE && !this.classReference);\r\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\r\n    ret.classReference = classType;\r\n    return ret;\r\n  }\r\n\r\n  /** Composes a function type from this type and a function. */\r\n  asFunction(signature: Signature): Type {\r\n    assert(this.kind == TypeKind.U32 && !this.signatureReference);\r\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\r\n    ret.signatureReference = signature;\r\n    return ret;\r\n  }\r\n\r\n  /** Composes the respective nullable type of this type. */\r\n  asNullable(): Type {\r\n    assert(this.is(TypeFlags.REFERENCE));\r\n    if (!this.nullableType) {\r\n      assert(!this.is(TypeFlags.NULLABLE));\r\n      this.nullableType = new Type(this.kind, this.flags | TypeFlags.NULLABLE, this.size);\r\n      this.nullableType.classReference = this.classReference;       // either a class reference\r\n      this.nullableType.signatureReference = this.signatureReference; // or a function reference\r\n    }\r\n    return this.nullableType;\r\n  }\r\n\r\n  /** Tests if a value of this type is assignable to a target of the specified type. */\r\n  isAssignableTo(target: Type, signednessIsImportant: bool = false): bool {\r\n    var currentClass: Class | null;\r\n    var targetClass: Class | null;\r\n    var currentFunction: Signature | null;\r\n    var targetFunction: Signature | null;\r\n    if (this.is(TypeFlags.REFERENCE)) {\r\n      if (target.is(TypeFlags.REFERENCE)) {\r\n        if (currentClass = this.classReference) {\r\n          if (targetClass = target.classReference) {\r\n            return currentClass.isAssignableTo(targetClass);\r\n          }\r\n        } else if (currentFunction = this.signatureReference) {\r\n          if (targetFunction = target.signatureReference) {\r\n            return currentFunction.isAssignableTo(targetFunction);\r\n          }\r\n        }\r\n      }\r\n    } else if (!target.is(TypeFlags.REFERENCE)) {\r\n      if (this.is(TypeFlags.INTEGER)) {\r\n        if (target.is(TypeFlags.INTEGER)) {\r\n          if (!signednessIsImportant || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)) {\r\n            return this.size <= target.size;\r\n          }\r\n        } else if (target.kind == TypeKind.F32) {\r\n          return this.size <= 23; // mantissa bits\r\n        } else if (target.kind == TypeKind.F64) {\r\n          return this.size <= 52; // ^\r\n        }\r\n      } else if (this.is(TypeFlags.FLOAT)) {\r\n        if (target.is(TypeFlags.FLOAT)) {\r\n          return this.size <= target.size;\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /** Determines the common compatible type of two types, if any. */\r\n  static commonCompatible(left: Type, right: Type, signednessIsImportant: bool): Type | null {\r\n    if (right.isAssignableTo(left, signednessIsImportant)) {\r\n      return left;\r\n    } else if (left.isAssignableTo(right, signednessIsImportant)) {\r\n      return right;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Converts this type to its TypeScript representation. */\r\n  toString(kindOnly: bool = false): string {\r\n    switch (this.kind) {\r\n      case TypeKind.I8: return \"i8\";\r\n      case TypeKind.I16: return \"i16\";\r\n      case TypeKind.I32: return \"i32\";\r\n      case TypeKind.I64: return \"i64\";\r\n      case TypeKind.ISIZE: return \"isize\";\r\n      case TypeKind.U8: return \"u8\";\r\n      case TypeKind.U16: return \"u16\";\r\n      case TypeKind.U32: {\r\n        let functionType = this.signatureReference;\r\n        return kindOnly || !functionType\r\n          ? \"u32\"\r\n          : functionType.toString(true);\r\n      }\r\n      case TypeKind.U64: return \"u64\";\r\n      case TypeKind.USIZE: {\r\n        let classType = this.classReference;\r\n        return kindOnly || !classType\r\n          ? \"usize\"\r\n          : classType.toString();\r\n      }\r\n      case TypeKind.BOOL: return \"bool\";\r\n      case TypeKind.F32: return \"f32\";\r\n      case TypeKind.F64: return \"f64\";\r\n      case TypeKind.VOID: return \"void\";\r\n      default: {\r\n        assert(false);\r\n        return \"\";\r\n      }\r\n    }\r\n  }\r\n\r\n  // Binaryen specific\r\n\r\n  /** Converts this type to its respective native type. */\r\n  toNativeType(): NativeType {\r\n    switch (this.kind) {\r\n      default: return NativeType.I32;\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return NativeType.I64;\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: return this.size == 64 ? NativeType.I64 : NativeType.I32;\r\n      case TypeKind.F32: return NativeType.F32;\r\n      case TypeKind.F64: return NativeType.F64;\r\n      case TypeKind.VOID:  return NativeType.None;\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its native `0` value. */\r\n  toNativeZero(module: Module): ExpressionRef {\r\n    switch (this.kind) {\r\n      case TypeKind.VOID: assert(false);\r\n      default: return module.createI32(0);\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(0);\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return module.createI64(0);\r\n      case TypeKind.F32: return module.createF32(0);\r\n      case TypeKind.F64: return module.createF64(0);\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its native `1` value. */\r\n  toNativeOne(module: Module): ExpressionRef {\r\n    switch (this.kind) {\r\n      case TypeKind.VOID: assert(false);\r\n      default: return module.createI32(1);\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(1);\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return module.createI64(1);\r\n      case TypeKind.F32: return module.createF32(1);\r\n      case TypeKind.F64: return module.createF64(1);\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its native `-1` value. */\r\n  toNativeNegOne(module: Module): ExpressionRef {\r\n    switch (this.kind) {\r\n      case TypeKind.VOID: assert(false);\r\n      default: return module.createI32(-1);\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(-1);\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return module.createI64(-1, -1);\r\n      case TypeKind.F32: return module.createF32(-1);\r\n      case TypeKind.F64: return module.createF64(-1);\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its signature string. */\r\n  toSignatureString(): string {\r\n    switch (this.kind) {\r\n      default: return \"i\";\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return \"I\";\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: return this.size == 64 ? \"I\" : \"i\";\r\n      case TypeKind.F32: return \"f\";\r\n      case TypeKind.F64: return \"F\";\r\n      case TypeKind.VOID: return \"v\";\r\n    }\r\n  }\r\n\r\n  // Types\r\n\r\n  /** An 8-bit signed integer. */\r\n  static readonly i8: Type  = new Type(TypeKind.I8,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.SMALL    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,   8\r\n  );\r\n\r\n  /** A 16-bit signed integer. */\r\n  static readonly i16: Type = new Type(TypeKind.I16,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.SMALL    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  16\r\n  );\r\n\r\n  /** A 32-bit signed integer. */\r\n  static readonly i32: Type = new Type(TypeKind.I32,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit signed integer. */\r\n  static readonly i64: Type = new Type(TypeKind.I64,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 32-bit signed size. WASM32 only. */\r\n  static readonly isize32: Type = new Type(TypeKind.ISIZE,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.SIZE     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit signed size. WASM64 only. */\r\n  static readonly isize64: Type = new Type(TypeKind.ISIZE,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.SIZE     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** An 8-bit unsigned integer. */\r\n  static readonly u8: Type = new Type(TypeKind.U8,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SMALL    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,   8\r\n  );\r\n\r\n  /** A 16-bit unsigned integer. */\r\n  static readonly u16: Type = new Type(TypeKind.U16,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SMALL    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  16\r\n  );\r\n\r\n  /** A 32-bit unsigned integer. */\r\n  static readonly u32: Type = new Type(TypeKind.U32,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit unsigned integer. */\r\n  static readonly u64: Type = new Type(TypeKind.U64,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 32-bit unsigned size. WASM32 only. */\r\n  static readonly usize32: Type = new Type(TypeKind.USIZE,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SIZE     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit unsigned size. WASM64 only. */\r\n  static readonly usize64: Type = new Type(TypeKind.USIZE,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.SIZE     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 1-bit unsigned integer. */\r\n  static readonly bool: Type = new Type(TypeKind.BOOL,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SMALL    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,   1\r\n  );\r\n\r\n  /** A 32-bit float. */\r\n  static readonly f32: Type = new Type(TypeKind.F32,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.FLOAT    |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit float. */\r\n  static readonly f64: Type = new Type(TypeKind.F64,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.FLOAT    |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** No return type. */\r\n  static readonly void: Type = new Type(TypeKind.VOID, TypeFlags.NONE, 0);\r\n}\r\n\r\n/** Converts an array of types to an array of native types. */\r\nexport function typesToNativeTypes(types: Type[]): NativeType[] {\r\n  var numTypes = types.length;\r\n  var ret = new Array<NativeType>(numTypes);\r\n  for (let i = 0; i < numTypes; ++i) {\r\n    ret[i] = types[i].toNativeType();\r\n  }\r\n  return ret;\r\n}\r\n\r\n/** Converts an array of types to its combined string representation. */\r\nexport function typesToString(types: Type[]): string {\r\n  var numTypes = types.length;\r\n  if (!numTypes) return \"\";\r\n  var sb = new Array<string>(numTypes);\r\n  for (let i = 0; i < numTypes; ++i) {\r\n    sb[i] = types[i].toString();\r\n  }\r\n  return sb.join(\", \");\r\n}\r\n\r\n/** Represents a fully resolved function signature. */\r\nexport class Signature {\r\n\r\n  /** Parameter types, if any, excluding `this`. */\r\n  parameterTypes: Type[];\r\n  /** Parameter names, if known, excluding `this`. */\r\n  parameterNames: string[] | null;\r\n  /** Number of required parameters excluding `this`. Other parameters are considered optional. */\r\n  requiredParameters: i32;\r\n  /** Return type. */\r\n  returnType: Type;\r\n  /** This type, if an instance signature. */\r\n  thisType: Type | null;\r\n  /** Whether the last parameter is a rest parameter. */\r\n  hasRest: bool;\r\n  /** Cached {@link FunctionTarget}. */\r\n  cachedFunctionTarget: FunctionTarget | null = null;\r\n  /** Respective function type. */\r\n  type: Type;\r\n\r\n  /** Constructs a new signature. */\r\n  constructor(\r\n    parameterTypes: Type[] | null = null,\r\n    returnType: Type | null = null,\r\n    thisType: Type | null = null\r\n  ) {\r\n    this.parameterTypes = parameterTypes ? parameterTypes : [];\r\n    this.parameterNames = null;\r\n    this.requiredParameters = 0;\r\n    this.returnType = returnType ? returnType : Type.void;\r\n    this.thisType = thisType;\r\n    this.hasRest = false;\r\n    this.type = Type.u32.asFunction(this);\r\n  }\r\n\r\n  /** Gets the known or, alternatively, generic parameter name at the specified index. */\r\n  getParameterName(index: i32): string {\r\n    var parameterNames = this.parameterNames;\r\n    return parameterNames && parameterNames.length > index\r\n      ? parameterNames[index]\r\n      : getGenericParameterName(index);\r\n  }\r\n\r\n  /** Tests if a value of this function type is assignable to a target of the specified function type. */\r\n  isAssignableTo(target: Signature): bool {\r\n    // TODO: maybe cache results?\r\n\r\n    // check `this` type\r\n    var thisThisType = this.thisType;\r\n    var targetThisType = target.thisType;\r\n    if (thisThisType) {\r\n      if (!(targetThisType && thisThisType.isAssignableTo(targetThisType))) {\r\n        return false;\r\n      }\r\n    } else if (targetThisType) {\r\n      return false;\r\n    }\r\n\r\n    // check rest parameter\r\n    if (this.hasRest != target.hasRest) {\r\n      return false; // TODO\r\n    }\r\n\r\n    // check parameter types\r\n    var thisParameterTypes = this.parameterTypes;\r\n    var targetParameterTypes = target.parameterTypes;\r\n    var numParameters = thisParameterTypes.length;\r\n    if (numParameters != targetParameterTypes.length) {\r\n      return false;\r\n    }\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      let thisParameterType = thisParameterTypes[i];\r\n      let targetParameterType = targetParameterTypes[i];\r\n      if (!thisParameterType.isAssignableTo(targetParameterType)) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    // check return type\r\n    var thisReturnType = this.returnType;\r\n    var targetReturnType = target.returnType;\r\n    return thisReturnType == targetReturnType || thisReturnType.isAssignableTo(targetReturnType);\r\n  }\r\n\r\n  /** Converts this signature to a function type string. */\r\n  toSignatureString(): string {\r\n    var sb = [];\r\n    var thisType = this.thisType;\r\n    if (thisType) {\r\n      sb.push(thisType.toSignatureString());\r\n    }\r\n    var parameterTypes = this.parameterTypes;\r\n    for (let i = 0, k = parameterTypes.length; i < k; ++i) {\r\n      sb.push(parameterTypes[i].toSignatureString());\r\n    }\r\n    sb.push(this.returnType.toSignatureString());\r\n    return sb.join(\"\");\r\n  }\r\n\r\n  /** Converts this signature to a string. */\r\n  toString(includeThis: bool = false): string {\r\n    var sb = new Array<string>();\r\n    sb.push(\"(\");\r\n    var index = 0;\r\n    var thisType = this.thisType;\r\n    if (thisType) {\r\n      if (includeThis) {\r\n        sb.push(\"this: \");\r\n        sb.push(thisType.toString());\r\n        index = 1;\r\n      }\r\n    }\r\n    var parameters = this.parameterTypes;\r\n    var numParameters = parameters.length;\r\n    if (numParameters) {\r\n      let names = this.parameterNames;\r\n      let numNames = names ? names.length : 0;\r\n      let optionalStart = this.requiredParameters;\r\n      let restIndex = this.hasRest ? numParameters - 1 : -1;\r\n      for (let i = 0; i < numParameters; ++i, ++index) {\r\n        if (index) sb.push(\", \");\r\n        if (i == restIndex) sb.push(\"...\");\r\n        if (i < numNames) {\r\n          sb.push((<string[]>names)[i]);\r\n        } else {\r\n          sb.push(getGenericParameterName(i));\r\n        }\r\n        if (i >= optionalStart && i != restIndex) {\r\n          sb.push(\"?: \");\r\n        } else {\r\n          sb.push(\": \");\r\n        }\r\n        sb.push(parameters[i].toString());\r\n      }\r\n    }\r\n    sb.push(\") => \");\r\n    sb.push(this.returnType.toString());\r\n    return sb.join(\"\");\r\n  }\r\n}\r\n\r\n// helpers\r\n\r\n// Cached generic parameter names used where names are unknown.\r\nvar cachedGenericParameterNames: string[] | null = null;\r\n\r\n/** Gets the cached generic parameter name for the specified index. */\r\nexport function getGenericParameterName(index: i32): string {\r\n  if (!cachedGenericParameterNames) cachedGenericParameterNames = [];\r\n  for (let i = cachedGenericParameterNames.length; i <= index; ++i) {\r\n    cachedGenericParameterNames.push(\"arg$\" + i.toString(10));\r\n  }\r\n  return cachedGenericParameterNames[index - 1];\r\n}\r\n","/**\r\n * The AssemblyScript compiler.\r\n * @module compiler\r\n *//***/\r\n\r\nimport {\r\n  compileCall as compileBuiltinCall,\r\n  compileGetConstant as compileBuiltinGetConstant,\r\n  compileAllocate as compileBuiltinAllocate\r\n} from \"./builtins\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Module,\r\n  MemorySegment,\r\n  ExpressionRef,\r\n  UnaryOp,\r\n  BinaryOp,\r\n  NativeType,\r\n  FunctionRef,\r\n  ExpressionId,\r\n  FunctionTypeRef,\r\n  GlobalRef\r\n} from \"./module\";\r\n\r\nimport {\r\n  Program,\r\n  ClassPrototype,\r\n  Class,\r\n  Element,\r\n  ElementKind,\r\n  Enum,\r\n  Field,\r\n  FunctionPrototype,\r\n  Function,\r\n  FunctionTarget,\r\n  Global,\r\n  Local,\r\n  Namespace,\r\n  EnumValue,\r\n  Property,\r\n  VariableLikeElement,\r\n  FlowFlags,\r\n  CommonFlags,\r\n  ConstantValueKind,\r\n\r\n  PATH_DELIMITER,\r\n  LIBRARY_PREFIX,\r\n  Flow\r\n} from \"./program\";\r\n\r\nimport {\r\n  Token,\r\n  operatorTokenToString\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  TypeNode,\r\n  Source,\r\n  Range,\r\n\r\n  Statement,\r\n  BlockStatement,\r\n  BreakStatement,\r\n  ClassDeclaration,\r\n  ContinueStatement,\r\n  DoStatement,\r\n  EmptyStatement,\r\n  EnumDeclaration,\r\n  ExportStatement,\r\n  ExpressionStatement,\r\n  FunctionDeclaration,\r\n  ForStatement,\r\n  IfStatement,\r\n  ImportStatement,\r\n  InterfaceDeclaration,\r\n  NamespaceDeclaration,\r\n  ReturnStatement,\r\n  SwitchStatement,\r\n  ThrowStatement,\r\n  TryStatement,\r\n  VariableDeclaration,\r\n  VariableStatement,\r\n  VoidStatement,\r\n  WhileStatement,\r\n\r\n  Expression,\r\n  AssertionExpression,\r\n  BinaryExpression,\r\n  CallExpression,\r\n  CommaExpression,\r\n  ElementAccessExpression,\r\n  FloatLiteralExpression,\r\n  FunctionExpression,\r\n  IdentifierExpression,\r\n  IntegerLiteralExpression,\r\n  LiteralExpression,\r\n  LiteralKind,\r\n  NewExpression,\r\n  ParenthesizedExpression,\r\n  PropertyAccessExpression,\r\n  TernaryExpression,\r\n  ArrayLiteralExpression,\r\n  StringLiteralExpression,\r\n  UnaryPostfixExpression,\r\n  UnaryPrefixExpression,\r\n  FieldDeclaration\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind,\r\n  TypeFlags,\r\n  Signature,\r\n\r\n  typesToNativeTypes\r\n} from \"./types\";\r\n\r\nimport {\r\n  writeI32,\r\n  writeI64,\r\n  writeF32,\r\n  writeF64\r\n} from \"./util\";\r\n\r\n/** Compilation target. */\r\nexport enum Target {\r\n  /** WebAssembly with 32-bit pointers. */\r\n  WASM32,\r\n  /** WebAssembly with 64-bit pointers. Experimental and not supported by any runtime yet. */\r\n  WASM64\r\n}\r\n\r\n/** Compiler options. */\r\nexport class Options {\r\n\r\n  /** WebAssembly target. Defaults to {@link Target.WASM32}. */\r\n  target: Target = Target.WASM32;\r\n  /** If true, compiles everything instead of just reachable code. */\r\n  noTreeShaking: bool = false;\r\n  /** If true, replaces assertions with nops. */\r\n  noAssert: bool = false;\r\n  /** If true, does not set up a memory. */\r\n  noMemory: bool = false;\r\n  /** If true, imports the memory provided by the embedder. */\r\n  importMemory: bool = false;\r\n  /** If true, imports the function table provided by the embedder. */\r\n  importTable: bool = false;\r\n  /** Static memory start offset. */\r\n  memoryBase: u32 = 0;\r\n  /** If true, generates information necessary for source maps. */\r\n  sourceMap: bool = false;\r\n  /** Global aliases. */\r\n  globalAliases: Map<string,string> | null = null;\r\n\r\n  /** Tests if the target is WASM64 or, otherwise, WASM32. */\r\n  get isWasm64(): bool {\r\n    return this.target == Target.WASM64;\r\n  }\r\n\r\n  /** Gets the unsigned size type matching the target. */\r\n  get usizeType(): Type {\r\n    return this.target == Target.WASM64 ? Type.usize64 : Type.usize32;\r\n  }\r\n\r\n  /** Gets the signed size type matching the target. */\r\n  get isizeType(): Type {\r\n    return this.target == Target.WASM64 ? Type.isize64 : Type.isize32;\r\n  }\r\n\r\n  /** Gets the native size type matching the target. */\r\n  get nativeSizeType(): NativeType {\r\n    return this.target == Target.WASM64 ? NativeType.I64 : NativeType.I32;\r\n  }\r\n}\r\n\r\n/** Indicates the desired kind of a conversion. */\r\nexport const enum ConversionKind {\r\n  /** No conversion. */\r\n  NONE,\r\n  /** Implicit conversion. */\r\n  IMPLICIT,\r\n  /** Explicit conversion. */\r\n  EXPLICIT\r\n}\r\n\r\n/** Compiler interface. */\r\nexport class Compiler extends DiagnosticEmitter {\r\n\r\n  /** Program reference. */\r\n  program: Program;\r\n  /** Provided options. */\r\n  options: Options;\r\n  /** Module instance being compiled. */\r\n  module: Module;\r\n  /** Current function in compilation. */\r\n  currentFunction: Function;\r\n  /** Outer function in compilation, if compiling a function expression. */\r\n  outerFunction: Function | null = null;\r\n  /** Current enum in compilation. */\r\n  currentEnum: Enum | null = null;\r\n  /** Current type in compilation. */\r\n  currentType: Type = Type.void;\r\n  /** Start function being compiled. */\r\n  startFunction: Function;\r\n  /** Start function statements. */\r\n  startFunctionBody: ExpressionRef[] = [];\r\n  /** Counting memory offset. */\r\n  memoryOffset: I64;\r\n  /** Memory segments being compiled. */\r\n  memorySegments: MemorySegment[] = new Array();\r\n  /** Map of already compiled static string segments. */\r\n  stringSegments: Map<string,MemorySegment> = new Map();\r\n  /** Function table being compiled. */\r\n  functionTable: Function[] = new Array();\r\n  /** Argument count helper global. */\r\n  argumentCountRef: GlobalRef = 0;\r\n  /** Already processed file names. */\r\n  files: Set<string> = new Set();\r\n\r\n  /** Compiles a {@link Program} to a {@link Module} using the specified options. */\r\n  static compile(program: Program, options: Options | null = null): Module {\r\n    return new Compiler(program, options).compile();\r\n  }\r\n\r\n  /** Constructs a new compiler for a {@link Program} using the specified options. */\r\n  constructor(program: Program, options: Options | null = null) {\r\n    super(program.diagnostics);\r\n    this.program = program;\r\n    if (!options) options = new Options();\r\n    this.options = options;\r\n    this.memoryOffset = i64_new(\r\n      max(options.memoryBase, options.usizeType.byteSize) // leave space for `null`\r\n    );\r\n    this.module = Module.create();\r\n  }\r\n\r\n  /** Performs compilation of the underlying {@link Program} to a {@link Module}. */\r\n  compile(): Module {\r\n    var options = this.options;\r\n    var module = this.module;\r\n    var program = this.program;\r\n\r\n    // initialize lookup maps, built-ins, imports, exports, etc.\r\n    program.initialize(options);\r\n\r\n    // set up the start function wrapping top-level statements, of all files.\r\n    var startFunctionPrototype = assert(program.elementsLookup.get(\"start\"));\r\n    assert(startFunctionPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n    var startFunctionInstance = new Function(\r\n      <FunctionPrototype>startFunctionPrototype,\r\n      startFunctionPrototype.internalName,\r\n      new Signature([], Type.void)\r\n    );\r\n    this.startFunction = startFunctionInstance;\r\n    this.currentFunction = startFunctionInstance;\r\n\r\n    // compile entry file(s) while traversing to reachable elements\r\n    var sources = program.sources;\r\n    for (let i = 0, k = sources.length; i < k; ++i) {\r\n      if (sources[i].isEntry) {\r\n        this.compileSource(sources[i]);\r\n      }\r\n    }\r\n\r\n    // compile the start function if not empty\r\n    var startFunctionBody = this.startFunctionBody;\r\n    if (startFunctionBody.length) {\r\n      let typeRef = this.ensureFunctionType(startFunctionInstance.signature);\r\n      let funcRef: FunctionRef;\r\n      module.setStart(\r\n        funcRef = module.addFunction(\r\n          startFunctionInstance.internalName,\r\n          typeRef,\r\n          typesToNativeTypes(startFunctionInstance.additionalLocals),\r\n          module.createBlock(null, startFunctionBody)\r\n        )\r\n      );\r\n      startFunctionInstance.finalize(module, funcRef);\r\n    }\r\n\r\n    // set up static memory segments and the heap base pointer\r\n    if (!options.noMemory) {\r\n      let memoryOffset = this.memoryOffset;\r\n      memoryOffset = i64_align(memoryOffset, options.usizeType.byteSize);\r\n      this.memoryOffset = memoryOffset;\r\n      if (options.isWasm64) {\r\n        module.addGlobal(\r\n          \"HEAP_BASE\",\r\n          NativeType.I64,\r\n          false,\r\n          module.createI64(i64_low(memoryOffset), i64_high(memoryOffset))\r\n        );\r\n      } else {\r\n        module.addGlobal(\r\n          \"HEAP_BASE\",\r\n          NativeType.I32,\r\n          false,\r\n          module.createI32(i64_low(memoryOffset))\r\n        );\r\n      }\r\n\r\n      // determine initial page size\r\n      let pages = i64_shr_u(i64_align(memoryOffset, 0x10000), i64_new(16, 0));\r\n      module.setMemory(\r\n        i64_low(pages),\r\n        this.options.isWasm64\r\n          ? Module.MAX_MEMORY_WASM64\r\n          : Module.MAX_MEMORY_WASM32,\r\n        this.memorySegments,\r\n        options.target,\r\n        \"memory\"\r\n      );\r\n    }\r\n\r\n    // import memory if requested\r\n    if (options.importMemory) {\r\n      module.addMemoryImport(\"0\", \"env\", \"memory\");\r\n    }\r\n\r\n    // set up function table\r\n    var functionTable = this.functionTable;\r\n    var functionTableSize = functionTable.length;\r\n    if (functionTableSize) {\r\n      let entries = new Array<FunctionRef>(functionTableSize);\r\n      for (let i = 0; i < functionTableSize; ++i) {\r\n        entries[i] = functionTable[i].ref;\r\n      }\r\n      module.setFunctionTable(entries);\r\n      module.addTableExport(\"0\", \"table\");\r\n    }\r\n\r\n    // import table if requested\r\n    if (options.importTable) {\r\n      module.addTableImport(\"0\", \"env\", \"table\");\r\n      if (!functionTableSize) module.addTableExport(\"0\", \"table\");\r\n    }\r\n\r\n    return module;\r\n  }\r\n\r\n  // sources\r\n\r\n  compileSourceByPath(normalizedPathWithoutExtension: string, reportNode: Node): void {\r\n    var sources = this.program.sources;\r\n\r\n    // try file.ts\r\n    var expected = normalizedPathWithoutExtension + \".ts\";\r\n    for (let i = 0, k = sources.length; i < k; ++i) {\r\n      let source = sources[i];\r\n      if (source.normalizedPath == expected) {\r\n        this.compileSource(source);\r\n        return;\r\n      }\r\n    }\r\n\r\n    // try file/index.ts\r\n    expected = normalizedPathWithoutExtension + \"/index.ts\";\r\n    for (let i = 0, k = sources.length; i < k; ++i) {\r\n      let source = sources[i];\r\n      if (source.normalizedPath == expected) {\r\n        this.compileSource(source);\r\n        return;\r\n      }\r\n    }\r\n\r\n    // try ~lib/file.ts\r\n    expected = LIBRARY_PREFIX + normalizedPathWithoutExtension + \".ts\";\r\n    for (let i = 0, k = sources.length; i < k; ++i) {\r\n      let source = sources[i];\r\n      if (source.normalizedPath == expected) {\r\n        this.compileSource(source);\r\n        return;\r\n      }\r\n    }\r\n\r\n    this.error(\r\n      DiagnosticCode.File_0_not_found,\r\n      reportNode.range, normalizedPathWithoutExtension\r\n    );\r\n  }\r\n\r\n  compileSource(source: Source): void {\r\n    var files = this.files;\r\n    var normalizedPath = source.normalizedPath;\r\n    if (files.has(normalizedPath)) return;\r\n    files.add(normalizedPath);\r\n\r\n    // compile top-level statements\r\n    var noTreeShaking = this.options.noTreeShaking;\r\n    var isEntry = source.isEntry;\r\n    var startFunction = this.startFunction;\r\n    var startFunctionBody = this.startFunctionBody;\r\n    var statements = source.statements;\r\n    for (let i = 0, k = statements.length; i < k; ++i) {\r\n      let statement = statements[i];\r\n      switch (statement.kind) {\r\n        case NodeKind.CLASSDECLARATION: {\r\n          if (\r\n            (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) &&\r\n            !(<ClassDeclaration>statement).isGeneric\r\n          ) {\r\n            this.compileClassDeclaration(<ClassDeclaration>statement, []);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.ENUMDECLARATION: {\r\n          if (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) {\r\n            this.compileEnumDeclaration(<EnumDeclaration>statement);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.FUNCTIONDECLARATION: {\r\n          if (\r\n            (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) &&\r\n            !(<FunctionDeclaration>statement).isGeneric\r\n          ) {\r\n            this.compileFunctionDeclaration(<FunctionDeclaration>statement, []);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.IMPORT: {\r\n          this.compileSourceByPath(\r\n            (<ImportStatement>statement).normalizedPath,\r\n            (<ImportStatement>statement).path\r\n          );\r\n          break;\r\n        }\r\n        case NodeKind.NAMESPACEDECLARATION: {\r\n          if (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) {\r\n            this.compileNamespaceDeclaration(<NamespaceDeclaration>statement);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.VARIABLE: { // global, always compiled as initializers might have side effects\r\n          let variableInit = this.compileVariableStatement(<VariableStatement>statement);\r\n          if (variableInit) startFunctionBody.push(variableInit);\r\n          break;\r\n        }\r\n        case NodeKind.EXPORT: {\r\n          if ((<ExportStatement>statement).normalizedPath != null) {\r\n            this.compileSourceByPath(\r\n              <string>(<ExportStatement>statement).normalizedPath,\r\n              <StringLiteralExpression>(<ExportStatement>statement).path\r\n            );\r\n          }\r\n          if (noTreeShaking || isEntry) {\r\n            this.compileExportStatement(<ExportStatement>statement);\r\n          }\r\n          break;\r\n        }\r\n        default: { // otherwise a top-level statement that is part of the start function's body\r\n          let previousFunction = this.currentFunction;\r\n          this.currentFunction = startFunction;\r\n          startFunctionBody.push(this.compileStatement(statement));\r\n          this.currentFunction = previousFunction;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // globals\r\n\r\n  compileGlobalDeclaration(declaration: VariableDeclaration): Global | null {\r\n    // look up the initialized program element\r\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\r\n    assert(element.kind == ElementKind.GLOBAL);\r\n    if (!this.compileGlobal(<Global>element)) return null; // reports\r\n    return <Global>element;\r\n  }\r\n\r\n  compileGlobal(global: Global): bool {\r\n    if (global.is(CommonFlags.COMPILED) || global.is(CommonFlags.AMBIENT | CommonFlags.BUILTIN)) return true;\r\n    global.set(CommonFlags.COMPILED);   // ^ built-ins are compiled on use\r\n\r\n    var module = this.module;\r\n    var declaration = global.declaration;\r\n    var initExpr: ExpressionRef = 0;\r\n\r\n    if (global.type == Type.void) { // type is void if not yet resolved or not annotated\r\n      if (declaration) {\r\n\r\n        // resolve now if annotated\r\n        if (declaration.type) {\r\n          let resolvedType = this.program.resolveType(declaration.type); // reports\r\n          if (!resolvedType) return false;\r\n          if (resolvedType == Type.void) {\r\n            this.error(\r\n              DiagnosticCode.Type_expected,\r\n              declaration.type.range\r\n            );\r\n            return false;\r\n          }\r\n          global.type = resolvedType;\r\n\r\n        // infer from initializer if not annotated\r\n        } else if (declaration.initializer) { // infer type using void/NONE for literal inference\r\n          initExpr = this.compileExpression( // reports\r\n            declaration.initializer,\r\n            Type.void,\r\n            ConversionKind.NONE\r\n          );\r\n          if (this.currentType == Type.void) {\r\n            this.error(\r\n              DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n              declaration.initializer.range, this.currentType.toString(), \"<auto>\"\r\n            );\r\n            return false;\r\n          }\r\n          global.type = this.currentType;\r\n\r\n        // must either be annotated or have an initializer\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Type_expected,\r\n            declaration.name.range.atEnd\r\n          );\r\n          return false;\r\n        }\r\n      } else {\r\n        assert(false); // must have a declaration if 'void' (and thus resolved later on)\r\n      }\r\n    }\r\n\r\n    var nativeType = global.type.toNativeType();\r\n    var isConstant = global.isAny(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\r\n\r\n    // handle imports\r\n    if (global.is(CommonFlags.AMBIENT)) {\r\n\r\n      // constant global\r\n      if (isConstant) {\r\n        global.set(CommonFlags.MODULE_IMPORT);\r\n        module.addGlobalImport(\r\n          global.internalName,\r\n          global.namespace\r\n            ? global.namespace.simpleName\r\n            : \"env\",\r\n          global.simpleName,\r\n          nativeType\r\n        );\r\n        global.set(CommonFlags.COMPILED);\r\n        return true;\r\n\r\n      // importing mutable globals is not supported in the MVP\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          assert(declaration).range\r\n        );\r\n      }\r\n      return false;\r\n    }\r\n\r\n    // the MVP does not yet support initializer expressions other than constant values (and\r\n    // get_globals), hence such initializations must be performed in the start function for now.\r\n    var initializeInStart = false;\r\n\r\n    // inlined constant can be compiled as-is\r\n    if (global.is(CommonFlags.INLINED)) {\r\n      initExpr = this.compileInlineConstant(global, global.type, true);\r\n\r\n    } else {\r\n\r\n      // evaluate initializer if present\r\n      if (declaration && declaration.initializer) {\r\n        if (!initExpr) {\r\n          initExpr = this.compileExpression(declaration.initializer, global.type);\r\n        }\r\n\r\n        // check if the initializer is constant\r\n        if (_BinaryenExpressionGetId(initExpr) != ExpressionId.Const) {\r\n\r\n          // if a constant global, check if the initializer becomes constant after precompute\r\n          if (isConstant) {\r\n            initExpr = this.precomputeExpressionRef(initExpr);\r\n            if (_BinaryenExpressionGetId(initExpr) != ExpressionId.Const) {\r\n              this.warning(\r\n                DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\r\n                declaration.range\r\n              );\r\n              initializeInStart = true;\r\n            }\r\n          } else {\r\n            initializeInStart = true;\r\n          }\r\n        }\r\n\r\n      // initialize to zero if there's no initializer\r\n      } else {\r\n        initExpr = global.type.toNativeZero(module);\r\n      }\r\n    }\r\n\r\n    var internalName = global.internalName;\r\n\r\n    if (initializeInStart) { // initialize to mutable zero and set the actual value in start\r\n      module.addGlobal(internalName, nativeType, true, global.type.toNativeZero(module));\r\n      this.startFunctionBody.push(module.createSetGlobal(internalName, initExpr));\r\n\r\n    } else { // compile as-is\r\n\r\n      if (isConstant) {\r\n        let exprType = _BinaryenExpressionGetType(initExpr);\r\n        switch (exprType) {\r\n          case NativeType.I32: {\r\n            global.constantValueKind = ConstantValueKind.INTEGER;\r\n            global.constantIntegerValue = i64_new(_BinaryenConstGetValueI32(initExpr), 0);\r\n            break;\r\n          }\r\n          case NativeType.I64: {\r\n            global.constantValueKind = ConstantValueKind.INTEGER;\r\n            global.constantIntegerValue = i64_new(\r\n              _BinaryenConstGetValueI64Low(initExpr),\r\n              _BinaryenConstGetValueI64High(initExpr)\r\n            );\r\n            break;\r\n          }\r\n          case NativeType.F32: {\r\n            global.constantValueKind = ConstantValueKind.FLOAT;\r\n            global.constantFloatValue = _BinaryenConstGetValueF32(initExpr);\r\n            break;\r\n          }\r\n          case NativeType.F64: {\r\n            global.constantValueKind = ConstantValueKind.FLOAT;\r\n            global.constantFloatValue = _BinaryenConstGetValueF64(initExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              assert(global.declaration).range\r\n            );\r\n            global.constantValueKind = ConstantValueKind.INTEGER;\r\n            global.constantIntegerValue = i64_new(0);\r\n            break;\r\n          }\r\n        }\r\n        global.set(CommonFlags.INLINED); // inline the value from now on\r\n        if (declaration) {\r\n          if (declaration.isTopLevel) {    // but keep the element as it might be re-exported\r\n            module.addGlobal(internalName, nativeType, false, initExpr);\r\n          }\r\n          if (declaration.range.source.isEntry && declaration.isTopLevelExport) {\r\n            module.addGlobalExport(global.internalName, declaration.programLevelInternalName);\r\n          }\r\n        } else {\r\n          assert(false); // must have a declaration if constant\r\n        }\r\n\r\n      } else /* mutable */ {\r\n        module.addGlobal(internalName, nativeType, !isConstant, initExpr);\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  // enums\r\n\r\n  compileEnumDeclaration(declaration: EnumDeclaration): Enum | null {\r\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\r\n    assert(element.kind == ElementKind.ENUM);\r\n    if (!this.compileEnum(<Enum>element)) return null;\r\n    return <Enum>element;\r\n  }\r\n\r\n  compileEnum(element: Enum): bool {\r\n    if (element.is(CommonFlags.COMPILED)) return true;\r\n    element.set(CommonFlags.COMPILED);\r\n\r\n    var module = this.module;\r\n    this.currentEnum = element;\r\n    var previousValue: EnumValue | null = null;\r\n\r\n    if (element.members) {\r\n      for (let member of element.members.values()) {\r\n        if (member.kind != ElementKind.ENUMVALUE) continue; // happens if an enum is also a namespace\r\n        let initInStart = false;\r\n        let val = <EnumValue>member;\r\n        let valueDeclaration = val.declaration;\r\n        val.set(CommonFlags.COMPILED);\r\n        if (val.is(CommonFlags.INLINED)) {\r\n          if (element.declaration.isTopLevelExport) {\r\n            module.addGlobal(\r\n              val.internalName,\r\n              NativeType.I32,\r\n              false, // constant\r\n              module.createI32(val.constantValue)\r\n            );\r\n          }\r\n        } else {\r\n          let initExpr: ExpressionRef;\r\n          if (valueDeclaration.value) {\r\n            initExpr = this.compileExpression(<Expression>valueDeclaration.value, Type.i32);\r\n            if (_BinaryenExpressionGetId(initExpr) != ExpressionId.Const) {\r\n              initExpr = this.precomputeExpressionRef(initExpr);\r\n              if (_BinaryenExpressionGetId(initExpr) != ExpressionId.Const) {\r\n                if (element.is(CommonFlags.CONST)) {\r\n                  this.warning(\r\n                    DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\r\n                    valueDeclaration.range\r\n                  );\r\n                }\r\n                initInStart = true;\r\n              }\r\n            }\r\n          } else if (previousValue == null) {\r\n            initExpr = module.createI32(0);\r\n          } else if (previousValue.is(CommonFlags.INLINED)) {\r\n            initExpr = module.createI32(previousValue.constantValue + 1);\r\n          } else {\r\n            // in TypeScript this errors with TS1061, but actually we can do:\r\n            initExpr = module.createBinary(BinaryOp.AddI32,\r\n              module.createGetGlobal(previousValue.internalName, NativeType.I32),\r\n              module.createI32(1)\r\n            );\r\n            if (element.is(CommonFlags.CONST)) {\r\n              this.warning(\r\n                DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\r\n                valueDeclaration.range\r\n              );\r\n            }\r\n            initInStart = true;\r\n          }\r\n          if (initInStart) {\r\n            module.addGlobal(\r\n              val.internalName,\r\n              NativeType.I32,\r\n              true, // mutable\r\n              module.createI32(0)\r\n            );\r\n            this.startFunctionBody.push(module.createSetGlobal(val.internalName, initExpr));\r\n          } else {\r\n            module.addGlobal(val.internalName, NativeType.I32, false, initExpr);\r\n            if (_BinaryenExpressionGetType(initExpr) == NativeType.I32) {\r\n              val.constantValue = _BinaryenConstGetValueI32(initExpr);\r\n              val.set(CommonFlags.INLINED);\r\n            } else {\r\n              assert(false);\r\n              this.error(\r\n                DiagnosticCode.Operation_not_supported,\r\n                valueDeclaration.range\r\n              );\r\n              val.constantValue = 0;\r\n            }\r\n          }\r\n        }\r\n        previousValue = <EnumValue>val;\r\n\r\n        // export values if the enum is exported\r\n        if (element.declaration.range.source.isEntry && element.declaration.isTopLevelExport) {\r\n          if (member.is(CommonFlags.INLINED)) {\r\n            module.addGlobalExport(member.internalName, member.internalName);\r\n          } else if (valueDeclaration) {\r\n            this.warning(\r\n              DiagnosticCode.Cannot_export_a_mutable_global,\r\n              valueDeclaration.range\r\n            );\r\n          }\r\n        }\r\n      }\r\n    }\r\n    this.currentEnum = null;\r\n    return true;\r\n  }\r\n\r\n  // functions\r\n\r\n  /** Compiles a top-level function given its declaration. */\r\n  compileFunctionDeclaration(\r\n    declaration: FunctionDeclaration,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> | null = null\r\n  ): Function | null {\r\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\r\n    assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n    return this.compileFunctionUsingTypeArguments( // reports\r\n      <FunctionPrototype>element,\r\n      typeArguments,\r\n      contextualTypeArguments,\r\n      null, // no outer scope (is top level)\r\n      (<FunctionPrototype>element).declaration.name\r\n    );\r\n  }\r\n\r\n  /** Resolves the specified type arguments prior to compiling the resulting function instance. */\r\n  compileFunctionUsingTypeArguments(\r\n    prototype: FunctionPrototype,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> | null,\r\n    outerScope: Flow | null,\r\n    reportNode: Node\r\n  ): Function | null {\r\n    var instance = prototype.resolveUsingTypeArguments( // reports\r\n      typeArguments,\r\n      contextualTypeArguments,\r\n      reportNode\r\n    );\r\n    if (!instance) return null;\r\n    instance.outerScope = outerScope;\r\n    if (!this.compileFunction(instance)) return null;\r\n    return instance;\r\n  }\r\n\r\n  /** Either reuses or creates the function type matching the specified signature. */\r\n  private ensureFunctionType(signature: Signature): FunctionTypeRef {\r\n    var parameters = signature.parameterTypes;\r\n    var numParameters = parameters.length;\r\n    var thisType = signature.thisType;\r\n    var paramTypes: NativeType[];\r\n    var index = 0;\r\n    if (thisType) {\r\n      paramTypes = new Array(1 + numParameters);\r\n      paramTypes[0] = thisType.toNativeType();\r\n      index = 1;\r\n    } else {\r\n      paramTypes = new Array(numParameters);\r\n    }\r\n    for (let i = 0; i < numParameters; ++i, ++index) {\r\n      paramTypes[index] = signature.parameterTypes[i].toNativeType();\r\n    }\r\n    var resultType = signature.returnType.toNativeType();\r\n    var module = this.module;\r\n    var typeRef = module.getFunctionTypeBySignature(resultType, paramTypes);\r\n    if (!typeRef) {\r\n      typeRef = module.addFunctionType(signature.toSignatureString(), resultType, paramTypes);\r\n    }\r\n    return typeRef;\r\n  }\r\n\r\n  /** Compiles a readily resolved function instance. */\r\n  compileFunction(instance: Function): bool {\r\n    if (instance.is(CommonFlags.COMPILED)) return true;\r\n    assert(!instance.is(CommonFlags.AMBIENT | CommonFlags.BUILTIN) || instance.internalName == \"abort\");\r\n    instance.set(CommonFlags.COMPILED);\r\n\r\n    // check that modifiers are matching but still compile as-is\r\n    var declaration = instance.prototype.declaration;\r\n    var body = declaration.body;\r\n    if (body) {\r\n      if (instance.is(CommonFlags.AMBIENT)) {\r\n        this.error(\r\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\r\n          declaration.name.range\r\n        );\r\n      }\r\n    } else {\r\n      if (!instance.is(CommonFlags.AMBIENT)) {\r\n        this.error(\r\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n          declaration.name.range\r\n        );\r\n      }\r\n    }\r\n\r\n    var ref: FunctionRef;\r\n    var typeRef = this.ensureFunctionType(instance.signature);\r\n    var module = this.module;\r\n    if (body) {\r\n      let isConstructor = instance.is(CommonFlags.CONSTRUCTOR);\r\n      let returnType: Type = instance.signature.returnType;\r\n\r\n      // compile body\r\n      let previousFunction = this.currentFunction;\r\n      this.currentFunction = instance;\r\n      let flow = instance.flow;\r\n      let stmt: ExpressionRef;\r\n      if (body.kind == NodeKind.EXPRESSION) { // () => expression\r\n        assert(!instance.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.GET | CommonFlags.SET));\r\n        assert(instance.is(CommonFlags.ARROW));\r\n        stmt = this.compileExpression((<ExpressionStatement>body).expression, returnType);\r\n        flow.set(FlowFlags.RETURNS);\r\n      } else {\r\n        assert(body.kind == NodeKind.BLOCK);\r\n        stmt = this.compileStatement(body);\r\n        flow.finalize();\r\n        if (isConstructor) {\r\n          let nativeSizeType = this.options.nativeSizeType;\r\n          assert(instance.is(CommonFlags.INSTANCE));\r\n\r\n          // implicitly return `this` if the constructor doesn't always return on its own\r\n          if (!flow.is(FlowFlags.RETURNS)) {\r\n\r\n            // if all branches are guaranteed to allocate, skip the final conditional allocation\r\n            if (flow.is(FlowFlags.ALLOCATES)) {\r\n              stmt = module.createBlock(null, [\r\n                stmt,\r\n                module.createGetLocal(0, nativeSizeType)\r\n              ], nativeSizeType);\r\n\r\n            // if not all branches are guaranteed to allocate, also append a conditional allocation\r\n            } else {\r\n              let parent = assert(instance.memberOf);\r\n              assert(parent.kind == ElementKind.CLASS);\r\n              stmt = module.createBlock(null, [\r\n                stmt,\r\n                module.createTeeLocal(0,\r\n                  makeConditionalAllocate(this, <Class>parent, declaration.name)\r\n                )\r\n              ], nativeSizeType);\r\n            }\r\n          }\r\n\r\n        // make sure all branches return\r\n        } else if (returnType != Type.void && !flow.is(FlowFlags.RETURNS)) {\r\n          this.error(\r\n            DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\r\n            declaration.signature.returnType.range\r\n          );\r\n        }\r\n      }\r\n      this.currentFunction = previousFunction;\r\n\r\n      // create the function\r\n      ref = module.addFunction(\r\n        instance.internalName,\r\n        typeRef,\r\n        typesToNativeTypes(instance.additionalLocals),\r\n        stmt\r\n      );\r\n\r\n    } else {\r\n      instance.set(CommonFlags.MODULE_IMPORT);\r\n\r\n      // create the function import\r\n      let namespace = instance.prototype.namespace;\r\n      ref = module.addFunctionImport(\r\n        instance.internalName,\r\n        namespace\r\n          ? namespace.simpleName\r\n          : \"env\",\r\n        instance.simpleName,\r\n        typeRef\r\n      );\r\n    }\r\n\r\n    // check module-level export\r\n    if (declaration.range.source.isEntry && declaration.isTopLevelExport) {\r\n      module.addFunctionExport(instance.internalName, declaration.name.text);\r\n    }\r\n\r\n    instance.finalize(module, ref);\r\n    return true;\r\n  }\r\n\r\n  // namespaces\r\n\r\n  compileNamespaceDeclaration(declaration: NamespaceDeclaration): void {\r\n    var members = declaration.members;\r\n    var noTreeShaking = this.options.noTreeShaking;\r\n    for (let i = 0, k = members.length; i < k; ++i) {\r\n      let member = members[i];\r\n      switch (member.kind) {\r\n        case NodeKind.CLASSDECLARATION: {\r\n          if (\r\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\r\n            !(<ClassDeclaration>member).isGeneric\r\n          ) {\r\n            this.compileClassDeclaration(<ClassDeclaration>member, []);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.INTERFACEDECLARATION: {\r\n          if (\r\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\r\n            !(<InterfaceDeclaration>member).isGeneric\r\n          ) {\r\n            this.compileInterfaceDeclaration(<InterfaceDeclaration>member, []);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.ENUMDECLARATION: {\r\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\r\n            this.compileEnumDeclaration(<EnumDeclaration>member);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.FUNCTIONDECLARATION: {\r\n          if (\r\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\r\n            !(<FunctionDeclaration>member).isGeneric\r\n          ) {\r\n            this.compileFunctionDeclaration(<FunctionDeclaration>member, []);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.NAMESPACEDECLARATION: {\r\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\r\n            this.compileNamespaceDeclaration(<NamespaceDeclaration>member);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.VARIABLE: {\r\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\r\n            let variableInit = this.compileVariableStatement(<VariableStatement>member, true);\r\n            if (variableInit) this.startFunctionBody.push(variableInit);\r\n          }\r\n          break;\r\n        }\r\n        default: {\r\n          assert(false);\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            member.range\r\n          );\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  compileNamespace(ns: Namespace): void {\r\n    if (!ns.members) return;\r\n\r\n    var noTreeShaking = this.options.noTreeShaking;\r\n    for (let element of ns.members.values()) {\r\n      switch (element.kind) {\r\n        case ElementKind.CLASS_PROTOTYPE: {\r\n          if (\r\n            (\r\n              noTreeShaking ||\r\n              (<ClassPrototype>element).is(CommonFlags.EXPORT)\r\n            ) && !(<ClassPrototype>element).is(CommonFlags.GENERIC)\r\n          ) {\r\n            this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.ENUM: {\r\n          this.compileEnum(<Enum>element);\r\n          break;\r\n        }\r\n        case ElementKind.FUNCTION_PROTOTYPE: {\r\n          if (\r\n            (\r\n              noTreeShaking || (<FunctionPrototype>element).is(CommonFlags.EXPORT)\r\n            ) && !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\r\n          ) {\r\n            this.compileFunctionUsingTypeArguments(\r\n              <FunctionPrototype>element,\r\n              [],\r\n              null, // no contextual type arguments\r\n              null, // no outer scope\r\n              (<FunctionPrototype>element).declaration.name\r\n            );\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.GLOBAL: {\r\n          this.compileGlobal(<Global>element);\r\n          break;\r\n        }\r\n        case ElementKind.NAMESPACE: {\r\n          this.compileNamespace(<Namespace>element);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // exports\r\n\r\n  compileExportStatement(statement: ExportStatement): void {\r\n    var module = this.module;\r\n    var exports = this.program.fileLevelExports;\r\n    var members = statement.members;\r\n    for (let i = 0, k = members.length; i < k; ++i) {\r\n      let member = members[i];\r\n      let internalExportName = (\r\n        statement.range.source.internalPath +\r\n        PATH_DELIMITER +\r\n        member.externalName.text\r\n      );\r\n      let element = exports.get(internalExportName);\r\n      if (!element) continue; // reported in Program#initialize\r\n      switch (element.kind) {\r\n        case ElementKind.CLASS_PROTOTYPE: {\r\n          if (!(<ClassPrototype>element).is(CommonFlags.GENERIC)) {\r\n            this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.ENUM: {\r\n          this.compileEnum(<Enum>element);\r\n          break;\r\n        }\r\n        case ElementKind.FUNCTION_PROTOTYPE: {\r\n          if (\r\n            !(<FunctionPrototype>element).is(CommonFlags.GENERIC) &&\r\n            statement.range.source.isEntry\r\n          ) {\r\n            let functionInstance = this.compileFunctionUsingTypeArguments(\r\n              <FunctionPrototype>element,\r\n              [],\r\n              null, // no contextual type arguments\r\n              null, // no outer scope\r\n              (<FunctionPrototype>element).declaration.name\r\n            );\r\n            if (functionInstance) {\r\n              let functionDeclaration = functionInstance.prototype.declaration;\r\n              if (functionDeclaration && functionDeclaration.needsExplicitExport(member)) {\r\n                module.addFunctionExport(functionInstance.internalName, member.externalName.text);\r\n              }\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.GLOBAL: {\r\n          if (this.compileGlobal(<Global>element) && statement.range.source.isEntry) {\r\n            let globalDeclaration = (<Global>element).declaration;\r\n            if (globalDeclaration && globalDeclaration.needsExplicitExport(member)) {\r\n              if ((<Global>element).is(CommonFlags.INLINED)) {\r\n                module.addGlobalExport(element.internalName, member.externalName.text);\r\n              } else {\r\n                this.warning(\r\n                  DiagnosticCode.Cannot_export_a_mutable_global,\r\n                  member.range\r\n                );\r\n              }\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.NAMESPACE: {\r\n          this.compileNamespace(<Namespace>element);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // classes\r\n\r\n  compileClassDeclaration(\r\n    declaration: ClassDeclaration,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    alternativeReportNode: Node | null = null\r\n  ): void {\r\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\r\n    assert(element.kind == ElementKind.CLASS_PROTOTYPE);\r\n    this.compileClassUsingTypeArguments(\r\n      <ClassPrototype>element,\r\n      typeArguments,\r\n      contextualTypeArguments,\r\n      alternativeReportNode\r\n    );\r\n  }\r\n\r\n  compileClassUsingTypeArguments(\r\n    prototype: ClassPrototype,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    alternativeReportNode: Node | null = null\r\n  ): void {\r\n    var instance = prototype.resolveUsingTypeArguments( // reports\r\n      typeArguments,\r\n      contextualTypeArguments,\r\n      alternativeReportNode\r\n    );\r\n    if (!instance) return;\r\n    this.compileClass(instance);\r\n  }\r\n\r\n  compileClass(instance: Class): bool {\r\n    if (instance.is(CommonFlags.COMPILED)) return true;\r\n    instance.set(CommonFlags.COMPILED);\r\n    return true;\r\n  }\r\n\r\n  compileInterfaceDeclaration(\r\n    declaration: InterfaceDeclaration,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    alternativeReportNode: Node | null = null\r\n  ): void {\r\n    // TODO\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      declaration.range\r\n    );\r\n  }\r\n\r\n  // memory\r\n\r\n  /** Adds a static memory segment with the specified data. */\r\n  addMemorySegment(buffer: Uint8Array, alignment: i32 = 8): MemorySegment {\r\n    var memoryOffset = i64_align(this.memoryOffset, alignment);\r\n    var segment = MemorySegment.create(buffer, memoryOffset);\r\n    this.memorySegments.push(segment);\r\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length, 0));\r\n    return segment;\r\n  }\r\n\r\n  // function table\r\n\r\n  /** Ensures that a table entry exists for the specified function and returns its index. */\r\n  ensureFunctionTableEntry(func: Function): i32 {\r\n    assert(func.is(CommonFlags.COMPILED));\r\n    if (func.functionTableIndex >= 0) {\r\n      return func.functionTableIndex;\r\n    }\r\n    var functionTable = this.functionTable;\r\n    var index = functionTable.length;\r\n    if (!func.is(CommonFlags.TRAMPOLINE) && func.signature.requiredParameters < func.signature.parameterTypes.length) {\r\n      // insert the trampoline if the function has optional parameters\r\n      func = this.ensureTrampoline(func);\r\n    }\r\n    functionTable.push(func);\r\n    func.functionTableIndex = index;\r\n    return index;\r\n  }\r\n\r\n  // statements\r\n\r\n  compileStatement(statement: Statement): ExpressionRef {\r\n    var module = this.module;\r\n    var expr: ExpressionRef;\r\n    switch (statement.kind) {\r\n      case NodeKind.BLOCK: {\r\n        expr = this.compileBlockStatement(<BlockStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.BREAK: {\r\n        expr = this.compileBreakStatement(<BreakStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.CONTINUE: {\r\n        expr = this.compileContinueStatement(<ContinueStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.DO: {\r\n        expr = this.compileDoStatement(<DoStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.EMPTY: {\r\n        expr = this.compileEmptyStatement(<EmptyStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.EXPRESSION: {\r\n        expr = this.compileExpressionStatement(<ExpressionStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.FOR: {\r\n        expr = this.compileForStatement(<ForStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.IF: {\r\n        expr = this.compileIfStatement(<IfStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.RETURN: {\r\n        expr = this.compileReturnStatement(<ReturnStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.SWITCH: {\r\n        expr = this.compileSwitchStatement(<SwitchStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.THROW: {\r\n        expr = this.compileThrowStatement(<ThrowStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.TRY: {\r\n        expr = this.compileTryStatement(<TryStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.VARIABLE: {\r\n        expr = this.compileVariableStatement(<VariableStatement>statement);\r\n        if (!expr) expr = module.createNop();\r\n        break;\r\n      }\r\n      case NodeKind.VOID: {\r\n        expr = this.compileVoidStatement(<VoidStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.WHILE: {\r\n        expr = this.compileWhileStatement(<WhileStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.TYPEDECLARATION: {\r\n        // type declarations must be top-level because function bodies are evaluated when\r\n        // reachaable only.\r\n        if (this.currentFunction == this.startFunction) {\r\n          return module.createNop();\r\n        }\r\n        // otherwise fall-through\r\n      }\r\n      default: {\r\n        assert(false);\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          statement.range\r\n        );\r\n        expr = module.createUnreachable();\r\n        break;\r\n      }\r\n    }\r\n    if (this.options.sourceMap) {\r\n      addDebugLocation(expr, statement.range, module, this.currentFunction);\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  compileStatements(statements: Statement[]): ExpressionRef[] {\r\n    var numStatements = statements.length;\r\n    var stmts = new Array<ExpressionRef>(numStatements);\r\n    for (let i = 0; i < numStatements; ++i) {\r\n      stmts[i] = this.compileStatement(statements[i]);\r\n    }\r\n    return stmts; // array of 0-es in noEmit-mode\r\n  }\r\n\r\n  compileBlockStatement(statement: BlockStatement): ExpressionRef {\r\n    var statements = statement.statements;\r\n\r\n    // NOTE that we could optimize this to a NOP if empty or unwrap a single\r\n    // statement, but that's not what the source told us to do and left to the\r\n    // optimizer.\r\n\r\n    // Not actually a branch, but can contain its own scoped variables.\r\n    var flow = this.currentFunction.flow.enterBranchOrScope();\r\n    this.currentFunction.flow = flow;\r\n\r\n    var stmt = this.module.createBlock(null, this.compileStatements(statements), NativeType.None);\r\n    var stmtReturns = flow.is(FlowFlags.RETURNS);\r\n    var stmtThrows = flow.is(FlowFlags.THROWS);\r\n    var stmtAllocates = flow.is(FlowFlags.ALLOCATES);\r\n\r\n    // Switch back to the parent flow\r\n    flow = flow.leaveBranchOrScope();\r\n    this.currentFunction.flow = flow;\r\n    if (stmtReturns) flow.set(FlowFlags.RETURNS);\r\n    if (stmtThrows) flow.set(FlowFlags.THROWS);\r\n    if (stmtAllocates) flow.set(FlowFlags.ALLOCATES);\r\n    return stmt;\r\n  }\r\n\r\n  compileBreakStatement(statement: BreakStatement): ExpressionRef {\r\n    var module = this.module;\r\n    if (statement.label) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        statement.label.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    var flow = this.currentFunction.flow;\r\n    var breakLabel = flow.breakLabel;\r\n    if (breakLabel == null) {\r\n      this.error(\r\n        DiagnosticCode.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement,\r\n        statement.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    flow.set(FlowFlags.BREAKS);\r\n    return module.createBreak(breakLabel);\r\n  }\r\n\r\n  compileContinueStatement(statement: ContinueStatement): ExpressionRef {\r\n    var module = this.module;\r\n    var label = statement.label;\r\n    if (label) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        label.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    // Check if 'continue' is allowed here\r\n    var flow = this.currentFunction.flow;\r\n    var continueLabel = flow.continueLabel;\r\n    if (continueLabel == null) {\r\n      this.error(\r\n        DiagnosticCode.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement,\r\n        statement.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    flow.set(FlowFlags.CONTINUES);\r\n    return module.createBreak(continueLabel);\r\n  }\r\n\r\n  compileDoStatement(statement: DoStatement): ExpressionRef {\r\n\r\n    // A do statement does not initiate a new branch because it is executed at\r\n    // least once, but has its own break and continue labels.\r\n    var currentFunction = this.currentFunction;\r\n    var label = currentFunction.enterBreakContext();\r\n    var flow = currentFunction.flow;\r\n    var previousBreakLabel = flow.breakLabel;\r\n    var previousContinueLabel = flow.continueLabel;\r\n\r\n    var breakLabel = \"break|\" + label;\r\n    flow.breakLabel = breakLabel;\r\n    var continueLabel = \"continue|\" + label;\r\n    flow.continueLabel = continueLabel;\r\n\r\n    var body = this.compileStatement(statement.statement);\r\n\r\n    // Reset to the previous break and continue labels, if any.\r\n    flow.breakLabel = previousBreakLabel;\r\n    flow.continueLabel = previousContinueLabel;\r\n\r\n    var module = this.module;\r\n    var condExpr = makeIsTrueish(\r\n      this.compileExpression(statement.condition, Type.i32, ConversionKind.NONE),\r\n      this.currentType,\r\n      module\r\n    );\r\n\r\n    // No need to eliminate the condition in generic contexts as the statement is executed anyway.\r\n\r\n    this.currentFunction.leaveBreakContext();\r\n\r\n    return module.createBlock(breakLabel, [\r\n      module.createLoop(continueLabel,\r\n        module.createBlock(null, [\r\n          body,\r\n          module.createBreak(continueLabel, condExpr)\r\n        ], NativeType.None))\r\n    ], NativeType.None);\r\n  }\r\n\r\n  compileEmptyStatement(statement: EmptyStatement): ExpressionRef {\r\n    return this.module.createNop();\r\n  }\r\n\r\n  compileExpressionStatement(statement: ExpressionStatement): ExpressionRef {\r\n    var expr = this.compileExpression(statement.expression, Type.void, ConversionKind.NONE);\r\n    if (this.currentType != Type.void) {\r\n      expr = this.module.createDrop(expr);\r\n      this.currentType = Type.void;\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  compileForStatement(statement: ForStatement): ExpressionRef {\r\n\r\n    // A for statement initiates a new branch with its own scoped variables\r\n    // possibly declared in its initializer, and break context.\r\n    var currentFunction = this.currentFunction;\r\n    var context = currentFunction.enterBreakContext();\r\n    var flow = currentFunction.flow.enterBranchOrScope();\r\n    currentFunction.flow = flow;\r\n    var breakLabel = flow.breakLabel = \"break|\" + context;\r\n    flow.breakLabel = breakLabel;\r\n    var continueLabel = \"continue|\" + context;\r\n    flow.continueLabel = continueLabel;\r\n\r\n    // Compile in correct order\r\n    var module = this.module;\r\n    var initializer = statement.initializer\r\n      ? this.compileStatement(<Statement>statement.initializer)\r\n      : module.createNop();\r\n    var condition = statement.condition\r\n      ? this.compileExpression(<Expression>statement.condition, Type.i32)\r\n      : module.createI32(1);\r\n    var incrementor = statement.incrementor\r\n      ? this.compileExpression(<Expression>statement.incrementor, Type.void)\r\n      : module.createNop();\r\n    var body = this.compileStatement(statement.statement);\r\n\r\n    var alwaysReturns = !statement.condition && flow.is(FlowFlags.RETURNS);\r\n    var alwaysThrows = !statement.condition && flow.is(FlowFlags.THROWS);\r\n    var alwaysAllocates = !statement.condition && flow.is(FlowFlags.ALLOCATES);\r\n    // TODO: check other always-true conditions as well, not just omitted\r\n\r\n    if (alwaysReturns) flow.set(FlowFlags.RETURNS);\r\n    if (alwaysThrows) flow.set(FlowFlags.THROWS);\r\n    if (alwaysAllocates) flow.set(FlowFlags.ALLOCATES);\r\n\r\n    // Switch back to the parent flow\r\n    currentFunction.flow = flow.leaveBranchOrScope();\r\n    currentFunction.leaveBreakContext();\r\n\r\n    var expr = module.createBlock(breakLabel, [\r\n      initializer,\r\n      module.createLoop(continueLabel, module.createBlock(null, [\r\n        module.createIf(condition, module.createBlock(null, [\r\n          body,\r\n          incrementor,\r\n          module.createBreak(continueLabel)\r\n        ], NativeType.None))\r\n      ], NativeType.None))\r\n    ], NativeType.None);\r\n\r\n    // If the loop is guaranteed to run and return, append a hint\r\n    if (alwaysReturns || alwaysThrows) {\r\n      expr = module.createBlock(null, [\r\n        expr,\r\n        module.createUnreachable()\r\n      ]);\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  compileIfStatement(statement: IfStatement): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n    var ifTrue = statement.ifTrue;\r\n    var ifFalse = statement.ifFalse;\r\n\r\n    // The condition doesn't initiate a branch yet\r\n    var condExpr = makeIsTrueish(\r\n      this.compileExpression(statement.condition, Type.i32, ConversionKind.NONE),\r\n      this.currentType,\r\n      module\r\n    );\r\n\r\n    // Eliminate unnecesssary branches in generic contexts if the condition is constant\r\n    if (\r\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT) &&\r\n      _BinaryenExpressionGetId(condExpr = this.precomputeExpressionRef(condExpr)) == ExpressionId.Const &&\r\n      _BinaryenExpressionGetType(condExpr) == NativeType.I32\r\n    ) {\r\n      let ret: ExpressionRef;\r\n      if (_BinaryenConstGetValueI32(condExpr)) {\r\n        ret = this.compileStatement(ifTrue);\r\n      } else if (ifFalse) {\r\n        ret = this.compileStatement(ifFalse);\r\n      } else {\r\n        ret = module.createNop();\r\n      }\r\n      return ret;\r\n    }\r\n\r\n    // Each arm initiates a branch\r\n    var flow = currentFunction.flow.enterBranchOrScope();\r\n    currentFunction.flow = flow;\r\n    var ifTrueExpr = this.compileStatement(ifTrue);\r\n    var ifTrueReturns = flow.is(FlowFlags.RETURNS);\r\n    var ifTrueThrows = flow.is(FlowFlags.THROWS);\r\n    var ifTrueAllocates = flow.is(FlowFlags.ALLOCATES);\r\n    flow = flow.leaveBranchOrScope();\r\n    currentFunction.flow = flow;\r\n\r\n    var ifFalseExpr: ExpressionRef = 0;\r\n    var ifFalseReturns = false;\r\n    var ifFalseThrows = false;\r\n    var ifFalseAllocates = false;\r\n    if (ifFalse) {\r\n      flow = flow.enterBranchOrScope();\r\n      currentFunction.flow = flow;\r\n      ifFalseExpr = this.compileStatement(ifFalse);\r\n      ifFalseReturns = flow.is(FlowFlags.RETURNS);\r\n      ifFalseThrows = flow.is(FlowFlags.THROWS);\r\n      ifFalseAllocates = flow.is(FlowFlags.ALLOCATES);\r\n      flow = flow.leaveBranchOrScope();\r\n      currentFunction.flow = flow;\r\n    }\r\n\r\n    if (ifTrueReturns && ifFalseReturns) flow.set(FlowFlags.RETURNS);\r\n    if (ifTrueThrows && ifFalseThrows) flow.set(FlowFlags.THROWS);\r\n    if (ifTrueAllocates && ifFalseAllocates) flow.set(FlowFlags.ALLOCATES);\r\n\r\n    return module.createIf(condExpr, ifTrueExpr, ifFalseExpr);\r\n  }\r\n\r\n  compileReturnStatement(statement: ReturnStatement): ExpressionRef {\r\n    var currentFunction = this.currentFunction;\r\n    var expression: ExpressionRef = 0;\r\n    if (statement.value) {\r\n      expression = this.compileExpression(\r\n        statement.value,\r\n        currentFunction.signature.returnType\r\n      );\r\n    }\r\n\r\n    // Remember that this flow returns\r\n    currentFunction.flow.set(FlowFlags.RETURNS);\r\n\r\n    return this.module.createReturn(expression);\r\n  }\r\n\r\n  compileSwitchStatement(statement: SwitchStatement): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n\r\n    // Everything within a switch uses the same break context\r\n    var context = currentFunction.enterBreakContext();\r\n\r\n    // introduce a local for evaluating the condition (exactly once)\r\n    var tempLocal = currentFunction.getTempLocal(Type.u32);\r\n    var tempLocalIndex = tempLocal.index;\r\n    var cases = statement.cases;\r\n    var numCases = cases.length;\r\n\r\n    // Prepend initializer to inner block. Does not initiate a new branch, yet.\r\n    var breaks = new Array<ExpressionRef>(1 + numCases);\r\n    breaks[0] = module.createSetLocal( // initializer\r\n      tempLocalIndex,\r\n      this.compileExpression(statement.condition, Type.u32)\r\n    );\r\n\r\n    // make one br_if per (possibly dynamic) labeled case (binaryen optimizes to br_table where possible)\r\n    var breakIndex = 1;\r\n    var defaultIndex = -1;\r\n    for (let i = 0; i < numCases; ++i) {\r\n      let case_ = cases[i];\r\n      let label = case_.label;\r\n      if (label) {\r\n        breaks[breakIndex++] = module.createBreak(\"case\" + i.toString(10) + \"|\" + context,\r\n          module.createBinary(BinaryOp.EqI32,\r\n            module.createGetLocal(tempLocalIndex, NativeType.I32),\r\n            this.compileExpression(label, Type.i32)\r\n          )\r\n        );\r\n      } else {\r\n        defaultIndex = i;\r\n      }\r\n    }\r\n\r\n    currentFunction.freeTempLocal(tempLocal);\r\n\r\n    // otherwise br to default respectively out of the switch if there is no default case\r\n    breaks[breakIndex] = module.createBreak((defaultIndex >= 0\r\n        ? \"case\" + defaultIndex.toString(10)\r\n        : \"break\"\r\n      ) + \"|\" + context);\r\n\r\n    // nest blocks in order\r\n    var currentBlock = module.createBlock(\"case0|\" + context, breaks, NativeType.None);\r\n    var alwaysReturns = true;\r\n    var alwaysThrows = true;\r\n    var alwaysAllocates = true;\r\n    for (let i = 0; i < numCases; ++i) {\r\n      let case_ = cases[i];\r\n      let statements = case_.statements;\r\n      let numStatements = statements.length;\r\n      let body = new Array<ExpressionRef>(1 + numStatements);\r\n      body[0] = currentBlock;\r\n\r\n      // Each switch case initiates a new branch\r\n      let flow = currentFunction.flow.enterBranchOrScope();\r\n      currentFunction.flow = flow;\r\n      let breakLabel = \"break|\" + context;\r\n      flow.breakLabel = breakLabel;\r\n\r\n      let fallsThrough = i != numCases - 1;\r\n      let nextLabel = !fallsThrough ? breakLabel : \"case\" + (i + 1).toString(10) + \"|\" + context;\r\n      for (let j = 0; j < numStatements; ++j) {\r\n        body[j + 1] = this.compileStatement(statements[j]);\r\n      }\r\n      if (!(fallsThrough || flow.is(FlowFlags.RETURNS))) {\r\n        alwaysReturns = false; // ignore fall-throughs\r\n      }\r\n      if (!(fallsThrough || flow.is(FlowFlags.THROWS))) {\r\n        alwaysThrows = false;\r\n      }\r\n      if (!(fallsThrough || flow.is(FlowFlags.ALLOCATES))) {\r\n        alwaysAllocates = false;\r\n      }\r\n\r\n      // Switch back to the parent flow\r\n      currentFunction.flow = flow.leaveBranchOrScope();\r\n\r\n      currentBlock = module.createBlock(nextLabel, body, NativeType.None);\r\n    }\r\n    currentFunction.leaveBreakContext();\r\n\r\n    // If the switch has a default and always returns, propagate that\r\n    if (defaultIndex >= 0) {\r\n      let flow = currentFunction.flow;\r\n      if (alwaysReturns) flow.set(FlowFlags.RETURNS);\r\n      if (alwaysThrows) flow.set(FlowFlags.THROWS);\r\n      if (alwaysAllocates) flow.set(FlowFlags.ALLOCATES);\r\n    }\r\n    return currentBlock;\r\n  }\r\n\r\n  compileThrowStatement(statement: ThrowStatement): ExpressionRef {\r\n    var flow = this.currentFunction.flow;\r\n\r\n    // Remember that this branch throws\r\n    flow.set(FlowFlags.THROWS);\r\n\r\n    // FIXME: without try-catch it is safe to assume RETURNS as well for now\r\n    flow.set(FlowFlags.RETURNS);\r\n\r\n    // TODO: requires exception-handling spec.\r\n    return this.module.createUnreachable();\r\n  }\r\n\r\n  compileTryStatement(statement: TryStatement): ExpressionRef {\r\n    // TODO\r\n    // can't yet support something like: try { return ... } finally { ... }\r\n    // worthwhile to investigate lowering returns to block results (here)?\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      statement.range\r\n    );\r\n    return this.module.createUnreachable();\r\n  }\r\n\r\n  /**\r\n   * Compiles a variable statement. Returns `0` if an initializer is not\r\n   * necessary.\r\n   */\r\n  compileVariableStatement(statement: VariableStatement, isKnownGlobal: bool = false): ExpressionRef {\r\n    var program = this.program;\r\n    var currentFunction = this.currentFunction;\r\n    var declarations = statement.declarations;\r\n    var numDeclarations = declarations.length;\r\n\r\n    // top-level variables and constants become globals\r\n    if (isKnownGlobal || (\r\n      currentFunction == this.startFunction &&\r\n      statement.parent && statement.parent.kind == NodeKind.SOURCE\r\n    )) {\r\n      // NOTE that the above condition also covers top-level variables declared with 'let', even\r\n      // though such variables could also become start function locals if, and only if, not used\r\n      // within any function declared in the same source, which is unknown at this point. the only\r\n      // efficient way to deal with this would be to keep track of all occasions it is used and\r\n      // replace these instructions afterwards, dynamically. (TOOD: what about a Binaryen pass?)\r\n      for (let i = 0; i < numDeclarations; ++i) {\r\n        this.compileGlobalDeclaration(declarations[i]);\r\n      }\r\n      return 0;\r\n    }\r\n\r\n    // other variables become locals\r\n    var initializers = new Array<ExpressionRef>();\r\n    for (let i = 0; i < numDeclarations; ++i) {\r\n      let declaration = declarations[i];\r\n      let name = declaration.name.text;\r\n      let type: Type | null = null;\r\n      let init: ExpressionRef = 0;\r\n      if (declaration.type) {\r\n        type = program.resolveType( // reports\r\n          declaration.type,\r\n          currentFunction.contextualTypeArguments\r\n        );\r\n        if (!type) continue;\r\n        if (declaration.initializer) {\r\n          init = this.compileExpression(declaration.initializer, type); // reports\r\n        }\r\n      } else if (declaration.initializer) { // infer type using void/NONE for proper literal inference\r\n        init = this.compileExpression( // reports\r\n          declaration.initializer,\r\n          Type.void,\r\n          ConversionKind.NONE\r\n        );\r\n        if (this.currentType == Type.void) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n            declaration.range, this.currentType.toString(), \"<auto>\"\r\n          );\r\n          continue;\r\n        }\r\n        type = this.currentType;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          declaration.name.range.atEnd\r\n        );\r\n        continue;\r\n      }\r\n      let isInlined = false;\r\n      if (declaration.is(CommonFlags.CONST)) {\r\n        if (init) {\r\n          init = this.precomputeExpressionRef(init);\r\n          if (_BinaryenExpressionGetId(init) == ExpressionId.Const) {\r\n            let local = new Local(program, name, -1, type);\r\n            switch (_BinaryenExpressionGetType(init)) {\r\n              case NativeType.I32: {\r\n                local = local.withConstantIntegerValue(_BinaryenConstGetValueI32(init), 0);\r\n                break;\r\n              }\r\n              case NativeType.I64: {\r\n                local = local.withConstantIntegerValue(\r\n                  _BinaryenConstGetValueI64Low(init),\r\n                  _BinaryenConstGetValueI64High(init)\r\n                );\r\n                break;\r\n              }\r\n              case NativeType.F32: {\r\n                local = local.withConstantFloatValue(<f64>_BinaryenConstGetValueF32(init));\r\n                break;\r\n              }\r\n              case NativeType.F64: {\r\n                local = local.withConstantFloatValue(_BinaryenConstGetValueF64(init));\r\n                break;\r\n              }\r\n              default: {\r\n                assert(false);\r\n                this.error(\r\n                  DiagnosticCode.Operation_not_supported,\r\n                  declaration.range\r\n                );\r\n                return this.module.createUnreachable();\r\n              }\r\n            }\r\n            // Create a virtual local that doesn't actually exist in WebAssembly\r\n            let scopedLocals = currentFunction.flow.scopedLocals;\r\n            if (!scopedLocals) currentFunction.flow.scopedLocals = scopedLocals = new Map();\r\n            else if (scopedLocals.has(name)) {\r\n              this.error(\r\n                DiagnosticCode.Duplicate_identifier_0,\r\n                declaration.name.range, name\r\n              );\r\n              return this.module.createUnreachable();\r\n            }\r\n            scopedLocals.set(name, local);\r\n            isInlined = true;\r\n          } else {\r\n            this.warning(\r\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\r\n              declaration.range\r\n            );\r\n          }\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._const_declarations_must_be_initialized,\r\n            declaration.range\r\n          );\r\n        }\r\n      }\r\n      if (!isInlined) {\r\n        if (declaration.isAny(CommonFlags.LET | CommonFlags.CONST)) { // here: not top-level\r\n          currentFunction.flow.addScopedLocal(type, name, declaration); // reports\r\n        } else {\r\n          currentFunction.addLocal(type, name, declaration); // reports\r\n        }\r\n        if (init) {\r\n          initializers.push(this.compileAssignmentWithValue(declaration.name, init));\r\n        }\r\n      }\r\n    }\r\n    return initializers.length   // we can unwrap these here because the\r\n      ? initializers.length == 1 // source didn't tell us exactly what to do\r\n        ? initializers[0]\r\n        : this.module.createBlock(null, initializers, NativeType.None)\r\n      : 0;\r\n  }\r\n\r\n  compileVoidStatement(statement: VoidStatement): ExpressionRef {\r\n    return this.compileExpression(statement.expression, Type.void, ConversionKind.EXPLICIT, false);\r\n  }\r\n\r\n  compileWhileStatement(statement: WhileStatement): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    // The condition does not yet initialize a branch\r\n    var condExpr = makeIsTrueish(\r\n      this.compileExpression(statement.condition, Type.i32, ConversionKind.NONE),\r\n      this.currentType,\r\n      module\r\n    );\r\n\r\n    // Eliminate unnecesssary loops in generic contexts if the condition is constant\r\n    if (\r\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT) &&\r\n      _BinaryenExpressionGetId(condExpr = this.precomputeExpressionRef(condExpr)) == ExpressionId.Const &&\r\n      _BinaryenExpressionGetType(condExpr) == NativeType.I32\r\n    ) {\r\n      if (!_BinaryenConstGetValueI32(condExpr)) {\r\n        return module.createNop();\r\n      }\r\n    }\r\n\r\n    // Statements initiate a new branch with its own break context\r\n    var currentFunction = this.currentFunction;\r\n    var label = currentFunction.enterBreakContext();\r\n    var flow = currentFunction.flow.enterBranchOrScope();\r\n    currentFunction.flow = flow;\r\n    var breakLabel = \"break|\" + label;\r\n    flow.breakLabel = breakLabel;\r\n    var continueLabel = \"continue|\" + label;\r\n    flow.continueLabel = continueLabel;\r\n\r\n    var body = this.compileStatement(statement.statement);\r\n    var alwaysReturns = false; // CONDITION_IS_ALWAYS_TRUE && flow.is(FlowFlags.RETURNS);\r\n    // TODO: evaluate if condition is always true\r\n\r\n    // Switch back to the parent flow\r\n    currentFunction.flow = flow.leaveBranchOrScope();\r\n    currentFunction.leaveBreakContext();\r\n\r\n    var expr = module.createBlock(breakLabel, [\r\n      module.createLoop(continueLabel,\r\n        module.createIf(condExpr, module.createBlock(null, [\r\n          body,\r\n          module.createBreak(continueLabel)\r\n        ], NativeType.None))\r\n      )\r\n    ], NativeType.None);\r\n\r\n    // If the loop is guaranteed to run and return, propagate that and append a hint\r\n    if (alwaysReturns) {\r\n      expr = module.createBlock(null, [\r\n        expr,\r\n        module.createUnreachable()\r\n      ]);\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  // expressions\r\n\r\n  /**\r\n   * Compiles the value of an inlined constant element.\r\n   * @param retainType If true, the annotated type of the constant is retained. Otherwise, the value\r\n   *  is precomputed according to context.\r\n   */\r\n  compileInlineConstant(\r\n    element: VariableLikeElement,\r\n    contextualType: Type,\r\n    retainType: bool\r\n  ): ExpressionRef {\r\n    assert(element.is(CommonFlags.INLINED));\r\n    var type = element.type;\r\n    switch (\r\n      !retainType &&\r\n      type.is(TypeFlags.INTEGER) &&\r\n      contextualType.is(TypeFlags.INTEGER) &&\r\n      type.size < contextualType.size\r\n        ? (this.currentType = contextualType).kind // essentially precomputes a (sign-)extension\r\n        : (this.currentType = type).kind\r\n    ) {\r\n      case TypeKind.I8:\r\n      case TypeKind.I16: {\r\n        let shift = type.computeSmallIntegerShift(Type.i32);\r\n        return this.module.createI32(\r\n          element.constantValueKind == ConstantValueKind.INTEGER\r\n            ? i64_low(element.constantIntegerValue) << shift >> shift\r\n            : 0\r\n        );\r\n      }\r\n      case TypeKind.U8:\r\n      case TypeKind.U16:\r\n      case TypeKind.BOOL: {\r\n        let mask = element.type.computeSmallIntegerMask(Type.i32);\r\n        return this.module.createI32(\r\n          element.constantValueKind == ConstantValueKind.INTEGER\r\n            ? i64_low(element.constantIntegerValue) & mask\r\n            : 0\r\n        );\r\n      }\r\n      case TypeKind.I32:\r\n      case TypeKind.U32: {\r\n        return this.module.createI32(\r\n          element.constantValueKind == ConstantValueKind.INTEGER\r\n            ? i64_low(element.constantIntegerValue)\r\n            : 0\r\n        );\r\n      }\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: {\r\n        if (!element.program.options.isWasm64) {\r\n          return this.module.createI32(\r\n            element.constantValueKind == ConstantValueKind.INTEGER\r\n              ? i64_low(element.constantIntegerValue)\r\n              : 0\r\n          );\r\n        }\r\n        // fall-through\r\n      }\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: {\r\n        return element.constantValueKind == ConstantValueKind.INTEGER\r\n          ? this.module.createI64(\r\n              i64_low(element.constantIntegerValue),\r\n              i64_high(element.constantIntegerValue)\r\n            )\r\n          : this.module.createI64(0);\r\n      }\r\n      case TypeKind.F32: {\r\n        return this.module.createF32((<VariableLikeElement>element).constantFloatValue);\r\n      }\r\n      case TypeKind.F64: {\r\n        return this.module.createF64((<VariableLikeElement>element).constantFloatValue);\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return this.module.createUnreachable();\r\n      }\r\n    }\r\n  }\r\n\r\n  compileExpression(\r\n    expression: Expression,\r\n    contextualType: Type,\r\n    conversionKind: ConversionKind = ConversionKind.IMPLICIT,\r\n    wrapSmallIntegers: bool = true\r\n  ): ExpressionRef {\r\n    this.currentType = contextualType;\r\n\r\n    var expr: ExpressionRef;\r\n    switch (expression.kind) {\r\n      case NodeKind.ASSERTION: {\r\n        expr = this.compileAssertionExpression(<AssertionExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.BINARY: {\r\n        expr = this.compileBinaryExpression(<BinaryExpression>expression, contextualType, wrapSmallIntegers);\r\n        break;\r\n      }\r\n      case NodeKind.CALL: {\r\n        expr = this.compileCallExpression(<CallExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.COMMA: {\r\n        expr = this.compileCommaExpression(<CommaExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.ELEMENTACCESS: {\r\n        expr = this.compileElementAccessExpression(<ElementAccessExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.FUNCTION: {\r\n        expr = this.compileFunctionExpression(<FunctionExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.IDENTIFIER:\r\n      case NodeKind.FALSE:\r\n      case NodeKind.NULL:\r\n      case NodeKind.THIS:\r\n      case NodeKind.TRUE: {\r\n        expr = this.compileIdentifierExpression(\r\n          <IdentifierExpression>expression,\r\n          contextualType,\r\n          conversionKind == ConversionKind.NONE // retain type of inlined constants\r\n        );\r\n        break;\r\n      }\r\n      case NodeKind.LITERAL: {\r\n        expr = this.compileLiteralExpression(<LiteralExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.NEW: {\r\n        expr = this.compileNewExpression(<NewExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.PARENTHESIZED: {\r\n        expr = this.compileParenthesizedExpression(\r\n          <ParenthesizedExpression>expression,\r\n          contextualType,\r\n          wrapSmallIntegers\r\n        );\r\n        break;\r\n      }\r\n      case NodeKind.PROPERTYACCESS: {\r\n        expr = this.compilePropertyAccessExpression(\r\n          <PropertyAccessExpression>expression,\r\n          contextualType,\r\n          conversionKind == ConversionKind.NONE // retain type of inlined constants\r\n        );\r\n        break;\r\n      }\r\n      case NodeKind.TERNARY: {\r\n        expr = this.compileTernaryExpression(<TernaryExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.UNARYPOSTFIX: {\r\n        expr = this.compileUnaryPostfixExpression(<UnaryPostfixExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.UNARYPREFIX: {\r\n        expr = this.compileUnaryPrefixExpression(<UnaryPrefixExpression>expression, contextualType, wrapSmallIntegers);\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        expr = this.module.createUnreachable();\r\n        break;\r\n      }\r\n    }\r\n\r\n    var currentType = this.currentType;\r\n    if (conversionKind != ConversionKind.NONE && currentType != contextualType) {\r\n      expr = this.convertExpression(expr, currentType, contextualType, conversionKind, expression);\r\n      this.currentType = contextualType;\r\n    }\r\n\r\n    if (this.options.sourceMap) {\r\n      addDebugLocation(expr, expression.range, this.module, this.currentFunction);\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  compileExpressionRetainType(\r\n    expression: Expression,\r\n    contextualType: Type,\r\n    wrapSmallIntegers: bool = true\r\n  ): ExpressionRef {\r\n    return this.compileExpression(\r\n      expression,\r\n      contextualType == Type.void\r\n        ? Type.i32\r\n        : contextualType,\r\n      ConversionKind.NONE,\r\n      wrapSmallIntegers\r\n    );\r\n  }\r\n\r\n  precomputeExpression(\r\n    expression: Expression,\r\n    contextualType: Type,\r\n    conversionKind: ConversionKind = ConversionKind.IMPLICIT\r\n  ): ExpressionRef {\r\n    return this.precomputeExpressionRef(this.compileExpression(expression, contextualType, conversionKind));\r\n  }\r\n\r\n  precomputeExpressionRef(expr: ExpressionRef): ExpressionRef {\r\n    var module = this.module;\r\n    var type = this.currentType;\r\n    var nativeType = type.toNativeType();\r\n    var typeRef = module.getFunctionTypeBySignature(nativeType, null);\r\n    var typeRefAdded = false;\r\n    if (!typeRef) {\r\n      typeRef = module.addFunctionType(type.toSignatureString(), nativeType, null);\r\n      typeRefAdded = true;\r\n    }\r\n    var funcRef = module.addFunction(\"__precompute\", typeRef, null, expr);\r\n    module.runPasses([ \"precompute\" ], funcRef);\r\n    var ret = _BinaryenFunctionGetBody(funcRef);\r\n    module.removeFunction(\"__precompute\");\r\n    if (typeRefAdded) {\r\n      // TODO: also remove the function type somehow if no longer used or make the C-API accept\r\n      // a `null` typeRef, using an implicit type.\r\n    }\r\n    return ret;\r\n  }\r\n\r\n  convertExpression(\r\n    expr: ExpressionRef,\r\n    fromType: Type,\r\n    toType: Type,\r\n    conversionKind: ConversionKind,\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n    assert(conversionKind != ConversionKind.NONE);\r\n    var module = this.module;\r\n\r\n    // void to any\r\n    if (fromType.kind == TypeKind.VOID) {\r\n      assert(toType.kind != TypeKind.VOID); // convertExpression should not be called with void -> void\r\n      this.error(\r\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n        reportNode.range, fromType.toString(), toType.toString()\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n\r\n    // any to void\r\n    if (toType.kind == TypeKind.VOID) {\r\n      return module.createDrop(expr);\r\n    }\r\n\r\n    if (conversionKind == ConversionKind.IMPLICIT && !fromType.isAssignableTo(toType)) {\r\n      this.error(\r\n        DiagnosticCode.Conversion_from_type_0_to_1_requires_an_explicit_cast,\r\n        reportNode.range, fromType.toString(), toType.toString()\r\n      ); // recoverable\r\n    }\r\n\r\n    // TODO: make this a proper switch?\r\n    if (fromType.is(TypeFlags.FLOAT)) {\r\n\r\n      // float to float\r\n      if (toType.is(TypeFlags.FLOAT)) {\r\n        if (fromType.kind == TypeKind.F32) {\r\n\r\n          // f32 to f64\r\n          if (toType.kind == TypeKind.F64) {\r\n            expr = module.createUnary(UnaryOp.PromoteF32, expr);\r\n          }\r\n\r\n          // otherwise f32 to f32\r\n\r\n        // f64 to f32\r\n        } else if (toType.kind == TypeKind.F32) {\r\n          expr = module.createUnary(UnaryOp.DemoteF64, expr);\r\n        }\r\n\r\n        // otherwise f64 to f64\r\n\r\n      // float to int\r\n      } else if (toType.is(TypeFlags.INTEGER)) {\r\n\r\n        // f32 to int\r\n        if (fromType.kind == TypeKind.F32) {\r\n          if (toType.is(TypeFlags.SIGNED)) {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.createUnary(UnaryOp.TruncF32ToI64, expr);\r\n            } else {\r\n              expr = module.createUnary(UnaryOp.TruncF32ToI32, expr);\r\n              if (toType.is(TypeFlags.SMALL)) {\r\n                expr = makeSmallIntegerWrap(expr, toType, module);\r\n              }\r\n            }\r\n          } else {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.createUnary(UnaryOp.TruncF32ToU64, expr);\r\n            } else {\r\n              expr = module.createUnary(UnaryOp.TruncF32ToU32, expr);\r\n              if (toType.is(TypeFlags.SMALL)) {\r\n                expr = makeSmallIntegerWrap(expr, toType, module);\r\n              }\r\n            }\r\n          }\r\n\r\n        // f64 to int\r\n        } else {\r\n          if (toType.is(TypeFlags.SIGNED)) {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.createUnary(UnaryOp.TruncF64ToI64, expr);\r\n            } else {\r\n              expr = module.createUnary(UnaryOp.TruncF64ToI32, expr);\r\n              if (toType.is(TypeFlags.SMALL)) {\r\n                expr = makeSmallIntegerWrap(expr, toType, module);\r\n              }\r\n            }\r\n          } else {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.createUnary(UnaryOp.TruncF64ToU64, expr);\r\n            } else {\r\n              expr = module.createUnary(UnaryOp.TruncF64ToU32, expr);\r\n              if (toType.is(TypeFlags.SMALL)) {\r\n                expr = makeSmallIntegerWrap(expr, toType, module);\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n      // float to void\r\n      } else {\r\n        assert(toType.flags == TypeFlags.NONE, \"void type expected\");\r\n        expr = module.createDrop(expr);\r\n      }\r\n\r\n    // int to float\r\n    } else if (fromType.is(TypeFlags.INTEGER) && toType.is(TypeFlags.FLOAT)) {\r\n\r\n      // int to f32\r\n      if (toType.kind == TypeKind.F32) {\r\n        if (fromType.is(TypeFlags.LONG)) {\r\n          expr = module.createUnary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI64ToF32\r\n              : UnaryOp.ConvertU64ToF32,\r\n            expr\r\n          );\r\n        } else {\r\n          expr = module.createUnary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI32ToF32\r\n              : UnaryOp.ConvertU32ToF32,\r\n            expr\r\n          );\r\n        }\r\n\r\n      // int to f64\r\n      } else {\r\n        if (fromType.is(TypeFlags.LONG)) {\r\n          expr = module.createUnary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI64ToF64\r\n              : UnaryOp.ConvertU64ToF64,\r\n            expr\r\n          );\r\n        } else {\r\n          expr = module.createUnary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI32ToF64\r\n              : UnaryOp.ConvertU32ToF64,\r\n            expr\r\n          );\r\n        }\r\n      }\r\n\r\n    // int to int\r\n    } else {\r\n      if (fromType.is(TypeFlags.LONG)) {\r\n\r\n        // i64 to i32\r\n        if (!toType.is(TypeFlags.LONG)) {\r\n          expr = module.createUnary(UnaryOp.WrapI64, expr); // discards upper bits\r\n          if (toType.is(TypeFlags.SMALL)) {\r\n            expr = makeSmallIntegerWrap(expr, toType, module);\r\n          }\r\n        }\r\n\r\n      // i32 to i64\r\n      } else if (toType.is(TypeFlags.LONG)) {\r\n        expr = module.createUnary(toType.is(TypeFlags.SIGNED) ? UnaryOp.ExtendI32 : UnaryOp.ExtendU32, expr);\r\n\r\n      // i32 or smaller to even smaller or same size int with change of sign\r\n      } else if (\r\n        toType.is(TypeFlags.SMALL) &&\r\n        (\r\n          fromType.size > toType.size ||\r\n          (\r\n            fromType.size == toType.size &&\r\n            fromType.is(TypeFlags.SIGNED) != toType.is(TypeFlags.SIGNED)\r\n          )\r\n        )\r\n      ) {\r\n        expr = makeSmallIntegerWrap(expr, toType, module);\r\n      }\r\n\r\n      // otherwise (smaller) i32/u32 to (same size) i32/u32\r\n    }\r\n\r\n    this.currentType = toType;\r\n    return expr;\r\n  }\r\n\r\n  compileAssertionExpression(expression: AssertionExpression, contextualType: Type): ExpressionRef {\r\n    var toType = this.program.resolveType( // reports\r\n      expression.toType,\r\n      this.currentFunction.contextualTypeArguments\r\n    );\r\n    if (!toType) return this.module.createUnreachable();\r\n    return this.compileExpression(expression.expression, toType, ConversionKind.EXPLICIT);\r\n  }\r\n\r\n  private f32ModInstance: Function | null = null;\r\n  private f64ModInstance: Function | null = null;\r\n  private f32PowInstance: Function | null = null;\r\n  private f64PowInstance: Function | null = null;\r\n\r\n  compileBinaryExpression(\r\n    expression: BinaryExpression,\r\n    contextualType: Type,\r\n    wrapSmallIntegers: bool = true\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var left = expression.left;\r\n    var right = expression.right;\r\n\r\n    var leftExpr: ExpressionRef;\r\n    var leftType: Type;\r\n    var rightExpr: ExpressionRef;\r\n    var rightType: Type;\r\n    var commonType: Type | null;\r\n\r\n    var condExpr: ExpressionRef;\r\n    var expr: ExpressionRef;\r\n    var compound = false;\r\n    var possiblyOverflows = false;\r\n    var tempLocal: Local | null = null;\r\n\r\n    switch (expression.operator) {\r\n      case Token.LESSTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\r\n        leftType = this.currentType;\r\n        rightExpr = this.compileExpressionRetainType(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \"<\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.LtI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.LtI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LtI64\r\n                : BinaryOp.LtI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.LtU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: { // check operator overload\r\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n              let classInstance = assert(this.currentType.classReference);\r\n              let operatorName = classInstance.prototype.fnLessThan;\r\n              if (operatorName != null) {\r\n                expr = this.compileOperatorOverload(classInstance, operatorName, leftExpr, rightExpr);\r\n                break;\r\n              }\r\n            }\r\n            // fall-through\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LtU64\r\n                : BinaryOp.LtU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.LtU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.LtF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.LtF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\r\n        leftType = this.currentType;\r\n        rightExpr = this.compileExpressionRetainType(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \">\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.GtI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GtI64\r\n                : BinaryOp.GtI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.GtI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.GtU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: { // check operator overload\r\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n              let classInstance = assert(this.currentType.classReference);\r\n              let operatorName = classInstance.prototype.fnGreaterThan;\r\n              if (operatorName != null) {\r\n                expr = this.compileOperatorOverload(classInstance, operatorName, leftExpr, rightExpr);\r\n                break;\r\n              }\r\n            }\r\n            // fall-through\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GtU64\r\n                : BinaryOp.GtU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.GtU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.GtF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.GtF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.LESSTHAN_EQUALS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\r\n        leftType = this.currentType;\r\n        rightExpr = this.compileExpressionRetainType(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \"<=\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.LeI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LeI64\r\n                : BinaryOp.LeI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.LeI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.LeU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: { // check operator overload\r\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n              let classInstance = assert(this.currentType.classReference);\r\n              let operatorName = classInstance.prototype.fnLessThanEquals;\r\n              if (operatorName != null) {\r\n                expr = this.compileOperatorOverload(classInstance, operatorName, leftExpr, rightExpr);\r\n                break;\r\n              }\r\n            }\r\n            // fall-through\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LeU64\r\n                : BinaryOp.LeU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.LeU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.LeF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.LeF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN_EQUALS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\r\n        leftType = this.currentType;\r\n        rightExpr = this.compileExpressionRetainType(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \">=\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.GeI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GeI64\r\n                : BinaryOp.GeI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.GeI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.GeU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: { // check operator overload\r\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n              let classInstance = assert(this.currentType.classReference);\r\n              let operatorName = classInstance.prototype.fnGreaterThanEquals;\r\n              if (operatorName != null) {\r\n                expr = this.compileOperatorOverload(classInstance, operatorName, leftExpr, rightExpr);\r\n                break;\r\n              }\r\n            }\r\n            // fall-through\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GeU64\r\n                : BinaryOp.GeU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.GeU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.GeF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.GeF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n\r\n      case Token.EQUALS_EQUALS_EQUALS:\r\n        // TODO?\r\n      case Token.EQUALS_EQUALS: {\r\n\r\n        // NOTE that this favors correctness, in terms of emitting a binary expression, over\r\n        // checking for a possible use of unary EQZ. while the most classic of all optimizations,\r\n        // that's not what the source told us to do. for reference, `!left` emits unary EQZ.\r\n\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\r\n        leftType = this.currentType;\r\n        rightExpr = this.compileExpressionRetainType(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.EqI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: { // check operator overload\r\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n              let classInstance = assert(this.currentType.classReference);\r\n              let operatorName = classInstance.prototype.fnEquals;\r\n              if (operatorName != null) {\r\n                expr = this.compileOperatorOverload(classInstance, operatorName, leftExpr, rightExpr);\r\n                assert(this.currentType == Type.bool);\r\n                break;\r\n              }\r\n            }\r\n            // fall-through\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.EqI64\r\n                : BinaryOp.EqI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.EqI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.EqF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.EqF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.EXCLAMATION_EQUALS_EQUALS:\r\n        // TODO?\r\n      case Token.EXCLAMATION_EQUALS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\r\n        leftType = this.currentType;\r\n        rightExpr = this.compileExpressionRetainType(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.NeI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {// check operator overload\r\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n              let classInstance = assert(this.currentType.classReference);\r\n              let operatorName = classInstance.prototype.fnNotEquals;\r\n              if (operatorName != null) {\r\n                expr = this.compileOperatorOverload(classInstance, operatorName, leftExpr, rightExpr);\r\n                break;\r\n              }\r\n            }\r\n            // fall-through\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.NeI64\r\n                : BinaryOp.NeI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.NeI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.NeF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.NeF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.EQUALS: {\r\n        return this.compileAssignment(left, right, contextualType);\r\n      }\r\n      case Token.PLUS_EQUALS: compound = true;\r\n      case Token.PLUS: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          false // retains low bits of small integers\r\n        );\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(\r\n            right,\r\n            this.currentType,\r\n            ConversionKind.IMPLICIT,\r\n            false // ^\r\n          );\r\n        } else {\r\n          leftType = this.currentType;\r\n          rightExpr = this.compileExpressionRetainType(\r\n            right,\r\n            leftType,\r\n            false // ^\r\n          );\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n            rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"+\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true;\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.AddI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: { // check operator overload\r\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n              let classInstance = assert(this.currentType.classReference);\r\n              let operatorName = classInstance.prototype.fnConcat;\r\n              if (operatorName != null) {\r\n                expr = this.compileOperatorOverload(classInstance, operatorName, leftExpr, rightExpr);\r\n                break;\r\n              }\r\n            }\r\n            // fall-through\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.AddI64\r\n                : BinaryOp.AddI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.AddI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.AddF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.AddF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.MINUS_EQUALS: compound = true;\r\n      case Token.MINUS: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          false // retains low bits of small integers\r\n        );\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(\r\n            right,\r\n            this.currentType,\r\n            ConversionKind.IMPLICIT,\r\n            false // ^\r\n          );\r\n        } else {\r\n          leftType = this.currentType;\r\n          rightExpr = this.compileExpressionRetainType(\r\n            right,\r\n            leftType,\r\n            false // ^\r\n          );\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n            rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"-\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true;\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.SubI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: { // check operator overload\r\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n              let classInstance = assert(this.currentType.classReference);\r\n              let operatorName = classInstance.prototype.fnSubtract;\r\n              if (operatorName != null) {\r\n                expr = this.compileOperatorOverload(classInstance, operatorName, leftExpr, rightExpr);\r\n                break;\r\n              }\r\n            }\r\n            // fall-through\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.SubI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.SubF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.SubF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.ASTERISK_EQUALS: compound = true;\r\n      case Token.ASTERISK: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          false // retains low bits of small integers\r\n        );\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(\r\n            right,\r\n            this.currentType,\r\n            ConversionKind.IMPLICIT,\r\n            false // ^\r\n          );\r\n        } else {\r\n          leftType = this.currentType;\r\n          rightExpr = this.compileExpressionRetainType(\r\n            right,\r\n            leftType,\r\n            false // ^\r\n          );\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n            rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"*\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true;\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.MulI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: { // check operator overload\r\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n              let classInstance = assert(this.currentType.classReference);\r\n              let operatorName = classInstance.prototype.fnMultiply;\r\n              if (operatorName != null) {\r\n                expr = this.compileOperatorOverload(classInstance, operatorName, leftExpr, rightExpr);\r\n                break;\r\n              }\r\n            }\r\n            // fall-through\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.MulI64\r\n                : BinaryOp.MulI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.MulI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.MulF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.MulF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.ASTERISK_ASTERISK_EQUALS: compound = true;\r\n      case Token.ASTERISK_ASTERISK: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          true // must be wrapped\r\n        );\r\n        let instance: Function | null;\r\n\r\n        // Mathf.pow if lhs is f32 (result is f32)\r\n        if (this.currentType == Type.f32) {\r\n          rightExpr = this.compileExpression(\r\n            right,\r\n            this.currentType\r\n          );\r\n          if (!(instance = this.f32PowInstance)) {\r\n            let namespace = this.program.elementsLookup.get(\"Mathf\");\r\n            if (!namespace) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Mathf\"\r\n              );\r\n              expr = module.createUnreachable();\r\n              break;\r\n            }\r\n            let prototype = namespace.members ? namespace.members.get(\"pow\") : null;\r\n            if (!prototype) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Mathf.pow\"\r\n              );\r\n              expr = module.createUnreachable();\r\n              break;\r\n            }\r\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n            this.f32PowInstance = instance = (<FunctionPrototype>prototype).resolve();\r\n          }\r\n\r\n        // Math.pow otherwise (result is f64)\r\n        // TODO: should the result be converted back?\r\n        } else {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            this.currentType,\r\n            Type.f64,\r\n            ConversionKind.IMPLICIT,\r\n            left\r\n          );\r\n          rightExpr = this.compileExpression(\r\n            right,\r\n            Type.f64\r\n          );\r\n          if (!(instance = this.f64PowInstance)) {\r\n            let namespace = this.program.elementsLookup.get(\"Math\");\r\n            if (!namespace) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Math\"\r\n              );\r\n              expr = module.createUnreachable();\r\n              break;\r\n            }\r\n            let prototype = namespace.members ? namespace.members.get(\"pow\") : null;\r\n            if (!prototype) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Math.pow\"\r\n              );\r\n              expr = module.createUnreachable();\r\n              break;\r\n            }\r\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n            this.f64PowInstance = instance = (<FunctionPrototype>prototype).resolve();\r\n          }\r\n        }\r\n        if (!(instance && this.compileFunction(instance))) {\r\n          expr = module.createUnreachable();\r\n        } else {\r\n          expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\r\n        }\r\n        break;\r\n      }\r\n      case Token.SLASH_EQUALS: compound = true;\r\n      case Token.SLASH: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          true // TODO: when can division remain unwrapped? does it overflow?\r\n        );\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(\r\n            right,\r\n            this.currentType,\r\n            ConversionKind.IMPLICIT,\r\n            false // ^\r\n          );\r\n        } else {\r\n          leftType = this.currentType;\r\n          rightExpr = this.compileExpressionRetainType(\r\n            right,\r\n            leftType,\r\n            false // ^\r\n          );\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n            rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"/\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16: possiblyOverflows = true;\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.DivI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.DivI64\r\n                : BinaryOp.DivI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.DivI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true;\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.DivU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: { // check operator overload\r\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n              let classInstance = assert(this.currentType.classReference);\r\n              let operatorName = classInstance.prototype.fnDivide;\r\n              if (operatorName != null) {\r\n                expr = this.compileOperatorOverload(classInstance, operatorName, leftExpr, rightExpr);\r\n                break;\r\n              }\r\n            }\r\n            // fall-through\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.DivU64\r\n                : BinaryOp.DivU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.DivU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.DivF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.DivF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.PERCENT_EQUALS: compound = true;\r\n      case Token.PERCENT: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          true // TODO: when can remainder remain unwrapped? does it overflow?\r\n        );\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(\r\n            right,\r\n            this.currentType,\r\n            ConversionKind.IMPLICIT,\r\n            false // ^\r\n          );\r\n        } else {\r\n          leftType = this.currentType;\r\n          rightExpr = this.compileExpressionRetainType(\r\n            right,\r\n            leftType,\r\n            false // ^\r\n          );\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n            rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"%\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.RemI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.RemI64\r\n                : BinaryOp.RemI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.RemI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.RemU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: { // check operator overload\r\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n              let classInstance = assert(this.currentType.classReference);\r\n              let operatorName = classInstance.prototype.fnFractional;\r\n              if (operatorName != null) {\r\n                expr = this.compileOperatorOverload(classInstance, operatorName, leftExpr, rightExpr);\r\n                break;\r\n              }\r\n            }\r\n            // fall-through\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.RemU64\r\n                : BinaryOp.RemU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.RemU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            let instance = this.f32ModInstance;\r\n            if (!instance) {\r\n              let namespace = this.program.elementsLookup.get(\"Mathf\");\r\n              if (!namespace) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Mathf\"\r\n                );\r\n                expr = module.createUnreachable();\r\n                break;\r\n              }\r\n              let prototype = namespace.members ? namespace.members.get(\"mod\") : null;\r\n              if (!prototype) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Mathf.mod\"\r\n                );\r\n                expr = module.createUnreachable();\r\n                break;\r\n              }\r\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n              this.f32ModInstance = instance = (<FunctionPrototype>prototype).resolve();\r\n            }\r\n            if (!(instance && this.compileFunction(instance))) {\r\n              expr = module.createUnreachable();\r\n            } else {\r\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\r\n            }\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            let instance = this.f64ModInstance;\r\n            if (!instance) {\r\n              let namespace = this.program.elementsLookup.get(\"Math\");\r\n              if (!namespace) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Math\"\r\n                );\r\n                expr = module.createUnreachable();\r\n                break;\r\n              }\r\n              let prototype = namespace.members ? namespace.members.get(\"mod\") : null;\r\n              if (!prototype) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Math.mod\"\r\n                );\r\n                expr = module.createUnreachable();\r\n                break;\r\n              }\r\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n              this.f64ModInstance = instance = (<FunctionPrototype>prototype).resolve();\r\n            }\r\n            if (!(instance && this.compileFunction(instance))) {\r\n              expr = module.createUnreachable();\r\n            } else {\r\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\r\n            }\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.LESSTHAN_LESSTHAN_EQUALS: compound = true;\r\n      case Token.LESSTHAN_LESSTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          false // retains low bits of small integers\r\n        );\r\n        rightExpr = this.compileExpression(\r\n          right,\r\n          this.currentType,\r\n          ConversionKind.IMPLICIT,\r\n          false // ^\r\n        );\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true;\r\n          default: {\r\n            expr = module.createBinary(BinaryOp.ShlI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.ShlI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: // TODO: check operator overload\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShlI64\r\n                : BinaryOp.ShlI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          case TypeKind.VOID: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\r\n      case Token.GREATERTHAN_GREATERTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          true // must wrap small integers\r\n        );\r\n        rightExpr = this.compileExpression(\r\n          right,\r\n          this.currentType,\r\n          ConversionKind.IMPLICIT,\r\n          true // ^\r\n        );\r\n        switch (this.currentType.kind) {\r\n          default: {\r\n            // assumes signed shr on signed small integers does not overflow\r\n            expr = module.createBinary(BinaryOp.ShrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.ShrI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShrI64\r\n                : BinaryOp.ShrI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: // assumes unsigned shr on unsigned small integers does not overflow\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: { // TODO: check operator overload\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShrU64\r\n                : BinaryOp.ShrU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          case TypeKind.VOID: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\r\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          true // modifies low bits of small integers if unsigned\r\n        );\r\n        rightExpr = this.compileExpression(\r\n          right,\r\n          this.currentType,\r\n          ConversionKind.IMPLICIT,\r\n          true // ^\r\n        );\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16: possiblyOverflows = true;\r\n          default: {\r\n            // assumes that unsigned shr on unsigned small integers does not overflow\r\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: // TODO: check operator overload\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShrU64\r\n                : BinaryOp.ShrU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.AMPERSAND_EQUALS: compound = true;\r\n      case Token.AMPERSAND: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          false // retains low bits of small integers\r\n        );\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(\r\n            right,\r\n            this.currentType,\r\n            ConversionKind.IMPLICIT,\r\n            false // ^\r\n          );\r\n        } else {\r\n          leftType = this.currentType;\r\n          rightExpr = this.compileExpressionRetainType(\r\n            right,\r\n            leftType,\r\n            false // ^\r\n          );\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n            rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"&\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true; // if left or right already did\r\n          default: {\r\n            expr = module.createBinary(BinaryOp.AndI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.AndI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: { // check operator overload\r\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n              let classInstance = assert(this.currentType.classReference);\r\n              let operatorName = classInstance.prototype.fnBitwiseAnd;\r\n              if (operatorName != null) {\r\n                expr = this.compileOperatorOverload(classInstance, operatorName, leftExpr, rightExpr);\r\n                break;\r\n              }\r\n            }\r\n            // fall-through\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.AndI64\r\n                : BinaryOp.AndI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.BAR_EQUALS: compound = true;\r\n      case Token.BAR: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          false // retains low bits of small integers\r\n        );\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(\r\n            right,\r\n            this.currentType,\r\n            ConversionKind.IMPLICIT,\r\n            false // ^\r\n          );\r\n        } else {\r\n          leftType = this.currentType;\r\n          rightExpr = this.compileExpressionRetainType(\r\n            right,\r\n            leftType,\r\n            false // ^\r\n          );\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n            rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"|\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true; // if left or right already did\r\n          default: {\r\n            expr = module.createBinary(BinaryOp.OrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.OrI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: { // check operator overload\r\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n              let classInstance = assert(this.currentType.classReference);\r\n              let operatorName = classInstance.prototype.fnBitwiseOr;\r\n              if (operatorName != null) {\r\n                expr = this.compileOperatorOverload(classInstance, operatorName, leftExpr, rightExpr);\r\n                break;\r\n              }\r\n            }\r\n            // fall-through\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.OrI64\r\n                : BinaryOp.OrI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.CARET_EQUALS: compound = true;\r\n      case Token.CARET: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          false // retains low bits of small integers\r\n        );\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(\r\n            right,\r\n            this.currentType,\r\n            ConversionKind.IMPLICIT,\r\n            false // ^\r\n          );\r\n        } else {\r\n          leftType = this.currentType;\r\n          rightExpr = this.compileExpressionRetainType(\r\n            right,\r\n            leftType,\r\n            false // ^\r\n          );\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n            rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"^\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true; // if left or right already did\r\n          default: {\r\n            expr = module.createBinary(BinaryOp.XorI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.XorI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: { // check operator overload\r\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n              let classInstance = assert(this.currentType.classReference);\r\n              let operatorName = classInstance.prototype.fnBitwiseXor;\r\n              if (operatorName != null) {\r\n                expr = this.compileOperatorOverload(classInstance, operatorName, leftExpr, rightExpr);\r\n                break;\r\n              }\r\n            }\r\n            // fall-through\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.XorI64\r\n                : BinaryOp.XorI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n\r\n      // logical (no overloading)\r\n\r\n      case Token.AMPERSAND_AMPERSAND: { // left && right\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType\r\n        );\r\n        rightExpr = this.compileExpression(\r\n          right,\r\n          this.currentType,\r\n          ConversionKind.IMPLICIT,\r\n          false\r\n        );\r\n\r\n        // clone left if free of side effects\r\n        expr = module.cloneExpression(leftExpr, true, 0);\r\n\r\n        // if not possible, tee left to a temp. local\r\n        if (!expr) {\r\n          tempLocal = this.currentFunction.getAndFreeTempLocal(this.currentType);\r\n          leftExpr = module.createTeeLocal(tempLocal.index, leftExpr);\r\n        }\r\n\r\n        possiblyOverflows = this.currentType.is(TypeFlags.SMALL | TypeFlags.INTEGER);\r\n        condExpr = makeIsTrueish(leftExpr, this.currentType, module);\r\n\r\n        // simplify when cloning left without side effects was successful\r\n        if (expr) {\r\n          expr = module.createIf(\r\n            condExpr,  // left\r\n            rightExpr, //   ? right\r\n            expr       //   : cloned left\r\n          );\r\n        }\r\n\r\n        // otherwise make use of the temp. local\r\n        else {\r\n          expr = module.createIf(\r\n            condExpr,\r\n            rightExpr,\r\n            module.createGetLocal(\r\n              assert(tempLocal).index, // to be sure\r\n              this.currentType.toNativeType()\r\n            )\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      case Token.BAR_BAR: { // left || right\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType\r\n        );\r\n        rightExpr = this.compileExpression(\r\n          right,\r\n          this.currentType,\r\n          ConversionKind.IMPLICIT,\r\n          false\r\n        );\r\n\r\n        // clone left if free of side effects\r\n        expr = this.module.cloneExpression(leftExpr, true, 0);\r\n\r\n        // if not possible, tee left to a temp. local\r\n        if (!expr) {\r\n          tempLocal = this.currentFunction.getAndFreeTempLocal(this.currentType);\r\n          leftExpr = module.createTeeLocal(tempLocal.index, leftExpr);\r\n        }\r\n\r\n        possiblyOverflows = this.currentType.is(TypeFlags.SMALL | TypeFlags.INTEGER); // if right did\r\n        condExpr = makeIsTrueish(leftExpr, this.currentType, module);\r\n\r\n        // simplify when cloning left without side effects was successful\r\n        if (expr) {\r\n          expr = this.module.createIf(\r\n            condExpr, // left\r\n            expr,      //   ? cloned left\r\n            rightExpr      //   : right\r\n          );\r\n        }\r\n\r\n        // otherwise make use of the temp. local\r\n        else {\r\n          expr = module.createIf(\r\n            condExpr,\r\n            module.createGetLocal(\r\n              assert(tempLocal).index, // to be sure\r\n              this.currentType.toNativeType()\r\n            ),\r\n            rightExpr\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        expr = this.module.createUnreachable();\r\n        break;\r\n      }\r\n    }\r\n    if (possiblyOverflows && wrapSmallIntegers) {\r\n      assert(this.currentType.is(TypeFlags.SMALL | TypeFlags.INTEGER)); // must be a small int\r\n      expr = makeSmallIntegerWrap(expr, this.currentType, module);\r\n    }\r\n    return compound\r\n      ? this.compileAssignmentWithValue(left, expr, contextualType != Type.void)\r\n      : expr;\r\n  }\r\n\r\n  compileOperatorOverload(\r\n    classInstance: Class,\r\n    operatorName: string,\r\n    leftExpr: ExpressionRef,\r\n    rightExpr: ExpressionRef\r\n  ): ExpressionRef {\r\n    var classPrototype = classInstance.prototype;\r\n    var operatorPrototype = assert(assert(classPrototype.members).get(operatorName));\r\n    assert(operatorPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n    var operatorInstance = (<FunctionPrototype>operatorPrototype).resolve();\r\n    if (!operatorInstance) return this.module.createUnreachable();\r\n    return this.makeCallDirect(operatorInstance, [ leftExpr, rightExpr ]);\r\n  }\r\n\r\n  compileAssignment(expression: Expression, valueExpression: Expression, contextualType: Type): ExpressionRef {\r\n    var currentFunction = this.currentFunction;\r\n    var resolved = this.program.resolveExpression(expression, currentFunction); // reports\r\n    if (!resolved) return this.module.createUnreachable();\r\n\r\n    // to compile just the value, we need to know the target's type\r\n    var element = resolved.element;\r\n    var elementType: Type;\r\n    switch (element.kind) {\r\n      case ElementKind.GLOBAL: {\r\n        if (!this.compileGlobal(<Global>element)) { // reports; not yet compiled if a static field compiled as a global\r\n          return this.module.createUnreachable();\r\n        }\r\n        assert((<Global>element).type != Type.void, \"concrete type expected\");\r\n        // fall-through\r\n      }\r\n      case ElementKind.LOCAL:\r\n      case ElementKind.FIELD: {\r\n        elementType = (<VariableLikeElement>element).type;\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: {\r\n        let prototype = (<Property>element).setterPrototype;\r\n        if (prototype) {\r\n          let instance = prototype.resolve(); // reports\r\n          if (!instance) return this.module.createUnreachable();\r\n          assert(instance.signature.parameterTypes.length == 1);\r\n          elementType = instance.signature.parameterTypes[0];\r\n          break;\r\n        }\r\n        this.error(\r\n          DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n          expression.range, (<Property>element).internalName\r\n        );\r\n        return this.module.createUnreachable();\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        if (expression.kind == NodeKind.ELEMENTACCESS) { // @operator(\"[]\")\r\n          if (resolved.target && resolved.target.kind == ElementKind.CLASS) {\r\n            if (element.simpleName == (<Class>resolved.target).prototype.fnIndexedGet) {\r\n              let resolvedIndexedSet = (<FunctionPrototype>element).resolve(null); // reports\r\n              if (resolvedIndexedSet) {\r\n                elementType = resolvedIndexedSet.signature.returnType;\r\n                break;\r\n              }\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n                expression.range, (<Class>resolved.target).toString()\r\n              );\r\n              return this.module.createUnreachable();\r\n            }\r\n          }\r\n        }\r\n        // fall-through\r\n      }\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return this.module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    // compile the value and do the assignment\r\n    var valueExpr = this.compileExpression(valueExpression, elementType);\r\n    return this.compileAssignmentWithValue(\r\n      expression,\r\n      valueExpr,\r\n      contextualType != Type.void\r\n    );\r\n  }\r\n\r\n  compileAssignmentWithValue(\r\n    expression: Expression,\r\n    valueWithCorrectType: ExpressionRef,\r\n    tee: bool = false\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var resolved = this.program.resolveExpression(expression, this.currentFunction); // reports\r\n    if (!resolved) return module.createUnreachable();\r\n\r\n    var element = resolved.element;\r\n    switch (element.kind) {\r\n      case ElementKind.LOCAL: {\r\n        this.currentType = tee ? (<Local>element).type : Type.void;\r\n        if ((<Local>element).is(CommonFlags.CONST)) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range, (<Local>element).internalName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        return tee\r\n          ? module.createTeeLocal((<Local>element).index, valueWithCorrectType)\r\n          : module.createSetLocal((<Local>element).index, valueWithCorrectType);\r\n      }\r\n      case ElementKind.GLOBAL: {\r\n        if (!this.compileGlobal(<Global>element)) return module.createUnreachable();\r\n        let type = (<Global>element).type;\r\n        assert(type != Type.void);\r\n        this.currentType = tee ? type : Type.void;\r\n        if ((<Local>element).is(CommonFlags.CONST)) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range,\r\n            (<Local>element).internalName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        if (tee) {\r\n          let nativeType = type.toNativeType();\r\n          let internalName = (<Global>element).internalName;\r\n          return module.createBlock(null, [ // emulated teeGlobal\r\n            module.createSetGlobal(internalName, valueWithCorrectType),\r\n            module.createGetGlobal(internalName, nativeType)\r\n          ], nativeType);\r\n        } else {\r\n          return module.createSetGlobal((<Global>element).internalName, valueWithCorrectType);\r\n        }\r\n      }\r\n      case ElementKind.FIELD: {\r\n        if ((<Field>element).is(CommonFlags.READONLY)) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range, (<Field>element).internalName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        assert(resolved.isInstanceTarget);\r\n        let targetExpr = this.compileExpression(\r\n          <Expression>resolved.targetExpression,\r\n          (<Class>resolved.target).type\r\n        );\r\n        let type = (<Field>element).type;\r\n        this.currentType = tee ? type : Type.void;\r\n        let nativeType = type.toNativeType();\r\n        if (tee) {\r\n          let tempLocal = this.currentFunction.getAndFreeTempLocal(type);\r\n          let tempLocalIndex = tempLocal.index;\r\n          // TODO: simplify if valueWithCorrectType has no side effects\r\n          return module.createBlock(null, [\r\n            module.createSetLocal(tempLocalIndex, valueWithCorrectType),\r\n            module.createStore(\r\n              type.size >> 3,\r\n              targetExpr,\r\n              module.createGetLocal(tempLocalIndex, nativeType),\r\n              nativeType,\r\n              (<Field>element).memoryOffset\r\n            ),\r\n            module.createGetLocal(tempLocalIndex, nativeType)\r\n          ], nativeType);\r\n        } else {\r\n          return module.createStore(\r\n            type.size >> 3,\r\n            targetExpr,\r\n            valueWithCorrectType,\r\n            nativeType,\r\n            (<Field>element).memoryOffset\r\n          );\r\n        }\r\n      }\r\n      case ElementKind.PROPERTY: {\r\n        let setterPrototype = (<Property>element).setterPrototype;\r\n        if (setterPrototype) {\r\n          let setterInstance = setterPrototype.resolve(); // reports\r\n          if (!setterInstance) return module.createUnreachable();\r\n\r\n          // call just the setter if the return value isn't of interest\r\n          if (!tee) {\r\n            if (setterInstance.is(CommonFlags.INSTANCE)) {\r\n              assert(resolved.isInstanceTarget);\r\n              let thisArg = this.compileExpression(\r\n                <Expression>resolved.targetExpression,\r\n                (<Class>resolved.target).type\r\n              );\r\n              return this.makeCallDirect(setterInstance, [ thisArg, valueWithCorrectType ]);\r\n            } else {\r\n              return this.makeCallDirect(setterInstance, [ valueWithCorrectType ]);\r\n            }\r\n          }\r\n\r\n          // otherwise call the setter first, then the getter\r\n          let getterPrototype = (<Property>element).getterPrototype;\r\n          assert(getterPrototype != null); // must have one if there is a setter\r\n          let getterInstance = (<FunctionPrototype>getterPrototype).resolve(); // reports\r\n          if (!getterInstance) return module.createUnreachable();\r\n          let returnType = getterInstance.signature.returnType;\r\n          let nativeReturnType = returnType.toNativeType();\r\n          if (setterInstance.is(CommonFlags.INSTANCE)) {\r\n            assert(resolved.isInstanceTarget);\r\n            let thisArg = this.compileExpression(\r\n              <Expression>resolved.targetExpression,\r\n              (<Class>resolved.target).type\r\n            );\r\n            let tempLocal = this.currentFunction.getAndFreeTempLocal(returnType);\r\n            let tempLocalIndex = tempLocal.index;\r\n            return module.createBlock(null, [\r\n              this.makeCallDirect(setterInstance, [ // set and remember the target\r\n                module.createTeeLocal(tempLocalIndex, thisArg),\r\n                valueWithCorrectType\r\n              ]),\r\n              this.makeCallDirect(getterInstance, [ // get from remembered target\r\n                module.createGetLocal(tempLocalIndex, nativeReturnType)\r\n              ])\r\n            ], nativeReturnType);\r\n          } else {\r\n            // note that this must be performed here because `resolved` is shared\r\n            return module.createBlock(null, [\r\n              this.makeCallDirect(setterInstance, [ valueWithCorrectType ]),\r\n              this.makeCallDirect(getterInstance)\r\n            ], nativeReturnType);\r\n          }\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range, (<Property>element).internalName\r\n          );\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: { // @operator(\"[]\") ?\r\n        if (expression.kind == NodeKind.ELEMENTACCESS) {\r\n          assert(resolved.isInstanceTarget);\r\n          let getterInstance = (<FunctionPrototype>element).resolve(); // reports\r\n          if (!getterInstance) return module.createUnreachable();\r\n          // obtain @operator(\"[]=\")\r\n          let setElementName = (<Class>resolved.target).prototype.fnIndexedSet;\r\n          let setElement: Element | null;\r\n          if (\r\n            setElementName != null &&\r\n            (<Class>resolved.target).members &&\r\n            (setElement = (<Map<string,Element>>(<Class>resolved.target).members).get(setElementName)) &&\r\n            setElement.kind == ElementKind.FUNCTION_PROTOTYPE\r\n          ) {\r\n            let setterInstance = (<FunctionPrototype>setElement).resolve(); // reports\r\n            if (!setterInstance) return module.createUnreachable();\r\n            let targetType = (<Class>resolved.target).type;\r\n            let targetExpr = this.compileExpression(\r\n              <Expression>resolved.targetExpression,\r\n              targetType\r\n            );\r\n            let elementExpr = this.compileExpression(\r\n              (<ElementAccessExpression>expression).elementExpression,\r\n              Type.i32\r\n            );\r\n            if (tee) {\r\n              let tempLocalTarget = this.currentFunction.getTempLocal(targetType);\r\n              let tempLocalElement = this.currentFunction.getAndFreeTempLocal(this.currentType);\r\n              let returnType = getterInstance.signature.returnType;\r\n              this.currentFunction.freeTempLocal(tempLocalTarget);\r\n              return module.createBlock(null, [\r\n                this.makeCallDirect(setterInstance, [\r\n                  module.createTeeLocal(tempLocalTarget.index, targetExpr),\r\n                  module.createTeeLocal(tempLocalElement.index, elementExpr),\r\n                  valueWithCorrectType\r\n                ]),\r\n                this.makeCallDirect(getterInstance, [\r\n                  module.createGetLocal(tempLocalTarget.index, tempLocalTarget.type.toNativeType()),\r\n                  module.createGetLocal(tempLocalElement.index, tempLocalElement.type.toNativeType())\r\n                ])\r\n              ], returnType.toNativeType());\r\n            } else {\r\n              return this.makeCallDirect(setterInstance, [\r\n                targetExpr,\r\n                elementExpr,\r\n                valueWithCorrectType\r\n              ]);\r\n            }\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\r\n              expression.range, (<Class>resolved.target).internalName\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        // fall-through\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    return module.createUnreachable();\r\n  }\r\n\r\n  compileCallExpression(expression: CallExpression, contextualType: Type): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n    var resolved = this.program.resolveExpression(expression.expression, currentFunction); // reports\r\n    if (!resolved) return module.createUnreachable();\r\n\r\n    var element = resolved.element;\r\n    var signature: Signature | null;\r\n    var indexArg: ExpressionRef;\r\n    switch (element.kind) {\r\n\r\n      // direct call: concrete function\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        let prototype = <FunctionPrototype>element;\r\n\r\n        // builtins are compiled on the fly\r\n        if (prototype.is(CommonFlags.AMBIENT | CommonFlags.BUILTIN)) {\r\n          let expr = compileBuiltinCall( // reports\r\n            this,\r\n            prototype,\r\n            prototype.resolveBuiltinTypeArguments(\r\n              expression.typeArguments,\r\n              currentFunction.contextualTypeArguments\r\n            ),\r\n            expression.arguments,\r\n            contextualType,\r\n            expression\r\n          );\r\n          if (!expr) {\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          return expr;\r\n\r\n        // otherwise compile to a call\r\n        } else {\r\n          let instance = prototype.resolveUsingTypeArguments( // reports\r\n            expression.typeArguments,\r\n            currentFunction.contextualTypeArguments,\r\n            expression\r\n          );\r\n          if (!instance) return module.createUnreachable();\r\n          let thisArg: ExpressionRef = 0;\r\n          if (instance.is(CommonFlags.INSTANCE)) {\r\n            assert(resolved.isInstanceTarget);\r\n            thisArg = this.compileExpression(\r\n              <Expression>resolved.targetExpression,\r\n              (<Class>resolved.target).type\r\n            );\r\n            if (!thisArg) return module.createUnreachable();\r\n          } else {\r\n            assert(!resolved.isInstanceTarget);\r\n          }\r\n          return this.compileCallDirect(instance, expression.arguments, expression, thisArg);\r\n        }\r\n      }\r\n\r\n      // indirect call: index argument with signature\r\n      case ElementKind.LOCAL: {\r\n        if (signature = (<Local>element).type.signatureReference) {\r\n          indexArg = module.createGetLocal((<Local>element).index, NativeType.I32);\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, (<Local>element).type.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      case ElementKind.GLOBAL: {\r\n        if (signature = (<Global>element).type.signatureReference) {\r\n          indexArg = module.createGetGlobal((<Global>element).internalName, (<Global>element).type.toNativeType());\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, (<Global>element).type.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      case ElementKind.FIELD: {\r\n        let type = (<Field>element).type;\r\n        if (signature = type.signatureReference) {\r\n          let targetExpr = this.compileExpression(assert(resolved.targetExpression), type);\r\n          indexArg = module.createLoad(\r\n            4,\r\n            false,\r\n            targetExpr,\r\n            NativeType.I32,\r\n            (<Field>element).memoryOffset\r\n          );\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, (<Field>element).type.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      case ElementKind.FUNCTION_TARGET: {\r\n        signature = (<FunctionTarget>element).signature;\r\n        indexArg = this.compileExpression(expression.expression, (<FunctionTarget>element).type);\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: // TODO\r\n\r\n      // not supported\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n    return this.compileCallIndirect(\r\n      signature,\r\n      indexArg,\r\n      expression.arguments,\r\n      expression\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Checks that a call with the given number as arguments can be performed according to the\r\n   * specified signature.\r\n   */\r\n  checkCallSignature(\r\n    signature: Signature,\r\n    numArguments: i32,\r\n    hasThis: bool,\r\n    reportNode: Node\r\n  ): bool {\r\n\r\n    // cannot call an instance method without a `this` argument (TODO: `.call`?)\r\n    var thisType = signature.thisType;\r\n    if (hasThis != (thisType != null)) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported, // TODO: better message?\r\n        reportNode.range\r\n      );\r\n      return false;\r\n    }\r\n\r\n    // not yet implemented (TODO: maybe some sort of an unmanaged/lightweight array?)\r\n    var hasRest = signature.hasRest;\r\n    if (hasRest) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        reportNode.range\r\n      );\r\n      return false;\r\n    }\r\n\r\n    var minimum = signature.requiredParameters;\r\n    var maximum = signature.parameterTypes.length;\r\n\r\n    // must at least be called with required arguments\r\n    if (numArguments < minimum) {\r\n      this.error(\r\n        minimum < maximum\r\n          ? DiagnosticCode.Expected_at_least_0_arguments_but_got_1\r\n          : DiagnosticCode.Expected_0_arguments_but_got_1,\r\n        reportNode.range, minimum.toString(), numArguments.toString()\r\n      );\r\n      return false;\r\n    }\r\n\r\n    // must not be called with more than the maximum arguments\r\n    if (numArguments > maximum && !hasRest) {\r\n      this.error(\r\n        DiagnosticCode.Expected_0_arguments_but_got_1,\r\n        reportNode.range, maximum.toString(), numArguments.toString()\r\n      );\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /** Compiles a direct call to a concrete function. */\r\n  compileCallDirect(\r\n    instance: Function,\r\n    argumentExpressions: Expression[],\r\n    reportNode: Node,\r\n    thisArg: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var numArguments = argumentExpressions.length;\r\n    var signature = instance.signature;\r\n\r\n    if (!this.checkCallSignature( // reports\r\n      signature,\r\n      numArguments,\r\n      thisArg != 0,\r\n      reportNode\r\n    )) {\r\n      return this.module.createUnreachable();\r\n    }\r\n\r\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\r\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\r\n    var index = 0;\r\n    if (thisArg) {\r\n      operands[0] = thisArg;\r\n      index = 1;\r\n    }\r\n    var parameterTypes = signature.parameterTypes;\r\n    for (let i = 0; i < numArguments; ++i, ++index) {\r\n      operands[index] = this.compileExpression(\r\n        argumentExpressions[i],\r\n        parameterTypes[i]\r\n      );\r\n    }\r\n    assert(index == numArgumentsInclThis);\r\n    return this.makeCallDirect(instance, operands);\r\n  }\r\n\r\n  /** Gets the trampoline for the specified function. */\r\n  ensureTrampoline(original: Function): Function {\r\n    // A trampoline is a function that takes a fixed amount of operands with some of them possibly\r\n    // being zeroed. It takes one additional argument denoting the number of actual operands\r\n    // provided to the call, and takes appropriate steps to initialize zeroed operands to their\r\n    // default values using the optional parameter initializers of the original function. Doing so\r\n    // allows calls to functions with optional parameters to circumvent the trampoline when all\r\n    // parameters are provided as a fast route, respectively setting up omitted operands in a proper\r\n    // context otherwise.\r\n    var trampoline = original.trampoline;\r\n    if (trampoline) return trampoline;\r\n\r\n    var originalSignature = original.signature;\r\n    var originalName = original.internalName;\r\n    var originalParameterTypes = originalSignature.parameterTypes;\r\n    var originalParameterDeclarations = original.prototype.declaration.signature.parameterTypes;\r\n    var commonReturnType = originalSignature.returnType;\r\n    var commonThisType = originalSignature.thisType;\r\n    var isInstance = original.is(CommonFlags.INSTANCE);\r\n\r\n    // arguments excl. `this`, operands incl. `this`\r\n    var minArguments = originalSignature.requiredParameters;\r\n    var minOperands = minArguments;\r\n    var maxArguments = originalParameterTypes.length;\r\n    var maxOperands = maxArguments;\r\n    if (isInstance) {\r\n      ++minOperands;\r\n      ++maxOperands;\r\n    }\r\n    var numOptional = assert(maxOperands - minOperands);\r\n\r\n    var forwardedOperands = new Array<ExpressionRef>(minOperands);\r\n    var operandIndex = 0;\r\n\r\n    // forward `this` if applicable\r\n    var module = this.module;\r\n    if (isInstance) {\r\n      forwardedOperands[0] = module.createGetLocal(0, this.options.nativeSizeType);\r\n      operandIndex = 1;\r\n    }\r\n\r\n    // forward required arguments\r\n    for (let i = 0; i < minArguments; ++i, ++operandIndex) {\r\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, originalParameterTypes[i].toNativeType());\r\n    }\r\n    assert(operandIndex == minOperands);\r\n\r\n    // create the trampoline element\r\n    var trampolineSignature = new Signature(originalParameterTypes, commonReturnType, commonThisType);\r\n    var trampolineName = originalName + \"|trampoline\";\r\n    trampolineSignature.requiredParameters = maxArguments;\r\n    trampoline = new Function(original.prototype, trampolineName, trampolineSignature, original.memberOf);\r\n    trampoline.set(original.flags | CommonFlags.TRAMPOLINE | CommonFlags.COMPILED);\r\n    trampoline.contextualTypeArguments = original.contextualTypeArguments;\r\n    original.trampoline = trampoline;\r\n\r\n    // compile initializers of omitted arguments in scope of the trampoline function\r\n    // this is necessary because initializers might need additional locals and a proper this context\r\n    var previousFunction = this.currentFunction;\r\n    this.currentFunction = trampoline;\r\n\r\n    // create a br_table switching over the number of optional parameters provided\r\n    var numNames = numOptional + 1; // incl. outer block\r\n    var names = new Array<string>(numNames);\r\n    var ofN = \"of\" + numOptional.toString(10);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      let label = i.toString(10) + ofN;\r\n      names[i] = label;\r\n    }\r\n    var body = module.createBlock(names[0], [\r\n      module.createBlock(\"oob\", [\r\n        module.createSwitch(names, \"oob\",\r\n          // condition is number of provided optional arguments, so subtract required arguments\r\n          minArguments\r\n            ? module.createBinary(\r\n                BinaryOp.SubI32,\r\n                module.createGetGlobal(\"argumentCount\", NativeType.I32),\r\n                module.createI32(minArguments)\r\n              )\r\n            : module.createGetGlobal(\"argumentCount\", NativeType.I32)\r\n        )\r\n      ]),\r\n      module.createUnreachable()\r\n    ]);\r\n    for (let i = 0; i < numOptional; ++i, ++operandIndex) {\r\n      let type = originalParameterTypes[minArguments + i];\r\n      body = module.createBlock(names[i + 1], [\r\n        body,\r\n        module.createSetLocal(operandIndex,\r\n          this.compileExpression(\r\n            assert(originalParameterDeclarations[minArguments + i].initializer),\r\n            type\r\n          )\r\n        )\r\n      ]);\r\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, type.toNativeType());\r\n    }\r\n    this.currentFunction = previousFunction;\r\n    assert(operandIndex == maxOperands);\r\n\r\n    var typeRef = this.ensureFunctionType(trampolineSignature);\r\n    var funcRef = module.addFunction(trampolineName, typeRef, typesToNativeTypes(trampoline.additionalLocals),\r\n      module.createBlock(null, [\r\n        body,\r\n        module.createCall(\r\n          originalName,\r\n          forwardedOperands,\r\n          commonReturnType.toNativeType()\r\n        )\r\n      ], commonReturnType.toNativeType())\r\n    );\r\n    trampoline.finalize(module, funcRef);\r\n    return trampoline;\r\n  }\r\n\r\n  /** Creates a direct call to the specified function. */\r\n  makeCallDirect(\r\n    instance: Function,\r\n    operands: ExpressionRef[] | null = null\r\n  ): ExpressionRef {\r\n    var numOperands = operands ? operands.length : 0;\r\n    var numArguments = numOperands;\r\n    var minArguments = instance.signature.requiredParameters;\r\n    var minOperands = minArguments;\r\n    var maxArguments = instance.signature.parameterTypes.length;\r\n    var maxOperands = maxArguments;\r\n    if (instance.is(CommonFlags.INSTANCE)) {\r\n      ++minOperands;\r\n      ++maxOperands;\r\n      --numArguments;\r\n    }\r\n    assert(numOperands >= minOperands);\r\n\r\n    var module = this.module;\r\n    if (!this.compileFunction(instance)) return module.createUnreachable();\r\n    var returnType = instance.signature.returnType;\r\n    var isCallImport = instance.is(CommonFlags.MODULE_IMPORT);\r\n\r\n    // fill up omitted arguments with zeroes\r\n    if (numOperands < maxOperands) {\r\n      if (!operands) {\r\n        operands = new Array(maxOperands);\r\n        operands.length = 0;\r\n      }\r\n      let parameterTypes = instance.signature.parameterTypes;\r\n      for (let i = numArguments; i < maxArguments; ++i) {\r\n        operands.push(parameterTypes[i].toNativeZero(module));\r\n      }\r\n      if (!isCallImport) { // call the trampoline\r\n        instance = this.ensureTrampoline(instance);\r\n        if (!this.compileFunction(instance)) return module.createUnreachable();\r\n        let nativeReturnType = returnType.toNativeType();\r\n        this.currentType = returnType;\r\n        return module.createBlock(null, [\r\n          this.ensureArgumentCount(numArguments),\r\n          module.createCall(instance.internalName, operands, nativeReturnType)\r\n        ], nativeReturnType);\r\n      }\r\n    }\r\n\r\n    // otherwise just call through\r\n    this.currentType = returnType;\r\n    return isCallImport\r\n      ? module.createCallImport(instance.internalName, operands, returnType.toNativeType())\r\n      : module.createCall(instance.internalName, operands, returnType.toNativeType());\r\n  }\r\n\r\n  /** Compiles an indirect call using an index argument and a signature. */\r\n  compileCallIndirect(\r\n    signature: Signature,\r\n    indexArg: ExpressionRef,\r\n    argumentExpressions: Expression[],\r\n    reportNode: Node,\r\n    thisArg: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var numArguments = argumentExpressions.length;\r\n\r\n    if (!this.checkCallSignature( // reports\r\n      signature,\r\n      numArguments,\r\n      thisArg != 0,\r\n      reportNode\r\n    )) {\r\n      return this.module.createUnreachable();\r\n    }\r\n\r\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\r\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\r\n    var index = 0;\r\n    if (thisArg) {\r\n      operands[0] = thisArg;\r\n      index = 1;\r\n    }\r\n    var parameterTypes = signature.parameterTypes;\r\n    for (let i = 0; i < numArguments; ++i, ++index) {\r\n      operands[index] = this.compileExpression(\r\n        argumentExpressions[i],\r\n        parameterTypes[i]\r\n      );\r\n    }\r\n    assert(index == numArgumentsInclThis);\r\n    return this.makeCallIndirect(signature, indexArg, operands);\r\n  }\r\n\r\n  /** Creates an indirect call to the function at `indexArg` in the function table. */\r\n  makeCallIndirect(\r\n    signature: Signature,\r\n    indexArg: ExpressionRef,\r\n    operands: ExpressionRef[] | null = null\r\n  ): ExpressionRef {\r\n    var numOperands = operands ? operands.length : 0;\r\n    var numArguments = numOperands;\r\n    var minArguments = signature.requiredParameters;\r\n    var minOperands = minArguments;\r\n    var maxArguments = signature.parameterTypes.length;\r\n    var maxOperands = maxArguments;\r\n    if (signature.thisType) {\r\n      ++minOperands;\r\n      ++maxOperands;\r\n      --numArguments;\r\n    }\r\n    assert(numOperands >= minOperands);\r\n\r\n    this.ensureFunctionType(signature);\r\n    var module = this.module;\r\n\r\n    // fill up omitted arguments with zeroes\r\n    if (numOperands < maxOperands) {\r\n      if (!operands) {\r\n        operands = new Array(maxOperands);\r\n        operands.length = 0;\r\n      }\r\n      let parameterTypes = signature.parameterTypes;\r\n      for (let i = numArguments; i < maxArguments; ++i) {\r\n        operands.push(parameterTypes[i].toNativeZero(module));\r\n      }\r\n    }\r\n\r\n    var returnType = signature.returnType;\r\n    this.currentType = returnType;\r\n    return module.createBlock(null, [\r\n      this.ensureArgumentCount(numArguments), // might still be calling a trampoline\r\n      module.createCallIndirect(indexArg, operands, signature.toSignatureString())\r\n    ], returnType.toNativeType());\r\n  }\r\n\r\n  /** Makes sure that the `argumentCount` helper global is present and returns an expression that sets it. */\r\n  private ensureArgumentCount(argumentCount: i32): ExpressionRef {\r\n    var module = this.module;\r\n    if (!this.argumentCountRef) {\r\n      this.argumentCountRef = module.addGlobal(\r\n        \"argumentCount\",\r\n        NativeType.I32,\r\n        true,\r\n        module.createI32(0)\r\n      );\r\n    }\r\n    return module.createSetGlobal(\"argumentCount\", module.createI32(argumentCount));\r\n  }\r\n\r\n  compileCommaExpression(expression: CommaExpression, contextualType: Type): ExpressionRef {\r\n    var expressions = expression.expressions;\r\n    var numExpressions = expressions.length;\r\n    var exprs = new Array<ExpressionRef>(numExpressions--);\r\n    for (let i = 0; i < numExpressions; ++i) {\r\n      exprs[i] = this.compileExpression(expressions[i], Type.void);    // drop all\r\n    }\r\n    exprs[numExpressions] = this.compileExpression(expressions[numExpressions], contextualType); // except last\r\n    return this.module.createBlock(null, exprs, this.currentType.toNativeType());\r\n  }\r\n\r\n  compileElementAccessExpression(expression: ElementAccessExpression, contextualType: Type): ExpressionRef {\r\n    var resolved = this.program.resolveElementAccess(expression, this.currentFunction); // reports\r\n    if (!resolved) return this.module.createUnreachable();\r\n\r\n    assert( // should be guaranteed by resolveElementAccess\r\n      resolved.element.kind == ElementKind.FUNCTION_PROTOTYPE &&\r\n      resolved.target &&\r\n      resolved.target.kind == ElementKind.CLASS\r\n    );\r\n    var target = <Class>resolved.target;\r\n    var instance = (<FunctionPrototype>resolved.element).resolve( // reports\r\n      null,\r\n      target.contextualTypeArguments\r\n    );\r\n    if (!instance) return this.module.createUnreachable();\r\n    var thisArg = this.compileExpression(expression.expression, target.type);\r\n    return this.compileCallDirect(instance, [\r\n      expression.elementExpression\r\n    ], expression, thisArg);\r\n  }\r\n\r\n  compileFunctionExpression(expression: FunctionExpression, contextualType: Type): ExpressionRef {\r\n    var declaration = expression.declaration;\r\n    var name = declaration.name;\r\n    var simpleName = (name.text.length\r\n      ? name.text\r\n      : \"anonymous\") + \"|\" + this.functionTable.length.toString(10);\r\n    var currentFunction = this.currentFunction;\r\n    var prototype = new FunctionPrototype(\r\n      this.program,\r\n      simpleName,\r\n      currentFunction.internalName + \"~\" + simpleName,\r\n      declaration\r\n    );\r\n    var instance = this.compileFunctionUsingTypeArguments(\r\n      prototype,\r\n      [],\r\n      currentFunction.contextualTypeArguments,\r\n      currentFunction.flow,\r\n      declaration\r\n    );\r\n    if (!instance) return this.module.createUnreachable();\r\n    this.currentType = instance.signature.type; // TODO: get cached type?\r\n    // NOTE that, in order to make this work in every case, the function must be represented by a\r\n    // value, so we add it and rely on the optimizer to figure out where it can be called directly.\r\n    var index = this.ensureFunctionTableEntry(instance); // reports\r\n    return index < 0\r\n      ? this.module.createUnreachable()\r\n      : this.module.createI32(index);\r\n  }\r\n\r\n  /**\r\n   * Compiles an identifier in the specified context.\r\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\r\n   *  precomputes them according to context.\r\n   */\r\n  compileIdentifierExpression(\r\n    expression: IdentifierExpression,\r\n    contextualType: Type,\r\n    retainConstantType: bool\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    // check special keywords first\r\n    switch (expression.kind) {\r\n      case NodeKind.NULL: {\r\n        let options = this.options;\r\n        if (!contextualType.classReference) {\r\n          this.currentType = options.usizeType;\r\n        }\r\n        return options.isWasm64\r\n          ? module.createI64(0)\r\n          : module.createI32(0);\r\n      }\r\n      case NodeKind.TRUE: {\r\n        this.currentType = Type.bool;\r\n        return module.createI32(1);\r\n      }\r\n      case NodeKind.FALSE: {\r\n        this.currentType = Type.bool;\r\n        return module.createI32(0);\r\n      }\r\n      case NodeKind.THIS: {\r\n        let currentFunction = this.currentFunction;\r\n        if (currentFunction.is(CommonFlags.INSTANCE)) {\r\n          let parent = assert(currentFunction.memberOf);\r\n          assert(parent.kind == ElementKind.CLASS);\r\n          let thisType = (<Class>parent).type;\r\n          if (currentFunction.is(CommonFlags.CONSTRUCTOR)) {\r\n            let flow = currentFunction.flow;\r\n            if (!flow.is(FlowFlags.ALLOCATES)) {\r\n              flow.set(FlowFlags.ALLOCATES);\r\n              // must be conditional because `this` could have been provided by a derived class\r\n              this.currentType = thisType;\r\n              return module.createTeeLocal(0,\r\n                makeConditionalAllocate(this, <Class>parent, expression)\r\n              );\r\n            }\r\n          }\r\n          this.currentType = thisType;\r\n          return module.createGetLocal(0, thisType.toNativeType());\r\n        }\r\n        this.error(\r\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\r\n          expression.range\r\n        );\r\n        this.currentType = this.options.usizeType;\r\n        return module.createUnreachable();\r\n      }\r\n      case NodeKind.SUPER: {\r\n        let currentFunction = this.currentFunction;\r\n        if (currentFunction.is(CommonFlags.INSTANCE)) {\r\n          let parent = assert(currentFunction.memberOf);\r\n          assert(parent.kind == ElementKind.CLASS);\r\n          let base = (<Class>parent).base;\r\n          if (base) {\r\n            let superType = base.type;\r\n            this.currentType = superType;\r\n            return module.createGetLocal(0, superType.toNativeType());\r\n          }\r\n        }\r\n        this.error(\r\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\r\n          expression.range\r\n        );\r\n        this.currentType = this.options.usizeType;\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    // otherwise resolve\r\n    var resolved = this.program.resolveIdentifier( // reports\r\n      expression,\r\n      this.currentFunction,\r\n      this.currentEnum\r\n    );\r\n    if (!resolved) return module.createUnreachable();\r\n\r\n    var element = resolved.element;\r\n    switch (element.kind) {\r\n      case ElementKind.LOCAL: {\r\n        if ((<Local>element).is(CommonFlags.INLINED)) {\r\n          return this.compileInlineConstant(<Local>element, contextualType, retainConstantType);\r\n        }\r\n        let localType = (<Local>element).type;\r\n        let localIndex = (<Local>element).index;\r\n        assert(localIndex >= 0);\r\n        this.currentType = localType;\r\n        return this.module.createGetLocal(localIndex, localType.toNativeType());\r\n      }\r\n      case ElementKind.GLOBAL: {\r\n        if (element.is(CommonFlags.AMBIENT | CommonFlags.BUILTIN)) {\r\n          return compileBuiltinGetConstant(this, <Global>element, expression);\r\n        }\r\n        if (!this.compileGlobal(<Global>element)) { // reports; not yet compiled if a static field\r\n          return this.module.createUnreachable();\r\n        }\r\n        let globalType = (<Global>element).type;\r\n        assert(globalType != Type.void);\r\n        if ((<Global>element).is(CommonFlags.INLINED)) {\r\n          return this.compileInlineConstant(<Global>element, contextualType, retainConstantType);\r\n        }\r\n        this.currentType = globalType;\r\n        return this.module.createGetGlobal((<Global>element).internalName, globalType.toNativeType());\r\n      }\r\n      case ElementKind.ENUMVALUE: { // here: if referenced from within the same enum\r\n        if (!element.is(CommonFlags.COMPILED)) {\r\n          this.error(\r\n            DiagnosticCode.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums,\r\n            expression.range\r\n          );\r\n          this.currentType = Type.i32;\r\n          return this.module.createUnreachable();\r\n        }\r\n        this.currentType = Type.i32;\r\n        if ((<EnumValue>element).is(CommonFlags.INLINED)) {\r\n          return this.module.createI32((<EnumValue>element).constantValue);\r\n        }\r\n        return this.module.createGetGlobal((<EnumValue>element).internalName, NativeType.I32);\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        let instance = (<FunctionPrototype>element).resolve(\r\n          null,\r\n          this.currentFunction.contextualTypeArguments\r\n        );\r\n        if (!(instance && this.compileFunction(instance))) return module.createUnreachable();\r\n        let index = this.ensureFunctionTableEntry(instance);\r\n        this.currentType = instance.signature.type;\r\n        return this.module.createI32(index);\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    return this.module.createUnreachable();\r\n  }\r\n\r\n  compileLiteralExpression(\r\n    expression: LiteralExpression,\r\n    contextualType: Type,\r\n    implicitNegate: bool = false\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    switch (expression.literalKind) {\r\n      case LiteralKind.ARRAY: {\r\n        assert(!implicitNegate);\r\n        let classType = contextualType.classReference;\r\n        if (\r\n          classType &&\r\n          classType.prototype == this.program.arrayPrototype\r\n        ) {\r\n          return this.compileStaticArray(\r\n            assert(classType.typeArguments)[0],\r\n            (<ArrayLiteralExpression>expression).elementExpressions,\r\n            expression\r\n          );\r\n        }\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      case LiteralKind.FLOAT: {\r\n        let floatValue = (<FloatLiteralExpression>expression).value;\r\n        if (implicitNegate) {\r\n          floatValue = -floatValue;\r\n        }\r\n        if (contextualType == Type.f32) {\r\n          return module.createF32(<f32>floatValue);\r\n        }\r\n        this.currentType = Type.f64;\r\n        return module.createF64(floatValue);\r\n      }\r\n      case LiteralKind.INTEGER: {\r\n        let intValue = (<IntegerLiteralExpression>expression).value;\r\n        if (implicitNegate) {\r\n          intValue = i64_sub(\r\n            i64_new(0),\r\n            intValue\r\n          );\r\n        }\r\n        switch (contextualType.kind) {\r\n\r\n          // compile to contextualType if matching\r\n\r\n          case TypeKind.I8: {\r\n            if (i64_is_i8(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.U8: {\r\n            if (i64_is_u8(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.I16: {\r\n            if (i64_is_i16(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.U16: {\r\n            if (i64_is_u16(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            if (i64_is_i32(intValue) || i64_is_u32(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.BOOL: {\r\n            if (i64_is_bool(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            if (!this.options.isWasm64) {\r\n              if (i64_is_i32(intValue) || i64_is_u32(intValue)) return module.createI32(i64_low(intValue));\r\n              break;\r\n            }\r\n            return module.createI64(i64_low(intValue), i64_high(intValue));\r\n          }\r\n          case TypeKind.USIZE: {\r\n            if (!this.options.isWasm64) {\r\n              if (i64_is_i32(intValue) || i64_is_u32(intValue)) return module.createI32(i64_low(intValue));\r\n              break;\r\n            }\r\n            return module.createI64(i64_low(intValue), i64_high(intValue));\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            return module.createI64(i64_low(intValue), i64_high(intValue));\r\n          }\r\n          case TypeKind.F32: {\r\n            if (i64_is_f32(intValue)) return module.createF32(i64_to_f32(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            if (i64_is_f64(intValue)) return module.createF64(i64_to_f64(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            break; // compiles to best fitting type below, being dropped\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n\r\n        // otherwise compile to best fitting native type\r\n\r\n        if (i64_is_i32(intValue)) {\r\n          this.currentType = Type.i32;\r\n          return module.createI32(i64_low(intValue));\r\n        } else {\r\n          this.currentType = Type.i64;\r\n          return module.createI64(i64_low(intValue), i64_high(intValue));\r\n        }\r\n      }\r\n      case LiteralKind.STRING: {\r\n        assert(!implicitNegate);\r\n        return this.compileStaticString((<StringLiteralExpression>expression).value);\r\n      }\r\n      // case LiteralKind.OBJECT:\r\n      // case LiteralKind.REGEXP:\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    this.currentType = contextualType;\r\n    return module.createUnreachable();\r\n  }\r\n\r\n  compileStaticString(stringValue: string): ExpressionRef {\r\n    var module = this.module;\r\n    var options = this.options;\r\n    var stringSegments = this.stringSegments;\r\n\r\n    var stringSegment: MemorySegment | null = stringSegments.get(stringValue);\r\n    if (!stringSegment) {\r\n      let stringLength = stringValue.length;\r\n      let stringBuffer = new Uint8Array(4 + stringLength * 2);\r\n      stringBuffer[0] =  stringLength         & 0xff;\r\n      stringBuffer[1] = (stringLength >>>  8) & 0xff;\r\n      stringBuffer[2] = (stringLength >>> 16) & 0xff;\r\n      stringBuffer[3] = (stringLength >>> 24) & 0xff;\r\n      for (let i = 0; i < stringLength; ++i) {\r\n        stringBuffer[4 + i * 2] =  stringValue.charCodeAt(i)        & 0xff;\r\n        stringBuffer[5 + i * 2] = (stringValue.charCodeAt(i) >>> 8) & 0xff;\r\n      }\r\n      stringSegment = this.addMemorySegment(stringBuffer, options.usizeType.byteSize);\r\n      stringSegments.set(stringValue, stringSegment);\r\n    }\r\n    var stringOffset = stringSegment.offset;\r\n    var stringType = this.program.typesLookup.get(\"string\");\r\n    this.currentType = stringType ? stringType : options.usizeType;\r\n    if (options.isWasm64) {\r\n      return module.createI64(i64_low(stringOffset), i64_high(stringOffset));\r\n    }\r\n    assert(i64_is_i32(stringOffset));\r\n    return module.createI32(i64_low(stringOffset));\r\n  }\r\n\r\n  compileStaticArray(elementType: Type, expressions: (Expression | null)[], reportNode: Node): ExpressionRef {\r\n    var isStatic = true;\r\n    var module = this.module;\r\n\r\n    // obtain the array type\r\n    var arrayPrototype = assert(this.program.arrayPrototype);\r\n    if (!arrayPrototype || arrayPrototype.kind != ElementKind.CLASS_PROTOTYPE) return module.createUnreachable();\r\n    var arrayType = (<ClassPrototype>arrayPrototype).resolve([ elementType ]);\r\n    if (!arrayType) return module.createUnreachable();\r\n\r\n    var elementSize = expressions.length;\r\n    var nativeType = elementType.toNativeType();\r\n    var values: usize;\r\n    var memorySize: usize;\r\n    switch (nativeType) {\r\n      case NativeType.I32: {\r\n        values = changetype<usize>(new Int32Array(elementSize));\r\n        memorySize = elementSize * 4;\r\n        break;\r\n      }\r\n      case NativeType.I64: {\r\n        values = changetype<usize>(new Array<I64>(elementSize));\r\n        memorySize = elementSize * 8;\r\n        break;\r\n      }\r\n      case NativeType.F32: {\r\n        values = changetype<usize>(new Float32Array(elementSize));\r\n        memorySize = elementSize * 4;\r\n        break;\r\n      }\r\n      case NativeType.F64: {\r\n        values = changetype<usize>(new Float64Array(elementSize));\r\n        memorySize = elementSize * 8;\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    // precompute value expressions\r\n    var exprs = new Array<ExpressionRef>(elementSize);\r\n    var expr: BinaryenExpressionRef;\r\n    for (let i = 0; i < elementSize; ++i) {\r\n      exprs[i] = expressions[i]\r\n        ? this.compileExpression(<Expression>expressions[i], elementType)\r\n        : elementType.toNativeZero(module);\r\n      if (isStatic) {\r\n        expr = this.precomputeExpressionRef(exprs[i]);\r\n        if (_BinaryenExpressionGetId(expr) == ExpressionId.Const) {\r\n          assert(_BinaryenExpressionGetType(expr) == nativeType);\r\n          switch (nativeType) {\r\n            case NativeType.I32: {\r\n              changetype<i32[]>(values)[i] = _BinaryenConstGetValueI32(expr);\r\n              break;\r\n            }\r\n            case NativeType.I64: {\r\n              changetype<I64[]>(values)[i] = i64_new(\r\n                _BinaryenConstGetValueI64Low(expr),\r\n                _BinaryenConstGetValueI64High(expr)\r\n              );\r\n              break;\r\n            }\r\n            case NativeType.F32: {\r\n              changetype<f32[]>(values)[i] = _BinaryenConstGetValueF32(expr);\r\n              break;\r\n            }\r\n            case NativeType.F64: {\r\n              changetype<f64[]>(values)[i] = _BinaryenConstGetValueF64(expr);\r\n              break;\r\n            }\r\n            default: {\r\n              assert(false); // checked above\r\n            }\r\n          }\r\n        } else {\r\n          // TODO: emit a warning if declared 'const'\r\n          isStatic = false;\r\n        }\r\n      }\r\n    }\r\n\r\n    var usizeTypeSize = this.options.usizeType.byteSize;\r\n    var headerSize = usizeTypeSize + 4 + 4; // memory + capacity + length\r\n\r\n    if (isStatic) {\r\n      let buffer = new Uint8Array(headerSize + memorySize);\r\n      let segment = this.addMemorySegment(buffer);\r\n\r\n      // make header\r\n      let offset = 0;\r\n      if (usizeTypeSize == 8) {\r\n        writeI64(i64_add(segment.offset, i64_new(headerSize)), buffer, 0); // memory\r\n      } else {\r\n        assert(i64_high(segment.offset) == 0);\r\n        writeI32(i64_low(segment.offset) + headerSize, buffer, 0); // memory\r\n      }\r\n      offset += usizeTypeSize;\r\n      writeI32(elementSize, buffer, offset); // capacity\r\n      offset += 4;\r\n      writeI32(elementSize, buffer, offset); // length\r\n      offset += 4;\r\n      assert(offset == headerSize);\r\n\r\n      // make memory\r\n      switch (nativeType) {\r\n        case NativeType.I32: {\r\n          for (let i = 0; i < elementSize; ++i) {\r\n            writeI32(changetype<i32[]>(values)[i], buffer, offset); offset += 4;\r\n          }\r\n          break;\r\n        }\r\n        case NativeType.I64: {\r\n          for (let i = 0; i < elementSize; ++i) {\r\n            writeI64(changetype<I64[]>(values)[i], buffer, offset); offset += 8;\r\n          }\r\n          break;\r\n        }\r\n        case NativeType.F32: {\r\n          for (let i = 0; i < elementSize; ++i) {\r\n            writeF32(changetype<f32[]>(values)[i], buffer, offset); offset += 4;\r\n          }\r\n          break;\r\n        }\r\n        case NativeType.F64: {\r\n          for (let i = 0; i < elementSize; ++i) {\r\n            writeF64(changetype<f64[]>(values)[i], buffer, offset); offset += 8;\r\n          }\r\n          break;\r\n        }\r\n        default: {\r\n          assert(false);\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      assert(offset == headerSize + memorySize);\r\n      this.currentType = arrayType.type;\r\n      return usizeTypeSize == 8\r\n        ? module.createI64(\r\n            i64_low(segment.offset),\r\n            i64_high(segment.offset)\r\n          )\r\n        : module.createI32(\r\n            i64_low(segment.offset)\r\n          );\r\n    } else {\r\n      // TODO: static elements *could* go into data segments while dynamic ones are initialized\r\n      // on top? any benefits?\r\n      throw new Error(\"not implemented\");\r\n    }\r\n  }\r\n\r\n  compileNewExpression(expression: NewExpression, contextualType: Type): ExpressionRef {\r\n    var module = this.module;\r\n    var options = this.options;\r\n    var currentFunction = this.currentFunction;\r\n\r\n    // obtain the class being instantiated\r\n    var resolved = this.program.resolveExpression( // reports\r\n      expression.expression,\r\n      currentFunction\r\n    );\r\n    if (!resolved) return module.createUnreachable();\r\n    if (resolved.element.kind != ElementKind.CLASS_PROTOTYPE) {\r\n      this.error(\r\n        DiagnosticCode.Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature,\r\n        expression.expression.range\r\n      );\r\n      return this.module.createUnreachable();\r\n    }\r\n    var classPrototype = <ClassPrototype>resolved.element;\r\n    var classInstance = classPrototype.resolveUsingTypeArguments( // reports\r\n      expression.typeArguments,\r\n      null,\r\n      expression\r\n    );\r\n    if (!classInstance) return module.createUnreachable();\r\n\r\n    var expr: ExpressionRef;\r\n    var constructorInstance = classInstance.constructorInstance;\r\n\r\n    // if a constructor is present, call it with a zero `this`\r\n    if (constructorInstance) {\r\n      expr = this.compileCallDirect(constructorInstance, expression.arguments, expression,\r\n        options.usizeType.toNativeZero(module)\r\n      );\r\n\r\n    // otherwise simply allocate a new instance and initialize its fields\r\n    } else {\r\n      expr = makeAllocate(this, classInstance, expression);\r\n    }\r\n\r\n    this.currentType = classInstance.type;\r\n    return expr;\r\n  }\r\n\r\n  compileParenthesizedExpression(\r\n    expression: ParenthesizedExpression,\r\n    contextualType: Type,\r\n    wrapSmallIntegers: bool = true\r\n  ): ExpressionRef {\r\n    // does not change types, just order\r\n    return this.compileExpression(\r\n      expression.expression,\r\n      contextualType,\r\n      ConversionKind.NONE,\r\n      wrapSmallIntegers\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Compiles a property access in the specified context.\r\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\r\n   *  precomputes them according to context.\r\n   */\r\n  compilePropertyAccessExpression(\r\n    propertyAccess: PropertyAccessExpression,\r\n    contextualType: Type,\r\n    retainConstantType: bool\r\n  ): ExpressionRef {\r\n    var program = this.program;\r\n    var module = this.module;\r\n\r\n    var resolved = program.resolvePropertyAccess(propertyAccess, this.currentFunction); // reports\r\n    if (!resolved) return module.createUnreachable();\r\n\r\n    var element = resolved.element;\r\n    var targetExpr: ExpressionRef;\r\n    switch (element.kind) {\r\n      case ElementKind.GLOBAL: { // static property\r\n        if (element.is(CommonFlags.AMBIENT | CommonFlags.BUILTIN)) {\r\n          return compileBuiltinGetConstant(this, <Global>element, propertyAccess);\r\n        }\r\n        if (!this.compileGlobal(<Global>element)) { // reports; not yet compiled if a static field\r\n          return module.createUnreachable();\r\n        }\r\n        let globalType = (<Global>element).type;\r\n        assert(globalType != Type.void);\r\n        if ((<Global>element).is(CommonFlags.INLINED)) {\r\n          return this.compileInlineConstant(<Global>element, contextualType, retainConstantType);\r\n        }\r\n        this.currentType = globalType;\r\n        return module.createGetGlobal((<Global>element).internalName, globalType.toNativeType());\r\n      }\r\n      case ElementKind.ENUMVALUE: { // enum value\r\n        if (!this.compileEnum((<EnumValue>element).enum)) {\r\n          return this.module.createUnreachable();\r\n        }\r\n        this.currentType = Type.i32;\r\n        if ((<EnumValue>element).is(CommonFlags.INLINED)) {\r\n          return module.createI32((<EnumValue>element).constantValue);\r\n        }\r\n        return module.createGetGlobal((<EnumValue>element).internalName, NativeType.I32);\r\n      }\r\n      case ElementKind.FIELD: { // instance field\r\n        assert(resolved.isInstanceTarget);\r\n        assert((<Field>element).memoryOffset >= 0);\r\n        targetExpr = this.compileExpression(\r\n          <Expression>resolved.targetExpression,\r\n          this.options.usizeType,\r\n          ConversionKind.NONE\r\n        );\r\n        this.currentType = (<Field>element).type;\r\n        return module.createLoad(\r\n          (<Field>element).type.size >> 3,\r\n          (<Field>element).type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\r\n          targetExpr,\r\n          (<Field>element).type.toNativeType(),\r\n          (<Field>element).memoryOffset\r\n        );\r\n      }\r\n      case ElementKind.PROPERTY: { // instance property (here: getter)\r\n        let prototype = (<Property>element).getterPrototype;\r\n        if (prototype) {\r\n          let instance = prototype.resolve(null); // reports\r\n          if (!instance) return module.createUnreachable();\r\n          let signature = instance.signature;\r\n          if (!this.checkCallSignature( // reports\r\n            signature,\r\n            0,\r\n            instance.is(CommonFlags.INSTANCE),\r\n            propertyAccess\r\n          )) {\r\n            return module.createUnreachable();\r\n          }\r\n          if (instance.is(CommonFlags.INSTANCE)) {\r\n            let parent = assert(instance.memberOf);\r\n            assert(parent.kind == ElementKind.CLASS);\r\n            targetExpr = this.compileExpression(\r\n              <Expression>resolved.targetExpression,\r\n              (<Class>parent).type\r\n            );\r\n            this.currentType = signature.returnType;\r\n            return this.compileCallDirect(instance, [], propertyAccess, targetExpr);\r\n          } else {\r\n            this.currentType = signature.returnType;\r\n            return this.compileCallDirect(instance, [], propertyAccess);\r\n          }\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n            propertyAccess.range, (<Property>element).simpleName, (<Property>element).parent.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      propertyAccess.range\r\n    );\r\n    return module.createUnreachable();\r\n  }\r\n\r\n  compileTernaryExpression(expression: TernaryExpression, contextualType: Type): ExpressionRef {\r\n    var ifThen = expression.ifThen;\r\n    var ifElse = expression.ifElse;\r\n\r\n    var condExpr = makeIsTrueish(\r\n      this.compileExpression(expression.condition, Type.u32, ConversionKind.NONE),\r\n      this.currentType,\r\n      this.module\r\n    );\r\n\r\n    // Eliminate unnecesssary branches in generic contexts if the condition is constant\r\n    if (\r\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT) &&\r\n      _BinaryenExpressionGetId(condExpr = this.precomputeExpressionRef(condExpr)) == ExpressionId.Const &&\r\n      _BinaryenExpressionGetType(condExpr) == NativeType.I32\r\n    ) {\r\n      return _BinaryenConstGetValueI32(condExpr)\r\n        ? this.compileExpression(ifThen, contextualType)\r\n        : this.compileExpression(ifElse, contextualType);\r\n    }\r\n\r\n    var currentFunction = this.currentFunction;\r\n    var ifThenExpr: ExpressionRef;\r\n    var ifElseExpr: ExpressionRef;\r\n\r\n    // if part of a constructor, keep track of memory allocations\r\n    if (currentFunction.is(CommonFlags.CONSTRUCTOR)) {\r\n      let flow = currentFunction.flow;\r\n\r\n      flow = flow.enterBranchOrScope();\r\n      currentFunction.flow = flow;\r\n      ifThenExpr = this.compileExpression(ifThen, contextualType);\r\n      let ifThenAllocates = flow.is(FlowFlags.ALLOCATES);\r\n      flow = flow.leaveBranchOrScope();\r\n      currentFunction.flow = flow;\r\n\r\n      flow = flow.enterBranchOrScope();\r\n      currentFunction.flow = flow;\r\n      ifElseExpr = this.compileExpression(ifElse, contextualType);\r\n      let ifElseAllocates = flow.is(FlowFlags.ALLOCATES);\r\n      flow = flow.leaveBranchOrScope();\r\n      currentFunction.flow = flow;\r\n\r\n      if (ifThenAllocates && ifElseAllocates) flow.set(FlowFlags.ALLOCATES);\r\n\r\n    // otherwise simplify\r\n    } else {\r\n      ifThenExpr = this.compileExpression(ifThen, contextualType);\r\n      ifElseExpr = this.compileExpression(ifElse, contextualType);\r\n    }\r\n\r\n    return this.module.createIf(condExpr, ifThenExpr, ifElseExpr);\r\n  }\r\n\r\n  compileUnaryPostfixExpression(expression: UnaryPostfixExpression, contextualType: Type): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n\r\n    // make a getter for the expression (also obtains the type)\r\n    var getValue = this.compileExpression( // reports\r\n      expression.operand,\r\n      contextualType == Type.void\r\n        ? Type.i32\r\n        : contextualType,\r\n      ConversionKind.NONE,\r\n      false // wrapped below\r\n    );\r\n    if (_BinaryenExpressionGetId(getValue) == ExpressionId.Unreachable) {\r\n      // shortcut if compiling the getter already failed\r\n      return getValue;\r\n    }\r\n    var currentType = this.currentType;\r\n\r\n    var op: BinaryOp;\r\n    var nativeType: NativeType;\r\n    var nativeOne: ExpressionRef;\r\n    var possiblyOverflows = false;\r\n\r\n    switch (expression.operator) {\r\n      case Token.PLUS_PLUS: {\r\n        if (currentType.is(TypeFlags.REFERENCE)) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        switch (currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true;\r\n          default: {\r\n            op = BinaryOp.AddI32;\r\n            nativeType = NativeType.I32;\r\n            nativeOne = module.createI32(1);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: // TODO: check operator overload\r\n          case TypeKind.ISIZE: {\r\n            let options = this.options;\r\n            op = options.isWasm64\r\n              ? BinaryOp.AddI64\r\n              : BinaryOp.AddI32;\r\n            nativeType = options.nativeSizeType;\r\n            nativeOne = currentType.toNativeOne(module);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            op = BinaryOp.AddI64;\r\n            nativeType = NativeType.I64;\r\n            nativeOne = module.createI64(1);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            op = BinaryOp.AddF32;\r\n            nativeType = NativeType.F32;\r\n            nativeOne = module.createF32(1);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            op = BinaryOp.AddF64;\r\n            nativeType = NativeType.F64;\r\n            nativeOne = module.createF64(1);\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.MINUS_MINUS: {\r\n        if (currentType.is(TypeFlags.REFERENCE)) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        switch (currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true;\r\n          default: {\r\n            op = BinaryOp.SubI32;\r\n            nativeType = NativeType.I32;\r\n            nativeOne = module.createI32(1);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: // TODO: check operator overload\r\n          case TypeKind.ISIZE: {\r\n            let options = this.options;\r\n            op = options.isWasm64\r\n              ? BinaryOp.SubI64\r\n              : BinaryOp.SubI32;\r\n            nativeType = options.nativeSizeType;\r\n            nativeOne = currentType.toNativeOne(module);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            op = BinaryOp.SubI64;\r\n            nativeType = NativeType.I64;\r\n            nativeOne = module.createI64(1);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            op = BinaryOp.SubF32;\r\n            nativeType = NativeType.F32;\r\n            nativeOne = module.createF32(1);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            op = BinaryOp.SubF64;\r\n            nativeType = NativeType.F64;\r\n            nativeOne = module.createF64(1);\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    var setValue: ExpressionRef;\r\n    var tempLocal: Local | null = null;\r\n\r\n    // simplify if dropped anyway\r\n    if (contextualType == Type.void) {\r\n      setValue = module.createBinary(op,\r\n        getValue,\r\n        nativeOne\r\n      );\r\n\r\n    // otherwise use a temp local for the intermediate value\r\n    } else {\r\n      tempLocal = currentFunction.getTempLocal(currentType);\r\n      setValue = module.createBinary(op,\r\n        this.module.createGetLocal(tempLocal.index, nativeType),\r\n        nativeOne\r\n      );\r\n    }\r\n\r\n    if (possiblyOverflows) {\r\n      assert(currentType.is(TypeFlags.SMALL | TypeFlags.INTEGER));\r\n      setValue = makeSmallIntegerWrap(setValue, currentType, module);\r\n    }\r\n\r\n    setValue = this.compileAssignmentWithValue(expression.operand, setValue, false);\r\n    // ^ sets currentType = void\r\n    if (contextualType == Type.void) {\r\n      assert(!tempLocal);\r\n      return setValue;\r\n    }\r\n\r\n    this.currentType = assert(tempLocal).type;\r\n    currentFunction.freeTempLocal(<Local>tempLocal);\r\n    var localIndex = (<Local>tempLocal).index;\r\n    return module.createBlock(null, [\r\n      module.createSetLocal(localIndex, getValue),\r\n      setValue,\r\n      module.createGetLocal(localIndex, nativeType)\r\n    ], nativeType);\r\n  }\r\n\r\n  compileUnaryPrefixExpression(\r\n    expression: UnaryPrefixExpression,\r\n    contextualType: Type,\r\n    wrapSmallIntegers: bool = true\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var currentType = this.currentType;\r\n\r\n    var possiblyOverflows = false;\r\n    var compound = false;\r\n    var expr: ExpressionRef;\r\n\r\n    switch (expression.operator) {\r\n      case Token.PLUS: {\r\n        if (currentType.is(TypeFlags.REFERENCE)) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          false // wrapped below\r\n        );\r\n        currentType = this.currentType;\r\n        possiblyOverflows = currentType.is(TypeFlags.SMALL | TypeFlags.INTEGER); // if operand already did\r\n        break;\r\n      }\r\n      case Token.MINUS: {\r\n        if (currentType.is(TypeFlags.REFERENCE)) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        if (expression.operand.kind == NodeKind.LITERAL && (\r\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.INTEGER ||\r\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.FLOAT\r\n        )) {\r\n          // implicitly negate integer and float literals. also enables proper checking of literal ranges.\r\n          expr = this.compileLiteralExpression(<LiteralExpression>expression.operand, contextualType, true);\r\n          if (this.options.sourceMap) {\r\n            // compileExpression normally does this\r\n            addDebugLocation(expr, expression.range, module, this.currentFunction);\r\n          }\r\n          currentType = this.currentType;\r\n        } else {\r\n          expr = this.compileExpression(\r\n            expression.operand,\r\n            contextualType == Type.void\r\n              ? Type.i32\r\n              : contextualType,\r\n            ConversionKind.NONE,\r\n            false // wrapped below\r\n          );\r\n          currentType = this.currentType;\r\n          switch (currentType.kind) {\r\n            case TypeKind.I8:\r\n            case TypeKind.I16:\r\n            case TypeKind.U8:\r\n            case TypeKind.U16:\r\n            case TypeKind.BOOL: possiblyOverflows = true; // or if operand already did\r\n            default: {\r\n              expr = module.createBinary(BinaryOp.SubI32, module.createI32(0), expr);\r\n              break;\r\n            }\r\n            case TypeKind.USIZE: {\r\n              if (currentType.is(TypeFlags.REFERENCE)) {\r\n                this.error(\r\n                  DiagnosticCode.Operation_not_supported,\r\n                  expression.range\r\n                );\r\n                return module.createUnreachable();\r\n              }\r\n              // fall-through\r\n            }\r\n            case TypeKind.ISIZE: {\r\n              expr = module.createBinary(\r\n                this.options.isWasm64\r\n                  ? BinaryOp.SubI64\r\n                  : BinaryOp.SubI32,\r\n                currentType.toNativeZero(module),\r\n                expr\r\n              );\r\n              break;\r\n            }\r\n            case TypeKind.I64:\r\n            case TypeKind.U64: {\r\n              expr = module.createBinary(BinaryOp.SubI64, module.createI64(0), expr);\r\n              break;\r\n            }\r\n            case TypeKind.F32: {\r\n              expr = module.createUnary(UnaryOp.NegF32, expr);\r\n              break;\r\n            }\r\n            case TypeKind.F64: {\r\n              expr = module.createUnary(UnaryOp.NegF64, expr);\r\n              break;\r\n            }\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.PLUS_PLUS: {\r\n        if (currentType.is(TypeFlags.REFERENCE)) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        compound = true;\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          false // wrapped below\r\n        );\r\n        currentType = this.currentType;\r\n        switch (currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true; // or if operand already did\r\n          default: {\r\n            expr = module.createBinary(BinaryOp.AddI32, expr, this.module.createI32(1));\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            if (currentType.is(TypeFlags.REFERENCE)) {\r\n              this.error(\r\n                DiagnosticCode.Operation_not_supported,\r\n                expression.range\r\n              );\r\n              return module.createUnreachable();\r\n            }\r\n            // fall-through\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.AddI64\r\n                : BinaryOp.AddI32,\r\n              expr,\r\n              currentType.toNativeOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.AddI64, expr, module.createI64(1));\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.AddF32, expr, module.createF32(1));\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.AddF64, expr, module.createF64(1));\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.MINUS_MINUS: {\r\n        if (currentType.is(TypeFlags.REFERENCE)) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        compound = true;\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          false // wrapped below\r\n        );\r\n        currentType = this.currentType;\r\n        switch (currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true; // or if operand already did\r\n          default: {\r\n            expr = module.createBinary(BinaryOp.SubI32, expr, module.createI32(1));\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            if (currentType.is(TypeFlags.REFERENCE)) {\r\n              this.error(\r\n                DiagnosticCode.Operation_not_supported,\r\n                expression.range\r\n              );\r\n              return module.createUnreachable();\r\n            }\r\n            // fall-through\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              expr,\r\n              currentType.toNativeOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.SubI64, expr, module.createI64(1));\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.SubF32, expr, module.createF32(1));\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.SubF64, expr, module.createF64(1));\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.EXCLAMATION: {\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          true // must wrap small integers\r\n        );\r\n        expr = makeIsFalseish(expr, this.currentType, module);\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.TILDE: {\r\n        if (currentType.is(TypeFlags.REFERENCE)) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType.is(TypeFlags.FLOAT)\r\n              ? Type.i64\r\n              : contextualType,\r\n          contextualType == Type.void\r\n            ? ConversionKind.NONE\r\n            : ConversionKind.IMPLICIT,\r\n          false // retains low bits of small integers\r\n        );\r\n        currentType = this.currentType;\r\n        switch (currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true; // or if operand already did\r\n          default: {\r\n            expr = module.createBinary(BinaryOp.XorI32, expr, module.createI32(-1));\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            if (currentType.is(TypeFlags.REFERENCE)) {\r\n              this.error(\r\n                DiagnosticCode.Operation_not_supported,\r\n                expression.range\r\n              );\r\n              return module.createUnreachable();\r\n            }\r\n            // fall-through\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.XorI64\r\n                : BinaryOp.XorI32,\r\n              expr,\r\n              currentType.toNativeNegOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.XorI64, expr, module.createI64(-1, -1));\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.TYPEOF: {\r\n        // it might make sense to implement typeof in a way that a generic function can detect\r\n        // whether its type argument is a class type or string. that could then be used, for\r\n        // example, to generate hash codes for sets and maps, depending on the kind of type\r\n        // parameter we have. ideally the comparison would not involve actual string comparison and\r\n        // limit available operations to hard-coded string literals.\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      default: {\r\n        assert(false);\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n    if (possiblyOverflows && wrapSmallIntegers) {\r\n      assert(currentType.is(TypeFlags.SMALL | TypeFlags.INTEGER));\r\n      expr = makeSmallIntegerWrap(expr, currentType, module);\r\n    }\r\n    return compound\r\n      ? this.compileAssignmentWithValue(expression.operand, expr, contextualType != Type.void)\r\n      : expr;\r\n  }\r\n}\r\n\r\n// helpers\r\n\r\n/** Adds the debug location of the specified expression at the specified range to the source map. */\r\nfunction addDebugLocation(expr: ExpressionRef, range: Range, module: Module, currentFunction: Function): void {\r\n  var source = range.source;\r\n  if (source.debugInfoIndex < 0) {\r\n    source.debugInfoIndex = module.addDebugInfoFile(source.normalizedPath);\r\n  }\r\n  range.debugInfoRef = expr;\r\n  if (!currentFunction.debugLocations) currentFunction.debugLocations = [];\r\n  currentFunction.debugLocations.push(range);\r\n}\r\n\r\n/** Wraps a 32-bit integer expression so it evaluates to a valid value of the specified type. */\r\nexport function makeSmallIntegerWrap(expr: ExpressionRef, type: Type, module: Module): ExpressionRef {\r\n  switch (type.kind) {\r\n    case TypeKind.I8: {\r\n      return module.createBinary(BinaryOp.ShrI32,\r\n        module.createBinary(BinaryOp.ShlI32,\r\n          expr,\r\n          module.createI32(24)\r\n        ),\r\n        module.createI32(24)\r\n      );\r\n    }\r\n    case TypeKind.I16: {\r\n      return module.createBinary(BinaryOp.ShrI32,\r\n        module.createBinary(BinaryOp.ShlI32,\r\n          expr,\r\n          module.createI32(16)\r\n        ),\r\n        module.createI32(16)\r\n      );\r\n    }\r\n    case TypeKind.U8: {\r\n      return module.createBinary(BinaryOp.AndI32,\r\n        expr,\r\n        module.createI32(0xff)\r\n      );\r\n    }\r\n    case TypeKind.U16: {\r\n      return module.createBinary(BinaryOp.AndI32,\r\n        expr,\r\n        module.createI32(0xffff)\r\n      );\r\n    }\r\n    case TypeKind.BOOL: {\r\n      return module.createBinary(BinaryOp.AndI32,\r\n        expr,\r\n        module.createI32(0x1)\r\n      );\r\n    }\r\n    default: {\r\n      assert(false);\r\n      return expr;\r\n    }\r\n  }\r\n}\r\n\r\n/** Creates a comparison whether an expression is not 'true' in a broader sense. */\r\nexport function makeIsFalseish(expr: ExpressionRef, type: Type, module: Module): ExpressionRef {\r\n  switch (type.kind) {\r\n    default: { // any native i32\r\n      return module.createUnary(UnaryOp.EqzI32, expr);\r\n    }\r\n    case TypeKind.I64:\r\n    case TypeKind.U64: {\r\n      return module.createUnary(UnaryOp.EqzI64, expr);\r\n    }\r\n    case TypeKind.USIZE: // TODO: strings?\r\n    case TypeKind.ISIZE: {\r\n      return module.createUnary(type.size == 64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32, expr);\r\n    }\r\n    case TypeKind.F32: {\r\n      return module.createBinary(BinaryOp.EqF32, expr, module.createF32(0));\r\n    }\r\n    case TypeKind.F64: {\r\n      return module.createBinary(BinaryOp.EqF64, expr, module.createF64(0));\r\n    }\r\n    case TypeKind.VOID: {\r\n      assert(false);\r\n      return module.createI32(1);\r\n    }\r\n  }\r\n}\r\n\r\n/** Creates a comparison whether an expression is 'true' in a broader sense. */\r\nexport function makeIsTrueish(expr: ExpressionRef, type: Type, module: Module): ExpressionRef {\r\n  switch (type.kind) {\r\n    default: { // any native i32\r\n      return expr;\r\n    }\r\n    case TypeKind.I64:\r\n    case TypeKind.U64: {\r\n      return module.createBinary(BinaryOp.NeI64, expr, module.createI64(0));\r\n    }\r\n    case TypeKind.USIZE: // TODO: strings?\r\n    case TypeKind.ISIZE: {\r\n      return type.size == 64\r\n        ? module.createBinary(BinaryOp.NeI64, expr, module.createI64(0))\r\n        : expr;\r\n    }\r\n    case TypeKind.F32: {\r\n      return module.createBinary(BinaryOp.NeF32, expr, module.createF32(0));\r\n    }\r\n    case TypeKind.F64: {\r\n      return module.createBinary(BinaryOp.NeF64, expr, module.createF64(0));\r\n    }\r\n    case TypeKind.VOID: {\r\n      assert(false);\r\n      return module.createI32(0);\r\n    }\r\n  }\r\n}\r\n\r\n/** Makes an allocation expression for an instance of the specified class. */\r\nexport function makeAllocate(compiler: Compiler, classInstance: Class, reportNode: Node): ExpressionRef {\r\n  var module = compiler.module;\r\n  var currentFunction = compiler.currentFunction;\r\n  var nativeSizeType = compiler.options.nativeSizeType;\r\n\r\n  var tempLocal = currentFunction.getTempLocal(classInstance.type);\r\n\r\n  // allocate the necessary memory\r\n  var initializers = new Array<ExpressionRef>();\r\n  initializers.push(\r\n    module.createSetLocal(tempLocal.index,\r\n      compileBuiltinAllocate(compiler, classInstance, reportNode)\r\n    )\r\n  );\r\n\r\n  // apply field initializers\r\n  if (classInstance.members) {\r\n    for (let member of classInstance.members.values()) {\r\n      if (member.kind == ElementKind.FIELD) {\r\n        let field = <Field>member;\r\n        let fieldType = field.type;\r\n        let nativeFieldType = fieldType.toNativeType();\r\n        let fieldDeclaration = field.prototype.declaration;\r\n        assert(!field.isAny(CommonFlags.CONST));\r\n        if (fieldDeclaration.initializer) { // use initializer\r\n          initializers.push(module.createStore(fieldType.byteSize,\r\n            module.createGetLocal(tempLocal.index, nativeSizeType),\r\n            compiler.compileExpression(fieldDeclaration.initializer, fieldType), // reports\r\n            nativeFieldType,\r\n            field.memoryOffset\r\n          ));\r\n        } else { // initialize with zero\r\n          // TODO: might be unnecessary if the ctor initializes the field\r\n          let parameterIndex = (<FieldDeclaration>field.prototype.declaration).parameterIndex;\r\n          initializers.push(module.createStore(fieldType.byteSize,\r\n            module.createGetLocal(tempLocal.index, nativeSizeType),\r\n            parameterIndex >= 0 // initialized via parameter\r\n              ? module.createGetLocal(1 + parameterIndex, nativeFieldType)\r\n              : fieldType.toNativeZero(module),\r\n              nativeFieldType,\r\n            field.memoryOffset\r\n          ));\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // return `this`\r\n  initializers.push(\r\n    module.createGetLocal(tempLocal.index, nativeSizeType)\r\n  );\r\n\r\n  currentFunction.freeTempLocal(tempLocal);\r\n  compiler.currentType = classInstance.type;\r\n  return module.createBlock(null, initializers, nativeSizeType);\r\n}\r\n\r\n/** Makes a conditional allocation expression inside of the constructor of the specified class. */\r\nexport function makeConditionalAllocate(compiler: Compiler, classInstance: Class, reportNode: Node): ExpressionRef {\r\n  // requires that `this` is the first local\r\n  var module = compiler.module;\r\n  var nativeSizeType = compiler.options.nativeSizeType;\r\n  compiler.currentType = classInstance.type;\r\n  return module.createIf(\r\n    nativeSizeType == NativeType.I64\r\n      ? module.createBinary(\r\n          BinaryOp.NeI64,\r\n          module.createGetLocal(0, NativeType.I64),\r\n          module.createI64(0)\r\n        )\r\n      : module.createGetLocal(0, NativeType.I32),\r\n    module.createGetLocal(0, nativeSizeType),\r\n    module.createTeeLocal(0,\r\n      makeAllocate(compiler, classInstance, reportNode)\r\n    )\r\n  );\r\n}\r\n","/**\n * Generated from diagnosticsMessages.json. Do not edit.\n * @module diagnostics\n *//***/\n\n/* tslint:disable:max-line-length */\n\n/** Enum of available diagnostic codes. */\nexport enum DiagnosticCode {\n  Operation_not_supported = 100,\n  Operation_is_unsafe = 101,\n  Conversion_from_type_0_to_1_requires_an_explicit_cast = 200,\n  Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit = 201,\n  Type_0_cannot_be_changed_to_type_1 = 202,\n  Type_0_cannot_be_reinterpreted_as_type_1 = 203,\n  Basic_type_0_cannot_be_nullable = 204,\n  Cannot_export_a_mutable_global = 205,\n  Compiling_constant_with_non_constant_initializer_as_mutable = 206,\n  Structs_cannot_extend_classes_and_vice_versa = 207,\n  Structs_cannot_implement_interfaces = 208,\n  Invalid_regular_expression_flags = 209,\n  Implementation_0_must_match_the_signature_1 = 210,\n  Class_0_is_sealed_and_cannot_be_extended = 211,\n  Unterminated_string_literal = 1002,\n  Identifier_expected = 1003,\n  _0_expected = 1005,\n  A_file_cannot_have_a_reference_to_itself = 1006,\n  Trailing_comma_not_allowed = 1009,\n  Unexpected_token = 1012,\n  A_rest_parameter_must_be_last_in_a_parameter_list = 1014,\n  Parameter_cannot_have_question_mark_and_initializer = 1015,\n  A_required_parameter_cannot_follow_an_optional_parameter = 1016,\n  Enum_member_must_have_initializer = 1061,\n  Statements_are_not_allowed_in_ambient_contexts = 1036,\n  Initializers_are_not_allowed_in_ambient_contexts = 1039,\n  _0_modifier_cannot_be_used_here = 1042,\n  A_rest_parameter_cannot_be_optional = 1047,\n  A_rest_parameter_cannot_have_an_initializer = 1048,\n  A_set_accessor_must_have_exactly_one_parameter = 1049,\n  A_set_accessor_parameter_cannot_have_an_initializer = 1052,\n  A_get_accessor_cannot_have_parameters = 1054,\n  Type_parameters_cannot_appear_on_a_constructor_declaration = 1092,\n  Type_annotation_cannot_appear_on_a_constructor_declaration = 1093,\n  An_accessor_cannot_have_type_parameters = 1094,\n  A_set_accessor_cannot_have_a_return_type_annotation = 1095,\n  Type_parameter_list_cannot_be_empty = 1098,\n  A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement = 1104,\n  A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement = 1105,\n  A_return_statement_can_only_be_used_within_a_function_body = 1108,\n  Expression_expected = 1109,\n  Type_expected = 1110,\n  A_default_clause_cannot_appear_more_than_once_in_a_switch_statement = 1113,\n  Duplicate_label_0 = 1114,\n  Octal_literals_are_not_allowed_in_strict_mode = 1121,\n  Digit_expected = 1124,\n  Hexadecimal_digit_expected = 1125,\n  Unexpected_end_of_text = 1126,\n  Invalid_character = 1127,\n  _case_or_default_expected = 1130,\n  A_declare_modifier_cannot_be_used_in_an_already_ambient_context = 1038,\n  Type_argument_expected = 1140,\n  String_literal_expected = 1141,\n  Line_break_not_permitted_here = 1142,\n  Declaration_expected = 1146,\n  _const_declarations_must_be_initialized = 1155,\n  Unterminated_regular_expression_literal = 1161,\n  Interface_declaration_cannot_have_implements_clause = 1176,\n  Binary_digit_expected = 1177,\n  Octal_digit_expected = 1178,\n  An_implementation_cannot_be_declared_in_ambient_contexts = 1183,\n  An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive = 1198,\n  Unterminated_Unicode_escape_sequence = 1199,\n  Decorators_are_not_valid_here = 1206,\n  _abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration = 1242,\n  A_class_may_only_extend_another_class = 1311,\n  A_parameter_property_cannot_be_declared_using_a_rest_parameter = 1317,\n  Duplicate_identifier_0 = 2300,\n  Cannot_find_name_0 = 2304,\n  Module_0_has_no_exported_member_1 = 2305,\n  Generic_type_0_requires_1_type_argument_s = 2314,\n  Type_0_is_not_generic = 2315,\n  Type_0_is_not_assignable_to_type_1 = 2322,\n  Index_signature_is_missing_in_type_0 = 2329,\n  _this_cannot_be_referenced_in_current_location = 2332,\n  _super_can_only_be_referenced_in_a_derived_class = 2335,\n  Property_0_does_not_exist_on_type_1 = 2339,\n  Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures = 2349,\n  Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature = 2351,\n  A_function_whose_declared_type_is_not_void_must_return_a_value = 2355,\n  The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access = 2357,\n  The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access = 2364,\n  Operator_0_cannot_be_applied_to_types_1_and_2 = 2365,\n  _get_and_set_accessor_must_have_the_same_type = 2380,\n  Constructor_implementation_is_missing = 2390,\n  Function_implementation_is_missing_or_not_immediately_following_the_declaration = 2391,\n  Multiple_constructor_implementations_are_not_allowed = 2392,\n  Duplicate_function_implementation = 2393,\n  Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local = 2395,\n  Type_0_has_no_property_1 = 2460,\n  The_0_operator_cannot_be_applied_to_type_1 = 2469,\n  Export_declaration_conflicts_with_exported_declaration_of_0 = 2484,\n  Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property = 2540,\n  The_target_of_an_assignment_must_be_a_variable_or_a_property_access = 2541,\n  Index_signature_in_type_0_only_permits_reading = 2542,\n  Expected_0_arguments_but_got_1 = 2554,\n  Expected_at_least_0_arguments_but_got_1 = 2555,\n  Expected_0_type_arguments_but_got_1 = 2558,\n  A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums = 2651,\n  Namespace_0_has_no_exported_member_1 = 2694,\n  File_0_not_found = 6054\n}\n\n/** Translates a diagnostic code to its respective string. */\nexport function diagnosticCodeToString(code: DiagnosticCode): string {\n  switch (code) {\n    case 100: return \"Operation not supported.\";\n    case 101: return \"Operation is unsafe.\";\n    case 200: return \"Conversion from type '{0}' to '{1}' requires an explicit cast.\";\n    case 201: return \"Conversion from type '{0}' to '{1}' will require an explicit cast when switching between 32/64-bit.\";\n    case 202: return \"Type '{0}' cannot be changed to type '{1}'.\";\n    case 203: return \"Type '{0}' cannot be reinterpreted as type '{1}'.\";\n    case 204: return \"Basic type '{0}' cannot be nullable.\";\n    case 205: return \"Cannot export a mutable global.\";\n    case 206: return \"Compiling constant with non-constant initializer as mutable.\";\n    case 207: return \"Structs cannot extend classes and vice-versa.\";\n    case 208: return \"Structs cannot implement interfaces.\";\n    case 209: return \"Invalid regular expression flags.\";\n    case 210: return \"Implementation '{0}' must match the signature '{1}'.\";\n    case 211: return \"Class '{0}' is sealed and cannot be extended.\";\n    case 1002: return \"Unterminated string literal.\";\n    case 1003: return \"Identifier expected.\";\n    case 1005: return \"'{0}' expected.\";\n    case 1006: return \"A file cannot have a reference to itself.\";\n    case 1009: return \"Trailing comma not allowed.\";\n    case 1012: return \"Unexpected token.\";\n    case 1014: return \"A rest parameter must be last in a parameter list.\";\n    case 1015: return \"Parameter cannot have question mark and initializer.\";\n    case 1016: return \"A required parameter cannot follow an optional parameter.\";\n    case 1061: return \"Enum member must have initializer.\";\n    case 1036: return \"Statements are not allowed in ambient contexts.\";\n    case 1039: return \"Initializers are not allowed in ambient contexts.\";\n    case 1042: return \"'{0}' modifier cannot be used here.\";\n    case 1047: return \"A rest parameter cannot be optional.\";\n    case 1048: return \"A rest parameter cannot have an initializer.\";\n    case 1049: return \"A 'set' accessor must have exactly one parameter.\";\n    case 1052: return \"A 'set' accessor parameter cannot have an initializer.\";\n    case 1054: return \"A 'get' accessor cannot have parameters.\";\n    case 1092: return \"Type parameters cannot appear on a constructor declaration.\";\n    case 1093: return \"Type annotation cannot appear on a constructor declaration.\";\n    case 1094: return \"An accessor cannot have type parameters.\";\n    case 1095: return \"A 'set' accessor cannot have a return type annotation.\";\n    case 1098: return \"Type parameter list cannot be empty.\";\n    case 1104: return \"A 'continue' statement can only be used within an enclosing iteration statement.\";\n    case 1105: return \"A 'break' statement can only be used within an enclosing iteration or switch statement.\";\n    case 1108: return \"A 'return' statement can only be used within a function body.\";\n    case 1109: return \"Expression expected.\";\n    case 1110: return \"Type expected.\";\n    case 1113: return \"A 'default' clause cannot appear more than once in a 'switch' statement.\";\n    case 1114: return \"Duplicate label '{0}'.\";\n    case 1121: return \"Octal literals are not allowed in strict mode.\";\n    case 1124: return \"Digit expected.\";\n    case 1125: return \"Hexadecimal digit expected.\";\n    case 1126: return \"Unexpected end of text.\";\n    case 1127: return \"Invalid character.\";\n    case 1130: return \"'case' or 'default' expected.\";\n    case 1038: return \"A 'declare' modifier cannot be used in an already ambient context.\";\n    case 1140: return \"Type argument expected.\";\n    case 1141: return \"String literal expected.\";\n    case 1142: return \"Line break not permitted here.\";\n    case 1146: return \"Declaration expected.\";\n    case 1155: return \"'const' declarations must be initialized.\";\n    case 1161: return \"Unterminated regular expression literal.\";\n    case 1176: return \"Interface declaration cannot have 'implements' clause.\";\n    case 1177: return \"Binary digit expected.\";\n    case 1178: return \"Octal digit expected.\";\n    case 1183: return \"An implementation cannot be declared in ambient contexts.\";\n    case 1198: return \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\";\n    case 1199: return \"Unterminated Unicode escape sequence.\";\n    case 1206: return \"Decorators are not valid here.\";\n    case 1242: return \"'abstract' modifier can only appear on a class, method, or property declaration.\";\n    case 1311: return \"A class may only extend another class.\";\n    case 1317: return \"A parameter property cannot be declared using a rest parameter.\";\n    case 2300: return \"Duplicate identifier '{0}'.\";\n    case 2304: return \"Cannot find name '{0}'.\";\n    case 2305: return \"Module '{0}' has no exported member '{1}'.\";\n    case 2314: return \"Generic type '{0}' requires {1} type argument(s).\";\n    case 2315: return \"Type '{0}' is not generic.\";\n    case 2322: return \"Type '{0}' is not assignable to type '{1}'.\";\n    case 2329: return \"Index signature is missing in type '{0}'.\";\n    case 2332: return \"'this' cannot be referenced in current location.\";\n    case 2335: return \"'super' can only be referenced in a derived class.\";\n    case 2339: return \"Property '{0}' does not exist on type '{1}'.\";\n    case 2349: return \"Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.\";\n    case 2351: return \"Cannot use 'new' with an expression whose type lacks a construct signature.\";\n    case 2355: return \"A function whose declared type is not 'void' must return a value.\";\n    case 2357: return \"The operand of an increment or decrement operator must be a variable or a property access.\";\n    case 2364: return \"The left-hand side of an assignment expression must be a variable or a property access.\";\n    case 2365: return \"Operator '{0}' cannot be applied to types '{1}' and '{2}'.\";\n    case 2380: return \"'get' and 'set' accessor must have the same type.\";\n    case 2390: return \"Constructor implementation is missing.\";\n    case 2391: return \"Function implementation is missing or not immediately following the declaration.\";\n    case 2392: return \"Multiple constructor implementations are not allowed.\";\n    case 2393: return \"Duplicate function implementation.\";\n    case 2395: return \"Individual declarations in merged declaration '{0}' must be all exported or all local.\";\n    case 2460: return \"Type '{0}' has no property '{1}'.\";\n    case 2469: return \"The '{0}' operator cannot be applied to type '{1}'.\";\n    case 2484: return \"Export declaration conflicts with exported declaration of '{0}'.\";\n    case 2540: return \"Cannot assign to '{0}' because it is a constant or a read-only property.\";\n    case 2541: return \"The target of an assignment must be a variable or a property access.\";\n    case 2542: return \"Index signature in type '{0}' only permits reading.\";\n    case 2554: return \"Expected {0} arguments, but got {1}.\";\n    case 2555: return \"Expected at least {0} arguments, but got {1}.\";\n    case 2558: return \"Expected {0} type arguments, but got {1}.\";\n    case 2651: return \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\";\n    case 2694: return \"Namespace '{0}' has no exported member '{1}'.\";\n    case 6054: return \"File '{0}' not found.\";\n    default: return \"\";\n  }\n}\n","/**\r\n * A TypeScript parser for the AssemblyScript subset.\r\n * @module parser\r\n *//***/\r\n\r\nimport {\r\n  Program,\r\n  CommonFlags,\r\n  LIBRARY_PREFIX,\r\n  PATH_DELIMITER\r\n} from \"./program\";\r\n\r\nimport {\r\n  Tokenizer,\r\n  Token,\r\n  Range,\r\n  CommentHandler\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  normalizePath\r\n} from \"./util\";\r\n\r\nimport {\r\n\r\n  Node,\r\n  NodeKind,\r\n  Source,\r\n  SourceKind,\r\n  CommonTypeNode,\r\n  TypeNode,\r\n  SignatureNode,\r\n\r\n  Expression,\r\n  AssertionKind,\r\n  CallExpression,\r\n  IdentifierExpression,\r\n  StringLiteralExpression,\r\n\r\n  Statement,\r\n  BlockStatement,\r\n  BreakStatement,\r\n  ClassDeclaration,\r\n  ContinueStatement,\r\n  DeclarationStatement,\r\n  DecoratorNode,\r\n  DoStatement,\r\n  EnumDeclaration,\r\n  EnumValueDeclaration,\r\n  ExportImportStatement,\r\n  ExportMember,\r\n  ExportStatement,\r\n  ExpressionStatement,\r\n  ForStatement,\r\n  FunctionExpression,\r\n  FunctionDeclaration,\r\n  IfStatement,\r\n  ImportDeclaration,\r\n  ImportStatement,\r\n  NamespaceDeclaration,\r\n  ParameterNode,\r\n  ParameterKind,\r\n  ReturnStatement,\r\n  SwitchCase,\r\n  SwitchStatement,\r\n  ThrowStatement,\r\n  TryStatement,\r\n  TypeDeclaration,\r\n  TypeParameterNode,\r\n  VariableStatement,\r\n  VariableDeclaration,\r\n  VoidStatement,\r\n  WhileStatement,\r\n\r\n  mangleInternalPath\r\n} from \"./ast\";\r\n\r\nconst builtinsFile = LIBRARY_PREFIX + \"builtins.ts\";\r\n\r\n/** Parser interface. */\r\nexport class Parser extends DiagnosticEmitter {\r\n\r\n  /** Program being created. */\r\n  program: Program;\r\n  /** Log of source file names to be requested. */\r\n  backlog: string[] = new Array();\r\n  /** Log of source file names already processed. */\r\n  seenlog: Set<string> = new Set();\r\n  /** Optional handler to intercept comments while tokenizing. */\r\n  onComment: CommentHandler | null = null;\r\n\r\n  /** Constructs a new parser. */\r\n  constructor() {\r\n    super();\r\n    this.program = new Program(this.diagnostics);\r\n  }\r\n\r\n  /** Parses a file and adds its definitions to the program. */\r\n  parseFile(\r\n    text: string,\r\n    path: string,\r\n    isEntry: bool\r\n  ): void {\r\n    var program = this.program;\r\n\r\n    // check if already parsed\r\n    var normalizedPath = normalizePath(path);\r\n    var internalPath = mangleInternalPath(normalizedPath);\r\n    var sources = program.sources;\r\n    for (let i = 0, k = sources.length; i < k; ++i) {\r\n      if (sources[i].internalPath == internalPath) return;\r\n    }\r\n    this.seenlog.add(internalPath);\r\n\r\n    // create the source element\r\n    var source = new Source(\r\n      normalizedPath,\r\n      text,\r\n      isEntry\r\n        ? SourceKind.ENTRY\r\n        : path.startsWith(LIBRARY_PREFIX) && path.indexOf(PATH_DELIMITER, LIBRARY_PREFIX.length) < 0\r\n          ? SourceKind.LIBRARY\r\n          : SourceKind.DEFAULT\r\n    );\r\n    sources.push(source);\r\n\r\n    // mark the special builtins library file\r\n    if (source.normalizedPath == builtinsFile) {\r\n      source.set(CommonFlags.BUILTIN);\r\n    }\r\n\r\n    // tokenize and parse\r\n    var tn = new Tokenizer(source, program.diagnostics);\r\n    tn.onComment = this.onComment;\r\n    source.tokenizer = tn;\r\n    var statements = source.statements;\r\n    while (!tn.skip(Token.ENDOFFILE)) {\r\n      let statement = this.parseTopLevelStatement(tn);\r\n      if (statement) {\r\n        statement.parent = source;\r\n        statements.push(statement);\r\n      }\r\n    }\r\n    tn.finish();\r\n  }\r\n\r\n  /** Parses a top-level statement. */\r\n  parseTopLevelStatement(\r\n    tn: Tokenizer,\r\n    namespace: Node | null = null\r\n  ): Statement | null {\r\n    var flags = CommonFlags.NONE;\r\n    var startPos: i32 = -1;\r\n\r\n    // check decorators\r\n    var decorators: DecoratorNode[] | null = null;\r\n    while (tn.skip(Token.AT)) {\r\n      if (startPos < 0) startPos = tn.tokenPos;\r\n      let decorator = this.parseDecorator(tn);\r\n      if (!decorator) break;\r\n      let name = decorator.name;\r\n      if (name.kind == NodeKind.IDENTIFIER) {\r\n        let text = (<IdentifierExpression>name).text;\r\n        if (text == \"global\") {\r\n          flags |= CommonFlags.GLOBAL;\r\n          continue;\r\n        }\r\n        if (text == \"unmananged\") {\r\n          flags |= CommonFlags.UNMANAGED;\r\n          continue;\r\n        }\r\n        if (text == \"sealed\") {\r\n          flags |= CommonFlags.SEALED;\r\n          continue;\r\n        }\r\n      }\r\n      if (!decorators) decorators = [];\r\n      decorators.push(decorator);\r\n    }\r\n\r\n    // mark builtins\r\n    flags |= (tn.source.flags & CommonFlags.BUILTIN);\r\n\r\n    // check modifiers\r\n    var exportStart: i32 = 0;\r\n    var exportEnd: i32 = 0;\r\n    if (tn.skip(Token.EXPORT)) {\r\n      if (startPos < 0) startPos = tn.tokenPos;\r\n      flags |= CommonFlags.EXPORT;\r\n      exportStart = tn.tokenPos;\r\n      exportEnd = tn.pos;\r\n    }\r\n\r\n    var declareStart: i32 = 0;\r\n    var declareEnd: i32 = 0;\r\n    var contextIsAmbient = namespace != null && namespace.is(CommonFlags.AMBIENT);\r\n    if (tn.skip(Token.DECLARE)) {\r\n      if (startPos < 0) startPos = tn.tokenPos;\r\n      if (contextIsAmbient) {\r\n        this.error(\r\n          DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      flags |= CommonFlags.DECLARE | CommonFlags.AMBIENT;\r\n    } else if (contextIsAmbient) {\r\n      flags |= CommonFlags.AMBIENT;\r\n    }\r\n\r\n    // parse the statement\r\n    var statement: Statement | null = null;\r\n\r\n    // handle declarations\r\n    var first = tn.peek();\r\n    if (startPos < 0) startPos = tn.nextTokenPos;\r\n    switch (first) {\r\n      case Token.CONST: {\r\n        tn.next();\r\n        flags |= CommonFlags.CONST;\r\n        if (tn.skip(Token.ENUM)) {\r\n          statement = this.parseEnum(tn, flags, decorators, startPos);\r\n          break;\r\n        } else {\r\n          statement = this.parseVariable(tn, flags, decorators, startPos);\r\n          decorators = null;\r\n        }\r\n        break;\r\n      }\r\n      case Token.LET: flags |= CommonFlags.LET;\r\n      case Token.VAR: {\r\n        tn.next();\r\n        statement = this.parseVariable(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.ENUM: {\r\n        tn.next();\r\n        statement = this.parseEnum(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.FUNCTION: {\r\n        tn.next();\r\n        statement = this.parseFunction(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.ABSTRACT: {\r\n        tn.next();\r\n        flags |= CommonFlags.ABSTRACT;\r\n        if (!tn.skip(Token.CLASS)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(tn.pos), \"class\"\r\n          );\r\n          break;\r\n        }\r\n        // fall through\r\n      }\r\n      case Token.CLASS:\r\n      case Token.INTERFACE: {\r\n        tn.next();\r\n        statement = this.parseClassOrInterface(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.NAMESPACE: {\r\n        tn.next();\r\n        statement = this.parseNamespace(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.IMPORT: {\r\n        tn.next();\r\n        flags |= CommonFlags.IMPORT;\r\n        if (flags & CommonFlags.EXPORT) {\r\n          statement = this.parseExportImport(tn, startPos);\r\n        } else {\r\n          statement = this.parseImport(tn);\r\n        }\r\n        break;\r\n      }\r\n      case Token.TYPE: {\r\n        tn.next();\r\n        statement = this.parseTypeDeclaration(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      default: {\r\n\r\n        // handle plain exports\r\n        if (flags & CommonFlags.EXPORT) {\r\n          statement = this.parseExport(tn, flags, startPos);\r\n\r\n        // handle non-declaration statements\r\n        } else {\r\n          if (exportEnd) {\r\n            this.error(\r\n              DiagnosticCode._0_modifier_cannot_be_used_here,\r\n              tn.range(exportStart, exportEnd), \"export\"\r\n            ); // recoverable\r\n          }\r\n          if (declareEnd) {\r\n            this.error(\r\n              DiagnosticCode._0_modifier_cannot_be_used_here,\r\n              tn.range(declareStart, declareEnd), \"declare\"\r\n            ); // recoverable\r\n          }\r\n          if (!namespace) {\r\n            statement = this.parseStatement(tn, true);\r\n          } // TODO: else?\r\n        }\r\n        break;\r\n      }\r\n    }\r\n\r\n    // check for decorators that weren't consumed\r\n    if (decorators) {\r\n      for (let i = 0, k = decorators.length; i < k; ++i) {\r\n        this.error(\r\n          DiagnosticCode.Decorators_are_not_valid_here,\r\n          decorators[i].range\r\n        );\r\n      }\r\n    }\r\n    return statement;\r\n  }\r\n\r\n  /** Obtains the next file to parse. */\r\n  nextFile(): string | null {\r\n    var backlog = this.backlog;\r\n    return backlog.length ? backlog.shift() : null;\r\n  }\r\n\r\n  /** Finishes parsing and returns the program. */\r\n  finish(): Program {\r\n    if (this.backlog.length) throw new Error(\"backlog is not empty\");\r\n    this.backlog = [];\r\n    this.seenlog.clear();\r\n    return this.program;\r\n  }\r\n\r\n  /** Parses a type. */\r\n  parseType(\r\n    tn: Tokenizer,\r\n    acceptParenthesized: bool = true,\r\n    suppressErrors: bool = false\r\n  ): CommonTypeNode | null {\r\n\r\n    // NOTE: this parses our limited subset\r\n    var token = tn.next();\r\n    var startPos = tn.tokenPos;\r\n\r\n    // 'void'\r\n    if (token == Token.VOID) {\r\n      return Node.createType(\r\n        Node.createIdentifierExpression(\"void\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n    }\r\n\r\n    var type: CommonTypeNode;\r\n\r\n    // '(' ...\r\n    if (token == Token.OPENPAREN) {\r\n\r\n      // '(' FunctionSignature ')' '|' 'null'?\r\n      let isNullableSignature = tn.skip(Token.OPENPAREN);\r\n      // FunctionSignature?\r\n      let signature = this.tryParseSignature(tn);\r\n      if (signature) {\r\n        if (isNullableSignature) {\r\n          if (!tn.skip(Token.CLOSEPAREN)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \")\"\r\n            );\r\n            return null;\r\n          }\r\n          if (!tn.skip(Token.BAR)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"|\"\r\n            );\r\n            return null;\r\n          }\r\n          if (!tn.skip(Token.NULL)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"null\"\r\n            );\r\n          }\r\n          signature.isNullable = true;\r\n        }\r\n        return signature;\r\n      } else if (isNullableSignature || this.tryParseSignatureIsSignature) {\r\n        this.error(\r\n          DiagnosticCode.Unexpected_token,\r\n          tn.range()\r\n        );\r\n        return null;\r\n      }\r\n\r\n      // Type (',' Type)* ')'\r\n      if (acceptParenthesized) {\r\n        let innerType = this.parseType(tn, false, suppressErrors);\r\n        if (!innerType) return null;\r\n        if (!tn.skip(Token.CLOSEPAREN)) {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(tn.pos), \"}\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n        type = innerType;\r\n        type.range.start = startPos;\r\n        type.range.end = tn.pos;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Unexpected_token,\r\n          tn.range()\r\n        );\r\n        return null;\r\n      }\r\n\r\n    // 'this'\r\n    } else if (token == Token.THIS) {\r\n      type = Node.createType(\r\n        Node.createThisExpression(tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // 'true'\r\n    } else if (token == Token.TRUE || token == Token.FALSE) {\r\n      type = Node.createType(\r\n        Node.createIdentifierExpression(\"bool\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // StringLiteral\r\n    } else if (token == Token.STRINGLITERAL) {\r\n      tn.readString();\r\n      type = Node.createType(\r\n        Node.createIdentifierExpression(\"string\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // Identifier\r\n    } else if (token == Token.IDENTIFIER) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let parameters = new Array<TypeNode>();\r\n      let nullable = false;\r\n\r\n      // Name<T>\r\n      if (tn.skip(Token.LESSTHAN)) {\r\n        do {\r\n          let parameter = this.parseType(tn, true, suppressErrors);\r\n          if (!parameter) return null;\r\n          parameters.push(<TypeNode>parameter);\r\n        } while (tn.skip(Token.COMMA));\r\n        if (!tn.skip(Token.GREATERTHAN)) {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(tn.pos), \">\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n      }\r\n      // ... | null\r\n      if (tn.skip(Token.BAR)) {\r\n        if (tn.skip(Token.NULL)) {\r\n          nullable = true;\r\n        } else {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(tn.pos), \"null\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n      }\r\n      type = Node.createType(identifier, parameters, nullable, tn.range(startPos, tn.pos));\r\n\r\n    } else {\r\n      if (!suppressErrors) {\r\n        this.error(\r\n          DiagnosticCode.Identifier_expected,\r\n          tn.range()\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n    // ... [][]\r\n    while (tn.skip(Token.OPENBRACKET)) {\r\n      let bracketStart = tn.tokenPos;\r\n      if (!tn.skip(Token.CLOSEBRACKET)) {\r\n        if (!suppressErrors) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"]\"\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n      let bracketRange = tn.range(bracketStart, tn.pos);\r\n\r\n      // ...[] | null\r\n      let nullable = false;\r\n      if (tn.skip(Token.BAR)) {\r\n        if (tn.skip(Token.NULL)) {\r\n          nullable = true;\r\n        } else {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"null\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n      }\r\n      type = Node.createType(\r\n        Node.createIdentifierExpression(\"Array\", bracketRange),\r\n        [ type ],\r\n        nullable,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      if (nullable) break;\r\n    }\r\n\r\n    return type;\r\n  }\r\n\r\n  // Indicates whether tryParseSignature determined that it is handling a Signature\r\n  private tryParseSignatureIsSignature: bool = false;\r\n\r\n  /** Parses a function signature, as used in type declarations. */\r\n  tryParseSignature(\r\n    tn: Tokenizer\r\n  ): SignatureNode | null {\r\n\r\n    // at '(': ('...'? Identifier '?'? ':' Type (','  '...'? Identifier '?'? ':' Type)* )? ')' '=>' Type\r\n\r\n    var state = tn.mark();\r\n    var startPos = tn.tokenPos;\r\n    var parameters: ParameterNode[] | null = null;\r\n    var thisType: TypeNode | null = null;\r\n    var isSignature: bool = false;\r\n\r\n    if (tn.skip(Token.CLOSEPAREN)) {\r\n      isSignature = true;\r\n      tn.discard(state);\r\n      parameters = [];\r\n\r\n    } else {\r\n      isSignature = false; // not yet known\r\n      do {\r\n        let kind = ParameterKind.DEFAULT;\r\n        if (tn.skip(Token.DOT_DOT_DOT)) {\r\n          isSignature = true;\r\n          tn.discard(state);\r\n          kind = ParameterKind.REST;\r\n        }\r\n        if (tn.skip(Token.THIS)) {\r\n          if (tn.skip(Token.COLON)) {\r\n            isSignature = true;\r\n            tn.discard(state);\r\n            let t = this.parseType(tn, false);\r\n            if (!t) return null;\r\n            if (t.kind != NodeKind.TYPE) {\r\n              this.error(\r\n                DiagnosticCode.Operation_not_supported,\r\n                t.range\r\n              );\r\n              this.tryParseSignatureIsSignature = true;\r\n              return null;\r\n            }\r\n            thisType = <TypeNode>t;\r\n          } else {\r\n            tn.reset(state);\r\n            this.tryParseSignatureIsSignature = false;\r\n            return null;\r\n          }\r\n        } else if (tn.skip(Token.IDENTIFIER)) {\r\n          let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(tn.tokenPos, tn.pos));\r\n          if (tn.skip(Token.QUESTION)) {\r\n            isSignature = true;\r\n            tn.discard(state);\r\n            if (kind == ParameterKind.REST) {\r\n              this.error(\r\n                DiagnosticCode.A_rest_parameter_cannot_be_optional,\r\n                tn.range()\r\n              ); // recoverable\r\n            } else {\r\n              kind = ParameterKind.OPTIONAL;\r\n            }\r\n          }\r\n          if (tn.skip(Token.COLON)) {\r\n            isSignature = true;\r\n            tn.discard(state);\r\n            let type = this.parseType(tn); // not suppressing errors because known\r\n            if (!type) {\r\n              this.tryParseSignatureIsSignature = isSignature;\r\n              return null;\r\n            }\r\n            let param = new ParameterNode();\r\n            param.parameterKind = kind;\r\n            param.name = name;\r\n            param.type = type;\r\n            if (!parameters) parameters = [ param ];\r\n            else parameters.push(param);\r\n          } else {\r\n            if (isSignature) {\r\n              this.error(\r\n                DiagnosticCode.Type_expected,\r\n                tn.range()\r\n              ); // recoverable\r\n            }\r\n          }\r\n        } else {\r\n          if (isSignature) {\r\n            this.error(\r\n              DiagnosticCode.Identifier_expected,\r\n              tn.range()\r\n            );\r\n          } else {\r\n            tn.reset(state);\r\n          }\r\n          this.tryParseSignatureIsSignature = isSignature;\r\n          return null;\r\n        }\r\n      } while (tn.skip(Token.COMMA));\r\n      if (!tn.skip(Token.CLOSEPAREN)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n        this.tryParseSignatureIsSignature = isSignature;\r\n        return null;\r\n      }\r\n    }\r\n\r\n    var returnType: CommonTypeNode | null;\r\n    if (tn.skip(Token.EQUALS_GREATERTHAN)) {\r\n      isSignature = true;\r\n      tn.discard(state);\r\n      returnType = this.parseType(tn);\r\n      if (!returnType) {\r\n        this.tryParseSignatureIsSignature = isSignature;\r\n        return null;\r\n      }\r\n    } else {\r\n      if (isSignature) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"=>\"\r\n        );\r\n      } else {\r\n        tn.reset(state);\r\n      }\r\n      this.tryParseSignatureIsSignature = isSignature;\r\n      return null;\r\n    }\r\n    this.tryParseSignatureIsSignature = true;\r\n    return Node.createSignature(\r\n      parameters || [],\r\n      returnType,\r\n      thisType,\r\n      false,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n  }\r\n\r\n  // statements\r\n\r\n  parseDecorator(\r\n    tn: Tokenizer\r\n  ): DecoratorNode | null {\r\n\r\n    // at '@': Identifier ('.' Identifier)* '(' Arguments\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.IDENTIFIER)) {\r\n      let name = tn.readIdentifier();\r\n      let expression: Expression = Node.createIdentifierExpression(name, tn.range(startPos, tn.pos));\r\n      while (tn.skip(Token.DOT)) {\r\n        if (tn.skip(Token.IDENTIFIER)) {\r\n          name = tn.readIdentifier();\r\n          expression = Node.createPropertyAccessExpression(\r\n            expression,\r\n            Node.createIdentifierExpression(name, tn.range()),\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      let args: Expression[] | null;\r\n      if (tn.skip(Token.OPENPAREN)) {\r\n        args = this.parseArguments(tn);\r\n        if (args) {\r\n          return Node.createDecorator(expression, args, tn.range(startPos, tn.pos));\r\n        }\r\n      } else {\r\n        return Node.createDecorator(expression, null, tn.range(startPos, tn.pos));\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseVariable(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): VariableStatement | null {\r\n\r\n    // at ('const' | 'let' | 'var'): VariableDeclaration (',' VariableDeclaration)* ';'?\r\n\r\n    var members = new Array<VariableDeclaration>();\r\n    do {\r\n      let member = this.parseVariableDeclaration(tn, flags, decorators);\r\n      if (!member) return null;\r\n      members.push(<VariableDeclaration>member);\r\n    } while (tn.skip(Token.COMMA));\r\n\r\n    var ret = Node.createVariableStatement(members, decorators, flags, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseVariableDeclaration(\r\n    tn: Tokenizer,\r\n    parentFlags: CommonFlags,\r\n    parentDecorators: DecoratorNode[] | null\r\n  ): VariableDeclaration | null {\r\n\r\n    // before: Identifier (':' Type)? ('=' Expression)?\r\n\r\n    if (!tn.skip(Token.IDENTIFIER)) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var flags = parentFlags;\r\n\r\n    var type: CommonTypeNode | null = null;\r\n    if (tn.skip(Token.COLON)) {\r\n      type = this.parseType(tn);\r\n    }\r\n\r\n    var initializer: Expression | null = null;\r\n    if (tn.skip(Token.EQUALS)) {\r\n      if (flags & CommonFlags.AMBIENT) {\r\n        this.error(\r\n          DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      initializer = this.parseExpression(tn, Precedence.COMMA + 1);\r\n      if (!initializer) return null;\r\n    } else {\r\n      if (flags & CommonFlags.CONST) {\r\n        if (!(flags & CommonFlags.AMBIENT)) {\r\n          this.error(\r\n            DiagnosticCode._const_declarations_must_be_initialized,\r\n            identifier.range\r\n          ); // recoverable\r\n        }\r\n      } else if (!type) { // neither type nor initializer\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          tn.range(tn.pos)\r\n        ); // recoverable\r\n      }\r\n    }\r\n    return Node.createVariableDeclaration(\r\n      identifier,\r\n      type,\r\n      initializer,\r\n      parentDecorators,\r\n      flags,\r\n      Range.join(identifier.range, tn.range())\r\n    );\r\n  }\r\n\r\n  parseEnum(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): EnumDeclaration | null {\r\n\r\n    // at 'enum': Identifier '{' (EnumValueDeclaration (',' EnumValueDeclaration )*)? '}' ';'?\r\n\r\n    if (tn.next() != Token.IDENTIFIER) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    if (tn.next() != Token.OPENBRACE) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n      return null;\r\n    }\r\n    var members = new Array<EnumValueDeclaration>();\r\n    if (!tn.skip(Token.CLOSEBRACE)) {\r\n      do {\r\n        let member = this.parseEnumValue(tn, CommonFlags.NONE);\r\n        if (!member) return null;\r\n        members.push(<EnumValueDeclaration>member);\r\n      } while (tn.skip(Token.COMMA));\r\n      if (!tn.skip(Token.CLOSEBRACE)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"}\"\r\n        );\r\n        return null;\r\n      }\r\n    }\r\n    var ret = Node.createEnumDeclaration(\r\n      identifier,\r\n      members,\r\n      decorators,\r\n      flags,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseEnumValue(\r\n    tn: Tokenizer,\r\n    parentFlags: CommonFlags\r\n  ): EnumValueDeclaration | null {\r\n\r\n    // before: Identifier ('=' Expression)?\r\n\r\n    if (!tn.skip(Token.IDENTIFIER)) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var value: Expression | null = null;\r\n    if (tn.skip(Token.EQUALS)) {\r\n      value = this.parseExpression(tn, Precedence.COMMA + 1);\r\n      if (!value) return null;\r\n    }\r\n    return Node.createEnumValueDeclaration(\r\n      identifier,\r\n      value,\r\n      parentFlags,\r\n      Range.join(identifier.range, tn.range())\r\n    );\r\n  }\r\n\r\n  parseReturn(\r\n    tn: Tokenizer\r\n  ): ReturnStatement | null {\r\n\r\n    // at 'return': Expression | (';' | '}' | ...'\\n')\r\n\r\n    var expr: Expression | null = null;\r\n    if (\r\n      tn.peek(true) != Token.SEMICOLON &&\r\n      tn.nextToken != Token.CLOSEBRACE &&\r\n      !tn.nextTokenOnNewLine\r\n    ) {\r\n      if (!(expr = this.parseExpression(tn))) return null;\r\n    }\r\n\r\n    var ret = Node.createReturnStatement(expr, tn.range());\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseTypeParameters(\r\n    tn: Tokenizer\r\n  ): TypeParameterNode[] | null {\r\n\r\n    // at '<': TypeParameter (',' TypeParameter)* '>'\r\n\r\n    var typeParameters = new Array<TypeParameterNode>();\r\n    if (!tn.skip(Token.GREATERTHAN)) {\r\n      do {\r\n        let typeParameter = this.parseTypeParameter(tn);\r\n        if (!typeParameter) return null;\r\n        typeParameters.push(<TypeParameterNode>typeParameter);\r\n      } while (tn.skip(Token.COMMA));\r\n      if (!tn.skip(Token.GREATERTHAN)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \">\"\r\n        );\r\n        return null;\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Type_parameter_list_cannot_be_empty,\r\n        tn.range()\r\n      ); // recoverable\r\n    }\r\n    return typeParameters;\r\n  }\r\n\r\n  parseTypeParameter(\r\n    tn: Tokenizer\r\n  ): TypeParameterNode | null {\r\n\r\n    // before: Identifier ('extends' Type)?\r\n\r\n    if (tn.next() == Token.IDENTIFIER) {\r\n      let identifier = Node.createIdentifierExpression(\r\n        tn.readIdentifier(),\r\n        tn.range()\r\n      );\r\n      let extendsType: TypeNode | null = null;\r\n      if (tn.skip(Token.EXTENDS)) {\r\n        let t = this.parseType(tn);\r\n        if (!t) return null;\r\n        if (t.kind != NodeKind.TYPE) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            t.range\r\n          );\r\n          return null;\r\n        }\r\n        extendsType = <TypeNode>t;\r\n      }\r\n      return Node.createTypeParameter(\r\n        identifier,\r\n        extendsType,\r\n        Range.join(identifier.range, tn.range())\r\n      );\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseParameters(\r\n    tn: Tokenizer,\r\n    isConstructor: bool = false\r\n  ): ParameterNode[] | null {\r\n\r\n    // at '(': (Parameter (',' Parameter)*)? ')'\r\n\r\n    var parameters = new Array<ParameterNode>();\r\n    var seenRest: ParameterNode | null = null;\r\n    var seenOptional = false;\r\n    var reportedRest = false;\r\n\r\n    if (tn.peek() != Token.CLOSEPAREN) {\r\n      do {\r\n        let param = this.parseParameter(tn, isConstructor);\r\n        if (!param) return null;\r\n        if (seenRest && !reportedRest) {\r\n          this.error(\r\n            DiagnosticCode.A_rest_parameter_must_be_last_in_a_parameter_list,\r\n            seenRest.name.range\r\n          );\r\n          reportedRest = true;\r\n        }\r\n        switch (param.parameterKind) {\r\n          default: {\r\n            if (seenOptional) {\r\n              this.error(\r\n                DiagnosticCode.A_required_parameter_cannot_follow_an_optional_parameter,\r\n                param.name.range\r\n              );\r\n            }\r\n            break;\r\n          }\r\n          case ParameterKind.OPTIONAL: {\r\n            seenOptional = true;\r\n            break;\r\n          }\r\n          case ParameterKind.REST: {\r\n            seenRest = param;\r\n            break;\r\n          }\r\n        }\r\n        parameters.push(param);\r\n      } while (tn.skip(Token.COMMA));\r\n    }\r\n    if (!tn.skip(Token.CLOSEPAREN)) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \")\"\r\n      );\r\n      return null;\r\n    }\r\n    return parameters;\r\n  }\r\n\r\n  parseParameter(\r\n    tn: Tokenizer,\r\n    isConstructor: bool = false\r\n  ): ParameterNode | null {\r\n\r\n    // before: ('public' | 'private' | 'protected' | '...')? Identifier '?'? (':' Type)? ('=' Expression)?\r\n\r\n    var isRest = false;\r\n    var isOptional = false;\r\n    var startRange: Range | null = null;\r\n    var accessFlags: CommonFlags = CommonFlags.NONE;\r\n    if (tn.skip(Token.PUBLIC)) {\r\n      startRange = tn.range();\r\n      if (!isConstructor) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          startRange, \"public\"\r\n        );\r\n      }\r\n      accessFlags |= CommonFlags.PUBLIC;\r\n    } else if (tn.skip(Token.PROTECTED)) {\r\n      startRange = tn.range();\r\n      if (!isConstructor) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          startRange, \"protected\"\r\n        );\r\n      }\r\n      accessFlags |= CommonFlags.PROTECTED;\r\n    } else if (tn.skip(Token.PRIVATE)) {\r\n      startRange = tn.range();\r\n      if (!isConstructor) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          startRange, \"private\"\r\n        );\r\n      }\r\n      accessFlags |= CommonFlags.PRIVATE;\r\n    }\r\n    if (tn.skip(Token.READONLY)) {\r\n      if (!startRange) startRange = tn.range();\r\n      if (!isConstructor) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          startRange, \"readonly\"\r\n        );\r\n      }\r\n      accessFlags |= CommonFlags.READONLY;\r\n    }\r\n    if (tn.skip(Token.DOT_DOT_DOT)) {\r\n      if (accessFlags) {\r\n        this.error(\r\n          DiagnosticCode.A_parameter_property_cannot_be_declared_using_a_rest_parameter,\r\n          tn.range()\r\n        );\r\n      } else {\r\n        startRange = tn.range();\r\n      }\r\n      isRest = true;\r\n    }\r\n    if (tn.skip(Token.IDENTIFIER)) {\r\n      if (!isRest) startRange = tn.range();\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let type: CommonTypeNode | null = null;\r\n      if (isOptional = tn.skip(Token.QUESTION)) {\r\n        if (isRest) {\r\n          this.error(\r\n            DiagnosticCode.A_rest_parameter_cannot_be_optional,\r\n            identifier.range\r\n          );\r\n        }\r\n      }\r\n      if (tn.skip(Token.COLON)) {\r\n        type = this.parseType(tn);\r\n        if (!type) return null;\r\n      } else {\r\n        type = Node.createOmittedType(tn.range(tn.pos));\r\n      }\r\n      let initializer: Expression | null = null;\r\n      if (tn.skip(Token.EQUALS)) {\r\n        if (isRest) {\r\n          this.error(\r\n            DiagnosticCode.A_rest_parameter_cannot_have_an_initializer,\r\n            identifier.range\r\n          );\r\n        }\r\n        if (isOptional) {\r\n          this.error(\r\n            DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer,\r\n            identifier.range\r\n          );\r\n        } else {\r\n          isOptional = true;\r\n        }\r\n        initializer = this.parseExpression(tn, Precedence.COMMA + 1);\r\n        if (!initializer) return null;\r\n      }\r\n      let param = Node.createParameter(\r\n        identifier,\r\n        type,\r\n        initializer,\r\n        isRest\r\n          ? ParameterKind.REST\r\n          : isOptional\r\n            ? ParameterKind.OPTIONAL\r\n            : ParameterKind.DEFAULT,\r\n        Range.join(<Range>startRange, tn.range())\r\n      );\r\n      param.flags |= accessFlags;\r\n      return param;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseFunction(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): FunctionDeclaration | null {\r\n\r\n    // at 'function':\r\n    //  Identifier\r\n    //  ('<' TypeParameters)?\r\n    //  '(' Parameters (':' Type)?\r\n    //  '{' Statement* '}'\r\n    //  ';'?\r\n\r\n    if (!tn.skip(Token.IDENTIFIER)) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range(tn.pos)\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var signatureStart: i32 = -1;\r\n\r\n    var typeParameters: TypeParameterNode[] | null = null;\r\n    if (tn.skip(Token.LESSTHAN)) {\r\n      signatureStart = tn.tokenPos;\r\n      typeParameters = this.parseTypeParameters(tn);\r\n      if (!typeParameters) return null;\r\n      flags |= CommonFlags.GENERIC;\r\n    }\r\n\r\n    if (!tn.skip(Token.OPENPAREN)) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(tn.pos), \"(\"\r\n      );\r\n      return null;\r\n    }\r\n\r\n    if (signatureStart < 0) {\r\n      signatureStart = tn.tokenPos;\r\n    }\r\n\r\n    var parameters = this.parseParameters(tn);\r\n    if (!parameters) return null;\r\n\r\n    var isSetter = (flags & CommonFlags.SET) != 0;\r\n    if (isSetter) {\r\n      if (parameters.length != 1) {\r\n        this.error(\r\n          DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\r\n          name.range\r\n        ); // recoverable\r\n      }\r\n      if (parameters.length && parameters[0].initializer) {\r\n        this.error(\r\n          DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\r\n          name.range\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    if (flags & CommonFlags.GET) {\r\n      if (parameters.length) {\r\n        this.error(\r\n          DiagnosticCode.A_get_accessor_cannot_have_parameters,\r\n          name.range\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    var returnType: CommonTypeNode | null = null;\r\n    if (tn.skip(Token.COLON)) {\r\n      returnType = this.parseType(tn, true, isSetter);\r\n      if (!returnType) return null;\r\n    }\r\n\r\n    if (!returnType) {\r\n      returnType = Node.createOmittedType(\r\n        tn.range(tn.pos)\r\n      );\r\n      if (!isSetter) {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          returnType.range\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    var signature = Node.createSignature(\r\n      parameters,\r\n      returnType,\r\n      null,\r\n      false,\r\n      tn.range(signatureStart, tn.pos)\r\n    );\r\n\r\n    var body: Statement | null = null;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      if (flags & CommonFlags.AMBIENT) {\r\n        this.error(\r\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n\r\n      body = this.parseBlockStatement(tn, false);\r\n      if (!body) return null;\r\n    } else if (!(flags & CommonFlags.AMBIENT)) {\r\n      this.error(\r\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n        tn.range(tn.pos)\r\n      );\r\n    }\r\n\r\n    var ret = Node.createFunctionDeclaration(\r\n      name,\r\n      typeParameters,\r\n      signature,\r\n      body,\r\n      decorators,\r\n      flags,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseFunctionExpression(tn: Tokenizer): FunctionExpression | null {\r\n    var startPos = tn.tokenPos;\r\n    var name: IdentifierExpression;\r\n    var isArrow = false;\r\n\r\n    // either at 'function':\r\n    //  Identifier?\r\n    //  '(' Parameters (':' Type)?\r\n    //  Statement\r\n\r\n    if (tn.token == Token.FUNCTION) {\r\n      if (tn.skip(Token.IDENTIFIER)) {\r\n        name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      } else { // empty name\r\n        name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\r\n      }\r\n      if (!tn.skip(Token.OPENPAREN)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(tn.pos), \"(\"\r\n        );\r\n        return null;\r\n      }\r\n\r\n    // or at '(' of arrow function:\r\n    //  Parameters (':' Type)?\r\n    //  Statement\r\n\r\n    } else {\r\n      isArrow = true;\r\n      assert(tn.token == Token.OPENPAREN);\r\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.tokenPos));\r\n    }\r\n\r\n    // TODO: type parameters? doesn't seem worth it.\r\n\r\n    var signatureStart = tn.pos;\r\n    var parameters = this.parseParameters(tn);\r\n    if (!parameters) return null;\r\n\r\n    return this.parseFunctionExpressionCommon(tn, name, parameters, isArrow, startPos, signatureStart);\r\n  }\r\n\r\n  private parseFunctionExpressionCommon(\r\n    tn: Tokenizer,\r\n    name: IdentifierExpression,\r\n    parameters: ParameterNode[],\r\n    isArrow: bool,\r\n    startPos: i32 = -1,\r\n    signatureStart: i32 = -1\r\n  ): FunctionExpression | null {\r\n    if (startPos < 0) startPos = name.range.start;\r\n    if (signatureStart < 0) signatureStart = startPos;\r\n\r\n    var returnType: CommonTypeNode | null = null;\r\n    if (tn.skip(Token.COLON)) {\r\n      returnType = this.parseType(tn);\r\n      if (!returnType) return null;\r\n    } else {\r\n      returnType = Node.createOmittedType(tn.range(tn.pos));\r\n      this.error(\r\n        DiagnosticCode.Type_expected,\r\n        returnType.range\r\n      ); // recoverable\r\n    }\r\n\r\n    if (isArrow) {\r\n      if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(tn.pos), \"=>\"\r\n        );\r\n        return null;\r\n      }\r\n    }\r\n\r\n    var signature = Node.createSignature(\r\n      parameters,\r\n      returnType,\r\n      null,\r\n      false,\r\n      tn.range(signatureStart, tn.pos)\r\n    );\r\n\r\n    var body: Statement | null;\r\n    if (isArrow) {\r\n      body = this.parseStatement(tn, false);\r\n    } else {\r\n      if (!tn.skip(Token.OPENBRACE)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(tn.pos), \"{\"\r\n        );\r\n        return null;\r\n      }\r\n      body = this.parseBlockStatement(tn, false);\r\n    }\r\n    if (!body) return null;\r\n\r\n    var declaration = Node.createFunctionDeclaration(\r\n      name,\r\n      null,\r\n      signature,\r\n      body,\r\n      null,\r\n      isArrow ? CommonFlags.ARROW : CommonFlags.NONE,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    return Node.createFunctionExpression(declaration);\r\n  }\r\n\r\n  parseClassOrInterface(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): ClassDeclaration | null {\r\n\r\n    // at ('class' | 'interface'):\r\n    //   Identifier\r\n    //   ('<' TypeParameters)?\r\n    //   ('extends' Type)?\r\n    //   ('implements' Type (',' Type)*)?\r\n    //   '{' ClassMember* '}'\r\n\r\n    var isInterface = tn.token == Token.INTERFACE;\r\n\r\n    if (!tn.skip(Token.IDENTIFIER)) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var identifier = Node.createIdentifierExpression(\r\n      tn.readIdentifier(),\r\n      tn.range()\r\n    );\r\n\r\n    var typeParameters: TypeParameterNode[] | null;\r\n    if (tn.skip(Token.LESSTHAN)) {\r\n      typeParameters = this.parseTypeParameters(tn);\r\n      if (!typeParameters) return null;\r\n      flags |= CommonFlags.GENERIC;\r\n    } else {\r\n      typeParameters = [];\r\n    }\r\n\r\n    var extendsType: TypeNode | null = null;\r\n    if (tn.skip(Token.EXTENDS)) {\r\n      let t = this.parseType(tn);\r\n      if (!t) return null;\r\n      if (t.kind != NodeKind.TYPE) {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          t.range\r\n        );\r\n        return null;\r\n      }\r\n      extendsType = <TypeNode>t;\r\n    }\r\n\r\n    var implementsTypes: TypeNode[] | null = null;\r\n    if (tn.skip(Token.IMPLEMENTS)) {\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode.Interface_declaration_cannot_have_implements_clause,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      do {\r\n        let type = this.parseType(tn);\r\n        if (!type) return null;\r\n        if (!isInterface) {\r\n          if (!implementsTypes) implementsTypes = [];\r\n          implementsTypes.push(<TypeNode>type);\r\n        }\r\n      } while (tn.skip(Token.COMMA));\r\n    }\r\n\r\n    if (!tn.skip(Token.OPENBRACE)) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var members = new Array<DeclarationStatement>();\r\n    var declaration: ClassDeclaration;\r\n    if (isInterface) {\r\n      assert(!implementsTypes);\r\n      declaration = Node.createInterfaceDeclaration(\r\n        identifier,\r\n        typeParameters,\r\n        extendsType,\r\n        members,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n    } else {\r\n      declaration = Node.createClassDeclaration(\r\n        identifier,\r\n        typeParameters,\r\n        extendsType,\r\n        implementsTypes,\r\n        members,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n    }\r\n    if (!tn.skip(Token.CLOSEBRACE)) {\r\n      do {\r\n        let member = this.parseClassMember(tn, declaration);\r\n        if (!member) return null;\r\n        member.parent = declaration;\r\n        members.push(<DeclarationStatement>member);\r\n      } while (!tn.skip(Token.CLOSEBRACE));\r\n    }\r\n    return declaration;\r\n  }\r\n\r\n  parseClassMember(\r\n    tn: Tokenizer,\r\n    parent: ClassDeclaration\r\n  ): DeclarationStatement | null {\r\n\r\n    // before:\r\n    //   ('public' | 'private' | 'protected')?\r\n    //   ('static' | 'abstract')?\r\n    //   'readonly'?\r\n    //   ('get' | 'set')?\r\n    //   Identifier ...\r\n\r\n    var startPos = tn.pos;\r\n\r\n    var decorators = new Array<DecoratorNode>();\r\n    while (tn.skip(Token.AT)) {\r\n      let decorator = this.parseDecorator(tn);\r\n      if (!decorator) break;\r\n      decorators.push(<DecoratorNode>decorator);\r\n    }\r\n\r\n    var flags = parent.flags & CommonFlags.AMBIENT; // inherit\r\n\r\n    if (tn.skip(Token.PUBLIC)) {\r\n      flags |= CommonFlags.PUBLIC;\r\n    } else if (tn.skip(Token.PRIVATE)) {\r\n      flags |= CommonFlags.PRIVATE;\r\n    } else if (tn.skip(Token.PROTECTED)) {\r\n      flags |= CommonFlags.PROTECTED;\r\n    }\r\n\r\n    var staticStart: i32 = 0;\r\n    var staticEnd: i32 = 0;\r\n    var abstractStart: i32 = 0;\r\n    var abstractEnd: i32 = 0;\r\n    if (tn.skip(Token.STATIC)) {\r\n      flags |= CommonFlags.STATIC;\r\n      staticStart = tn.tokenPos;\r\n      staticEnd = tn.pos;\r\n    } else {\r\n      if (tn.skip(Token.ABSTRACT)) {\r\n        flags |= (CommonFlags.ABSTRACT | CommonFlags.INSTANCE);\r\n        abstractStart = tn.tokenPos;\r\n        abstractEnd = tn.pos;\r\n      } else {\r\n        flags |= CommonFlags.INSTANCE;\r\n      }\r\n      if (parent.flags & CommonFlags.GENERIC) {\r\n        flags |= CommonFlags.GENERIC_CONTEXT;\r\n      }\r\n    }\r\n\r\n    var readonlyStart: i32 = 0;\r\n    var readonlyEnd: i32 = 0;\r\n    if (tn.skip(Token.READONLY)) {\r\n      flags |= CommonFlags.READONLY;\r\n      readonlyStart = tn.tokenPos;\r\n      readonlyEnd = tn.pos;\r\n    }\r\n\r\n    // check if accessor: ('get' | 'set') ^\\n Identifier\r\n    var state = tn.mark();\r\n    var isConstructor = false;\r\n    var isGetter = false;\r\n    var getStart: i32 = 0;\r\n    var getEnd: i32 = 0;\r\n    var isSetter = false;\r\n    var setStart: i32 = 0;\r\n    var setEnd: i32 = 0;\r\n    if (tn.skip(Token.GET)) {\r\n      if (tn.peek(true, true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n        flags |= CommonFlags.GET;\r\n        isGetter = true;\r\n        setStart = tn.tokenPos;\r\n        setEnd = tn.pos;\r\n        if (flags & CommonFlags.READONLY) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n          ); // recoverable\r\n        }\r\n      } else {\r\n        tn.reset(state);\r\n      }\r\n    } else if (tn.skip(Token.SET)) {\r\n      if (tn.peek(true, true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n        flags |= CommonFlags.SET | CommonFlags.SET;\r\n        isSetter = true;\r\n        setStart = tn.tokenPos;\r\n        setEnd = tn.pos;\r\n        if (flags & CommonFlags.READONLY) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n          ); // recoverable\r\n        }\r\n      } else {\r\n        tn.reset(state);\r\n      }\r\n    } else if (tn.skip(Token.CONSTRUCTOR)) {\r\n      flags |= CommonFlags.CONSTRUCTOR;\r\n      isConstructor = true;\r\n      if (flags & CommonFlags.STATIC) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(staticStart, staticEnd), \"static\"\r\n        ); // recoverable\r\n      }\r\n      if (flags & CommonFlags.ABSTRACT) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(abstractStart, abstractEnd), \"abstract\"\r\n        ); // recoverable\r\n      }\r\n      if (flags & CommonFlags.READONLY) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    if (!isConstructor && !tn.skip(Token.IDENTIFIER)) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var name = isConstructor\r\n      ? Node.createConstructorExpression(tn.range())\r\n      : Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var typeParameters: TypeParameterNode[] | null = null;\r\n    if (tn.skip(Token.LESSTHAN)) {\r\n      let typeParametersStart = tn.tokenPos;\r\n      typeParameters = this.parseTypeParameters(tn);\r\n      if (!typeParameters) return null;\r\n      if (isConstructor) {\r\n        this.error(\r\n          DiagnosticCode.Type_parameters_cannot_appear_on_a_constructor_declaration,\r\n          tn.range(typeParametersStart, tn.pos)\r\n        ); // recoverable\r\n      } else if (isGetter || isSetter) {\r\n        this.error(\r\n          DiagnosticCode.An_accessor_cannot_have_type_parameters,\r\n          tn.range(typeParametersStart, tn.pos)\r\n        ); // recoverable\r\n      } else {\r\n        flags |= CommonFlags.GENERIC;\r\n      }\r\n    }\r\n\r\n    // method: '(' Parameters (':' Type)? '{' Statement* '}' ';'?\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let signatureStart = tn.tokenPos;\r\n      let parameters = this.parseParameters(tn, isConstructor);\r\n      if (!parameters) return null;\r\n      if (isConstructor) {\r\n        for (let i = 0, k = parameters.length; i < k; ++i) {\r\n          let parameter = parameters[i];\r\n          if (parameter.isAny(\r\n            CommonFlags.PUBLIC |\r\n            CommonFlags.PROTECTED |\r\n            CommonFlags.PRIVATE |\r\n            CommonFlags.READONLY\r\n          )) {\r\n            let implicitFieldDeclaration = Node.createFieldDeclaration(\r\n              parameter.name,\r\n              parameter.type,\r\n              null, // initialized via parameter\r\n              null,\r\n              parameter.flags | CommonFlags.INSTANCE,\r\n              parameter.range\r\n            );\r\n            implicitFieldDeclaration.parameterIndex = i;\r\n            implicitFieldDeclaration.parent = parent;\r\n            parameter.implicitFieldDeclaration = implicitFieldDeclaration;\r\n            parent.members.push(implicitFieldDeclaration);\r\n          }\r\n        }\r\n      } else if (isGetter) {\r\n        if (parameters.length) {\r\n          this.error(\r\n            DiagnosticCode.A_get_accessor_cannot_have_parameters,\r\n            name.range\r\n          );\r\n        }\r\n      } else if (isSetter) {\r\n        if (parameters.length != 1) {\r\n          this.error(\r\n            DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\r\n            name.range\r\n          );\r\n        }\r\n        if (parameters.length && parameters[0].initializer) {\r\n          this.error(\r\n            DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\r\n            name.range\r\n          );\r\n        }\r\n      }\r\n\r\n      let returnType: CommonTypeNode | null = null;\r\n      if (tn.skip(Token.COLON)) {\r\n        if (name.kind == NodeKind.CONSTRUCTOR) {\r\n          this.error(\r\n            DiagnosticCode.Type_annotation_cannot_appear_on_a_constructor_declaration,\r\n            tn.range()\r\n          );\r\n        } else if (isSetter) {\r\n          this.error(\r\n            DiagnosticCode.A_set_accessor_cannot_have_a_return_type_annotation,\r\n            tn.range()\r\n          );\r\n        }\r\n        returnType = this.parseType(tn, name.kind == NodeKind.CONSTRUCTOR || isSetter);\r\n        if (!returnType) return null;\r\n      } else {\r\n        returnType = Node.createOmittedType(tn.range(tn.pos));\r\n        if (!isSetter && name.kind != NodeKind.CONSTRUCTOR) {\r\n          this.error(\r\n            DiagnosticCode.Type_expected,\r\n            returnType.range\r\n          ); // recoverable\r\n        }\r\n      }\r\n\r\n      let signature = Node.createSignature(\r\n        parameters,\r\n        returnType,\r\n        null,\r\n        false,\r\n        tn.range(signatureStart, tn.pos)\r\n      );\r\n\r\n      let body: Statement | null = null;\r\n      if (tn.skip(Token.OPENBRACE)) {\r\n        if (flags & CommonFlags.AMBIENT) {\r\n          this.error(\r\n            DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\r\n            tn.range()\r\n          ); // recoverable\r\n        }\r\n        body = this.parseBlockStatement(tn, false);\r\n        if (!body) return null;\r\n      } else if (!(flags & CommonFlags.AMBIENT)) {\r\n        this.error(\r\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n\r\n      let retMethod = Node.createMethodDeclaration(\r\n        name,\r\n        typeParameters,\r\n        signature,\r\n        body,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      tn.skip(Token.SEMICOLON);\r\n      return retMethod;\r\n\r\n    } else if (isConstructor) {\r\n      this.error(\r\n        DiagnosticCode.Constructor_implementation_is_missing,\r\n        name.range\r\n      );\r\n\r\n    } else if (isGetter || isSetter) {\r\n      this.error(\r\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n        name.range\r\n      );\r\n\r\n    // field: (':' Type)? ('=' Expression)? ';'?\r\n    } else {\r\n      if (flags & CommonFlags.ABSTRACT) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(abstractStart, abstractEnd), \"abstract\"\r\n        ); // recoverable\r\n      }\r\n\r\n      if (flags & CommonFlags.GET) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(getStart, getEnd), \"get\"\r\n        ); // recoverable\r\n      }\r\n\r\n      if (flags & CommonFlags.SET) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(setStart, setEnd), \"set\"\r\n        ); // recoverable\r\n      }\r\n\r\n      let type: CommonTypeNode | null = null;\r\n      if (tn.skip(Token.COLON)) {\r\n        type = this.parseType(tn);\r\n        if (!type) return null;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      let initializer: Expression | null = null;\r\n      if (tn.skip(Token.EQUALS)) {\r\n        initializer = this.parseExpression(tn);\r\n        if (!initializer) return null;\r\n      }\r\n      let retField = Node.createFieldDeclaration(\r\n        name,\r\n        type,\r\n        initializer,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      tn.skip(Token.SEMICOLON);\r\n      return retField;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseNamespace(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): NamespaceDeclaration | null {\r\n\r\n    // at 'namespace': Identifier '{' (Variable | Function)* '}'\r\n\r\n    if (tn.skip(Token.IDENTIFIER)) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      if (tn.skip(Token.OPENBRACE)) {\r\n        let members = new Array<Statement>();\r\n        let ns = Node.createNamespaceDeclaration(\r\n          identifier,\r\n          members,\r\n          decorators,\r\n          flags,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          let member = this.parseTopLevelStatement(tn, ns);\r\n          if (!member) return null;\r\n          member.parent = ns;\r\n          members.push(member);\r\n        }\r\n        tn.skip(Token.SEMICOLON);\r\n        return ns;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"{\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExport(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    startPos: i32\r\n  ): ExportStatement | null {\r\n\r\n    // at 'export': '{' ExportMember (',' ExportMember)* }' ('from' StringLiteral)? ';'?\r\n\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      let members = new Array<ExportMember>();\r\n      if (!tn.skip(Token.CLOSEBRACE)) {\r\n        do {\r\n          let member = this.parseExportMember(tn);\r\n          if (!member) return null;\r\n          members.push(member);\r\n        } while (tn.skip(Token.COMMA));\r\n        if (!tn.skip(Token.CLOSEBRACE)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"}\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      let path: StringLiteralExpression | null = null;\r\n      if (tn.skip(Token.FROM)) {\r\n        if (tn.skip(Token.STRINGLITERAL)) {\r\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.String_literal_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      let ret = Node.createExportStatement(members, path, flags, tn.range(startPos, tn.pos));\r\n      let internalPath = ret.internalPath;\r\n      if (internalPath != null && !this.seenlog.has(internalPath)) {\r\n        this.backlog.push(internalPath);\r\n        this.seenlog.add(internalPath);\r\n      }\r\n      tn.skip(Token.SEMICOLON);\r\n      return ret;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExportMember(\r\n    tn: Tokenizer\r\n  ): ExportMember | null {\r\n\r\n    // before: Identifier ('as' Identifier)?\r\n\r\n    if (tn.skip(Token.IDENTIFIER)) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let asIdentifier: IdentifierExpression | null = null;\r\n      if (tn.skip(Token.AS)) {\r\n        if (tn.skip(Token.IDENTIFIER)) {\r\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      return Node.createExportMember(\r\n        identifier,\r\n        asIdentifier,\r\n        asIdentifier\r\n          ? Range.join(identifier.range, asIdentifier.range)\r\n          : identifier.range\r\n      );\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseImport(\r\n    tn: Tokenizer\r\n  ): ImportStatement | null {\r\n\r\n    // at 'import':\r\n    //  ('{' (ImportMember (',' ImportMember)* '}') | ('*' 'as' Identifier)?\r\n    //  'from' StringLiteral ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var members: ImportDeclaration[] | null = null;\r\n    var namespaceName: IdentifierExpression | null = null;\r\n    var skipFrom = false;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      members = new Array();\r\n      if (!tn.skip(Token.CLOSEBRACE)) {\r\n        do {\r\n          let member = this.parseImportDeclaration(tn);\r\n          if (!member) return null;\r\n          members.push(member);\r\n        } while (tn.skip(Token.COMMA));\r\n        if (!tn.skip(Token.CLOSEBRACE)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"}\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    } else if (tn.skip(Token.ASTERISK)) {\r\n      if (tn.skip(Token.AS)) {\r\n        if (tn.skip(Token.IDENTIFIER)) {\r\n          namespaceName = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"as\"\r\n        );\r\n        return null;\r\n      }\r\n    } else {\r\n      skipFrom = true;\r\n    }\r\n\r\n    if (skipFrom || tn.skip(Token.FROM)) {\r\n      if (tn.skip(Token.STRINGLITERAL)) {\r\n        let path = Node.createStringLiteralExpression(tn.readString(), tn.range());\r\n        let ret: ImportStatement;\r\n        if (namespaceName) {\r\n          assert(!members);\r\n          ret = Node.createImportStatementWithWildcard(namespaceName, path, tn.range(startPos, tn.pos));\r\n        } else {\r\n          ret = Node.createImportStatement(members, path, tn.range(startPos, tn.pos));\r\n        }\r\n        let internalPath = ret.internalPath;\r\n        if (!this.seenlog.has(internalPath)) {\r\n          this.backlog.push(internalPath);\r\n          this.seenlog.add(internalPath);\r\n        }\r\n        tn.skip(Token.SEMICOLON);\r\n        return ret;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.String_literal_expected,\r\n          tn.range()\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"from\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseImportDeclaration(\r\n    tn: Tokenizer\r\n  ): ImportDeclaration | null {\r\n\r\n    // before: Identifier ('as' Identifier)?\r\n\r\n    if (tn.skip(Token.IDENTIFIER)) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let asIdentifier: IdentifierExpression | null = null;\r\n      if (tn.skip(Token.AS)) {\r\n        if (tn.skip(Token.IDENTIFIER)) {\r\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      return Node.createImportDeclaration(\r\n        identifier,\r\n        asIdentifier,\r\n        asIdentifier\r\n          ? Range.join(identifier.range, asIdentifier.range)\r\n          : identifier.range\r\n      );\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExportImport(\r\n    tn: Tokenizer,\r\n    startPos: i32\r\n  ): ExportImportStatement | null {\r\n\r\n    // at 'export' 'import': Identifier ('=' Identifier)? ';'?\r\n\r\n    if (tn.skip(Token.IDENTIFIER)) {\r\n      let asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      if (tn.skip(Token.EQUALS)) {\r\n        if (tn.skip(Token.IDENTIFIER)) {\r\n          let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n          let ret = Node.createExportImportStatement(identifier, asIdentifier, tn.range(startPos, tn.pos));\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"=\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseStatement(\r\n    tn: Tokenizer,\r\n    topLevel: bool = false\r\n  ): Statement | null {\r\n\r\n    // at previous token\r\n\r\n    var state = tn.mark();\r\n    var token = tn.next();\r\n    var statement: Statement | null = null;\r\n    switch (token) {\r\n      case Token.BREAK: {\r\n        statement = this.parseBreak(tn);\r\n        break;\r\n      }\r\n      case Token.CONST: {\r\n        statement = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.CONTINUE: {\r\n        statement = this.parseContinue(tn);\r\n        break;\r\n      }\r\n      case Token.DO: {\r\n        statement = this.parseDoStatement(tn);\r\n        break;\r\n      }\r\n      case Token.FOR: {\r\n        statement = this.parseForStatement(tn);\r\n        break;\r\n      }\r\n      case Token.IF: {\r\n        statement = this.parseIfStatement(tn);\r\n        break;\r\n      }\r\n      case Token.LET: {\r\n        statement = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.VAR: {\r\n        statement = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.OPENBRACE: {\r\n        statement = this.parseBlockStatement(tn, topLevel);\r\n        break;\r\n      }\r\n      case Token.RETURN: {\r\n        if (topLevel) {\r\n          this.error(\r\n            DiagnosticCode.A_return_statement_can_only_be_used_within_a_function_body,\r\n            tn.range()\r\n          ); // recoverable\r\n        }\r\n        statement = this.parseReturn(tn);\r\n        break;\r\n      }\r\n      case Token.SEMICOLON: {\r\n        return Node.createEmptyStatement(tn.range(tn.tokenPos));\r\n      }\r\n      case Token.SWITCH: {\r\n        statement = this.parseSwitchStatement(tn);\r\n        break;\r\n      }\r\n      case Token.THROW: {\r\n        statement = this.parseThrowStatement(tn);\r\n        break;\r\n      }\r\n      case Token.TRY: {\r\n        statement = this.parseTryStatement(tn);\r\n        break;\r\n      }\r\n      case Token.TYPE: {\r\n        statement = this.parseTypeDeclaration(tn, CommonFlags.NONE, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.VOID: {\r\n        statement = this.parseVoidStatement(tn);\r\n        break;\r\n      }\r\n      case Token.WHILE: {\r\n        statement = this.parseWhileStatement(tn);\r\n        break;\r\n      }\r\n      default: {\r\n        tn.reset(state);\r\n        statement = this.parseExpressionStatement(tn);\r\n        break;\r\n      }\r\n    }\r\n    if (!statement) { // has been reported\r\n      tn.reset(state);\r\n      this.skipStatement(tn);\r\n    } else {\r\n      tn.discard(state);\r\n    }\r\n    return statement;\r\n  }\r\n\r\n  parseBlockStatement(\r\n    tn: Tokenizer,\r\n    topLevel: bool\r\n  ): BlockStatement | null {\r\n\r\n    // at '{': Statement* '}' ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var statements = new Array<Statement>();\r\n    while (!tn.skip(Token.CLOSEBRACE)) {\r\n      let state = tn.mark();\r\n      let statement = this.parseStatement(tn, topLevel);\r\n      if (!statement) {\r\n        tn.reset(state);\r\n        this.skipStatement(tn);\r\n      } else {\r\n        tn.discard(state);\r\n        statements.push(statement);\r\n      }\r\n    }\r\n    var ret = Node.createBlockStatement(statements, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseBreak(\r\n    tn: Tokenizer\r\n  ): BreakStatement | null {\r\n\r\n    // at 'break': Identifier? ';'?\r\n\r\n    var identifier: IdentifierExpression | null = null;\r\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n      tn.next(true);\r\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    }\r\n    var ret = Node.createBreakStatement(identifier, tn.range());\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseContinue(\r\n    tn: Tokenizer\r\n  ): ContinueStatement | null {\r\n\r\n    // at 'continue': Identifier? ';'?\r\n\r\n    var identifier: IdentifierExpression | null = null;\r\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n      tn.next(true);\r\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    }\r\n    var ret = Node.createContinueStatement(identifier, tn.range());\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseDoStatement(\r\n    tn: Tokenizer\r\n  ): DoStatement | null {\r\n\r\n    // at 'do': Statement 'while' '(' Expression ')' ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var statement = this.parseStatement(tn);\r\n    if (!statement) return null;\r\n\r\n    if (tn.skip(Token.WHILE)) {\r\n\r\n      if (tn.skip(Token.OPENPAREN)) {\r\n        let condition = this.parseExpression(tn);\r\n        if (!condition) return null;\r\n\r\n        if (tn.skip(Token.CLOSEPAREN)) {\r\n          let ret = Node.createDoStatement(<Statement>statement, <Expression>condition, tn.range(startPos, tn.pos));\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"(\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"while\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExpressionStatement(\r\n    tn: Tokenizer\r\n  ): ExpressionStatement | null {\r\n\r\n    // at previous token\r\n\r\n    var expr = this.parseExpression(tn);\r\n    if (!expr) return null;\r\n\r\n    var ret = Node.createExpressionStatement(expr);\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseForStatement(\r\n    tn: Tokenizer\r\n  ): ForStatement | null {\r\n\r\n    // at 'for': '(' Statement? Expression? ';' Expression? ')' Statement\r\n\r\n    var startPos = tn.tokenPos;\r\n\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let initializer: Statement | null = null;\r\n\r\n      if (tn.skip(Token.CONST)) {\r\n        initializer = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\r\n      } else if (tn.skip(Token.LET)) {\r\n        initializer = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\r\n      } else if (tn.skip(Token.VAR)) {\r\n        initializer = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\r\n\r\n      } else if (!tn.skip(Token.SEMICOLON)) {\r\n        initializer = this.parseExpressionStatement(tn);\r\n        if (!initializer) return null;\r\n      }\r\n\r\n      if (tn.token == Token.SEMICOLON) {\r\n        let condition: ExpressionStatement | null = null;\r\n        if (!tn.skip(Token.SEMICOLON)) {\r\n          condition = this.parseExpressionStatement(tn);\r\n          if (!condition) return null;\r\n        }\r\n\r\n        if (tn.token == Token.SEMICOLON) {\r\n          let incrementor: Expression | null = null;\r\n          if (!tn.skip(Token.CLOSEPAREN)) {\r\n            incrementor = this.parseExpression(tn);\r\n            if (!incrementor) return null;\r\n\r\n            if (!tn.skip(Token.CLOSEPAREN)) {\r\n              this.error(\r\n                DiagnosticCode._0_expected,\r\n                tn.range(), \")\"\r\n              );\r\n              return null;\r\n            }\r\n          }\r\n\r\n          let statement = this.parseStatement(tn);\r\n          if (!statement) return null;\r\n\r\n          return Node.createForStatement(\r\n            initializer,\r\n            condition\r\n              ? condition.expression\r\n              : null,\r\n            incrementor,\r\n            statement,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \";\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \";\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseIfStatement(\r\n    tn: Tokenizer\r\n  ): IfStatement | null {\r\n\r\n    // at 'if': '(' Expression ')' Statement ('else' Statement)?\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let condition = this.parseExpression(tn);\r\n      if (!condition) return null;\r\n      if (tn.skip(Token.CLOSEPAREN)) {\r\n        let statement = this.parseStatement(tn);\r\n        if (!statement) return null;\r\n        let elseStatement: Statement | null = null;\r\n        if (tn.skip(Token.ELSE)) {\r\n          elseStatement = this.parseStatement(tn);\r\n          if (!elseStatement) return null;\r\n        }\r\n        return Node.createIfStatement(\r\n          condition,\r\n          statement,\r\n          elseStatement,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseSwitchStatement(\r\n    tn: Tokenizer\r\n  ): SwitchStatement | null {\r\n\r\n    // at 'switch': '(' Expression ')' '{' SwitchCase* '}' ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let condition = this.parseExpression(tn);\r\n      if (!condition) return null;\r\n      if (tn.skip(Token.CLOSEPAREN)) {\r\n        if (tn.skip(Token.OPENBRACE)) {\r\n          let cases = new Array<SwitchCase>();\r\n          while (!tn.skip(Token.CLOSEBRACE)) {\r\n            let case_ = this.parseSwitchCase(tn);\r\n            if (!case_) return null;\r\n            cases.push(<SwitchCase>case_);\r\n          }\r\n          let ret = Node.createSwitchStatement(condition, cases, tn.range(startPos, tn.pos));\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"{\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseSwitchCase(\r\n    tn: Tokenizer\r\n  ): SwitchCase | null {\r\n\r\n    var startPos = tn.tokenPos;\r\n    var statements: Statement[],\r\n        statement: Statement | null;\r\n\r\n    // 'case' Expression ':' Statement*\r\n\r\n    if (tn.skip(Token.CASE)) {\r\n      let label = this.parseExpression(tn);\r\n      if (!label) return null;\r\n      if (tn.skip(Token.COLON)) {\r\n        statements = new Array<Statement>();\r\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\r\n          statement = this.parseStatement(tn);\r\n          if (!statement) return null;\r\n          statements.push(statement);\r\n        }\r\n        return Node.createSwitchCase(label, statements, tn.range(startPos, tn.pos));\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \":\"\r\n        );\r\n      }\r\n\r\n    // 'default' ':' Statement*\r\n\r\n    } else if (tn.skip(Token.DEFAULT)) {\r\n      if (tn.skip(Token.COLON)) {\r\n        statements = new Array<Statement>();\r\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\r\n          statement = this.parseStatement(tn);\r\n          if (!statement) return null;\r\n          statements.push(statement);\r\n        }\r\n        return Node.createSwitchCase(null, statements, tn.range(startPos, tn.pos));\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \":\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._case_or_default_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseThrowStatement(\r\n    tn: Tokenizer\r\n  ): ThrowStatement | null {\r\n\r\n    // at 'throw': Expression ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var expression = this.parseExpression(tn);\r\n    if (!expression) return null;\r\n    var ret = Node.createThrowStatement(<Expression>expression, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseTryStatement(\r\n    tn: Tokenizer\r\n  ): TryStatement | null {\r\n\r\n    // at 'try':\r\n    //   '{' Statement* '}'\r\n    //   ('catch' '(' VariableMember ')' '{' Statement* '}')?\r\n    //   ('finally' '{' Statement* '}'? ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var stmt: Statement | null;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      let statements = new Array<Statement>();\r\n      while (!tn.skip(Token.CLOSEBRACE)) {\r\n        stmt = this.parseStatement(tn);\r\n        if (!stmt) return null;\r\n        statements.push(<Statement>stmt);\r\n      }\r\n      let catchVariable: IdentifierExpression | null = null;\r\n      let catchStatements: Statement[] | null = null;\r\n      let finallyStatements: Statement[] | null = null;\r\n      if (tn.skip(Token.CATCH)) {\r\n        if (!tn.skip(Token.OPENPAREN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"(\"\r\n          );\r\n          return null;\r\n        }\r\n        if (!tn.skip(Token.IDENTIFIER)) {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n        catchVariable = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        if (!tn.skip(Token.CLOSEPAREN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n        if (!tn.skip(Token.OPENBRACE)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"{\"\r\n          );\r\n          return null;\r\n        }\r\n        catchStatements = [];\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          stmt = this.parseStatement(tn);\r\n          if (!stmt) return null;\r\n          catchStatements.push(<Statement>stmt);\r\n        }\r\n      }\r\n      if (tn.skip(Token.FINALLY)) {\r\n        if (!tn.skip(Token.OPENBRACE)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"{\"\r\n          );\r\n          return null;\r\n        }\r\n        finallyStatements = [];\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          stmt = this.parseStatement(tn);\r\n          if (!stmt) return null;\r\n          finallyStatements.push(<Statement>stmt);\r\n        }\r\n      }\r\n      if (!(catchStatements || finallyStatements)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"catch\"\r\n        );\r\n        return null;\r\n      }\r\n      let ret = Node.createTryStatement(\r\n        statements,\r\n        catchVariable,\r\n        catchStatements,\r\n        finallyStatements,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      tn.skip(Token.SEMICOLON);\r\n      return ret;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseTypeDeclaration(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): TypeDeclaration | null {\r\n\r\n    // at 'type': Identifier ('<' TypeParameters '>')? '=' Type ';'?\r\n\r\n    if (tn.skip(Token.IDENTIFIER)) {\r\n      let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let typeParameters: TypeParameterNode[] | null = null;\r\n      if (tn.skip(Token.LESSTHAN)) {\r\n        typeParameters = this.parseTypeParameters(tn);\r\n        if (!typeParameters) return null;\r\n        flags |= CommonFlags.GENERIC;\r\n      }\r\n      if (tn.skip(Token.EQUALS)) {\r\n        let type = this.parseType(tn);\r\n        if (!type) return null;\r\n        let ret = Node.createTypeDeclaration(\r\n          name,\r\n          typeParameters,\r\n          type,\r\n          decorators,\r\n          flags,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n        tn.skip(Token.SEMICOLON);\r\n        return ret;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"=\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseVoidStatement(\r\n    tn: Tokenizer\r\n  ): VoidStatement | null {\r\n\r\n    // at 'void': Expression ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var expression = this.parseExpression(tn, Precedence.GROUPING);\r\n    if (!expression) return null;\r\n    var ret = Node.createVoidStatement(expression, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseWhileStatement(\r\n    tn: Tokenizer\r\n  ): WhileStatement | null {\r\n\r\n    // at 'while': '(' Expression ')' Statement ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let expression = this.parseExpression(tn);\r\n      if (!expression) return null;\r\n      if (tn.skip(Token.CLOSEPAREN)) {\r\n        let statement = this.parseStatement(tn);\r\n        if (!statement) return null;\r\n        let ret = Node.createWhileStatement(expression, statement, tn.range(startPos, tn.pos));\r\n        tn.skip(Token.SEMICOLON);\r\n        return ret;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  // expressions\r\n  // see: http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing\r\n\r\n  parseExpressionStart(\r\n    tn: Tokenizer\r\n  ): Expression | null {\r\n\r\n    var token = tn.next(true);\r\n    var startPos = tn.tokenPos;\r\n    var expr: Expression | null = null;\r\n\r\n    if (token == Token.NULL) {\r\n      return Node.createNullExpression(tn.range());\r\n    }\r\n    if (token == Token.TRUE) {\r\n      return Node.createTrueExpression(tn.range());\r\n    }\r\n    if (token == Token.FALSE) {\r\n      return Node.createFalseExpression(tn.range());\r\n    }\r\n\r\n    var p = determinePrecedenceStart(token);\r\n    if (p != Precedence.INVALID) {\r\n      let operand: Expression | null;\r\n\r\n      // TODO: SpreadExpression, YieldExpression (currently become unsupported UnaryPrefixExpressions)\r\n\r\n      // NewExpression\r\n      if (token == Token.NEW) {\r\n        operand = this.parseExpression(tn, Precedence.CALL);\r\n        if (!operand) return null;\r\n        if (operand.kind == NodeKind.CALL) {\r\n          return Node.createNewExpression(\r\n            (<CallExpression>operand).expression,\r\n            (<CallExpression>operand).typeArguments,\r\n            (<CallExpression>operand).arguments,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            tn.range()\r\n          );\r\n        }\r\n        return null;\r\n      } else {\r\n        operand = this.parseExpression(tn, p);\r\n        if (!operand) return null;\r\n      }\r\n\r\n      // UnaryPrefixExpression\r\n      if (token == Token.PLUS_PLUS || token == Token.MINUS_MINUS) {\r\n        if (\r\n          operand.kind != NodeKind.IDENTIFIER &&\r\n          operand.kind != NodeKind.ELEMENTACCESS &&\r\n          operand.kind != NodeKind.PROPERTYACCESS\r\n        ) {\r\n          this.error(\r\n            DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\r\n            operand.range\r\n          );\r\n        }\r\n      }\r\n      return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\r\n    }\r\n\r\n    switch (token) {\r\n\r\n      // ParenthesizedExpression\r\n      // FunctionExpression\r\n      case Token.OPENPAREN: {\r\n\r\n        // determine whether this is a function expression\r\n        if (tn.skip(Token.CLOSEPAREN)) { // must be a function expression (fast route)\r\n          return this.parseFunctionExpressionCommon(\r\n            tn,\r\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\r\n            [],\r\n            true\r\n          );\r\n        }\r\n        let state = tn.mark();\r\n        let again = true;\r\n        do {\r\n          switch (tn.next(true)) {\r\n\r\n            // function expression\r\n            case Token.DOT_DOT_DOT: {\r\n              tn.reset(state);\r\n              return this.parseFunctionExpression(tn);\r\n            }\r\n            // can be both\r\n            case Token.IDENTIFIER: {\r\n              tn.readIdentifier();\r\n              switch (tn.next()) {\r\n\r\n                // if we got here, check for arrow\r\n                case Token.CLOSEPAREN: {\r\n                  if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\r\n                    again = false;\r\n                    break;\r\n                  }\r\n                  // fall-through\r\n                }\r\n                // function expression\r\n                case Token.COLON: {    // type annotation\r\n                  tn.reset(state);\r\n                  return this.parseFunctionExpression(tn);\r\n                }\r\n                // can be both\r\n                case Token.QUESTION:   // optional parameter or ternary\r\n                case Token.COMMA: {\r\n                  break; // continue\r\n                }\r\n                // parenthesized expression\r\n                // case Token.EQUALS:  // missing type annotation for simplicity\r\n                default: {\r\n                  again = false;\r\n                  break;\r\n                }\r\n              }\r\n              break;\r\n            }\r\n            // parenthesized expression\r\n            default: {\r\n              again = false;\r\n              break;\r\n            }\r\n          }\r\n        } while (again);\r\n        tn.reset(state);\r\n\r\n        // parse parenthesized\r\n        expr = this.parseExpression(tn);\r\n        if (!expr) return null;\r\n        if (!tn.skip(Token.CLOSEPAREN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n        return Node.createParenthesizedExpression(expr, tn.range(startPos, tn.pos));\r\n      }\r\n      // ArrayLiteralExpression\r\n      case Token.OPENBRACKET: {\r\n        let elementExpressions = new Array<Expression | null>();\r\n        if (!tn.skip(Token.CLOSEBRACKET)) {\r\n          do {\r\n            if (tn.peek() == Token.COMMA) {\r\n              expr = null; // omitted\r\n            } else {\r\n              expr = this.parseExpression(tn, Precedence.COMMA + 1);\r\n              if (!expr) return null;\r\n            }\r\n            elementExpressions.push(expr);\r\n            if (tn.peek() == Token.CLOSEBRACKET) break;\r\n          } while (tn.skip(Token.COMMA));\r\n          if (!tn.skip(Token.CLOSEBRACKET)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"]\"\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n        return Node.createArrayLiteralExpression(elementExpressions, tn.range(startPos, tn.pos));\r\n      }\r\n      // AssertionExpression (unary prefix)\r\n      case Token.LESSTHAN: {\r\n        let toType = this.parseType(tn);\r\n        if (!toType) return null;\r\n        if (!tn.skip(Token.GREATERTHAN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \">\"\r\n          );\r\n          return null;\r\n        }\r\n        expr = this.parseExpression(tn, Precedence.CALL);\r\n        if (!expr) return null;\r\n        return Node.createAssertionExpression(\r\n          AssertionKind.PREFIX,\r\n          expr,\r\n          toType,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      }\r\n      case Token.IDENTIFIER: {\r\n        return Node.createIdentifierExpression(tn.readIdentifier(), tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.THIS: {\r\n        return Node.createThisExpression(tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.CONSTRUCTOR: {\r\n        return Node.createConstructorExpression(tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.SUPER: {\r\n        return Node.createSuperExpression(tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.STRINGLITERAL: {\r\n        return Node.createStringLiteralExpression(tn.readString(), tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.INTEGERLITERAL: {\r\n        return Node.createIntegerLiteralExpression(tn.readInteger(), tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.FLOATLITERAL: {\r\n        return Node.createFloatLiteralExpression(tn.readFloat(), tn.range(startPos, tn.pos));\r\n      }\r\n      // RegexpLiteralExpression\r\n      // note that this also continues on invalid ones so the surrounding AST remains intact\r\n      case Token.SLASH: {\r\n        let regexpPattern = tn.readRegexpPattern(); // also reports\r\n        if (!tn.skip(Token.SLASH)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"/\"\r\n          );\r\n          return null;\r\n        }\r\n        return Node.createRegexpLiteralExpression(\r\n          regexpPattern,\r\n          tn.readRegexpFlags(), // also reports\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      }\r\n      case Token.FUNCTION: {\r\n        return this.parseFunctionExpression(tn);\r\n      }\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Expression_expected,\r\n          tn.range()\r\n        );\r\n        return null;\r\n      }\r\n    }\r\n  }\r\n\r\n  tryParseTypeArgumentsBeforeArguments(\r\n    tn: Tokenizer\r\n  ): CommonTypeNode[] | null {\r\n\r\n    // at '<': Type (',' Type)* '>' '('\r\n\r\n    var state = tn.mark();\r\n    if (!tn.skip(Token.LESSTHAN)) return null;\r\n    var typeArguments = new Array<CommonTypeNode>();\r\n    do {\r\n      let type = this.parseType(tn, true, true);\r\n      if (!type) {\r\n        tn.reset(state);\r\n        return null;\r\n      }\r\n      typeArguments.push(type);\r\n    } while (tn.skip(Token.COMMA));\r\n    if (tn.skip(Token.GREATERTHAN) && tn.skip(Token.OPENPAREN)) {\r\n      return typeArguments;\r\n    }\r\n    tn.reset(state);\r\n    return null;\r\n  }\r\n\r\n  parseArguments(\r\n    tn: Tokenizer\r\n  ): Expression[] | null {\r\n\r\n    // at '(': (Expression (',' Expression)*)? ')'\r\n\r\n    var args = new Array<Expression>();\r\n    if (!tn.skip(Token.CLOSEPAREN)) {\r\n      do {\r\n        let expr = this.parseExpression(tn, Precedence.COMMA + 1);\r\n        if (!expr) return null;\r\n        args.push(expr);\r\n      } while (tn.skip(Token.COMMA));\r\n      if (!tn.skip(Token.CLOSEPAREN)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n        return null;\r\n      }\r\n    }\r\n    return args;\r\n  }\r\n\r\n  parseExpression(\r\n    tn: Tokenizer,\r\n    precedence: Precedence = 0\r\n  ): Expression | null {\r\n\r\n    var expr = this.parseExpressionStart(tn);\r\n    if (!expr) return null;\r\n    var startPos = expr.range.start;\r\n\r\n    // CallExpression with type arguments\r\n    var typeArguments: CommonTypeNode[] | null;\r\n    while (\r\n      // there might be better ways to distinguish a LESSTHAN from a CALL with type arguments\r\n      (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) ||\r\n      tn.skip(Token.OPENPAREN)\r\n    ) {\r\n      let args = this.parseArguments(tn);\r\n      if (!args) return null;\r\n      expr = Node.createCallExpression(expr, typeArguments, args, tn.range(startPos, tn.pos));\r\n    }\r\n\r\n    var token: Token;\r\n    var next: Expression | null = null;\r\n    var nextPrecedence: Precedence;\r\n    while (\r\n      (nextPrecedence = determinePrecedence(token = tn.peek())) >= precedence\r\n    ) { // precedence climbing\r\n      tn.next();\r\n      switch (token) {\r\n        // AssertionExpression\r\n        case Token.AS: {\r\n          let toType = this.parseType(tn);\r\n          if (!toType) return null;\r\n          expr = Node.createAssertionExpression(\r\n            AssertionKind.AS,\r\n            expr,\r\n            toType,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // ElementAccessExpression\r\n        case Token.OPENBRACKET: {\r\n          next = this.parseExpression(tn);\r\n          if (!next) return null;\r\n          if (!tn.skip(Token.CLOSEBRACKET)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"]\"\r\n            );\r\n            return null;\r\n          }\r\n          expr = Node.createElementAccessExpression(\r\n            expr,\r\n            next,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // UnaryPostfixExpression\r\n        case Token.PLUS_PLUS:\r\n        case Token.MINUS_MINUS: {\r\n          if (\r\n            expr.kind != NodeKind.IDENTIFIER &&\r\n            expr.kind != NodeKind.ELEMENTACCESS &&\r\n            expr.kind != NodeKind.PROPERTYACCESS\r\n          ) {\r\n            this.error(\r\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\r\n              expr.range\r\n            );\r\n          }\r\n          expr = Node.createUnaryPostfixExpression(\r\n            token,\r\n            expr,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // TernaryExpression\r\n        case Token.QUESTION: {\r\n          let ifThen = this.parseExpression(tn);\r\n          if (!ifThen) return null;\r\n          if (!tn.skip(Token.COLON)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \":\"\r\n            );\r\n            return null;\r\n          }\r\n          let ifElse = this.parseExpression(tn);\r\n          if (!ifElse) return null;\r\n          expr = Node.createTernaryExpression(\r\n            expr,\r\n            ifThen,\r\n            ifElse,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // CommaExpression\r\n        case Token.COMMA: {\r\n          let commaExprs: Expression[] = [ expr ];\r\n          do {\r\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\r\n            if (!expr) return null;\r\n            commaExprs.push(expr);\r\n          } while (tn.skip(Token.COMMA));\r\n          expr = Node.createCommaExpression(commaExprs, tn.range(startPos, tn.pos));\r\n          break;\r\n        }\r\n        default: {\r\n          next = this.parseExpression(tn,\r\n            isRightAssociative(token)\r\n              ? nextPrecedence\r\n              : nextPrecedence + 1\r\n          );\r\n          if (!next) return null;\r\n\r\n          // PropertyAccessExpression\r\n          if (token == Token.DOT) {\r\n            if (next.kind == NodeKind.IDENTIFIER) {\r\n              expr = Node.createPropertyAccessExpression(\r\n                expr,\r\n                <IdentifierExpression>next,\r\n                tn.range(startPos, tn.pos)\r\n              );\r\n            } else if (next.kind == NodeKind.CALL) { // join\r\n              let propertyCall = <CallExpression>next;\r\n              if (propertyCall.expression.kind == NodeKind.IDENTIFIER) {\r\n                propertyCall.expression = Node.createPropertyAccessExpression(\r\n                  expr,\r\n                  <IdentifierExpression>propertyCall.expression,\r\n                  tn.range(startPos, tn.pos)\r\n                );\r\n              } else {\r\n                this.error(\r\n                  DiagnosticCode.Identifier_expected,\r\n                  propertyCall.expression.range\r\n                );\r\n                return null;\r\n              }\r\n              expr = propertyCall;\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.Identifier_expected,\r\n                next.range\r\n              );\r\n              return null;\r\n            }\r\n\r\n          // BinaryExpression\r\n          } else {\r\n            expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\r\n          }\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /** Skips over a statement on errors in an attempt to reduce unnecessary diagnostic noise. */\r\n  skipStatement(tn: Tokenizer): void {\r\n    tn.peek(true);\r\n    if (tn.nextTokenOnNewLine) tn.next(); // if reset() to the previous line\r\n    do {\r\n      let nextToken = tn.peek(true);\r\n      if (\r\n        nextToken == Token.ENDOFFILE ||   // next step should handle this\r\n        nextToken == Token.CLOSEBRACE     // current step should handle this\r\n      ) {\r\n        break;\r\n      }\r\n      if (nextToken == Token.SEMICOLON) { // end of the statement for sure\r\n        tn.next();\r\n        break;\r\n      }\r\n      if (tn.nextTokenOnNewLine) break;   // end of the statement maybe\r\n      switch (tn.next()) {\r\n        case Token.IDENTIFIER: {\r\n          tn.readIdentifier();\r\n          break;\r\n        }\r\n        case Token.STRINGLITERAL: {\r\n          tn.readString();\r\n          break;\r\n        }\r\n        case Token.INTEGERLITERAL: {\r\n          tn.readInteger();\r\n          break;\r\n        }\r\n        case Token.FLOATLITERAL: {\r\n          tn.readFloat();\r\n          break;\r\n        }\r\n      }\r\n    } while (true);\r\n  }\r\n\r\n  /** Skips over a block on errors in an attempt to reduce unnecessary diagnostic noise. */\r\n  // skipBlock(tn: Tokenizer): void {\r\n  //   var depth = 0;\r\n  //   var token: Token;\r\n  //   do {\r\n  //     token = tn.next();\r\n  //     if (token == Token.OPENBRACE) {\r\n  //       ++depth;\r\n  //     } else if (token == Token.CLOSEBRACE) {\r\n  //       if (depth) --depth;\r\n  //       if (!depth) break; // done\r\n  //     }\r\n  //   } while (token != Token.ENDOFFILE);\r\n  // }\r\n}\r\n\r\n/** Operator precedence from least to largest. */\r\nexport const enum Precedence {\r\n  COMMA,\r\n  SPREAD,\r\n  YIELD,\r\n  ASSIGNMENT,\r\n  CONDITIONAL,\r\n  LOGICAL_OR,\r\n  LOGICAL_AND,\r\n  BITWISE_OR,\r\n  BITWISE_XOR,\r\n  BITWISE_AND,\r\n  EQUALITY,\r\n  RELATIONAL,\r\n  SHIFT,\r\n  ADDITIVE,\r\n  MULTIPLICATIVE,\r\n  EXPONENTIATED,\r\n  UNARY_PREFIX,\r\n  UNARY_POSTFIX,\r\n  CALL,\r\n  MEMBERACCESS,\r\n  GROUPING,\r\n  INVALID = -1\r\n}\r\n\r\n/** Determines the precedence of a starting token. */\r\nfunction determinePrecedenceStart(kind: Token): i32 {\r\n  switch (kind) {\r\n    case Token.DOT_DOT_DOT: return Precedence.SPREAD;\r\n    case Token.YIELD: return Precedence.YIELD;\r\n    case Token.EXCLAMATION:\r\n    case Token.TILDE:\r\n    case Token.PLUS:\r\n    case Token.MINUS:\r\n    case Token.PLUS_PLUS:\r\n    case Token.MINUS_MINUS:\r\n    case Token.TYPEOF:\r\n    case Token.VOID:\r\n    case Token.DELETE: return Precedence.UNARY_PREFIX;\r\n    case Token.NEW: return Precedence.MEMBERACCESS;\r\n    default: return Precedence.INVALID;\r\n  }\r\n}\r\n\r\n/** Determines the precende of a non-starting token. */\r\nfunction determinePrecedence(kind: Token): i32 {\r\n  switch (kind) {\r\n    case Token.COMMA: return Precedence.COMMA;\r\n    case Token.EQUALS:\r\n    case Token.PLUS_EQUALS:\r\n    case Token.MINUS_EQUALS:\r\n    case Token.ASTERISK_ASTERISK_EQUALS:\r\n    case Token.ASTERISK_EQUALS:\r\n    case Token.SLASH_EQUALS:\r\n    case Token.PERCENT_EQUALS:\r\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.AMPERSAND_EQUALS:\r\n    case Token.CARET_EQUALS:\r\n    case Token.BAR_EQUALS: return Precedence.ASSIGNMENT;\r\n    case Token.QUESTION: return Precedence.CONDITIONAL;\r\n    case Token.BAR_BAR: return Precedence.LOGICAL_OR;\r\n    case Token.AMPERSAND_AMPERSAND: return Precedence.LOGICAL_AND;\r\n    case Token.BAR: return Precedence.BITWISE_OR;\r\n    case Token.CARET: return Precedence.BITWISE_XOR;\r\n    case Token.AMPERSAND: return Precedence.BITWISE_AND;\r\n    case Token.EQUALS_EQUALS:\r\n    case Token.EXCLAMATION_EQUALS:\r\n    case Token.EQUALS_EQUALS_EQUALS:\r\n    case Token.EXCLAMATION_EQUALS_EQUALS: return Precedence.EQUALITY;\r\n    case Token.AS:\r\n    case Token.IN:\r\n    case Token.INSTANCEOF:\r\n    case Token.LESSTHAN:\r\n    case Token.GREATERTHAN:\r\n    case Token.LESSTHAN_EQUALS:\r\n    case Token.GREATERTHAN_EQUALS: return Precedence.RELATIONAL;\r\n    case Token.LESSTHAN_LESSTHAN:\r\n    case Token.GREATERTHAN_GREATERTHAN:\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return Precedence.SHIFT;\r\n    case Token.PLUS:\r\n    case Token.MINUS: return Precedence.ADDITIVE;\r\n    case Token.ASTERISK:\r\n    case Token.SLASH:\r\n    case Token.PERCENT: return Precedence.MULTIPLICATIVE;\r\n    case Token.ASTERISK_ASTERISK: return Precedence.EXPONENTIATED;\r\n    case Token.PLUS_PLUS:\r\n    case Token.MINUS_MINUS: return Precedence.UNARY_POSTFIX;\r\n    case Token.DOT:\r\n    case Token.NEW:\r\n    case Token.OPENBRACKET: return Precedence.MEMBERACCESS;\r\n    default: return Precedence.INVALID;\r\n  }\r\n}\r\n\r\n/** Determines whether a non-starting token is right associative. */\r\nfunction isRightAssociative(kind: Token): bool {\r\n  switch (kind) {\r\n    case Token.EQUALS:\r\n    case Token.PLUS_EQUALS:\r\n    case Token.MINUS_EQUALS:\r\n    case Token.ASTERISK_ASTERISK_EQUALS:\r\n    case Token.ASTERISK_EQUALS:\r\n    case Token.SLASH_EQUALS:\r\n    case Token.PERCENT_EQUALS:\r\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.AMPERSAND_EQUALS:\r\n    case Token.CARET_EQUALS:\r\n    case Token.BAR_EQUALS:\r\n    case Token.QUESTION:\r\n    case Token.ASTERISK_ASTERISK: return true;\r\n    default: return false;\r\n  }\r\n}\r\n","/**\r\n * Definition builders for WebIDL and TypeScript.\r\n * @module definitions\r\n *//***/\r\n\r\nimport {\r\n  Program,\r\n  Element,\r\n  CommonFlags,\r\n  ElementKind,\r\n  Global,\r\n  Enum,\r\n  EnumValue,\r\n  Function,\r\n  Class,\r\n  Namespace,\r\n  FunctionPrototype,\r\n  ClassPrototype,\r\n  ConstantValueKind,\r\n  Interface\r\n} from \"./program\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind\r\n} from \"./types\";\r\n\r\nimport {\r\n  indent\r\n} from \"./util\";\r\n\r\n/** Walker base class. */\r\nabstract class ExportsWalker {\r\n\r\n  /** Program reference. */\r\n  program: Program;\r\n\r\n  /** Constructs a new Element walker. */\r\n  constructor(program: Program) {\r\n    this.program = program;\r\n  }\r\n\r\n  walk(): void {\r\n    for (let element of this.program.moduleLevelExports.values()) {\r\n      this.visitElement(element);\r\n    }\r\n  }\r\n\r\n  visitElement(element: Element): void {\r\n    switch (element.kind) {\r\n      case ElementKind.GLOBAL: {\r\n        if (element.is(CommonFlags.COMPILED)) {\r\n          this.visitGlobal(<Global>element);\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.ENUM: {\r\n        if (element.is(CommonFlags.COMPILED)) {\r\n          this.visitEnum(<Enum>element);\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        for (let instance of (<FunctionPrototype>element).instances.values()) {\r\n          if (instance.is(CommonFlags.COMPILED)) {\r\n            this.visitFunction(<Function>instance);\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.CLASS_PROTOTYPE: {\r\n        for (let instance of (<ClassPrototype>element).instances.values()) {\r\n          if (instance.is(CommonFlags.COMPILED)) {\r\n            this.visitClass(<Class>instance);\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.NAMESPACE: {\r\n        if ((<Namespace>element).is(CommonFlags.COMPILED)) {\r\n          this.visitNamespace(<Namespace>element);\r\n        }\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  abstract visitGlobal(element: Global): void;\r\n  abstract visitEnum(element: Enum): void;\r\n  abstract visitFunction(element: Function): void;\r\n  abstract visitClass(element: Class): void;\r\n  abstract visitInterface(element: Interface): void;\r\n  abstract visitNamespace(element: Element): void;\r\n}\r\n\r\n/** A WebIDL definitions builder. */\r\nexport class IDLBuilder extends ExportsWalker {\r\n\r\n  /** Builds WebIDL definitions for the specified program. */\r\n  static build(program: Program): string {\r\n    return new IDLBuilder(program).build();\r\n  }\r\n\r\n  private sb: string[] = [];\r\n  private seen: Set<Element> = new Set();\r\n  private indentLevel: i32 = 0;\r\n\r\n  /** Constructs a new WebIDL builder. */\r\n  constructor(program: Program) {\r\n    super(program);\r\n  }\r\n\r\n  visitGlobal(element: Global): void {\r\n    if (this.seen.has(element)) return;\r\n    this.seen.add(element);\r\n    var sb = this.sb;\r\n    var isConst = element.is(CommonFlags.INLINED);\r\n    indent(sb, this.indentLevel);\r\n    if (isConst) {\r\n      sb.push(\"const \");\r\n    }\r\n    sb.push(this.typeToString(element.type));\r\n    sb.push(\" \");\r\n    sb.push(element.simpleName);\r\n    if (isConst) {\r\n      switch (element.constantValueKind) {\r\n        case ConstantValueKind.INTEGER: {\r\n          sb.push(\" = \");\r\n          sb.push(i64_to_string(element.constantIntegerValue));\r\n          break;\r\n        }\r\n        case ConstantValueKind.FLOAT: {\r\n          sb.push(\" = \");\r\n          sb.push(element.constantFloatValue.toString());\r\n          break;\r\n        }\r\n        default: assert(false);\r\n      }\r\n    }\r\n    sb.push(\";\\n\");\r\n  }\r\n\r\n  visitEnum(element: Enum): void {\r\n    if (this.seen.has(element)) return;\r\n    this.seen.add(element);\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"interface \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\" {\\n\");\r\n    var members = element.members;\r\n    if (members) {\r\n      for (let [name, member] of members) {\r\n        if (member.kind == ElementKind.ENUMVALUE) {\r\n          let isConst = (<EnumValue>member).is(CommonFlags.INLINED);\r\n          indent(sb, this.indentLevel);\r\n          if (isConst) {\r\n            sb.push(\"const \");\r\n          } else {\r\n            sb.push(\"readonly \");\r\n          }\r\n          sb.push(\"unsigned long \");\r\n          sb.push(name);\r\n          if (isConst) {\r\n            sb.push(\" = \");\r\n            sb.push((<EnumValue>member).constantValue.toString(10));\r\n          }\r\n          sb.push(\";\\n\");\r\n        }\r\n      }\r\n      for (let member of members.values()) {\r\n        if (member.kind != ElementKind.ENUMVALUE) {\r\n          this.visitElement(member);\r\n        }\r\n      }\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitFunction(element: Function): void {\r\n    if (this.seen.has(element)) return;\r\n    this.seen.add(element);\r\n    var sb = this.sb;\r\n    var signature = element.signature;\r\n    indent(sb, this.indentLevel);\r\n    sb.push(this.typeToString(signature.returnType));\r\n    sb.push(\" \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\"(\");\r\n    var parameters = signature.parameterTypes;\r\n    var numParameters = parameters.length;\r\n    // var requiredParameters = signature.requiredParameters;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      if (i) sb.push(\", \");\r\n      // if (i >= requiredParameters) sb.push(\"optional \");\r\n      sb.push(this.typeToString(parameters[i]));\r\n      sb.push(\" \");\r\n      sb.push(signature.getParameterName(i));\r\n    }\r\n    sb.push(\");\\n\");\r\n    var members = element.members;\r\n    if (members && members.size) {\r\n      indent(sb, this.indentLevel);\r\n      sb.push(\"interface \");\r\n      sb.push(element.simpleName);\r\n      sb.push(\" {\\n\");\r\n      for (let member of members.values()) {\r\n        this.visitElement(member);\r\n      }\r\n      indent(sb, --this.indentLevel);\r\n      sb.push(\"}\\n\");\r\n    }\r\n  }\r\n\r\n  visitClass(element: Class): void {\r\n    if (this.seen.has(element)) return;\r\n    this.seen.add(element);\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"interface \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\" {\\n\");\r\n    // TODO\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitInterface(element: Interface): void {\r\n    this.visitClass(element);\r\n  }\r\n\r\n  visitNamespace(element: Namespace): void {\r\n    if (this.seen.has(element)) return;\r\n    this.seen.add(element);\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"interface \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\" {\\n\");\r\n    var members = element.members;\r\n    if (members) {\r\n      for (let member of members.values()) {\r\n        this.visitElement(member);\r\n      }\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  typeToString(type: Type): string {\r\n    switch (type.kind) {\r\n      case TypeKind.I8: return \"byte\";\r\n      case TypeKind.I16: return \"short\";\r\n      case TypeKind.I32: return \"long\";\r\n      case TypeKind.I64: return \"long long\";\r\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"long long\" : \"long\";\r\n      case TypeKind.U8: return \"octet\";\r\n      case TypeKind.U16: return \"unsigned short\";\r\n      case TypeKind.U32: return \"unsigned long\";\r\n        // ^ TODO: function types\r\n      case TypeKind.U64: return \"unsigned long long\";\r\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"unsigned long long\" : \"unsigned long\";\r\n        // ^ TODO: class types\r\n      case TypeKind.BOOL: return \"boolean\";\r\n      case TypeKind.F32: return \"unrestricted float\";\r\n      case TypeKind.F64: return \"unrestricted double\";\r\n      case TypeKind.VOID: return \"void\";\r\n      default: {\r\n        assert(false);\r\n        return \"\";\r\n      }\r\n    }\r\n  }\r\n\r\n  build(): string {\r\n    var sb = this.sb;\r\n    sb.push(\"interface ASModule {\\n\");\r\n    ++this.indentLevel;\r\n    this.walk();\r\n    --this.indentLevel;\r\n    sb.push(\"}\\n\");\r\n    return sb.join(\"\");\r\n  }\r\n}\r\n\r\n/** A TypeScript definitions builder. */\r\nexport class TSDBuilder extends ExportsWalker {\r\n\r\n  /** Builds TypeScript definitions for the specified program. */\r\n  static build(program: Program): string {\r\n    return new TSDBuilder(program).build();\r\n  }\r\n\r\n  private sb: string[] = [];\r\n  private seen: Set<Element> = new Set();\r\n  private indentLevel: i32 = 0;\r\n\r\n  /** Constructs a new WebIDL builder. */\r\n  constructor(program: Program) {\r\n    super(program);\r\n  }\r\n\r\n  visitGlobal(element: Global): void {\r\n    if (this.seen.has(element)) return;\r\n    this.seen.add(element);\r\n    var sb = this.sb;\r\n    var isConst = element.is(CommonFlags.INLINED);\r\n    indent(sb, this.indentLevel);\r\n    if (isConst) {\r\n      sb.push(\"const \");\r\n    }\r\n    sb.push(element.simpleName);\r\n    sb.push(\": \");\r\n    sb.push(this.typeToString(element.type));\r\n    sb.push(\";\\n\");\r\n    this.visitNamespace(element);\r\n  }\r\n\r\n  visitEnum(element: Enum): void {\r\n    if (this.seen.has(element)) return;\r\n    this.seen.add(element);\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"enum \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\" {\\n\");\r\n    var members = element.members;\r\n    if (members) {\r\n      let numMembers = members.size;\r\n      for (let [name, member] of members) {\r\n        if (member.kind == ElementKind.ENUMVALUE) {\r\n          this.seen.add(member);\r\n          indent(sb, this.indentLevel);\r\n          sb.push(name);\r\n          if (member.is(CommonFlags.INLINED)) {\r\n            sb.push(\" = \");\r\n            sb.push((<EnumValue>member).constantValue.toString(10));\r\n          }\r\n          sb.push(\",\\n\");\r\n          --numMembers;\r\n        }\r\n      }\r\n      if (numMembers) {\r\n        this.visitNamespace(element);\r\n      }\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitFunction(element: Function): void {\r\n    if (this.seen.has(element)) return;\r\n    this.seen.add(element);\r\n    var sb = this.sb;\r\n    var signature = element.signature;\r\n    indent(sb, this.indentLevel);\r\n    sb.push(\"function \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\"(\");\r\n    var parameters = signature.parameterTypes;\r\n    var numParameters = parameters.length;\r\n    // var requiredParameters = signature.requiredParameters;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      if (i) sb.push(\", \");\r\n      // if (i >= requiredParameters) sb.push(\"optional \");\r\n      sb.push(signature.getParameterName(i));\r\n      sb.push(\": \");\r\n      sb.push(this.typeToString(parameters[i]));\r\n    }\r\n    sb.push(\"): \");\r\n    sb.push(this.typeToString(signature.returnType));\r\n    sb.push(\";\\n\");\r\n    this.visitNamespace(element);\r\n  }\r\n\r\n  visitClass(element: Class): void {\r\n    if (this.seen.has(element)) return;\r\n    this.seen.add(element);\r\n    var sb = this.sb;\r\n    var isInterface = element.kind == ElementKind.INTERFACE;\r\n    indent(sb, this.indentLevel++);\r\n    if (isInterface) {\r\n      sb.push(\"interface \");\r\n    } else {\r\n      if (element.is(CommonFlags.ABSTRACT)) {\r\n        sb.push(\"abstract \");\r\n      }\r\n      sb.push(\"class \");\r\n    }\r\n    sb.push(element.simpleName);\r\n    var base = element.base;\r\n    if (base) {\r\n      sb.push(\" extends \");\r\n      sb.push(base.simpleName); // TODO: fqn\r\n    }\r\n    sb.push(\" {\\n\");\r\n    var members = element.prototype.members; // static\r\n    if (members) {\r\n      // TODO\r\n    }\r\n    members = element.members; // instance\r\n    if (members) {\r\n      // TODO\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitInterface(element: Interface): void {\r\n    this.visitClass(element);\r\n  }\r\n\r\n  visitNamespace(element: Element): void {\r\n    var members = element.members;\r\n    if (members && members.size) {\r\n      let sb = this.sb;\r\n      indent(sb, this.indentLevel++);\r\n      sb.push(\"namespace \");\r\n      sb.push(element.simpleName);\r\n      sb.push(\" {\\n\");\r\n      for (let member of members.values()) {\r\n        this.visitElement(member);\r\n      }\r\n      indent(sb, --this.indentLevel);\r\n      sb.push(\"}\\n\");\r\n    }\r\n  }\r\n\r\n  typeToString(type: Type): string {\r\n    switch (type.kind) {\r\n      case TypeKind.I8: return \"i8\";\r\n      case TypeKind.I16: return \"i16\";\r\n      case TypeKind.I32: return \"i32\";\r\n      case TypeKind.I64: return \"I64\";\r\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"I64\" : \"i32\";\r\n      case TypeKind.U8: return \"u8\";\r\n      case TypeKind.U16: return \"u16\";\r\n      case TypeKind.U32: return \"u32\";\r\n        // ^ TODO: function types\r\n      case TypeKind.U64: return \"U64\";\r\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"U64\" : \"u32\";\r\n        // ^ TODO: class types\r\n      case TypeKind.BOOL: return \"bool\";\r\n      case TypeKind.F32: return \"f32\";\r\n      case TypeKind.F64: return \"f64\";\r\n      case TypeKind.VOID: return \"void\";\r\n      default: {\r\n        assert(false);\r\n        return \"\";\r\n      }\r\n    }\r\n  }\r\n\r\n  build(): string {\r\n    var sb = this.sb;\r\n    sb.push(\"declare module ASModule {\\n\");\r\n    sb.push(\"  type i8 = number;\\n\");\r\n    sb.push(\"  type i16 = number;\\n\");\r\n    sb.push(\"  type i32 = number;\\n\");\r\n    sb.push(\"  type u8 = number;\\n\");\r\n    sb.push(\"  type u16 = number;\\n\");\r\n    sb.push(\"  type u32 = number;\\n\");\r\n    sb.push(\"  type f32 = number;\\n\");\r\n    sb.push(\"  type f64 = number;\\n\");\r\n    sb.push(\"  type bool = any;\\n\");\r\n    ++this.indentLevel;\r\n    this.walk();\r\n    --this.indentLevel;\r\n    sb.push(\"}\\n\");\r\n    return this.sb.join(\"\");\r\n  }\r\n}\r\n\r\n// TODO: C bindings? or is this sufficiently covered by WebIDL and using a 3rd-party tool?\r\n","/**\r\n * A decompiler that generates low-level AssemblyScript from WebAssembly binaries.\r\n * @module decompiler\r\n *//***/\r\n\r\nimport {\r\n  Module,\r\n  NativeType,\r\n  ExpressionId,\r\n  UnaryOp,\r\n  BinaryOp,\r\n  HostOp,\r\n  FunctionRef,\r\n  ExpressionRef,\r\n  Index,\r\n  readString\r\n} from \"./module\";\r\n\r\n// TODO :-)\r\n\r\nexport class Decompiler {\r\n\r\n  static decompile(module: Module): string {\r\n    var decompiler = new Decompiler();\r\n    decompiler.decompile(module);\r\n    return decompiler.finish();\r\n  }\r\n\r\n  text: string[] = [];\r\n  functionId: i32 = 0;\r\n\r\n  constructor() { }\r\n\r\n  /** Decompiles a module to an AST that can then be serialized. */\r\n  decompile(module: Module): void {\r\n    throw new Error(\"not implemented\");\r\n  }\r\n\r\n  decompileFunction(func: FunctionRef): void {\r\n    var name = readString(_BinaryenFunctionGetName(func)) || \"$\" + this.functionId.toString(10);\r\n    var body = _BinaryenFunctionGetBody(func);\r\n    this.push(\"function \");\r\n    this.push(name);\r\n    this.push(\"(\");\r\n     for (let i: Index = 0, k: Index = _BinaryenFunctionGetNumParams(func); i < k; ++i) {\r\n      if (i > 0) this.push(\", \");\r\n      this.push(\"$\");\r\n      this.push(i.toString(10));\r\n      this.push(\": \");\r\n      this.push(nativeTypeToType(_BinaryenFunctionGetParam(func, i)));\r\n    }\r\n    this.push(\"): \");\r\n    this.push(nativeTypeToType(_BinaryenFunctionGetResult(func)));\r\n    this.push(\" \");\r\n    if (_BinaryenExpressionGetId(body) != ExpressionId.Block) {\r\n      this.push(\"{\\n\");\r\n    }\r\n    this.decompileExpression(body);\r\n    if (_BinaryenExpressionGetId(body) != ExpressionId.Block) {\r\n      this.push(\"\\n}\\n\");\r\n    }\r\n    ++this.functionId;\r\n  }\r\n\r\n  decompileExpression(expr: ExpressionRef): void {\r\n    var id = _BinaryenExpressionGetId(expr);\r\n    var type = _BinaryenExpressionGetType(expr);\r\n\r\n    var nested: ExpressionRef;\r\n    var string: string | null;\r\n    var i: Index, k: Index;\r\n\r\n    switch (id) {\r\n      case ExpressionId.Block: { // TODO: magic\r\n        if ((string = readString(_BinaryenBlockGetName(expr))) != null) {\r\n          this.push(string);\r\n          this.push(\": \");\r\n        }\r\n        this.push(\"{\\n\");\r\n        k = _BinaryenBlockGetNumChildren(expr);\r\n        for (i = 0; i < k; ++i) {\r\n          this.decompileExpression(_BinaryenBlockGetChild(expr, i));\r\n        }\r\n        this.push(\"}\\n\");\r\n        return;\r\n      }\r\n      case ExpressionId.If: {\r\n        if (type == NativeType.None) {\r\n          this.push(\"if (\");\r\n          this.decompileExpression(_BinaryenIfGetCondition(expr));\r\n          this.push(\") \");\r\n          this.decompileExpression(_BinaryenIfGetIfTrue(expr));\r\n          if (nested = _BinaryenIfGetIfFalse(expr)) {\r\n            this.push(\" else \");\r\n            this.decompileExpression(nested);\r\n          }\r\n        } else {\r\n          this.decompileExpression(_BinaryenIfGetCondition(expr));\r\n          this.push(\" ? \");\r\n          this.decompileExpression(_BinaryenIfGetIfTrue(expr));\r\n          this.push(\" : \");\r\n          this.decompileExpression(_BinaryenIfGetIfFalse(expr));\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Loop: {\r\n        if ((string = readString(_BinaryenLoopGetName(expr))) != null) {\r\n          this.push(string);\r\n          this.push(\": \");\r\n        }\r\n        this.push(\"do \");\r\n        this.decompileExpression(_BinaryenLoopGetBody(expr));\r\n        this.push(\"while (0);\\n\");\r\n      }\r\n      case ExpressionId.Break: {\r\n        if (nested = _BinaryenBreakGetCondition(expr)) {\r\n          this.push(\"if (\");\r\n          this.decompileExpression(nested);\r\n          this.push(\") \");\r\n        }\r\n        if ((string = readString(_BinaryenBreakGetName(expr))) != null) {\r\n          this.push(\"break \");\r\n          this.push(string);\r\n          this.push(\";\\n\");\r\n        } else {\r\n          this.push(\"break;\\n\");\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Switch:\r\n      case ExpressionId.Call:\r\n      case ExpressionId.CallImport:\r\n      case ExpressionId.CallIndirect: {\r\n        throw new Error(\"not implemented\");\r\n      }\r\n      case ExpressionId.GetLocal: {\r\n        this.push(\"$\");\r\n        this.push(_BinaryenGetLocalGetIndex(expr).toString(10));\r\n        return;\r\n      }\r\n      case ExpressionId.SetLocal: {\r\n        this.push(\"$\");\r\n        this.push(_BinaryenSetLocalGetIndex(expr).toString(10));\r\n        this.push(\" = \");\r\n        this.decompileExpression(_BinaryenSetLocalGetValue(expr));\r\n        return;\r\n      }\r\n      case ExpressionId.GetGlobal:\r\n      case ExpressionId.SetGlobal: {\r\n        throw new Error(\"not implemented\");\r\n      }\r\n      case ExpressionId.Load: {\r\n        this.push(\"load<\");\r\n        this.push(nativeTypeToType(type));\r\n        this.push(\">(\");\r\n        this.push(_BinaryenLoadGetOffset(expr).toString(10));\r\n        this.push(\" + \");\r\n        this.decompileExpression(_BinaryenLoadGetPtr(expr));\r\n        this.push(\")\");\r\n        return;\r\n      }\r\n      case ExpressionId.Store: {\r\n        this.push(\"store<\");\r\n        this.push(nativeTypeToType(type));\r\n        this.push(\">(\");\r\n        this.push(_BinaryenStoreGetOffset(expr).toString(10));\r\n        this.push(\" + \");\r\n        this.decompileExpression(_BinaryenStoreGetPtr(expr));\r\n        this.push(\", \");\r\n        this.decompileExpression(_BinaryenStoreGetValue(expr));\r\n        this.push(\")\");\r\n        return;\r\n      }\r\n      case ExpressionId.Const: {\r\n        switch (type) {\r\n          case NativeType.I32: {\r\n            this.push(_BinaryenConstGetValueI32(expr).toString(10));\r\n            return;\r\n          }\r\n          case NativeType.I64: {\r\n            this.push(\r\n              i64_to_string(\r\n                i64_new(\r\n                  _BinaryenConstGetValueI64Low(expr),\r\n                  _BinaryenConstGetValueI64High(expr)\r\n                )\r\n              )\r\n            );\r\n            return;\r\n          }\r\n          case NativeType.F32: {\r\n            this.push(_BinaryenConstGetValueF32(expr).toString(10));\r\n            return;\r\n          }\r\n          case NativeType.F64: {\r\n            this.push(_BinaryenConstGetValueF64(expr).toString(10));\r\n            return;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Unary: {\r\n        switch (_BinaryenUnaryGetOp(expr)) {\r\n          case UnaryOp.ClzI32: {\r\n            this.push(\"clz<i32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CtzI32: {\r\n            this.push(\"ctz<i32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.PopcntI32: {\r\n            this.push(\"popcnt<i32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.NegF32:\r\n          case UnaryOp.NegF64: {\r\n            this.push(\"-\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.AbsF32: {\r\n            this.push(\"abs<f32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CeilF32: {\r\n            this.push(\"ceil<f32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.FloorF32: {\r\n            this.push(\"floor<f32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32: {\r\n            this.push(\"trunc<f32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.NearestF32: {\r\n            this.push(\"nearest<i32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.SqrtF32: {\r\n            this.push(\"sqrt<f32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.EqzI32:\r\n          case UnaryOp.EqzI64: {\r\n            this.push(\"!\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ClzI64: {\r\n            this.push(\"clz<i64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CtzI64: {\r\n            this.push(\"ctz<i64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.PopcntI64: {\r\n            this.push(\"popcnt<i64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.AbsF64: {\r\n            this.push(\"abs<f64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CeilF64: {\r\n            this.push(\"ceil<f64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.FloorF64: {\r\n            this.push(\"floor<f64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64: {\r\n            this.push(\"trunc<f64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.NearestF64: {\r\n            this.push(\"nearest<f64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.SqrtF64: {\r\n            this.push(\"sqrt<f64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ExtendI32: {\r\n            this.push(\"<i64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ExtendU32: {\r\n            this.push(\"<i64><u64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.WrapI64: {\r\n            this.push(\"<i32>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToI32: {\r\n            this.push(\"<i32>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToI64: {\r\n            this.push(\"<i64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToU32: {\r\n            this.push(\"<i32><u32>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToU64: {\r\n            this.push(\"<i64><u64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToI32: {\r\n            this.push(\"<i32>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToI64: {\r\n            this.push(\"<i64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToU32: {\r\n            this.push(\"<i32><u32>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToU64: {\r\n            this.push(\"<i64><u64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretF32: {\r\n            this.push(\"reinterpret<f32,i32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretF64: {\r\n            this.push(\"reinterpret<f64,i64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI32ToF32: {\r\n            this.push(\"<f32>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI32ToF64: {\r\n            this.push(\"<f64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU32ToF32: {\r\n            this.push(\"<f32><u32>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU32ToF64: {\r\n            this.push(\"<f64><u32>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI64ToF32: {\r\n            this.push(\"<f32>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI64ToF64: {\r\n            this.push(\"<f64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU64ToF32: {\r\n            this.push(\"<f32><u64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU64ToF64: {\r\n            this.push(\"<f64><u64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.PromoteF32: {\r\n            this.push(\"<f64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.DemoteF64: {\r\n            this.push(\"<f32>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretI32: {\r\n            this.push(\"reinterpret<i32,f32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretI64: {\r\n            this.push(\"reinterpret<i64,f64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Binary: { // TODO: precedence\r\n        switch (_BinaryenBinaryGetOp(expr)) {\r\n          case BinaryOp.AddI32:\r\n          case BinaryOp.AddI64:\r\n          case BinaryOp.AddF32:\r\n          case BinaryOp.AddF64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" + \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.SubI32:\r\n          case BinaryOp.SubI64:\r\n          case BinaryOp.SubF32:\r\n          case BinaryOp.SubF64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" - \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.MulI32:\r\n          case BinaryOp.MulI64:\r\n          case BinaryOp.MulF32:\r\n          case BinaryOp.MulF64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" * \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.DivI32:\r\n          case BinaryOp.DivI64:\r\n          case BinaryOp.DivF32:\r\n          case BinaryOp.DivF64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" / \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.DivU32: {\r\n            this.push(\"<i32>(<u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" / <u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.RemI32:\r\n          case BinaryOp.RemI64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" % \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RemU32: {\r\n            this.push(\"<i32>(<u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" / <u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.AndI32:\r\n          case BinaryOp.AndI64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" & \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.OrI32:\r\n          case BinaryOp.OrI64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" | \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.XorI32:\r\n          case BinaryOp.XorI64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" ^ \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.ShlI32:\r\n          case BinaryOp.ShlI64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" << \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.ShrU32:\r\n          case BinaryOp.ShrU64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" >>> \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.ShrI32:\r\n          case BinaryOp.ShrI64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" >> \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RotlI32: {\r\n            this.push(\"rotl<i32>(\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.RotrI32: {\r\n            this.push(\"rotr<i32>(\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.EqI32:\r\n          case BinaryOp.EqI64:\r\n          case BinaryOp.EqF32:\r\n          case BinaryOp.EqF64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" == \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.NeI32:\r\n          case BinaryOp.NeI64:\r\n          case BinaryOp.NeF32:\r\n          case BinaryOp.NeF64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" != \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LtI32:\r\n          case BinaryOp.LtI64:\r\n          case BinaryOp.LtF32:\r\n          case BinaryOp.LtF64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" < \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LtU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" < <u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LeI32:\r\n          case BinaryOp.LeI64:\r\n          case BinaryOp.LeF32:\r\n          case BinaryOp.LeF64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" <= \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LeU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" <= <u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GtI32:\r\n          case BinaryOp.GtI64:\r\n          case BinaryOp.GtF32:\r\n          case BinaryOp.GtF64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" > \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GtU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" > <u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GeI32:\r\n          case BinaryOp.GeI64:\r\n          case BinaryOp.GeF32:\r\n          case BinaryOp.GeF64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" >= \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GeU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" >= <u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.DivU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" / <u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RemU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" % <u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RotlI64: {\r\n            this.push(\"rotl<i64>(\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.RotrI64: {\r\n            this.push(\"rotr<i64>(\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.LtU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" < <u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LeU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" <= <u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GtU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" > <u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GeU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" >= <u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.CopysignF32: {\r\n            this.push(\"copysign<f32>(\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MinF32: {\r\n            this.push(\"min<f32>(\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MaxF32: {\r\n            this.push(\"max<f32>(\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.CopysignF64: {\r\n            this.push(\"copysign<f64>(\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MinF64: {\r\n            this.push(\"min<f64>(\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MaxF64: {\r\n            this.push(\"max<f64>(\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Select: {\r\n        this.push(\"select<\");\r\n        this.push(nativeTypeToType(type));\r\n        this.push(\">(\");\r\n        this.decompileExpression(_BinaryenSelectGetIfTrue(expr));\r\n        this.push(\", \");\r\n        this.decompileExpression(_BinaryenSelectGetIfFalse(expr));\r\n        this.push(\", \");\r\n        this.decompileExpression(_BinaryenSelectGetCondition(expr));\r\n        this.push(\")\");\r\n        return;\r\n      }\r\n      case ExpressionId.Drop: {\r\n        this.decompileExpression(_BinaryenDropGetValue(expr));\r\n        this.push(\";\\n\");\r\n        return;\r\n      }\r\n      case ExpressionId.Return: {\r\n        if (nested = _BinaryenReturnGetValue(expr)) {\r\n          this.push(\"return \");\r\n          this.decompileExpression(nested);\r\n          this.push(\";\\n\");\r\n        } else {\r\n          this.push(\"return;\\n\");\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Host: {\r\n        switch (_BinaryenHostGetOp(expr)) {\r\n          case HostOp.CurrentMemory: {\r\n            this.push(\"current_memory()\");\r\n            return;\r\n          }\r\n          case HostOp.GrowMemory: {\r\n            this.push(\"grow_memory(\");\r\n            this.decompileExpression(_BinaryenHostGetOperand(expr, 0));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Nop: {\r\n        this.push(\";\\n\");\r\n        return;\r\n      }\r\n      case ExpressionId.Unreachable: {\r\n        this.push(\"unreachable()\");\r\n        return;\r\n      }\r\n      case ExpressionId.AtomicCmpxchg:\r\n      case ExpressionId.AtomicRMW:\r\n      case ExpressionId.AtomicWait:\r\n      case ExpressionId.AtomicWake:\r\n    }\r\n    throw new Error(\"not implemented\");\r\n  }\r\n\r\n  private push(text: string): void {\r\n    // mostly here so we can add debugging if necessary\r\n    this.text.push(text);\r\n  }\r\n\r\n  finish(): string {\r\n    var ret = this.text.join(\"\");\r\n    this.text = [];\r\n    return ret;\r\n  }\r\n}\r\n\r\nfunction nativeTypeToType(type: NativeType): string {\r\n  switch (type) {\r\n    case NativeType.None: return \"void\";\r\n    case NativeType.I32: return \"i32\";\r\n    case NativeType.I64: return \"i64\";\r\n    case NativeType.F32: return \"f32\";\r\n    case NativeType.F64: return \"f64\";\r\n    case NativeType.Unreachable: throw new Error(\"unreachable type\");\r\n    case NativeType.Auto: throw new Error(\"auto type\");\r\n    default: throw new Error(\"unexpected type\");\r\n  }\r\n}\r\n","/**\r\n * Low-level C-like compiler API.\r\n * @module index\r\n *//***/\r\n\r\nimport {\r\n  Compiler,\r\n  Options,\r\n  Target\r\n} from \"./compiler\";\r\n\r\nimport {\r\n  Decompiler\r\n} from \"./decompiler\";\r\n\r\nimport {\r\n  IDLBuilder,\r\n  TSDBuilder\r\n} from \"./definitions\";\r\n\r\nimport {\r\n  DiagnosticMessage,\r\n  DiagnosticCategory,\r\n  formatDiagnosticMessage\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Module\r\n} from \"./module\";\r\n\r\nimport {\r\n  Parser\r\n} from \"./parser\";\r\n\r\nimport {\r\n  Program,\r\n  LIBRARY_PREFIX\r\n} from \"./program\";\r\n\r\n/** Parses a source file. If `parser` has been omitted a new one is created. */\r\nexport function parseFile(text: string, path: string, isEntry: bool = false,\r\n  parser: Parser | null = null\r\n): Parser {\r\n  if (!parser) {\r\n    parser = new Parser();\r\n    isEntry = true;\r\n  }\r\n  parser.parseFile(text, path, isEntry);\r\n  return parser;\r\n}\r\n\r\n/** Obtains the next required file's path. Returns `null` once complete. */\r\nexport function nextFile(parser: Parser): string | null {\r\n  return parser.nextFile();\r\n}\r\n\r\n/** Obtains the next diagnostic message. Returns `null` once complete. */\r\nexport function nextDiagnostic(parser: Parser): DiagnosticMessage | null {\r\n  var program = parser.program;\r\n  return program.diagnosticsOffset < program.diagnostics.length\r\n    ? program.diagnostics[program.diagnosticsOffset++]\r\n    : null;\r\n}\r\n\r\n/** Formats a diagnostic message to a string. */\r\nexport { formatDiagnosticMessage as formatDiagnostic };\r\n\r\n/** Tests whether a diagnostic is informatory. */\r\nexport function isInfo(message: DiagnosticMessage): bool {\r\n  return message.category == DiagnosticCategory.INFO;\r\n}\r\n\r\n/** Tests whether a diagnostic is a warning. */\r\nexport function isWarning(message: DiagnosticMessage): bool {\r\n  return message.category == DiagnosticCategory.WARNING;\r\n}\r\n\r\n/** Tests whether a diagnostic is an error. */\r\nexport function isError(message: DiagnosticMessage): bool {\r\n  return message.category == DiagnosticCategory.ERROR;\r\n}\r\n\r\n/** Creates a new set of compiler options. */\r\nexport function createOptions(): Options {\r\n  return new Options();\r\n}\r\n\r\n/** Sets the `target` option. */\r\nexport function setTarget(options: Options, target: Target): void {\r\n  options.target = target;\r\n}\r\n\r\n/** Sets the `noTreeShaking` option. */\r\nexport function setNoTreeShaking(options: Options, noTreeShaking: bool): void {\r\n  options.noTreeShaking = noTreeShaking;\r\n}\r\n\r\n/** Sets the `noAssert` option. */\r\nexport function setNoAssert(options: Options, noAssert: bool): void {\r\n  options.noAssert = noAssert;\r\n}\r\n\r\n/** Sets the `noMemory` option. */\r\nexport function setNoMemory(options: Options, noMemory: bool): void {\r\n  options.noMemory = noMemory;\r\n}\r\n\r\n/** Sets the `importMemory` option. */\r\nexport function setImportMemory(options: Options, importMemory: bool): void {\r\n  options.importMemory = importMemory;\r\n}\r\n\r\n/** Sets the `importTable` option. */\r\nexport function setImportTable(options: Options, importTable: bool): void {\r\n  options.importTable = importTable;\r\n}\r\n\r\n/** Sets the `sourceMap` option. */\r\nexport function setSourceMap(options: Options, sourceMap: bool): void {\r\n  options.sourceMap = sourceMap;\r\n}\r\n\r\n/** Sets the `memoryBase` option. */\r\nexport function setMemoryBase(options: Options, memoryBase: u32): void {\r\n  options.memoryBase = memoryBase;\r\n}\r\n\r\n/** Sets a 'globalAliases' value. */\r\nexport function setGlobalAlias(options: Options, name: string, alias: string): void {\r\n  var globalAliases = options.globalAliases;\r\n  if (!globalAliases) options.globalAliases = globalAliases = new Map();\r\n  globalAliases.set(name, alias);\r\n}\r\n\r\n/** Finishes parsing. */\r\nexport function finishParsing(parser: Parser): Program {\r\n  return parser.finish();\r\n}\r\n\r\n/** Compiles the sources computed by the parser to a module. */\r\nexport function compileProgram(program: Program, options: Options | null = null): Module {\r\n  return new Compiler(program, options).compile();\r\n}\r\n\r\n/** Decompiles a module to its (low level) source. */\r\nexport function decompileModule(module: Module): string {\r\n  var decompiler = new Decompiler();\r\n  decompiler.decompile(module);\r\n  return decompiler.finish();\r\n}\r\n\r\n/** Builds WebIDL definitions for the specified program. */\r\nexport function buildIDL(program: Program): string {\r\n  return IDLBuilder.build(program);\r\n}\r\n\r\n/** Builds TypeScript definitions for the specified program. */\r\nexport function buildTSD(program: Program): string {\r\n  return TSDBuilder.build(program);\r\n}\r\n\r\n/** Prefix indicating a library file. */\r\nexport { LIBRARY_PREFIX };\r\n","const F64 = new Float64Array(1);\r\nconst F32 = new Float32Array(F64.buffer);\r\nconst I32 = new Int32Array(F64.buffer);\r\n\r\nglobal.f32_as_i32 = function(value) {\r\n  F32[0] = value;\r\n  return I32[0];\r\n};\r\n\r\nglobal.i32_as_f32 = function(value) {\r\n  I32[0] = value;\r\n  return F32[0];\r\n};\r\n\r\nglobal.f64_as_i64 = function(value) {\r\n  F64[0] = value;\r\n  return i64_new(I32[0], I32[1]);\r\n};\r\n\r\nglobal.i64_as_f64 = function(value) {\r\n  I32[0] = i64_low(value);\r\n  I32[1] = i64_high(value);\r\n  return F64[0];\r\n};\r\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","const Long = global.Long || require(\"long\");\r\n\r\nglobal.i64_new = function(lo, hi) {\r\n  return Long.fromBits(lo, hi);\r\n};\r\n\r\nglobal.i64_low = function(value) {\r\n  return value.low;\r\n};\r\n\r\nglobal.i64_high = function(value) {\r\n  return value.high;\r\n};\r\n\r\nglobal.i64_add = function(left, right) {\r\n  return left.add(right);\r\n};\r\n\r\nglobal.i64_sub = function(left, right) {\r\n  return left.sub(right);\r\n};\r\n\r\nglobal.i64_mul = function(left, right) {\r\n  return left.mul(right);\r\n};\r\n\r\nglobal.i64_div = function(left, right) {\r\n  return left.div(right);\r\n};\r\n\r\nglobal.i64_div_u = function(left, right) {\r\n  return left.toUnsigned().div(right.toUnsigned()).toSigned();\r\n};\r\n\r\nglobal.i64_rem = function(left, right) {\r\n  return left.mod(right);\r\n};\r\n\r\nglobal.i64_rem_u = function(left, right) {\r\n  return left.toUnsigned().mod(right.toUnsigned()).toSigned();\r\n};\r\n\r\nglobal.i64_and = function(left, right) {\r\n  return left.and(right);\r\n};\r\n\r\nglobal.i64_or = function(left, right) {\r\n  return left.or(right);\r\n};\r\n\r\nglobal.i64_xor = function(left, right) {\r\n  return left.xor(right);\r\n};\r\n\r\nglobal.i64_shl = function(left, right) {\r\n  return left.shl(right);\r\n};\r\n\r\nglobal.i64_shr = function(left, right) {\r\n  return left.shr(right);\r\n};\r\n\r\nglobal.i64_shr_u = function(left, right) {\r\n  return left.shru(right);\r\n};\r\n\r\nglobal.i64_not = function(value) {\r\n  return value.not();\r\n};\r\n\r\nglobal.i64_align = function(value, alignment) {\r\n  assert(alignment && (alignment & (alignment - 1)) == 0);\r\n  var mask = Long.fromInt(alignment - 1);\r\n  return value.add(mask).and(mask.not());\r\n};\r\n\r\nglobal.i64_is_i8 = function(value) {\r\n  return value.high === 0 && (value.low >= 0 && value.low <= i8.MAX_VALUE)\r\n      || value.high === -1 && (value.low >= i8.MIN_VALUE && value.low < 0);\r\n};\r\n\r\nglobal.i64_is_i16 = function(value) {\r\n  return value.high === 0 && (value.low >= 0 && value.low <= i16.MAX_VALUE)\r\n      || value.high === -1 && (value.low >= i16.MIN_VALUE && value.low < 0);\r\n};\r\n\r\nglobal.i64_is_i32 = function(value) {\r\n  return (value.high === 0 && value.low >= 0)\r\n      || (value.high === -1 && value.low < 0);\r\n};\r\n\r\nglobal.i64_is_u8 = function(value) {\r\n  return value.high === 0 && value.low >= 0 && value.low <= u8.MAX_VALUE;\r\n};\r\n\r\nglobal.i64_is_u16 = function(value) {\r\n  return value.high === 0 && value.low >= 0 && value.low <= u16.MAX_VALUE;\r\n};\r\n\r\nglobal.i64_is_u32 = function(value) {\r\n  return value.high === 0;\r\n};\r\n\r\nglobal.i64_is_bool = function(value) {\r\n  return value.high === 0 && (value.low === 0 || value.low === 1);\r\n};\r\n\r\nconst minSafeF32 = Long.fromNumber(f32.MIN_SAFE_INTEGER);\r\nconst maxSafeF32 = Long.fromNumber(f32.MAX_SAFE_INTEGER);\r\n\r\nglobal.i64_is_f32 = function(value) {\r\n  return value.gte(minSafeF32) && value.lte(maxSafeF32);\r\n};\r\n\r\nconst minSafeF64 = Long.fromNumber(f64.MIN_SAFE_INTEGER);\r\nconst maxSafeF64 = Long.fromNumber(f64.MAX_SAFE_INTEGER);\r\n\r\nglobal.i64_is_f64 = function(value) {\r\n  return value.gte(minSafeF64) && value.lte(maxSafeF64);\r\n};\r\n\r\nglobal.i64_to_f32 = function(value) {\r\n  return global.Math.fround(value.toNumber());\r\n};\r\n\r\nglobal.i64_to_f64 = function(value) {\r\n  return value.toNumber();\r\n};\r\n\r\nglobal.i64_to_string = function(value, unsigned) {\r\n  return (unsigned ? value.toUnsigned() : value).toString(10);\r\n};\r\n","/** @module util *//***/\r\n\r\nexport function writeI32(value: i32, buffer: Uint8Array, offset: i32): void {\r\n  buffer[offset    ] = value;\r\n  buffer[offset + 1] = value >>> 8;\r\n  buffer[offset + 2] = value >>> 16;\r\n  buffer[offset + 3] = value >>> 24;\r\n}\r\n\r\nexport function writeI64(value: I64, buffer: Uint8Array, offset: i32): void {\r\n  writeI32(i64_low(value), buffer, offset);\r\n  writeI32(i64_high(value), buffer, offset + 4);\r\n}\r\n\r\nexport function writeF32(value: f32, buffer: Uint8Array, offset: i32): void {\r\n  writeI32(f32_as_i32(value), buffer, offset);\r\n}\r\n\r\nexport function writeF64(value: f64, buffer: Uint8Array, offset: i32): void {\r\n  var valueI64 = f64_as_i64(value);\r\n  writeI32(i64_low(valueI64), buffer, offset);\r\n  writeI32(i64_high(valueI64), buffer, offset + 4);\r\n}\r\n","/** @module util *//***/\r\n\r\nconst indentX1 = \"  \";\r\nconst indentX2 = \"    \";\r\nconst indentX4 = \"        \";\r\n\r\n/** Creates an indentation matching the number of specified levels. */\r\nexport function indent(sb: string[], level: i32): void {\r\n  while (level >= 4) {\r\n    sb.push(indentX4);\r\n    level -= 4;\r\n  }\r\n  if (level >= 2) {\r\n    sb.push(indentX2);\r\n    level -= 2;\r\n  }\r\n  if (level) {\r\n    sb.push(indentX1);\r\n  }\r\n}\r\n","/** @module util *//***/\r\n\r\nimport {\r\n  CharCode\r\n} from \"./charcode\";\r\n\r\nconst separator = CharCode.SLASH;\r\n\r\n/**\r\n * Normalizes the specified path, removing interior placeholders.\r\n * Expects a posix-compatible relative path (not Windows compatible).\r\n */\r\nexport function normalizePath(path: string): string {\r\n  var pos = 0;\r\n  var len = path.length;\r\n\r\n  // trim leading './'\r\n  while (pos + 1 < len &&\r\n    path.charCodeAt(pos) == CharCode.DOT &&\r\n    path.charCodeAt(pos + 1) == separator\r\n  ) {\r\n    pos += 2;\r\n  }\r\n\r\n  if (pos > 0 || len < path.length) {\r\n    path = path.substring(pos, len);\r\n    len -= pos;\r\n    pos = 0;\r\n  }\r\n\r\n  var atEnd: bool;\r\n  while (pos + 1 < len) {\r\n    atEnd = false;\r\n\r\n    // we are only interested in '/.' sequences ...\r\n    if (\r\n      path.charCodeAt(pos) == separator &&\r\n      path.charCodeAt(pos + 1) == CharCode.DOT\r\n    ) {\r\n      // '/.' ( '/' | $ )\r\n      atEnd = pos + 2 == len;\r\n      if (atEnd ||\r\n        pos + 2 < len &&\r\n        path.charCodeAt(pos + 2) == separator\r\n      ) {\r\n        path = atEnd\r\n          ? path.substring(0, pos)\r\n          : path.substring(0, pos) + path.substring(pos + 2);\r\n        len -= 2;\r\n        continue;\r\n      }\r\n\r\n      // '/.' ( './' | '.' $ )\r\n      atEnd = pos + 3 == len;\r\n      if (atEnd && path.charCodeAt(pos + 2) == CharCode.DOT ||\r\n        pos + 3 < len &&\r\n        path.charCodeAt(pos + 2) == CharCode.DOT &&\r\n        path.charCodeAt(pos + 3) == separator\r\n      ) {\r\n        // find preceeding '/'\r\n        let ipos = pos;\r\n        while (--ipos >= 0) {\r\n          if (path.charCodeAt(ipos) == separator) {\r\n            if (pos - ipos != 3 ||\r\n              path.charCodeAt(ipos + 1) != CharCode.DOT ||\r\n              path.charCodeAt(ipos + 2) != CharCode.DOT\r\n            ) { // exclude '..' itself\r\n              path = atEnd\r\n                ? path.substring(0, ipos)\r\n                : path.substring(0, ipos) + path.substring(pos + 3);\r\n              len -= pos + 3 - ipos;\r\n              pos = ipos - 1; // incremented again at end of loop\r\n            }\r\n            break;\r\n          }\r\n        }\r\n\r\n        // if there's no preceeding '/', trim start if non-empty\r\n        if (ipos < 0 && pos > 0) {\r\n          if (pos != 2 ||\r\n            path.charCodeAt(0) != CharCode.DOT ||\r\n            path.charCodeAt(1) != CharCode.DOT\r\n          ) { // exclude '..' itself\r\n            path = path.substring(pos + 4);\r\n            len = path.length;\r\n            continue;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    pos++;\r\n  }\r\n  return len > 0 ? path : \".\";\r\n}\r\n\r\n/** Resolves the specified path relative to the specified origin. */\r\nexport function resolvePath(normalizedPath: string, origin: string): string {\r\n  if (normalizedPath.startsWith(\"std/\")) {\r\n    return normalizedPath;\r\n  }\r\n  return normalizePath(\r\n    dirname(origin) + String.fromCharCode(separator) + normalizedPath\r\n  );\r\n}\r\n\r\n/** Obtains the directory portion of a normalized path. */\r\nexport function dirname(normalizedPath: string): string {\r\n  var pos = normalizedPath.length;\r\n  while (--pos > 0) {\r\n    if (normalizedPath.charCodeAt(pos) == separator) {\r\n      return normalizedPath.substring(0, pos);\r\n    }\r\n  }\r\n  return \".\";\r\n}\r\n","/** @module util *//***/\r\n\r\n/** An enum of named character codes. */\r\nexport const enum CharCode {\r\n\r\n  NULL = 0,\r\n  LINEFEED = 0x0A,\r\n  CARRIAGERETURN = 0x0D,\r\n  LINESEPARATOR = 0x2028,\r\n  PARAGRAPHSEPARATOR = 0x2029,\r\n  NEXTLINE = 0x0085,\r\n\r\n  SPACE = 0x20,\r\n  NONBREAKINGSPACE = 0xA0,\r\n  ENQUAD = 0x2000,\r\n  EMQUAD = 0x2001,\r\n  ENSPACE = 0x2002,\r\n  EMSPACE = 0x2003,\r\n  THREEPEREMSPACE = 0x2004,\r\n  FOURPEREMSPACE = 0x2005,\r\n  SIXPEREMSPACE = 0x2006,\r\n  FIGURESPACE = 0x2007,\r\n  PUNCTUATIONSPACE = 0x2008,\r\n  THINSPACE = 0x2009,\r\n  HAIRSPACE = 0x200A,\r\n  ZEROWIDTHSPACE = 0x200B,\r\n  NARROWNOBREAKSPACE = 0x202F,\r\n  IDEOGRAPHICSPACE = 0x3000,\r\n  MATHEMATICALSPACE = 0x205F,\r\n  OGHAM = 0x1680,\r\n\r\n  _ = 0x5F,\r\n\r\n  _0 = 0x30,\r\n  _1 = 0x31,\r\n  _2 = 0x32,\r\n  _3 = 0x33,\r\n  _4 = 0x34,\r\n  _5 = 0x35,\r\n  _6 = 0x36,\r\n  _7 = 0x37,\r\n  _8 = 0x38,\r\n  _9 = 0x39,\r\n\r\n  a = 0x61,\r\n  b = 0x62,\r\n  c = 0x63,\r\n  d = 0x64,\r\n  e = 0x65,\r\n  f = 0x66,\r\n  g = 0x67,\r\n  h = 0x68,\r\n  i = 0x69,\r\n  j = 0x6A,\r\n  k = 0x6B,\r\n  l = 0x6C,\r\n  m = 0x6D,\r\n  n = 0x6E,\r\n  o = 0x6F,\r\n  p = 0x70,\r\n  q = 0x71,\r\n  r = 0x72,\r\n  s = 0x73,\r\n  t = 0x74,\r\n  u = 0x75,\r\n  v = 0x76,\r\n  w = 0x77,\r\n  x = 0x78,\r\n  y = 0x79,\r\n  z = 0x7A,\r\n\r\n  A = 0x41,\r\n  B = 0x42,\r\n  C = 0x43,\r\n  D = 0x44,\r\n  E = 0x45,\r\n  F = 0x46,\r\n  G = 0x47,\r\n  H = 0x48,\r\n  I = 0x49,\r\n  J = 0x4A,\r\n  K = 0x4B,\r\n  L = 0x4C,\r\n  M = 0x4D,\r\n  N = 0x4E,\r\n  O = 0x4F,\r\n  P = 0x50,\r\n  Q = 0x51,\r\n  R = 0x52,\r\n  S = 0x53,\r\n  T = 0x54,\r\n  U = 0x55,\r\n  V = 0x56,\r\n  W = 0x57,\r\n  X = 0x58,\r\n  Y = 0x59,\r\n  Z = 0x5a,\r\n\r\n  AMPERSAND = 0x26,\r\n  ASTERISK = 0x2A,\r\n  AT = 0x40,\r\n  BACKSLASH = 0x5C,\r\n  BACKTICK = 0x60,\r\n  BAR = 0x7C,\r\n  CARET = 0x5E,\r\n  CLOSEBRACE = 0x7D,\r\n  CLOSEBRACKET = 0x5D,\r\n  CLOSEPAREN = 0x29,\r\n  COLON = 0x3A,\r\n  COMMA = 0x2C,\r\n  DOLLAR = 0x24,\r\n  DOT = 0x2E,\r\n  DOUBLEQUOTE = 0x22,\r\n  EQUALS = 0x3D,\r\n  EXCLAMATION = 0x21,\r\n  GREATERTHAN = 0x3E,\r\n  HASH = 0x23,\r\n  LESSTHAN = 0x3C,\r\n  MINUS = 0x2D,\r\n  OPENBRACE = 0x7B,\r\n  OPENBRACKET = 0x5B,\r\n  OPENPAREN = 0x28,\r\n  PERCENT = 0x25,\r\n  PLUS = 0x2B,\r\n  QUESTION = 0x3F,\r\n  SEMICOLON = 0x3B,\r\n  SINGLEQUOTE = 0x27,\r\n  SLASH = 0x2F,\r\n  TILDE = 0x7E,\r\n\r\n  BACKSPACE = 0x08,\r\n  FORMFEED = 0x0C,\r\n  BYTEORDERMARK = 0xFEFF,\r\n  TAB = 0x09,\r\n  VERTICALTAB = 0x0B\r\n}\r\n\r\n/** Tests if the specified character code is some sort of line break. */\r\nexport function isLineBreak(c: CharCode): bool {\r\n  switch (c) {\r\n    case CharCode.LINEFEED:\r\n    case CharCode.CARRIAGERETURN:\r\n    case CharCode.LINESEPARATOR:\r\n    case CharCode.PARAGRAPHSEPARATOR: {\r\n      return true;\r\n    }\r\n    default: {\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\n/** Tests if the specified character code is some sort of white space. */\r\nexport function isWhiteSpace(c: i32): bool {\r\n  switch (c) {\r\n    case CharCode.SPACE:\r\n    case CharCode.TAB:\r\n    case CharCode.VERTICALTAB:\r\n    case CharCode.FORMFEED:\r\n    case CharCode.NONBREAKINGSPACE:\r\n    case CharCode.NEXTLINE:\r\n    case CharCode.OGHAM:\r\n    case CharCode.NARROWNOBREAKSPACE:\r\n    case CharCode.MATHEMATICALSPACE:\r\n    case CharCode.IDEOGRAPHICSPACE:\r\n    case CharCode.BYTEORDERMARK: {\r\n      return true;\r\n    }\r\n    default: {\r\n      return c >= CharCode.ENQUAD && c <= CharCode.ZEROWIDTHSPACE;\r\n    }\r\n  }\r\n}\r\n\r\n/** Tests if the specified character code is a valid decimal digit. */\r\nexport function isDecimalDigit(c: i32): bool {\r\n  return c >= CharCode._0 && c <= CharCode._9;\r\n}\r\n\r\n/** Tests if the specified character code is a valid octal digit. */\r\nexport function isOctalDigit(c: i32): bool {\r\n  return c >= CharCode._0 && c <= CharCode._7;\r\n}\r\n\r\n/** Tests if the specified character code is a valid start of an identifier. */\r\nexport function isIdentifierStart(c: i32): bool {\r\n  return c >= CharCode.A && c <= CharCode.Z\r\n      || c >= CharCode.a && c <= CharCode.z\r\n      || c == CharCode.DOLLAR\r\n      || c == CharCode._\r\n      || c > 0x7f && isUnicodeIdentifierStart(c);\r\n}\r\n\r\n/** Tests if the specified character code is a valid keyword character. */\r\nexport function isKeywordCharacter(c: i32): bool {\r\n  return c >= CharCode.a && c <= CharCode.z;\r\n}\r\n\r\n/** Tests if the specified character code is a valid part of an identifier. */\r\nexport function isIdentifierPart(c: i32): bool {\r\n  return c >= CharCode.A && c <= CharCode.Z\r\n      || c >= CharCode.a && c <= CharCode.z\r\n      || c >= CharCode._0 && c <= CharCode._9\r\n      || c == CharCode.DOLLAR\r\n      || c == CharCode._\r\n      || c > 0x7f && isUnicodeIdentifierPart(c);\r\n}\r\n\r\n// storing as u16 to save memory\r\nconst unicodeIdentifierStart: u16[] = [\r\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\r\n  740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906,\r\n  908, 908, 910, 929, 931,\r\n  1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\r\n  1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774,\r\n  1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,\r\n  1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088,\r\n  2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384,\r\n  2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474,\r\n  2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\r\n  2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613,\r\n  2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705,\r\n  2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,\r\n  2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,\r\n  2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958,\r\n  2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,\r\n  2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,\r\n  3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\r\n  3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333,\r\n  3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\r\n  3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\r\n  3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725,\r\n  3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\r\n  3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,\r\n  3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,\r\n  4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293,\r\n  4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696,\r\n  4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798,\r\n  4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\r\n  5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872,\r\n  5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016,\r\n  6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389,\r\n  6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688,\r\n  6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141,\r\n  7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424,\r\n  7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025,\r\n  8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,\r\n  8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\r\n  8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469,\r\n  8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,\r\n  8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584,\r\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520,\r\n  11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670,\r\n  11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,\r\n  11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329,\r\n  12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540,\r\n  12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893,\r\n  19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538,\r\n  42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888,\r\n  42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015,\r\n  43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\r\n  43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520,\r\n  43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695,\r\n  43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739,\r\n  43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798,\r\n  43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243,\r\n  55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285,\r\n  64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323,\r\n  64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\r\n  65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\r\n  65479, 65482, 65487, 65490, 65495, 65498, 65500,\r\n];\r\nconst unicodeIdentifierPart: u16[] = [\r\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\r\n  740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906,\r\n  908, 908, 910, 929, 931,\r\n  1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415,\r\n  1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520,\r\n  1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,\r\n  1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112,\r\n  2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423,\r\n  2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,\r\n  2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,\r\n  2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602,\r\n  2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632,\r\n  2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693,\r\n  2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757,\r\n  2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821,\r\n  2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884,\r\n  2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,\r\n  2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972,\r\n  2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018,\r\n  3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088,\r\n  3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157,\r\n  3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216,\r\n  3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285,\r\n  3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,\r\n  3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,\r\n  3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515,\r\n  3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570,\r\n  3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720,\r\n  3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,\r\n  3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789,\r\n  3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895,\r\n  3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028,\r\n  4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304,\r\n  4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744,\r\n  4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\r\n  4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108,\r\n  5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902,\r\n  5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099,\r\n  6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272,\r\n  6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,\r\n  6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783,\r\n  6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155,\r\n  7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676,\r\n  7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\r\n  8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134,\r\n  8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205,\r\n  8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417,\r\n  8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477,\r\n  8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,\r\n  8521, 8526, 8526, 8544, 8584,\r\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,\r\n  11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686,\r\n  11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728,\r\n  11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335,\r\n  12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449,\r\n  12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799,\r\n  13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512,\r\n  42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783,\r\n  42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072,\r\n  43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309,\r\n  43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584,\r\n  43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741,\r\n  43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808,\r\n  43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,\r\n  55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275,\r\n  64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,\r\n  64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,\r\n  65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140,\r\n  65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382,\r\n  65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\r\n];\r\n\r\nfunction lookupInUnicodeMap(code: u16, map: u16[]): bool {\r\n  if (code < map[0]) return false;\r\n\r\n  var lo = 0;\r\n  var hi = map.length;\r\n  var mid: i32;\r\n\r\n  while (lo + 1 < hi) {\r\n    mid = lo + (hi - lo) / 2;\r\n    mid -= mid % 2;\r\n    if (map[mid] <= code && code <= map[mid + 1]) {\r\n      return true;\r\n    }\r\n    if (code < map[mid]) {\r\n      hi = mid;\r\n    } else {\r\n      lo = mid + 2;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction isUnicodeIdentifierStart(code: i32): bool {\r\n  return code < 0 || code > 0xffff ? false\r\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierStart);\r\n}\r\n\r\nfunction isUnicodeIdentifierPart(code: i32): bool {\r\n  return code < 0 || code > 0xffff ? false\r\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierPart);\r\n}\r\n","/**\r\n * Built-in elements providing WebAssembly core functionality.\r\n * @module builtins\r\n *//***/\r\n\r\nimport {\r\n  Compiler,\r\n  ConversionKind,\r\n\r\n  makeSmallIntegerWrap\r\n} from \"./compiler\";\r\n\r\nimport {\r\n  DiagnosticCode\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  Expression,\r\n  LiteralKind,\r\n  LiteralExpression,\r\n  StringLiteralExpression\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind,\r\n  TypeFlags\r\n} from \"./types\";\r\n\r\nimport {\r\n  BinaryOp,\r\n  UnaryOp,\r\n  HostOp,\r\n  NativeType,\r\n  ExpressionRef,\r\n  ExpressionId\r\n} from \"./module\";\r\n\r\nimport {\r\n  ElementKind,\r\n  Global,\r\n  FunctionPrototype,\r\n  Class,\r\n  Field\r\n} from \"./program\";\r\n\r\n/** Compiles a get of a built-in global. */\r\nexport function compileGetConstant(\r\n  compiler: Compiler,\r\n  global: Global,\r\n  reportNode: Node\r\n): ExpressionRef {\r\n  switch (global.internalName) {\r\n    case \"NaN\": { // context-sensitive\r\n      if (compiler.currentType == Type.f32) {\r\n        return compiler.module.createF32(NaN);\r\n      } else {\r\n        compiler.currentType = Type.f64;\r\n        return compiler.module.createF64(NaN);\r\n      }\r\n    }\r\n    case \"Infinity\": { // context-sensitive\r\n      if (compiler.currentType == Type.f32) {\r\n        return compiler.module.createF32(Infinity);\r\n      } else {\r\n        compiler.currentType = Type.f64;\r\n        return compiler.module.createF64(Infinity);\r\n      }\r\n    }\r\n    case \"HEAP_BASE\": { // never inlined for linking purposes\r\n      compiler.currentType = compiler.options.usizeType;\r\n      return compiler.module.createGetGlobal(\"HEAP_BASE\", compiler.currentType.toNativeType());\r\n    }\r\n  }\r\n  compiler.error(\r\n    DiagnosticCode.Operation_not_supported,\r\n    reportNode.range\r\n  );\r\n  return compiler.module.createUnreachable();\r\n}\r\n\r\n/** Compiles a call to a built-in function. */\r\nexport function compileCall(\r\n  compiler: Compiler,\r\n  prototype: FunctionPrototype,\r\n  typeArguments: Type[] | null,\r\n  operands: Expression[],\r\n  contextualType: Type,\r\n  reportNode: Node\r\n): ExpressionRef {\r\n  var module = compiler.module;\r\n\r\n  var arg0: ExpressionRef,\r\n      arg1: ExpressionRef,\r\n      arg2: ExpressionRef,\r\n      ret: ExpressionRef;\r\n\r\n  // NOTE that some implementations below make use of the select expression where straight-forward.\r\n  // whether worth or not should probably be tested once/ it's known if/how embedders handle it.\r\n  // search: createSelect\r\n\r\n  switch (prototype.internalName) {\r\n\r\n    // types\r\n\r\n    case \"isInteger\": {\r\n      compiler.currentType = Type.bool;\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        ); // recoverable\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      compiler.compileExpressionRetainType(operands[0], Type.i32, false);\r\n      let type = compiler.currentType;\r\n      compiler.currentType = Type.bool;\r\n      return type.is(TypeFlags.INTEGER) && !type.is(TypeFlags.REFERENCE)\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n    case \"isFloat\": {\r\n      compiler.currentType = Type.bool;\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        ); // recoverable\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      compiler.compileExpressionRetainType(operands[0], Type.i32, false);\r\n      let type = compiler.currentType;\r\n      compiler.currentType = Type.bool;\r\n      return type.is(TypeFlags.FLOAT)\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n    case \"isReference\": {\r\n      compiler.currentType = Type.bool;\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        ); // recoverable\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      compiler.compileExpressionRetainType(operands[0], Type.i32, false);\r\n      let type = compiler.currentType;\r\n      compiler.currentType = Type.bool;\r\n      return type.is(TypeFlags.REFERENCE)\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n    case \"isString\": {\r\n      compiler.currentType = Type.bool;\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        ); // recoverable\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      compiler.compileExpressionRetainType(operands[0], Type.i32, false);\r\n      let type = compiler.currentType;\r\n      compiler.currentType = Type.bool;\r\n      let classType = type.classReference;\r\n      if (classType) {\r\n        let stringInstance = compiler.program.stringInstance;\r\n        if (!stringInstance) return module.createUnreachable();\r\n        if (classType.isAssignableTo(stringInstance)) {\r\n          return module.createI32(1);\r\n        }\r\n      }\r\n      return module.createI32(0);\r\n    }\r\n    case \"isArray\": {\r\n      compiler.currentType = Type.bool;\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        ); // recoverable\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      compiler.compileExpressionRetainType(operands[0], Type.i32, false);\r\n      let type = compiler.currentType;\r\n      compiler.currentType = Type.bool;\r\n      let classType = type.classReference;\r\n      return classType != null && classType.prototype.fnIndexedGet != null\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n\r\n    // math\r\n\r\n    case \"isNaN\": { // isNaN<T?>(value: T) -> bool\r\n      compiler.currentType = Type.bool;\r\n      if (operands.length != 1) {\r\n        if (typeArguments && typeArguments.length != 1) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n      }\r\n\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.F32: {\r\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.f32);\r\n          ret = module.createBinary(BinaryOp.NeF32,\r\n            module.createTeeLocal(tempLocal.index, arg0),\r\n            module.createGetLocal(tempLocal.index, NativeType.F32)\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.f64);\r\n          ret = module.createBinary(BinaryOp.NeF64,\r\n            module.createTeeLocal(tempLocal.index, arg0),\r\n            module.createGetLocal(tempLocal.index, NativeType.F64)\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n        default: { // every other type is never NaN\r\n          ret = module.createI32(0);\r\n          break;\r\n        }\r\n      }\r\n      compiler.currentType = Type.bool;\r\n      return ret;\r\n    }\r\n    case \"isFinite\": { // isFinite<T?>(value: T) -> bool\r\n      compiler.currentType = Type.bool;\r\n      if (operands.length != 1) {\r\n        if (typeArguments && typeArguments.length != 1) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.F32: {\r\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.f32);\r\n          ret = module.createSelect(\r\n            module.createBinary(BinaryOp.NeF32,\r\n              module.createUnary(UnaryOp.AbsF32,\r\n                module.createTeeLocal(tempLocal.index, arg0)\r\n              ),\r\n              module.createF32(Infinity)\r\n            ),\r\n            module.createI32(0),\r\n            module.createBinary(BinaryOp.EqF32,\r\n              module.createGetLocal(tempLocal.index, NativeType.F32),\r\n              module.createGetLocal(tempLocal.index, NativeType.F32)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.f64);\r\n          ret = module.createSelect(\r\n            module.createBinary(BinaryOp.NeF64,\r\n              module.createUnary(UnaryOp.AbsF64,\r\n                module.createTeeLocal(tempLocal.index, arg0)\r\n              ),\r\n              module.createF64(Infinity)\r\n            ),\r\n            module.createI32(0),\r\n            module.createBinary(BinaryOp.EqF64,\r\n              module.createGetLocal(tempLocal.index, NativeType.F64),\r\n              module.createGetLocal(tempLocal.index, NativeType.F64)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n        default: { // every other type is always finite\r\n          ret = module.createI32(1);\r\n          break;\r\n        }\r\n      }\r\n      compiler.currentType = Type.bool;\r\n      return ret;\r\n    }\r\n    case \"clz\": { // clz<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        default: { // any integer up to 32-bits incl. bool\r\n          ret = module.createUnary(UnaryOp.ClzI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createUnary(\r\n            compiler.options.isWasm64\r\n              ? UnaryOp.ClzI64\r\n              : UnaryOp.ClzI32,\r\n            arg0\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createUnary(UnaryOp.ClzI64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F32:\r\n        case TypeKind.F64:\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"ctz\": { // ctz<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        default: { // any integer up to 32-bits incl. bool\r\n          ret = module.createUnary(UnaryOp.CtzI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createUnary(\r\n            compiler.options.isWasm64\r\n              ? UnaryOp.CtzI64\r\n              : UnaryOp.CtzI32,\r\n            arg0\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createUnary(UnaryOp.CtzI64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F32:\r\n        case TypeKind.F64:\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"popcnt\": { // popcnt<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        default: { // any integer up to 32-bits incl. bool\r\n          ret = module.createUnary(UnaryOp.PopcntI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createUnary(\r\n            compiler.options.isWasm64\r\n              ? UnaryOp.PopcntI64\r\n              : UnaryOp.PopcntI32,\r\n            arg0\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createUnary(UnaryOp.PopcntI64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F32:\r\n        case TypeKind.F64:\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"rotl\": { // rotl<T?>(value: T, shift: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType);\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.BOOL: {\r\n          ret = makeSmallIntegerWrap(\r\n            module.createBinary(BinaryOp.RotlI32, arg0, arg1),\r\n            compiler.currentType,\r\n            module\r\n          );\r\n          // fall-through\r\n        }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          ret = module.createBinary(BinaryOp.RotlI32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createBinary(\r\n            compiler.options.isWasm64\r\n              ? BinaryOp.RotlI64\r\n              : BinaryOp.RotlI32,\r\n            arg0,\r\n            arg1\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createBinary(BinaryOp.RotlI64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"rotr\": { // rotr<T?>(value: T, shift: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType);\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.BOOL: {\r\n          ret = makeSmallIntegerWrap(\r\n            module.createBinary(BinaryOp.RotrI32, arg0, arg1),\r\n            compiler.currentType,\r\n            module\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          ret = module.createBinary(BinaryOp.RotrI32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createBinary(\r\n            compiler.options.isWasm64\r\n              ? BinaryOp.RotrI64\r\n              : BinaryOp.RotrI32,\r\n            arg0,\r\n            arg1\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createBinary(BinaryOp.RotrI64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"abs\": { // abs<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n          // doesn't need sign-extension here because ifFalse below is either positive\r\n          // or MIN_VALUE (-MIN_VALUE == MIN_VALUE) if selected\r\n        case TypeKind.I32: {\r\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i32);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal.index, arg0),\r\n            module.createBinary(BinaryOp.SubI32, // ifFalse\r\n              module.createI32(0),\r\n              module.createGetLocal(tempLocal.index, NativeType.I32)\r\n            ),\r\n            module.createBinary(BinaryOp.GtI32,\r\n              module.createGetLocal(tempLocal.index, NativeType.I32),\r\n              module.createI32(0)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal.index, arg0),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              compiler.options.usizeType.toNativeZero(module),\r\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType)\r\n            ),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.GtI64\r\n                : BinaryOp.GtI32,\r\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType),\r\n              compiler.options.usizeType.toNativeZero(module)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64: {\r\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i64);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal.index, arg0),\r\n            module.createBinary(BinaryOp.SubI64,\r\n              module.createI64(0, 0),\r\n              module.createGetLocal(tempLocal.index, NativeType.I64),\r\n            ),\r\n            module.createBinary(BinaryOp.GtI64,\r\n              module.createGetLocal(tempLocal.index, NativeType.I64),\r\n              module.createI64(0, 0)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.U64:\r\n        case TypeKind.BOOL: {\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.AbsF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.AbsF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n        default: { // void\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"max\": { // max<T?>(left: T, right: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType);\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i32);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i32);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.GtI32,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.BOOL: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i32);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i32);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.GtU32,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.GtI64,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.U64: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.GtU64,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.GtI64\r\n                : BinaryOp.GtI32,\r\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\r\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.GtU64\r\n                : BinaryOp.GtU32,\r\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\r\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createBinary(BinaryOp.MaxF32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createBinary(BinaryOp.MaxF64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: { // void\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"min\": { // min<T?>(left: T, right: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType);\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i32);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i32);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.LtI32,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.BOOL: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i32);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i32);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.LtU32,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.LtI64,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.U64: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.LtU64,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.LtI64\r\n                : BinaryOp.LtI32,\r\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\r\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.LtU64\r\n                : BinaryOp.LtU32,\r\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\r\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createBinary(BinaryOp.MinF32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createBinary(BinaryOp.MinF64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: { // void\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"ceil\": { // ceil<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: { // any integer\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.CeilF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.CeilF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"floor\": { // floor<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: { // any integer\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.FloorF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.FloorF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"copysign\": { // copysign<T?>(left: T, right: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType);\r\n      switch (compiler.currentType.kind) { // TODO: does an integer version make sense?\r\n        case TypeKind.F32: {\r\n          ret = module.createBinary(BinaryOp.CopysignF32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createBinary(BinaryOp.CopysignF64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"nearest\": { // nearest<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: { // any integer\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.NearestF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.NearestF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"reinterpret\": { // reinterpret<T!>(value: *) -> T\r\n      if (operands.length != 1) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      switch (typeArguments[0].kind) {\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          arg0 = compiler.compileExpression(operands[0], Type.f32);\r\n          ret = module.createUnary(UnaryOp.ReinterpretF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          arg0 = compiler.compileExpression(operands[0], Type.f64);\r\n          ret = module.createUnary(UnaryOp.ReinterpretF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (typeArguments[0].is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            compiler.currentType = typeArguments[0];\r\n            return module.createUnreachable();\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          arg0 = compiler.compileExpression(\r\n            operands[0],\r\n            compiler.options.isWasm64\r\n              ? Type.f64\r\n              : Type.f32\r\n            );\r\n          ret = module.createUnary(\r\n            compiler.options.isWasm64\r\n              ? UnaryOp.ReinterpretF64\r\n              : UnaryOp.ReinterpretF32,\r\n            arg0\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          arg0 = compiler.compileExpression(operands[0], Type.u32);\r\n          ret = module.createUnary(UnaryOp.ReinterpretI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          arg0 = compiler.compileExpression(operands[0], Type.u64);\r\n          ret = module.createUnary(UnaryOp.ReinterpretI64, arg0);\r\n          break;\r\n        }\r\n        default: { // small integers and void\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      compiler.currentType = typeArguments[0];\r\n      return ret;\r\n    }\r\n    case \"sqrt\": { // sqrt<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) { // TODO: integer versions (that return f64 or convert)?\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.SqrtF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.SqrtF64, arg0);\r\n          break;\r\n        }\r\n        // case TypeKind.VOID:\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"trunc\": { // trunc<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments && typeArguments.length) {\r\n        compiler.currentType = typeArguments[0];\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: { // any integer\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        // TODO: truncate to contextual type directly (if not void etc.)?\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.TruncF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.TruncF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n\r\n    // memory access\r\n\r\n    case \"load\": { // load<T!>(offset: usize, constantOffset?: usize) -> *\r\n      if (operands.length < 1 || operands.length > 2) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        if (operands.length < 1) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n            reportNode.range, \"1\", operands.length.toString(10)\r\n          );\r\n        } else {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_arguments_but_got_1,\r\n            reportNode.range, \"2\", operands.length.toString(10)\r\n          );\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType);\r\n      let offset = operands.length == 2 ? evaluateConstantOffset(compiler, operands[1]) : 0; // reports\r\n      if (offset < 0) { // reported in evaluateConstantOffset\r\n        return module.createUnreachable();\r\n      }\r\n      compiler.currentType = typeArguments[0];\r\n      return module.createLoad(\r\n        typeArguments[0].byteSize,\r\n        typeArguments[0].is(TypeFlags.SIGNED | TypeFlags.INTEGER),\r\n        arg0,\r\n        typeArguments[0].is(TypeFlags.INTEGER) &&\r\n        contextualType.is(TypeFlags.INTEGER) &&\r\n        contextualType.size > typeArguments[0].size\r\n          ? (compiler.currentType = contextualType).toNativeType()\r\n          : (compiler.currentType = typeArguments[0]).toNativeType(),\r\n        offset\r\n      );\r\n    }\r\n    case \"store\": { // store<T!>(offset: usize, value: *, constantOffset?: usize) -> void\r\n      compiler.currentType = Type.void;\r\n      if (operands.length < 2 || operands.length > 3) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        if (operands.length < 2) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n            reportNode.range, \"2\", operands.length.toString(10)\r\n          );\r\n        } else {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_arguments_but_got_1,\r\n            reportNode.range, \"3\", operands.length.toString(10)\r\n          );\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType);\r\n      arg1 = compiler.compileExpression(\r\n        operands[1],\r\n        typeArguments[0],\r\n        typeArguments[0].is(TypeFlags.INTEGER)\r\n          ? ConversionKind.NONE // wraps a larger integer type to a smaller one, i.e. i32.store8\r\n          : ConversionKind.IMPLICIT\r\n      );\r\n      let type: Type;\r\n      if (\r\n        compiler.currentType.is(TypeFlags.INTEGER) &&\r\n        typeArguments[0].is(TypeFlags.INTEGER) &&\r\n        typeArguments[0].size > compiler.currentType.size\r\n      ) {\r\n        arg1 = compiler.convertExpression(\r\n          arg1,\r\n          compiler.currentType, typeArguments[0],\r\n          ConversionKind.IMPLICIT,\r\n          operands[1]\r\n        );\r\n        type = typeArguments[0];\r\n      } else {\r\n        type = compiler.currentType;\r\n      }\r\n      let offset = operands.length == 3 ? evaluateConstantOffset(compiler, operands[2]) : 0; // reports\r\n      if (offset < 0) { // reported in evaluateConstantOffset\r\n        return module.createUnreachable();\r\n      }\r\n      compiler.currentType = Type.void;\r\n      return module.createStore(typeArguments[0].byteSize, arg0, arg1, type.toNativeType(), offset);\r\n    }\r\n    case \"sizeof\": { // sizeof<T!>() -> usize\r\n      compiler.currentType = compiler.options.usizeType;\r\n      if (operands.length != 0) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n      }\r\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\r\n      if (compiler.options.isWasm64) {\r\n        // implicitly wrap if contextual type is a 32-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\r\n          compiler.currentType = Type.u32;\r\n          ret = module.createI32(byteSize);\r\n        } else {\r\n          ret = module.createI64(byteSize, 0);\r\n        }\r\n      } else {\r\n        // implicitly extend if contextual type is a 64-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\r\n          compiler.currentType = Type.u64;\r\n          ret = module.createI64(byteSize, 0);\r\n        } else {\r\n          ret = module.createI32(byteSize);\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"alignof\": { // alignof<T!>() -> usize\r\n      compiler.currentType = compiler.options.usizeType;\r\n      if (operands.length != 0) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n      }\r\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\r\n      let alignLog2: i32;\r\n      switch (byteSize) {\r\n        case 1: { alignLog2 = 0; break; }\r\n        case 2: { alignLog2 = 1; break; }\r\n        case 4: { alignLog2 = 2; break; }\r\n        case 8: { alignLog2 = 3; break; }\r\n        default: { assert(false); return module.createUnreachable(); }\r\n      }\r\n      if (compiler.options.isWasm64) {\r\n        // implicitly wrap if contextual type is a 32-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\r\n          compiler.currentType = Type.u32;\r\n          ret = module.createI32(alignLog2);\r\n        } else {\r\n          ret = module.createI64(alignLog2, 0);\r\n        }\r\n      } else {\r\n        // implicitly extend if contextual type is a 64-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\r\n          compiler.currentType = Type.u64;\r\n          ret = module.createI64(alignLog2, 0);\r\n        } else {\r\n          ret = module.createI32(alignLog2);\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"offsetof\": { // offsetof<T!>(fieldName?: string) -> usize\r\n      compiler.currentType = compiler.options.usizeType;\r\n      if (operands.length > 1) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let classType = typeArguments[0].classReference;\r\n      if (!classType) {\r\n        compiler.error( // TODO: better error\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let offset: i32;\r\n      if (operands.length) {\r\n        if (\r\n          operands[0].kind != NodeKind.LITERAL ||\r\n          (<LiteralExpression>operands[0]).literalKind != LiteralKind.STRING\r\n        ) {\r\n          compiler.error(\r\n            DiagnosticCode.String_literal_expected,\r\n            operands[0].range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        let fieldName = (<StringLiteralExpression>operands[0]).value;\r\n        let field = classType.members ? classType.members.get(fieldName) : null;\r\n        if (!(field && field.kind == ElementKind.FIELD)) {\r\n          compiler.error(\r\n            DiagnosticCode.Type_0_has_no_property_1,\r\n            operands[0].range, classType.internalName, fieldName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        offset = (<Field>field).memoryOffset;\r\n      } else {\r\n        offset = classType.currentMemoryOffset;\r\n      }\r\n      if (compiler.options.isWasm64) {\r\n        // implicitly wrap if contextual type is a 32-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\r\n          compiler.currentType = Type.u32;\r\n          return module.createI32(offset);\r\n        } else {\r\n          return module.createI64(offset);\r\n        }\r\n      } else {\r\n        // implicitly extend if contextual type is a 64-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\r\n          compiler.currentType = Type.u64;\r\n          return module.createI64(offset);\r\n        } else {\r\n          return module.createI32(offset);\r\n        }\r\n      }\r\n    }\r\n\r\n    // control flow\r\n\r\n    case \"select\": { // select<T?>(ifTrue: T, ifFalse: T, condition: bool) -> T\r\n      if (operands.length != 3) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"3\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE);\r\n      }\r\n      let type = compiler.currentType;\r\n      arg1 = compiler.compileExpression(operands[1], type);\r\n      arg2 = compiler.compileExpression(operands[2], Type.i32);\r\n      compiler.currentType = type;\r\n      switch (compiler.currentType.kind) {\r\n        default: { // any value type\r\n          ret = module.createSelect(arg0, arg1, arg2);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"unreachable\": { // unreachable() -> *\r\n      if (operands.length != 0) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n      }\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      return module.createUnreachable();\r\n    }\r\n\r\n    // host operations\r\n\r\n    case \"current_memory\": { // current_memory() -> i32\r\n      compiler.currentType = Type.i32;\r\n      if (operands.length != 0) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n      }\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      return module.createHost(HostOp.CurrentMemory);\r\n    }\r\n    case \"grow_memory\": { // grow_memory(pages: i32) -> i32\r\n      compiler.currentType = Type.i32;\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n        arg0 = module.createUnreachable();\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32);\r\n      }\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      return module.createHost(HostOp.GrowMemory, null, [ arg0 ]);\r\n    }\r\n    // see: https://github.com/WebAssembly/bulk-memory-operations\r\n    case \"move_memory\": { // move_memory(dest: usize, src: usize: n: usize) -> void\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 3) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"3\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.void;\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType);\r\n      arg1 = compiler.compileExpression(operands[1], compiler.options.usizeType);\r\n      arg2 = compiler.compileExpression(operands[2], compiler.options.usizeType);\r\n      compiler.currentType = Type.void;\r\n      throw new Error(\"not implemented\");\r\n      // return module.createHost(HostOp.MoveMemory, null, [ arg0, arg1, arg2 ]);\r\n    }\r\n    case \"set_memory\": { // set_memory(dest: usize, value: u32, n: usize) -> void\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 3) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"3\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.void;\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType);\r\n      arg1 = compiler.compileExpression(operands[1], Type.u32);\r\n      arg2 = compiler.compileExpression(operands[2], compiler.options.usizeType);\r\n      compiler.currentType = Type.void;\r\n      throw new Error(\"not implemented\");\r\n      // return module.createHost(HostOp.SetMemory, null, [ arg0, arg1, arg2 ]);\r\n    }\r\n\r\n    // other\r\n\r\n    case \"changetype\": { // changetype<T!>(value: *) -> T\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      } else if (typeArguments[0].kind != TypeKind.USIZE) { // any usize\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        compiler.currentType = typeArguments[0];\r\n        return module.createUnreachable();\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = typeArguments[0];\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.NONE\r\n      );\r\n      compiler.currentType = typeArguments[0];\r\n      if (compiler.currentType.kind != TypeKind.USIZE) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      // if (reportNode.range.source.sourceKind != SourceKind.STDLIB)\r\n      //  compiler.warning(DiagnosticCode.Operation_is_unsafe, reportNode.range);\r\n      return arg0; // any usize to any usize\r\n    }\r\n    case \"assert\": { // assert<T?>(isTrueish: T, message?: string) -> T with T != null\r\n      if (operands.length < 1 || operands.length > 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0].nonNullableType;\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        if (operands.length < 1) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n            reportNode.range, \"1\", operands.length.toString(10)\r\n          );\r\n        } else if (operands.length > 2) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_arguments_but_got_1,\r\n            reportNode.range, \"2\", operands.length.toString(10)\r\n          );\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length) compiler.currentType = typeArguments[0].nonNullableType;\r\n        if (typeArguments.length != 1) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpressionRetainType(operands[0], Type.i32);\r\n      }\r\n\r\n      let type = compiler.currentType;\r\n      compiler.currentType = type.nonNullableType;\r\n\r\n      // just return ifTrueish if assertions are disabled, or simplify if dropped anyway\r\n      if (compiler.options.noAssert) {\r\n        if (contextualType == Type.void) {\r\n          compiler.currentType = Type.void;\r\n          return module.createNop();\r\n        }\r\n        return arg0;\r\n      }\r\n\r\n      let abort = compileAbort(compiler, operands.length == 2 ? operands[1] : null, reportNode);\r\n\r\n      compiler.currentType = type.nonNullableType;\r\n\r\n      if (contextualType == Type.void) { // simplify if dropped anyway\r\n        switch (compiler.currentType.kind) {\r\n          default: { // any integer up to 32-bits incl. bool\r\n            ret = module.createIf(\r\n              module.createUnary(UnaryOp.EqzI32,\r\n                arg0\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            ret = module.createIf(\r\n              module.createUnary(UnaryOp.EqzI64,\r\n                arg0\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE:\r\n          case TypeKind.USIZE: {\r\n            ret = module.createIf(\r\n              module.createUnary(\r\n                compiler.options.isWasm64\r\n                  ? UnaryOp.EqzI64\r\n                  : UnaryOp.EqzI32,\r\n                arg0\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          // TODO: also check for NaN in float assertions, as in `Boolean(NaN) -> false`?\r\n          case TypeKind.F32: {\r\n            ret = module.createIf(\r\n              module.createBinary(BinaryOp.EqF32,\r\n                arg0,\r\n                module.createF32(0)\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            ret = module.createIf(\r\n              module.createBinary(BinaryOp.EqF64,\r\n                arg0,\r\n                module.createF64(0)\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = abort;\r\n            break;\r\n          }\r\n        }\r\n        compiler.currentType = Type.void;\r\n      } else {\r\n        switch (compiler.currentType.kind) {\r\n          default: { // any integer up to 32-bits incl. bool\r\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i32);\r\n            ret = module.createIf(\r\n              module.createUnary(UnaryOp.EqzI32,\r\n                module.createTeeLocal(tempLocal.index, arg0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal.index, NativeType.I32)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i64);\r\n            ret = module.createIf(\r\n              module.createUnary(UnaryOp.EqzI64,\r\n                module.createTeeLocal(tempLocal.index, arg0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal.index, NativeType.I64)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE:\r\n          case TypeKind.USIZE: {\r\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType);\r\n            ret = module.createIf(\r\n              module.createUnary(\r\n                compiler.options.isWasm64\r\n                  ? UnaryOp.EqzI64\r\n                  : UnaryOp.EqzI32,\r\n                module.createTeeLocal(tempLocal.index, arg0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.f32);\r\n            ret = module.createIf(\r\n              module.createBinary(BinaryOp.EqF32,\r\n                module.createTeeLocal(tempLocal.index, arg0),\r\n                module.createF32(0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal.index, NativeType.F32)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.f64);\r\n            ret = module.createIf(\r\n              module.createBinary(BinaryOp.EqF64,\r\n                module.createTeeLocal(tempLocal.index, arg0),\r\n                module.createF64(0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal.index, NativeType.F64)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = abort;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n\r\n    // conversions\r\n\r\n    case \"i8\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.i8;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.i8, ConversionKind.EXPLICIT);\r\n    }\r\n    case \"i16\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.i16;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.i16, ConversionKind.EXPLICIT);\r\n    }\r\n    case \"i32\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.i32;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.i32, ConversionKind.EXPLICIT);\r\n    }\r\n    case \"i64\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.i64;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.i64, ConversionKind.EXPLICIT);\r\n    }\r\n    case \"isize\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = compiler.options.isWasm64\r\n          ? Type.isize64\r\n          : Type.isize32;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.isWasm64\r\n          ? Type.isize64\r\n          : Type.isize32,\r\n        ConversionKind.EXPLICIT\r\n      );\r\n    }\r\n    case \"u8\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.u8;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.u8, ConversionKind.EXPLICIT);\r\n    }\r\n    case \"u16\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.u16;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.u16, ConversionKind.EXPLICIT);\r\n    }\r\n    case \"u32\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.u32;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.u32, ConversionKind.EXPLICIT);\r\n    }\r\n    case \"u64\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.u64;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.u64, ConversionKind.EXPLICIT);\r\n    }\r\n    case \"usize\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = compiler.options.usizeType;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.EXPLICIT\r\n      );\r\n    }\r\n    case \"bool\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.bool;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.bool, ConversionKind.EXPLICIT);\r\n    }\r\n    case \"f32\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.f32;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.f32, ConversionKind.EXPLICIT);\r\n    }\r\n    case \"f64\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.f64;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.f64, ConversionKind.EXPLICIT);\r\n    }\r\n  }\r\n  compiler.error(\r\n    DiagnosticCode.Operation_not_supported,\r\n    reportNode.range\r\n  );\r\n  return module.createUnreachable();\r\n}\r\n\r\nfunction evaluateConstantOffset(compiler: Compiler, expression: Expression): i32 {\r\n  var expr: ExpressionRef;\r\n  var value: i32;\r\n  if (compiler.options.isWasm64) {\r\n    expr = compiler.precomputeExpression(expression, Type.usize64);\r\n    if (\r\n      _BinaryenExpressionGetId(expr) != ExpressionId.Const ||\r\n      _BinaryenExpressionGetType(expr) != NativeType.I64 ||\r\n      _BinaryenConstGetValueI64High(expr) != 0 ||\r\n      (value = _BinaryenConstGetValueI64Low(expr)) < 0\r\n    ) {\r\n      compiler.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n      value = -1;\r\n    }\r\n  } else {\r\n    expr = compiler.precomputeExpression(expression, Type.usize32);\r\n    if (\r\n      _BinaryenExpressionGetId(expr) != ExpressionId.Const ||\r\n      _BinaryenExpressionGetType(expr) != NativeType.I32 ||\r\n      (value = _BinaryenConstGetValueI32(expr)) < 0\r\n    ) {\r\n      compiler.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n      value = -1;\r\n    }\r\n  }\r\n  return value;\r\n}\r\n\r\nconst allocateInternalName = \"allocate_memory\";\r\n\r\n/** Compiles a memory allocation for an instance of the specified class. */\r\nexport function compileAllocate(\r\n  compiler: Compiler,\r\n  classInstance: Class,\r\n  reportNode: Node\r\n): ExpressionRef {\r\n  var program = compiler.program;\r\n  assert(classInstance.program == program);\r\n  var module = compiler.module;\r\n  var options = compiler.options;\r\n\r\n  var allocatePrototype = program.elementsLookup.get(allocateInternalName);\r\n  if (!allocatePrototype) {\r\n    program.error(\r\n      DiagnosticCode.Cannot_find_name_0,\r\n      reportNode.range, allocateInternalName\r\n    );\r\n    return module.createUnreachable();\r\n  }\r\n  if (allocatePrototype.kind != ElementKind.FUNCTION_PROTOTYPE) {\r\n    program.error(\r\n      DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n      reportNode.range, allocatePrototype.internalName\r\n    );\r\n    return module.createUnreachable();\r\n  }\r\n\r\n  var allocateInstance = (<FunctionPrototype>allocatePrototype).resolve(); // reports\r\n  if (!(allocateInstance && compiler.compileFunction(allocateInstance))) return module.createUnreachable();\r\n\r\n  compiler.currentType = classInstance.type;\r\n  return module.createCall(\r\n    allocateInstance.internalName, [\r\n      options.isWasm64\r\n        ? module.createI64(classInstance.currentMemoryOffset)\r\n        : module.createI32(classInstance.currentMemoryOffset)\r\n    ],\r\n    options.nativeSizeType\r\n  );\r\n}\r\n\r\nconst abortInternalName = \"abort\";\r\n\r\n/** Compiles an abort wired to the conditionally imported 'abort' function. */\r\nexport function compileAbort(\r\n  compiler: Compiler,\r\n  message: Expression | null,\r\n  reportNode: Node\r\n): ExpressionRef {\r\n  var program = compiler.program;\r\n  var module = compiler.module;\r\n\r\n  var stringType = program.typesLookup.get(\"string\"); // might be intended\r\n  if (!stringType) return module.createUnreachable();\r\n\r\n  var abortPrototype = program.elementsLookup.get(abortInternalName); // might be intended\r\n  if (!abortPrototype || abortPrototype.kind != ElementKind.FUNCTION_PROTOTYPE) return module.createUnreachable();\r\n\r\n  var abortInstance = (<FunctionPrototype>abortPrototype).resolve(); // reports\r\n  if (!(abortInstance && compiler.compileFunction(abortInstance))) return module.createUnreachable();\r\n\r\n  var messageArg = message != null\r\n    ? compiler.compileExpression(message, stringType)\r\n    : stringType.toNativeZero(module);\r\n\r\n  var filenameArg = compiler.compileStaticString(reportNode.range.source.normalizedPath);\r\n\r\n  compiler.currentType = Type.void;\r\n  return module.createBlock(null, [\r\n    module.createCallImport(\r\n      abortInstance.internalName, [\r\n        messageArg,\r\n        filenameArg,\r\n        module.createI32(reportNode.range.line),\r\n        module.createI32(reportNode.range.column)\r\n      ],\r\n      NativeType.None\r\n    ),\r\n    module.createUnreachable()\r\n  ]);\r\n}\r\n","module.exports = __WEBPACK_EXTERNAL_MODULE__22__;","// Copy Binaryen exports to global scope\r\n\r\nconst binaryen = global.Binaryen || require(\"binaryen\");\r\n\r\nfor (var key in binaryen)\r\n  if (key.startsWith(\"_Binaryen\") || key.startsWith(\"_Relooper\"))\r\n    global[key] = binaryen[key];\r\n\r\n// Utilize Binaryen's heap\r\n\r\nglobal.allocate_memory = function(size) {\r\n  if (!size) return 0; // should be safe in our case\r\n  return binaryen._malloc(size);\r\n};\r\n\r\nglobal.free_memory = function(ptr) {\r\n  if (ptr) binaryen._free(ptr);\r\n};\r\n\r\nglobal.move_memory = function(dest, src, n) {\r\n  return binaryen._memmove(dest, src, n);\r\n};\r\n\r\nglobal.store = function(ptr, val) {\r\n  binaryen.HEAPU8[ptr] = val;\r\n};\r\n\r\nglobal.load = function(ptr) {\r\n  return binaryen.HEAPU8[ptr];\r\n};\r\n\r\n// Implement module stubs\r\n\r\nconst Module = require(\"../../module\").Module;\r\n\r\nModule.prototype.toText = function toText() {\r\n  var previousPrint = binaryen.print;\r\n  var ret = \"\";\r\n  binaryen.print = function(x) { ret += x + \"\\n\" };\r\n  _BinaryenModulePrint(this.ref);\r\n  binaryen.print = previousPrint;\r\n  return ret;\r\n};\r\n\r\nModule.prototype.toAsmjs = function toAsmjs() {\r\n  var previousPrint = binaryen.print;\r\n  var ret = \"\";\r\n  binaryen.print = function(x) { ret += x + \"\\n\" };\r\n  _BinaryenModulePrintAsmjs(this.ref);\r\n  binaryen.print = previousPrint;\r\n  return ret;\r\n};\r\n","module.exports = globalScope => {\r\n  var HEAP = new Uint8Array(0);\r\n  var HEAP_OFFSET = 0;\r\n\r\n  globalScope[\"allocate_memory\"] = function allocate_memory(size) {\r\n    if (!(size >>>= 0))\r\n      return 0;\r\n    if (HEAP_OFFSET + size > HEAP.length) {\r\n      var oldHeap = HEAP;\r\n      HEAP = new Uint8Array(Math.max(65536, HEAP.length + size, HEAP.length * 2));\r\n      HEAP.set(oldHeap);\r\n    }\r\n    var ptr = HEAP_OFFSET;\r\n    if ((HEAP_OFFSET += size) & 7)\r\n      HEAP_OFFSET = (HEAP_OFFSET | 7) + 1;\r\n    return ptr;\r\n  };\r\n\r\n  globalScope[\"free_memory\"] = function free_memory(ptr) {\r\n    // TODO\r\n  };\r\n\r\n  globalScope[\"move_memory\"] = function move_memory(dest, src, n) {\r\n    HEAP.copyWithin(dest, src, src + n);\r\n  };\r\n\r\n  globalScope[\"store\"] = function store(ptr, val, off) {\r\n    if (typeof off === \"number\")\r\n      ptr += off;\r\n    HEAP[ptr] = val;\r\n  };\r\n\r\n  globalScope[\"load\"] = function load(ptr) {\r\n    if (typeof off === \"number\")\r\n      ptr += off;\r\n    return HEAP[ptr];\r\n  };\r\n};\r\n","module.exports = globalScope => {\r\n  globalScope[\"JSMath\"] = Math;\r\n};\r\n","/** @module std/portable *//***/\r\n\r\nvar globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\r\n\r\nObject.defineProperties(\r\n  globalScope[\"i8\"] = function i8(value) { return value << 24 >> 24; }\r\n, {\r\n  \"MIN_VALUE\": { value: -128, writable: false },\r\n  \"MAX_VALUE\": { value: 127, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"i16\"] = function i16(value) { return value << 16 >> 16; }\r\n, {\r\n  \"MIN_VALUE\": { value: -32768, writable: false },\r\n  \"MAX_VALUE\": { value: 32767, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"i32\"] = globalScope[\"isize\"] = function i32(value) { return value | 0; }\r\n, {\r\n  \"MIN_VALUE\": { value: -2147483648, writable: false },\r\n  \"MAX_VALUE\": { value: 2147483647, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"u8\"] = function u8(value) { return value & 0xff; }\r\n, {\r\n  \"MIN_VALUE\": { value: 0, writable: false },\r\n  \"MAX_VALUE\": { value: 255, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"u16\"] = function u16(value) { return value & 0xffff; }\r\n, {\r\n  \"MIN_VALUE\": { value: 0, writable: false },\r\n  \"MAX_VALUE\": { value: 65535, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"u32\"] = globalScope[\"usize\"] = function u32(value) { return value >>> 0; }\r\n, {\r\n  \"MIN_VALUE\": { value: 0, writable: false },\r\n  \"MAX_VALUE\": { value: 4294967295, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"bool\"] = function bool(value) { return !!value; }\r\n, {\r\n  \"MIN_VALUE\": { value: 0, writable: false },\r\n  \"MAX_VALUE\": { value: 1, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"f32\"] = function f32(value) { return Math.fround(value); }\r\n, {\r\n  \"MIN_VALUE\": { value: Math.fround(-3.40282347e+38), writable: false },\r\n  \"MAX_VALUE\": { value: Math.fround(3.40282347e+38), writable: false },\r\n  \"MIN_POSITIVE_VALUE\": { value: Math.fround(1.175494351e-38), writable: false },\r\n  \"MIN_SAFE_INTEGER\": { value: -16777215, writable: false },\r\n  \"MAX_SAFE_INTEGER\": { value: 16777215, writable: false },\r\n  \"EPSILON\": { value: Math.fround(1.19209290e-07), writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"f64\"] = function f64(value) { return +value; }\r\n, {\r\n  \"MIN_VALUE\": { value: -1.7976931348623157e+308, writable: false },\r\n  \"MAX_VALUE\": { value: 1.7976931348623157e+308, writable: false },\r\n  \"MIN_POSITIVE_VALUE\": { value: 2.2250738585072014e-308 , writable: false },\r\n  \"MIN_SAFE_INTEGER\": { value: -9007199254740991, writable: false },\r\n  \"MAX_SAFE_INTEGER\": { value: 9007199254740991, writable: false },\r\n  \"EPSILON\": { value: 2.2204460492503131e-16, writable: false }\r\n});\r\n\r\nglobalScope[\"clz\"] = Math.clz32;\r\n\r\nglobalScope[\"abs\"] = Math.abs;\r\n\r\nglobalScope[\"max\"] = Math.max;\r\n\r\nglobalScope[\"min\"] = Math.min;\r\n\r\nglobalScope[\"ceil\"] = Math.ceil;\r\n\r\nglobalScope[\"floor\"] = Math.floor;\r\n\r\nglobalScope[\"select\"] = function select(ifTrue, ifFalse, condition) {\r\n  return condition ? ifTrue : ifFalse;\r\n};\r\n\r\nglobalScope[\"sqrt\"] = Math.sqrt;\r\n\r\nglobalScope[\"trunc\"] = Math.trunc;\r\n\r\nglobalScope[\"bswap\"] = function bswap(value) {\r\n  var a = value >> 8 & 0x00FF00FF;\r\n  var b = (value & 0x00FF00FF) << 8;\r\n  value = a | b;\r\n  a = value >> 16 & 0x0000FFFF;\r\n  b = (value & 0x0000FFFF) << 16;\r\n  return a | b;\r\n};\r\n\r\nglobalScope[\"bswap16\"] = function bswap16(value) {\r\n  return ((value << 8) & 0xFF00) | ((value >> 8) & 0x00FF) | (value & 0xFFFF0000);\r\n};\r\n\r\nfunction UnreachableError() {\r\n  if (Error.captureStackTrace) {\r\n    Error.captureStackTrace(this, UnreachableError);\r\n  } else {\r\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\r\n  }\r\n}\r\nUnreachableError.prototype = Object.create(Error.prototype);\r\nUnreachableError.prototype.name = \"UnreachableError\";\r\nUnreachableError.prototype.message = \"unreachable\";\r\n\r\nglobalScope[\"unreachable\"] = function unreachable() {\r\n  throw new UnreachableError();\r\n};\r\n\r\nfunction AssertionError(message) {\r\n  this.message = message || \"assertion failed\";\r\n  if (Error.captureStackTrace) {\r\n    Error.captureStackTrace(this, AssertionError);\r\n  } else {\r\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\r\n  }\r\n}\r\nAssertionError.prototype = Object.create(Error.prototype);\r\nAssertionError.prototype.name = \"AssertionError\";\r\n\r\nglobalScope[\"assert\"] = function assert(isTrueish, message) {\r\n  if (isTrueish) return isTrueish;\r\n  throw new AssertionError(message);\r\n};\r\n\r\nglobalScope[\"changetype\"] = function changetype(value) {\r\n  return value;\r\n};\r\n\r\nglobalScope[\"parseI32\"] = function parseI32(str, radix) {\r\n  return parseInt(str, undefined) | 0;\r\n};\r\n\r\nString[\"fromCharCodes\"] = function fromCharCodes(arr) {\r\n  return String.fromCharCode.apply(String, arr);\r\n};\r\n\r\nString[\"fromCodePoints\"] = function fromCodePoints(arr) {\r\n  return String.fromCodePoint.apply(String, arr);\r\n};\r\n\r\nglobalScope[\"isInteger\"] = Number.isInteger;\r\n\r\nglobalScope[\"isFloat\"] = function isFloat(arg) {\r\n  return typeof arg === \"number\";\r\n};\r\n\r\nglobalScope[\"isReference\"] = function isClass(arg) {\r\n  return typeof arg === \"object\" || typeof arg === \"string\";\r\n};\r\n\r\nglobalScope[\"isString\"] = function isString(arg) {\r\n  return typeof arg === \"string\" || arg instanceof String;\r\n};\r\n\r\nglobalScope[\"isArray\"] = Array.isArray;\r\n\r\nglobalScope[\"fmod\"] = function fmod(x, y) {\r\n  return x % y;\r\n};\r\n\r\nglobalScope[\"fmodf\"] = function fmodf(x, y) {\r\n  return Math.fround(x % y);\r\n};\r\n\r\nrequire(\"./portable/math\")(globalScope);\r\nrequire(\"./portable/memory\")(globalScope);\r\n","/**\r\n * JavaScript glue code.\r\n * @module glue/js\r\n * @preferred\r\n *//***/\r\n\r\nimport \"../../../std/portable\";\r\nimport \"./binaryen\";\r\nimport \"./i64\";\r\nimport \"./float\";\r\n"],"sourceRoot":""}
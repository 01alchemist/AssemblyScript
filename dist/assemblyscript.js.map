{"version":3,"sources":["webpack://assemblyscript/webpack/universalModuleDefinition","webpack://assemblyscript/webpack/bootstrap","webpack://assemblyscript/./src/program.ts","webpack://assemblyscript/./src/util/index.ts","webpack://assemblyscript/./src/diagnostics.ts","webpack://assemblyscript/./src/module.ts","webpack://assemblyscript/./src/ast.ts","webpack://assemblyscript/(webpack)/buildin/global.js","webpack://assemblyscript/./src/tokenizer.ts","webpack://assemblyscript/./src/types.ts","webpack://assemblyscript/./src/diagnosticMessages.generated.ts","webpack://assemblyscript/./src/compiler.ts","webpack://assemblyscript/./src/parser.ts","webpack://assemblyscript/./src/definitions.ts","webpack://assemblyscript/./src/decompiler.ts","webpack://assemblyscript/./src/index.ts","webpack://assemblyscript/./src/glue/js/float.js","webpack://assemblyscript/./node_modules/long/src/long.js","webpack://assemblyscript/./src/glue/js/i64.js","webpack://assemblyscript/./src/util/binary.ts","webpack://assemblyscript/./src/util/text.ts","webpack://assemblyscript/./src/util/path.ts","webpack://assemblyscript/./src/util/charcode.ts","webpack://assemblyscript/./src/builtins.ts","webpack://assemblyscript/external \"binaryen\"","webpack://assemblyscript/./src/glue/js/binaryen.js","webpack://assemblyscript/./std/portable/memory.js","webpack://assemblyscript/./std/portable/math.js","webpack://assemblyscript/./std/portable.js","webpack://assemblyscript/./src/glue/js/index.ts"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__22__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","diagnostics_1","types_1","ast_1","module_1","PATH_DELIMITER","PARENT_SUBST","GETTER_PREFIX","SETTER_PREFIX","INSTANCE_DELIMITER","STATIC_DELIMITER","INNER_DELIMITER","LIBRARY_SUBST","LIBRARY_PREFIX","OperatorKind","QueuedExport","QueuedImport","TypeAlias","operatorKindFromString","str","assert","length","charCodeAt","INDEXED_GET","INDEXED_SET","UNCHECKED_INDEXED_GET","UNCHECKED_INDEXED_SET","ADD","SUB","MUL","POW","DIV","REM","AND","OR","XOR","EQ","NE","GT","GE","LT","LE","INVALID","ElementKind","CommonFlags","DecoratorFlags","noTypesYet","Map","Program","_super","diagnostics","_this","diagnosticsOffset","elementsLookup","instancesLookup","typesLookup","typeAliases","fileLevelExports","moduleLevelExports","arrayPrototype","arrayBufferViewPrototype","stringInstance","resolvedThisExpression","resolvedElementExpression","sources","__extends","getSource","normalizedPath","k","source","lookupSourceByPath","normalizedPathWithoutExtension","initialize","options","Type","i8","i16","i32","i64","isizeType","u8","u16","u32","u64","usizeType","bool","f32","f64","void","queuedExports","queuedImports","Array","queuedExtends","queuedImplements","statements","j","statement","kind","NodeKind","CLASSDECLARATION","initializeClass","ENUMDECLARATION","initializeEnum","EXPORT","initializeExports","FUNCTIONDECLARATION","initializeFunction","IMPORT","initializeImports","INTERFACEDECLARATION","initializeInterface","NAMESPACEDECLARATION","initializeNamespace","TYPEDECLARATION","initializeTypeAlias","VARIABLE","initializeVariables","queuedImport","element","tryResolveImport","referencedName","set","internalName","splice","referencedNameAlt","error","DiagnosticCode","Module_0_has_no_exported_member_1","declaration","range","parent","path","externalName","text","queuedExports_1","__values","queuedExports_1_1","next","done","_a","__read","exportName","queuedExport","currentExport","isReExport","member","setExportAndCheckLibrary","Cannot_find_name_0","derivedPrototype","derivedDeclaration","derivedType","extendsType","baseElement","resolveIdentifier","CLASS_PROTOTYPE","basePrototype","A_class_may_only_extend_another_class","globalAliases","globalAliases_1","globalAliases_1_1","_c","alias","Error","INTERFACE_PROTOTYPE","stringPrototype","resolve","has","Duplicate_identifier_0","programLevelInternalName","type","filterDecorators","decorators","acceptedFlags","presentFlags","NONE","decorator","IDENTIFIER","flag","decoratorKindToFlag","stringToDecoratorKind","Duplicate_decorator","Decorator_0_is_not_valid_here","checkGlobalOptions","parentNode","hasDecorator","GLOBAL","is","BUILTIN","isLibrary","SOURCE","globalName","namespace","fileLevelInternalName","simpleName","ClassPrototype","SEALED","UNMANAGED","implementsTypes","numImplementsTypes","Unmanaged_classes_cannot_implement_interfaces","Range","join","push","members","MODULE_EXPORT","Export_declaration_conflicts_with_exported_declaration_of_0","isEntry","memberDeclarations","memberDeclaration","FIELDDECLARATION","initializeField","METHODDECLARATION","isAny","GET","SET","initializeAccessor","initializeMethod","classPrototype","STATIC","staticField","Global","instanceMembers","instanceField","FieldPrototype","decoratorFlags","OPERATOR","INLINE","CONSTRUCTOR","FunctionPrototype","constructorPrototype","Multiple_constructor_implementations_are_not_allowed","checkOperatorOverloads","decoratorKind","DecoratorKind","numArgs","arguments","firstArg","LITERAL","literalKind","LiteralKind","STRING","Operation_not_supported","overloads","overloadPrototypes","Duplicate_function_implementation","operatorKind","String_literal_expected","Expected_0_arguments_but_got_1","toString","internalPropertyName","propertyElement","isGetter","isNew","PROPERTY","getterPrototype","setterPrototype","Property","baseName","staticName","staticPrototype","instanceName","instancePrototype","Enum","values","initializeEnumValue","enm","EnumValue","initializeExport","internalPath","identifier","referencedElement","seen","Set","add","declarations","initializeImport","namespaceName","indexPart","endsWith","substring","InterfacePrototype","parentNamespace","Namespace","existingExport","Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local","typeParameters","global_1","resolveSignature","node","contextualTypeArguments","reportNotFound","explicitThisType","thisType","resolveType","parameterTypeNodes","parameters","numParameters","parameterTypes","parameterNames","requiredParameters","hasRest","parameterTypeNode","parameterKind","ParameterKind","DEFAULT","REST","parameterType","returnType","returnTypeNode","signature","Signature","SIGNATURE","asFunction","typeNode","localName","ENUM","instance","resolveUsingTypeArguments","typeArguments","paramTypes","paramType","instanceKey","typesToString","placeholderType","resolveTypeArguments","typeArgumentNodes","alternativeReportNode","parameterCount","argumentCount","Expected_0_type_arguments_but_got_1","atEnd","contextualFunction","contextualEnum","ENUMVALUE","flow","getScopedLocal","resolvePropertyAccess","propertyAccess","targetExpression","expression","target","resolveExpression","propertyName","LOCAL","FIELD","classReference","Property_0_does_not_exist_on_type_1","CLASS","elementExpression","indexedGet","lookupOverload","Index_signature_is_missing_in_type_0","base","resolveElementAccess","elementAccess","PARENTHESIZED","ASSERTION","toType","classType","BINARY","THIS","explicitLocal","_this_cannot_be_referenced_in_current_location","SUPER","_super_can_only_be_referenced_in_a_derived_class","PROPERTYACCESS","ELEMENTACCESS","CALL","FUNCTION_PROTOTYPE","signatureReference","functionTarget","cachedFunctionTarget","FunctionTarget","Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures","DiagnosticEmitter","Element","program","flags","NAMESPACE","constantValue","ConstantValueKind","VariableLikeElement","constantValueKind","withConstantIntegerValue","lo","hi","constantIntegerValue","i64_new","CONST","INLINED","withConstantFloatValue","constantFloatValue","Parameter","initializer","Local","index","scopedGlobal","instances","classTypeArguments","functionTypeArguments","isInstance","INSTANCE","inheritedTypeArguments","inheritedTypeArguments_1","inheritedTypeArguments_1_1","inheritedName","inheritedType","classTypeParameters","numClassTypeParameters","numFunctionTypeArguments","signatureNode","functionTypeParameters","classInstance","signatureParameters","signatureParameterCount","parameterDeclaration","Function","resolvePartial","partialKey","partialPrototype","reportNode","resolvedTypeArguments","GENERIC","resolveBuiltinTypeArguments","resolvedType","FUNCTION","localsByName","localsByIndex","additionalLocals","breakContext","debugLocations","ref","functionTableIndex","trampoline","outerScope","nextBreakId","breakStack","nextInlineId","tempI32s","tempI64s","tempF32s","tempF64s","AMBIENT","DECLARE","localIndex","local","inheritedTypeArguments_2","inheritedTypeArguments_2_1","parameterName","getParameterName","Flow","create","addLocal","getTempLocal","wrapped","temps","toNativeType","NativeType","I32","I64","F32","F64","pop","setLocalWrapped","freeTempLocal","getAndFreeTempLocal","enterBreakContext","id","leaveBreakContext","finalize","sourceMap","debugLocation","setDebugLocation","debugInfoRef","debugInfoIndex","line","column","FUNCTION_TARGET","toSignatureString","FIELD_PROTOTYPE","Field","memoryOffset","inheritedTypeArguments_3","inheritedTypeArguments_3_1","baseClass","baseClassType","Class_0_is_sealed_and_cannot_be_extended","Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa","Class","currentMemoryOffset","_d","inheritedMember","partialConstructor","constructorInstance","_f","_g","fieldDeclaration","fieldType","fieldInstance","byteSize","instanceProperty","partialGetterPrototype","partialSetterPrototype","_j","_k","_l","operatorInstance","operatorPartial","asClass","inheritedTypeArguments_4","inheritedTypeArguments_4_1","baseType","isAssignableTo","current","unchecked","uncheckedOverload","overload","Interface","INTERFACE","FlowFlags","scopedLocals","currentFunction","parentFlow","continueLabel","breakLabel","returnLabel","wrappedLocals","wrappedLocalsExt","unset","enterBranchOrScope","branch","slice","leaveBranchOrScope","propagate","_b","scopedLocal","SCOPED","addScopedLocal","existingLocal","addScopedLocalAlias","scopedAlias","isLocalWrapped","map","ext","i64_ne","i64_and","i64_shl","i64_one","i64_zero","off","i64_or","i64_not","inherit","other","inheritMutual","left","right","leftExt","rightExt","thisExt","minLength","min","canOverflow","expr","operand","getExpressionId","ExpressionId","GetLocal","getGetLocalIndex","canConversionOverflow","SetLocal","isTeeLocal","getSetLocalValue","GetGlobal","Binary","getBinaryOp","BinaryOp","EqI32","EqI64","EqF32","EqF64","NeI32","NeI64","NeF32","NeF64","LtI32","LtU32","LtI64","LtU64","LtF32","LtF64","LeI32","LeU32","LeI64","LeU64","LeF32","LeF64","GtI32","GtU32","GtI64","GtU64","GtF32","GtF64","GeI32","GeU32","GeI64","GeU64","GeF32","GeF64","MulI32","getBinaryLeft","Const","getConstValueI32","getBinaryRight","AndI32","computeSmallIntegerMask","ShlI32","shift","size","ShrI32","ShrU32","DivU32","RemI32","RemU32","Unary","getUnaryOp","UnaryOp","EqzI32","EqzI64","ClzI32","CtzI32","PopcntI32","getExpressionType","getConstValueI64Low","getConstValueF32","getConstValueF64","MIN_VALUE","MAX_VALUE","Load","fromType","getLoadBytes","isLoadSigned","Block","getBlockName","getBlockChildCount","last","getBlockChild","If","getIfTrue","getIfFalse","Select","getSelectThen","getSelectElse","Call","getCallTarget","Unreachable","fromSize","toSize","__export","DiagnosticCategory","diagnosticMessages_generated_1","util_1","diagnosticMessages_generated_2","diagnosticCategoryToString","category","INFO","WARNING","ERROR","diagnosticCategoryToColor","COLOR_BLUE","COLOR_YELLOW","COLOR_RED","diagnosticCodeToString","COLOR_RESET","DiagnosticMessage","code","message","arg0","arg1","arg2","replace","createInfo","createWarning","createError","withRange","formatDiagnosticContext","useColors","len","start","end","isLineBreak","sb","formatDiagnosticMessage","showContext","emitDiagnostic","info","warning","compiler_1","_BinaryenTypeNone","_BinaryenTypeInt32","_BinaryenTypeInt64","_BinaryenTypeFloat32","_BinaryenTypeFloat64","_BinaryenTypeUnreachable","_BinaryenTypeAuto","_BinaryenInvalidId","_BinaryenBlockId","_BinaryenIfId","_BinaryenLoopId","_BinaryenBreakId","_BinaryenSwitchId","_BinaryenCallId","_BinaryenCallImportId","_BinaryenCallIndirectId","_BinaryenGetLocalId","_BinaryenSetLocalId","_BinaryenGetGlobalId","_BinaryenSetGlobalId","_BinaryenLoadId","_BinaryenStoreId","_BinaryenConstId","_BinaryenUnaryId","_BinaryenBinaryId","_BinaryenSelectId","_BinaryenDropId","_BinaryenReturnId","_BinaryenHostId","_BinaryenNopId","_BinaryenUnreachableId","_BinaryenAtomicCmpxchgId","_BinaryenAtomicRMWId","_BinaryenAtomicWaitId","_BinaryenAtomicWakeId","_BinaryenClzInt32","_BinaryenCtzInt32","_BinaryenPopcntInt32","_BinaryenNegFloat32","_BinaryenAbsFloat32","_BinaryenCeilFloat32","_BinaryenFloorFloat32","_BinaryenTruncFloat32","_BinaryenNearestFloat32","_BinaryenSqrtFloat32","_BinaryenEqZInt32","_BinaryenClzInt64","_BinaryenCtzInt64","_BinaryenPopcntInt64","_BinaryenNegFloat64","_BinaryenAbsFloat64","_BinaryenCeilFloat64","_BinaryenFloorFloat64","_BinaryenTruncFloat64","_BinaryenNearestFloat64","_BinaryenSqrtFloat64","_BinaryenEqZInt64","_BinaryenExtendSInt32","_BinaryenExtendUInt32","_BinaryenWrapInt64","_BinaryenTruncSFloat32ToInt32","_BinaryenTruncSFloat32ToInt64","_BinaryenTruncUFloat32ToInt32","_BinaryenTruncUFloat32ToInt64","_BinaryenTruncSFloat64ToInt32","_BinaryenTruncSFloat64ToInt64","_BinaryenTruncUFloat64ToInt32","_BinaryenTruncUFloat64ToInt64","_BinaryenReinterpretFloat32","_BinaryenReinterpretFloat64","_BinaryenConvertSInt32ToFloat32","_BinaryenConvertSInt32ToFloat64","_BinaryenConvertUInt32ToFloat32","_BinaryenConvertUInt32ToFloat64","_BinaryenConvertSInt64ToFloat32","_BinaryenConvertSInt64ToFloat64","_BinaryenConvertUInt64ToFloat32","_BinaryenConvertUInt64ToFloat64","_BinaryenPromoteFloat32","_BinaryenDemoteFloat64","_BinaryenReinterpretInt32","_BinaryenReinterpretInt64","_BinaryenExtendS8Int32","_BinaryenExtendS16Int32","_BinaryenExtendS8Int64","_BinaryenExtendS16Int64","_BinaryenExtendS32Int64","_BinaryenAddInt32","_BinaryenSubInt32","_BinaryenMulInt32","_BinaryenDivSInt32","_BinaryenDivUInt32","_BinaryenRemSInt32","_BinaryenRemUInt32","_BinaryenAndInt32","_BinaryenOrInt32","_BinaryenXorInt32","_BinaryenShlInt32","_BinaryenShrUInt32","_BinaryenShrSInt32","_BinaryenRotLInt32","_BinaryenRotRInt32","_BinaryenEqInt32","_BinaryenNeInt32","_BinaryenLtSInt32","_BinaryenLtUInt32","_BinaryenLeSInt32","_BinaryenLeUInt32","_BinaryenGtSInt32","_BinaryenGtUInt32","_BinaryenGeSInt32","_BinaryenGeUInt32","_BinaryenAddInt64","_BinaryenSubInt64","_BinaryenMulInt64","_BinaryenDivSInt64","_BinaryenDivUInt64","_BinaryenRemSInt64","_BinaryenRemUInt64","_BinaryenAndInt64","_BinaryenOrInt64","_BinaryenXorInt64","_BinaryenShlInt64","_BinaryenShrUInt64","_BinaryenShrSInt64","_BinaryenRotLInt64","_BinaryenRotRInt64","_BinaryenEqInt64","_BinaryenNeInt64","_BinaryenLtSInt64","_BinaryenLtUInt64","_BinaryenLeSInt64","_BinaryenLeUInt64","_BinaryenGtSInt64","_BinaryenGtUInt64","_BinaryenGeSInt64","_BinaryenGeUInt64","_BinaryenAddFloat32","_BinaryenSubFloat32","_BinaryenMulFloat32","_BinaryenDivFloat32","_BinaryenCopySignFloat32","_BinaryenMinFloat32","_BinaryenMaxFloat32","_BinaryenEqFloat32","_BinaryenNeFloat32","_BinaryenLtFloat32","_BinaryenLeFloat32","_BinaryenGtFloat32","_BinaryenGeFloat32","_BinaryenAddFloat64","_BinaryenSubFloat64","_BinaryenMulFloat64","_BinaryenDivFloat64","_BinaryenCopySignFloat64","_BinaryenMinFloat64","_BinaryenMaxFloat64","_BinaryenEqFloat64","_BinaryenNeFloat64","_BinaryenLtFloat64","_BinaryenLeFloat64","_BinaryenGtFloat64","_BinaryenGeFloat64","HostOp","_BinaryenPageSize","_BinaryenCurrentMemory","_BinaryenGrowMemory","_BinaryenHasFeature","AtomicRMWOp","_BinaryenAtomicRMWAdd","_BinaryenAtomicRMWSub","_BinaryenAtomicRMWAnd","_BinaryenAtomicRMWOr","_BinaryenAtomicRMWXor","_BinaryenAtomicRMWXchg","MemorySegment","buffer","offset","segment","Module","cachedTemporaryName","hasTemporaryFunction","cachedPrecomputeName","cachedPrecomputeNames","_BinaryenModuleCreate","cachedByValue","allocate_memory","createFrom","cArr","allocU8Array","_BinaryenModuleRead","free_memory","changetype","addFunctionType","result","cStr","allocString","allocI32Array","_BinaryenAddFunctionType","getFunctionTypeBySignature","_BinaryenGetFunctionTypeBySignature","removeFunctionType","_BinaryenRemoveFunctionType","createI32","out","_BinaryenLiteralInt32","_BinaryenConst","createI64","valueLow","valueHigh","_BinaryenLiteralInt64","createF32","_BinaryenLiteralFloat32","createF64","_BinaryenLiteralFloat64","createUnary","op","_BinaryenUnary","createBinary","_BinaryenBinary","createHost","operands","allocPtrArray","_BinaryenHost","createGetLocal","_BinaryenGetLocal","createTeeLocal","_BinaryenTeeLocal","createGetGlobal","_BinaryenGetGlobal","createLoad","bytes","signed","ptr","_BinaryenLoad","createStore","_BinaryenStore","createAtomicLoad","_BinaryenAtomicLoad","createAtomicStore","_BinaryenAtomicStore","createAtomicRMW","_BinaryenAtomicRMW","createAtomicCmpxchg","expected","replacement","_BinaryenAtomicCmpxchg","createAtomicWait","timeout","expectedType","_BinaryenAtomicWait","createAtomicWake","wakeCount","_BinaryenAtomicWake","createSetLocal","_BinaryenSetLocal","createSetGlobal","_BinaryenSetGlobal","createBlock","label","children","None","_BinaryenBlock","createBreak","condition","_BinaryenBreak","createDrop","_BinaryenDrop","createLoop","body","_BinaryenLoop","createIf","ifTrue","ifFalse","_BinaryenIf","createNop","_BinaryenNop","createReturn","_BinaryenReturn","createSelect","_BinaryenSelect","createSwitch","names","defaultName","numNames","strs","_BinaryenSwitch","createCall","_BinaryenCall","createCallImport","_BinaryenCallImport","createCallIndirect","typeName","_BinaryenCallIndirect","createUnreachable","_BinaryenUnreachable","addGlobal","mutable","_BinaryenAddGlobal","addFunction","varTypes","_BinaryenAddFunction","removeFunction","_BinaryenRemoveFunction","addTemporaryFunction","tempName","typeRef","removeTemporaryFunction","addFunctionExport","cStr1","cStr2","_BinaryenAddFunctionExport","addTableExport","_BinaryenAddTableExport","addMemoryExport","_BinaryenAddMemoryExport","addGlobalExport","_BinaryenAddGlobalExport","removeExport","_BinaryenRemoveExport","addFunctionImport","externalModuleName","externalBaseName","functionType","cStr3","_BinaryenAddFunctionImport","addTableImport","_BinaryenAddTableImport","addMemoryImport","_BinaryenAddMemoryImport","addGlobalImport","globalType","_BinaryenAddGlobalImport","removeImport","_BinaryenRemoveImport","setMemory","initial","maximum","segments","segs","offs","sizs","Target","WASM64","i64_low","i64_high","cArr1","cArr2","cArr3","_BinaryenSetMemory","setFunctionTable","funcs","_BinaryenSetFunctionTable","setStart","func","_BinaryenSetStart","setOptimizeLevel","level","_BinaryenSetOptimizeLevel","setShrinkLevel","_BinaryenSetShrinkLevel","setDebugInfo","on","_BinaryenSetDebugInfo","optimize","_BinaryenFunctionOptimize","_BinaryenModuleOptimize","runPasses","passes","_BinaryenFunctionRunPasses","_BinaryenModuleRunPasses","precomputeFunction","validate","_BinaryenModuleValidate","interpret","_BinaryenModuleInterpret","toBinary","sourceMapUrl","binaryPtr","sourceMapPtr","_BinaryenModuleAllocateAndWrite","readInt","binaryBytes","ret","BinaryModule","output","Uint8Array","load","readBuffer","readString","toText","toAsmjs","dispose","_BinaryenModuleDispose","createRelooper","Relooper","cloneExpression","noSideEffects","maxDepth","nested1","nested2","_BinaryenExpressionGetId","_BinaryenExpressionGetType","_BinaryenConstGetValueI32","_BinaryenConstGetValueI64Low","_BinaryenConstGetValueI64High","_BinaryenConstGetValueF32","_BinaryenConstGetValueF64","_BinaryenGetLocalGetIndex","_BinaryenGetGlobalGetName","_BinaryenLoadGetPtr","_BinaryenLoadIsAtomic","_BinaryenLoadGetBytes","_BinaryenLoadGetOffset","_BinaryenLoadIsSigned","_BinaryenLoadGetAlign","_BinaryenUnaryGetValue","_BinaryenUnaryGetOp","_BinaryenBinaryGetLeft","_BinaryenBinaryGetRight","_BinaryenBinaryGetOp","addDebugInfoFile","_BinaryenModuleAddDebugInfoFileName","getDebugInfoFile","_BinaryenModuleGetDebugInfoFileName","fileIndex","lineNumber","columnNumber","_BinaryenFunctionSetDebugLocation","MAX_MEMORY_WASM32","MAX_MEMORY_WASM64","getConstValueI64High","getSetLocalIndex","_BinaryenSetLocalGetIndex","_BinaryenSetLocalGetValue","_BinaryenSetLocalIsTee","getUnaryValue","getLoadOffset","getLoadPtr","getStoreBytes","_BinaryenStoreGetBytes","getStoreOffset","_BinaryenStoreGetOffset","getStorePtr","_BinaryenStoreGetPtr","getStoreValue","_BinaryenStoreGetValue","_BinaryenBlockGetName","_BinaryenBlockGetNumChildren","_BinaryenBlockGetChild","getIfCondition","_BinaryenIfGetCondition","_BinaryenIfGetIfTrue","_BinaryenIfGetIfFalse","getLoopName","_BinaryenLoopGetName","getLoopBody","_BinaryenLoopGetBody","getBreakName","_BinaryenBreakGetName","getBreakCondition","_BinaryenBreakGetCondition","_BinaryenSelectGetIfTrue","_BinaryenSelectGetIfFalse","getSelectCondition","_BinaryenSelectGetCondition","getDropValue","_BinaryenDropGetValue","getReturnValue","_BinaryenReturnGetValue","_BinaryenCallGetTarget","getHostOp","_BinaryenHostGetOp","getHostOperandCount","_BinaryenHostGetNumOperands","getHostOperand","_BinaryenHostGetOperand","getHostName","_BinaryenHostGetNameOperand","getFunctionBody","_BinaryenFunctionGetBody","getFunctionName","_BinaryenFunctionGetName","getFunctionParamCount","_BinaryenFunctionGetNumParams","getFunctionParamType","_BinaryenFunctionGetParam","getFunctionResultType","_BinaryenFunctionGetResult","relooper","_RelooperCreate","addBlock","_RelooperAddBlock","addBranch","from","to","_RelooperAddBranch","addBlockWithSwitch","_RelooperAddBlockWithSwitch","addBranchForSwitch","indexes","_RelooperAddBranchForSwitch","renderAndDispose","entry","labelHelper","_RelooperRenderAndDispose","u8s","numValues","idx","store","i32s","val","ptrs","u","stringLengthUTF8","cp","u1","u2","u3","u4","arr","String","fromCodePoints","program_1","tokenizer_1","Token","Node","createType","isNullable","TypeNode","setParent","createOmittedType","createIdentifierExpression","createTypeParameter","elem","TypeParameterNode","createParameter","ParameterNode","createSignature","sig","SignatureNode","createDecorator","args","stmt","DecoratorNode","CUSTOM","createComment","CommentNode","commentKind","IdentifierExpression","createEmptyIdentifierExpression","createArrayLiteralExpression","elements","ArrayLiteralExpression","elementExpressions","nodes","setParentIfNotNull","createAssertionExpression","assertionKind","AssertionExpression","createBinaryExpression","operator","BinaryExpression","createCallExpression","typeArgs","CallExpression","createCommaExpression","expressions","CommaExpression","createConstructorExpression","ConstructorExpression","createElementAccessExpression","ElementAccessExpression","createFalseExpression","FalseExpression","createFloatLiteralExpression","FloatLiteralExpression","createFunctionExpression","FunctionExpression","ARROW","createIntegerLiteralExpression","IntegerLiteralExpression","createNewExpression","NewExpression","createNullExpression","NullExpression","createParenthesizedExpression","ParenthesizedExpression","createPropertyAccessExpression","PropertyAccessExpression","createRegexpLiteralExpression","pattern","RegexpLiteralExpression","patternFlags","createTernaryExpression","ifThen","ifElse","TernaryExpression","createStringLiteralExpression","StringLiteralExpression","createSuperExpression","SuperExpression","createThisExpression","ThisExpression","createTrueExpression","TrueExpression","createUnaryPostfixExpression","UnaryPostfixExpression","createUnaryPrefixExpression","UnaryPrefixExpression","createBlockStatement","BlockStatement","createBreakStatement","BreakStatement","createClassDeclaration","ClassDeclaration","createContinueStatement","ContinueStatement","createDoStatement","DoStatement","createEmptyStatement","EmptyStatement","createEnumDeclaration","EnumDeclaration","createEnumValueDeclaration","EnumValueDeclaration","createExportStatement","ExportStatement","normalizePath","startsWith","resolvePath","mangleInternalPath","createExportImportStatement","ExportImportStatement","createExportMember","ExportMember","createExpressionStatement","ExpressionStatement","createIfStatement","IfStatement","createImportStatement","decls","ImportStatement","createImportStatementWithWildcard","createImportDeclaration","ImportDeclaration","createInterfaceDeclaration","InterfaceDeclaration","createFieldDeclaration","FieldDeclaration","createForStatement","incrementor","ForStatement","createFunctionDeclaration","FunctionDeclaration","createMethodDeclaration","MethodDeclaration","createNamespaceDeclaration","NamespaceDeclaration","createReturnStatement","ReturnStatement","createSwitchStatement","cases","SwitchStatement","createSwitchCase","SwitchCase","createThrowStatement","ThrowStatement","createTryStatement","catchVariable","catchStatements","finallyStatements","TryStatement","createTypeDeclaration","TypeDeclaration","createVariableStatement","VariableStatement","createVariableDeclaration","VariableDeclaration","createVoidStatement","VoidStatement","createWhileStatement","WhileStatement","CommonTypeNode","apply","TYPE","TYPEPARAMETER","PARAMETER","implicitFieldDeclaration","DECORATOR","CommentKind","COMMENT","Expression","LiteralExpression","ARRAY","AssertionKind","COMMA","FLOAT","INTEGER","NEW","NULL","REGEXP","TERNARY","TRUE","FALSE","UnaryExpression","UNARYPOSTFIX","UNARYPREFIX","SourceKind","Statement","Source","tokenizer","sourceKind","ENTRY","LIBRARY","DeclarationStatement","cachedProgramLevelInternalName","cachedFileLevelInternalName","mangleInternalName","isTopLevelExport","needsExplicitExport","VariableLikeDeclarationStatement","BLOCK","BREAK","CONTINUE","DO","EMPTY","ENUMVALUEDECLARATION","EXPORTIMPORT","EXPORTMEMBER","EXPRESSION","parameterIndex","FOR","IF","IMPORTDECLARATION","RETURN","SWITCHCASE","SWITCH","THROW","TRY","VARIABLEDECLARATION","VOID","WHILE","asGlobal","g","eval","e","window","IdentifierHandling","tokenFromKeyword","ABSTRACT","AS","ASYNC","AWAIT","CASE","CATCH","DEBUGGER","DELETE","ELSE","EXTENDS","FINALLY","FROM","IMPLEMENTS","IN","INSTANCEOF","IS","KEYOF","LET","MODULE","OF","PACKAGE","PRIVATE","PROTECTED","PUBLIC","READONLY","TYPEOF","VAR","WITH","YIELD","tokenIsAlsoIdentifier","token","operatorTokenToString","DOT_DOT_DOT","LESSTHAN","GREATERTHAN","LESSTHAN_EQUALS","GREATERTHAN_EQUALS","EQUALS_EQUALS","EXCLAMATION_EQUALS","EQUALS_EQUALS_EQUALS","EXCLAMATION_EQUALS_EQUALS","PLUS","MINUS","ASTERISK_ASTERISK","ASTERISK","SLASH","PERCENT","PLUS_PLUS","MINUS_MINUS","LESSTHAN_LESSTHAN","GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_GREATERTHAN","AMPERSAND","BAR","CARET","EXCLAMATION","TILDE","AMPERSAND_AMPERSAND","BAR_BAR","EQUALS","PLUS_EQUALS","MINUS_EQUALS","ASTERISK_EQUALS","ASTERISK_ASTERISK_EQUALS","SLASH_EQUALS","PERCENT_EQUALS","LESSTHAN_LESSTHAN_EQUALS","GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS","AMPERSAND_EQUALS","BAR_EQUALS","CARET_EQUALS","a","b","pos","Tokenizer","tokenPos","nextToken","nextTokenPos","nextTokenOnNewLine","onComment","identifierHandling","unsafeNext","maxTokenLength","STRINGLITERAL","OPENPAREN","CLOSEPAREN","isDecimalDigit","FLOATLITERAL","DOT","commentStartPos","LINE","TRIPLE","closed","_0_expected","testInteger","INTEGERLITERAL","COLON","SEMICOLON","EQUALS_GREATERTHAN","QUESTION","OPENBRACKET","CLOSEBRACKET","OPENBRACE","CLOSEBRACE","AT","isIdentifierStart","isKeywordCharacter","posBefore","isIdentifierPart","keywordToken","ALWAYS","PREFER","isWhiteSpace","Invalid_character","ENDOFFILE","peek","checkOnNewLine","maxCompoundLength","tokenBefore","tokenPosBefore","skipIdentifier","skip","skipIdentifierName","mark","state","reusableState","State","discard","reset","readIdentifier","quote","Unterminated_string_literal","readEscapeSequence","Unexpected_end_of_text","readExtendedUnicodeEscape","readUnicodeEscape","fromCharCode","readRegexpPattern","escaped","Unterminated_regular_expression_literal","readRegexpFlags","Invalid_regular_expression_flags","readInteger","readHexInteger","readBinaryInteger","readOctalInteger","isOctalDigit","Octal_literals_are_not_allowed_in_strict_mode","readDecimalInteger","i64_16","i64_add","i64_mul","Hexadecimal_digit_expected","i64_10","Digit_expected","i64_8","Octal_digit_expected","i64_2","i64_1","Binary_digit_expected","readFloat","readDecimalFloat","parseFloat","readHexFloat","remain","value32","invalid","An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive","Unterminated_Unicode_escape_sequence","finish","TypeKind","TypeFlags","cachedNullableType","ceil","nonNullableType","computeSmallIntegerShift","targetType","asNullable","signednessIsImportant","currentClass","targetClass","targetFunction","commonCompatible","kindOnly","toNativeZero","toNativeOne","toNativeNegOne","isize32","isize64","usize32","usize64","typesToNativeTypes","types","numTypes","getDefaultParameterName","thisThisType","targetThisType","thisParameterTypes","targetParameterTypes","thisParameterType","targetParameterType","thisReturnType","targetReturnType","makeSignatureString","includeThis","optionalStart","restIndex","cachedDefaultParameterNames","builtins_1","Options","WASM32","noTreeShaking","noAssert","noMemory","importMemory","importTable","memoryBase","features","hasFeature","feature","Feature","ConversionKind","WrapMode","Compiler","outerFunction","currentEnum","currentType","startFunctionBody","memorySegments","stringSegments","functionTable","argcVar","argcSet","f32ModInstance","f64ModInstance","f32PowInstance","f64PowInstance","max","compile","startFunctionPrototype","startFunctionInstance","startFunction","compileSource","funcRef","ensureFunctionType","i64_align","isWasm64","pages","i64_shr_u","functionTableSize","functionTableExported","entries","compileSourceByPath","File_0_not_found","COMPILED","isGeneric","compileClassDeclaration","compileEnumDeclaration","compileFunctionDeclaration","compileNamespaceDeclaration","variableInit","compileVariableStatement","compileExportStatement","previousFunction","compileStatement","compileGlobalDeclaration","compileGlobal","global","initExpr","Type_expected","compileExpression","Type_0_is_not_assignable_to_type_1","nativeType","isConstant","MODULE_IMPORT","initializeInStart","compileInlineConstant","precomputeExpressionRef","Compiling_constant_with_non_constant_initializer_as_mutable","mangleExportName","isTopLevel","compileEnum","previousValue","initInStart","valueDeclaration","AddI32","Cannot_export_a_mutable_global","compileFunctionUsingTypeArguments","compileFunction","resultType","An_implementation_cannot_be_declared_in_ambient_contexts","Function_implementation_is_missing_or_not_immediately_following_the_declaration","isConstructor","nativeSizeType","makeConditionalAllocate","A_function_whose_declared_type_is_not_void_must_return_a_value","ensureTrampoline","ensureArgcSet","compileInterfaceDeclaration","compileNamespace","ns","compileClassUsingTypeArguments","internalExportName","functionInstance","functionDeclaration","globalDeclaration","compileClass","staticMembers","setter","ctorInstance","_e","getterName","setterName","addMemorySegment","alignment","ensureFunctionTableEntry","TRAMPOLINE","compileBlockStatement","compileBreakStatement","compileContinueStatement","compileDoStatement","compileEmptyStatement","compileExpressionStatement","compileForStatement","compileIfStatement","compileReturnStatement","compileSwitchStatement","compileThrowStatement","compileTryStatement","compileVoidStatement","compileWhileStatement","addDebugLocation","compileStatements","numStatements","stmts","count","Nop","blockFlow","A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement","A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement","condExpr","makeIsTrueish","repeatLabel","alwaysTrue","compileExpressionRetainType","condPre","incrExpr","bodyExpr","breakBlock","repeatBlock","GENERIC_CONTEXT","condExprPrecomp","ifTrueFlow","ifFalseFlow","ifTrueExpr","ifFalseExpr","numCases","context","tempLocal","tempLocalIndex","breaks","breakIndex","defaultIndex","currentBlock","alwaysReturns","alwaysReturnsWrapped","alwaysThrows","alwaysAllocates","isLast","nextLabel","terminated","compileAbort","isKnownGlobal","numDeclarations","initializers","isInlined","_const_declarations_must_be_initialized","compileAssignmentWithValue","contextualType","retainType","mask","conversionKind","wrapMode","compileAssertionExpression","compileBinaryExpression","compileCallExpression","compileCommaExpression","compileElementAccessExpression","compileFunctionExpression","compileIdentifierExpression","compileLiteralExpression","compileNewExpression","compileParenthesizedExpression","compilePropertyAccessExpression","compileTernaryExpression","compileUnaryPostfixExpression","compileUnaryPrefixExpression","convertExpression","ensureSmallIntegerWrap","precomputeExpression","Conversion_from_type_0_to_1_requires_an_explicit_cast","PromoteF32","DemoteF64","TruncF32ToI64","TruncF32ToI32","TruncF32ToU64","TruncF32ToU32","TruncF64ToI64","TruncF64ToI32","TruncF64ToU64","TruncF64ToU32","ConvertI64ToF32","ConvertU64ToF32","ConvertI32ToF32","ConvertU32ToF32","ConvertI64ToF64","ConvertU64ToF64","ConvertI32ToF64","ConvertU32ToF64","WrapI64","ExtendI32","ExtendU32","leftExpr","leftType","rightExpr","rightType","commonType","compound","compileBinaryOverload","Operator_0_cannot_be_applied_to_types_1_and_2","compileAssignment","AddI64","AddF32","AddF64","SubI32","SubI64","SubF32","SubF64","MulI64","MulF32","MulF64","makeCallDirect","DivI32","DivI64","DivU64","DivF32","DivF64","RemI64","RemU64","intType","ShlI64","The_0_operator_cannot_be_applied_to_type_1","ShrI64","ShrU64","AndI64","OrI32","OrI64","XorI32","XorI64","compileUnaryOverload","argumentExpressions","thisArg","compileCallDirect","valueExpression","elementType","Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property","isUnchecked","indexedSet","Index_signature_in_type_0_only_permits_reading","valueExpr","valueWithCorrectType","tee","thisExpression","thisExpr","setterInstance","getterInstance","nativeReturnType","elementExpr","tempLocalTarget","tempLocalElement","indexArg","compileCallExpressionBuiltin","Type_0_is_not_generic","inferredTypes","numTypeParameters","numParameterTypes","numArguments","argumentExprs","argumentExpression","inferredType","concreteType","compileCallIndirect","compileCall","checkCallSignature","hasThis","minimum","Expected_at_least_0_arguments_but_got_1","inline","compileCallInlineUnchecked","numArgumentsInclThis","previousFlow","thisLocal","paramExpr","argumentLocal","bodyStatement","original","originalSignature","originalName","originalParameterTypes","originalParameterDeclarations","commonReturnType","commonThisType","minArguments","minOperands","maxArguments","maxOperands","numOptional","forwardedOperands","operandIndex","trampolineSignature","trampolineName","ofN","Optional_parameter_must_have_an_initializer","ensureArgcVar","numOperands","isCallImport","parameterNodes","allOptionalsAreConstant","makeCallIndirect","numExpressions","exprs","retainConstantType","scopedThis","superType","localType","A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums","implicitNegate","compileArrayLiteral","floatValue","intValue","i64_sub","i64_is_i8","i64_is_u8","i64_is_i16","i64_is_u16","i64_is_i32","i64_is_u32","i64_is_bool","i64_is_f32","i64_to_f32","i64_is_f64","i64_to_f64","compileStaticString","stringValue","stringSegment","stringLength","stringBuffer","stringOffset","stringType","isStatic","arrayInstance","arrayType","elementCount","nativeElementType","byteLength","Int32Array","Float32Array","Float64Array","usizeTypeSize","arraySize","bufferTotalSize","clz","data","writeI64","writeI32","writeF32","writeF64","nativeArrayType","Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature","currentClassInstance","makeAllocate","ifThenExpr","ifElseExpr","ifThenType","ifElseType","ifThenAllocates","ifElseAllocates","getValue","nativeOne","setValue","NegF32","NegF64","makeIsFalseish","ExtendI8ToI32","ExtendI16ToI32","compileAllocate","field","nativeFieldType","builtinsFile","Parser","backlog","seenlog","donelog","tryParseSignatureIsSignature","parseParametersThis","parseFile","indexOf","tn","parseTopLevelStatement","startPos","parseDecorator","skipStatement","exportStart","exportEnd","contextIsAmbient","A_declare_modifier_cannot_be_used_in_an_already_ambient_context","first","parseEnum","parseVariable","parseFunction","parseStatement","parseClassOrInterface","parseNamespace","parseExportImport","parseImport","parseTypeDeclaration","parseExport","_0_modifier_cannot_be_used_here","Decorators_are_not_valid_here","nextFile","clear","parseType","acceptParenthesized","suppressErrors","isNullableSignature","tryParseSignature","Unexpected_token","innerType","Identifier_expected","nullable","parameter","bracketStart","bracketRange","isSignature","t","A_rest_parameter_cannot_be_optional","OPTIONAL","param","parseArguments","parseVariableDeclaration","parentFlags","parentDecorators","Initializers_are_not_allowed_in_ambient_contexts","parseExpression","parseEnumValue","parseReturn","parseTypeParameters","typeParameter","parseTypeParameter","Type_parameter_list_cannot_be_empty","parseParameters","seenRest","seenOptional","reportedRest","parseParameter","A_rest_parameter_must_be_last_in_a_parameter_list","A_required_parameter_cannot_follow_an_optional_parameter","isRest","isOptional","startRange","accessFlags","A_parameter_property_cannot_be_declared_using_a_rest_parameter","A_rest_parameter_cannot_have_an_initializer","Parameter_cannot_have_question_mark_and_initializer","signatureStart","isSetter","A_set_accessor_must_have_exactly_one_parameter","A_set_accessor_parameter_cannot_have_an_initializer","A_get_accessor_cannot_have_parameters","parseBlockStatement","parseFunctionExpression","isArrow","parseFunctionExpressionCommon","isInterface","Interface_declaration_cannot_have_implements_clause","parseClassMember","staticStart","staticEnd","abstractStart","abstractEnd","readonlyStart","readonlyEnd","setEnd","typeParametersStart","Type_parameters_cannot_appear_on_a_constructor_declaration","An_accessor_cannot_have_type_parameters","Type_annotation_cannot_appear_on_a_constructor_declaration","A_set_accessor_cannot_have_a_return_type_annotation","retMethod","Constructor_implementation_is_missing","retField","parseExportMember","asIdentifier","skipFrom","parseImportDeclaration","topLevel","parseBreak","parseContinue","parseDoStatement","parseForStatement","parseIfStatement","A_return_statement_can_only_be_used_within_a_function_body","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVoidStatement","parseWhileStatement","parseExpressionStatement","elseStatement","case_","parseSwitchCase","_case_or_default_expected","parseExpressionStart","determinePrecedenceStart","The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access","again","PREFIX","regexpPattern","Expression_expected","tryParseTypeArgumentsBeforeArguments","precedence","nextPrecedence","determinePrecedence","commaExprs","isRightAssociative","propertyCall","Precedence","ExportsWalker","includePrivate","todo","walk","visitElement","visitGlobal","visitEnum","visitFunctionInstances","visitClassInstances","visitField","prop","hasCompiledMember","visitNamespace","visitFunction","visitClass","IDLBuilder","indentLevel","build","isConst","indent","typeToString","i64_to_string","members_1","members_1_1","visitInterface","TSDBuilder","numMembers","members_2","members_2_1","ctor","Decompiler","functionId","decompile","decompiler","decompileFunction","nativeTypeToType","decompileExpression","nested","string","Loop","Break","Switch","CallImport","CallIndirect","SetGlobal","Store","AbsF32","CeilF32","FloorF32","TruncF32","NearestF32","SqrtF32","ClzI64","CtzI64","PopcntI64","AbsF64","CeilF64","FloorF64","TruncF64","NearestF64","SqrtF64","ReinterpretF32","ReinterpretF64","ReinterpretI32","ReinterpretI64","RotlI32","RotrI32","RotlI64","RotrI64","CopysignF32","MinF32","MaxF32","CopysignF64","MinF64","MaxF64","Drop","Return","Host","CurrentMemory","GrowMemory","AtomicCmpxchg","AtomicRMW","AtomicWait","AtomicWake","Auto","decompiler_1","definitions_1","formatDiagnostic","parser_1","parser","nextDiagnostic","isInfo","isWarning","isError","createOptions","setTarget","setNoTreeShaking","setNoAssert","setNoMemory","setImportMemory","setImportTable","setSourceMap","setMemoryBase","setGlobalAlias","FEATURE_SIGN_EXTENSION","FEATURE_MUTABLE_GLOBAL","enableFeature","finishParsing","compileProgram","decompileModule","buildIDL","buildTSD","f32_as_i32","i32_as_f32","f64_as_i64","i64_as_f64","Long","wasm","WebAssembly","Instance","low","high","unsigned","isLong","obj","__isLong__","INT_CACHE","UINT_CACHE","fromInt","cachedObj","cache","fromBits","fromNumber","isNaN","UZERO","ZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","Math","pow","fromString","radix","RangeError","radixToPower","parseInt","power","mul","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","toNumber","isZero","isNegative","eq","radixLong","div","rem1","sub","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","equals","notEquals","neq","ne","lessThan","comp","lt","lessThanOrEqual","lte","le","greaterThan","gt","greaterThanOrEqual","gte","ge","compare","thisNeg","otherNeg","negate","not","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","res","div_u","div_s","toUnsigned","shru","shr","shl","floor","log2","log","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","mod","and","or","xor","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toSigned","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","i64_div","i64_div_u","i64_rem","i64_rem_u","i64_xor","i64_shr","i64_eq","minSafeF32","MIN_SAFE_INTEGER","maxSafeF32","MAX_SAFE_INTEGER","minSafeF64","maxSafeF64","fround","readI32","readI64","readF32","readF64","valueI64","indentX1","indentX2","indentX4","separator","ipos","dirname","origin","CharCode","lookupInUnicodeMap","unicodeIdentifierStart","unicodeIdentifierPart","mid","compiler","evaluateConstantType","tempLocal0","tempLocal1","evaluateConstantOffset","alignLog2","fieldName","Type_0_has_no_property_1","abort","operandExprs","signatureParts","nativeParamTypes","operandType","deferASM","deferASMCall","typeArgument","valueType","allocateInternalName","allocatePrototype","An_allocator_must_be_declared_to_allocate_memory_Try_importing_allocator_arena_or_allocator_tlsf","allocateInstance","abortInternalName","abortPrototype","abortInstance","messageArg","filenameArg","binaryen","Binaryen","key","_malloc","_free","move_memory","dest","src","_memmove","HEAPU8","previousPrint","print","x","_BinaryenModulePrint","_BinaryenModulePrintAsmjs","globalScope","HEAP","HEAP_OFFSET","oldHeap","copyWithin","UnreachableError","captureStackTrace","stack","AssertionError","defineProperties","writable","MIN_POSITIVE_VALUE","EPSILON","clz32","abs","trunc","round","sqrt","y","sign","isTrueish","undefined","fromCodePoint","Number","isInteger","arg","isArray"],"mappings":"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KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEtCC,GACJ,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KACxB,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAG1D,SAAAF,EAA4BlwD,EAAWrI,GACrC,GAAIqI,EAAOrI,EAAI,GAAI,OAAO,EAM1B,IAJA,IAEI04D,EAFAxiE,EAAK,EACLC,EAAK6J,EAAIzgB,OAGN2W,EAAK,EAAIC,GAAI,CAGlB,GAFAuiE,EAAMxiE,GAAMC,EAAKD,GAAM,EAEnB8J,EADJ04D,GAAOA,EAAM,IACGrwD,GAAQA,GAAQrI,EAAI04D,EAAM,GACxC,OAAO,EAELrwD,EAAOrI,EAAI04D,GACbviE,EAAKuiE,EAELxiE,EAAKwiE,EAAM,EAGf,OAAO,kFCjWT,IAAAv6E,EAAA3B,EAAA,GAIA6B,EAAA7B,EAAA,GASA4B,EAAA5B,EAAA,GAMA8B,EAAA9B,EAAA,GAcA+tC,EAAA/tC,EAAA,GAUA,SAAA+6D,EACEohB,EACA56E,EACAiU,EACAylB,EACA44B,EACA/3C,GAEA,IAEIiQ,EACAC,EACAC,EACAkZ,EALA3lC,EAAS28E,EAAS38E,OAWtB,OAAQ+B,EAAU6H,cAIhB,IAAK,YACH,IAAI+C,EAAOiwE,EAAqBD,EAAU3mE,EAAeylB,EAAUnf,GAEnE,OADAqgE,EAAS9xB,YAAczoD,EAAAwE,KAAKW,KACvBoF,EACEA,EAAKiB,GAAE,KAAwBjB,EAAKiB,GAAE,KACzC5N,EAAOu6B,UAAU,GACjBv6B,EAAOu6B,UAAU,GAHHv6B,EAAOkgC,oBAK3B,IAAK,UACCvzB,EAAOiwE,EAAqBD,EAAU3mE,EAAeylB,EAAUnf,GAEnE,OADAqgE,EAAS9xB,YAAczoD,EAAAwE,KAAKW,KACvBoF,EACEA,EAAKiB,GAAE,GACV5N,EAAOu6B,UAAU,GACjBv6B,EAAOu6B,UAAU,GAHHv6B,EAAOkgC,oBAK3B,IAAK,WACCvzB,EAAOiwE,EAAqBD,EAAU3mE,EAAeylB,EAAUnf,GAEnE,OADAqgE,EAAS9xB,YAAczoD,EAAAwE,KAAKW,KACvBoF,EACEA,EAAKiB,GAAE,GACV5N,EAAOu6B,UAAU,GACjBv6B,EAAOu6B,UAAU,GAHHv6B,EAAOkgC,oBAK3B,IAAK,cACCvzB,EAAOiwE,EAAqBD,EAAU3mE,EAAeylB,EAAUnf,GAEnE,OADAqgE,EAAS9xB,YAAczoD,EAAAwE,KAAKW,KACvBoF,GACLgwE,EAAS9xB,YAAczoD,EAAAwE,KAAKW,KACrBoF,EAAKiB,GAAE,KACV5N,EAAOu6B,UAAU,GACjBv6B,EAAOu6B,UAAU,IAJHv6B,EAAOkgC,oBAM3B,IAAK,WACCvzB,EAAOiwE,EAAqBD,EAAU3mE,EAAeylB,EAAUnf,GAEnE,GADAqgE,EAAS9xB,YAAczoD,EAAAwE,KAAKW,MACvBoF,EAAM,OAAO3M,EAAOkgC,oBAEzB,GADI1nB,EAAY7L,EAAKgL,eACN,CACb,IAAI5R,EAAiB42E,EAASjjE,QAAQ3T,eACtC,GAAIA,GAAkByS,EAAU0J,eAAenc,GAAiB,OAAO/F,EAAOu6B,UAAU,GAE1F,OAAOv6B,EAAOu6B,UAAU,GAE1B,IAAK,UACC5tB,EAAOiwE,EAAqBD,EAAU3mE,EAAeylB,EAAUnf,GAEnE,OADAqgE,EAAS9xB,YAAczoD,EAAAwE,KAAKW,KACvBoF,EAEe,OADhB6L,EAAY7L,EAAKgL,iBAC6D,MAAtDa,EAAUR,eAAeu2B,EAAAvrC,aAAaS,aAC9DzD,EAAOu6B,UAAU,GACjBv6B,EAAOu6B,UAAU,GAJHv6B,EAAOkgC,oBAS3B,IAAK,MACH,GAAuB,GAAnBzE,EAASl4B,OAcX,OAbIyS,IACEA,EAAczS,SAAQo5E,EAAS9xB,YAAc70C,EAAc,IACnC,GAAxBA,EAAczS,QAChBo5E,EAAS5yE,MACP5H,EAAA6H,eAAe2M,oCACf2F,EAAWnS,MAAO,IAAK6L,EAAczS,OAAOmO,SAAS,MAI3DirE,EAAS5yE,MACP5H,EAAA6H,eAAeyH,+BACf6K,EAAWnS,MAAO,IAAKsxB,EAASl4B,OAAOmO,SAAS,KAE3C1R,EAAOkgC,oBAEhB,GAAIlqB,EAAe,CACjB,GAA4B,GAAxBA,EAAczS,OAMhB,OALIyS,EAAczS,SAAQo5E,EAAS9xB,YAAc70C,EAAc,IAC/D2mE,EAAS5yE,MACP5H,EAAA6H,eAAe2M,oCACf2F,EAAWnS,MAAO,IAAK6L,EAAczS,OAAOmO,SAAS,KAEhD1R,EAAOkgC,oBAEhB3T,EAAOowD,EAASlvB,kBAAkBhyB,EAAS,GAAIzlB,EAAc,GAAE,UAE/DuW,EAAOowD,EAASlvB,kBAAkBhyB,EAAS,GAAIr5B,EAAAwE,KAAKG,IAAG,KAEzD,OAAQ41E,EAAS9xB,YAAY1iD,MAC3B,OACA,OACA,OACA,OACEw9B,EAAM3lC,EAAOm7B,YAAY74B,EAAA8mB,QAAQG,OAAQgD,GACzC,MAEF,QACA,OACA,OACEoZ,EAAM3lC,EAAOm7B,YAAY74B,EAAA8mB,QAAQG,OAAQgD,GACzC,MAEF,OACE,GAAIowD,EAAS9xB,YAAYj9C,GAAE,KAAuB,CAChD+uE,EAAS5yE,MACP5H,EAAA6H,eAAemH,wBACfmL,EAAWnS,OAEbw7B,EAAM3lC,EAAOkgC,oBACb,MAIJ,OACEyF,EAAM3lC,EAAOm7B,YACXwhD,EAASh2E,QAAQslD,SACb3pD,EAAA8mB,QAAQ4kD,OACR1rE,EAAA8mB,QAAQG,OACZgD,GAEF,MAEF,OACA,OACEoZ,EAAM3lC,EAAOm7B,YAAY74B,EAAA8mB,QAAQ4kD,OAAQzhD,GACzC,MAEF,QACEowD,EAAS5yE,MACP5H,EAAA6H,eAAemH,wBACfmL,EAAWnS,OAEbw7B,EAAM3lC,EAAOkgC,oBAIjB,OAAOyF,EAET,IAAK,MACH,GAAuB,GAAnBlK,EAASl4B,OAcX,OAbIyS,IACEA,EAAczS,SAAQo5E,EAAS9xB,YAAc70C,EAAc,IACnC,GAAxBA,EAAczS,QAChBo5E,EAAS5yE,MACP5H,EAAA6H,eAAe2M,oCACf2F,EAAWnS,MAAO,IAAK6L,EAAczS,OAAOmO,SAAS,MAI3DirE,EAAS5yE,MACP5H,EAAA6H,eAAeyH,+BACf6K,EAAWnS,MAAO,IAAKsxB,EAASl4B,OAAOmO,SAAS,KAE3C1R,EAAOkgC,oBAEhB,GAAIlqB,EAAe,CACjB,GAA4B,GAAxBA,EAAczS,OAMhB,OALIyS,EAAczS,SAAQo5E,EAAS9xB,YAAc70C,EAAc,IAC/D2mE,EAAS5yE,MACP5H,EAAA6H,eAAe2M,oCACf2F,EAAWnS,MAAO,IAAK6L,EAAczS,OAAOmO,SAAS,KAEhD1R,EAAOkgC,oBAEhB3T,EAAOowD,EAASlvB,kBAAkBhyB,EAAS,GAAIzlB,EAAc,GAAE,UAE/DuW,EAAOowD,EAASlvB,kBAAkBhyB,EAAS,GAAIr5B,EAAAwE,KAAKG,IAAG,KAEzD,OAAQ41E,EAAS9xB,YAAY1iD,MAC3B,OACA,OACA,OACA,OACEw9B,EAAM3lC,EAAOm7B,YAAY74B,EAAA8mB,QAAQI,OAAQ+C,GACzC,MAEF,QACA,OACA,OACEoZ,EAAM3lC,EAAOm7B,YAAY74B,EAAA8mB,QAAQI,OAAQ+C,GACzC,MAEF,OACE,GAAIowD,EAAS9xB,YAAYj9C,GAAE,KAAuB,CAChD+uE,EAAS5yE,MACP5H,EAAA6H,eAAemH,wBACfmL,EAAWnS,OAEbw7B,EAAM3lC,EAAOkgC,oBACb,MAIJ,OACEyF,EAAM3lC,EAAOm7B,YACXwhD,EAASh2E,QAAQslD,SACb3pD,EAAA8mB,QAAQ6kD,OACR3rE,EAAA8mB,QAAQI,OACZ+C,GAEF,MAEF,OACA,OACEoZ,EAAM3lC,EAAOm7B,YAAY74B,EAAA8mB,QAAQ6kD,OAAQ1hD,GACzC,MAEF,QACEowD,EAAS5yE,MACP5H,EAAA6H,eAAemH,wBACfmL,EAAWnS,OAEbw7B,EAAM3lC,EAAOkgC,oBAIjB,OAAOyF,EAET,IAAK,SACH,GAAuB,GAAnBlK,EAASl4B,OAcX,OAbIyS,IACEA,EAAczS,SAAQo5E,EAAS9xB,YAAc70C,EAAc,IACnC,GAAxBA,EAAczS,QAChBo5E,EAAS5yE,MACP5H,EAAA6H,eAAe2M,oCACf2F,EAAWnS,MAAO,IAAK6L,EAAczS,OAAOmO,SAAS,MAI3DirE,EAAS5yE,MACP5H,EAAA6H,eAAeyH,+BACf6K,EAAWnS,MAAO,IAAKsxB,EAASl4B,OAAOmO,SAAS,KAE3C1R,EAAOkgC,oBAEhB,GAAIlqB,EAAe,CACjB,GAA4B,GAAxBA,EAAczS,OAMhB,OALIyS,EAAczS,SAAQo5E,EAAS9xB,YAAc70C,EAAc,IAC/D2mE,EAAS5yE,MACP5H,EAAA6H,eAAe2M,oCACf2F,EAAWnS,MAAO,IAAK6L,EAAczS,OAAOmO,SAAS,KAEhD1R,EAAOkgC,oBAEhB3T,EAAOowD,EAASlvB,kBAAkBhyB,EAAS,GAAIzlB,EAAc,GAAE,UAE/DuW,EAAOowD,EAASlvB,kBAAkBhyB,EAAS,GAAIr5B,EAAAwE,KAAKG,IAAG,KAEzD,OAAQ41E,EAAS9xB,YAAY1iD,MAC3B,OACA,OACA,OACA,OACEw9B,EAAM3lC,EAAOm7B,YAAY74B,EAAA8mB,QAAQK,UAAW8C,GAC5C,MAEF,QACA,OACA,OACEoZ,EAAM3lC,EAAOm7B,YAAY74B,EAAA8mB,QAAQK,UAAW8C,GAC5C,MAEF,OACE,GAAIowD,EAAS9xB,YAAYj9C,GAAE,KAAuB,CAChD+uE,EAAS5yE,MACP5H,EAAA6H,eAAemH,wBACfmL,EAAWnS,OAEbw7B,EAAM3lC,EAAOkgC,oBACb,MAIJ,OACEyF,EAAM3lC,EAAOm7B,YACXwhD,EAASh2E,QAAQslD,SACb3pD,EAAA8mB,QAAQ8kD,UACR5rE,EAAA8mB,QAAQK,UACZ8C,GAEF,MAEF,OACA,OACEoZ,EAAM3lC,EAAOm7B,YAAY74B,EAAA8mB,QAAQ8kD,UAAW3hD,GAC5C,MAEF,QACEowD,EAAS5yE,MACP5H,EAAA6H,eAAemH,wBACfmL,EAAWnS,OAEbw7B,EAAM3lC,EAAOkgC,oBAIjB,OAAOyF,EAET,IAAK,OACH,GAAuB,GAAnBlK,EAASl4B,OAcX,OAbIyS,IACEA,EAAczS,SAAQo5E,EAAS9xB,YAAc70C,EAAc,IACnC,GAAxBA,EAAczS,QAChBo5E,EAAS5yE,MACP5H,EAAA6H,eAAe2M,oCACf2F,EAAWnS,MAAO,IAAK6L,EAAczS,OAAOmO,SAAS,MAI3DirE,EAAS5yE,MACP5H,EAAA6H,eAAeyH,+BACf6K,EAAWnS,MAAO,IAAKsxB,EAASl4B,OAAOmO,SAAS,KAE3C1R,EAAOkgC,oBAEhB,GAAIlqB,EAAe,CACjB,GAA4B,GAAxBA,EAAczS,OAMhB,OALIyS,EAAczS,SAAQo5E,EAAS9xB,YAAc70C,EAAc,IAC/D2mE,EAAS5yE,MACP5H,EAAA6H,eAAe2M,oCACf2F,EAAWnS,MAAO,IAAK6L,EAAczS,OAAOmO,SAAS,KAEhD1R,EAAOkgC,oBAEhB3T,EAAOowD,EAASlvB,kBAAkBhyB,EAAS,GAAIzlB,EAAc,GAAE,UAE/DuW,EAAOowD,EAASlvB,kBAAkBhyB,EAAS,GAAIr5B,EAAAwE,KAAKG,IAAG,KAGzD,OADAylB,EAAOmwD,EAASlvB,kBAAkBhyB,EAAS,GAAIkhD,EAAS9xB,YAAW,KAC3D8xB,EAAS9xB,YAAY1iD,MAC3B,OACA,OACA,OACA,OACA,QACEw9B,EAAMg3C,EAASlnB,uBACbz1D,EAAOs7B,aAAah5B,EAAA4jB,SAAS2oD,QAAStiD,EAAMC,GAC5CmwD,EAAS9xB,aAIb,OACA,OACEllB,EAAM3lC,EAAOs7B,aAAah5B,EAAA4jB,SAAS2oD,QAAStiD,EAAMC,GAClD,MAEF,OACE,GAAImwD,EAAS9xB,YAAYj9C,GAAE,KAAuB,CAChD+uE,EAAS5yE,MACP5H,EAAA6H,eAAemH,wBACfmL,EAAWnS,OAEbw7B,EAAM3lC,EAAOkgC,oBACb,MAIJ,OACEyF,EAAM3lC,EAAOs7B,aACXqhD,EAASh2E,QAAQslD,SACb3pD,EAAA4jB,SAAS6oD,QACTzsE,EAAA4jB,SAAS2oD,QACbtiD,EACAC,GAEF,MAEF,OACA,OACEmZ,EAAM3lC,EAAOs7B,aAAah5B,EAAA4jB,SAAS6oD,QAASxiD,EAAMC,GAClD,MAEF,QACEmwD,EAAS5yE,MACP5H,EAAA6H,eAAemH,wBACfmL,EAAWnS,OAEbw7B,EAAM3lC,EAAOkgC,oBAIjB,OAAOyF,EAET,IAAK,OACH,GAAuB,GAAnBlK,EAASl4B,OAcX,OAbIyS,IACEA,EAAczS,SAAQo5E,EAAS9xB,YAAc70C,EAAc,IACnC,GAAxBA,EAAczS,QAChBo5E,EAAS5yE,MACP5H,EAAA6H,eAAe2M,oCACf2F,EAAWnS,MAAO,IAAK6L,EAAczS,OAAOmO,SAAS,MAI3DirE,EAAS5yE,MACP5H,EAAA6H,eAAeyH,+BACf6K,EAAWnS,MAAO,IAAKsxB,EAASl4B,OAAOmO,SAAS,KAE3C1R,EAAOkgC,oBAEhB,GAAIlqB,EAAe,CACjB,GAA4B,GAAxBA,EAAczS,OAMhB,OALIyS,EAAczS,SAAQo5E,EAAS9xB,YAAc70C,EAAc,IAC/D2mE,EAAS5yE,MACP5H,EAAA6H,eAAe2M,oCACf2F,EAAWnS,MAAO,IAAK6L,EAAczS,OAAOmO,SAAS,KAEhD1R,EAAOkgC,oBAEhB3T,EAAOowD,EAASlvB,kBAAkBhyB,EAAS,GAAIzlB,EAAc,GAAE,UAE/DuW,EAAOowD,EAASlvB,kBAAkBhyB,EAAS,GAAIr5B,EAAAwE,KAAKG,IAAG,KAGzD,OADAylB,EAAOmwD,EAASlvB,kBAAkBhyB,EAAS,GAAIkhD,EAAS9xB,YAAW,KAC3D8xB,EAAS9xB,YAAY1iD,MAC3B,OACA,OACA,OACA,OACA,QACEw9B,EAAMg3C,EAASlnB,uBACbz1D,EAAOs7B,aAAah5B,EAAA4jB,SAAS4oD,QAASviD,EAAMC,GAC5CmwD,EAAS9xB,aAEX,MAEF,OACA,OACEllB,EAAM3lC,EAAOs7B,aAAah5B,EAAA4jB,SAAS4oD,QAASviD,EAAMC,GAClD,MAEF,OACE,GAAImwD,EAAS9xB,YAAYj9C,GAAE,KAAuB,CAChD+uE,EAAS5yE,MACP5H,EAAA6H,eAAemH,wBACfmL,EAAWnS,OAEbw7B,EAAM3lC,EAAOkgC,oBACb,MAIJ,OACEyF,EAAM3lC,EAAOs7B,aACXqhD,EAASh2E,QAAQslD,SACb3pD,EAAA4jB,SAAS8oD,QACT1sE,EAAA4jB,SAAS4oD,QACbviD,EACAC,GAEF,MAEF,OACA,OACEmZ,EAAM3lC,EAAOs7B,aAAah5B,EAAA4jB,SAAS8oD,QAASziD,EAAMC,GAClD,MAEF,QACEmwD,EAAS5yE,MACP5H,EAAA6H,eAAemH,wBACfmL,EAAWnS,OAEbw7B,EAAM3lC,EAAOkgC,oBAIjB,OAAOyF,EAET,IAAK,MACH,GAAuB,GAAnBlK,EAASl4B,OAcX,OAbIyS,IACEA,EAAczS,SAAQo5E,EAAS9xB,YAAc70C,EAAc,IACnC,GAAxBA,EAAczS,QAChBo5E,EAAS5yE,MACP5H,EAAA6H,eAAe2M,oCACf2F,EAAWnS,MAAO,IAAK6L,EAAczS,OAAOmO,SAAS,MAI3DirE,EAAS5yE,MACP5H,EAAA6H,eAAeyH,+BACf6K,EAAWnS,MAAO,IAAKsxB,EAASl4B,OAAOmO,SAAS,KAE3C1R,EAAOkgC,oBAEhB,GAAIlqB,EAAe,CACjB,GAA4B,GAAxBA,EAAczS,OAMhB,OALIyS,EAAczS,SAAQo5E,EAAS9xB,YAAc70C,EAAc,IAC/D2mE,EAAS5yE,MACP5H,EAAA6H,eAAe2M,oCACf2F,EAAWnS,MAAO,IAAK6L,EAAczS,OAAOmO,SAAS,KAEhD1R,EAAOkgC,oBAEhB3T,EAAOowD,EAASlvB,kBAAkBhyB,EAAS,GAAIzlB,EAAc,GAAE,UAE/DuW,EAAOowD,EAASlvB,kBAAkBhyB,EAAS,GAAIr5B,EAAAwE,KAAKa,IAAG,KAEzD,OAAQk1E,EAAS9xB,YAAY1iD,MAC3B,OACA,OACA,OAEE,IAAI8qD,EAAY0pB,EAASh6D,gBAAgBxD,oBAAoB/c,EAAAwE,KAAKG,KAAK,GACvE4+B,EAAM3lC,EAAOm/B,aACXn/B,EAAO87B,eAAem3B,EAAUp4C,MAAO0R,GACvCvsB,EAAOs7B,aAAah5B,EAAA4jB,SAAS2xC,OAC3B73D,EAAOu6B,UAAU,GACjBv6B,EAAO47B,eAAeq3B,EAAUp4C,MAAOvY,EAAAqc,WAAWC,MAEpD5e,EAAOs7B,aAAah5B,EAAA4jB,SAASqB,MAC3BvnB,EAAO47B,eAAeq3B,EAAUp4C,MAAOvY,EAAAqc,WAAWC,KAClD5e,EAAOu6B,UAAU,KAGrB,MAEF,OACM04B,EAAY0pB,EAASh6D,gBAAgBxD,oBAAoBw9D,EAASh2E,QAAQW,WAAW,GACzFq+B,EAAM3lC,EAAOm/B,aACXn/B,EAAO87B,eAAem3B,EAAUp4C,MAAO0R,GACvCvsB,EAAOs7B,aACLqhD,EAASh2E,QAAQslD,SACb3pD,EAAA4jB,SAAS4xC,OACTx1D,EAAA4jB,SAAS2xC,OACb8kB,EAASh2E,QAAQW,UAAU6gD,aAAanoD,GACxCA,EAAO47B,eAAeq3B,EAAUp4C,MAAO8hE,EAASh2E,QAAQqoD,iBAE1DhvD,EAAOs7B,aACLqhD,EAASh2E,QAAQslD,SACb3pD,EAAA4jB,SAASuB,MACTnlB,EAAA4jB,SAASqB,MACbvnB,EAAO47B,eAAeq3B,EAAUp4C,MAAO8hE,EAASh2E,QAAQqoD,gBACxD2tB,EAASh2E,QAAQW,UAAU6gD,aAAanoD,KAG5C,MAEF,OACMizD,EAAY0pB,EAASh6D,gBAAgBxD,oBAAoB/c,EAAAwE,KAAKI,KAAK,GACvE2+B,EAAM3lC,EAAOm/B,aACXn/B,EAAO87B,eAAem3B,EAAUp4C,MAAO0R,GACvCvsB,EAAOs7B,aAAah5B,EAAA4jB,SAAS4xC,OAC3B93D,EAAO26B,UAAU,EAAG,GACpB36B,EAAO47B,eAAeq3B,EAAUp4C,MAAOvY,EAAAqc,WAAWE,MAEpD7e,EAAOs7B,aAAah5B,EAAA4jB,SAASuB,MAC3BznB,EAAO47B,eAAeq3B,EAAUp4C,MAAOvY,EAAAqc,WAAWE,KAClD7e,EAAO26B,UAAU,EAAG,KAGxB,MAEF,OACE,GAAIgiD,EAAS9xB,YAAYj9C,GAAE,KAAuB,CAChD+uE,EAAS5yE,MACP5H,EAAA6H,eAAemH,wBACfmL,EAAWnS,OAEbw7B,EAAM3lC,EAAOkgC,oBACb,MAIJ,OACA,OACA,OACA,OACA,QACEyF,EAAMpZ,EACN,MAEF,QACEoZ,EAAM3lC,EAAOm7B,YAAY74B,EAAA8mB,QAAQskD,OAAQnhD,GACzC,MAEF,QACEoZ,EAAM3lC,EAAOm7B,YAAY74B,EAAA8mB,QAAQ+kD,OAAQ5hD,GACzC,MAEF,QACEoZ,EAAM3lC,EAAOkgC,oBACb,MAEF,QACEy8C,EAAS5yE,MACP5H,EAAA6H,eAAemH,wBACfmL,EAAWnS,OAEbw7B,EAAM3lC,EAAOkgC,oBAIjB,OAAOyF,EAET,IAAK,MACH,GAAuB,GAAnBlK,EAASl4B,OAcX,OAbIyS,IACEA,EAAczS,SAAQo5E,EAAS9xB,YAAc70C,EAAc,IACnC,GAAxBA,EAAczS,QAChBo5E,EAAS5yE,MACP5H,EAAA6H,eAAe2M,oCACf2F,EAAWnS,MAAO,IAAK6L,EAAczS,OAAOmO,SAAS,MAI3DirE,EAAS5yE,MACP5H,EAAA6H,eAAeyH,+BACf6K,EAAWnS,MAAO,IAAKsxB,EAASl4B,OAAOmO,SAAS,KAE3C1R,EAAOkgC,oBAEhB,GAAIlqB,EAAe,CACjB,GAA4B,GAAxBA,EAAczS,OAMhB,OALIyS,EAAczS,SAAQo5E,EAAS9xB,YAAc70C,EAAc,IAC/D2mE,EAAS5yE,MACP5H,EAAA6H,eAAe2M,oCACf2F,EAAWnS,MAAO,IAAK6L,EAAczS,OAAOmO,SAAS,KAEhD1R,EAAOkgC,oBAEhB3T,EAAOowD,EAASlvB,kBAAkBhyB,EAAS,GAAIzlB,EAAc,GAAE,UAE/DuW,EAAOowD,EAASlvB,kBAAkBhyB,EAAS,GAAIr5B,EAAAwE,KAAKa,IAAG,KAGzD,OADA+kB,EAAOmwD,EAASlvB,kBAAkBhyB,EAAS,GAAIkhD,EAAS9xB,YAAW,KAC3D8xB,EAAS9xB,YAAY1iD,MAC3B,OACA,OACA,OACE,IAAI6O,EAAO2lE,EAASh6D,gBAAgB3L,KAChC6lE,EAAaF,EAASh6D,gBAAgBpE,aACxCo+D,EAAS9xB,aACR7zC,EAAKoO,YAAYmH,EAAMowD,EAAS9xB,cAE/BiyB,EAAaH,EAASh6D,gBAAgBxD,oBACxCw9D,EAAS9xB,aACR7zC,EAAKoO,YAAYoH,EAAMmwD,EAAS9xB,cAEnC8xB,EAASh6D,gBAAgBzD,cAAc29D,GACvCl3C,EAAM3lC,EAAOm/B,aACXn/B,EAAO87B,eAAe+gD,EAAWhiE,MAAO0R,GACxCvsB,EAAO87B,eAAeghD,EAAWjiE,MAAO2R,GACxCxsB,EAAOs7B,aAAah5B,EAAA4jB,SAASqB,MAC3BvnB,EAAO47B,eAAeihD,EAAWhiE,MAAOvY,EAAAqc,WAAWC,KACnD5e,EAAO47B,eAAekhD,EAAWjiE,MAAOvY,EAAAqc,WAAWC,OAGvD,MAEF,OACA,OACA,OACA,QACM5H,EAAO2lE,EAASh6D,gBAAgB3L,KAChC6lE,EAAaF,EAASh6D,gBAAgBpE,aACxCo+D,EAAS9xB,aACR7zC,EAAKoO,YAAYmH,EAAMowD,EAAS9xB,cAE/BiyB,EAAaH,EAASh6D,gBAAgBxD,oBACxCw9D,EAAS9xB,aACR7zC,EAAKoO,YAAYoH,EAAMmwD,EAAS9xB,cAEnC8xB,EAASh6D,gBAAgBzD,cAAc29D,GACvCl3C,EAAM3lC,EAAOm/B,aACXn/B,EAAO87B,eAAe+gD,EAAWhiE,MAAO0R,GACxCvsB,EAAO87B,eAAeghD,EAAWjiE,MAAO2R,GACxCxsB,EAAOs7B,aAAah5B,EAAA4jB,SAASsB,MAC3BxnB,EAAO47B,eAAeihD,EAAWhiE,MAAOvY,EAAAqc,WAAWC,KACnD5e,EAAO47B,eAAekhD,EAAWjiE,MAAOvY,EAAAqc,WAAWC,OAGvD,MAEF,OACMi+D,EAAaF,EAASh6D,gBAAgBpE,aAAanc,EAAAwE,KAAKI,KAAK,GAC7D81E,EAAaH,EAASh6D,gBAAgBxD,oBAAoB/c,EAAAwE,KAAKI,KAAK,GACxE21E,EAASh6D,gBAAgBzD,cAAc29D,GACvCl3C,EAAM3lC,EAAOm/B,aACXn/B,EAAO87B,eAAe+gD,EAAWhiE,MAAO0R,GACxCvsB,EAAO87B,eAAeghD,EAAWjiE,MAAO2R,GACxCxsB,EAAOs7B,aAAah5B,EAAA4jB,SAASuB,MAC3BznB,EAAO47B,eAAeihD,EAAWhiE,MAAOvY,EAAAqc,WAAWE,KACnD7e,EAAO47B,eAAekhD,EAAWjiE,MAAOvY,EAAAqc,WAAWE,OAGvD,MAEF,OACMg+D,EAAaF,EAASh6D,gBAAgBpE,aAAanc,EAAAwE,KAAKI,KAAK,GAC7D81E,EAAaH,EAASh6D,gBAAgBxD,oBAAoB/c,EAAAwE,KAAKI,KAAK,GACxE21E,EAASh6D,gBAAgBzD,cAAc29D,GACvCl3C,EAAM3lC,EAAOm/B,aACXn/B,EAAO87B,eAAe+gD,EAAWhiE,MAAO0R,GACxCvsB,EAAO87B,eAAeghD,EAAWjiE,MAAO2R,GACxCxsB,EAAOs7B,aAAah5B,EAAA4jB,SAASwB,MAC3B1nB,EAAO47B,eAAeihD,EAAWhiE,MAAOvY,EAAAqc,WAAWE,KACnD7e,EAAO47B,eAAekhD,EAAWjiE,MAAOvY,EAAAqc,WAAWE,OAGvD,MAEF,OACMg+D,EAAaF,EAASh6D,gBAAgBpE,aAAao+D,EAASh2E,QAAQW,WAAW,GAC/Ew1E,EAAaH,EAASh6D,gBAAgBxD,oBAAoBw9D,EAASh2E,QAAQW,WAAW,GAC1Fq1E,EAASh6D,gBAAgBzD,cAAc29D,GACvCl3C,EAAM3lC,EAAOm/B,aACXn/B,EAAO87B,eAAe+gD,EAAWhiE,MAAO0R,GACxCvsB,EAAO87B,eAAeghD,EAAWjiE,MAAO2R,GACxCxsB,EAAOs7B,aACLqhD,EAASh2E,QAAQslD,SACb3pD,EAAA4jB,SAASuB,MACTnlB,EAAA4jB,SAASqB,MACbvnB,EAAO47B,eAAeihD,EAAWhiE,MAAO8hE,EAASh2E,QAAQqoD,gBACzDhvD,EAAO47B,eAAekhD,EAAWjiE,MAAO8hE,EAASh2E,QAAQqoD,kBAG7D,MAEF,OACE,GAAI2tB,EAAS9xB,YAAYj9C,GAAE,KAAuB,CAChD+uE,EAAS5yE,MACP5H,EAAA6H,eAAemH,wBACfmL,EAAWnS,OAEbw7B,EAAM3lC,EAAOkgC,oBACb,MAEE28C,EAAaF,EAASh6D,gBAAgBpE,aAAao+D,EAASh2E,QAAQW,WAAW,GAC/Ew1E,EAAaH,EAASh6D,gBAAgBxD,oBAAoBw9D,EAASh2E,QAAQW,WAAW,GAC1Fq1E,EAASh6D,gBAAgBzD,cAAc29D,GACvCl3C,EAAM3lC,EAAOm/B,aACXn/B,EAAO87B,eAAe+gD,EAAWhiE,MAAO0R,GACxCvsB,EAAO87B,eAAeghD,EAAWjiE,MAAO2R,GACxCxsB,EAAOs7B,aACLqhD,EAASh2E,QAAQslD,SACb3pD,EAAA4jB,SAASwB,MACTplB,EAAA4jB,SAASsB,MACbxnB,EAAO47B,eAAeihD,EAAWhiE,MAAO8hE,EAASh2E,QAAQqoD,gBACzDhvD,EAAO47B,eAAekhD,EAAWjiE,MAAO8hE,EAASh2E,QAAQqoD,kBAG7D,MAEF,QACErpB,EAAM3lC,EAAOs7B,aAAah5B,EAAA4jB,SAASipD,OAAQ5iD,EAAMC,GACjD,MAEF,QACEmZ,EAAM3lC,EAAOs7B,aAAah5B,EAAA4jB,SAASopD,OAAQ/iD,EAAMC,GACjD,MAEF,QACEmwD,EAAS5yE,MACP5H,EAAA6H,eAAemH,wBACfmL,EAAWnS,OAEbw7B,EAAM3lC,EAAOkgC,oBAIjB,OAAOyF,EAET,IAAK,MACH,GAAuB,GAAnBlK,EAASl4B,OAcX,OAbIyS,IACEA,EAAczS,SAAQo5E,EAAS9xB,YAAc70C,EAAc,IACnC,GAAxBA,EAAczS,QAChBo5E,EAAS5yE,MACP5H,EAAA6H,eAAe2M,oCACf2F,EAAWnS,MAAO,IAAK6L,EAAczS,OAAOmO,SAAS,MAI3DirE,EAAS5yE,MACP5H,EAAA6H,eAAeyH,+BACf6K,EAAWnS,MAAO,IAAKsxB,EAASl4B,OAAOmO,SAAS,KAE3C1R,EAAOkgC,oBAEhB,GAAIlqB,EAAe,CACjB,GAA4B,GAAxBA,EAAczS,OAMhB,OALIyS,EAAczS,SAAQo5E,EAAS9xB,YAAc70C,EAAc,IAC/D2mE,EAAS5yE,MACP5H,EAAA6H,eAAe2M,oCACf2F,EAAWnS,MAAO,IAAK6L,EAAczS,OAAOmO,SAAS,KAEhD1R,EAAOkgC,oBAEhB3T,EAAOowD,EAASlvB,kBAAkBhyB,EAAS,GAAIzlB,EAAc,GAAE,UAE/DuW,EAAOowD,EAASlvB,kBAAkBhyB,EAAS,GAAIr5B,EAAAwE,KAAKa,IAAG,KAGzD,OADA+kB,EAAOmwD,EAASlvB,kBAAkBhyB,EAAS,GAAIkhD,EAAS9xB,YAAW,KAC3D8xB,EAAS9xB,YAAY1iD,MAC3B,OACA,OACA,OACM6O,EAAO2lE,EAASh6D,gBAAgB3L,KAChC6lE,EAAaF,EAASh6D,gBAAgBpE,aACxCo+D,EAAS9xB,aACR7zC,EAAKoO,YAAYmH,EAAMowD,EAAS9xB,cAE/BiyB,EAAaH,EAASh6D,gBAAgBxD,oBACxCw9D,EAAS9xB,aACR7zC,EAAKoO,YAAYoH,EAAMmwD,EAAS9xB,cAEnC8xB,EAASh6D,gBAAgBzD,cAAc29D,GACvCl3C,EAAM3lC,EAAOm/B,aACXn/B,EAAO87B,eAAe+gD,EAAWhiE,MAAO0R,GACxCvsB,EAAO87B,eAAeghD,EAAWjiE,MAAO2R,GACxCxsB,EAAOs7B,aAAah5B,EAAA4jB,SAASS,MAC3B3mB,EAAO47B,eAAeihD,EAAWhiE,MAAOvY,EAAAqc,WAAWC,KACnD5e,EAAO47B,eAAekhD,EAAWjiE,MAAOvY,EAAAqc,WAAWC,OAGvD,MAEF,OACA,OACA,OACA,QACM5H,EAAO2lE,EAASh6D,gBAAgB3L,KAChC6lE,EAAaF,EAASh6D,gBAAgBpE,aACxCo+D,EAAS9xB,aACR7zC,EAAKoO,YAAYmH,EAAMowD,EAAS9xB,cAE/BiyB,EAAaH,EAASh6D,gBAAgBxD,oBACxCw9D,EAAS9xB,aACR7zC,EAAKoO,YAAYoH,EAAMmwD,EAAS9xB,cAEnC8xB,EAASh6D,gBAAgBzD,cAAc29D,GACvCl3C,EAAM3lC,EAAOm/B,aACXn/B,EAAO87B,eAAe+gD,EAAWhiE,MAAO0R,GACxCvsB,EAAO87B,eAAeghD,EAAWjiE,MAAO2R,GACxCxsB,EAAOs7B,aAAah5B,EAAA4jB,SAASU,MAC3B5mB,EAAO47B,eAAeihD,EAAWhiE,MAAOvY,EAAAqc,WAAWC,KACnD5e,EAAO47B,eAAekhD,EAAWjiE,MAAOvY,EAAAqc,WAAWC,OAGvD,MAEF,OACMi+D,EAAaF,EAASh6D,gBAAgBpE,aAAanc,EAAAwE,KAAKI,KAAK,GAC7D81E,EAAaH,EAASh6D,gBAAgBxD,oBAAoB/c,EAAAwE,KAAKI,KAAK,GACxE21E,EAASh6D,gBAAgBzD,cAAc29D,GACvCl3C,EAAM3lC,EAAOm/B,aACXn/B,EAAO87B,eAAe+gD,EAAWhiE,MAAO0R,GACxCvsB,EAAO87B,eAAeghD,EAAWjiE,MAAO2R,GACxCxsB,EAAOs7B,aAAah5B,EAAA4jB,SAASW,MAC3B7mB,EAAO47B,eAAeihD,EAAWhiE,MAAOvY,EAAAqc,WAAWE,KACnD7e,EAAO47B,eAAekhD,EAAWjiE,MAAOvY,EAAAqc,WAAWE,OAGvD,MAEF,OACMg+D,EAAaF,EAASh6D,gBAAgBpE,aAAanc,EAAAwE,KAAKI,KAAK,GAC7D81E,EAAaH,EAASh6D,gBAAgBxD,oBAAoB/c,EAAAwE,KAAKI,KAAK,GACxE21E,EAASh6D,gBAAgBzD,cAAc29D,GACvCl3C,EAAM3lC,EAAOm/B,aACXn/B,EAAO87B,eAAe+gD,EAAWhiE,MAAO0R,GACxCvsB,EAAO87B,eAAeghD,EAAWjiE,MAAO2R,GACxCxsB,EAAOs7B,aAAah5B,EAAA4jB,SAASY,MAC3B9mB,EAAO47B,eAAeihD,EAAWhiE,MAAOvY,EAAAqc,WAAWE,KACnD7e,EAAO47B,eAAekhD,EAAWjiE,MAAOvY,EAAAqc,WAAWE,OAGvD,MAEF,OACMg+D,EAAaF,EAASh6D,gBAAgBpE,aAAao+D,EAASh2E,QAAQW,WAAW,GAC/Ew1E,EAAaH,EAASh6D,gBAAgBxD,oBAAoBw9D,EAASh2E,QAAQW,WAAW,GAC1Fq1E,EAASh6D,gBAAgBzD,cAAc29D,GACvCl3C,EAAM3lC,EAAOm/B,aACXn/B,EAAO87B,eAAe+gD,EAAWhiE,MAAO0R,GACxCvsB,EAAO87B,eAAeghD,EAAWjiE,MAAO2R,GACxCxsB,EAAOs7B,aACLqhD,EAASh2E,QAAQslD,SACb3pD,EAAA4jB,SAASW,MACTvkB,EAAA4jB,SAASS,MACb3mB,EAAO47B,eAAeihD,EAAWhiE,MAAO8hE,EAASh2E,QAAQqoD,gBACzDhvD,EAAO47B,eAAekhD,EAAWjiE,MAAO8hE,EAASh2E,QAAQqoD,kBAG7D,MAEF,OACE,GAAI2tB,EAAS9xB,YAAYj9C,GAAE,KAAuB,CAChD+uE,EAAS5yE,MACP5H,EAAA6H,eAAemH,wBACfmL,EAAWnS,OAEbw7B,EAAM3lC,EAAOkgC,oBACb,MAEE28C,EAAaF,EAASh6D,gBAAgBpE,aAAao+D,EAASh2E,QAAQW,WAAW,GAC/Ew1E,EAAaH,EAASh6D,gBAAgBxD,oBAAoBw9D,EAASh2E,QAAQW,WAAW,GAC1Fq1E,EAASh6D,gBAAgBzD,cAAc29D,GACvCl3C,EAAM3lC,EAAOm/B,aACXn/B,EAAO87B,eAAe+gD,EAAWhiE,MAAO0R,GACxCvsB,EAAO87B,eAAeghD,EAAWjiE,MAAO2R,GACxCxsB,EAAOs7B,aACLqhD,EAASh2E,QAAQslD,SACb3pD,EAAA4jB,SAASY,MACTxkB,EAAA4jB,SAASU,MACb5mB,EAAO47B,eAAeihD,EAAWhiE,MAAO8hE,EAASh2E,QAAQqoD,gBACzDhvD,EAAO47B,eAAekhD,EAAWjiE,MAAO8hE,EAASh2E,QAAQqoD,kBAG7D,MAEF,QACErpB,EAAM3lC,EAAOs7B,aAAah5B,EAAA4jB,SAASgpD,OAAQ3iD,EAAMC,GACjD,MAEF,QACEmZ,EAAM3lC,EAAOs7B,aAAah5B,EAAA4jB,SAASmpD,OAAQ9iD,EAAMC,GACjD,MAEF,QACEmwD,EAAS5yE,MACP5H,EAAA6H,eAAemH,wBACfmL,EAAWnS,OAEbw7B,EAAM3lC,EAAOkgC,oBAIjB,OAAOyF,EAET,IAAK,OACH,GAAuB,GAAnBlK,EAASl4B,OAcX,OAbIyS,IACEA,EAAczS,SAAQo5E,EAAS9xB,YAAc70C,EAAc,IACnC,GAAxBA,EAAczS,QAChBo5E,EAAS5yE,MACP5H,EAAA6H,eAAe2M,oCACf2F,EAAWnS,MAAO,IAAK6L,EAAczS,OAAOmO,SAAS,MAI3DirE,EAAS5yE,MACP5H,EAAA6H,eAAeyH,+BACf6K,EAAWnS,MAAO,IAAKsxB,EAASl4B,OAAOmO,SAAS,KAE3C1R,EAAOkgC,oBAEhB,GAAIlqB,EAAe,CACjB,GAA4B,GAAxBA,EAAczS,OAMhB,OALIyS,EAAczS,SAAQo5E,EAAS9xB,YAAc70C,EAAc,IAC/D2mE,EAAS5yE,MACP5H,EAAA6H,eAAe2M,oCACf2F,EAAWnS,MAAO,IAAK6L,EAAczS,OAAOmO,SAAS,KAEhD1R,EAAOkgC,oBAEhB3T,EAAOowD,EAASlvB,kBAAkBhyB,EAAS,GAAIzlB,EAAc,GAAE,UAE/DuW,EAAOowD,EAASlvB,kBAAkBhyB,EAAS,GAAIr5B,EAAAwE,KAAKa,IAAG,KAEzD,OAAQk1E,EAAS9xB,YAAY1iD,MAC3B,OACE,GAAIw0E,EAAS9xB,YAAYj9C,GAAE,KAAuB,CAChD+uE,EAAS5yE,MACP5H,EAAA6H,eAAemH,wBACfmL,EAAWnS,OAEbw7B,EAAM3lC,EAAOkgC,oBACb,MAIJ,QACEyF,EAAMpZ,EACN,MAEF,QACEoZ,EAAM3lC,EAAOm7B,YAAY74B,EAAA8mB,QAAQukD,QAASphD,GAC1C,MAEF,QACEoZ,EAAM3lC,EAAOm7B,YAAY74B,EAAA8mB,QAAQglD,QAAS7hD,GAC1C,MAEF,QACEowD,EAAS5yE,MACP5H,EAAA6H,eAAemH,wBACfmL,EAAWnS,OAEbw7B,EAAM3lC,EAAOkgC,oBAIjB,OAAOyF,EAET,IAAK,QACH,GAAuB,GAAnBlK,EAASl4B,OAcX,OAbIyS,IACEA,EAAczS,SAAQo5E,EAAS9xB,YAAc70C,EAAc,IACnC,GAAxBA,EAAczS,QAChBo5E,EAAS5yE,MACP5H,EAAA6H,eAAe2M,oCACf2F,EAAWnS,MAAO,IAAK6L,EAAczS,OAAOmO,SAAS,MAI3DirE,EAAS5yE,MACP5H,EAAA6H,eAAeyH,+BACf6K,EAAWnS,MAAO,IAAKsxB,EAASl4B,OAAOmO,SAAS,KAE3C1R,EAAOkgC,oBAEhB,GAAIlqB,EAAe,CACjB,GAA4B,GAAxBA,EAAczS,OAMhB,OALIyS,EAAczS,SAAQo5E,EAAS9xB,YAAc70C,EAAc,IAC/D2mE,EAAS5yE,MACP5H,EAAA6H,eAAe2M,oCACf2F,EAAWnS,MAAO,IAAK6L,EAAczS,OAAOmO,SAAS,KAEhD1R,EAAOkgC,oBAEhB3T,EAAOowD,EAASlvB,kBAAkBhyB,EAAS,GAAIzlB,EAAc,GAAE,UAE/DuW,EAAOowD,EAASlvB,kBAAkBhyB,EAAS,GAAIr5B,EAAAwE,KAAKa,IAAG,KAEzD,OAAQk1E,EAAS9xB,YAAY1iD,MAC3B,OACE,GAAIw0E,EAAS9xB,YAAYj9C,GAAE,KAAuB,CAChD+uE,EAAS5yE,MACP5H,EAAA6H,eAAemH,wBACfmL,EAAWnS,OAEbw7B,EAAM3lC,EAAOkgC,oBACb,MAIJ,QACEyF,EAAMpZ,EACN,MAEF,QACEoZ,EAAM3lC,EAAOm7B,YAAY74B,EAAA8mB,QAAQwkD,SAAUrhD,GAC3C,MAEF,QACEoZ,EAAM3lC,EAAOm7B,YAAY74B,EAAA8mB,QAAQilD,SAAU9hD,GAC3C,MAEF,QACEowD,EAAS5yE,MACP5H,EAAA6H,eAAemH,wBACfmL,EAAWnS,OAEbw7B,EAAM3lC,EAAOkgC,oBAIjB,OAAOyF,EAET,IAAK,WACH,GAAuB,GAAnBlK,EAASl4B,OAcX,OAbIyS,IACEA,EAAczS,SAAQo5E,EAAS9xB,YAAc70C,EAAc,IACnC,GAAxBA,EAAczS,QAChBo5E,EAAS5yE,MACP5H,EAAA6H,eAAe2M,oCACf2F,EAAWnS,MAAO,IAAK6L,EAAczS,OAAOmO,SAAS,MAI3DirE,EAAS5yE,MACP5H,EAAA6H,eAAeyH,+BACf6K,EAAWnS,MAAO,IAAKsxB,EAASl4B,OAAOmO,SAAS,KAE3C1R,EAAOkgC,oBAEhB,GAAIlqB,EAAe,CACjB,GAA4B,GAAxBA,EAAczS,OAMhB,OALIyS,EAAczS,SAAQo5E,EAAS9xB,YAAc70C,EAAc,IAC/D2mE,EAAS5yE,MACP5H,EAAA6H,eAAe2M,oCACf2F,EAAWnS,MAAO,IAAK6L,EAAczS,OAAOmO,SAAS,KAEhD1R,EAAOkgC,oBAEhB3T,EAAOowD,EAASlvB,kBAAkBhyB,EAAS,GAAIzlB,EAAc,GAAE,UAE/DuW,EAAOowD,EAASlvB,kBAAkBhyB,EAAS,GAAIr5B,EAAAwE,KAAKa,IAAG,KAGzD,OADA+kB,EAAOmwD,EAASlvB,kBAAkBhyB,EAAS,GAAIkhD,EAAS9xB,YAAW,KAC3D8xB,EAAS9xB,YAAY1iD,MAC3B,QACEw9B,EAAM3lC,EAAOs7B,aAAah5B,EAAA4jB,SAAS+oD,YAAa1iD,EAAMC,GACtD,MAEF,QACEmZ,EAAM3lC,EAAOs7B,aAAah5B,EAAA4jB,SAASkpD,YAAa7iD,EAAMC,GACtD,MAEF,QACEmwD,EAAS5yE,MACP5H,EAAA6H,eAAemH,wBACfmL,EAAWnS,OAEbw7B,EAAM3lC,EAAOkgC,oBAIjB,OAAOyF,EAET,IAAK,UACH,GAAuB,GAAnBlK,EAASl4B,OAcX,OAbIyS,IACEA,EAAczS,SAAQo5E,EAAS9xB,YAAc70C,EAAc,IACnC,GAAxBA,EAAczS,QAChBo5E,EAAS5yE,MACP5H,EAAA6H,eAAe2M,oCACf2F,EAAWnS,MAAO,IAAK6L,EAAczS,OAAOmO,SAAS,MAI3DirE,EAAS5yE,MACP5H,EAAA6H,eAAeyH,+BACf6K,EAAWnS,MAAO,IAAKsxB,EAASl4B,OAAOmO,SAAS,KAE3C1R,EAAOkgC,oBAEhB,GAAIlqB,EAAe,CACjB,GAA4B,GAAxBA,EAAczS,OAMhB,OALIyS,EAAczS,SAAQo5E,EAAS9xB,YAAc70C,EAAc,IAC/D2mE,EAAS5yE,MACP5H,EAAA6H,eAAe2M,oCACf2F,EAAWnS,MAAO,IAAK6L,EAAczS,OAAOmO,SAAS,KAEhD1R,EAAOkgC,oBAEhB3T,EAAOowD,EAASlvB,kBAAkBhyB,EAAS,GAAIzlB,EAAc,GAAE,UAE/DuW,EAAOowD,EAASlvB,kBAAkBhyB,EAAS,GAAIr5B,EAAAwE,KAAKa,IAAG,KAEzD,OAAQk1E,EAAS9xB,YAAY1iD,MAC3B,OACE,GAAIw0E,EAAS9xB,YAAYj9C,GAAE,KAAuB,CAChD+uE,EAAS5yE,MACP5H,EAAA6H,eAAemH,wBACfmL,EAAWnS,OAEbw7B,EAAM3lC,EAAOkgC,oBACb,MAIJ,QACEyF,EAAMpZ,EACN,MAEF,QACEoZ,EAAM3lC,EAAOm7B,YAAY74B,EAAA8mB,QAAQ0kD,WAAYvhD,GAC7C,MAEF,QACEoZ,EAAM3lC,EAAOm7B,YAAY74B,EAAA8mB,QAAQmlD,WAAYhiD,GAC7C,MAEF,QACEowD,EAAS5yE,MACP5H,EAAA6H,eAAemH,wBACfmL,EAAWnS,OAEbw7B,EAAM3lC,EAAOkgC,oBAIjB,OAAOyF,EAET,IAAK,cACH,GAAuB,GAAnBlK,EAASl4B,OAYX,OAXMyS,GAAyC,GAAxBA,EAAczS,SAC/ByS,GAAiBA,EAAczS,SAAQo5E,EAAS9xB,YAAc70C,EAAc,IAChF2mE,EAAS5yE,MACP5H,EAAA6H,eAAe2M,oCACf2F,EAAWnS,MAAO,IAAK6L,EAAgBA,EAAczS,OAAOmO,SAAS,IAAM,MAG/EirE,EAAS5yE,MACP5H,EAAA6H,eAAeyH,+BACf6K,EAAWnS,MAAO,IAAKsxB,EAASl4B,OAAOmO,SAAS,KAE3C1R,EAAOkgC,oBAEhB,IAAMlqB,GAAyC,GAAxBA,EAAczS,OAMnC,OALIyS,GAAiBA,EAAczS,SAAQo5E,EAAS9xB,YAAc70C,EAAc,IAChF2mE,EAAS5yE,MACP5H,EAAA6H,eAAe2M,oCACf2F,EAAWnS,MAAO,IAAK6L,EAAgBA,EAAczS,OAAOmO,SAAS,IAAM,KAEtE1R,EAAOkgC,oBAEhB,OAAQlqB,EAAc,GAAG7N,MACvB,OACA,OACEokB,EAAOowD,EAASlvB,kBAAkBhyB,EAAS,GAAIr5B,EAAAwE,KAAKY,IAAG,KACvDm+B,EAAM3lC,EAAOm7B,YAAY74B,EAAA8mB,QAAQqlD,eAAgBliD,GACjD,MAEF,OACA,OACEA,EAAOowD,EAASlvB,kBAAkBhyB,EAAS,GAAIr5B,EAAAwE,KAAKa,IAAG,KACvDk+B,EAAM3lC,EAAOm7B,YAAY74B,EAAA8mB,QAAQslD,eAAgBniD,GACjD,MAEF,OACE,GAAIvW,EAAc,GAAGpI,GAAE,KAMrB,OALA+uE,EAAS5yE,MACP5H,EAAA6H,eAAemH,wBACfmL,EAAWnS,OAEbwyE,EAAS9xB,YAAc70C,EAAc,GAC9BhW,EAAOkgC,oBAIlB,OACE3T,EAAOowD,EAASlvB,kBACdhyB,EAAS,GACTkhD,EAASh2E,QAAQslD,SACb7pD,EAAAwE,KAAKa,IACLrF,EAAAwE,KAAKY,IAAG,KAIdm+B,EAAM3lC,EAAOm7B,YACXwhD,EAASh2E,QAAQslD,SACb3pD,EAAA8mB,QAAQslD,eACRpsE,EAAA8mB,QAAQqlD,eACZliD,GAEF,MAEF,QACEA,EAAOowD,EAASlvB,kBAAkBhyB,EAAS,GAAIr5B,EAAAwE,KAAKG,IAAG,KACvD4+B,EAAM3lC,EAAOm7B,YAAY74B,EAAA8mB,QAAQulD,eAAgBpiD,GACjD,MAEF,QACEA,EAAOowD,EAASlvB,kBAAkBhyB,EAAS,GAAIr5B,EAAAwE,KAAKI,IAAG,KACvD2+B,EAAM3lC,EAAOm7B,YAAY74B,EAAA8mB,QAAQwlD,eAAgBriD,GACjD,MAEF,QACEowD,EAAS5yE,MACP5H,EAAA6H,eAAemH,wBACfmL,EAAWnS,OAEbw7B,EAAM3lC,EAAOkgC,oBAKjB,OADAy8C,EAAS9xB,YAAc70C,EAAc,GAC9B2vB,EAET,IAAK,OACH,GAAuB,GAAnBlK,EAASl4B,OAcX,OAbIyS,IACEA,EAAczS,SAAQo5E,EAAS9xB,YAAc70C,EAAc,IACnC,GAAxBA,EAAczS,QAChBo5E,EAAS5yE,MACP5H,EAAA6H,eAAe2M,oCACf2F,EAAWnS,MAAO,IAAK6L,EAAczS,OAAOmO,SAAS,MAI3DirE,EAAS5yE,MACP5H,EAAA6H,eAAeyH,+BACf6K,EAAWnS,MAAO,IAAKsxB,EAASl4B,OAAOmO,SAAS,KAE3C1R,EAAOkgC,oBAEhB,GAAIlqB,EAAe,CACjB,GAA4B,GAAxBA,EAAczS,OAMhB,OALIyS,EAAczS,SAAQo5E,EAAS9xB,YAAc70C,EAAc,IAC/D2mE,EAAS5yE,MACP5H,EAAA6H,eAAe2M,oCACf2F,EAAWnS,MAAO,IAAK6L,EAAczS,OAAOmO,SAAS,KAEhD1R,EAAOkgC,oBAEhB3T,EAAOowD,EAASlvB,kBAAkBhyB,EAAS,GAAIzlB,EAAc,GAAE,UAE/DuW,EAAOowD,EAASlvB,kBAAkBhyB,EAAS,GAAIr5B,EAAAwE,KAAKa,IAAG,KAEzD,OAAQk1E,EAAS9xB,YAAY1iD,MAC3B,QACEw9B,EAAM3lC,EAAOm7B,YAAY74B,EAAA8mB,QAAQ2kD,QAASxhD,GAC1C,MAEF,QACEoZ,EAAM3lC,EAAOm7B,YAAY74B,EAAA8mB,QAAQolD,QAASjiD,GAC1C,MAGF,QACEowD,EAAS5yE,MACP5H,EAAA6H,eAAemH,wBACfmL,EAAWnS,OAEbw7B,EAAM3lC,EAAOkgC,oBAIjB,OAAOyF,EAET,IAAK,QACH,GAAuB,GAAnBlK,EAASl4B,OAcX,OAbIyS,IACEA,EAAczS,SAAQo5E,EAAS9xB,YAAc70C,EAAc,IACnC,GAAxBA,EAAczS,QAChBo5E,EAAS5yE,MACP5H,EAAA6H,eAAe2M,oCACf2F,EAAWnS,MAAO,IAAK6L,EAAczS,OAAOmO,SAAS,MAI3DirE,EAAS5yE,MACP5H,EAAA6H,eAAeyH,+BACf6K,EAAWnS,MAAO,IAAKsxB,EAASl4B,OAAOmO,SAAS,KAE3C1R,EAAOkgC,oBAEhB,GAAIlqB,GAAiBA,EAAczS,OAAQ,CAEzC,GADAo5E,EAAS9xB,YAAc70C,EAAc,GACT,GAAxBA,EAAczS,OAMhB,OALIyS,EAAczS,SAAQo5E,EAAS9xB,YAAc70C,EAAc,IAC/D2mE,EAAS5yE,MACP5H,EAAA6H,eAAe2M,oCACf2F,EAAWnS,MAAO,IAAK6L,EAAczS,OAAOmO,SAAS,KAEhD1R,EAAOkgC,oBAEhB3T,EAAOowD,EAASlvB,kBAAkBhyB,EAAS,GAAIzlB,EAAc,GAAE,UAE/DuW,EAAOowD,EAASlvB,kBAAkBhyB,EAAS,GAAIr5B,EAAAwE,KAAKa,IAAG,KAEzD,OAAQk1E,EAAS9xB,YAAY1iD,MAC3B,OACE,GAAIw0E,EAAS9xB,YAAYj9C,GAAE,KAAuB,CAChD+uE,EAAS5yE,MACP5H,EAAA6H,eAAemH,wBACfmL,EAAWnS,OAEbw7B,EAAM3lC,EAAOkgC,oBACb,MAIJ,QACEyF,EAAMpZ,EACN,MAGF,QACEoZ,EAAM3lC,EAAOm7B,YAAY74B,EAAA8mB,QAAQykD,SAAUthD,GAC3C,MAEF,QACEoZ,EAAM3lC,EAAOm7B,YAAY74B,EAAA8mB,QAAQklD,SAAU/hD,GAC3C,MAEF,QACEowD,EAAS5yE,MACP5H,EAAA6H,eAAemH,wBACfmL,EAAWnS,OAEbw7B,EAAM3lC,EAAOkgC,oBAIjB,OAAOyF,EAKT,IAAK,OACH,OAAIlK,EAASl4B,OAAS,GAAKk4B,EAASl4B,OAAS,GACrCyS,GAAyC,GAAxBA,EAAczS,QACnCo5E,EAAS5yE,MACP5H,EAAA6H,eAAe2M,oCACf2F,EAAWnS,MAAO,IAAK6L,EAAgBA,EAAczS,OAAOmO,SAAS,IAAM,KAG3E+pB,EAASl4B,OAAS,EACpBo5E,EAAS5yE,MACP5H,EAAA6H,eAAe2xD,wCACfr/C,EAAWnS,MAAO,IAAKsxB,EAASl4B,OAAOmO,SAAS,KAGlDirE,EAAS5yE,MACP5H,EAAA6H,eAAeyH,+BACf6K,EAAWnS,MAAO,IAAKsxB,EAASl4B,OAAOmO,SAAS,KAG7C1R,EAAOkgC,qBAEVlqB,GAAyC,GAAxBA,EAAczS,QAQrCgpB,EAAOowD,EAASlvB,kBACdhyB,EAAS,GACTkhD,EAASh2E,QAAQW,UAAS,MAIxBuxB,EAA4B,GAAnB4C,EAASl4B,OAAcw5E,EAAuBJ,EAAUlhD,EAAS,IAAM,GACvE,EACJz7B,EAAOkgC,qBAEhBy8C,EAAS9xB,YAAc70C,EAAc,GAC9BhW,EAAOk8B,WACZlmB,EAAc,GAAGqL,SACjBrL,EAAc,GAAGpI,GAAG,GACpB2e,EACAvW,EAAc,GAAGpI,GAAE,IACnBymD,EAAezmD,GAAE,IACjBymD,EAAezrC,KAAO5S,EAAc,GAAG4S,MAClC+zD,EAAS9xB,YAAcwJ,GAAgB31C,gBACvCi+D,EAAS9xB,YAAc70C,EAAc,IAAI0I,eAC9Cma,MA3BI7iB,GAAiBA,EAAczS,SAAQo5E,EAAS9xB,YAAc70C,EAAc,IAChF2mE,EAAS5yE,MACP5H,EAAA6H,eAAe2M,oCACf2F,EAAWnS,MAAO,IAAK6L,EAAgBA,EAAczS,OAAOmO,SAAS,IAAM,KAEtE1R,EAAOkgC,qBAyBlB,IAAK,QAEH,GADAy8C,EAAS9xB,YAAczoD,EAAAwE,KAAKc,KACxB+zB,EAASl4B,OAAS,GAAKk4B,EAASl4B,OAAS,EAkB3C,OAjBMyS,GAAyC,GAAxBA,EAAczS,QACnCo5E,EAAS5yE,MACP5H,EAAA6H,eAAe2M,oCACf2F,EAAWnS,MAAO,IAAK6L,EAAgBA,EAAczS,OAAOmO,SAAS,IAAM,KAG3E+pB,EAASl4B,OAAS,EACpBo5E,EAAS5yE,MACP5H,EAAA6H,eAAe2xD,wCACfr/C,EAAWnS,MAAO,IAAKsxB,EAASl4B,OAAOmO,SAAS,KAGlDirE,EAAS5yE,MACP5H,EAAA6H,eAAeyH,+BACf6K,EAAWnS,MAAO,IAAKsxB,EAASl4B,OAAOmO,SAAS,KAG7C1R,EAAOkgC,oBAEhB,IAAMlqB,GAAyC,GAAxBA,EAAczS,OAKnC,OAJAo5E,EAAS5yE,MACP5H,EAAA6H,eAAe2M,oCACf2F,EAAWnS,MAAO,IAAK6L,EAAgBA,EAAczS,OAAOmO,SAAS,IAAM,KAEtE1R,EAAOkgC,oBAEhB3T,EAAOowD,EAASlvB,kBACdhyB,EAAS,GACTkhD,EAASh2E,QAAQW,UAAS,KAI5BklB,EAAOmwD,EAASlvB,kBACdhyB,EAAS,GACTzlB,EAAc,GACdA,EAAc,GAAGpI,GAAE,GAChB,EACA,EAAwB,GAGzBjB,OAAI,EAoBR,OAlBEqJ,EAAc,GAAGpI,GAAE,MAEhB+uE,EAAS9xB,YAAYj9C,GAAE,IACxB+uE,EAAS9xB,YAAYjiC,KAAO5S,EAAc,GAAG4S,OAG/C4D,EAAOmwD,EAASnnB,kBACdhpC,EACAmwD,EAAS9xB,YAAa70C,EAAc,GAAE,IAGtCylB,EAAS,IAEX9uB,EAAOqJ,EAAc,IAErBrJ,EAAOgwE,EAAS9xB,aAEdhyB,EAA4B,GAAnB4C,EAASl4B,OAAcw5E,EAAuBJ,EAAUlhD,EAAS,IAAM,GACvE,EACJz7B,EAAOkgC,qBAEhBy8C,EAAS9xB,YAAczoD,EAAAwE,KAAKc,KACrB1H,EAAOu8B,YAAYvmB,EAAc,GAAGqL,SAAUkL,EAAMC,EAAM7f,EAAK+R,eAAgBma,IAExF,IAAK,SAEH,GADA8jD,EAAS9xB,YAAc8xB,EAASh2E,QAAQW,UACjB,GAAnBm0B,EAASl4B,OAWX,OAVMyS,GAAyC,GAAxBA,EAAczS,QACnCo5E,EAAS5yE,MACP5H,EAAA6H,eAAe2M,oCACf2F,EAAWnS,MAAO,IAAK6L,EAAgBA,EAAczS,OAAOmO,SAAS,IAAM,KAG/EirE,EAAS5yE,MACP5H,EAAA6H,eAAeyH,+BACf6K,EAAWnS,MAAO,IAAKsxB,EAASl4B,OAAOmO,SAAS,KAE3C1R,EAAOkgC,oBAEVlqB,GAAyC,GAAxBA,EAAczS,QACnCo5E,EAAS5yE,MACP5H,EAAA6H,eAAe2M,oCACf2F,EAAWnS,MAAO,IAAK6L,EAAgBA,EAAczS,OAAOmO,SAAS,IAAM,KAG/E,IAAI2P,EAAoBrL,EAAe,GAAGqL,SAkB1C,OAjBIs7D,EAASh2E,QAAQslD,SAEfoI,EAAezmD,GAAE,IAAuBymD,EAAezrC,MAAQ,IACjE+zD,EAAS9xB,YAAczoD,EAAAwE,KAAKQ,IAC5Bu+B,EAAM3lC,EAAOu6B,UAAUlZ,IAEvBskB,EAAM3lC,EAAO26B,UAAUtZ,EAAU,GAI/BgzC,EAAezmD,GAAE,IAA8C,IAAvBymD,EAAezrC,MACzD+zD,EAAS9xB,YAAczoD,EAAAwE,KAAKS,IAC5Bs+B,EAAM3lC,EAAO26B,UAAUtZ,EAAU,IAEjCskB,EAAM3lC,EAAOu6B,UAAUlZ,GAGpBskB,EAET,IAAK,UAEH,GADAg3C,EAAS9xB,YAAc8xB,EAASh2E,QAAQW,UACjB,GAAnBm0B,EAASl4B,OAWX,OAVMyS,GAAyC,GAAxBA,EAAczS,QACnCo5E,EAAS5yE,MACP5H,EAAA6H,eAAe2M,oCACf2F,EAAWnS,MAAO,IAAK6L,EAAgBA,EAAczS,OAAOmO,SAAS,IAAM,KAG/EirE,EAAS5yE,MACP5H,EAAA6H,eAAeyH,+BACf6K,EAAWnS,MAAO,IAAKsxB,EAASl4B,OAAOmO,SAAS,KAE3C1R,EAAOkgC,oBAEhB,IAAMlqB,GAAyC,GAAxBA,EAAczS,OAKnC,OAJAo5E,EAAS5yE,MACP5H,EAAA6H,eAAe2M,oCACf2F,EAAWnS,MAAO,IAAK6L,EAAgBA,EAAczS,OAAOmO,SAAS,IAAM,KAEtE1R,EAAOkgC,oBAEhB,IACI88C,OAAS,EACb,OAFI37D,EAAoBrL,EAAe,GAAGqL,UAGxC,KAAK,EAAK27D,EAAY,EAAG,MACzB,KAAK,EAAKA,EAAY,EAAG,MACzB,KAAK,EAAKA,EAAY,EAAG,MACzB,KAAK,EAAKA,EAAY,EAAG,MACzB,QAA0B,OAAf15E,QAAO,GAAetD,EAAOkgC,oBAmB1C,OAjBIy8C,EAASh2E,QAAQslD,SAEfoI,EAAezmD,GAAE,IAAuBymD,EAAezrC,MAAQ,IACjE+zD,EAAS9xB,YAAczoD,EAAAwE,KAAKQ,IAC5Bu+B,EAAM3lC,EAAOu6B,UAAUyiD,IAEvBr3C,EAAM3lC,EAAO26B,UAAUqiD,EAAW,GAIhC3oB,EAAezmD,GAAE,IAA8C,IAAvBymD,EAAezrC,MACzD+zD,EAAS9xB,YAAczoD,EAAAwE,KAAKS,IAC5Bs+B,EAAM3lC,EAAO26B,UAAUqiD,EAAW,IAElCr3C,EAAM3lC,EAAOu6B,UAAUyiD,GAGpBr3C,EAET,IAAK,WAEH,GADAg3C,EAAS9xB,YAAc8xB,EAASh2E,QAAQW,UACpCm0B,EAASl4B,OAAS,EAWpB,OAVMyS,GAAyC,GAAxBA,EAAczS,QACnCo5E,EAAS5yE,MACP5H,EAAA6H,eAAe2M,oCACf2F,EAAWnS,MAAO,IAAK6L,EAAgBA,EAAczS,OAAOmO,SAAS,IAAM,KAG/EirE,EAAS5yE,MACP5H,EAAA6H,eAAeyH,+BACf6K,EAAWnS,MAAO,IAAKsxB,EAASl4B,OAAOmO,SAAS,KAE3C1R,EAAOkgC,oBAEhB,IAAMlqB,GAAyC,GAAxBA,EAAczS,OAKnC,OAJAo5E,EAAS5yE,MACP5H,EAAA6H,eAAe2M,oCACf2F,EAAWnS,MAAO,IAAK6L,EAAgBA,EAAczS,OAAOmO,SAAS,IAAM,KAEtE1R,EAAOkgC,oBAEhB,IAAI1nB,EACJ,KADIA,EAAYxC,EAAc,GAAG2B,gBAM/B,OAJAglE,EAAS5yE,MACP5H,EAAA6H,eAAemH,wBACfmL,EAAWnS,OAENnK,EAAOkgC,oBAEhB,IAAIrH,OAAM,EACV,GAAI4C,EAASl4B,OAAQ,CACnB,GACEk4B,EAAS,GAAGtzB,MAAQ9F,EAAA+F,SAAS2I,SACT0qB,EAAS,GAAIzqB,aAAe3O,EAAA4O,YAAYC,OAM5D,OAJAyrE,EAAS5yE,MACP5H,EAAA6H,eAAewH,wBACfiqB,EAAS,GAAGtxB,OAEPnK,EAAOkgC,oBAEhB,IAAI+8C,EAAsCxhD,EAAS,GAAI/5B,MACnDqgE,EAAQvpD,EAAU3J,QAAU2J,EAAU3J,QAAQrN,IAAIy7E,GAAa,KACnE,IAAMlb,GAASA,EAAM55D,MAAQomC,EAAA1pC,YAAY6S,MAKvC,OAJAilE,EAAS5yE,MACP5H,EAAA6H,eAAekzE,yBACfzhD,EAAS,GAAGtxB,MAAOqO,EAAU5O,aAAcqzE,GAEtCj9E,EAAOkgC,oBAEhBrH,EAAiBkpC,EAAO5hD,kBAExB0Y,EAASrgB,EAAUmI,oBAErB,OAAIg8D,EAASh2E,QAAQslD,SAEfoI,EAAezmD,GAAE,IAAuBymD,EAAezrC,MAAQ,IACjE+zD,EAAS9xB,YAAczoD,EAAAwE,KAAKQ,IACrBpH,EAAOu6B,UAAU1B,IAEjB74B,EAAO26B,UAAU9B,GAItBw7B,EAAezmD,GAAE,IAA8C,IAAvBymD,EAAezrC,MACzD+zD,EAAS9xB,YAAczoD,EAAAwE,KAAKS,IACrBrH,EAAO26B,UAAU9B,IAEjB74B,EAAOu6B,UAAU1B,GAO9B,IAAK,SACH,GAAuB,GAAnB4C,EAASl4B,OAcX,OAbIyS,IACEA,EAAczS,SAAQo5E,EAAS9xB,YAAc70C,EAAc,IACnC,GAAxBA,EAAczS,QAChBo5E,EAAS5yE,MACP5H,EAAA6H,eAAe2M,oCACf2F,EAAWnS,MAAO,IAAK6L,EAAczS,OAAOmO,SAAS,MAI3DirE,EAAS5yE,MACP5H,EAAA6H,eAAeyH,+BACf6K,EAAWnS,MAAO,IAAKsxB,EAASl4B,OAAOmO,SAAS,KAE3C1R,EAAOkgC,oBAEhB,GAAIlqB,EAAe,CACjB,GAA4B,GAAxBA,EAAczS,OAMhB,OALIyS,EAAczS,SAAQo5E,EAAS9xB,YAAc70C,EAAc,IAC/D2mE,EAAS5yE,MACP5H,EAAA6H,eAAe2M,oCACf2F,EAAWnS,MAAO,IAAK6L,EAAczS,OAAOmO,SAAS,KAEhD1R,EAAOkgC,oBAEhB3T,EAAOowD,EAASlvB,kBAAkBhyB,EAAS,GAAIzlB,EAAc,GAAE,UAE/DuW,EAAOowD,EAASxqB,4BAA4B12B,EAAS,GAAIr5B,EAAAwE,KAAKG,IAAG,GAE/D4F,EAAOgwE,EAAS9xB,YAOpB,OANAr+B,EAAOmwD,EAASlvB,kBAAkBhyB,EAAS,GAAI9uB,EAAI,KACnD8f,EAAOkwD,EAAS3qB,cACd2qB,EAASxqB,4BAA4B12B,EAAS,GAAIr5B,EAAAwE,KAAKW,KAAI,GAC3Do1E,EAAS9xB,aAEX8xB,EAAS9xB,YAAcl+C,EACfgwE,EAAS9xB,YAAY1iD,MAC3B,OACA,OACA,OACA,OACA,QAIA,QACEw9B,EAAM3lC,EAAOm/B,aAAa5S,EAAMC,EAAMC,GACtC,MAEF,QACEkwD,EAAS5yE,MACP5H,EAAA6H,eAAemH,wBACfmL,EAAWnS,OAEbw7B,EAAM3lC,EAAOkgC,oBAIjB,OAAOyF,EAET,IAAK,cAaH,OAZuB,GAAnBlK,EAASl4B,QACXo5E,EAAS5yE,MACP5H,EAAA6H,eAAeyH,+BACf6K,EAAWnS,MAAO,IAAKsxB,EAASl4B,OAAOmO,SAAS,KAGhDsE,GACF2mE,EAAS5yE,MACP5H,EAAA6H,eAAe6wD,sBACfv+C,EAAWnS,MAAOpI,EAAU6H,cAGzB5J,EAAOkgC,oBAKhB,IAAK,iBAcH,OAbAy8C,EAAS9xB,YAAczoD,EAAAwE,KAAKG,IACL,GAAnB00B,EAASl4B,QACXo5E,EAAS5yE,MACP5H,EAAA6H,eAAeyH,+BACf6K,EAAWnS,MAAO,IAAKsxB,EAASl4B,OAAOmO,SAAS,KAGhDsE,GACF2mE,EAAS5yE,MACP5H,EAAA6H,eAAe6wD,sBACfv+C,EAAWnS,MAAOpI,EAAU6H,cAGzB5J,EAAOw7B,WAAWl5B,EAAAy1B,OAAO23C,eAElC,IAAK,cAiBH,OAhBAiN,EAAS9xB,YAAczoD,EAAAwE,KAAKG,IACL,GAAnB00B,EAASl4B,QACXo5E,EAAS5yE,MACP5H,EAAA6H,eAAeyH,+BACf6K,EAAWnS,MAAO,IAAKsxB,EAASl4B,OAAOmO,SAAS,KAElD6a,EAAOvsB,EAAOkgC,qBAEd3T,EAAOowD,EAASlvB,kBAAkBhyB,EAAS,GAAIr5B,EAAAwE,KAAKG,IAAG,KAErDiP,GACF2mE,EAAS5yE,MACP5H,EAAA6H,eAAe6wD,sBACfv+C,EAAWnS,MAAOpI,EAAU6H,cAGzB5J,EAAOw7B,WAAWl5B,EAAAy1B,OAAO43C,WAAY,MAAQpjD,IAGtD,IAAK,cAOH,GANIvW,GACF2mE,EAAS5yE,MACP5H,EAAA6H,eAAe6wD,sBACfv+C,EAAWnS,MAAOpI,EAAU6H,cAGT,GAAnB6xB,EAASl4B,OAMX,OALAo5E,EAAS5yE,MACP5H,EAAA6H,eAAeyH,+BACf6K,EAAWnS,MAAO,IAAKsxB,EAASl4B,OAAOmO,SAAS,KAElDirE,EAAS9xB,YAAczoD,EAAAwE,KAAKc,KACrB1H,EAAOkgC,oBAqBhB,MAnBA3T,EAAOowD,EAASlvB,kBACdhyB,EAAS,GACTkhD,EAASh2E,QAAQW,UAAS,KAI5BklB,EAAOmwD,EAASlvB,kBACdhyB,EAAS,GACTkhD,EAASh2E,QAAQW,UAAS,KAI5BmlB,EAAOkwD,EAASlvB,kBACdhyB,EAAS,GACTkhD,EAASh2E,QAAQW,UAAS,KAI5Bq1E,EAAS9xB,YAAczoD,EAAAwE,KAAKc,KACtB,IAAI0E,MAAM,mBAGlB,IAAK,aAOH,GANI4J,GACF2mE,EAAS5yE,MACP5H,EAAA6H,eAAe6wD,sBACfv+C,EAAWnS,MAAOpI,EAAU6H,cAGT,GAAnB6xB,EAASl4B,OAMX,OALAo5E,EAAS5yE,MACP5H,EAAA6H,eAAeyH,+BACf6K,EAAWnS,MAAO,IAAKsxB,EAASl4B,OAAOmO,SAAS,KAElDirE,EAAS9xB,YAAczoD,EAAAwE,KAAKc,KACrB1H,EAAOkgC,oBAqBhB,MAnBA3T,EAAOowD,EAASlvB,kBACdhyB,EAAS,GACTkhD,EAASh2E,QAAQW,UAAS,KAI5BklB,EAAOmwD,EAASlvB,kBACdhyB,EAAS,GACTr5B,EAAAwE,KAAKQ,IAAG,KAIVqlB,EAAOkwD,EAASlvB,kBACdhyB,EAAS,GACTkhD,EAASh2E,QAAQW,UAAS,KAI5Bq1E,EAAS9xB,YAAczoD,EAAAwE,KAAKc,KACtB,IAAI0E,MAAM,mBAMlB,IAAK,aACH,OAAM4J,GAAyC,GAAxBA,EAAczS,OAQd,GAAnBk4B,EAASl4B,QACXo5E,EAAS5yE,MACP5H,EAAA6H,eAAeyH,+BACf6K,EAAWnS,MAAO,IAAKsxB,EAASl4B,OAAOmO,SAAS,KAElDirE,EAAS9xB,YAAc70C,EAAc,GAC9BhW,EAAOkgC,sBAEhB3T,EAAOowD,EAASxqB,4BACd12B,EAAS,GACTzlB,EAAc,GAAE,GAGlB2mE,EAAS9xB,YAAc70C,EAAc,GACjC2mE,EAAS9xB,YAAYjiC,MAAQ5S,EAAc,GAAG4S,MAChD+zD,EAAS5yE,MACP5H,EAAA6H,eAAemH,wBACfmL,EAAWnS,OAENnK,EAAOkgC,qBAIT3T,IA9BDvW,GAAiBA,EAAczS,SAAQo5E,EAAS9xB,YAAc70C,EAAc,IAChF2mE,EAAS5yE,MACP5H,EAAA6H,eAAe2M,oCACf2F,EAAWnS,MAAO,IAAK6L,EAAgBA,EAAczS,OAAOmO,SAAS,IAAM,KAEtE1R,EAAOkgC,qBA2BlB,IAAK,SACH,GAAIzE,EAASl4B,OAAS,GAAKk4B,EAASl4B,OAAS,EAqB3C,OApBIyS,IACEA,EAAczS,SAAQo5E,EAAS9xB,YAAc70C,EAAc,GAAGyxC,iBACtC,GAAxBzxC,EAAczS,QAChBo5E,EAAS5yE,MACP5H,EAAA6H,eAAe2M,oCACf2F,EAAWnS,MAAO,IAAK6L,EAAczS,OAAOmO,SAAS,MAIvD+pB,EAASl4B,OAAS,EACpBo5E,EAAS5yE,MACP5H,EAAA6H,eAAe2xD,wCACfr/C,EAAWnS,MAAO,IAAKsxB,EAASl4B,OAAOmO,SAAS,KAEzC+pB,EAASl4B,OAAS,GAC3Bo5E,EAAS5yE,MACP5H,EAAA6H,eAAeyH,+BACf6K,EAAWnS,MAAO,IAAKsxB,EAASl4B,OAAOmO,SAAS,KAG7C1R,EAAOkgC,oBAEhB,GAAIlqB,EAAe,CAEjB,GADIA,EAAczS,SAAQo5E,EAAS9xB,YAAc70C,EAAc,GAAGyxC,iBACtC,GAAxBzxC,EAAczS,OAKhB,OAJAo5E,EAAS5yE,MACP5H,EAAA6H,eAAe2M,oCACf2F,EAAWnS,MAAO,IAAK6L,EAAczS,OAAOmO,SAAS,KAEhD1R,EAAOkgC,oBAEhB3T,EAAOowD,EAASlvB,kBAAkBhyB,EAAS,GAAIzlB,EAAc,GAAE,UAE/DuW,EAAOowD,EAASxqB,4BAA4B12B,EAAS,GAAIr5B,EAAAwE,KAAKW,KAAI,GAGhEoF,EAAOgwE,EAAS9xB,YAIpB,GAHA8xB,EAAS9xB,YAAcl+C,EAAK86C,gBAGxBk1B,EAASh2E,QAAQojD,SACnB,OAAIsK,GAAkBjyD,EAAAwE,KAAKc,MACzBi1E,EAAS9xB,YAAczoD,EAAAwE,KAAKc,KACrB1H,EAAO++B,aAETxS,EAGT,IAAI4wD,EAAQrpB,EAAa6oB,EAA6B,GAAnBlhD,EAASl4B,OAAck4B,EAAS,GAAK,KAAMnf,GAI9E,GAFAqgE,EAAS9xB,YAAcl+C,EAAK86C,gBAExB4M,GAAkBjyD,EAAAwE,KAAKc,KAAM,CAC/B,OAAQi1E,EAAS9xB,YAAY1iD,MAC3B,QACEw9B,EAAM3lC,EAAO2+B,SACX3+B,EAAOm7B,YAAY74B,EAAA8mB,QAAQC,OACzBkD,GAEF4wD,GAEF,MAEF,OACA,OACEx3C,EAAM3lC,EAAO2+B,SACX3+B,EAAOm7B,YAAY74B,EAAA8mB,QAAQE,OACzBiD,GAEF4wD,GAEF,MAEF,OACA,OACEx3C,EAAM3lC,EAAO2+B,SACX3+B,EAAOm7B,YACLwhD,EAASh2E,QAAQslD,SACb3pD,EAAA8mB,QAAQE,OACRhnB,EAAA8mB,QAAQC,OACZkD,GAEF4wD,GAEF,MAGF,QACEx3C,EAAM3lC,EAAO2+B,SACX3+B,EAAOs7B,aAAah5B,EAAA4jB,SAASG,MAC3BkG,EACAvsB,EAAO+6B,UAAU,IAEnBoiD,GAEF,MAEF,QACEx3C,EAAM3lC,EAAO2+B,SACX3+B,EAAOs7B,aAAah5B,EAAA4jB,SAASI,MAC3BiG,EACAvsB,EAAOi7B,UAAU,IAEnBkiD,GAEF,MAEF,QACER,EAAS5yE,MACP5H,EAAA6H,eAAemH,wBACfmL,EAAWnS,OAEbw7B,EAAMw3C,EAIVR,EAAS9xB,YAAczoD,EAAAwE,KAAKc,UAE5B,OAAQi1E,EAAS9xB,YAAY1iD,MAC3B,OACA,OACA,OACA,OACA,QACM6O,EAAO2lE,EAASh6D,gBAAgB3L,KAChCi8C,EAAY0pB,EAASh6D,gBAAgBxD,oBACvCw9D,EAAS9xB,aACR7zC,EAAKoO,YAAYmH,EAAMowD,EAAS9xB,cAEnCllB,EAAM3lC,EAAO2+B,SACX3+B,EAAO87B,eAAem3B,EAAUp4C,MAAO0R,GACvCvsB,EAAO47B,eAAeq3B,EAAUp4C,MAAOvY,EAAAqc,WAAWC,KAClDu+D,GAEF,MAEF,OACA,OACA,QACMlqB,EAAY0pB,EAASh6D,gBAAgBxD,oBAAoB/c,EAAAwE,KAAKG,KAAK,GACvE4+B,EAAM3lC,EAAO2+B,SACX3+B,EAAO87B,eAAem3B,EAAUp4C,MAAO0R,GACvCvsB,EAAO47B,eAAeq3B,EAAUp4C,MAAOvY,EAAAqc,WAAWC,KAClDu+D,GAEF,MAEF,OACA,OACMlqB,EAAY0pB,EAASh6D,gBAAgBxD,oBAAoB/c,EAAAwE,KAAKI,KAAK,GACvE2+B,EAAM3lC,EAAO2+B,SACX3+B,EAAOm7B,YAAY74B,EAAA8mB,QAAQE,OACzBtpB,EAAO87B,eAAem3B,EAAUp4C,MAAO0R,IAEzC4wD,EACAn9E,EAAO47B,eAAeq3B,EAAUp4C,MAAOvY,EAAAqc,WAAWE,MAEpD,MAEF,OACA,OACMo0C,EAAY0pB,EAASh6D,gBAAgBxD,oBAAoBw9D,EAASh2E,QAAQW,WAAW,GACzFq+B,EAAM3lC,EAAO2+B,SACX3+B,EAAOm7B,YACLwhD,EAASh2E,QAAQslD,SACb3pD,EAAA8mB,QAAQE,OACRhnB,EAAA8mB,QAAQC,OACZrpB,EAAO87B,eAAem3B,EAAUp4C,MAAO0R,IAEzC4wD,EACAn9E,EAAO47B,eAAeq3B,EAAUp4C,MAAO8hE,EAASh2E,QAAQqoD,iBAE1D,MAEF,QACMiE,EAAY0pB,EAASh6D,gBAAgBxD,oBAAoB/c,EAAAwE,KAAKY,KAAK,GACvEm+B,EAAM3lC,EAAO2+B,SACX3+B,EAAOs7B,aAAah5B,EAAA4jB,SAASG,MAC3BrmB,EAAO87B,eAAem3B,EAAUp4C,MAAO0R,GACvCvsB,EAAO+6B,UAAU,IAEnBoiD,EACAn9E,EAAO47B,eAAeq3B,EAAUp4C,MAAOvY,EAAAqc,WAAWG,MAEpD,MAEF,QACMm0C,EAAY0pB,EAASh6D,gBAAgBxD,oBAAoB/c,EAAAwE,KAAKa,KAAK,GACvEk+B,EAAM3lC,EAAO2+B,SACX3+B,EAAOs7B,aAAah5B,EAAA4jB,SAASI,MAC3BtmB,EAAO87B,eAAem3B,EAAUp4C,MAAO0R,GACvCvsB,EAAOi7B,UAAU,IAEnBkiD,EACAn9E,EAAO47B,eAAeq3B,EAAUp4C,MAAOvY,EAAAqc,WAAWI,MAEpD,MAEF,QACE49D,EAAS5yE,MACP5H,EAAA6H,eAAemH,wBACfmL,EAAWnS,OAEbw7B,EAAMw3C,EAKZ,OAAOx3C,EAET,IAAK,YAOH,OANI3vB,GACF2mE,EAAS5yE,MACP5H,EAAA6H,eAAe6wD,sBACfv+C,EAAWnS,MAAOpI,EAAU6H,cAGT,GAAnB6xB,EAASl4B,QACXo5E,EAAS5yE,MACP5H,EAAA6H,eAAeyH,+BACf6K,EAAWnS,MAAO,IAAKsxB,EAASl4B,OAAOmO,SAAS,KAE3C1R,EAAOkgC,uBAEZlpB,EAAO2lE,EAASh6D,gBAAgB3L,MAC/BrN,IAAG,MACRg8B,EAAMg3C,EAASxqB,4BAA4B12B,EAAS,GAAI44B,EAAc,GACtEr9C,EAAKkM,MAAK,MACHyiB,GAET,IAAK,gBACH,GAAIlK,EAASl4B,OAAS,EAcpB,OAbIyS,IACEA,EAAczS,SAAQo5E,EAAS9xB,YAAc70C,EAAc,IACnC,GAAxBA,EAAczS,QAChBo5E,EAAS5yE,MACP5H,EAAA6H,eAAe2M,oCACf2F,EAAWnS,MAAO,IAAK6L,EAAczS,OAAOmO,SAAS,MAI3DirE,EAAS5yE,MACP5H,EAAA6H,eAAe2xD,wCACfr/C,EAAWnS,MAAO,IAAKsxB,EAASl4B,OAAOmO,SAAS,KAE3C1R,EAAOkgC,oBAEhB,IAAI7qB,OAAU,EACd,GAAIW,EAAe,CACjB,GAA4B,GAAxBA,EAAczS,OAMhB,OALIyS,EAAczS,SAAQo5E,EAAS9xB,YAAc70C,EAAc,IAC/D2mE,EAAS5yE,MACP5H,EAAA6H,eAAe2M,oCACf2F,EAAWnS,MAAO,IAAK6L,EAAczS,OAAOmO,SAAS,KAEhD1R,EAAOkgC,oBAEhB7qB,EAAaW,EAAc,QAE3BX,EAAag/C,EAGf,GADA9nC,EAAOowD,EAASxqB,4BAA4B12B,EAAS,GAAIr5B,EAAAwE,KAAKQ,IAAG,GACpC,GAAzBu1E,EAAS9xB,YAAY1iD,KAKvB,OAJAw0E,EAAS5yE,MACP5H,EAAA6H,eAAemH,wBACfsqB,EAAS,GAAGtxB,OAEPnK,EAAOkgC,oBAOhB,IALA,IAAIq9B,EAAc9hC,EAASl4B,OAAS,EAChC65E,EAAe,IAAIv1E,MAAqB01D,GACxC8f,EAAiB,IAAIx1E,MAAc01D,EAAc,GACjDhD,EAAmBllD,EAAWqJ,eAC9B4+D,EAAmB,IAAIz1E,MAAkB01D,GACpC78D,EAAI,EAAGA,EAAI68D,IAAe78D,EAAG,CACpC08E,EAAa18E,GAAKi8E,EAASxqB,4BAA4B12B,EAAS,EAAI/6B,GAAI0B,EAAAwE,KAAKG,IAAG,GAChF,IAAIw2E,EAAcZ,EAAS9xB,YAC3BwyB,EAAe38E,GAAK68E,EAAYv9D,oBAChCs9D,EAAiB58E,GAAK68E,EAAY7+D,eAEpC2+D,EAAe9f,GAAeloD,EAAW2K,oBACzC,IAAIggB,EAAWq9C,EAAe1uE,KAAK,IAC/BmyB,EAAU9gC,EAAOm6B,2BAA2BogC,EAAkB+iB,GAKlE,OAJKx8C,IAASA,EAAU9gC,EAAO65B,gBAAgBmG,EAAUu6B,EAAkB+iB,IAC3EX,EAAS9xB,YAAcx1C,EAGhBrV,EAAO+/B,mBAAmBxT,EAAM6wD,EAAcp9C,GAKvD,IAAK,KAOH,OANIhqB,GACF2mE,EAAS5yE,MACP5H,EAAA6H,eAAe6wD,sBACfv+C,EAAWnS,MAAOpI,EAAU6H,cAGT,GAAnB6xB,EAASl4B,QACXo5E,EAAS5yE,MACP5H,EAAA6H,eAAeyH,+BACf6K,EAAWnS,MAAO,IAAKsxB,EAASl4B,OAAOmO,SAAS,KAElDirE,EAAS9xB,YAAczoD,EAAAwE,KAAKC,GACrB7G,EAAOkgC,qBAETy8C,EAASlvB,kBACdhyB,EAAS,GACTr5B,EAAAwE,KAAKC,GAAE,KAKX,IAAK,MAOH,OANImP,GACF2mE,EAAS5yE,MACP5H,EAAA6H,eAAe6wD,sBACfv+C,EAAWnS,MAAOpI,EAAU6H,cAGT,GAAnB6xB,EAASl4B,QACXo5E,EAAS5yE,MACP5H,EAAA6H,eAAeyH,+BACf6K,EAAWnS,MAAO,IAAKsxB,EAASl4B,OAAOmO,SAAS,KAElDirE,EAAS9xB,YAAczoD,EAAAwE,KAAKE,IACrB9G,EAAOkgC,qBAETy8C,EAASlvB,kBACdhyB,EAAS,GACTr5B,EAAAwE,KAAKE,IAAG,KAKZ,IAAK,MAOH,OANIkP,GACF2mE,EAAS5yE,MACP5H,EAAA6H,eAAe6wD,sBACfv+C,EAAWnS,MAAOpI,EAAU6H,cAGT,GAAnB6xB,EAASl4B,QACXo5E,EAAS5yE,MACP5H,EAAA6H,eAAeyH,+BACf6K,EAAWnS,MAAO,IAAKsxB,EAASl4B,OAAOmO,SAAS,KAElDirE,EAAS9xB,YAAczoD,EAAAwE,KAAKG,IACrB/G,EAAOkgC,qBAETy8C,EAASlvB,kBACdhyB,EAAS,GACTr5B,EAAAwE,KAAKG,IAAG,KAKZ,IAAK,MAOH,OANIiP,GACF2mE,EAAS5yE,MACP5H,EAAA6H,eAAe6wD,sBACfv+C,EAAWnS,MAAOpI,EAAU6H,cAGT,GAAnB6xB,EAASl4B,QACXo5E,EAAS5yE,MACP5H,EAAA6H,eAAeyH,+BACf6K,EAAWnS,MAAO,IAAKsxB,EAASl4B,OAAOmO,SAAS,KAElDirE,EAAS9xB,YAAczoD,EAAAwE,KAAKI,IACrBhH,EAAOkgC,qBAETy8C,EAASlvB,kBACdhyB,EAAS,GACTr5B,EAAAwE,KAAKI,IAAG,KAKZ,IAAK,QAOH,OANIgP,GACF2mE,EAAS5yE,MACP5H,EAAA6H,eAAe6wD,sBACfv+C,EAAWnS,MAAOpI,EAAU6H,cAGT,GAAnB6xB,EAASl4B,QACXo5E,EAAS5yE,MACP5H,EAAA6H,eAAeyH,+BACf6K,EAAWnS,MAAO,IAAKsxB,EAASl4B,OAAOmO,SAAS,KAElDirE,EAAS9xB,YAAc8xB,EAASh2E,QAAQslD,SACpC7pD,EAAAwE,KAAK2hD,QACLnmD,EAAAwE,KAAK0hD,QACFtoD,EAAOkgC,qBAETy8C,EAASlvB,kBACdhyB,EAAS,GACTkhD,EAASh2E,QAAQslD,SACb7pD,EAAAwE,KAAK2hD,QACLnmD,EAAAwE,KAAK0hD,QAAO,KAKpB,IAAK,KAOH,OANItyC,GACF2mE,EAAS5yE,MACP5H,EAAA6H,eAAe6wD,sBACfv+C,EAAWnS,MAAOpI,EAAU6H,cAGT,GAAnB6xB,EAASl4B,QACXo5E,EAAS5yE,MACP5H,EAAA6H,eAAeyH,+BACf6K,EAAWnS,MAAO,IAAKsxB,EAASl4B,OAAOmO,SAAS,KAElDirE,EAAS9xB,YAAczoD,EAAAwE,KAAKM,GACrBlH,EAAOkgC,qBAETy8C,EAASlvB,kBACdhyB,EAAS,GACTr5B,EAAAwE,KAAKM,GAAE,KAKX,IAAK,MAOH,OANI8O,GACF2mE,EAAS5yE,MACP5H,EAAA6H,eAAe6wD,sBACfv+C,EAAWnS,MAAOpI,EAAU6H,cAGT,GAAnB6xB,EAASl4B,QACXo5E,EAAS5yE,MACP5H,EAAA6H,eAAeyH,+BACf6K,EAAWnS,MAAO,IAAKsxB,EAASl4B,OAAOmO,SAAS,KAElDirE,EAAS9xB,YAAczoD,EAAAwE,KAAKO,IACrBnH,EAAOkgC,qBAETy8C,EAASlvB,kBACdhyB,EAAS,GACTr5B,EAAAwE,KAAKO,IAAG,KAKZ,IAAK,MAOH,OANI6O,GACF2mE,EAAS5yE,MACP5H,EAAA6H,eAAe6wD,sBACfv+C,EAAWnS,MAAOpI,EAAU6H,cAGT,GAAnB6xB,EAASl4B,QACXo5E,EAAS5yE,MACP5H,EAAA6H,eAAeyH,+BACf6K,EAAWnS,MAAO,IAAKsxB,EAASl4B,OAAOmO,SAAS,KAElDirE,EAAS9xB,YAAczoD,EAAAwE,KAAKQ,IACrBpH,EAAOkgC,qBAETy8C,EAASlvB,kBACdhyB,EAAS,GACTr5B,EAAAwE,KAAKQ,IAAG,KAKZ,IAAK,MAOH,OANI4O,GACF2mE,EAAS5yE,MACP5H,EAAA6H,eAAe6wD,sBACfv+C,EAAWnS,MAAOpI,EAAU6H,cAGT,GAAnB6xB,EAASl4B,QACXo5E,EAAS5yE,MACP5H,EAAA6H,eAAeyH,+BACf6K,EAAWnS,MAAO,IAAKsxB,EAASl4B,OAAOmO,SAAS,KAElDirE,EAAS9xB,YAAczoD,EAAAwE,KAAKS,IACrBrH,EAAOkgC,qBAETy8C,EAASlvB,kBACdhyB,EAAS,GACTr5B,EAAAwE,KAAKS,IAAG,KAKZ,IAAK,QAOH,OANI2O,GACF2mE,EAAS5yE,MACP5H,EAAA6H,eAAe6wD,sBACfv+C,EAAWnS,MAAOpI,EAAU6H,cAGT,GAAnB6xB,EAASl4B,QACXo5E,EAAS5yE,MACP5H,EAAA6H,eAAeyH,+BACf6K,EAAWnS,MAAO,IAAKsxB,EAASl4B,OAAOmO,SAAS,KAElDirE,EAAS9xB,YAAc8xB,EAASh2E,QAAQW,UACjCtH,EAAOkgC,qBAETy8C,EAASlvB,kBACdhyB,EAAS,GACTkhD,EAASh2E,QAAQW,UAAS,KAK9B,IAAK,OAOH,OANI0O,GACF2mE,EAAS5yE,MACP5H,EAAA6H,eAAe6wD,sBACfv+C,EAAWnS,MAAOpI,EAAU6H,cAGT,GAAnB6xB,EAASl4B,QACXo5E,EAAS5yE,MACP5H,EAAA6H,eAAeyH,+BACf6K,EAAWnS,MAAO,IAAKsxB,EAASl4B,OAAOmO,SAAS,KAElDirE,EAAS9xB,YAAczoD,EAAAwE,KAAKW,KACrBvH,EAAOkgC,qBAETy8C,EAASlvB,kBACdhyB,EAAS,GACTr5B,EAAAwE,KAAKW,KAAI,KAKb,IAAK,MAOH,OANIyO,GACF2mE,EAAS5yE,MACP5H,EAAA6H,eAAe6wD,sBACfv+C,EAAWnS,MAAOpI,EAAU6H,cAGT,GAAnB6xB,EAASl4B,QACXo5E,EAAS5yE,MACP5H,EAAA6H,eAAeyH,+BACf6K,EAAWnS,MAAO,IAAKsxB,EAASl4B,OAAOmO,SAAS,KAElDirE,EAAS9xB,YAAczoD,EAAAwE,KAAKY,IACrBxH,EAAOkgC,qBAETy8C,EAASlvB,kBACdhyB,EAAS,GACTr5B,EAAAwE,KAAKY,IAAG,KAKZ,IAAK,MAOH,OANIwO,GACF2mE,EAAS5yE,MACP5H,EAAA6H,eAAe6wD,sBACfv+C,EAAWnS,MAAOpI,EAAU6H,cAGT,GAAnB6xB,EAASl4B,QACXo5E,EAAS5yE,MACP5H,EAAA6H,eAAeyH,+BACf6K,EAAWnS,MAAO,IAAKsxB,EAASl4B,OAAOmO,SAAS,KAElDirE,EAAS9xB,YAAczoD,EAAAwE,KAAKa,IACrBzH,EAAOkgC,qBAETy8C,EAASlvB,kBACdhyB,EAAS,GACTr5B,EAAAwE,KAAKa,IAAG,KAMd,IAAI4d,EAkBN,SACEs3D,EACA56E,EACA05B,EACA44B,EACA/3C,GAEA,OAAQva,EAAU6H,cAOhB,IAAK,UAAW,OAAO4zE,EAAS,MAAOb,EAAUv6E,EAAAwE,KAAKG,IAAK00B,EAAUr5B,EAAAwE,KAAKG,IAAKuV,GAC/E,IAAK,UAAW,OAAOkhE,EAAS,MAAOb,EAAUv6E,EAAAwE,KAAKI,IAAKy0B,EAAUr5B,EAAAwE,KAAKI,IAAKsV,GAE/E,IAAK,UAAW,OAAOkhE,EAAS,MAAOb,EAAUv6E,EAAAwE,KAAKG,IAAK00B,EAAUr5B,EAAAwE,KAAKG,IAAKuV,GAC/E,IAAK,UAAW,OAAOkhE,EAAS,MAAOb,EAAUv6E,EAAAwE,KAAKI,IAAKy0B,EAAUr5B,EAAAwE,KAAKI,IAAKsV,GAE/E,IAAK,aAAc,OAAOkhE,EAAS,SAAUb,EAAUv6E,EAAAwE,KAAKG,IAAK00B,EAAUr5B,EAAAwE,KAAKG,IAAKuV,GACrF,IAAK,aAAc,OAAOkhE,EAAS,SAAUb,EAAUv6E,EAAAwE,KAAKI,IAAKy0B,EAAUr5B,EAAAwE,KAAKI,IAAKsV,GAErF,IAAK,WAAY,OAAOkhE,EAAS,OAAQb,EAAUv6E,EAAAwE,KAAKG,IAAK00B,EAAUr5B,EAAAwE,KAAKG,IAAKuV,GACjF,IAAK,WAAY,OAAOkhE,EAAS,OAAQb,EAAUv6E,EAAAwE,KAAKI,IAAKy0B,EAAUr5B,EAAAwE,KAAKI,IAAKsV,GAEjF,IAAK,WAAY,OAAOkhE,EAAS,OAAQb,EAAUv6E,EAAAwE,KAAKG,IAAK00B,EAAUr5B,EAAAwE,KAAKG,IAAKuV,GACjF,IAAK,WAAY,OAAOkhE,EAAS,OAAQb,EAAUv6E,EAAAwE,KAAKI,IAAKy0B,EAAUr5B,EAAAwE,KAAKI,IAAKsV,GAEjF,IAAK,UAAW,OAAOkhE,EAAS,MAAOb,EAAUv6E,EAAAwE,KAAKY,IAAKi0B,EAAUr5B,EAAAwE,KAAKY,IAAK8U,GAC/E,IAAK,UAAW,OAAOkhE,EAAS,MAAOb,EAAUv6E,EAAAwE,KAAKa,IAAKg0B,EAAUr5B,EAAAwE,KAAKa,IAAK6U,GAE/E,IAAK,UAAW,OAAOkhE,EAAS,MAAOb,EAAUv6E,EAAAwE,KAAKY,IAAKi0B,EAAUr5B,EAAAwE,KAAKY,IAAK8U,GAC/E,IAAK,UAAW,OAAOkhE,EAAS,MAAOb,EAAUv6E,EAAAwE,KAAKa,IAAKg0B,EAAUr5B,EAAAwE,KAAKa,IAAK6U,GAE/E,IAAK,UAAW,OAAOkhE,EAAS,MAAOb,EAAUv6E,EAAAwE,KAAKY,IAAKi0B,EAAUr5B,EAAAwE,KAAKY,IAAK8U,GAC/E,IAAK,UAAW,OAAOkhE,EAAS,MAAOb,EAAUv6E,EAAAwE,KAAKa,IAAKg0B,EAAUr5B,EAAAwE,KAAKa,IAAK6U,GAE/E,IAAK,WAAY,OAAOkhE,EAAS,OAAQb,EAAUv6E,EAAAwE,KAAKY,IAAKi0B,EAAUr5B,EAAAwE,KAAKY,IAAK8U,GACjF,IAAK,WAAY,OAAOkhE,EAAS,OAAQb,EAAUv6E,EAAAwE,KAAKa,IAAKg0B,EAAUr5B,EAAAwE,KAAKa,IAAK6U,GAEjF,IAAK,YAAa,OAAOkhE,EAAS,QAASb,EAAUv6E,EAAAwE,KAAKY,IAAKi0B,EAAUr5B,EAAAwE,KAAKY,IAAK8U,GACnF,IAAK,YAAa,OAAOkhE,EAAS,QAASb,EAAUv6E,EAAAwE,KAAKa,IAAKg0B,EAAUr5B,EAAAwE,KAAKa,IAAK6U,GAEnF,IAAK,eAAgB,OAAOkhE,EAAS,WAAYb,EAAUv6E,EAAAwE,KAAKY,IAAKi0B,EAAUr5B,EAAAwE,KAAKY,IAAK8U,GACzF,IAAK,eAAgB,OAAOkhE,EAAS,WAAYb,EAAUv6E,EAAAwE,KAAKa,IAAKg0B,EAAUr5B,EAAAwE,KAAKa,IAAK6U,GAEzF,IAAK,cAAe,OAAOkhE,EAAS,UAAWb,EAAUv6E,EAAAwE,KAAKY,IAAKi0B,EAAUr5B,EAAAwE,KAAKY,IAAK8U,GACvF,IAAK,cAAe,OAAOkhE,EAAS,UAAWb,EAAUv6E,EAAAwE,KAAKa,IAAKg0B,EAAUr5B,EAAAwE,KAAKa,IAAK6U,GAEvF,IAAK,sBAAuB,OAAOkhE,EAAS,cAAeb,EAAUv6E,EAAAwE,KAAKG,IAAK00B,EAAUr5B,EAAAwE,KAAKY,IAAK8U,GACnG,IAAK,sBAAuB,OAAOkhE,EAAS,cAAeb,EAAUv6E,EAAAwE,KAAKI,IAAKy0B,EAAUr5B,EAAAwE,KAAKa,IAAK6U,GACnG,IAAK,sBAAuB,OAAOkhE,EAAS,cAAeb,EAAUv6E,EAAAwE,KAAKY,IAAKi0B,EAAUr5B,EAAAwE,KAAKG,IAAKuV,GACnG,IAAK,sBAAuB,OAAOkhE,EAAS,cAAeb,EAAUv6E,EAAAwE,KAAKa,IAAKg0B,EAAUr5B,EAAAwE,KAAKI,IAAKsV,GAEnG,IAAK,WAAY,OAAOkhE,EAAS,OAAQb,EAAUv6E,EAAAwE,KAAKY,IAAKi0B,EAAUr5B,EAAAwE,KAAKY,IAAK8U,GACjF,IAAK,WAAY,OAAOkhE,EAAS,OAAQb,EAAUv6E,EAAAwE,KAAKa,IAAKg0B,EAAUr5B,EAAAwE,KAAKa,IAAK6U,GAEjF,IAAK,YAAa,OAAOkhE,EAAS,QAASb,EAAUv6E,EAAAwE,KAAKY,IAAKi0B,EAAUr5B,EAAAwE,KAAKY,IAAK8U,GACnF,IAAK,YAAa,OAAOkhE,EAAS,QAASb,EAAUv6E,EAAAwE,KAAKa,IAAKg0B,EAAUr5B,EAAAwE,KAAKa,IAAK6U,GAEnF,IAAK,cAAe,OAAOkhE,EAAS,OAAQb,EAAUv6E,EAAAwE,KAAKC,GAAI40B,EAAUr5B,EAAAwE,KAAKG,IAAKuV,GACnF,IAAK,cAAe,OAAOkhE,EAAS,OAAQb,EAAUv6E,EAAAwE,KAAKM,GAAIu0B,EAAUr5B,EAAAwE,KAAKQ,IAAKkV,GACnF,IAAK,eAAgB,OAAOkhE,EAAS,OAAQb,EAAUv6E,EAAAwE,KAAKE,IAAK20B,EAAUr5B,EAAAwE,KAAKG,IAAKuV,GACrF,IAAK,eAAgB,OAAOkhE,EAAS,OAAQb,EAAUv6E,EAAAwE,KAAKO,IAAKs0B,EAAUr5B,EAAAwE,KAAKQ,IAAKkV,GACrF,IAAK,WAAY,OAAOkhE,EAAS,OAAQb,EAAUv6E,EAAAwE,KAAKG,IAAK00B,EAAUr5B,EAAAwE,KAAKG,IAAKuV,GACjF,IAAK,cAAe,OAAOkhE,EAAS,OAAQb,EAAUv6E,EAAAwE,KAAKC,GAAI40B,EAAUr5B,EAAAwE,KAAKI,IAAKsV,GACnF,IAAK,cAAe,OAAOkhE,EAAS,OAAQb,EAAUv6E,EAAAwE,KAAKM,GAAIu0B,EAAUr5B,EAAAwE,KAAKS,IAAKiV,GACnF,IAAK,eAAgB,OAAOkhE,EAAS,OAAQb,EAAUv6E,EAAAwE,KAAKE,IAAK20B,EAAUr5B,EAAAwE,KAAKI,IAAKsV,GACrF,IAAK,eAAgB,OAAOkhE,EAAS,OAAQb,EAAUv6E,EAAAwE,KAAKO,IAAKs0B,EAAUr5B,EAAAwE,KAAKS,IAAKiV,GACrF,IAAK,eAAgB,OAAOkhE,EAAS,OAAQb,EAAUv6E,EAAAwE,KAAKG,IAAK00B,EAAUr5B,EAAAwE,KAAKI,IAAKsV,GACrF,IAAK,eAAgB,OAAOkhE,EAAS,OAAQb,EAAUv6E,EAAAwE,KAAKQ,IAAKq0B,EAAUr5B,EAAAwE,KAAKS,IAAKiV,GACrF,IAAK,WAAY,OAAOkhE,EAAS,OAAQb,EAAUv6E,EAAAwE,KAAKI,IAAKy0B,EAAUr5B,EAAAwE,KAAKI,IAAKsV,GACjF,IAAK,WAAY,OAAOkhE,EAAS,OAAQb,EAAUv6E,EAAAwE,KAAKY,IAAKi0B,EAAUr5B,EAAAwE,KAAKY,IAAK8U,GACjF,IAAK,WAAY,OAAOkhE,EAAS,OAAQb,EAAUv6E,EAAAwE,KAAKa,IAAKg0B,EAAUr5B,EAAAwE,KAAKa,IAAK6U,GAEjF,IAAK,aAAc,OAAOkhE,EAAS,QAASb,EAAUv6E,EAAAwE,KAAKC,GAAI40B,EAAUr5B,EAAAwE,KAAKG,IAAKuV,GACnF,IAAK,cAAe,OAAOkhE,EAAS,QAASb,EAAUv6E,EAAAwE,KAAKE,IAAK20B,EAAUr5B,EAAAwE,KAAKG,IAAKuV,GACrF,IAAK,YAAa,OAAOkhE,EAAS,QAASb,EAAUv6E,EAAAwE,KAAKG,IAAK00B,EAAUr5B,EAAAwE,KAAKG,IAAKuV,GACnF,IAAK,aAAc,OAAOkhE,EAAS,QAASb,EAAUv6E,EAAAwE,KAAKC,GAAI40B,EAAUr5B,EAAAwE,KAAKI,IAAKsV,GACnF,IAAK,cAAe,OAAOkhE,EAAS,QAASb,EAAUv6E,EAAAwE,KAAKE,IAAK20B,EAAUr5B,EAAAwE,KAAKI,IAAKsV,GACrF,IAAK,cAAe,OAAOkhE,EAAS,QAASb,EAAUv6E,EAAAwE,KAAKG,IAAK00B,EAAUr5B,EAAAwE,KAAKI,IAAKsV,GACrF,IAAK,YAAa,OAAOkhE,EAAS,QAASb,EAAUv6E,EAAAwE,KAAKI,IAAKy0B,EAAUr5B,EAAAwE,KAAKI,IAAKsV,GACnF,IAAK,YAAa,OAAOkhE,EAAS,QAASb,EAAUv6E,EAAAwE,KAAKY,IAAKi0B,EAAUr5B,EAAAwE,KAAKY,IAAK8U,GACnF,IAAK,YAAa,OAAOkhE,EAAS,QAASb,EAAUv6E,EAAAwE,KAAKa,IAAKg0B,EAAUr5B,EAAAwE,KAAKa,IAAK6U,GAErF,OAAO,EAxGImhE,CAAad,EAAU56E,EAAW05B,EAAU44B,EAAgB/3C,GACvE,OAAI+I,GACErP,GAAiBA,EAAczS,QACjCo5E,EAAS5yE,MACP5H,EAAA6H,eAAe6wD,sBACfv+C,EAAWnS,MAAOpI,EAAU6H,cAGzByb,IAETs3D,EAAS5yE,MACP5H,EAAA6H,eAAemH,wBACfmL,EAAWnS,OAENnK,EAAOkgC,qBA8FhB,SAAAs9C,EACEv8E,EACA07E,EACAe,EACAjiD,EACAkiD,EACArhE,GAEA,IAAIva,EAAYuB,OAAOq5E,EAASjjE,QAAQnU,eAAe/D,IAAIP,IAE3D,OADAqC,OAAOvB,EAAUoG,MAAQomC,EAAA1pC,YAAYqU,oBAC9BqiD,EAAYohB,EAA6B56E,GAAa27E,GAAgBjiD,EAAUkiD,EAAWrhE,GAIpG,SAAAsgE,EACED,EACA3mE,EACAylB,EACAnf,GAEA,GAAuB,GAAnBmf,EAASl4B,OACX,OAAKyS,GAAyC,GAAxBA,EAAczS,OAO7ByS,EAAc,IANnB2mE,EAAS5yE,MACP5H,EAAA6H,eAAe2M,oCACf2F,EAAWnS,MAAO,IAAK6L,EAAgBA,EAAczS,OAAOmO,SAAS,IAAM,KAEtE,MAIX,GAAuB,GAAnB+pB,EAASl4B,OAAa,CACxB,GAAIyS,EACF,GAA4B,GAAxBA,EAAczS,OAChBo5E,EAASlvB,kBAAkBhyB,EAAS,GAAIzlB,EAAc,GAAE,SACnD,CACL,GAAIA,EAAczS,OAKhB,OAJAo5E,EAAS5yE,MACP5H,EAAA6H,eAAe2M,oCACf2F,EAAWnS,MAAO,IAAK6L,EAAczS,OAAOmO,SAAS,KAEhD,KAETirE,EAASxqB,4BAA4B12B,EAAS,GAAIr5B,EAAAwE,KAAKG,IAAG,QAG5D41E,EAASxqB,4BAA4B12B,EAAS,GAAIr5B,EAAAwE,KAAKG,IAAG,GAE5D,OAAO41E,EAAS9xB,YAYlB,OAVI70C,GAAiBA,EAAczS,OAAS,GAC1Co5E,EAAS5yE,MACP5H,EAAA6H,eAAe2M,oCACf2F,EAAWnS,MAAO,IAAK6L,EAAczS,OAAOmO,SAAS,KAGzDirE,EAAS5yE,MACP5H,EAAA6H,eAAeyH,+BACf6K,EAAWnS,MAAO,IAAKsxB,EAASl4B,OAAOmO,SAAS,KAE3C,KAIT,SAAAqrE,EAAgCJ,EAAoBtlE,GAClD,IAAIgO,EACA3jB,EA6BJ,OA5BIi7E,EAASh2E,QAAQslD,UACnB5mC,EAAOs3D,EAASjnB,qBAAqBr+C,EAAYjV,EAAAwE,KAAK6hD,QAAO,MAE3DnmD,EAAAijB,gBAAgBF,IAAS/iB,EAAAkjB,aAAa6C,OACtC/lB,EAAAonB,kBAAkBrE,IAAS/iB,EAAAqc,WAAWE,KACR,GAA9Bvc,EAAAqmC,qBAAqBtjB,KACpB3jB,EAAQY,EAAAqnB,oBAAoBtE,IAAS,KAEtCs3D,EAAS5yE,MACP5H,EAAA6H,eAAemH,wBACfkG,EAAWlN,OAEbzI,GAAS,KAGX2jB,EAAOs3D,EAASjnB,qBAAqBr+C,EAAYjV,EAAAwE,KAAK4hD,QAAO,MAE3DlmD,EAAAijB,gBAAgBF,IAAS/iB,EAAAkjB,aAAa6C,OACtC/lB,EAAAonB,kBAAkBrE,IAAS/iB,EAAAqc,WAAWC,MACrCld,EAAQY,EAAAgmB,iBAAiBjD,IAAS,KAEnCs3D,EAAS5yE,MACP5H,EAAA6H,eAAemH,wBACfkG,EAAWlN,OAEbzI,GAAS,IAGNA,EAlpFT3B,EAAAw7D,cAqpFA,IAAMqiB,EAAuB,kBAG7B79E,EAAA+hE,gBAAA,SACE6a,EACA7gE,EACAQ,GAEA,IAAI5C,EAAUijE,EAASjjE,QACvBpW,OAAOwY,EAAcpC,SAAWA,GAChC,IAAI1Z,EAAS28E,EAAS38E,OAClB2G,EAAUg2E,EAASh2E,QAEnBk3E,EAAoBnkE,EAAQnU,eAAe/D,IAAIo8E,GACnD,IAAKC,EASH,OARAnkE,EAAQ3P,MACN5H,EAAA6H,eAAeqB,mBACfiR,EAAWnS,MAAOyzE,GAEpBlkE,EAAQ+T,KACNtrB,EAAA6H,eAAe8zE,iGACfxhE,EAAWnS,OAENnK,EAAOkgC,oBAEhB,GAAI29C,EAAkB11E,MAAQomC,EAAA1pC,YAAYqU,mBAKxC,OAJAQ,EAAQ3P,MACN5H,EAAA6H,eAAeuP,uGACf+C,EAAWnS,MAAO0zE,EAAkBj0E,cAE/B5J,EAAOkgC,oBAGhB,IAAI69C,EAAuCF,EAAmBtxE,UAC9D,OAAMwxE,GAAoBpB,EAAShuB,gBAAgBovB,IAEnDpB,EAAS9xB,YAAc/uC,EAAcnP,KAC9B3M,EAAO2/B,WACZo+C,EAAiBn0E,cACfjD,EAAQslD,SACJjsD,EAAO26B,UAAU7e,EAAc6E,qBAC/B3gB,EAAOu6B,UAAUze,EAAc6E,sBAErCha,EAAQqoD,iBAToEhvD,EAAOkgC,qBAavF,IAAM89C,EAAoB,QAG1B,SAAAlqB,EACE6oB,EACArwD,EACAhQ,GAEA,IAAI5C,EAAUijE,EAASjjE,QACnB1Z,EAAS28E,EAAS38E,OAElBy/D,EAAa/lD,EAAQjU,YAAYjE,IAAI,UACzC,IAAKi+D,EAAY,OAAOz/D,EAAOkgC,oBAE/B,IAAI+9C,EAAiBvkE,EAAQnU,eAAe/D,IAAIw8E,GAChD,IAAKC,GAAkBA,EAAe91E,MAAQomC,EAAA1pC,YAAYqU,mBAAoB,OAAOlZ,EAAOkgC,oBAE5F,IAAIg+C,EAAoCD,EAAgB1xE,UACxD,IAAM2xE,IAAiBvB,EAAShuB,gBAAgBuvB,GAAiB,OAAOl+E,EAAOkgC,oBAE/E,IAAIi+C,EAAwB,MAAX7xD,EACbqwD,EAASlvB,kBAAkBnhC,EAASmzC,EAAU,KAC9CA,EAAWtX,aAAanoD,GAExBo+E,EAAczB,EAASxd,oBAAoB7iD,EAAWnS,MAAM5D,OAAOF,gBAGvE,OADAs2E,EAAS9xB,YAAczoD,EAAAwE,KAAKc,KACrB1H,EAAO89B,YAAY,MACxB99B,EAAO6/B,iBACLq+C,EAAct0E,cACZu0E,EACAC,EACAp+E,EAAOu6B,UAAUje,EAAWnS,MAAM0V,MAClC7f,EAAOu6B,UAAUje,EAAWnS,MAAM2V,SAEpCxd,EAAAqc,WAAWsf,MAEbj+B,EAAOkgC,sBAlCXngC,EAAA+zD,8BC7vFA9zD,EAAAD,QAAAO,oBCAA,SAAAgtD,GAEA,MAAA+wB,EAAA/wB,EAAAgxB,UAAA99E,EAAA,IAEA,QAAA+9E,KAAAF,GACAE,EAAAtpC,WAAA,cAAAspC,EAAAtpC,WAAA,gBACAqY,EAAAixB,GAAAF,EAAAE,IAIAjxB,EAAAh0B,gBAAA,SAAA1Q,GACA,OAAAA,EACAy1D,EAAAG,QAAA51D,GADA,GAIA0kC,EAAA3zB,YAAA,SAAA0C,GACAA,GAAAgiD,EAAAI,MAAApiD,IAGAixB,EAAAoxB,YAAA,SAAAC,EAAAC,EAAAj9E,GACA,OAAA08E,EAAAQ,SAAAF,EAAAC,EAAAj9E,IAGA2rD,EAAA7f,MAAA,SAAApR,EAAAsR,GACA0wC,EAAAS,OAAAziD,GAAAsR,GAGA2f,EAAAvnB,KAAA,SAAA1J,GACA,OAAAgiD,EAAAS,OAAAziD,IAKA,MAAAtD,EAAAv4B,EAAA,GAAAu4B,OAEAA,EAAAh3B,UAAAmkC,OAAA,WACA,IAAA64C,EAAAV,EAAAW,MACAr5C,EAAA,GAIA,OAHA04C,EAAAW,MAAA,SAAAC,GAAgCt5C,GAAAs5C,EAAA,MAChCC,qBAAA7+E,KAAA4c,KACAohE,EAAAW,MAAAD,EACAp5C,GAGA5M,EAAAh3B,UAAAokC,QAAA,WACA,IAAA44C,EAAAV,EAAAW,MACAr5C,EAAA,GAIA,OAHA04C,EAAAW,MAAA,SAAAC,GAAgCt5C,GAAAs5C,EAAA,MAChCE,0BAAA9+E,KAAA4c,KACAohE,EAAAW,MAAAD,EACAp5C,oCClDA3lC,EAAAD,QAAAq/E,KACA,IAAAC,EAAA,IAAAv5C,WAAA,GACAw5C,EAAA,EAEAF,EAAA,yBAAAx2D,GACA,KAAAA,KAAA,YAEA,GAAA02D,EAAA12D,EAAAy2D,EAAA97E,OAAA,CACA,IAAAg8E,EAAAF,GACAA,EAAA,IAAAv5C,WAAA8tC,KAAApoB,IAAA,MAAA6zB,EAAA97E,OAAAqlB,EAAA,EAAAy2D,EAAA97E,UACAoG,IAAA41E,GAGA,IAAAljD,EAAAijD,EAIA,OAHA,GAAAA,GAAA12D,KACA02D,EAAA,KAAAA,IAEAjjD,GAGA+iD,EAAA,qBAAA/iD,KAIA+iD,EAAA,qBAAAT,EAAAC,EAAAh2D,GACAy2D,EAAAG,WAAAb,EAAAC,IAAAh2D,IAGAw2D,EAAA,eAAA/iD,EAAA36B,EAAAm3B,GACAwmD,EAAAhjD,GAAA,EAAAxD,IAAAn3B,GAGA09E,EAAA,cAAA/iD,EAAAxD,GACA,OAAAwmD,EAAAhjD,GAAA,EAAAxD,sBCjCA74B,EAAAD,QAAAq/E,KACAA,EAAA,OAAAxL,yBCDA,SAAAtmB,GAEA,IAAA8xB,EAAA,oBAAA7iC,qBAAA,IAAA+Q,MAAAltD,KA2IA,SAAAq/E,IACArzE,MAAAszE,kBACAtzE,MAAAszE,kBAAAr/E,KAAAo/E,GAEAp/E,KAAAs/E,MAAAt/E,KAAAY,KAAA,KAAAZ,KAAAisB,QAAA,UAAAlgB,OAAAuzE,MAWA,SAAAC,EAAAtzD,GACAjsB,KAAAisB,WAAA,mBACAlgB,MAAAszE,kBACAtzE,MAAAszE,kBAAAr/E,KAAAu/E,GAEAv/E,KAAAs/E,MAAAt/E,KAAAY,KAAA,KAAAZ,KAAAisB,QAAA,UAAAlgB,OAAAuzE,MA7JAv+E,OAAAy+E,iBACAT,EAAA,YAAA19E,GAA0C,OAAAA,GAAA,SAE1CooB,WAAgBpoB,OAAA,IAAAo+E,UAAA,GAChB/1D,WAAgBroB,MAAA,IAAAo+E,UAAA,KAGhB1+E,OAAAy+E,iBACAT,EAAA,aAAA19E,GAA4C,OAAAA,GAAA,SAE5CooB,WAAgBpoB,OAAA,MAAAo+E,UAAA,GAChB/1D,WAAgBroB,MAAA,MAAAo+E,UAAA,KAGhB1+E,OAAAy+E,iBACAT,EAAA,IAAAA,EAAA,eAAA19E,GAAmE,SAAAA,IAEnEooB,WAAgBpoB,OAAA,WAAAo+E,UAAA,GAChB/1D,WAAgBroB,MAAA,WAAAo+E,UAAA,KAGhB1+E,OAAAy+E,iBACAT,EAAA,YAAA19E,GAA0C,WAAAA,IAE1CooB,WAAgBpoB,MAAA,EAAAo+E,UAAA,GAChB/1D,WAAgBroB,MAAA,IAAAo+E,UAAA,KAGhB1+E,OAAAy+E,iBACAT,EAAA,aAAA19E,GAA4C,aAAAA,IAE5CooB,WAAgBpoB,MAAA,EAAAo+E,UAAA,GAChB/1D,WAAgBroB,MAAA,MAAAo+E,UAAA,KAGhB1+E,OAAAy+E,iBACAT,EAAA,IAAAA,EAAA,eAAA19E,GAAmE,OAAAA,IAAA,IAEnEooB,WAAgBpoB,MAAA,EAAAo+E,UAAA,GAChB/1D,WAAgBroB,MAAA,WAAAo+E,UAAA,KAGhB1+E,OAAAy+E,iBACAT,EAAA,cAAA19E,GAA8C,QAAAA,IAE9CooB,WAAgBpoB,MAAA,EAAAo+E,UAAA,GAChB/1D,WAAgBroB,MAAA,EAAAo+E,UAAA,KAGhB1+E,OAAAy+E,iBACAT,EAAA,aAAA19E,GAA4C,OAAAkyE,KAAA6H,OAAA/5E,KAE5CooB,WAAgBpoB,MAAAkyE,KAAA6H,QAAA,eAAAqE,UAAA,GAChB/1D,WAAgBroB,MAAAkyE,KAAA6H,OAAA,eAAAqE,UAAA,GAChBC,oBAAyBr+E,MAAAkyE,KAAA6H,OAAA,iBAAAqE,UAAA,GACzB1E,kBAAuB15E,OAAA,SAAAo+E,UAAA,GACvBxE,kBAAuB55E,MAAA,SAAAo+E,UAAA,GACvBE,SAAct+E,MAAAkyE,KAAA6H,OAAA,cAAAqE,UAAA,KAGd1+E,OAAAy+E,iBACAT,EAAA,aAAA19E,GAA4C,OAAAA,IAE5CooB,WAAgBpoB,OAAA,uBAAAo+E,UAAA,GAChB/1D,WAAgBroB,MAAA,uBAAAo+E,UAAA,GAChBC,oBAAyBr+E,MAAA,wBAAAo+E,UAAA,GACzB1E,kBAAuB15E,OAAA,iBAAAo+E,UAAA,GACvBxE,kBAAuB55E,MAAA,iBAAAo+E,UAAA,GACvBE,SAAct+E,MAAA,sBAAAo+E,UAAA,KAGdV,EAAA,IAAAxL,KAAAqM,MAEAb,EAAA,aAAA19E,GACA,IAAAX,EAAA6yE,KAAAqM,MAAAv+E,MACA,OAAAA,EAAA,GAAAX,KAGAq+E,EAAA,gBAAA19E,GAGA,kBADAA,GAAA,WADAA,OAAA,gBACAA,IAAA,eACAA,IAAA,oBAGA09E,EAAA,cAAA19E,EAAAinB,GAEA,OAAAjnB,IADAinB,GAAA,IACAjnB,IAAA,GAAAinB,GAGAy2D,EAAA,cAAA19E,EAAAinB,GAEA,OAAAjnB,KADAinB,GAAA,IACAjnB,GAAA,GAAAinB,GAGAy2D,EAAA,IAAAxL,KAAAsM,IAEAd,EAAA,IAAAxL,KAAApoB,IAEA4zB,EAAA,IAAAxL,KAAAzuD,IAEAi6D,EAAA,KAAAxL,KAAApsB,KAEA43B,EAAA,MAAAxL,KAAAsF,MAGAkG,EAAA,iBAAA19E,GACA,WAAAkyE,KAAAsM,IAAAx+E,EAAAkyE,KAAAuM,MAAAz+E,IACA,EAAAkyE,KAAAwM,MAAA,GAAA1+E,GAEAkyE,KAAAwM,MAAA1+E,IAGA09E,EAAA,gBAAAxgD,EAAAC,EAAAT,GACA,OAAAA,EAAAQ,EAAAC,GAGAugD,EAAA,KAAAxL,KAAAyM,KAEAjB,EAAA,MAAAxL,KAAAuM,MAEAf,EAAA,kBAAAH,EAAAqB,GACA,OAAA1M,KAAAsM,IAAAjB,GAAArL,KAAA2M,KAAAD,IAGAlB,EAAA,eAAA19E,GACA,IAAAw/C,EAAAx/C,GAAA,WACAy/C,GAAA,SAAAz/C,IAAA,EAIA,OAFAw/C,GADAx/C,EAAAw/C,EAAAC,IACA,WACAA,GAAA,MAAAz/C,IAAA,KAIA09E,EAAA,iBAAA19E,GACA,OAAAA,GAAA,QAAAA,GAAA,iBAAAA,GAUA+9E,EAAA19E,UAAAX,OAAAid,OAAAjS,MAAArK,WACA09E,EAAA19E,UAAAd,KAAA,mBACAw+E,EAAA19E,UAAAuqB,QAAA,cAEA8yD,EAAA,uBACA,UAAAK,GAWAG,EAAA79E,UAAAX,OAAAid,OAAAjS,MAAArK,WACA69E,EAAA79E,UAAAd,KAAA,iBAEAm+E,EAAA,gBAAAoB,EAAAl0D,GACA,GAAAk0D,EAAA,OAAAA,EACA,UAAAZ,EAAAtzD,IAGA8yD,EAAA,oBAAA19E,GACA,OAAAA,GAGA09E,EAAA,kBAAA/7E,EAAA0wE,GACA,SAAAG,SAAA7wE,OAAAo9E,IAGApyC,OAAA,uBAAAD,GACA,OAAAC,OAAA8W,aAAA3M,MAAAnK,OAAAD,IAGAC,OAAA,wBAAAD,GACA,OAAAC,OAAAqyC,cAAAloC,MAAAnK,OAAAD,IAGAgxC,EAAA,UAAAuB,OAAAC,UAEAxB,EAAA,iBAAAyB,GACA,uBAAAA,GAGAzB,EAAA,qBAAAyB,GACA,uBAAAA,GAAA,iBAAAA,GAGAzB,EAAA,kBAAAyB,GACA,uBAAAA,gBAAAxyC,QAGA+wC,EAAA,QAAAv3E,MAAAi5E,QAEA1B,EAAA,mBAAA/5D,GACA,OAAAA,GAGA+5D,EAAA,cAAAH,EAAAqB,GACA,OAAArB,EAAAqB,GAGAlB,EAAA,eAAAH,EAAAqB,GACA,OAAA1M,KAAA6H,OAAAwD,EAAAqB,IAGA9/E,EAAA,GAAAA,CAAA4+E,GACA5+E,EAAA,GAAAA,CAAA4+E,oGCnNA5+E,EAAA,IACAA,EAAA,IACAA,EAAA,IACAA,EAAA","file":"assemblyscript.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"binaryen\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"binaryen\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"assemblyscript\"] = factory(require(\"binaryen\"));\n\telse\n\t\troot[\"assemblyscript\"] = factory(root[\"binaryen\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__22__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 28);\n","/**\r\n * AssemblyScript's intermediate representation describing a program's elements.\r\n * @module program\r\n *//***/\r\n\r\nimport {\r\n  Options\r\n} from \"./compiler\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticMessage,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind,\r\n  TypeFlags,\r\n  Signature,\r\n\r\n  typesToString\r\n} from \"./types\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  Source,\r\n  Range,\r\n  CommonTypeNode,\r\n  TypeNode,\r\n  TypeParameterNode,\r\n  ParameterKind,\r\n  SignatureNode,\r\n  DecoratorNode,\r\n  DecoratorKind,\r\n\r\n  Expression,\r\n  AssertionExpression,\r\n  ElementAccessExpression,\r\n  IdentifierExpression,\r\n  LiteralExpression,\r\n  LiteralKind,\r\n  ParenthesizedExpression,\r\n  PropertyAccessExpression,\r\n  StringLiteralExpression,\r\n  CallExpression,\r\n\r\n  ClassDeclaration,\r\n  DeclarationStatement,\r\n  EnumDeclaration,\r\n  EnumValueDeclaration,\r\n  ExportMember,\r\n  ExportStatement,\r\n  FieldDeclaration,\r\n  FunctionDeclaration,\r\n  ImportDeclaration,\r\n  ImportStatement,\r\n  InterfaceDeclaration,\r\n  MethodDeclaration,\r\n  NamespaceDeclaration,\r\n  TypeDeclaration,\r\n  VariableDeclaration,\r\n  VariableLikeDeclarationStatement,\r\n  VariableStatement,\r\n\r\n  stringToDecoratorKind\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Module,\r\n  NativeType,\r\n  FunctionRef,\r\n  ExpressionRef,\r\n  ExpressionId,\r\n  BinaryOp,\r\n  UnaryOp,\r\n\r\n  getExpressionId,\r\n  getGetLocalIndex,\r\n  isTeeLocal,\r\n  getSetLocalValue,\r\n  getBinaryOp,\r\n  getConstValueI32,\r\n  getBinaryLeft,\r\n  getBinaryRight,\r\n  getUnaryOp,\r\n  getExpressionType,\r\n  getLoadBytes,\r\n  isLoadSigned,\r\n  getIfTrue,\r\n  getIfFalse,\r\n  getSelectThen,\r\n  getSelectElse,\r\n  getCallTarget,\r\n  getBlockChildCount,\r\n  getBlockChild,\r\n  getBlockName,\r\n  getConstValueF32,\r\n  getConstValueF64,\r\n  getConstValueI64Low\r\n} from \"./module\";\r\nimport { CharCode } from \"./util\";\r\n\r\n/** Path delimiter inserted between file system levels. */\r\nexport const PATH_DELIMITER = \"/\";\r\n/** Substitution used to indicate the parent directory. */\r\nexport const PARENT_SUBST = \"..\";\r\n/** Function name prefix used for getters. */\r\nexport const GETTER_PREFIX = \"get:\";\r\n/** Function name prefix used for setters. */\r\nexport const SETTER_PREFIX = \"set:\";\r\n/** Delimiter used between class names and instance members. */\r\nexport const INSTANCE_DELIMITER = \"#\";\r\n/** Delimiter used between class and namespace names and static members. */\r\nexport const STATIC_DELIMITER = \".\";\r\n/** Delimiter used between a function and its inner elements. */\r\nexport const INNER_DELIMITER = \"~\";\r\n/** Substitution used to indicate a library directory. */\r\nexport const LIBRARY_SUBST = \"~lib\";\r\n/** Library directory prefix. */\r\nexport const LIBRARY_PREFIX = LIBRARY_SUBST + PATH_DELIMITER;\r\n\r\n/** Represents a yet unresolved export. */\r\nclass QueuedExport {\r\n  isReExport: bool;\r\n  referencedName: string;\r\n  member: ExportMember;\r\n}\r\n\r\n/** Represents a yet unresolved import. */\r\nclass QueuedImport {\r\n  internalName: string;\r\n  referencedName: string;\r\n  referencedNameAlt: string;\r\n  declaration: ImportDeclaration;\r\n}\r\n\r\n/** Represents a type alias. */\r\nclass TypeAlias {\r\n  typeParameters: TypeParameterNode[] | null;\r\n  type: CommonTypeNode;\r\n}\r\n\r\n/** Represents the kind of an operator overload. */\r\nexport enum OperatorKind {\r\n  INVALID,\r\n  INDEXED_GET,\r\n  INDEXED_SET,\r\n  UNCHECKED_INDEXED_GET,\r\n  UNCHECKED_INDEXED_SET,\r\n  ADD,\r\n  SUB,\r\n  MUL,\r\n  DIV,\r\n  REM,\r\n  POW,\r\n  AND,\r\n  OR,\r\n  XOR,\r\n  EQ,\r\n  NE,\r\n  GT,\r\n  GE,\r\n  LT,\r\n  LE\r\n}\r\n\r\nfunction operatorKindFromString(str: string): OperatorKind {\r\n  assert(str.length);\r\n  switch (str.charCodeAt(0)) {\r\n    case CharCode.OPENBRACKET: {\r\n      switch (str) {\r\n        case \"[]\" : return OperatorKind.INDEXED_GET;\r\n        case \"[]=\": return OperatorKind.INDEXED_SET;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.OPENBRACE: {\r\n      switch (str) {\r\n        case \"{}\" : return OperatorKind.UNCHECKED_INDEXED_GET;\r\n        case \"{}=\": return OperatorKind.UNCHECKED_INDEXED_SET;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.PLUS: {\r\n      if (str.length == 1) return OperatorKind.ADD;\r\n      break;\r\n    }\r\n    case CharCode.MINUS: {\r\n      if (str.length == 1) return OperatorKind.SUB;\r\n      break;\r\n    }\r\n    case CharCode.ASTERISK: {\r\n      switch (str) {\r\n        case \"*\" : return OperatorKind.MUL;\r\n        case \"**\": return OperatorKind.POW;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.SLASH: {\r\n      if (str.length == 1) return OperatorKind.DIV;\r\n      break;\r\n    }\r\n    case CharCode.PERCENT: {\r\n      if (str.length == 1) return OperatorKind.REM;\r\n      break;\r\n    }\r\n    case CharCode.AMPERSAND: {\r\n      if (str.length == 1) return OperatorKind.AND;\r\n      break;\r\n    }\r\n    case CharCode.BAR: {\r\n      if (str.length == 1) return OperatorKind.OR;\r\n      break;\r\n    }\r\n    case CharCode.CARET: {\r\n      if (str.length == 1) return OperatorKind.XOR;\r\n      break;\r\n    }\r\n    case CharCode.EQUALS: {\r\n      if (str == \"==\") return OperatorKind.EQ;\r\n      break;\r\n    }\r\n    case CharCode.EXCLAMATION: {\r\n      if (str == \"!=\") return OperatorKind.NE;\r\n      break;\r\n    }\r\n    case CharCode.GREATERTHAN: {\r\n      switch (str) {\r\n        case \">\" : return OperatorKind.GT;\r\n        case \">=\": return OperatorKind.GE;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.LESSTHAN: {\r\n      switch (str) {\r\n        case \"<\" : return OperatorKind.LT;\r\n        case \"<=\": return OperatorKind.LE;\r\n      }\r\n      break;\r\n    }\r\n  }\r\n  return OperatorKind.INVALID;\r\n}\r\n\r\nconst noTypesYet = new Map<string,Type>();\r\n\r\n/** Represents an AssemblyScript program. */\r\nexport class Program extends DiagnosticEmitter {\r\n\r\n  /** Array of source files. */\r\n  sources: Source[];\r\n  /** Diagnostic offset used where repeatedly obtaining the next diagnostic. */\r\n  diagnosticsOffset: i32 = 0;\r\n  /** Compiler options. */\r\n  options: Options;\r\n  /** Elements by internal name. */\r\n  elementsLookup: Map<string,Element> = new Map();\r\n  /** Class and function instances by internal name. */\r\n  instancesLookup: Map<string,Element> = new Map();\r\n  /** Types by internal name. */\r\n  typesLookup: Map<string,Type> = noTypesYet;\r\n  /** Declared type aliases. */\r\n  typeAliases: Map<string,TypeAlias> = new Map();\r\n  /** File-level exports by exported name. */\r\n  fileLevelExports: Map<string,Element> = new Map();\r\n  /** Module-level exports by exported name. */\r\n  moduleLevelExports: Map<string,Element> = new Map();\r\n  /** Array prototype reference. */\r\n  arrayPrototype: ClassPrototype | null = null;\r\n  /** ArrayBufferView prototype reference. */\r\n  arrayBufferViewPrototype: InterfacePrototype | null = null;\r\n  /** String instance reference. */\r\n  stringInstance: Class | null = null;\r\n\r\n  /** Target expression of the previously resolved property or element access. */\r\n  resolvedThisExpression: Expression | null = null;\r\n  /** Element expression of the previously resolved element access. */\r\n  resolvedElementExpression : Expression | null = null;\r\n\r\n  /** Constructs a new program, optionally inheriting parser diagnostics. */\r\n  constructor(diagnostics: DiagnosticMessage[] | null = null) {\r\n    super(diagnostics);\r\n    this.sources = [];\r\n  }\r\n\r\n  /** Gets a source by its exact path. */\r\n  getSource(normalizedPath: string): Source | null {\r\n    var sources = this.sources;\r\n    for (let i = 0, k = sources.length; i < k; ++i) {\r\n      let source = sources[i];\r\n      if (source.normalizedPath == normalizedPath) return source;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Looks up the source for the specified possibly ambiguous path. */\r\n  lookupSourceByPath(normalizedPathWithoutExtension: string): Source | null {\r\n    return (\r\n      this.getSource(normalizedPathWithoutExtension + \".ts\") ||\r\n      this.getSource(normalizedPathWithoutExtension + \"/index.ts\") ||\r\n      this.getSource(LIBRARY_PREFIX + normalizedPathWithoutExtension + \".ts\") ||\r\n      this.getSource(LIBRARY_PREFIX + normalizedPathWithoutExtension + \"/index.ts\")\r\n    );\r\n  }\r\n\r\n  /** Initializes the program and its elements prior to compilation. */\r\n  initialize(options: Options): void {\r\n    this.options = options;\r\n    this.typesLookup = new Map([\r\n      [\"i8\", Type.i8],\r\n      [\"i16\", Type.i16],\r\n      [\"i32\", Type.i32],\r\n      [\"i64\", Type.i64],\r\n      [\"isize\", options.isizeType],\r\n      [\"u8\", Type.u8],\r\n      [\"u16\", Type.u16],\r\n      [\"u32\", Type.u32],\r\n      [\"u64\", Type.u64],\r\n      [\"usize\", options.usizeType],\r\n      [\"bool\", Type.bool],\r\n      [\"f32\", Type.f32],\r\n      [\"f64\", Type.f64],\r\n      [\"void\", Type.void],\r\n      [\"number\", Type.f64],\r\n      [\"boolean\", Type.bool]\r\n    ]);\r\n\r\n    var queuedExports = new Map<string,QueuedExport>();\r\n    var queuedImports = new Array<QueuedImport>();\r\n    var queuedExtends = new Array<ClassPrototype>();\r\n    var queuedImplements = new Array<ClassPrototype>();\r\n\r\n    // build initial lookup maps of internal names to declarations\r\n    for (let i = 0, k = this.sources.length; i < k; ++i) {\r\n      let source = this.sources[i];\r\n      let statements = source.statements;\r\n      for (let j = 0, l = statements.length; j < l; ++j) {\r\n        let statement = statements[j];\r\n        switch (statement.kind) {\r\n          case NodeKind.CLASSDECLARATION: {\r\n            this.initializeClass(<ClassDeclaration>statement, queuedExtends, queuedImplements);\r\n            break;\r\n          }\r\n          case NodeKind.ENUMDECLARATION: {\r\n            this.initializeEnum(<EnumDeclaration>statement);\r\n            break;\r\n          }\r\n          case NodeKind.EXPORT: {\r\n            this.initializeExports(<ExportStatement>statement, queuedExports);\r\n            break;\r\n          }\r\n          case NodeKind.FUNCTIONDECLARATION: {\r\n            this.initializeFunction(<FunctionDeclaration>statement);\r\n            break;\r\n          }\r\n          case NodeKind.IMPORT: {\r\n            this.initializeImports(<ImportStatement>statement, queuedExports, queuedImports);\r\n            break;\r\n          }\r\n          case NodeKind.INTERFACEDECLARATION: {\r\n            this.initializeInterface(<InterfaceDeclaration>statement);\r\n            break;\r\n          }\r\n          case NodeKind.NAMESPACEDECLARATION: {\r\n            this.initializeNamespace(<NamespaceDeclaration>statement, queuedExtends, queuedImplements);\r\n            break;\r\n          }\r\n          case NodeKind.TYPEDECLARATION: {\r\n            this.initializeTypeAlias(<TypeDeclaration>statement);\r\n            break;\r\n          }\r\n          case NodeKind.VARIABLE: {\r\n            this.initializeVariables(<VariableStatement>statement);\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // queued imports should be resolvable now through traversing exports and queued exports\r\n    for (let i = 0; i < queuedImports.length;) {\r\n      let queuedImport = queuedImports[i];\r\n      let element = this.tryResolveImport(queuedImport.referencedName, queuedExports);\r\n      if (element) {\r\n        this.elementsLookup.set(queuedImport.internalName, element);\r\n        queuedImports.splice(i, 1);\r\n      } else {\r\n        if (element = this.tryResolveImport(queuedImport.referencedNameAlt, queuedExports)) {\r\n          this.elementsLookup.set(queuedImport.internalName, element);\r\n          queuedImports.splice(i, 1);\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Module_0_has_no_exported_member_1,\r\n            queuedImport.declaration.range,\r\n            (<ImportStatement>queuedImport.declaration.parent).path.value,\r\n            queuedImport.declaration.externalName.text\r\n          );\r\n          ++i;\r\n        }\r\n      }\r\n    }\r\n\r\n    // queued exports should be resolvable now that imports are finalized\r\n    for (let [exportName, queuedExport] of queuedExports) {\r\n      let currentExport: QueuedExport | null = queuedExport; // nullable below\r\n      let element: Element | null;\r\n      do {\r\n        if (currentExport.isReExport) {\r\n          if (element = this.fileLevelExports.get(currentExport.referencedName)) {\r\n            this.setExportAndCheckLibrary(\r\n              exportName,\r\n              element,\r\n              currentExport.member.externalName\r\n            );\r\n            break;\r\n          }\r\n          currentExport = queuedExports.get(currentExport.referencedName);\r\n          if (!currentExport) {\r\n            this.error(\r\n              DiagnosticCode.Module_0_has_no_exported_member_1,\r\n              queuedExport.member.externalName.range,\r\n              (<StringLiteralExpression>(<ExportStatement>queuedExport.member.parent).path).value,\r\n              queuedExport.member.externalName.text\r\n            );\r\n          }\r\n        } else {\r\n          if (\r\n            // normal export\r\n            (element = this.elementsLookup.get(currentExport.referencedName)) ||\r\n            // library re-export\r\n            (element = this.elementsLookup.get(currentExport.member.name.text))\r\n          ) {\r\n            this.setExportAndCheckLibrary(\r\n              exportName,\r\n              element,\r\n              currentExport.member.externalName\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Cannot_find_name_0,\r\n              queuedExport.member.range, queuedExport.member.name.text\r\n            );\r\n          }\r\n          break;\r\n        }\r\n      } while (currentExport);\r\n    }\r\n\r\n    // resolve base prototypes of derived classes\r\n    for (let i = 0, k = queuedExtends.length; i < k; ++i) {\r\n      let derivedPrototype = queuedExtends[i];\r\n      let derivedDeclaration = derivedPrototype.declaration;\r\n      let derivedType = assert(derivedDeclaration.extendsType);\r\n      let baseElement = this.resolveIdentifier(derivedType.name, null); // reports\r\n      if (!baseElement) continue;\r\n      if (baseElement.kind == ElementKind.CLASS_PROTOTYPE) {\r\n        let basePrototype = <ClassPrototype>baseElement;\r\n        derivedPrototype.basePrototype = basePrototype;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.A_class_may_only_extend_another_class,\r\n          derivedType.range\r\n        );\r\n      }\r\n    }\r\n\r\n    // set up global aliases\r\n    var globalAliases = options.globalAliases;\r\n    if (globalAliases) {\r\n      for (let [alias, name] of globalAliases) {\r\n        if (!name.length) continue; // explicitly disabled\r\n        let element = this.elementsLookup.get(name);\r\n        if (element) this.elementsLookup.set(alias, element);\r\n        else throw new Error(\"element not found: \" + name);\r\n      }\r\n    }\r\n\r\n    // register 'Array'\r\n    var arrayPrototype = this.elementsLookup.get(\"Array\");\r\n    if (arrayPrototype) {\r\n      assert(arrayPrototype.kind == ElementKind.CLASS_PROTOTYPE);\r\n      this.arrayPrototype = <ClassPrototype>arrayPrototype;\r\n    }\r\n\r\n    // register 'ArrayBufferView'\r\n    var arrayBufferViewPrototype = this.elementsLookup.get(\"ArrayBufferView\");\r\n    if (arrayBufferViewPrototype) {\r\n      assert(arrayBufferViewPrototype.kind == ElementKind.INTERFACE_PROTOTYPE);\r\n      this.arrayBufferViewPrototype = <InterfacePrototype>arrayBufferViewPrototype;\r\n    }\r\n\r\n    // register 'String'\r\n    var stringPrototype = this.elementsLookup.get(\"String\");\r\n    if (stringPrototype) {\r\n      assert(stringPrototype.kind == ElementKind.CLASS_PROTOTYPE);\r\n      let stringInstance = (<ClassPrototype>stringPrototype).resolve(null); // reports\r\n      if (stringInstance) {\r\n        if (this.typesLookup.has(\"string\")) {\r\n          let declaration = (<ClassPrototype>stringPrototype).declaration;\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, declaration.programLevelInternalName\r\n          );\r\n        } else {\r\n          this.stringInstance = stringInstance;\r\n          this.typesLookup.set(\"string\", stringInstance.type);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Tries to resolve an import by traversing exports and queued exports. */\r\n  private tryResolveImport(\r\n    referencedName: string,\r\n    queuedExports: Map<string,QueuedExport>\r\n  ): Element | null {\r\n    var element: Element | null;\r\n    var fileLevelExports = this.fileLevelExports;\r\n    do {\r\n      if (element = fileLevelExports.get(referencedName)) return element;\r\n      let queuedExport = queuedExports.get(referencedName);\r\n      if (!queuedExport) return null;\r\n      if (queuedExport.isReExport) {\r\n        referencedName = queuedExport.referencedName;\r\n        continue;\r\n      }\r\n      return this.elementsLookup.get(queuedExport.referencedName);\r\n    } while (true);\r\n  }\r\n\r\n  private filterDecorators(decorators: DecoratorNode[], acceptedFlags: DecoratorFlags): DecoratorFlags {\r\n    var presentFlags = DecoratorFlags.NONE;\r\n    for (let i = 0, k = decorators.length; i < k; ++i) {\r\n      let decorator = decorators[i];\r\n      if (decorator.name.kind == NodeKind.IDENTIFIER) {\r\n        let name = (<IdentifierExpression>decorator.name).text;\r\n        let kind = stringToDecoratorKind(name);\r\n        let flag = decoratorKindToFlag(kind);\r\n        if (flag) {\r\n          if (!(acceptedFlags & flag)) {\r\n            this.error(\r\n              DiagnosticCode.Decorator_0_is_not_valid_here,\r\n              decorator.range, name\r\n            );\r\n          } else if (presentFlags & flag) {\r\n            this.error(\r\n              DiagnosticCode.Duplicate_decorator,\r\n              decorator.range, name\r\n            );\r\n          } else {\r\n            presentFlags |= flag;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return presentFlags;\r\n  }\r\n\r\n  /** Processes global options, if present. */\r\n  private checkGlobalOptions(\r\n    element: Element,\r\n    declaration: DeclarationStatement\r\n  ): void {\r\n    var parentNode = declaration.parent;\r\n    if (\r\n      (element.hasDecorator(DecoratorFlags.GLOBAL)) ||\r\n      (declaration.range.source.is(CommonFlags.BUILTIN)) ||\r\n      (\r\n        declaration.range.source.isLibrary &&\r\n        element.is(CommonFlags.EXPORT) &&\r\n        (\r\n          assert(parentNode).kind == NodeKind.SOURCE ||\r\n          (\r\n            <Node>parentNode).kind == NodeKind.VARIABLE &&\r\n            assert((<Node>parentNode).parent).kind == NodeKind.SOURCE\r\n          )\r\n        )\r\n    ) {\r\n      let globalName = declaration.programLevelInternalName;\r\n      if (this.elementsLookup.has(globalName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, element.internalName\r\n        );\r\n      } else {\r\n        this.elementsLookup.set(globalName, element);\r\n        if (element.is(CommonFlags.BUILTIN)) element.internalName = globalName;\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeClass(\r\n    declaration: ClassDeclaration,\r\n    queuedExtends: ClassPrototype[],\r\n    queuedImplements: ClassPrototype[],\r\n    namespace: Element | null = null\r\n  ): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (this.elementsLookup.has(internalName)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, internalName\r\n      );\r\n      return;\r\n    }\r\n\r\n    var decorators = declaration.decorators;\r\n    var simpleName = declaration.name.text;\r\n    var prototype = new ClassPrototype(\r\n      this,\r\n      simpleName,\r\n      internalName,\r\n      declaration,\r\n      decorators\r\n        ? this.filterDecorators(decorators,\r\n            DecoratorFlags.GLOBAL |\r\n            DecoratorFlags.SEALED |\r\n            DecoratorFlags.UNMANAGED\r\n          )\r\n        : DecoratorFlags.NONE\r\n    );\r\n    prototype.parent = namespace;\r\n    this.elementsLookup.set(internalName, prototype);\r\n\r\n    var implementsTypes = declaration.implementsTypes;\r\n    if (implementsTypes) {\r\n      let numImplementsTypes = implementsTypes.length;\r\n      if (prototype.hasDecorator(DecoratorFlags.UNMANAGED)) {\r\n        if (numImplementsTypes) {\r\n          this.error(\r\n            DiagnosticCode.Unmanaged_classes_cannot_implement_interfaces,\r\n            Range.join(\r\n              declaration.name.range,\r\n              implementsTypes[numImplementsTypes - 1].range\r\n            )\r\n          );\r\n        }\r\n\r\n      // remember classes that implement interfaces\r\n      } else if (numImplementsTypes) {\r\n        queuedImplements.push(prototype);\r\n      }\r\n    }\r\n\r\n    // remember classes that extend another one\r\n    if (declaration.extendsType) queuedExtends.push(prototype);\r\n\r\n    // add as namespace member if applicable\r\n    if (namespace) {\r\n      if (namespace.members) {\r\n        if (namespace.members.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        namespace.members = new Map();\r\n      }\r\n      namespace.members.set(simpleName, prototype);\r\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n\r\n    // otherwise add to file-level exports if exported\r\n    } else if (prototype.is(CommonFlags.EXPORT)) {\r\n      if (this.fileLevelExports.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n      this.fileLevelExports.set(internalName, prototype);\r\n      if (prototype.is(CommonFlags.EXPORT) && declaration.range.source.isEntry) {\r\n        if (this.moduleLevelExports.has(internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n        this.moduleLevelExports.set(internalName, prototype);\r\n      }\r\n    }\r\n\r\n    // initialize members\r\n    var memberDeclarations = declaration.members;\r\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\r\n      let memberDeclaration = memberDeclarations[i];\r\n      switch (memberDeclaration.kind) {\r\n        case NodeKind.FIELDDECLARATION: {\r\n          this.initializeField(<FieldDeclaration>memberDeclaration, prototype);\r\n          break;\r\n        }\r\n        case NodeKind.METHODDECLARATION: {\r\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\r\n            this.initializeAccessor(<MethodDeclaration>memberDeclaration, prototype);\r\n          } else {\r\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, prototype);\r\n          }\r\n          break;\r\n        }\r\n        default: {\r\n          throw new Error(\"class member expected\");\r\n        }\r\n      }\r\n    }\r\n\r\n    this.checkGlobalOptions(prototype, declaration);\r\n  }\r\n\r\n  private initializeField(\r\n    declaration: FieldDeclaration,\r\n    classPrototype: ClassPrototype\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var internalName = declaration.fileLevelInternalName;\r\n    var decorators = declaration.decorators;\r\n\r\n    // static fields become global variables\r\n    if (declaration.is(CommonFlags.STATIC)) {\r\n      if (this.elementsLookup.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n      if (classPrototype.members) {\r\n        if (classPrototype.members.has(name)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        classPrototype.members = new Map();\r\n      }\r\n      let staticField = new Global(\r\n        this,\r\n        name,\r\n        internalName,\r\n        Type.void, // resolved later on\r\n        declaration,\r\n        decorators\r\n          ? this.filterDecorators(decorators, DecoratorFlags.NONE)\r\n          : DecoratorFlags.NONE\r\n      );\r\n      staticField.parent = classPrototype;\r\n      classPrototype.members.set(name, staticField);\r\n      this.elementsLookup.set(internalName, staticField);\r\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\r\n        staticField.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n\r\n    // instance fields are remembered until resolved\r\n    } else {\r\n      if (classPrototype.instanceMembers) {\r\n        if (classPrototype.instanceMembers.has(name)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        classPrototype.instanceMembers = new Map();\r\n      }\r\n      let instanceField = new FieldPrototype(\r\n        classPrototype,\r\n        name,\r\n        internalName,\r\n        declaration\r\n      );\r\n      if (decorators) this.filterDecorators(decorators, DecoratorFlags.NONE);\r\n      classPrototype.instanceMembers.set(name, instanceField);\r\n      // TBD: no need to mark as MODULE_EXPORT\r\n    }\r\n  }\r\n\r\n  private initializeMethod(\r\n    declaration: MethodDeclaration,\r\n    classPrototype: ClassPrototype\r\n  ): void {\r\n    var simpleName = declaration.name.text;\r\n    var internalName = declaration.fileLevelInternalName;\r\n    var prototype: FunctionPrototype | null = null;\r\n\r\n    var decorators = declaration.decorators;\r\n    var decoratorFlags = DecoratorFlags.NONE;\r\n    if (decorators) {\r\n      decoratorFlags = this.filterDecorators(decorators,\r\n        DecoratorFlags.OPERATOR |\r\n        DecoratorFlags.INLINE\r\n      );\r\n    }\r\n\r\n    // static methods become global functions\r\n    if (declaration.is(CommonFlags.STATIC)) {\r\n      assert(declaration.name.kind != NodeKind.CONSTRUCTOR);\r\n\r\n      if (this.elementsLookup.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0, declaration.name.range,\r\n          internalName\r\n        );\r\n        return;\r\n      }\r\n      if (classPrototype.members) {\r\n        if (classPrototype.members.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        classPrototype.members = new Map();\r\n      }\r\n      prototype = new FunctionPrototype(\r\n        this,\r\n        simpleName,\r\n        internalName,\r\n        declaration,\r\n        classPrototype,\r\n        decoratorFlags\r\n      );\r\n      classPrototype.members.set(simpleName, prototype);\r\n      this.elementsLookup.set(internalName, prototype);\r\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n\r\n    // instance methods are remembered until resolved\r\n    } else {\r\n      if (classPrototype.instanceMembers) {\r\n        if (classPrototype.instanceMembers.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        classPrototype.instanceMembers = new Map();\r\n      }\r\n      prototype = new FunctionPrototype(\r\n        this,\r\n        simpleName,\r\n        internalName,\r\n        declaration,\r\n        classPrototype,\r\n        decoratorFlags\r\n      );\r\n      // if (classPrototype.isUnmanaged && instancePrototype.isAbstract) {\r\n      //   this.error( Unmanaged classes cannot declare abstract methods. );\r\n      // }\r\n      if (declaration.name.kind == NodeKind.CONSTRUCTOR) {\r\n        if (classPrototype.constructorPrototype) {\r\n          this.error(\r\n            DiagnosticCode.Multiple_constructor_implementations_are_not_allowed,\r\n            declaration.name.range\r\n          );\r\n        } else {\r\n          prototype.set(CommonFlags.CONSTRUCTOR);\r\n          classPrototype.constructorPrototype = prototype;\r\n        }\r\n      } else {\r\n        classPrototype.instanceMembers.set(simpleName, prototype);\r\n      }\r\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    }\r\n\r\n    this.checkOperatorOverloads(declaration.decorators, prototype, classPrototype);\r\n  }\r\n\r\n  private checkOperatorOverloads(\r\n    decorators: DecoratorNode[] | null,\r\n    prototype: FunctionPrototype,\r\n    classPrototype: ClassPrototype\r\n  ): void {\r\n    // handle operator annotations. operators are either instance methods taking\r\n    // a second argument of the instance's type or static methods taking two\r\n    // arguments of the instance's type. return values vary depending on the\r\n    // operation.\r\n    if (decorators) {\r\n      for (let i = 0, k = decorators.length; i < k; ++i) {\r\n        let decorator = decorators[i];\r\n        if (decorator.decoratorKind == DecoratorKind.OPERATOR) {\r\n          let numArgs = decorator.arguments && decorator.arguments.length || 0;\r\n          if (numArgs == 1) {\r\n            let firstArg = (<Expression[]>decorator.arguments)[0];\r\n            if (\r\n              firstArg.kind == NodeKind.LITERAL &&\r\n              (<LiteralExpression>firstArg).literalKind == LiteralKind.STRING\r\n            ) {\r\n              let kind = operatorKindFromString((<StringLiteralExpression>firstArg).value);\r\n              if (kind == OperatorKind.INVALID) {\r\n                this.error(\r\n                  DiagnosticCode.Operation_not_supported,\r\n                  firstArg.range\r\n                );\r\n              } else {\r\n                let overloads = classPrototype.overloadPrototypes;\r\n                if (overloads.has(kind)) {\r\n                  this.error(\r\n                    DiagnosticCode.Duplicate_function_implementation,\r\n                    firstArg.range\r\n                  );\r\n                } else {\r\n                  prototype.operatorKind = kind;\r\n                  overloads.set(kind, prototype);\r\n                }\r\n              }\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.String_literal_expected,\r\n                firstArg.range\r\n              );\r\n            }\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Expected_0_arguments_but_got_1,\r\n              decorator.range, \"1\", numArgs.toString(0)\r\n            );\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeAccessor(\r\n    declaration: MethodDeclaration,\r\n    classPrototype: ClassPrototype\r\n  ): void {\r\n    var simpleName = declaration.name.text;\r\n    var internalPropertyName = declaration.fileLevelInternalName;\r\n    var propertyElement = this.elementsLookup.get(internalPropertyName);\r\n    var isGetter = declaration.is(CommonFlags.GET);\r\n    var isNew = false;\r\n    if (propertyElement) {\r\n      if (\r\n        propertyElement.kind != ElementKind.PROPERTY ||\r\n        (isGetter\r\n          ? (<Property>propertyElement).getterPrototype\r\n          : (<Property>propertyElement).setterPrototype\r\n        ) != null\r\n      ) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, internalPropertyName\r\n        );\r\n        return;\r\n      }\r\n    } else {\r\n      propertyElement = new Property(\r\n        this,\r\n        simpleName,\r\n        internalPropertyName,\r\n        classPrototype\r\n      );\r\n      isNew = true;\r\n    }\r\n\r\n    var decorators = declaration.decorators;\r\n    var decoratorFlags = DecoratorFlags.NONE;\r\n    if (decorators) {\r\n      decoratorFlags = this.filterDecorators(decorators,\r\n        DecoratorFlags.INLINE\r\n      );\r\n    }\r\n\r\n    var baseName = (isGetter ? GETTER_PREFIX : SETTER_PREFIX) + simpleName;\r\n\r\n    // static accessors become global functions\r\n    if (declaration.is(CommonFlags.STATIC)) {\r\n      let staticName = classPrototype.internalName + STATIC_DELIMITER + baseName;\r\n      if (this.elementsLookup.has(staticName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, staticName\r\n        );\r\n        return;\r\n      }\r\n      let staticPrototype = new FunctionPrototype(\r\n        this,\r\n        baseName,\r\n        staticName,\r\n        declaration,\r\n        null,\r\n        decoratorFlags\r\n      );\r\n      if (isGetter) {\r\n        (<Property>propertyElement).getterPrototype = staticPrototype;\r\n      } else {\r\n        (<Property>propertyElement).setterPrototype = staticPrototype;\r\n      }\r\n      if (isNew) {\r\n        if (classPrototype.members) {\r\n          if (classPrototype.members.has(simpleName)) {\r\n            this.error(\r\n              DiagnosticCode.Duplicate_identifier_0,\r\n              declaration.name.range, staticName\r\n            );\r\n            return;\r\n          }\r\n        } else {\r\n          classPrototype.members = new Map();\r\n        }\r\n        classPrototype.members.set(simpleName, propertyElement); // check above\r\n      } else {\r\n        assert(classPrototype.members && classPrototype.members.has(simpleName));\r\n      }\r\n      this.elementsLookup.set(internalPropertyName, propertyElement);\r\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\r\n        propertyElement.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n\r\n    // instance accessors are remembered until resolved\r\n    } else {\r\n      let instanceName = classPrototype.internalName + INSTANCE_DELIMITER + baseName;\r\n      if (classPrototype.instanceMembers) {\r\n        if (classPrototype.instanceMembers.has(baseName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalPropertyName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        classPrototype.instanceMembers = new Map();\r\n      }\r\n      let instancePrototype = new FunctionPrototype(\r\n        this,\r\n        baseName,\r\n        instanceName,\r\n        declaration,\r\n        classPrototype,\r\n        decoratorFlags\r\n      );\r\n      if (isGetter) {\r\n        (<Property>propertyElement).getterPrototype = instancePrototype;\r\n      } else {\r\n        (<Property>propertyElement).setterPrototype = instancePrototype;\r\n      }\r\n      classPrototype.instanceMembers.set(baseName, propertyElement);\r\n      this.elementsLookup.set(internalPropertyName, propertyElement);\r\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\r\n        propertyElement.set(CommonFlags.MODULE_EXPORT);\r\n        instancePrototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeEnum(\r\n    declaration: EnumDeclaration,\r\n    namespace: Element | null = null\r\n  ): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (this.elementsLookup.has(internalName)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, internalName\r\n      );\r\n      return;\r\n    }\r\n    var simpleName = declaration.name.text;\r\n    var element = new Enum(this, simpleName, internalName, declaration);\r\n    element.parent = namespace;\r\n    this.elementsLookup.set(internalName, element);\r\n\r\n    if (namespace) {\r\n      if (namespace.members) {\r\n        if (namespace.members.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        namespace.members = new Map();\r\n      }\r\n      namespace.members.set(simpleName, element);\r\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && element.is(CommonFlags.EXPORT)) {\r\n        element.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    } else if (element.is(CommonFlags.EXPORT)) { // no namespace\r\n      if (this.fileLevelExports.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n      this.fileLevelExports.set(internalName, element);\r\n      if (declaration.range.source.isEntry) {\r\n        if (this.moduleLevelExports.has(internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n        element.set(CommonFlags.MODULE_EXPORT);\r\n        this.moduleLevelExports.set(internalName, element);\r\n      }\r\n    }\r\n\r\n    var values = declaration.values;\r\n    for (let i = 0, k = values.length; i < k; ++i) {\r\n      this.initializeEnumValue(values[i], element);\r\n    }\r\n\r\n    this.checkGlobalOptions(element, declaration);\r\n  }\r\n\r\n  private initializeEnumValue(\r\n    declaration: EnumValueDeclaration,\r\n    enm: Enum\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (enm.members) {\r\n      if (enm.members.has(name)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n    } else {\r\n      enm.members = new Map();\r\n    }\r\n    var value = new EnumValue(enm, this, name, internalName, declaration);\r\n    enm.members.set(name, value);\r\n    if (enm.is(CommonFlags.MODULE_EXPORT)) {\r\n      value.set(CommonFlags.MODULE_EXPORT);\r\n    }\r\n  }\r\n\r\n  private initializeExports(\r\n    statement: ExportStatement,\r\n    queuedExports: Map<string,QueuedExport>\r\n  ): void {\r\n    var members = statement.members;\r\n    for (let i = 0, k = members.length; i < k; ++i) {\r\n      this.initializeExport(members[i], statement.internalPath, queuedExports);\r\n    }\r\n  }\r\n\r\n  private setExportAndCheckLibrary(\r\n    name: string,\r\n    element: Element,\r\n    identifier: IdentifierExpression\r\n  ): void {\r\n    this.fileLevelExports.set(name, element);\r\n    if (identifier.range.source.isLibrary) { // add global alias\r\n      if (this.elementsLookup.has(identifier.text)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          identifier.range, identifier.text\r\n        );\r\n      } else {\r\n        element.internalName = identifier.text;\r\n        this.elementsLookup.set(identifier.text, element);\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeExport(\r\n    member: ExportMember,\r\n    internalPath: string | null,\r\n    queuedExports: Map<string,QueuedExport>\r\n  ): void {\r\n    var externalName = member.range.source.internalPath + PATH_DELIMITER + member.externalName.text;\r\n    if (this.fileLevelExports.has(externalName)) {\r\n      this.error(\r\n        DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n        member.externalName.range, externalName\r\n      );\r\n      return;\r\n    }\r\n    var referencedName: string;\r\n    var referencedElement: Element | null;\r\n    var queuedExport: QueuedExport | null;\r\n\r\n    // export local element\r\n    if (internalPath == null) {\r\n      referencedName = member.range.source.internalPath + PATH_DELIMITER + member.name.text;\r\n\r\n      // resolve right away if the element exists\r\n      if (referencedElement = this.elementsLookup.get(referencedName)) {\r\n        this.setExportAndCheckLibrary(\r\n          externalName,\r\n          referencedElement,\r\n          member.externalName\r\n        );\r\n        return;\r\n      }\r\n\r\n      // otherwise queue it\r\n      if (queuedExports.has(externalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          member.externalName.range, externalName\r\n        );\r\n        return;\r\n      }\r\n      queuedExport = new QueuedExport();\r\n      queuedExport.isReExport = false;\r\n      queuedExport.referencedName = referencedName; // -> internal name\r\n      queuedExport.member = member;\r\n      queuedExports.set(externalName, queuedExport);\r\n\r\n    // export external element\r\n    } else {\r\n      referencedName = internalPath + PATH_DELIMITER + member.name.text;\r\n\r\n      // resolve right away if the export exists\r\n      referencedElement = this.elementsLookup.get(referencedName);\r\n      if (referencedElement) {\r\n        this.setExportAndCheckLibrary(\r\n          externalName,\r\n          referencedElement,\r\n          member.externalName\r\n        );\r\n        return;\r\n      }\r\n\r\n      // walk already known queued exports\r\n      let seen = new Set<QueuedExport>();\r\n      while (queuedExport = queuedExports.get(referencedName)) {\r\n        if (queuedExport.isReExport) {\r\n          referencedElement = this.fileLevelExports.get(queuedExport.referencedName);\r\n          if (referencedElement) {\r\n            this.setExportAndCheckLibrary(\r\n              externalName,\r\n              referencedElement,\r\n              member.externalName\r\n            );\r\n            return;\r\n          }\r\n          referencedName = queuedExport.referencedName;\r\n          if (seen.has(queuedExport)) break;\r\n          seen.add(queuedExport);\r\n        } else {\r\n          referencedElement = this.elementsLookup.get(queuedExport.referencedName);\r\n          if (referencedElement) {\r\n            this.setExportAndCheckLibrary(\r\n              externalName,\r\n              referencedElement,\r\n              member.externalName\r\n            );\r\n            return;\r\n          }\r\n          break;\r\n        }\r\n      }\r\n\r\n      // otherwise queue it\r\n      if (queuedExports.has(externalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          member.externalName.range, externalName\r\n        );\r\n        return;\r\n      }\r\n      queuedExport = new QueuedExport();\r\n      queuedExport.isReExport = true;\r\n      queuedExport.referencedName = referencedName; // -> export name\r\n      queuedExport.member = member;\r\n      queuedExports.set(externalName, queuedExport);\r\n    }\r\n  }\r\n\r\n  private initializeFunction(\r\n    declaration: FunctionDeclaration,\r\n    namespace: Element | null = null\r\n  ): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (this.elementsLookup.has(internalName)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, internalName\r\n      );\r\n      return;\r\n    }\r\n    var simpleName = declaration.name.text;\r\n    var decorators = declaration.decorators;\r\n    var prototype = new FunctionPrototype(\r\n      this,\r\n      simpleName,\r\n      internalName,\r\n      declaration,\r\n      null,\r\n      decorators\r\n        ? this.filterDecorators(decorators,\r\n            DecoratorFlags.GLOBAL |\r\n            DecoratorFlags.INLINE\r\n          )\r\n        : DecoratorFlags.NONE\r\n    );\r\n    prototype.parent = namespace;\r\n    this.elementsLookup.set(internalName, prototype);\r\n\r\n    if (namespace) {\r\n      if (namespace.members) {\r\n        if (namespace.members.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        namespace.members = new Map();\r\n      }\r\n      namespace.members.set(simpleName, prototype);\r\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\r\n        prototype.parent = namespace;\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    } else if (prototype.is(CommonFlags.EXPORT)) { // no namespace\r\n      if (this.fileLevelExports.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n      this.fileLevelExports.set(internalName, prototype);\r\n      if (declaration.range.source.isEntry) {\r\n        if (this.moduleLevelExports.has(internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n        this.moduleLevelExports.set(internalName, prototype);\r\n      }\r\n    }\r\n\r\n    this.checkGlobalOptions(prototype, declaration);\r\n  }\r\n\r\n  private initializeImports(\r\n    statement: ImportStatement,\r\n    queuedExports: Map<string,QueuedExport>,\r\n    queuedImports: QueuedImport[]\r\n  ): void {\r\n    var declarations = statement.declarations;\r\n    if (declarations) {\r\n      for (let i = 0, k = declarations.length; i < k; ++i) {\r\n        this.initializeImport(\r\n          declarations[i],\r\n          statement.internalPath,\r\n          queuedExports, queuedImports\r\n        );\r\n      }\r\n    } else if (statement.namespaceName) { // import * as simpleName from \"file\"\r\n      let simpleName = statement.namespaceName.text;\r\n      let internalName = (\r\n        statement.range.source.internalPath +\r\n        PATH_DELIMITER +\r\n        simpleName\r\n      );\r\n      if (this.elementsLookup.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          statement.namespaceName.range,\r\n          internalName\r\n        );\r\n        return;\r\n      }\r\n      this.error( // TODO\r\n        DiagnosticCode.Operation_not_supported,\r\n        statement.range\r\n      );\r\n    }\r\n  }\r\n\r\n  private initializeImport(\r\n    declaration: ImportDeclaration,\r\n    internalPath: string,\r\n    queuedExports: Map<string,QueuedExport>,\r\n    queuedImports: QueuedImport[]\r\n  ): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (this.elementsLookup.has(internalName)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, internalName\r\n      );\r\n      return;\r\n    }\r\n\r\n    var referencedName = internalPath + PATH_DELIMITER + declaration.externalName.text;\r\n\r\n    // resolve right away if the exact export exists\r\n    var element: Element | null;\r\n    if (element = this.fileLevelExports.get(referencedName)) {\r\n      this.elementsLookup.set(internalName, element);\r\n      return;\r\n    }\r\n\r\n    // otherwise queue it\r\n    const indexPart = PATH_DELIMITER + \"index\";\r\n    var queuedImport = new QueuedImport();\r\n    queuedImport.internalName = internalName;\r\n    if (internalPath.endsWith(indexPart)) {\r\n      queuedImport.referencedName = referencedName; // try exact first\r\n      queuedImport.referencedNameAlt = (\r\n        internalPath.substring(0, internalPath.length - indexPart.length + 1) +\r\n        declaration.externalName.text\r\n      );\r\n    } else {\r\n      queuedImport.referencedName = referencedName; // try exact first\r\n      queuedImport.referencedNameAlt = (\r\n        internalPath +\r\n        indexPart +\r\n        PATH_DELIMITER +\r\n        declaration.externalName.text\r\n      );\r\n    }\r\n    queuedImport.declaration = declaration;\r\n    queuedImports.push(queuedImport);\r\n  }\r\n\r\n  private initializeInterface(declaration: InterfaceDeclaration, namespace: Element | null = null): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (this.elementsLookup.has(internalName)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, internalName\r\n      );\r\n      return;\r\n    }\r\n\r\n    var decorators = declaration.decorators;\r\n    var prototype = new InterfacePrototype(\r\n      this,\r\n      declaration.name.text,\r\n      internalName,\r\n      declaration,\r\n      decorators\r\n        ? this.filterDecorators(decorators, DecoratorFlags.GLOBAL)\r\n        : DecoratorFlags.NONE\r\n    );\r\n    prototype.parent = namespace;\r\n    this.elementsLookup.set(internalName, prototype);\r\n\r\n    if (namespace) {\r\n      if (namespace.members) {\r\n        if (namespace.members.has(prototype.internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        namespace.members = new Map();\r\n      }\r\n      namespace.members.set(prototype.internalName, prototype);\r\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    } else if (prototype.is(CommonFlags.EXPORT)) { // no namespace\r\n      if (this.fileLevelExports.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n      this.fileLevelExports.set(internalName, prototype);\r\n      if (declaration.range.source.isEntry) {\r\n        if (this.moduleLevelExports.has(internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n        this.moduleLevelExports.set(internalName, prototype);\r\n      }\r\n    }\r\n\r\n    var memberDeclarations = declaration.members;\r\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\r\n      let memberDeclaration = memberDeclarations[i];\r\n      switch (memberDeclaration.kind) {\r\n\r\n        case NodeKind.FIELDDECLARATION: {\r\n          this.initializeField(<FieldDeclaration>memberDeclaration, prototype);\r\n          break;\r\n        }\r\n        case NodeKind.METHODDECLARATION: {\r\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\r\n            this.initializeAccessor(<MethodDeclaration>memberDeclaration, prototype);\r\n          } else {\r\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, prototype);\r\n          }\r\n          break;\r\n        }\r\n        default: {\r\n          throw new Error(\"interface member expected\");\r\n        }\r\n      }\r\n    }\r\n\r\n    this.checkGlobalOptions(prototype, declaration);\r\n  }\r\n\r\n  private initializeNamespace(\r\n    declaration: NamespaceDeclaration,\r\n    queuedExtends: ClassPrototype[],\r\n    queuedImplements: ClassPrototype[],\r\n    parentNamespace: Element | null = null\r\n  ): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    var simpleName = declaration.name.text;\r\n    var namespace = this.elementsLookup.get(internalName);\r\n    if (!namespace) {\r\n      namespace = new Namespace(this, simpleName, internalName, declaration);\r\n      namespace.parent = parentNamespace;\r\n      this.elementsLookup.set(internalName, namespace);\r\n      this.checkGlobalOptions(namespace, declaration);\r\n    }\r\n\r\n    if (parentNamespace) {\r\n      if (parentNamespace.members) {\r\n        if (parentNamespace.members.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        parentNamespace.members = new Map();\r\n      }\r\n      parentNamespace.members.set(simpleName, namespace);\r\n      if (parentNamespace.is(CommonFlags.MODULE_EXPORT) && namespace.is(CommonFlags.EXPORT)) {\r\n        namespace.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    } else if (namespace.is(CommonFlags.EXPORT)) { // no parent namespace\r\n      let existingExport = this.fileLevelExports.get(internalName);\r\n      if (existingExport) {\r\n        if (!existingExport.is(CommonFlags.EXPORT)) {\r\n          this.error(\r\n            DiagnosticCode.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local,\r\n            declaration.name.range, namespace.internalName\r\n          ); // recoverable\r\n        }\r\n        namespace = existingExport; // join\r\n      } else {\r\n        this.fileLevelExports.set(internalName, namespace);\r\n      }\r\n      if (declaration.range.source.isEntry) {\r\n        if (this.moduleLevelExports.has(internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n        namespace.set(CommonFlags.MODULE_EXPORT);\r\n        this.moduleLevelExports.set(internalName, namespace);\r\n      }\r\n    }\r\n\r\n    var members = declaration.members;\r\n    for (let i = 0, k = members.length; i < k; ++i) {\r\n      switch (members[i].kind) {\r\n        case NodeKind.CLASSDECLARATION: {\r\n          this.initializeClass(<ClassDeclaration>members[i], queuedExtends, queuedImplements, namespace);\r\n          break;\r\n        }\r\n        case NodeKind.ENUMDECLARATION: {\r\n          this.initializeEnum(<EnumDeclaration>members[i], namespace);\r\n          break;\r\n        }\r\n        case NodeKind.FUNCTIONDECLARATION: {\r\n          this.initializeFunction(<FunctionDeclaration>members[i], namespace);\r\n          break;\r\n        }\r\n        case NodeKind.INTERFACEDECLARATION: {\r\n          this.initializeInterface(<InterfaceDeclaration>members[i], namespace);\r\n          break;\r\n        }\r\n        case NodeKind.NAMESPACEDECLARATION: {\r\n          this.initializeNamespace(<NamespaceDeclaration>members[i], queuedExtends, queuedImplements, namespace);\r\n          break;\r\n        }\r\n        case NodeKind.TYPEDECLARATION: {\r\n          // this.initializeTypeAlias(<TypeDeclaration>members[i], namespace);\r\n          // TODO: what about namespaced types?\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            members[i].range\r\n          );\r\n          break;\r\n        }\r\n        case NodeKind.VARIABLE: {\r\n          this.initializeVariables(<VariableStatement>members[i], namespace);\r\n          break;\r\n        }\r\n        default: {\r\n          throw new Error(\"namespace member expected\");\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeTypeAlias(declaration: TypeDeclaration, namespace: Element | null = null): void {\r\n    // type aliases are program globals\r\n    // TODO: what about namespaced types?\r\n    var name = declaration.name.text;\r\n    if (this.typesLookup.has(name) || this.typeAliases.has(name)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, name\r\n      );\r\n      return;\r\n    }\r\n    var alias = new TypeAlias();\r\n    alias.typeParameters = declaration.typeParameters;\r\n    alias.type = declaration.type;\r\n    this.typeAliases.set(name, alias);\r\n  }\r\n\r\n  private initializeVariables(statement: VariableStatement, namespace: Element | null = null): void {\r\n    var declarations = statement.declarations;\r\n    for (let i = 0, k = declarations.length; i < k; ++i) {\r\n      let declaration = declarations[i];\r\n      let decorators = declaration.decorators;\r\n      let internalName = declaration.fileLevelInternalName;\r\n      if (this.elementsLookup.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        continue;\r\n      }\r\n      let simpleName = declaration.name.text;\r\n      let global = new Global(\r\n        this,\r\n        simpleName,\r\n        internalName,\r\n        Type.void, // resolved later on\r\n        declaration,\r\n        decorators\r\n          ? this.filterDecorators(decorators,\r\n              DecoratorFlags.GLOBAL\r\n            )\r\n          : DecoratorFlags.NONE\r\n      );\r\n      global.parent = namespace;\r\n      this.elementsLookup.set(internalName, global);\r\n\r\n      if (namespace) {\r\n        if (namespace.members) {\r\n          if (namespace.members.has(simpleName)) {\r\n            this.error(\r\n              DiagnosticCode.Duplicate_identifier_0,\r\n              declaration.name.range, internalName\r\n            );\r\n            continue;\r\n          }\r\n        } else {\r\n          namespace.members = new Map();\r\n        }\r\n        namespace.members.set(simpleName, global);\r\n        if (namespace.is(CommonFlags.MODULE_EXPORT) && global.is(CommonFlags.EXPORT)) {\r\n          global.set(CommonFlags.MODULE_EXPORT);\r\n        }\r\n      } else if (global.is(CommonFlags.EXPORT)) { // no namespace\r\n        if (this.fileLevelExports.has(internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n        } else {\r\n          this.fileLevelExports.set(internalName, global);\r\n        }\r\n        if (declaration.range.source.isEntry) {\r\n          if (this.moduleLevelExports.has(internalName)) {\r\n            this.error(\r\n              DiagnosticCode.Duplicate_identifier_0,\r\n              declaration.name.range, internalName\r\n            );\r\n            continue;\r\n          }\r\n          global.set(CommonFlags.MODULE_EXPORT);\r\n          this.moduleLevelExports.set(internalName, global);\r\n        }\r\n      }\r\n      this.checkGlobalOptions(global, declaration);\r\n    }\r\n  }\r\n\r\n  /** Resolves a {@link SignatureNode} to a concrete {@link Signature}. */\r\n  resolveSignature(\r\n    node: SignatureNode,\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    reportNotFound: bool = true\r\n  ): Signature | null {\r\n    var explicitThisType = node.explicitThisType;\r\n    var thisType: Type | null = null;\r\n    if (explicitThisType) {\r\n      thisType = this.resolveType(\r\n        explicitThisType,\r\n        contextualTypeArguments,\r\n        reportNotFound\r\n      );\r\n      if (!thisType) return null;\r\n    }\r\n    var parameterTypeNodes = node.parameters;\r\n    var numParameters = parameterTypeNodes.length;\r\n    var parameterTypes = new Array<Type>(numParameters);\r\n    var parameterNames = new Array<string>(numParameters);\r\n    var requiredParameters = 0;\r\n    var hasRest = false;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      let parameterTypeNode = parameterTypeNodes[i];\r\n      switch (parameterTypeNode.parameterKind) {\r\n        case ParameterKind.DEFAULT: {\r\n          requiredParameters = i + 1;\r\n          break;\r\n        }\r\n        case ParameterKind.REST: {\r\n          assert(i == numParameters);\r\n          hasRest = true;\r\n          break;\r\n        }\r\n      }\r\n      let parameterType = this.resolveType(\r\n        assert(parameterTypeNode.type),\r\n        contextualTypeArguments,\r\n        reportNotFound\r\n      );\r\n      if (!parameterType) return null;\r\n      parameterTypes[i] = parameterType;\r\n      parameterNames[i] = parameterTypeNode.name.text;\r\n    }\r\n    var returnTypeNode = node.returnType;\r\n    var returnType: Type | null;\r\n    if (returnTypeNode) {\r\n      returnType = this.resolveType(\r\n        returnTypeNode,\r\n        contextualTypeArguments,\r\n        reportNotFound\r\n      );\r\n      if (!returnType) return null;\r\n    } else {\r\n      returnType = Type.void;\r\n    }\r\n    var signature = new Signature(parameterTypes, returnType, thisType);\r\n    signature.parameterNames = parameterNames;\r\n    signature.requiredParameters = requiredParameters;\r\n    signature.hasRest = hasRest;\r\n    return signature;\r\n  }\r\n\r\n  /** Resolves a {@link CommonTypeNode} to a concrete {@link Type}. */\r\n  resolveType(\r\n    node: CommonTypeNode,\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    reportNotFound: bool = true\r\n  ): Type | null {\r\n    if (node.kind == NodeKind.SIGNATURE) {\r\n      let signature = this.resolveSignature(<SignatureNode>node, contextualTypeArguments, reportNotFound);\r\n      if (!signature) return null;\r\n      return Type.u32.asFunction(signature);\r\n    }\r\n    var typeNode = <TypeNode>node;\r\n    var simpleName = typeNode.name.text;\r\n    var globalName = simpleName;\r\n    var localName = typeNode.range.source.internalPath + PATH_DELIMITER + simpleName;\r\n\r\n    var element: Element | null;\r\n    if (\r\n      (element = this.elementsLookup.get(localName)) || // file-global\r\n      (element = this.elementsLookup.get(globalName))   // program-global\r\n    ) {\r\n      switch (element.kind) {\r\n        case ElementKind.ENUM: return Type.i32;\r\n        case ElementKind.CLASS_PROTOTYPE: {\r\n          let instance = (<ClassPrototype>element).resolveUsingTypeArguments(\r\n            typeNode.typeArguments,\r\n            contextualTypeArguments,\r\n            null\r\n          ); // reports\r\n          return instance ? instance.type : null;\r\n        }\r\n      }\r\n    }\r\n\r\n    // check (global) type alias\r\n    var alias = this.typeAliases.get(simpleName);\r\n    if (alias) return this.resolveType(alias.type, contextualTypeArguments, reportNotFound);\r\n\r\n    // resolve parameters\r\n    if (typeNode.typeArguments) {\r\n      let k = typeNode.typeArguments.length;\r\n      let paramTypes = new Array<Type>(k);\r\n      for (let i = 0; i < k; ++i) {\r\n        let paramType = this.resolveType( // reports\r\n          typeNode.typeArguments[i],\r\n          contextualTypeArguments,\r\n          reportNotFound\r\n        );\r\n        if (!paramType) return null;\r\n        paramTypes[i] = paramType;\r\n      }\r\n\r\n      if (k) { // can't be a placeholder if it has parameters\r\n        let instanceKey = typesToString(paramTypes);\r\n        if (instanceKey.length) {\r\n          localName += \"<\" + instanceKey + \">\";\r\n          globalName += \"<\" + instanceKey + \">\";\r\n        }\r\n      } else if (contextualTypeArguments) {\r\n        let placeholderType = contextualTypeArguments.get(globalName);\r\n        if (placeholderType) return placeholderType;\r\n      }\r\n    }\r\n\r\n    var type: Type | null;\r\n\r\n    // check file-global / program-global type\r\n    if ((type = this.typesLookup.get(localName)) || (type = this.typesLookup.get(globalName))) {\r\n      return type;\r\n    }\r\n\r\n    if (reportNotFound) {\r\n      this.error(\r\n        DiagnosticCode.Cannot_find_name_0,\r\n        typeNode.name.range, globalName\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves an array of type arguments to concrete types. */\r\n  resolveTypeArguments(\r\n    typeParameters: TypeParameterNode[],\r\n    typeArgumentNodes: CommonTypeNode[] | null,\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    alternativeReportNode: Node | null = null\r\n  ): Type[] | null {\r\n    var parameterCount = typeParameters.length;\r\n    var argumentCount = typeArgumentNodes ? typeArgumentNodes.length : 0;\r\n    if (parameterCount != argumentCount) {\r\n      if (argumentCount) {\r\n        this.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          Range.join(\r\n            (<TypeNode[]>typeArgumentNodes)[0].range,\r\n            (<TypeNode[]>typeArgumentNodes)[argumentCount - 1].range\r\n          ),\r\n          parameterCount.toString(10), argumentCount.toString(10)\r\n        );\r\n      } else if (alternativeReportNode) {\r\n        this.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          alternativeReportNode.range.atEnd, parameterCount.toString(10), \"0\"\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n    var typeArguments = new Array<Type>(parameterCount);\r\n    for (let i = 0; i < parameterCount; ++i) {\r\n      let type = this.resolveType( // reports\r\n        (<TypeNode[]>typeArgumentNodes)[i],\r\n        contextualTypeArguments,\r\n        true\r\n      );\r\n      if (!type) return null;\r\n      // TODO: check extendsType\r\n      typeArguments[i] = type;\r\n    }\r\n    return typeArguments;\r\n  }\r\n\r\n  /** Resolves an identifier to the element it refers to. */\r\n  resolveIdentifier(\r\n    identifier: IdentifierExpression,\r\n    contextualFunction: Function | null,\r\n    contextualEnum: Enum | null = null\r\n  ): Element | null {\r\n    var name = identifier.text;\r\n\r\n    var element: Element | null;\r\n    var namespace: Element | null;\r\n\r\n    // check siblings\r\n    if (contextualEnum) {\r\n\r\n      if (\r\n        contextualEnum.members &&\r\n        (element = contextualEnum.members.get(name)) &&\r\n        element.kind == ElementKind.ENUMVALUE\r\n      ) {\r\n        this.resolvedThisExpression = null;\r\n        this.resolvedElementExpression = null;\r\n        return element; // ENUMVALUE\r\n      }\r\n\r\n    } else if (contextualFunction) {\r\n\r\n      // check locals\r\n      if (element = contextualFunction.flow.getScopedLocal(name)) {\r\n        this.resolvedThisExpression = null;\r\n        this.resolvedElementExpression = null;\r\n        return element; // LOCAL\r\n      }\r\n\r\n      // check outer scope locals\r\n      // let outerScope = contextualFunction.outerScope;\r\n      // while (outerScope) {\r\n      //   if (element = outerScope.getScopedLocal(name)) {\r\n      //     let scopedLocal = <Local>element;\r\n      //     let scopedGlobal = scopedLocal.scopedGlobal;\r\n      //     if (!scopedGlobal) scopedGlobal = outerScope.addScopedGlobal(scopedLocal);\r\n      //     if (!resolvedElement) resolvedElement = new ResolvedElement();\r\n      //     return resolvedElement.set(scopedGlobal);\r\n      //   }\r\n      //   outerScope = outerScope.currentFunction.outerScope;\r\n      // }\r\n\r\n      // search contextual parent namespaces if applicable\r\n      if (namespace = contextualFunction.prototype.parent) {\r\n        do {\r\n          if (element = this.elementsLookup.get(namespace.internalName + STATIC_DELIMITER + name)) {\r\n            this.resolvedThisExpression = null;\r\n            this.resolvedElementExpression = null;\r\n            return element; // LOCAL\r\n          }\r\n        } while (namespace = namespace.parent);\r\n      }\r\n    }\r\n\r\n    // search current file\r\n    if (element = this.elementsLookup.get(identifier.range.source.internalPath + PATH_DELIMITER + name)) {\r\n      this.resolvedThisExpression = null;\r\n      this.resolvedElementExpression = null;\r\n      return element; // GLOBAL, FUNCTION_PROTOTYPE, CLASS_PROTOTYPE\r\n    }\r\n\r\n    // search global scope\r\n    if (element = this.elementsLookup.get(name)) {\r\n      this.resolvedThisExpression = null;\r\n      this.resolvedElementExpression = null;\r\n      return element; // GLOBAL, FUNCTION_PROTOTYPE, CLASS_PROTOTYPE\r\n    }\r\n\r\n    this.error(\r\n      DiagnosticCode.Cannot_find_name_0,\r\n      identifier.range, name\r\n    );\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a property access to the element it refers to. */\r\n  resolvePropertyAccess(\r\n    propertyAccess: PropertyAccessExpression,\r\n    contextualFunction: Function\r\n  ): Element | null {\r\n    // start by resolving the lhs target (expression before the last dot)\r\n    var targetExpression = propertyAccess.expression;\r\n    var target = this.resolveExpression(targetExpression, contextualFunction); // reports\r\n    if (!target) return null;\r\n\r\n    // at this point we know exactly what the target is, so look up the element within\r\n    var propertyName = propertyAccess.property.text;\r\n\r\n    // Resolve variable-likes to the class type they reference first\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL:\r\n      case ElementKind.LOCAL:\r\n      case ElementKind.FIELD: {\r\n        let classReference = (<VariableLikeElement>target).type.classReference;\r\n        if (!classReference) {\r\n          this.error(\r\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n            propertyAccess.property.range, propertyName, (<VariableLikeElement>target).type.toString()\r\n          );\r\n          return null;\r\n        }\r\n        target = classReference;\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: {\r\n        let getter = assert((<Property>target).getterPrototype).resolve(); // reports\r\n        if (!getter) return null;\r\n        let classReference = getter.signature.returnType.classReference;\r\n        if (!classReference) {\r\n          this.error(\r\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n            propertyAccess.property.range, propertyName, getter.signature.returnType.toString()\r\n          );\r\n          return null;\r\n        }\r\n        target = classReference;\r\n        break;\r\n      }\r\n      case ElementKind.CLASS: {\r\n        let elementExpression = this.resolvedElementExpression;\r\n        if (elementExpression) {\r\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\r\n          if (!indexedGet) {\r\n            this.error(\r\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n              elementExpression.range, (<Class>target).internalName\r\n            );\r\n            return null;\r\n          }\r\n          let returnType = indexedGet.signature.returnType;\r\n          if (!(target = returnType.classReference)) {\r\n            this.error(\r\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n              propertyAccess.property.range, propertyName, returnType.toString()\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n    }\r\n\r\n    // Look up the member within\r\n    switch (target.kind) {\r\n      case ElementKind.CLASS_PROTOTYPE:\r\n      case ElementKind.CLASS: {\r\n        do {\r\n          let members = target.members;\r\n          let member: Element | null;\r\n          if (members && (member = members.get(propertyName))) {\r\n            this.resolvedThisExpression = targetExpression;\r\n            this.resolvedElementExpression = null;\r\n            return member; // instance FIELD, static GLOBAL, FUNCTION_PROTOTYPE...\r\n          }\r\n          // traverse inherited static members on the base prototype if target is a class prototype\r\n          if (target.kind == ElementKind.CLASS_PROTOTYPE) {\r\n            if ((<ClassPrototype>target).basePrototype) {\r\n              target = <ClassPrototype>(<ClassPrototype>target).basePrototype;\r\n            } else {\r\n              break;\r\n            }\r\n          // traverse inherited instance members on the base class if target is a class instance\r\n          } else if (target.kind == ElementKind.CLASS) {\r\n            if ((<Class>target).base) {\r\n              target = <Class>(<Class>target).base;\r\n            } else {\r\n              break;\r\n            }\r\n          } else {\r\n            break;\r\n          }\r\n        } while (true);\r\n        break;\r\n      }\r\n      default: { // enums or other namespace-like elements\r\n        let members = target.members;\r\n        let member: Element | null;\r\n        if (members && (member = members.get(propertyName))) {\r\n          this.resolvedThisExpression = targetExpression;\r\n          this.resolvedElementExpression = null;\r\n          return member; // static ENUMVALUE, static GLOBAL, static FUNCTION_PROTOTYPE...\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n      propertyAccess.property.range, propertyName, target.internalName\r\n    );\r\n    return null;\r\n  }\r\n\r\n  resolveElementAccess(\r\n    elementAccess: ElementAccessExpression,\r\n    contextualFunction: Function\r\n  ): Element | null {\r\n    var targetExpression = elementAccess.expression;\r\n    var target = this.resolveExpression(targetExpression, contextualFunction);\r\n    if (!target) return null;\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL:\r\n      case ElementKind.LOCAL:\r\n      case ElementKind.FIELD: {\r\n        let type = (<VariableLikeElement>target).type;\r\n        if (target = type.classReference) {\r\n          this.resolvedThisExpression = targetExpression;\r\n          this.resolvedElementExpression = elementAccess.elementExpression;\r\n          return target;\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.CLASS: { // element access on element access\r\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\r\n        if (!indexedGet) {\r\n          this.error(\r\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n            elementAccess.range, (<Class>target).internalName\r\n          );\r\n          return null;\r\n        }\r\n        let returnType = indexedGet.signature.returnType;\r\n        if (target = returnType.classReference) {\r\n          this.resolvedThisExpression = targetExpression;\r\n          this.resolvedElementExpression = elementAccess.elementExpression;\r\n          return target;\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      targetExpression.range\r\n    );\r\n    return null;\r\n  }\r\n\r\n  resolveExpression(\r\n    expression: Expression,\r\n    contextualFunction: Function\r\n  ): Element | null {\r\n    while (expression.kind == NodeKind.PARENTHESIZED) {\r\n      expression = (<ParenthesizedExpression>expression).expression;\r\n    }\r\n    switch (expression.kind) {\r\n      case NodeKind.ASSERTION: {\r\n        let type = this.resolveType((<AssertionExpression>expression).toType); // reports\r\n        if (type) {\r\n          let classType = type.classReference;\r\n          if (classType) {\r\n            this.resolvedThisExpression = null;\r\n            this.resolvedElementExpression = null;\r\n            return classType;\r\n          }\r\n        }\r\n        return null;\r\n      }\r\n      case NodeKind.BINARY: { // TODO: string concatenation, mostly\r\n        throw new Error(\"not implemented\");\r\n      }\r\n      case NodeKind.THIS: { // -> Class / ClassPrototype\r\n        if (contextualFunction.flow.is(FlowFlags.INLINE_CONTEXT)) {\r\n          let explicitLocal = contextualFunction.flow.getScopedLocal(\"this\");\r\n          if (explicitLocal) {\r\n            this.resolvedThisExpression = null;\r\n            this.resolvedElementExpression = null;\r\n            return explicitLocal;\r\n          }\r\n        }\r\n        let parent = contextualFunction.parent;\r\n        if (parent) {\r\n          this.resolvedThisExpression = null;\r\n          this.resolvedElementExpression = null;\r\n          return parent;\r\n        }\r\n        this.error(\r\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\r\n          expression.range\r\n        );\r\n        return null;\r\n      }\r\n      case NodeKind.SUPER: { // -> Class\r\n        if (contextualFunction.flow.is(FlowFlags.INLINE_CONTEXT)) {\r\n          let explicitLocal = contextualFunction.flow.getScopedLocal(\"super\");\r\n          if (explicitLocal) {\r\n            this.resolvedThisExpression = null;\r\n            this.resolvedElementExpression = null;\r\n            return explicitLocal;\r\n          }\r\n        }\r\n        let parent = contextualFunction.parent;\r\n        if (parent && parent.kind == ElementKind.CLASS && (parent = (<Class>parent).base)) {\r\n          this.resolvedThisExpression = null;\r\n          this.resolvedElementExpression = null;\r\n          return parent;\r\n        }\r\n        this.error(\r\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\r\n          expression.range\r\n        );\r\n        return null;\r\n      }\r\n      case NodeKind.IDENTIFIER: {\r\n        return this.resolveIdentifier(<IdentifierExpression>expression, contextualFunction);\r\n      }\r\n      case NodeKind.LITERAL: {\r\n        switch ((<LiteralExpression>expression).literalKind) {\r\n          case LiteralKind.STRING: {\r\n            this.resolvedThisExpression = expression;\r\n            this.resolvedElementExpression = null;\r\n            return this.stringInstance;\r\n          }\r\n          // case LiteralKind.ARRAY: // TODO\r\n        }\r\n        break;\r\n      }\r\n      case NodeKind.PROPERTYACCESS: {\r\n        return this.resolvePropertyAccess(\r\n          <PropertyAccessExpression>expression,\r\n          contextualFunction\r\n        );\r\n      }\r\n      case NodeKind.ELEMENTACCESS: {\r\n        return this.resolveElementAccess(\r\n          <ElementAccessExpression>expression,\r\n          contextualFunction\r\n        );\r\n      }\r\n      case NodeKind.CALL: {\r\n        let targetExpression = (<CallExpression>expression).expression;\r\n        let target = this.resolveExpression(targetExpression, contextualFunction); // reports\r\n        if (!target) return null;\r\n        if (target.kind == ElementKind.FUNCTION_PROTOTYPE) {\r\n          let instance = (<FunctionPrototype>target).resolveUsingTypeArguments( // reports\r\n            (<CallExpression>expression).typeArguments,\r\n            contextualFunction.flow.contextualTypeArguments,\r\n            expression\r\n          );\r\n          if (!instance) return null;\r\n          let returnType = instance.signature.returnType;\r\n          let classType = returnType.classReference;\r\n          if (classType) {\r\n            // reuse resolvedThisExpression (might be property access)\r\n            // reuse resolvedElementExpression (might be element access)\r\n            return classType;\r\n          } else {\r\n            let signature = returnType.signatureReference;\r\n            if (signature) {\r\n              let functionTarget = signature.cachedFunctionTarget;\r\n              if (!functionTarget) {\r\n                functionTarget = new FunctionTarget(this, signature);\r\n                signature.cachedFunctionTarget = functionTarget;\r\n              }\r\n              // reuse resolvedThisExpression (might be property access)\r\n              // reuse resolvedElementExpression (might be element access)\r\n              return functionTarget;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            targetExpression.range, target.internalName\r\n          );\r\n          return null;\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    return null;\r\n  }\r\n}\r\n\r\n/** Indicates the specific kind of an {@link Element}. */\r\nexport enum ElementKind {\r\n  /** A {@link Global}. */\r\n  GLOBAL,\r\n  /** A {@link Local}. */\r\n  LOCAL,\r\n  /** An {@link Enum}. */\r\n  ENUM,\r\n  /** An {@link EnumValue}. */\r\n  ENUMVALUE,\r\n  /** A {@link FunctionPrototype}. */\r\n  FUNCTION_PROTOTYPE,\r\n  /** A {@link Function}. */\r\n  FUNCTION,\r\n  /** A {@link FunctionTarget}. */\r\n  FUNCTION_TARGET,\r\n  /** A {@link ClassPrototype}. */\r\n  CLASS_PROTOTYPE,\r\n  /** A {@link Class}. */\r\n  CLASS,\r\n  /** An {@link InterfacePrototype}. */\r\n  INTERFACE_PROTOTYPE,\r\n  /** An {@link Interface}. */\r\n  INTERFACE,\r\n  /** A {@link FieldPrototype}. */\r\n  FIELD_PROTOTYPE,\r\n  /** A {@link Field}. */\r\n  FIELD,\r\n  /** A {@link Property}. */\r\n  PROPERTY,\r\n  /** A {@link Namespace}. */\r\n  NAMESPACE\r\n}\r\n\r\n/** Indicates traits of a {@link Node} or {@link Element}. */\r\nexport enum CommonFlags {\r\n  /** No flags set. */\r\n  NONE = 0,\r\n\r\n  // Basic modifiers\r\n\r\n  /** Has an `import` modifier. */\r\n  IMPORT = 1 << 0,\r\n  /** Has an `export` modifier. */\r\n  EXPORT = 1 << 1,\r\n  /** Has a `declare` modifier. */\r\n  DECLARE = 1 << 2,\r\n  /** Has a `const` modifier. */\r\n  CONST = 1 << 3,\r\n  /** Has a `let` modifier. */\r\n  LET = 1 << 4,\r\n  /** Has a `static` modifier. */\r\n  STATIC = 1 << 5,\r\n  /** Has a `readonly` modifier. */\r\n  READONLY = 1 << 6,\r\n  /** Has an `abstract` modifier. */\r\n  ABSTRACT = 1 << 7,\r\n  /** Has a `public` modifier. */\r\n  PUBLIC = 1 << 8,\r\n  /** Has a `private` modifier. */\r\n  PRIVATE = 1 << 9,\r\n  /** Has a `protected` modifier. */\r\n  PROTECTED = 1 << 10,\r\n  /** Has a `get` modifier. */\r\n  GET = 1 << 11,\r\n  /** Has a `set` modifier. */\r\n  SET = 1 << 12,\r\n\r\n  // Extended modifiers usually derived from basic modifiers\r\n\r\n  /** Is ambient, that is either declared or nested in a declared element. */\r\n  AMBIENT = 1 << 13,\r\n  /** Is generic. */\r\n  GENERIC = 1 << 14,\r\n  /** Is part of a generic context. */\r\n  GENERIC_CONTEXT = 1 << 15,\r\n  /** Is an instance member. */\r\n  INSTANCE = 1 << 16,\r\n  /** Is a constructor. */\r\n  CONSTRUCTOR = 1 << 17,\r\n  /** Is an arrow function. */\r\n  ARROW = 1 << 18,\r\n  /** Is a module export. */\r\n  MODULE_EXPORT = 1 << 19,\r\n  /** Is a module import. */\r\n  MODULE_IMPORT = 1 << 20,\r\n\r\n  // Compilation states\r\n\r\n  /** Is a builtin. */\r\n  BUILTIN = 1 << 21,\r\n  /** Is compiled. */\r\n  COMPILED = 1 << 22,\r\n  /** Has a constant value and is therefore inlined. */\r\n  INLINED = 1 << 23,\r\n  /** Is scoped. */\r\n  SCOPED = 1 << 24,\r\n  /** Is a trampoline. */\r\n  TRAMPOLINE = 1 << 25,\r\n  /** Is a virtual method. */\r\n  VIRTUAL = 1 << 26\r\n}\r\n\r\nexport enum DecoratorFlags {\r\n  /** No flags set. */\r\n  NONE = 0,\r\n  /** Is a program global. */\r\n  GLOBAL = 1 << 0,\r\n  /** Is an operator overload. */\r\n  OPERATOR = 1 << 1,\r\n  /** Is an unmanaged class. */\r\n  UNMANAGED = 1 << 2,\r\n  /** Is a sealed class. */\r\n  SEALED = 1 << 3,\r\n  /** Is always inlined. */\r\n  INLINE = 1 << 4\r\n}\r\n\r\nexport function decoratorKindToFlag(kind: DecoratorKind): DecoratorFlags {\r\n  switch (kind) {\r\n    case DecoratorKind.GLOBAL: return DecoratorFlags.GLOBAL;\r\n    case DecoratorKind.OPERATOR: return DecoratorFlags.OPERATOR;\r\n    case DecoratorKind.UNMANAGED: return DecoratorFlags.UNMANAGED;\r\n    case DecoratorKind.SEALED: return DecoratorFlags.SEALED;\r\n    case DecoratorKind.INLINE: return DecoratorFlags.INLINE;\r\n    default: return DecoratorFlags.NONE;\r\n  }\r\n}\r\n\r\n/** Base class of all program elements. */\r\nexport abstract class Element {\r\n\r\n  /** Specific element kind. */\r\n  kind: ElementKind;\r\n  /** Containing {@link Program}. */\r\n  program: Program;\r\n  /** Simple name. */\r\n  simpleName: string;\r\n  /** Internal name referring to this element. */\r\n  internalName: string;\r\n  /** Common flags indicating specific traits. */\r\n  flags: CommonFlags = CommonFlags.NONE;\r\n  /** Decorator flags indicating annotated traits. */\r\n  decoratorFlags: DecoratorFlags = DecoratorFlags.NONE;\r\n  /** Namespaced member elements. */\r\n  members: Map<string,Element> | null = null;\r\n  /** Parent element, if applicable. */\r\n  parent: Element | null = null;\r\n\r\n  /** Constructs a new element, linking it to its containing {@link Program}. */\r\n  protected constructor(program: Program, simpleName: string, internalName: string) {\r\n    this.program = program;\r\n    this.simpleName = simpleName;\r\n    this.internalName = internalName;\r\n  }\r\n\r\n  /** Tests if this element has a specific flag or flags. */\r\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Tests if this element has any of the specified flags. */\r\n  isAny(flags: CommonFlags): bool { return (this.flags & flags) != 0; }\r\n  /** Sets a specific flag or flags. */\r\n  set(flag: CommonFlags): void { this.flags |= flag; }\r\n  /** Tests if this element has a specific decorator flag or flags. */\r\n  hasDecorator(flag: DecoratorFlags): bool { return (this.decoratorFlags & flag) == flag; }\r\n}\r\n\r\n/** A namespace. */\r\nexport class Namespace extends Element {\r\n\r\n  // All elements have namespace semantics. This is an explicitly declared one.\r\n  kind = ElementKind.NAMESPACE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: NamespaceDeclaration; // more specific\r\n\r\n  /** Constructs a new namespace. */\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: NamespaceDeclaration\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n  }\r\n}\r\n\r\n/** An enum. */\r\nexport class Enum extends Element {\r\n\r\n  kind = ElementKind.ENUM;\r\n\r\n  /** Declaration reference. */\r\n  declaration: EnumDeclaration;\r\n\r\n  /** Constructs a new enum. */\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: EnumDeclaration\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n  }\r\n}\r\n\r\n/** An enum value. */\r\nexport class EnumValue extends Element {\r\n\r\n  kind = ElementKind.ENUMVALUE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: EnumValueDeclaration;\r\n  /** Constant value, if applicable. */\r\n  constantValue: i32 = 0;\r\n\r\n  constructor(\r\n    enm: Enum,\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: EnumValueDeclaration\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.parent = enm;\r\n    this.declaration = declaration;\r\n  }\r\n}\r\n\r\nexport const enum ConstantValueKind {\r\n  NONE,\r\n  INTEGER,\r\n  FLOAT\r\n}\r\n\r\nexport class VariableLikeElement extends Element {\r\n\r\n  // kind varies\r\n\r\n  /** Declaration reference. */\r\n  declaration: VariableLikeDeclarationStatement | null;\r\n  /** Variable type. Is {@link Type.void} for type-inferred {@link Global}s before compilation. */\r\n  type: Type;\r\n  /** Constant value kind. */\r\n  constantValueKind: ConstantValueKind = ConstantValueKind.NONE;\r\n  /** Constant integer value, if applicable. */\r\n  constantIntegerValue: I64;\r\n  /** Constant float value, if applicable. */\r\n  constantFloatValue: f64;\r\n\r\n  protected constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    type: Type,\r\n    declaration: VariableLikeDeclarationStatement | null\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.type = type;\r\n    this.declaration = declaration;\r\n  }\r\n\r\n  withConstantIntegerValue(lo: i32, hi: i32): this {\r\n    this.constantValueKind = ConstantValueKind.INTEGER;\r\n    this.constantIntegerValue = i64_new(lo, hi);\r\n    this.set(CommonFlags.CONST | CommonFlags.INLINED);\r\n    return this;\r\n  }\r\n\r\n  withConstantFloatValue(value: f64): this {\r\n    this.constantValueKind = ConstantValueKind.FLOAT;\r\n    this.constantFloatValue = value;\r\n    this.set(CommonFlags.CONST | CommonFlags.INLINED);\r\n    return this;\r\n  }\r\n}\r\n\r\n/** A global variable. */\r\nexport class Global extends VariableLikeElement {\r\n\r\n  kind = ElementKind.GLOBAL;\r\n\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    type: Type,\r\n    declaration: VariableLikeDeclarationStatement | null,\r\n    decoratorFlags: DecoratorFlags\r\n  ) {\r\n    super(program, simpleName, internalName, type, declaration);\r\n    this.flags = declaration ? declaration.flags : CommonFlags.NONE;\r\n    this.decoratorFlags = decoratorFlags;\r\n    this.type = type; // resolved later if `void`\r\n  }\r\n}\r\n\r\n/** A function parameter. */\r\nexport class Parameter {\r\n\r\n  // not an Element on its own\r\n\r\n  /** Parameter name. */\r\n  name: string;\r\n  /** Parameter type. */\r\n  type: Type;\r\n  /** Parameter initializer. */\r\n  initializer: Expression | null;\r\n\r\n  /** Constructs a new function parameter. */\r\n  constructor(name: string, type: Type, initializer: Expression | null = null) {\r\n    this.name = name;\r\n    this.type = type;\r\n    this.initializer = initializer;\r\n  }\r\n}\r\n\r\n/** A function local. */\r\nexport class Local extends VariableLikeElement {\r\n\r\n  kind = ElementKind.LOCAL;\r\n\r\n  /** Local index. */\r\n  index: i32;\r\n  /** Respective scoped global, if any. */\r\n  scopedGlobal: Global | null = null;\r\n\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    index: i32,\r\n    type: Type,\r\n    declaration: VariableLikeDeclarationStatement | null = null\r\n  ) {\r\n    super(program, simpleName, simpleName, type, declaration);\r\n    this.index = index;\r\n  }\r\n}\r\n\r\n/** A yet unresolved function prototype. */\r\nexport class FunctionPrototype extends Element {\r\n\r\n  kind = ElementKind.FUNCTION_PROTOTYPE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: FunctionDeclaration;\r\n  /** If an instance method, the class prototype reference. */\r\n  classPrototype: ClassPrototype | null;\r\n  /** Resolved instances. */\r\n  instances: Map<string,Function> = new Map();\r\n  /** Class type arguments, if a partially resolved method of a generic class. Not set otherwise. */\r\n  classTypeArguments: Type[] | null = null;\r\n  /** Operator kind, if an overload. */\r\n  operatorKind: OperatorKind = OperatorKind.INVALID;\r\n\r\n  /** Constructs a new function prototype. */\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: FunctionDeclaration,\r\n    classPrototype: ClassPrototype | null = null,\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n    this.classPrototype = classPrototype;\r\n    this.decoratorFlags = decoratorFlags;\r\n  }\r\n\r\n  /** Resolves this prototype to an instance using the specified concrete type arguments. */\r\n  resolve(\r\n    functionTypeArguments: Type[] | null = null,\r\n    contextualTypeArguments: Map<string,Type> | null = null\r\n  ): Function | null {\r\n    var instanceKey = functionTypeArguments ? typesToString(functionTypeArguments) : \"\";\r\n    var instance = this.instances.get(instanceKey);\r\n    if (instance) return instance;\r\n\r\n    var declaration = this.declaration;\r\n    var isInstance = this.is(CommonFlags.INSTANCE);\r\n    var classPrototype = this.classPrototype;\r\n\r\n    // inherit contextual type arguments as provided. might be overridden.\r\n    var inheritedTypeArguments = contextualTypeArguments;\r\n    contextualTypeArguments = new Map();\r\n    if (inheritedTypeArguments) {\r\n      for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\r\n        contextualTypeArguments.set(\r\n          inheritedName,\r\n          inheritedType\r\n        );\r\n      }\r\n    }\r\n\r\n    // override with class type arguments if a partially resolved instance method\r\n    var classTypeArguments = this.classTypeArguments;\r\n    if (classTypeArguments) { // set only if partially resolved\r\n      assert(this.is(CommonFlags.INSTANCE));\r\n      let classDeclaration = assert(classPrototype).declaration;\r\n      let classTypeParameters = classDeclaration.typeParameters;\r\n      let numClassTypeParameters = classTypeParameters.length;\r\n      assert(numClassTypeParameters == classTypeArguments.length);\r\n      for (let i = 0; i < numClassTypeParameters; ++i) {\r\n        contextualTypeArguments.set(\r\n          classTypeParameters[i].name.text,\r\n          classTypeArguments[i]\r\n        );\r\n      }\r\n    } else {\r\n      assert(!classTypeArguments);\r\n    }\r\n\r\n    // override with function specific type arguments\r\n    var signatureNode = declaration.signature;\r\n    var functionTypeParameters = declaration.typeParameters;\r\n    var numFunctionTypeArguments: i32;\r\n    if (functionTypeArguments && (numFunctionTypeArguments = functionTypeArguments.length)) {\r\n      assert(functionTypeParameters && numFunctionTypeArguments == functionTypeParameters.length);\r\n      for (let i = 0; i < numFunctionTypeArguments; ++i) {\r\n        contextualTypeArguments.set(\r\n          (<TypeParameterNode[]>functionTypeParameters)[i].name.text,\r\n          functionTypeArguments[i]\r\n        );\r\n      }\r\n    } else {\r\n      assert(!functionTypeParameters || functionTypeParameters.length == 0);\r\n    }\r\n\r\n    // resolve class if an instance method\r\n    var classInstance: Class | null = null;\r\n    var thisType: Type | null = null;\r\n    if (isInstance) {\r\n      classInstance = assert(classPrototype).resolve(classTypeArguments, contextualTypeArguments); // reports\r\n      if (!classInstance) return null;\r\n      thisType = classInstance.type;\r\n      contextualTypeArguments.set(\"this\", thisType);\r\n    }\r\n\r\n    // resolve signature node\r\n    var signatureParameters = signatureNode.parameters;\r\n    var signatureParameterCount = signatureParameters.length;\r\n    var parameterTypes = new Array<Type>(signatureParameterCount);\r\n    var parameterNames = new Array<string>(signatureParameterCount);\r\n    var requiredParameters = 0;\r\n    for (let i = 0; i < signatureParameterCount; ++i) {\r\n      let parameterDeclaration = signatureParameters[i];\r\n      if (parameterDeclaration.parameterKind == ParameterKind.DEFAULT) {\r\n        requiredParameters = i + 1;\r\n      }\r\n      let typeNode = assert(parameterDeclaration.type);\r\n      let parameterType = this.program.resolveType(typeNode, contextualTypeArguments, true); // reports\r\n      if (!parameterType) return null;\r\n      parameterTypes[i] = parameterType;\r\n      parameterNames[i] = parameterDeclaration.name.text;\r\n    }\r\n\r\n    var returnType: Type;\r\n    if (this.is(CommonFlags.SET)) {\r\n      returnType = Type.void; // not annotated\r\n    } else if (this.is(CommonFlags.CONSTRUCTOR)) {\r\n      returnType = assert(classInstance).type; // not annotated\r\n    } else {\r\n      let typeNode = assert(signatureNode.returnType);\r\n      let type = this.program.resolveType(typeNode, contextualTypeArguments, true); // reports\r\n      if (!type) return null;\r\n      returnType = type;\r\n    }\r\n\r\n    var signature = new Signature(parameterTypes, returnType, thisType);\r\n    signature.parameterNames = parameterNames;\r\n    signature.requiredParameters = requiredParameters;\r\n\r\n    var internalName = this.internalName;\r\n    if (instanceKey.length) internalName += \"<\" + instanceKey + \">\";\r\n    instance = new Function(\r\n      this,\r\n      internalName,\r\n      signature,\r\n      classInstance\r\n        ? classInstance\r\n        : classPrototype,\r\n      contextualTypeArguments\r\n    );\r\n    this.instances.set(instanceKey, instance);\r\n    this.program.instancesLookup.set(internalName, instance);\r\n    return instance;\r\n  }\r\n\r\n  /** Resolves this prototype partially by applying the specified inherited class type arguments. */\r\n  resolvePartial(classTypeArguments: Type[] | null): FunctionPrototype | null {\r\n    assert(this.is(CommonFlags.INSTANCE));\r\n    var classPrototype = assert(this.classPrototype);\r\n\r\n    if (!(classTypeArguments && classTypeArguments.length)) return this; // no need to clone\r\n\r\n    var simpleName = this.simpleName;\r\n    var partialKey = typesToString(classTypeArguments);\r\n    var partialPrototype = new FunctionPrototype(\r\n      this.program,\r\n      simpleName,\r\n      classPrototype.internalName + \"<\" + partialKey + \">\" + INSTANCE_DELIMITER + simpleName,\r\n      this.declaration,\r\n      classPrototype,\r\n      this.decoratorFlags\r\n    );\r\n    partialPrototype.flags = this.flags;\r\n    partialPrototype.operatorKind = this.operatorKind;\r\n    partialPrototype.classTypeArguments = classTypeArguments;\r\n    return partialPrototype;\r\n  }\r\n\r\n  /** Resolves the specified type arguments prior to resolving this prototype to an instance. */\r\n  resolveUsingTypeArguments(\r\n    typeArgumentNodes: CommonTypeNode[] | null,\r\n    contextualTypeArguments: Map<string,Type> | null,\r\n    reportNode: Node\r\n  ): Function | null {\r\n    var resolvedTypeArguments: Type[] | null = null;\r\n    if (this.is(CommonFlags.GENERIC)) {\r\n      assert(typeArgumentNodes != null && typeArgumentNodes.length != 0);\r\n      resolvedTypeArguments = this.program.resolveTypeArguments( // reports\r\n        assert(this.declaration.typeParameters),\r\n        typeArgumentNodes,\r\n        contextualTypeArguments,\r\n        reportNode\r\n      );\r\n      if (!resolvedTypeArguments) return null;\r\n    }\r\n    return this.resolve(resolvedTypeArguments, contextualTypeArguments);\r\n  }\r\n\r\n  /** Resolves the type arguments to use when compiling a built-in call. Must be a built-in. */\r\n  resolveBuiltinTypeArguments(\r\n    typeArgumentNodes: CommonTypeNode[] | null,\r\n    contextualTypeArguments: Map<string,Type> | null\r\n  ): Type[] | null {\r\n    assert(this.is(CommonFlags.BUILTIN));\r\n    var resolvedTypeArguments: Type[] | null = null;\r\n    if (typeArgumentNodes) {\r\n      let k = typeArgumentNodes.length;\r\n      resolvedTypeArguments = new Array<Type>(k);\r\n      for (let i = 0; i < k; ++i) {\r\n        let resolvedType = this.program.resolveType( // reports\r\n          typeArgumentNodes[i],\r\n          contextualTypeArguments,\r\n          true\r\n        );\r\n        if (!resolvedType) return null;\r\n        resolvedTypeArguments[i] = resolvedType;\r\n      }\r\n    }\r\n    return resolvedTypeArguments;\r\n  }\r\n\r\n  toString(): string { return this.simpleName; }\r\n}\r\n\r\n/** A resolved function. */\r\nexport class Function extends Element {\r\n\r\n  kind = ElementKind.FUNCTION;\r\n\r\n  /** Prototype reference. */\r\n  prototype: FunctionPrototype;\r\n  /** Function signature. */\r\n  signature: Signature;\r\n  /** Map of locals by name. */\r\n  localsByName: Map<string,Local> = new Map();\r\n  /** Array of locals by index. */\r\n  localsByIndex: Local[] = [];\r\n  /** List of additional non-parameter locals. */\r\n  additionalLocals: Type[] = [];\r\n  /** Current break context label. */\r\n  breakContext: string | null = null;\r\n  /** Contextual type arguments. */\r\n  contextualTypeArguments: Map<string,Type> | null;\r\n  /** Current control flow. */\r\n  flow: Flow;\r\n  /** Remembered debug locations. */\r\n  debugLocations: Range[] = [];\r\n  /** Function reference, if compiled. */\r\n  ref: FunctionRef = 0;\r\n  /** Function table index, if any. */\r\n  functionTableIndex: i32 = -1;\r\n  /** Trampoline function for calling with omitted arguments. */\r\n  trampoline: Function | null = null;\r\n  /** The outer scope, if a function expression. */\r\n  outerScope: Flow | null = null;\r\n\r\n  private nextBreakId: i32 = 0;\r\n  private breakStack: i32[] | null = null;\r\n  nextInlineId: i32 = 0;\r\n\r\n  /** Constructs a new concrete function. */\r\n  constructor(\r\n    prototype: FunctionPrototype,\r\n    internalName: string,\r\n    signature: Signature,\r\n    parent: Element | null = null,\r\n    contextualTypeArguments: Map<string,Type> | null = null\r\n  ) {\r\n    super(prototype.program, prototype.simpleName, internalName);\r\n    this.prototype = prototype;\r\n    this.signature = signature;\r\n    this.parent = parent;\r\n    this.flags = prototype.flags;\r\n    this.decoratorFlags = prototype.decoratorFlags;\r\n    this.contextualTypeArguments = contextualTypeArguments;\r\n    if (!(prototype.is(CommonFlags.AMBIENT | CommonFlags.BUILTIN) || prototype.is(CommonFlags.DECLARE))) {\r\n      let localIndex = 0;\r\n      if (parent && parent.kind == ElementKind.CLASS) {\r\n        assert(this.is(CommonFlags.INSTANCE));\r\n        let local = new Local(\r\n          prototype.program,\r\n          \"this\",\r\n          localIndex++,\r\n          assert(signature.thisType)\r\n        );\r\n        this.localsByName.set(\"this\", local);\r\n        this.localsByIndex[local.index] = local;\r\n        let inheritedTypeArguments = (<Class>parent).contextualTypeArguments;\r\n        if (inheritedTypeArguments) {\r\n          if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\r\n          for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\r\n            if (!this.contextualTypeArguments.has(inheritedName)) {\r\n              this.contextualTypeArguments.set(inheritedName, inheritedType);\r\n            }\r\n          }\r\n        }\r\n      } else {\r\n        assert(!this.is(CommonFlags.INSTANCE)); // internal error\r\n      }\r\n      let parameterTypes = signature.parameterTypes;\r\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\r\n        let parameterType = parameterTypes[i];\r\n        let parameterName = signature.getParameterName(i);\r\n        let local = new Local(\r\n          prototype.program,\r\n          parameterName,\r\n          localIndex++,\r\n          parameterType\r\n          // FIXME: declaration?\r\n        );\r\n        this.localsByName.set(parameterName, local);\r\n        this.localsByIndex[local.index] = local;\r\n      }\r\n    }\r\n    this.flow = Flow.create(this);\r\n  }\r\n\r\n  /** Adds a local of the specified type, with an optional name. */\r\n  addLocal(type: Type, name: string | null = null, declaration: VariableDeclaration | null = null): Local {\r\n    // if it has a name, check previously as this method will throw otherwise\r\n    var localIndex = this.signature.parameterTypes.length + this.additionalLocals.length;\r\n    if (this.is(CommonFlags.INSTANCE)) ++localIndex;\r\n    var local = new Local(\r\n      this.prototype.program,\r\n      name\r\n        ? name\r\n        : \"var$\" + localIndex.toString(10),\r\n      localIndex,\r\n      type,\r\n      declaration\r\n    );\r\n    if (name) {\r\n      if (this.localsByName.has(name)) throw new Error(\"duplicate local name\");\r\n      this.localsByName.set(name, local);\r\n    }\r\n    this.localsByIndex[local.index] = local;\r\n    this.additionalLocals.push(type);\r\n    return local;\r\n  }\r\n\r\n  private tempI32s: Local[] | null = null;\r\n  private tempI64s: Local[] | null = null;\r\n  private tempF32s: Local[] | null = null;\r\n  private tempF64s: Local[] | null = null;\r\n\r\n  /** Gets a free temporary local of the specified type. */\r\n  getTempLocal(type: Type, wrapped: bool = false): Local {\r\n    var temps: Local[] | null;\r\n    switch (type.toNativeType()) {\r\n      case NativeType.I32: {\r\n        temps = this.tempI32s;\r\n        break;\r\n      }\r\n      case NativeType.I64: {\r\n        temps = this.tempI64s;\r\n        break;\r\n      }\r\n      case NativeType.F32: {\r\n        temps = this.tempF32s;\r\n        break;\r\n      }\r\n      case NativeType.F64: {\r\n        temps = this.tempF64s;\r\n        break;\r\n      }\r\n      default: throw new Error(\"concrete type expected\");\r\n    }\r\n    var local: Local;\r\n    if (temps && temps.length) {\r\n      local = temps.pop();\r\n      local.type = type;\r\n      local.flags = CommonFlags.NONE;\r\n    } else {\r\n      local = this.addLocal(type);\r\n    }\r\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n      this.flow.setLocalWrapped(local.index, wrapped);\r\n    }\r\n    return local;\r\n  }\r\n\r\n  /** Frees the temporary local for reuse. */\r\n  freeTempLocal(local: Local): void {\r\n    if (local.is(CommonFlags.INLINED)) return;\r\n    assert(local.index >= 0);\r\n    var temps: Local[];\r\n    assert(local.type != null); // internal error\r\n    switch ((<Type>local.type).toNativeType()) {\r\n      case NativeType.I32: {\r\n        temps = this.tempI32s || (this.tempI32s = []);\r\n        break;\r\n      }\r\n      case NativeType.I64: {\r\n        temps = this.tempI64s || (this.tempI64s = []);\r\n        break;\r\n      }\r\n      case NativeType.F32: {\r\n        temps = this.tempF32s || (this.tempF32s = []);\r\n        break;\r\n      }\r\n      case NativeType.F64: {\r\n        temps = this.tempF64s || (this.tempF64s = []);\r\n        break;\r\n      }\r\n      default: throw new Error(\"concrete type expected\");\r\n    }\r\n    assert(local.index >= 0);\r\n    temps.push(local);\r\n  }\r\n\r\n  /** Gets and immediately frees a temporary local of the specified type. */\r\n  getAndFreeTempLocal(type: Type, wrapped: bool): Local {\r\n    var temps: Local[];\r\n    switch (type.toNativeType()) {\r\n      case NativeType.I32: {\r\n        temps = this.tempI32s || (this.tempI32s = []);\r\n        break;\r\n      }\r\n      case NativeType.I64: {\r\n        temps = this.tempI64s || (this.tempI64s = []);\r\n        break;\r\n      }\r\n      case NativeType.F32: {\r\n        temps = this.tempF32s || (this.tempF32s = []);\r\n        break;\r\n      }\r\n      case NativeType.F64: {\r\n        temps = this.tempF64s || (this.tempF64s = []);\r\n        break;\r\n      }\r\n      default: throw new Error(\"concrete type expected\");\r\n    }\r\n    var local: Local;\r\n    if (temps.length) {\r\n      local = temps[temps.length - 1];\r\n      local.type = type;\r\n    } else {\r\n      local = this.addLocal(type);\r\n      temps.push(local);\r\n    }\r\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n      this.flow.setLocalWrapped(local.index, wrapped);\r\n    }\r\n    return local;\r\n  }\r\n\r\n  /** Enters a(nother) break context. */\r\n  enterBreakContext(): string {\r\n    var id = this.nextBreakId++;\r\n    if (!this.breakStack) this.breakStack = [ id ];\r\n    else this.breakStack.push(id);\r\n    return this.breakContext = id.toString(10);\r\n  }\r\n\r\n  /** Leaves the current break context. */\r\n  leaveBreakContext(): void {\r\n    assert(this.breakStack != null);\r\n    var length = (<i32[]>this.breakStack).length;\r\n    assert(length > 0);\r\n    (<i32[]>this.breakStack).pop();\r\n    if (length > 1) {\r\n      this.breakContext = (<i32[]>this.breakStack)[length - 2].toString(10);\r\n    } else {\r\n      this.breakContext = null;\r\n      this.breakStack = null;\r\n    }\r\n  }\r\n\r\n  /** Finalizes the function once compiled, releasing no longer needed resources. */\r\n  finalize(module: Module, ref: FunctionRef): void {\r\n    this.ref = ref;\r\n    assert(!this.breakStack || !this.breakStack.length); // internal error\r\n    this.breakStack = null;\r\n    this.breakContext = null;\r\n    this.tempI32s = this.tempI64s = this.tempF32s = this.tempF64s = null;\r\n    if (this.program.options.sourceMap) {\r\n      let debugLocations = this.debugLocations;\r\n      for (let i = 0, k = debugLocations.length; i < k; ++i) {\r\n        let debugLocation = debugLocations[i];\r\n        module.setDebugLocation(\r\n          ref,\r\n          debugLocation.debugInfoRef,\r\n          debugLocation.source.debugInfoIndex,\r\n          debugLocation.line,\r\n          debugLocation.column\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Returns the TypeScript representation of this function. */\r\n  toString(): string { return this.prototype.simpleName; }\r\n}\r\n\r\n/** A resolved function target, that is a function called indirectly by an index and signature. */\r\nexport class FunctionTarget extends Element {\r\n\r\n  kind = ElementKind.FUNCTION_TARGET;\r\n\r\n  /** Underlying signature. */\r\n  signature: Signature;\r\n  /** Function type. */\r\n  type: Type;\r\n\r\n  /** Constructs a new function target. */\r\n  constructor(program: Program, signature: Signature) {\r\n    super(program, \"\", \"\");\r\n    var simpleName = signature.toSignatureString();\r\n    this.simpleName = simpleName;\r\n    this.internalName = simpleName;\r\n    this.signature = signature;\r\n    this.type = Type.u32.asFunction(signature);\r\n  }\r\n}\r\n\r\n/** A yet unresolved instance field prototype. */\r\nexport class FieldPrototype extends Element {\r\n\r\n  kind = ElementKind.FIELD_PROTOTYPE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: FieldDeclaration;\r\n  /** Parent class prototype. */\r\n  classPrototype: ClassPrototype;\r\n\r\n  /** Constructs a new field prototype. */\r\n  constructor(\r\n    classPrototype: ClassPrototype,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: FieldDeclaration\r\n  ) {\r\n    super(classPrototype.program, simpleName, internalName);\r\n    this.classPrototype = classPrototype;\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n  }\r\n}\r\n\r\n/** A resolved instance field. */\r\nexport class Field extends VariableLikeElement {\r\n\r\n  kind = ElementKind.FIELD;\r\n\r\n  /** Field prototype reference. */\r\n  prototype: FieldPrototype;\r\n  /** Field memory offset, if an instance field. */\r\n  memoryOffset: i32 = -1;\r\n\r\n  /** Constructs a new field. */\r\n  constructor(\r\n    prototype: FieldPrototype,\r\n    internalName: string,\r\n    type: Type,\r\n    declaration: FieldDeclaration,\r\n    parent: Class\r\n  ) {\r\n    super(prototype.program, prototype.simpleName, internalName, type, declaration);\r\n    this.prototype = prototype;\r\n    this.flags = prototype.flags;\r\n    this.type = type;\r\n    this.parent = parent;\r\n  }\r\n}\r\n\r\n/** A property comprised of a getter and a setter function. */\r\nexport class Property extends Element {\r\n\r\n  kind = ElementKind.PROPERTY;\r\n\r\n  /** Parent class prototype. */\r\n  parent: ClassPrototype;\r\n  /** Getter prototype. */\r\n  getterPrototype: FunctionPrototype | null = null;\r\n  /** Setter prototype. */\r\n  setterPrototype: FunctionPrototype | null = null;\r\n\r\n  /** Constructs a new property prototype. */\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    parent: ClassPrototype\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.parent = parent;\r\n  }\r\n}\r\n\r\n/** A yet unresolved class prototype. */\r\nexport class ClassPrototype extends Element {\r\n\r\n  kind = ElementKind.CLASS_PROTOTYPE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: ClassDeclaration;\r\n  /** Resolved instances. */\r\n  instances: Map<string,Class> = new Map();\r\n  /** Instance member prototypes. */\r\n  instanceMembers: Map<string,Element> | null = null;\r\n  /** Base class prototype, if applicable. */\r\n  basePrototype: ClassPrototype | null = null; // set in Program#initialize\r\n  /** Constructor prototype. */\r\n  constructorPrototype: FunctionPrototype | null = null;\r\n  /** Operator overload prototypes. */\r\n  overloadPrototypes: Map<OperatorKind, FunctionPrototype> = new Map();\r\n\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: ClassDeclaration,\r\n    decoratorFlags: DecoratorFlags\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n    this.decoratorFlags = decoratorFlags;\r\n  }\r\n\r\n  /** Resolves this prototype to an instance using the specified concrete type arguments. */\r\n  resolve(\r\n    typeArguments: Type[] | null,\r\n    contextualTypeArguments: Map<string,Type> | null = null\r\n  ): Class | null {\r\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\r\n    var instance = this.instances.get(instanceKey);\r\n    if (instance) return instance;\r\n\r\n    // inherit contextual type arguments\r\n    var inheritedTypeArguments = contextualTypeArguments;\r\n    contextualTypeArguments = new Map();\r\n    if (inheritedTypeArguments) {\r\n      for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\r\n        contextualTypeArguments.set(inheritedName, inheritedType);\r\n      }\r\n    }\r\n\r\n    var declaration = this.declaration;\r\n    var baseClass: Class | null = null;\r\n    if (declaration.extendsType) {\r\n      let baseClassType = this.program.resolveType(declaration.extendsType, null); // reports\r\n      if (!baseClassType) return null;\r\n      if (!(baseClass = baseClassType.classReference)) {\r\n        this.program.error(\r\n          DiagnosticCode.A_class_may_only_extend_another_class,\r\n          declaration.extendsType.range\r\n        );\r\n        return null;\r\n      }\r\n      if (baseClass.hasDecorator(DecoratorFlags.SEALED)) {\r\n        this.program.error(\r\n          DiagnosticCode.Class_0_is_sealed_and_cannot_be_extended,\r\n          declaration.extendsType.range, baseClass.internalName\r\n        );\r\n        return null;\r\n      }\r\n      if (baseClass.hasDecorator(DecoratorFlags.UNMANAGED) != this.hasDecorator(DecoratorFlags.UNMANAGED)) {\r\n        this.program.error(\r\n          DiagnosticCode.Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa,\r\n          Range.join(declaration.name.range, declaration.extendsType.range)\r\n        );\r\n        return null;\r\n      }\r\n    }\r\n\r\n    // override call specific contextual type arguments if provided\r\n    var i: i32, k: i32;\r\n    if (typeArguments) {\r\n      if ((k = typeArguments.length) != declaration.typeParameters.length) {\r\n        throw new Error(\"type argument count mismatch\");\r\n      }\r\n      for (i = 0; i < k; ++i) {\r\n        contextualTypeArguments.set(declaration.typeParameters[i].name.text, typeArguments[i]);\r\n      }\r\n    } else if (declaration.typeParameters.length) {\r\n      throw new Error(\"type argument count mismatch\");\r\n    }\r\n\r\n    var simpleName = this.simpleName;\r\n    var internalName = this.internalName;\r\n    if (instanceKey.length) {\r\n      simpleName += \"<\" + instanceKey + \">\";\r\n      internalName += \"<\" + instanceKey + \">\";\r\n    }\r\n    instance = new Class(this, simpleName, internalName, typeArguments, baseClass);\r\n    instance.contextualTypeArguments = contextualTypeArguments;\r\n    this.instances.set(instanceKey, instance);\r\n    this.program.instancesLookup.set(internalName, instance);\r\n\r\n    var memoryOffset: u32 = 0;\r\n    if (baseClass) {\r\n      memoryOffset = baseClass.currentMemoryOffset;\r\n      if (baseClass.members) {\r\n        if (!instance.members) instance.members = new Map();\r\n        for (let inheritedMember of baseClass.members.values()) {\r\n          instance.members.set(inheritedMember.simpleName, inheritedMember);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Resolve constructor\r\n    if (this.constructorPrototype) {\r\n      let partialConstructor = this.constructorPrototype.resolvePartial(typeArguments); // reports\r\n      if (partialConstructor) instance.constructorInstance = partialConstructor.resolve(); // reports\r\n    }\r\n\r\n    // Resolve instance members\r\n    if (this.instanceMembers) {\r\n      for (let member of this.instanceMembers.values()) {\r\n        switch (member.kind) {\r\n\r\n          // Lay out fields in advance\r\n          case ElementKind.FIELD_PROTOTYPE: {\r\n            if (!instance.members) instance.members = new Map();\r\n            let fieldDeclaration = (<FieldPrototype>member).declaration;\r\n            if (!fieldDeclaration.type) {\r\n              throw new Error(\"type expected\"); // TODO: check if parent class defines a type\r\n            }\r\n            let fieldType = this.program.resolveType( // reports\r\n              fieldDeclaration.type,\r\n              instance.contextualTypeArguments\r\n            );\r\n            if (fieldType) {\r\n              let fieldInstance = new Field(\r\n                <FieldPrototype>member,\r\n                internalName + INSTANCE_DELIMITER + (<FieldPrototype>member).simpleName,\r\n                fieldType,\r\n                fieldDeclaration,\r\n                instance\r\n              );\r\n              switch (fieldType.byteSize) { // align\r\n                case 1: break;\r\n                case 2: {\r\n                  if (memoryOffset & 1) ++memoryOffset;\r\n                  break;\r\n                }\r\n                case 4: {\r\n                  if (memoryOffset & 3) memoryOffset = (memoryOffset | 3) + 1;\r\n                  break;\r\n                }\r\n                case 8: {\r\n                  if (memoryOffset & 7) memoryOffset = (memoryOffset | 7) + 1;\r\n                  break;\r\n                }\r\n                default: assert(false);\r\n              }\r\n              fieldInstance.memoryOffset = memoryOffset;\r\n              memoryOffset += fieldType.byteSize;\r\n              instance.members.set(member.simpleName, fieldInstance);\r\n            }\r\n            break;\r\n          }\r\n\r\n          // Partially resolve methods as these might have type arguments on their own\r\n          case ElementKind.FUNCTION_PROTOTYPE: {\r\n            if (!instance.members) instance.members = new Map();\r\n            let partialPrototype = (<FunctionPrototype>member).resolvePartial(typeArguments); // reports\r\n            if (partialPrototype) {\r\n              partialPrototype.internalName = internalName + INSTANCE_DELIMITER + partialPrototype.simpleName;\r\n              instance.members.set(member.simpleName, partialPrototype);\r\n            }\r\n            break;\r\n          }\r\n\r\n          // Clone properties and partially resolve the wrapped accessors for consistence with other methods\r\n          case ElementKind.PROPERTY: {\r\n            if (!instance.members) instance.members = new Map();\r\n            let getterPrototype = assert((<Property>member).getterPrototype);\r\n            let setterPrototype = (<Property>member).setterPrototype;\r\n            let instanceProperty = new Property(\r\n              this.program,\r\n              member.simpleName,\r\n              internalName + INSTANCE_DELIMITER + member.simpleName,\r\n              this\r\n            );\r\n            let partialGetterPrototype = getterPrototype.resolvePartial(typeArguments);\r\n            if (!partialGetterPrototype) return null;\r\n            partialGetterPrototype.internalName = (\r\n              internalName + INSTANCE_DELIMITER + partialGetterPrototype.simpleName\r\n            );\r\n            instanceProperty.getterPrototype = partialGetterPrototype;\r\n            if (setterPrototype) {\r\n              let partialSetterPrototype = setterPrototype.resolvePartial(typeArguments);\r\n              if (!partialSetterPrototype) return null;\r\n              partialSetterPrototype.internalName = (\r\n                internalName + INSTANCE_DELIMITER + partialSetterPrototype.simpleName\r\n              );\r\n              instanceProperty.setterPrototype = partialSetterPrototype;\r\n            }\r\n            instance.members.set(member.simpleName, instanceProperty);\r\n            break;\r\n          }\r\n          default: assert(false);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Fully resolve operator overloads (don't have type parameters on their own)\r\n    for (let [kind, prototype] of this.overloadPrototypes) {\r\n      assert(kind != OperatorKind.INVALID);\r\n      let operatorInstance: Function | null;\r\n      if (prototype.is(CommonFlags.INSTANCE)) {\r\n        let operatorPartial = prototype.resolvePartial(typeArguments); // reports\r\n        if (!operatorPartial) continue;\r\n        operatorInstance = operatorPartial.resolve(); // reports\r\n      } else {\r\n        operatorInstance = prototype.resolve(); // reports\r\n      }\r\n      if (!operatorInstance) continue;\r\n      let overloads = instance.overloads;\r\n      if (!overloads) instance.overloads = overloads = new Map();\r\n      overloads.set(kind, operatorInstance);\r\n    }\r\n\r\n    instance.currentMemoryOffset = memoryOffset; // offsetof<this>() is the class' byte size in memory\r\n    return instance;\r\n  }\r\n\r\n  /** Resolves the specified type arguments prior to resolving this prototype to an instance. */\r\n  resolveUsingTypeArguments(\r\n    typeArgumentNodes: CommonTypeNode[] | null,\r\n    contextualTypeArguments: Map<string,Type> | null,\r\n    alternativeReportNode: Node | null\r\n  ): Class | null {\r\n    var resolvedTypeArguments: Type[] | null = null;\r\n    if (this.is(CommonFlags.GENERIC)) {\r\n      assert(typeArgumentNodes != null && typeArgumentNodes.length != 0);\r\n      resolvedTypeArguments = this.program.resolveTypeArguments(\r\n        this.declaration.typeParameters,\r\n        typeArgumentNodes,\r\n        contextualTypeArguments,\r\n        alternativeReportNode\r\n      );\r\n      if (!resolvedTypeArguments) return null;\r\n    } else {\r\n      assert(typeArgumentNodes == null || !typeArgumentNodes.length);\r\n    }\r\n    return this.resolve(resolvedTypeArguments, contextualTypeArguments);\r\n  }\r\n\r\n  toString(): string {\r\n    return this.simpleName;\r\n  }\r\n}\r\n\r\n/** A resolved class. */\r\nexport class Class extends Element {\r\n\r\n  kind = ElementKind.CLASS;\r\n\r\n  /** Prototype reference. */\r\n  prototype: ClassPrototype;\r\n  /** Resolved type arguments. */\r\n  typeArguments: Type[] | null;\r\n  /** Resolved class type. */\r\n  type: Type;\r\n  /** Base class, if applicable. */\r\n  base: Class | null;\r\n  /** Contextual type arguments for fields and methods. */\r\n  contextualTypeArguments: Map<string,Type> | null = null;\r\n  /** Current member memory offset. */\r\n  currentMemoryOffset: u32 = 0;\r\n  /** Constructor instance. */\r\n  constructorInstance: Function | null = null;\r\n  /** Operator overloads. */\r\n  overloads: Map<OperatorKind,Function> | null = null;\r\n\r\n  /** Constructs a new class. */\r\n  constructor(\r\n    prototype: ClassPrototype,\r\n    simpleName: string,\r\n    internalName: string,\r\n    typeArguments: Type[] | null = null,\r\n    base: Class | null = null\r\n  ) {\r\n    super(prototype.program, simpleName, internalName);\r\n    this.prototype = prototype;\r\n    this.flags = prototype.flags;\r\n    this.decoratorFlags = prototype.decoratorFlags;\r\n    this.typeArguments = typeArguments;\r\n    this.type = prototype.program.options.usizeType.asClass(this);\r\n    this.base = base;\r\n\r\n    // inherit static members and contextual type arguments from base class\r\n    if (base) {\r\n      let inheritedTypeArguments = base.contextualTypeArguments;\r\n      if (inheritedTypeArguments) {\r\n        if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\r\n        for (let [baseName, baseType] of inheritedTypeArguments) {\r\n          this.contextualTypeArguments.set(baseName, baseType);\r\n        }\r\n      }\r\n    }\r\n\r\n    // apply instance-specific contextual type arguments\r\n    var declaration = this.prototype.declaration;\r\n    var i: i32, k: i32;\r\n    if (declaration) { // irrelevant for built-ins\r\n      let typeParameters = declaration.typeParameters;\r\n      if (typeArguments) {\r\n        if ((k = typeArguments.length) != typeParameters.length) {\r\n          throw new Error(\"type argument count mismatch\");\r\n        }\r\n        if (k) {\r\n          if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\r\n          for (i = 0; i < k; ++i) {\r\n            this.contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\r\n          }\r\n        }\r\n      } else if (typeParameters.length) {\r\n        throw new Error(\"type argument count mismatch\");\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Tests if a value of this class type is assignable to a target of the specified class type. */\r\n  isAssignableTo(target: Class): bool {\r\n    var current: Class | null = this;\r\n    do if (current == target) return true;\r\n    while (current = current.base);\r\n    return false;\r\n  }\r\n\r\n  /** Looks up the operator overload of the specified kind. */\r\n  lookupOverload(kind: OperatorKind, unchecked: bool = false): Function | null {\r\n    if (unchecked) {\r\n      switch (kind) {\r\n        case OperatorKind.INDEXED_GET: {\r\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET);\r\n          if (uncheckedOverload) return uncheckedOverload;\r\n          break;\r\n        }\r\n        case OperatorKind.INDEXED_SET: {\r\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_SET);\r\n          if (uncheckedOverload) return uncheckedOverload;\r\n          break;\r\n        }\r\n        default: assert(false);\r\n      }\r\n    }\r\n    var instance: Class | null = this;\r\n    do {\r\n      let overloads = instance.overloads;\r\n      if (overloads) {\r\n        let overload = overloads.get(kind);\r\n        if (overload) return overload;\r\n      }\r\n    } while (instance = instance.base);\r\n    return null;\r\n  }\r\n\r\n  toString(): string {\r\n    return this.simpleName;\r\n  }\r\n}\r\n\r\n/** A yet unresolved interface. */\r\nexport class InterfacePrototype extends ClassPrototype {\r\n\r\n  kind = ElementKind.INTERFACE_PROTOTYPE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: InterfaceDeclaration; // more specific\r\n\r\n  /** Constructs a new interface prototype. */\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: InterfaceDeclaration,\r\n    decoratorFlags: DecoratorFlags\r\n  ) {\r\n    super(program, simpleName, internalName, declaration, decoratorFlags);\r\n  }\r\n}\r\n\r\n/** A resolved interface. */\r\nexport class Interface extends Class {\r\n\r\n  kind = ElementKind.INTERFACE;\r\n\r\n  /** Prototype reference. */\r\n  prototype: InterfacePrototype; // more specific\r\n  /** Base interface, if applcable. */\r\n  base: Interface | null; // more specific\r\n\r\n  /** Constructs a new interface. */\r\n  constructor(\r\n    prototype: InterfacePrototype,\r\n    simpleName: string,\r\n    internalName: string,\r\n    typeArguments: Type[] = [],\r\n    base: Interface | null = null\r\n  ) {\r\n    super(prototype, simpleName, internalName, typeArguments, base);\r\n  }\r\n}\r\n\r\n/** Control flow flags indicating specific conditions. */\r\nexport const enum FlowFlags {\r\n  /** No specific conditions. */\r\n  NONE = 0,\r\n\r\n  /** This branch always returns. */\r\n  RETURNS = 1 << 0,\r\n  /** This branch always throws. */\r\n  THROWS = 1 << 1,\r\n  /** This branch always breaks. */\r\n  BREAKS = 1 << 2,\r\n  /** This branch always continues. */\r\n  CONTINUES = 1 << 3,\r\n  /** This branch always allocates. Constructors only. */\r\n  ALLOCATES = 1 << 4,\r\n\r\n  /** This branch conditionally returns in a child branch. */\r\n  CONDITIONALLY_RETURNS = 1 << 5,\r\n  /** This branch conditionally throws in a child branch. */\r\n  CONDITIONALLY_THROWS = 1 << 6,\r\n  /** This branch conditionally breaks in a child branch. */\r\n  CONDITIONALLY_BREAKS = 1 << 7,\r\n  /** This branch conditionally continues in a child branch. */\r\n  CONDITIONALLY_CONTINUES = 1 << 8,\r\n  /** This branch conditionally allocates in a child branch. Constructors only. */\r\n  CONDITIONALLY_ALLOCATES = 1 << 9,\r\n\r\n  /** This branch is part of inlining a function. */\r\n  INLINE_CONTEXT = 1 << 10,\r\n  /** This branch explicitly requests no bounds checking. */\r\n  UNCHECKED_CONTEXT = 1 << 11,\r\n  /** This branch returns a properly wrapped value. */\r\n  RETURNS_WRAPPED = 1 << 12,\r\n\r\n  /** This branch is terminated if any of these flags is set. */\r\n  TERMINATED = FlowFlags.RETURNS | FlowFlags.THROWS | FlowFlags.BREAKS | FlowFlags.CONTINUES\r\n}\r\n\r\n/** A control flow evaluator. */\r\nexport class Flow {\r\n\r\n  /** Parent flow. */\r\n  parent: Flow | null;\r\n  /** Flow flags indicating specific conditions. */\r\n  flags: FlowFlags;\r\n  /** Function this flow belongs to. */\r\n  currentFunction: Function;\r\n  /** The label we break to when encountering a continue statement. */\r\n  continueLabel: string | null;\r\n  /** The label we break to when encountering a break statement. */\r\n  breakLabel: string | null;\r\n  /** The label we break to when encountering a return statement, when inlining. */\r\n  returnLabel: string | null;\r\n  /** The current return type. */\r\n  returnType: Type;\r\n  /** The current contextual type arguments. */\r\n  contextualTypeArguments: Map<string,Type> | null;\r\n  /** Scoped local variables. */\r\n  scopedLocals: Map<string,Local> | null = null;\r\n  /** Local variable wrap states for the first 64 locals. */\r\n  wrappedLocals: I64;\r\n  /** Local variable wrap states for locals with index >= 64. */\r\n  wrappedLocalsExt: I64[] | null;\r\n\r\n  /** Creates the parent flow of the specified function. */\r\n  static create(currentFunction: Function): Flow {\r\n    var parentFlow = new Flow();\r\n    parentFlow.parent = null;\r\n    parentFlow.flags = FlowFlags.NONE;\r\n    parentFlow.currentFunction = currentFunction;\r\n    parentFlow.continueLabel = null;\r\n    parentFlow.breakLabel = null;\r\n    parentFlow.returnLabel = null;\r\n    parentFlow.returnType = currentFunction.signature.returnType;\r\n    parentFlow.contextualTypeArguments = currentFunction.contextualTypeArguments;\r\n    parentFlow.wrappedLocals = i64_new(0);\r\n    parentFlow.wrappedLocalsExt = null;\r\n    return parentFlow;\r\n  }\r\n\r\n  private constructor() { }\r\n\r\n  /** Tests if this flow has the specified flag or flags. */\r\n  is(flag: FlowFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Tests if this flow has one of the specified flags. */\r\n  isAny(flag: FlowFlags): bool { return (this.flags & flag) != 0; }\r\n  /** Sets the specified flag or flags. */\r\n  set(flag: FlowFlags): void { this.flags |= flag; }\r\n  /** Unsets the specified flag or flags. */\r\n  unset(flag: FlowFlags): void { this.flags &= ~flag; }\r\n\r\n  /** Enters a new branch or scope and returns the new flow. */\r\n  enterBranchOrScope(): Flow {\r\n    var branch = new Flow();\r\n    branch.parent = this;\r\n    branch.flags = this.flags;\r\n    branch.currentFunction = this.currentFunction;\r\n    branch.continueLabel = this.continueLabel;\r\n    branch.breakLabel = this.breakLabel;\r\n    branch.returnLabel = this.returnLabel;\r\n    branch.returnType = this.returnType;\r\n    branch.contextualTypeArguments = this.contextualTypeArguments;\r\n    branch.wrappedLocals = this.wrappedLocals;\r\n    branch.wrappedLocalsExt = this.wrappedLocalsExt ? this.wrappedLocalsExt.slice() : null;\r\n    return branch;\r\n  }\r\n\r\n  /** Leaves the current branch or scope and returns the parent flow. */\r\n  leaveBranchOrScope(propagate: bool = true): Flow {\r\n    var parent = assert(this.parent);\r\n\r\n    // Free block-scoped locals\r\n    if (this.scopedLocals) {\r\n      for (let scopedLocal of this.scopedLocals.values()) {\r\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\r\n          this.currentFunction.freeTempLocal(scopedLocal);\r\n        }\r\n      }\r\n      this.scopedLocals = null;\r\n    }\r\n\r\n    // Propagate conditionaal flags to parent\r\n    if (propagate) {\r\n      if (this.is(FlowFlags.RETURNS)) {\r\n        parent.set(FlowFlags.CONDITIONALLY_RETURNS);\r\n      }\r\n      if (this.is(FlowFlags.THROWS)) {\r\n        parent.set(FlowFlags.CONDITIONALLY_THROWS);\r\n      }\r\n      if (this.is(FlowFlags.BREAKS) && parent.breakLabel == this.breakLabel) {\r\n        parent.set(FlowFlags.CONDITIONALLY_BREAKS);\r\n      }\r\n      if (this.is(FlowFlags.CONTINUES) && parent.continueLabel == this.continueLabel) {\r\n        parent.set(FlowFlags.CONDITIONALLY_CONTINUES);\r\n      }\r\n      if (this.is(FlowFlags.ALLOCATES)) {\r\n        parent.set(FlowFlags.CONDITIONALLY_ALLOCATES);\r\n      }\r\n    }\r\n    return parent;\r\n  }\r\n\r\n  /** Adds a new scoped local of the specified name. */\r\n  addScopedLocal(type: Type, name: string, wrapped: bool, declaration?: VariableDeclaration): Local {\r\n    var scopedLocal = this.currentFunction.getTempLocal(type, false);\r\n    if (!this.scopedLocals) this.scopedLocals = new Map();\r\n    else {\r\n      let existingLocal = this.scopedLocals.get(name);\r\n      if (existingLocal) {\r\n        if (declaration) {\r\n          this.currentFunction.program.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range\r\n          );\r\n        } else assert(false);\r\n        return existingLocal;\r\n      }\r\n    }\r\n    scopedLocal.set(CommonFlags.SCOPED);\r\n    this.scopedLocals.set(name, scopedLocal);\r\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n      this.setLocalWrapped(scopedLocal.index, wrapped);\r\n    }\r\n    return scopedLocal;\r\n  }\r\n\r\n  /** Adds a new scoped alias for the specified local. */\r\n  addScopedLocalAlias(index: i32, type: Type, name: string): Local {\r\n    if (!this.scopedLocals) this.scopedLocals = new Map();\r\n    else {\r\n      let existingLocal = this.scopedLocals.get(name);\r\n      if (existingLocal) {\r\n        let declaration = existingLocal.declaration;\r\n        if (declaration) {\r\n          this.currentFunction.program.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range\r\n          );\r\n        } else assert(false);\r\n        return existingLocal;\r\n      }\r\n    }\r\n    assert(index < this.currentFunction.localsByIndex.length);\r\n    var scopedAlias = new Local( // not SCOPED as an indicator that it isn't automatically free'd\r\n      this.currentFunction.program,\r\n      name,\r\n      index,\r\n      type,\r\n      null\r\n    );\r\n    this.scopedLocals.set(name, scopedAlias);\r\n    return scopedAlias;\r\n  }\r\n\r\n  /** Gets the local of the specified name in the current scope. */\r\n  getScopedLocal(name: string): Local | null {\r\n    var local: Local | null;\r\n    var current: Flow | null = this;\r\n    do {\r\n      if (current.scopedLocals && (local = current.scopedLocals.get(name))) {\r\n        return local;\r\n      }\r\n    } while (current = current.parent);\r\n    return this.currentFunction.localsByName.get(name);\r\n  }\r\n\r\n  /** Tests if the local with the specified index is considered wrapped. */\r\n  isLocalWrapped(index: i32): bool {\r\n    var map: I64;\r\n    var ext: I64[] | null;\r\n    if (index < 64) {\r\n      if (index < 0) return true; // inlined constant\r\n      map = this.wrappedLocals;\r\n    } else if (ext = this.wrappedLocalsExt) {\r\n      let i = ((index - 64) / 64) | 0;\r\n      if (i >= ext.length) return false;\r\n      map = ext[i];\r\n      index -= (i + 1) * 64;\r\n    } else {\r\n      return false;\r\n    }\r\n    return i64_ne(\r\n      i64_and(\r\n        map,\r\n        i64_shl(\r\n          i64_one,\r\n          i64_new(index)\r\n        )\r\n      ),\r\n      i64_zero\r\n    );\r\n  }\r\n\r\n  /** Sets if the local with the specified index is considered wrapped. */\r\n  setLocalWrapped(index: i32, wrapped: bool): void {\r\n    var map: I64;\r\n    var off: i32 = -1;\r\n    if (index < 64) {\r\n      if (index < 0) return; // inlined constant\r\n      map = this.wrappedLocals;\r\n    } else {\r\n      let ext = this.wrappedLocalsExt;\r\n      off = ((index - 64) / 64) | 0;\r\n      if (!ext) {\r\n        this.wrappedLocalsExt = ext = new Array(off + 1);\r\n        ext.length = 0;\r\n      }\r\n      while (ext.length <= off) ext.push(i64_new(0));\r\n      map = ext[off];\r\n      index -= (off + 1) * 64;\r\n    }\r\n    map = wrapped\r\n      ? i64_or(\r\n          map,\r\n          i64_shl(\r\n            i64_one,\r\n            i64_new(index)\r\n          )\r\n        )\r\n      : i64_and(\r\n          map,\r\n          i64_not(\r\n            i64_shl(\r\n              i64_one,\r\n              i64_new(index)\r\n            )\r\n          )\r\n        );\r\n    if (off >= 0) (<I64[]>this.wrappedLocalsExt)[off] = map;\r\n    else this.wrappedLocals = map;\r\n  }\r\n\r\n  /** Inherits flags and local wrap states from the specified flow (e.g. on inner block). */\r\n  inherit(other: Flow): void {\r\n    this.flags |= other.flags & (\r\n      FlowFlags.RETURNS |\r\n      FlowFlags.RETURNS_WRAPPED |\r\n      FlowFlags.THROWS |\r\n      FlowFlags.BREAKS |\r\n      FlowFlags.CONTINUES |\r\n      FlowFlags.ALLOCATES\r\n    );\r\n    this.wrappedLocals = other.wrappedLocals;\r\n    this.wrappedLocalsExt = other.wrappedLocalsExt; // no need to slice because other flow is finished\r\n  }\r\n\r\n  /** Inherits mutual flags and local wrap states from the specified flows (e.g. on then/else branches). */\r\n  inheritMutual(left: Flow, right: Flow): void {\r\n    // flags set in both arms\r\n    this.flags |= left.flags & right.flags & (\r\n      FlowFlags.RETURNS |\r\n      FlowFlags.RETURNS_WRAPPED |\r\n      FlowFlags.THROWS |\r\n      FlowFlags.BREAKS |\r\n      FlowFlags.CONTINUES |\r\n      FlowFlags.ALLOCATES\r\n    );\r\n    // locals wrapped in both arms\r\n    this.wrappedLocals = i64_and(\r\n      left.wrappedLocals,\r\n      right.wrappedLocals\r\n    );\r\n    var leftExt = left.wrappedLocalsExt;\r\n    var rightExt = right.wrappedLocalsExt;\r\n    if (leftExt != null && rightExt != null) {\r\n      let thisExt = this.wrappedLocalsExt;\r\n      let minLength = min(leftExt.length, rightExt.length);\r\n      if (minLength) {\r\n        if (!thisExt) thisExt = new Array(minLength);\r\n        else while (thisExt.length < minLength) thisExt.push(i64_new(0));\r\n        for (let i = 0; i < minLength; ++i) {\r\n          thisExt[i] = i64_and(\r\n            leftExt[i],\r\n            rightExt[i]\r\n          );\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Tests if an expression can possibly overflow in the context of this flow. Assumes that the\r\n   * expression might already have overflown and returns `false` only if the operation neglects\r\n   * any possibly combination of garbage bits being present.\r\n   */\r\n  canOverflow(expr: ExpressionRef, type: Type): bool {\r\n    // TODO: the following catches most common and a few uncommon cases, but there are additional\r\n    // opportunities here, obviously.\r\n    assert(type != Type.void);\r\n\r\n    // types other than i8, u8, i16, u16 and bool do not overflow\r\n    if (!type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) return false;\r\n\r\n    var operand: ExpressionRef;\r\n    switch (getExpressionId(expr)) {\r\n\r\n      // overflows if the local isn't wrapped or the conversion does\r\n      case ExpressionId.GetLocal: {\r\n        let currentFunction = this.currentFunction;\r\n        let local = currentFunction.localsByIndex[getGetLocalIndex(expr)];\r\n        return !currentFunction.flow.isLocalWrapped(local.index)\r\n            || canConversionOverflow(local.type, type);\r\n      }\r\n\r\n      // overflows if the value does\r\n      case ExpressionId.SetLocal: {\r\n        assert(isTeeLocal(expr));\r\n        return this.canOverflow(getSetLocalValue(expr), type);\r\n      }\r\n\r\n      // never overflows because globals are wrapped on set\r\n      case ExpressionId.GetGlobal: return false;\r\n\r\n      case ExpressionId.Binary: {\r\n        switch (getBinaryOp(expr)) {\r\n\r\n          // comparisons do not overflow (result is 0 or 1)\r\n          case BinaryOp.EqI32:\r\n          case BinaryOp.EqI64:\r\n          case BinaryOp.EqF32:\r\n          case BinaryOp.EqF64:\r\n          case BinaryOp.NeI32:\r\n          case BinaryOp.NeI64:\r\n          case BinaryOp.NeF32:\r\n          case BinaryOp.NeF64:\r\n          case BinaryOp.LtI32:\r\n          case BinaryOp.LtU32:\r\n          case BinaryOp.LtI64:\r\n          case BinaryOp.LtU64:\r\n          case BinaryOp.LtF32:\r\n          case BinaryOp.LtF64:\r\n          case BinaryOp.LeI32:\r\n          case BinaryOp.LeU32:\r\n          case BinaryOp.LeI64:\r\n          case BinaryOp.LeU64:\r\n          case BinaryOp.LeF32:\r\n          case BinaryOp.LeF64:\r\n          case BinaryOp.GtI32:\r\n          case BinaryOp.GtU32:\r\n          case BinaryOp.GtI64:\r\n          case BinaryOp.GtU64:\r\n          case BinaryOp.GtF32:\r\n          case BinaryOp.GtF64:\r\n          case BinaryOp.GeI32:\r\n          case BinaryOp.GeU32:\r\n          case BinaryOp.GeI64:\r\n          case BinaryOp.GeU64:\r\n          case BinaryOp.GeF32:\r\n          case BinaryOp.GeF64: return false;\r\n\r\n          // result won't overflow if one side is 0 or if one side is 1 and the other wrapped\r\n          case BinaryOp.MulI32: {\r\n            return !(\r\n              (\r\n                getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\r\n                (\r\n                  getConstValueI32(operand) == 0 ||\r\n                  (\r\n                    getConstValueI32(operand) == 1 &&\r\n                    !this.canOverflow(getBinaryRight(expr), type)\r\n                  )\r\n                )\r\n              ) || (\r\n                getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\r\n                (\r\n                  getConstValueI32(operand) == 0 ||\r\n                  (\r\n                    getConstValueI32(operand) == 1 &&\r\n                    !this.canOverflow(getBinaryLeft(expr), type)\r\n                  )\r\n                )\r\n              )\r\n            );\r\n          }\r\n\r\n          // result won't overflow if one side is a constant less than this type's mask or one side\r\n          // is wrapped\r\n          case BinaryOp.AndI32: {\r\n            // note that computeSmallIntegerMask returns the mask minus the MSB for signed types\r\n            // because signed value garbage bits must be guaranteed to be equal to the MSB.\r\n            return !(\r\n              (\r\n                (\r\n                  getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\r\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\r\n                ) || !this.canOverflow(operand, type)\r\n              ) || (\r\n                (\r\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\r\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\r\n                ) || !this.canOverflow(operand, type)\r\n              )\r\n            );\r\n          }\r\n\r\n          // overflows if the shift doesn't clear potential garbage bits\r\n          case BinaryOp.ShlI32: {\r\n            let shift = 32 - type.size;\r\n            return getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const\r\n                || getConstValueI32(operand) < shift;\r\n          }\r\n\r\n          // overflows if the value does and the shift doesn't clear potential garbage bits\r\n          case BinaryOp.ShrI32: {\r\n            let shift = 32 - type.size;\r\n            return this.canOverflow(getBinaryLeft(expr), type) && (\r\n              getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const ||\r\n              getConstValueI32(operand) < shift\r\n            );\r\n          }\r\n\r\n          // overflows if the shift does not clear potential garbage bits. if an unsigned value is\r\n          // wrapped, it can't overflow.\r\n          case BinaryOp.ShrU32: {\r\n            let shift = 32 - type.size;\r\n            return type.is(TypeFlags.SIGNED)\r\n              ? !(\r\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\r\n                  getConstValueI32(operand) > shift // must clear MSB\r\n                )\r\n              : this.canOverflow(getBinaryLeft(expr), type) && !(\r\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\r\n                  getConstValueI32(operand) >= shift // can leave MSB\r\n                );\r\n          }\r\n\r\n          // overflows if any side does\r\n          case BinaryOp.DivU32:\r\n          case BinaryOp.RemI32:\r\n          case BinaryOp.RemU32: {\r\n            return this.canOverflow(getBinaryLeft(expr), type)\r\n                || this.canOverflow(getBinaryRight(expr), type);\r\n          }\r\n        }\r\n        break;\r\n      }\r\n\r\n      case ExpressionId.Unary: {\r\n        switch (getUnaryOp(expr)) {\r\n\r\n          // comparisons do not overflow (result is 0 or 1)\r\n          case UnaryOp.EqzI32:\r\n          case UnaryOp.EqzI64: return false;\r\n\r\n          // overflow if the maximum result (32) cannot be represented in the target type\r\n          case UnaryOp.ClzI32:\r\n          case UnaryOp.CtzI32:\r\n          case UnaryOp.PopcntI32: return type.size < 7;\r\n        }\r\n        break;\r\n      }\r\n\r\n      // overflows if the value cannot be represented in the target type\r\n      case ExpressionId.Const: {\r\n        let value: i32 = 0;\r\n        switch (getExpressionType(expr)) {\r\n          case NativeType.I32: { value = getConstValueI32(expr); break; }\r\n          case NativeType.I64: { value = getConstValueI64Low(expr); break; } // discards upper bits\r\n          case NativeType.F32: { value = i32(getConstValueF32(expr)); break; }\r\n          case NativeType.F64: { value = i32(getConstValueF64(expr)); break; }\r\n          default: assert(false);\r\n        }\r\n        switch (type.kind) {\r\n          case TypeKind.I8: return value < i8.MIN_VALUE || value > i8.MAX_VALUE;\r\n          case TypeKind.I16: return value < i16.MIN_VALUE || value > i16.MAX_VALUE;\r\n          case TypeKind.U8: return value < 0 || value > u8.MAX_VALUE;\r\n          case TypeKind.U16: return value < 0 || value > u16.MAX_VALUE;\r\n          case TypeKind.BOOL: return (value & ~1) != 0;\r\n        }\r\n        break;\r\n      }\r\n\r\n      // overflows if the conversion does\r\n      case ExpressionId.Load: {\r\n        let fromType: Type;\r\n        switch (getLoadBytes(expr)) {\r\n          case 1:  { fromType = isLoadSigned(expr) ? Type.i8 : Type.u8; break; }\r\n          case 2:  { fromType = isLoadSigned(expr) ? Type.i16 : Type.u16; break; }\r\n          default: { fromType = isLoadSigned(expr) ? Type.i32 : Type.u32; break; }\r\n        }\r\n        return canConversionOverflow(fromType, type);\r\n      }\r\n\r\n      // overflows if the result does, which is either\r\n      // - the last expression of the block, by contract, if the block doesn't have a label\r\n      // - the last expression or the value of an inner br if the block has a label (TODO)\r\n      case ExpressionId.Block: {\r\n        if (!getBlockName(expr)) {\r\n          let size = assert(getBlockChildCount(expr));\r\n          let last = getBlockChild(expr, size - 1);\r\n          return this.canOverflow(last, type);\r\n        }\r\n        // actually, brs with a value that'd be handled here is not emitted atm\r\n        break;\r\n      }\r\n\r\n      // overflows if either side does\r\n      case ExpressionId.If: {\r\n        return this.canOverflow(getIfTrue(expr), type)\r\n            || this.canOverflow(assert(getIfFalse(expr)), type);\r\n      }\r\n\r\n      // overflows if either side does\r\n      case ExpressionId.Select: {\r\n        return this.canOverflow(getSelectThen(expr), type)\r\n            || this.canOverflow(getSelectElse(expr), type);\r\n      }\r\n\r\n      // overflows if the call does not return a wrapped value or the conversion does\r\n      case ExpressionId.Call: {\r\n        let program = this.currentFunction.program;\r\n        let instance = assert(program.instancesLookup.get(assert(getCallTarget(expr))));\r\n        assert(instance.kind == ElementKind.FUNCTION);\r\n        let returnType = (<Function>instance).signature.returnType;\r\n        return !(<Function>instance).flow.is(FlowFlags.RETURNS_WRAPPED)\r\n            || canConversionOverflow(returnType, type);\r\n      }\r\n\r\n      // doesn't technically overflow\r\n      case ExpressionId.Unreachable: return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /** Finalizes this flow. Must be the topmost parent flow of the function. */\r\n  finalize(): void {\r\n    assert(this.parent == null); // must be the topmost parent flow\r\n    this.continueLabel = null;\r\n    this.breakLabel = null;\r\n    this.returnLabel = null;\r\n    this.contextualTypeArguments = null;\r\n  }\r\n}\r\n\r\n/** Tests if a conversion from one type to another can technically overflow. */\r\nfunction canConversionOverflow(fromType: Type, toType: Type): bool {\r\n  var fromSize = fromType.byteSize;\r\n  var toSize = toType.byteSize;\r\n  return !fromType.is(TypeFlags.INTEGER) // non-i32 locals or returns\r\n      || fromSize > toSize\r\n      || fromType.is(TypeFlags.SIGNED) != toType.is(TypeFlags.SIGNED);\r\n}\r\n","/**\r\n * Various compiler utilities.\r\n * @module util\r\n * @preferred\r\n *//***/\r\n\r\nexport * from \"./charcode\";\r\nexport * from \"./path\";\r\nexport * from \"./text\";\r\nexport * from \"./binary\";\r\n","/**\r\n * Shared diagnostic handling inherited by the parser and the compiler.\r\n * @module diagnostics\r\n * @preferred\r\n *//***/\r\n\r\nimport {\r\n  Range\r\n} from \"./ast\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  diagnosticCodeToString\r\n} from \"./diagnosticMessages.generated\";\r\n\r\nimport {\r\n  isLineBreak\r\n} from \"./util\";\r\n\r\nexport {\r\n  DiagnosticCode,\r\n  diagnosticCodeToString\r\n} from \"./diagnosticMessages.generated\";\r\n\r\n/** Indicates the category of a {@link DiagnosticMessage}. */\r\nexport enum DiagnosticCategory {\r\n  /** Informatory message. */\r\n  INFO,\r\n  /** Warning message. */\r\n  WARNING,\r\n  /** Error message. */\r\n  ERROR\r\n}\r\n\r\n/** Returns the string representation of the specified diagnostic category. */\r\nexport function diagnosticCategoryToString(category: DiagnosticCategory): string {\r\n  switch (category) {\r\n    case DiagnosticCategory.INFO: return \"INFO\";\r\n    case DiagnosticCategory.WARNING: return \"WARNING\";\r\n    case DiagnosticCategory.ERROR: return \"ERROR\";\r\n    default: {\r\n      assert(false);\r\n      return \"\";\r\n    }\r\n  }\r\n}\r\n\r\n/** ANSI escape sequence for blue foreground. */\r\nexport const COLOR_BLUE: string = \"\\u001b[93m\";\r\n/** ANSI escape sequence for yellow foreground. */\r\nexport const COLOR_YELLOW: string = \"\\u001b[93m\";\r\n/** ANSI escape sequence for red foreground. */\r\nexport const COLOR_RED: string = \"\\u001b[91m\";\r\n/** ANSI escape sequence to reset the foreground color. */\r\nexport const COLOR_RESET: string = \"\\u001b[0m\";\r\n\r\n/** Returns the ANSI escape sequence for the specified category. */\r\nexport function diagnosticCategoryToColor(category: DiagnosticCategory): string {\r\n  switch (category) {\r\n    case DiagnosticCategory.INFO: return COLOR_BLUE;\r\n    case DiagnosticCategory.WARNING: return COLOR_YELLOW;\r\n    case DiagnosticCategory.ERROR: return COLOR_RED;\r\n    default: {\r\n      assert(false);\r\n      return \"\";\r\n    }\r\n  }\r\n}\r\n\r\n/** Represents a diagnostic message. */\r\nexport class DiagnosticMessage {\r\n\r\n  /** Message code. */\r\n  code: i32;\r\n  /** Message category. */\r\n  category: DiagnosticCategory;\r\n  /** Message text. */\r\n  message: string;\r\n  /** Respective source range, if any. */\r\n  range: Range | null = null;\r\n\r\n  /** Constructs a new diagnostic message. */\r\n  private constructor(code: i32, category: DiagnosticCategory, message: string) {\r\n    this.code = code;\r\n    this.category = category;\r\n    this.message = message;\r\n  }\r\n\r\n  /** Creates a new diagnostic message of the specified category. */\r\n  static create(\r\n    code: DiagnosticCode,\r\n    category: DiagnosticCategory,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): DiagnosticMessage {\r\n    var message = diagnosticCodeToString(code);\r\n    if (arg0 != null) message = message.replace(\"{0}\", arg0);\r\n    if (arg1 != null) message = message.replace(\"{1}\", arg1);\r\n    if (arg2 != null) message = message.replace(\"{2}\", arg2);\r\n    return new DiagnosticMessage(code, category, message);\r\n  }\r\n\r\n  /** Creates a new informatory diagnostic message. */\r\n  static createInfo(\r\n    code: DiagnosticCode,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null\r\n  ): DiagnosticMessage {\r\n    return DiagnosticMessage.create(code, DiagnosticCategory.INFO, arg0, arg1);\r\n  }\r\n\r\n  /** Creates a new warning diagnostic message. */\r\n  static createWarning(\r\n    code: DiagnosticCode,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null\r\n  ): DiagnosticMessage {\r\n    return DiagnosticMessage.create(code, DiagnosticCategory.WARNING, arg0, arg1);\r\n  }\r\n\r\n  /** Creates a new error diagnostic message. */\r\n  static createError(\r\n    code: DiagnosticCode,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null\r\n  ): DiagnosticMessage {\r\n    return DiagnosticMessage.create(code, DiagnosticCategory.ERROR, arg0, arg1);\r\n  }\r\n\r\n  /** Adds a source range to this message. */\r\n  withRange(range: Range): this {\r\n    this.range = range;\r\n    return this;\r\n  }\r\n\r\n  /** Converts this message to a string. */\r\n  toString(): string {\r\n    if (this.range) {\r\n      return (\r\n        diagnosticCategoryToString(this.category) +\r\n        \" \" +\r\n        this.code.toString(10) +\r\n        \": \\\"\" +\r\n        this.message +\r\n        \"\\\" in \" +\r\n        this.range.source.normalizedPath +\r\n        \":\" +\r\n        this.range.line.toString(10) +\r\n        \":\" +\r\n        this.range.column.toString(10)\r\n      );\r\n    }\r\n    return (\r\n      diagnosticCategoryToString(this.category) +\r\n      \" \" +\r\n      this.code.toString(10) +\r\n      \": \" +\r\n      this.message\r\n    );\r\n  }\r\n}\r\n\r\n/** Formats a diagnostic message, optionally with terminal colors and source context. */\r\nexport function formatDiagnosticMessage(\r\n  message: DiagnosticMessage,\r\n  useColors: bool = false,\r\n  showContext: bool = false\r\n): string {\r\n\r\n  // general information\r\n  var sb: string[] = [];\r\n  if (useColors) sb.push(diagnosticCategoryToColor(message.category));\r\n  sb.push(diagnosticCategoryToString(message.category));\r\n  if (useColors) sb.push(COLOR_RESET);\r\n  sb.push(message.code < 1000 ? \" AS\" : \" TS\");\r\n  sb.push(message.code.toString(10));\r\n  sb.push(\": \");\r\n  sb.push(message.message);\r\n\r\n  // include range information if available\r\n  if (message.range) {\r\n\r\n    // include context information if requested\r\n    let range = message.range;\r\n    if (showContext) {\r\n      sb.push(\"\\n\");\r\n      sb.push(formatDiagnosticContext(message.range, useColors));\r\n    }\r\n\r\n    sb.push(\"\\n\");\r\n    sb.push(\" in \");\r\n    sb.push(range.source.normalizedPath);\r\n    sb.push(\"(\");\r\n    sb.push(range.line.toString(10));\r\n    sb.push(\",\");\r\n    sb.push(range.column.toString(10));\r\n    sb.push(\")\");\r\n  }\r\n  return sb.join(\"\");\r\n}\r\n\r\n/** Formats the diagnostic context for the specified range, optionally with terminal colors. */\r\nexport function formatDiagnosticContext(range: Range, useColors: bool = false): string {\r\n  var text = range.source.text;\r\n  var len = text.length;\r\n  var start = range.start;\r\n  var end = range.end;\r\n  while (start > 0 && !isLineBreak(text.charCodeAt(start - 1))) start--;\r\n  while (end < len && !isLineBreak(text.charCodeAt(end))) end++;\r\n  var sb: string[] = [\r\n    \"\\n \",\r\n    text.substring(start, end),\r\n    \"\\n \"\r\n  ];\r\n  while (start < range.start) {\r\n    sb.push(\" \");\r\n    start++;\r\n  }\r\n  if (useColors) sb.push(COLOR_RED);\r\n  if (range.start == range.end) {\r\n    sb.push(\"^\");\r\n  } else {\r\n    while (start++ < range.end) sb.push(\"~\");\r\n  }\r\n  if (useColors) sb.push(COLOR_RESET);\r\n  return sb.join(\"\");\r\n}\r\n\r\n/** Base class of all diagnostic emitters. */\r\nexport abstract class DiagnosticEmitter {\r\n\r\n  /** Diagnostic messages emitted so far. */\r\n  diagnostics: DiagnosticMessage[];\r\n\r\n  /** Initializes this diagnostic emitter. */\r\n  protected constructor(diagnostics: DiagnosticMessage[] | null = null) {\r\n    this.diagnostics = diagnostics ? <DiagnosticMessage[]>diagnostics : new Array();\r\n  }\r\n\r\n  /** Emits a diagnostic message of the specified category. */\r\n  emitDiagnostic(\r\n    code: DiagnosticCode,\r\n    category: DiagnosticCategory,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    var message = DiagnosticMessage.create(code, category, arg0, arg1, arg2).withRange(range);\r\n    this.diagnostics.push(message);\r\n    // console.log(formatDiagnosticMessage(message, true, true) + \"\\n\"); // temporary\r\n    // console.log(<string>new Error(\"stack\").stack);\r\n  }\r\n\r\n  /** Emits an informatory diagnostic message. */\r\n  info(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, arg0, arg1, arg2);\r\n  }\r\n\r\n  /** Emits a warning diagnostic message. */\r\n  warning(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, arg0, arg1, arg2);\r\n  }\r\n\r\n  /** Emits an error diagnostic message. */\r\n  error(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, arg0, arg1, arg2);\r\n  }\r\n}\r\n","/**\r\n * A thin wrapper around Binaryen's C-API.\r\n * @module module\r\n *//***/\r\n\r\nimport {\r\n  Target\r\n} from \"./compiler\";\r\n\r\nexport type ModuleRef = usize;\r\nexport type FunctionTypeRef = usize;\r\nexport type FunctionRef = usize;\r\nexport type ExpressionRef = usize;\r\nexport type GlobalRef = usize;\r\nexport type ImportRef = usize;\r\nexport type ExportRef = usize;\r\nexport type Index = u32;\r\n\r\nexport enum NativeType {\r\n  None = _BinaryenTypeNone(),\r\n  I32 = _BinaryenTypeInt32(),\r\n  I64 = _BinaryenTypeInt64(),\r\n  F32 = _BinaryenTypeFloat32(),\r\n  F64 =  _BinaryenTypeFloat64(),\r\n  Unreachable = _BinaryenTypeUnreachable(),\r\n  Auto = _BinaryenTypeAuto()\r\n}\r\n\r\nexport enum ExpressionId {\r\n  Invalid = _BinaryenInvalidId(),\r\n  Block = _BinaryenBlockId(),\r\n  If = _BinaryenIfId(),\r\n  Loop = _BinaryenLoopId(),\r\n  Break = _BinaryenBreakId(),\r\n  Switch = _BinaryenSwitchId(),\r\n  Call = _BinaryenCallId(),\r\n  CallImport = _BinaryenCallImportId(),\r\n  CallIndirect = _BinaryenCallIndirectId(),\r\n  GetLocal = _BinaryenGetLocalId(),\r\n  SetLocal = _BinaryenSetLocalId(),\r\n  GetGlobal = _BinaryenGetGlobalId(),\r\n  SetGlobal = _BinaryenSetGlobalId(),\r\n  Load = _BinaryenLoadId(),\r\n  Store = _BinaryenStoreId(),\r\n  Const = _BinaryenConstId(),\r\n  Unary = _BinaryenUnaryId(),\r\n  Binary = _BinaryenBinaryId(),\r\n  Select = _BinaryenSelectId(),\r\n  Drop = _BinaryenDropId(),\r\n  Return = _BinaryenReturnId(),\r\n  Host = _BinaryenHostId(),\r\n  Nop = _BinaryenNopId(),\r\n  Unreachable = _BinaryenUnreachableId(),\r\n  AtomicCmpxchg = _BinaryenAtomicCmpxchgId(),\r\n  AtomicRMW = _BinaryenAtomicRMWId(),\r\n  AtomicWait = _BinaryenAtomicWaitId(),\r\n  AtomicWake = _BinaryenAtomicWakeId()\r\n}\r\n\r\nexport enum UnaryOp {\r\n  ClzI32 = _BinaryenClzInt32(),\r\n  CtzI32 = _BinaryenCtzInt32(),\r\n  PopcntI32 = _BinaryenPopcntInt32(),\r\n  NegF32 = _BinaryenNegFloat32(),\r\n  AbsF32 = _BinaryenAbsFloat32(),\r\n  CeilF32 = _BinaryenCeilFloat32(),\r\n  FloorF32 = _BinaryenFloorFloat32(),\r\n  TruncF32 = _BinaryenTruncFloat32(),\r\n  NearestF32 = _BinaryenNearestFloat32(),\r\n  SqrtF32 = _BinaryenSqrtFloat32(),\r\n  EqzI32 = _BinaryenEqZInt32(),\r\n  ClzI64 = _BinaryenClzInt64(),\r\n  CtzI64 = _BinaryenCtzInt64(),\r\n  PopcntI64 = _BinaryenPopcntInt64(),\r\n  NegF64 = _BinaryenNegFloat64(),\r\n  AbsF64 = _BinaryenAbsFloat64(),\r\n  CeilF64 = _BinaryenCeilFloat64(),\r\n  FloorF64 = _BinaryenFloorFloat64(),\r\n  TruncF64 = _BinaryenTruncFloat64(),\r\n  NearestF64 = _BinaryenNearestFloat64(),\r\n  SqrtF64 = _BinaryenSqrtFloat64(),\r\n  EqzI64 = _BinaryenEqZInt64(),\r\n  ExtendI32 = _BinaryenExtendSInt32(),\r\n  ExtendU32 = _BinaryenExtendUInt32(),\r\n  WrapI64 = _BinaryenWrapInt64(),\r\n  TruncF32ToI32 = _BinaryenTruncSFloat32ToInt32(),\r\n  TruncF32ToI64 = _BinaryenTruncSFloat32ToInt64(),\r\n  TruncF32ToU32 = _BinaryenTruncUFloat32ToInt32(),\r\n  TruncF32ToU64 = _BinaryenTruncUFloat32ToInt64(),\r\n  TruncF64ToI32 = _BinaryenTruncSFloat64ToInt32(),\r\n  TruncF64ToI64 = _BinaryenTruncSFloat64ToInt64(),\r\n  TruncF64ToU32 = _BinaryenTruncUFloat64ToInt32(),\r\n  TruncF64ToU64 = _BinaryenTruncUFloat64ToInt64(),\r\n  ReinterpretF32 = _BinaryenReinterpretFloat32(),\r\n  ReinterpretF64 = _BinaryenReinterpretFloat64(),\r\n  ConvertI32ToF32 = _BinaryenConvertSInt32ToFloat32(),\r\n  ConvertI32ToF64 = _BinaryenConvertSInt32ToFloat64(),\r\n  ConvertU32ToF32 = _BinaryenConvertUInt32ToFloat32(),\r\n  ConvertU32ToF64 = _BinaryenConvertUInt32ToFloat64(),\r\n  ConvertI64ToF32 = _BinaryenConvertSInt64ToFloat32(),\r\n  ConvertI64ToF64 = _BinaryenConvertSInt64ToFloat64(),\r\n  ConvertU64ToF32 = _BinaryenConvertUInt64ToFloat32(),\r\n  ConvertU64ToF64 = _BinaryenConvertUInt64ToFloat64(),\r\n  PromoteF32 = _BinaryenPromoteFloat32(),\r\n  DemoteF64 = _BinaryenDemoteFloat64(),\r\n  ReinterpretI32 = _BinaryenReinterpretInt32(),\r\n  ReinterpretI64 = _BinaryenReinterpretInt64(),\r\n\r\n  // see: https://github.com/WebAssembly/sign-extension-ops\r\n  ExtendI8ToI32 = _BinaryenExtendS8Int32(),\r\n  ExtendI16ToI32 = _BinaryenExtendS16Int32(),\r\n  ExtendI8ToI64 = _BinaryenExtendS8Int64(),\r\n  ExtendI16ToI64 = _BinaryenExtendS16Int64(),\r\n  ExtendI32ToI64 = _BinaryenExtendS32Int64()\r\n\r\n  // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\r\n  // TruncF32ToI32Sat\r\n  // TruncF32ToU32Sat\r\n  // TruncF64ToI32Sat\r\n  // TruncF64ToU32Sat\r\n  // TruncF32ToI64Sat\r\n  // TruncF32ToU64Sat\r\n  // TruncF64ToI64Sat\r\n  // TruncF64ToU64Sat\r\n}\r\n\r\nexport enum BinaryOp {\r\n  AddI32 = _BinaryenAddInt32(),\r\n  SubI32 = _BinaryenSubInt32(),\r\n  MulI32 = _BinaryenMulInt32(),\r\n  DivI32 = _BinaryenDivSInt32(),\r\n  DivU32 = _BinaryenDivUInt32(),\r\n  RemI32 = _BinaryenRemSInt32(),\r\n  RemU32 = _BinaryenRemUInt32(),\r\n  AndI32 = _BinaryenAndInt32(),\r\n  OrI32 = _BinaryenOrInt32(),\r\n  XorI32 = _BinaryenXorInt32(),\r\n  ShlI32 = _BinaryenShlInt32(),\r\n  ShrU32 = _BinaryenShrUInt32(),\r\n  ShrI32 = _BinaryenShrSInt32(),\r\n  RotlI32 = _BinaryenRotLInt32(),\r\n  RotrI32 = _BinaryenRotRInt32(),\r\n  EqI32 = _BinaryenEqInt32(),\r\n  NeI32 = _BinaryenNeInt32(),\r\n  LtI32 = _BinaryenLtSInt32(),\r\n  LtU32 = _BinaryenLtUInt32(),\r\n  LeI32 = _BinaryenLeSInt32(),\r\n  LeU32 = _BinaryenLeUInt32(),\r\n  GtI32 = _BinaryenGtSInt32(),\r\n  GtU32 = _BinaryenGtUInt32(),\r\n  GeI32 = _BinaryenGeSInt32(),\r\n  GeU32 = _BinaryenGeUInt32(),\r\n  AddI64 = _BinaryenAddInt64(),\r\n  SubI64 = _BinaryenSubInt64(),\r\n  MulI64 = _BinaryenMulInt64(),\r\n  DivI64 = _BinaryenDivSInt64(),\r\n  DivU64 = _BinaryenDivUInt64(),\r\n  RemI64 = _BinaryenRemSInt64(),\r\n  RemU64 = _BinaryenRemUInt64(),\r\n  AndI64 = _BinaryenAndInt64(),\r\n  OrI64 = _BinaryenOrInt64(),\r\n  XorI64 = _BinaryenXorInt64(),\r\n  ShlI64 = _BinaryenShlInt64(),\r\n  ShrU64 = _BinaryenShrUInt64(),\r\n  ShrI64 = _BinaryenShrSInt64(),\r\n  RotlI64 = _BinaryenRotLInt64(),\r\n  RotrI64 = _BinaryenRotRInt64(),\r\n  EqI64 = _BinaryenEqInt64(),\r\n  NeI64 = _BinaryenNeInt64(),\r\n  LtI64 = _BinaryenLtSInt64(),\r\n  LtU64 = _BinaryenLtUInt64(),\r\n  LeI64 = _BinaryenLeSInt64(),\r\n  LeU64 = _BinaryenLeUInt64(),\r\n  GtI64 = _BinaryenGtSInt64(),\r\n  GtU64 = _BinaryenGtUInt64(),\r\n  GeI64 = _BinaryenGeSInt64(),\r\n  GeU64 = _BinaryenGeUInt64(),\r\n  AddF32 = _BinaryenAddFloat32(),\r\n  SubF32 = _BinaryenSubFloat32(),\r\n  MulF32 = _BinaryenMulFloat32(),\r\n  DivF32 = _BinaryenDivFloat32(),\r\n  CopysignF32 = _BinaryenCopySignFloat32(),\r\n  MinF32 = _BinaryenMinFloat32(),\r\n  MaxF32 = _BinaryenMaxFloat32(),\r\n  EqF32 = _BinaryenEqFloat32(),\r\n  NeF32 = _BinaryenNeFloat32(),\r\n  LtF32 = _BinaryenLtFloat32(),\r\n  LeF32 = _BinaryenLeFloat32(),\r\n  GtF32 = _BinaryenGtFloat32(),\r\n  GeF32 = _BinaryenGeFloat32(),\r\n  AddF64 = _BinaryenAddFloat64(),\r\n  SubF64 = _BinaryenSubFloat64(),\r\n  MulF64 = _BinaryenMulFloat64(),\r\n  DivF64 = _BinaryenDivFloat64(),\r\n  CopysignF64 = _BinaryenCopySignFloat64(),\r\n  MinF64 = _BinaryenMinFloat64(),\r\n  MaxF64 = _BinaryenMaxFloat64(),\r\n  EqF64 = _BinaryenEqFloat64(),\r\n  NeF64 = _BinaryenNeFloat64(),\r\n  LtF64 = _BinaryenLtFloat64(),\r\n  LeF64 = _BinaryenLeFloat64(),\r\n  GtF64 = _BinaryenGtFloat64(),\r\n  GeF64 = _BinaryenGeFloat64()\r\n}\r\n\r\nexport enum HostOp {\r\n  PageSize = _BinaryenPageSize(),\r\n  CurrentMemory = _BinaryenCurrentMemory(),\r\n  GrowMemory = _BinaryenGrowMemory(),\r\n  HasFeature = _BinaryenHasFeature(),\r\n\r\n  // see: https://github.com/WebAssembly/bulk-memory-operations\r\n  // MoveMemory\r\n  // SetMemory\r\n}\r\n\r\nexport enum AtomicRMWOp {\r\n  Add = _BinaryenAtomicRMWAdd(),\r\n  Sub = _BinaryenAtomicRMWSub(),\r\n  And = _BinaryenAtomicRMWAnd(),\r\n  Or = _BinaryenAtomicRMWOr(),\r\n  Xor = _BinaryenAtomicRMWXor(),\r\n  Xchg = _BinaryenAtomicRMWXchg()\r\n}\r\n\r\nexport class MemorySegment {\r\n\r\n  buffer: Uint8Array;\r\n  offset: I64;\r\n\r\n  static create(buffer: Uint8Array, offset: I64): MemorySegment {\r\n    var segment = new MemorySegment();\r\n    segment.buffer = buffer;\r\n    segment.offset = offset;\r\n    return segment;\r\n  }\r\n}\r\n\r\nexport class Module {\r\n\r\n  ref: ModuleRef;\r\n\r\n  private cachedByValue: usize;\r\n\r\n  /** Maximum number of pages when targeting WASM32. */\r\n  static readonly MAX_MEMORY_WASM32: Index = 0xffff;\r\n\r\n  /** Maximum number of pages when targeting WASM64. */\r\n  static readonly MAX_MEMORY_WASM64: Index = 0xffff; // TODO\r\n\r\n  static create(): Module {\r\n    var module = new Module();\r\n    module.ref = _BinaryenModuleCreate();\r\n    module.cachedByValue = allocate_memory(16);\r\n    return module;\r\n  }\r\n\r\n  static createFrom(buffer: Uint8Array): Module {\r\n    var cArr = allocU8Array(buffer);\r\n    try {\r\n      let module = new Module();\r\n      module.ref = _BinaryenModuleRead(cArr, buffer.length);\r\n      module.cachedByValue = allocate_memory(3 * 8); // LLVM C-ABI, max used is 3 * usize\r\n      return module;\r\n    } finally {\r\n      free_memory(changetype<usize>(cArr));\r\n    }\r\n  }\r\n\r\n  private constructor() { }\r\n\r\n  // types\r\n\r\n  addFunctionType(\r\n    name: string,\r\n    result: NativeType,\r\n    paramTypes: NativeType[] | null\r\n  ): FunctionRef {\r\n    var cStr = allocString(name);\r\n    var cArr = allocI32Array(paramTypes);\r\n    try {\r\n      return _BinaryenAddFunctionType(this.ref, cStr, result, cArr, paramTypes ? paramTypes.length : 0);\r\n    } finally {\r\n      free_memory(cArr);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  getFunctionTypeBySignature(\r\n    result: NativeType,\r\n    paramTypes: NativeType[] | null\r\n  ): FunctionTypeRef {\r\n    var cArr = allocI32Array(paramTypes);\r\n    try {\r\n      return _BinaryenGetFunctionTypeBySignature(this.ref, result, cArr, paramTypes ? paramTypes.length : 0);\r\n    } finally {\r\n      free_memory(cArr);\r\n    }\r\n  }\r\n\r\n  removeFunctionType(name: string): void {\r\n    var cStr = allocString(name);\r\n    try {\r\n      _BinaryenRemoveFunctionType(this.ref, cStr);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  // constants\r\n\r\n  createI32(value: i32): ExpressionRef {\r\n    var out = this.cachedByValue;\r\n    _BinaryenLiteralInt32(out, value);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  createI64(valueLow: i32, valueHigh: i32 = 0): ExpressionRef {\r\n    var out = this.cachedByValue;\r\n    _BinaryenLiteralInt64(out, valueLow, valueHigh);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  createF32(value: f32): ExpressionRef {\r\n    var out = this.cachedByValue;\r\n    _BinaryenLiteralFloat32(out, value);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  createF64(value: f64): ExpressionRef {\r\n    var out = this.cachedByValue;\r\n    _BinaryenLiteralFloat64(out, value);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  // expressions\r\n\r\n  createUnary(\r\n    op: UnaryOp,\r\n    expr: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenUnary(this.ref, op, expr);\r\n  }\r\n\r\n  createBinary(\r\n    op: BinaryOp,\r\n    left: ExpressionRef,\r\n    right: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenBinary(this.ref, op, left, right);\r\n  }\r\n\r\n  createHost(\r\n    op: HostOp,\r\n    name: string | null = null,\r\n    operands: ExpressionRef[] | null = null\r\n  ): ExpressionRef {\r\n    var cStr = allocString(name);\r\n    var cArr = allocPtrArray(operands);\r\n    try {\r\n      return _BinaryenHost(this.ref, op, cStr, cArr, operands ? (<ExpressionRef[]>operands).length : 0);\r\n    } finally {\r\n      free_memory(cArr);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createGetLocal(\r\n    index: i32,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenGetLocal(this.ref, index, type);\r\n  }\r\n\r\n  createTeeLocal(\r\n    index: i32,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenTeeLocal(this.ref, index, value);\r\n  }\r\n\r\n  createGetGlobal(\r\n    name: string,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    var cStr = allocString(name);\r\n    try {\r\n      return _BinaryenGetGlobal(this.ref, cStr, type);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createLoad(\r\n    bytes: Index,\r\n    signed: bool,\r\n    ptr: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenLoad(this.ref, bytes, signed ? 1 : 0, offset, /* always aligned */ bytes, type, ptr);\r\n  }\r\n\r\n  createStore(\r\n    bytes: Index,\r\n    ptr: ExpressionRef,\r\n    value: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenStore(this.ref, bytes, offset, /* always aligned */ bytes, ptr, value, type);\r\n  }\r\n\r\n  createAtomicLoad(\r\n    bytes: Index,\r\n    ptr: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicLoad(this.ref, bytes, offset, type, ptr);\r\n  }\r\n\r\n  createAtomicStore(\r\n    bytes: Index,\r\n    ptr: ExpressionRef,\r\n    value: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicStore(this.ref, bytes, offset, ptr, value, type);\r\n  }\r\n\r\n  createAtomicRMW(\r\n    op: AtomicRMWOp,\r\n    bytes: Index,\r\n    offset: Index,\r\n    ptr: ExpressionRef,\r\n    value: ExpressionRef,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicRMW(this.ref, op, bytes, offset, ptr, value, type);\r\n  }\r\n\r\n  createAtomicCmpxchg(\r\n    bytes: Index,\r\n    offset: Index,\r\n    ptr: ExpressionRef,\r\n    expected: ExpressionRef,\r\n    replacement: ExpressionRef,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicCmpxchg(this.ref, bytes, offset, ptr, expected, replacement, type);\r\n  }\r\n\r\n  createAtomicWait(\r\n    ptr: ExpressionRef,\r\n    expected: ExpressionRef,\r\n    timeout: ExpressionRef,\r\n    expectedType: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicWait(this.ref, ptr, expected, timeout, expectedType);\r\n  }\r\n\r\n  createAtomicWake(\r\n    ptr: ExpressionRef,\r\n    wakeCount: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicWake(this.ref, ptr, wakeCount);\r\n  }\r\n\r\n  // statements\r\n\r\n  createSetLocal(\r\n    index: Index,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenSetLocal(this.ref, index, value);\r\n  }\r\n\r\n  createSetGlobal(\r\n    name: string,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    var cStr = allocString(name);\r\n    try {\r\n      return _BinaryenSetGlobal(this.ref, cStr, value);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createBlock(\r\n    label: string | null,\r\n    children: ExpressionRef[],\r\n    type: NativeType = NativeType.None\r\n  ): ExpressionRef {\r\n    var cStr = allocString(label);\r\n    var cArr = allocPtrArray(children);\r\n    try {\r\n      return _BinaryenBlock(this.ref, cStr, cArr, children.length, type);\r\n    } finally {\r\n      free_memory(cArr);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createBreak(\r\n    label: string | null,\r\n    condition: ExpressionRef = 0,\r\n    value: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var cStr = allocString(label);\r\n    try {\r\n      return _BinaryenBreak(this.ref, cStr, condition, value);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createDrop(\r\n    expression: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenDrop(this.ref, expression);\r\n  }\r\n\r\n  createLoop(\r\n    label: string | null,\r\n    body: ExpressionRef\r\n  ): ExpressionRef {\r\n    var cStr = allocString(label);\r\n    try {\r\n      return _BinaryenLoop(this.ref, cStr, body);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createIf(\r\n    condition: ExpressionRef,\r\n    ifTrue: ExpressionRef,\r\n    ifFalse: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenIf(this.ref, condition, ifTrue, ifFalse);\r\n  }\r\n\r\n  createNop(): ExpressionRef {\r\n    return _BinaryenNop(this.ref);\r\n  }\r\n\r\n  createReturn(\r\n    expression: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenReturn(this.ref, expression);\r\n  }\r\n\r\n  createSelect(\r\n    ifTrue: ExpressionRef,\r\n    ifFalse: ExpressionRef,\r\n    condition: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenSelect(this.ref, condition, ifTrue, ifFalse);\r\n  }\r\n\r\n  createSwitch(\r\n    names: string[],\r\n    defaultName: string | null,\r\n    condition: ExpressionRef,\r\n    value: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var numNames = names.length;\r\n    var strs = new Array<usize>(numNames);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      strs[i] = allocString(names[i]);\r\n    }\r\n    var cArr = allocI32Array(strs);\r\n    var cStr = allocString(defaultName);\r\n    try {\r\n      return _BinaryenSwitch(this.ref, cArr, numNames, cStr, condition, value);\r\n    } finally {\r\n      free_memory(cStr);\r\n      free_memory(cArr);\r\n      for (let i = numNames - 1; i >= 0; --i) free_memory(strs[i]);\r\n    }\r\n  }\r\n\r\n  createCall(\r\n    target: string,\r\n    operands: ExpressionRef[] | null,\r\n    returnType: NativeType\r\n  ): ExpressionRef {\r\n    var cStr = allocString(target);\r\n    var cArr = allocPtrArray(operands);\r\n    try {\r\n      return _BinaryenCall(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\r\n    } finally {\r\n      free_memory(cArr);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createCallImport(\r\n    target: string,\r\n    operands: ExpressionRef[] | null,\r\n    returnType: NativeType\r\n  ): ExpressionRef {\r\n    var cStr = allocString(target);\r\n    var cArr = allocPtrArray(operands);\r\n    try {\r\n      return _BinaryenCallImport(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\r\n    } finally {\r\n      free_memory(cArr);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createCallIndirect(\r\n    index: ExpressionRef,\r\n    operands: ExpressionRef[] | null,\r\n    typeName: string\r\n  ): ExpressionRef {\r\n    var cArr = allocPtrArray(operands);\r\n    var cStr = allocString(typeName);\r\n    try {\r\n      return _BinaryenCallIndirect(this.ref, index, cArr, operands && operands.length || 0, cStr);\r\n    } finally {\r\n      free_memory(cStr);\r\n      free_memory(cArr);\r\n    }\r\n  }\r\n\r\n  createUnreachable(): ExpressionRef {\r\n    return _BinaryenUnreachable(this.ref);\r\n  }\r\n\r\n  // meta\r\n\r\n  addGlobal(\r\n    name: string,\r\n    type: NativeType,\r\n    mutable: bool,\r\n    initializer: ExpressionRef\r\n  ): GlobalRef {\r\n    var cStr = allocString(name);\r\n    try {\r\n      return _BinaryenAddGlobal(this.ref, cStr, type, mutable ? 1 : 0, initializer);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  addFunction(\r\n    name: string,\r\n    type: FunctionTypeRef,\r\n    varTypes: NativeType[] | null,\r\n    body: ExpressionRef\r\n  ): FunctionRef {\r\n    var cStr = allocString(name);\r\n    var cArr = allocI32Array(varTypes);\r\n    try {\r\n      return _BinaryenAddFunction(this.ref, cStr, type, cArr, varTypes ? varTypes.length : 0, body);\r\n    } finally {\r\n      free_memory(cArr);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  removeFunction(name: string): void {\r\n    var cStr = allocString(name);\r\n    try {\r\n      _BinaryenRemoveFunction(this.ref, cStr);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  private cachedTemporaryName: usize = 0;\r\n  private hasTemporaryFunction: bool = false;\r\n\r\n  addTemporaryFunction(result: NativeType, paramTypes: NativeType[] | null, body: ExpressionRef): FunctionRef {\r\n    this.hasTemporaryFunction = assert(!this.hasTemporaryFunction);\r\n    var tempName = this.cachedTemporaryName;\r\n    if (!tempName) this.cachedTemporaryName = tempName = allocString(\"\"); // works because strings are interned\r\n    var cArr = allocI32Array(paramTypes);\r\n    try {\r\n      let typeRef = _BinaryenAddFunctionType(this.ref, tempName, result, cArr, paramTypes ? paramTypes.length : 0);\r\n      return _BinaryenAddFunction(this.ref, tempName, typeRef, 0, 0, body);\r\n    } finally {\r\n      free_memory(cArr);\r\n    }\r\n  }\r\n\r\n  removeTemporaryFunction(): void {\r\n    this.hasTemporaryFunction = !assert(this.hasTemporaryFunction);\r\n    var tempName = assert(this.cachedTemporaryName);\r\n    _BinaryenRemoveFunction(this.ref, tempName);\r\n    _BinaryenRemoveFunctionType(this.ref, tempName);\r\n  }\r\n\r\n  addFunctionExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalName);\r\n    try {\r\n      return _BinaryenAddFunctionExport(this.ref, cStr1, cStr2);\r\n    } finally {\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  addTableExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalName);\r\n    try {\r\n      return _BinaryenAddTableExport(this.ref, cStr1, cStr2);\r\n    } finally {\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  addMemoryExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalName);\r\n    try {\r\n      return _BinaryenAddMemoryExport(this.ref, cStr1, cStr2);\r\n    } finally {\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  addGlobalExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalName);\r\n    try {\r\n      return _BinaryenAddGlobalExport(this.ref, cStr1, cStr2);\r\n    } finally {\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  removeExport(externalName: string): void {\r\n    var cStr = allocString(externalName);\r\n    try {\r\n      _BinaryenRemoveExport(this.ref, cStr);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  addFunctionImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string,\r\n    functionType: FunctionTypeRef\r\n  ): ImportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalModuleName);\r\n    var cStr3 = allocString(externalBaseName);\r\n    try {\r\n      return _BinaryenAddFunctionImport(this.ref, cStr1, cStr2, cStr3, functionType);\r\n    } finally {\r\n      free_memory(cStr3);\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  addTableImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string\r\n  ): ImportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalModuleName);\r\n    var cStr3 = allocString(externalBaseName);\r\n    try {\r\n      return _BinaryenAddTableImport(this.ref, cStr1, cStr2, cStr3);\r\n    } finally {\r\n      free_memory(cStr3);\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  addMemoryImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string\r\n  ): ImportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalModuleName);\r\n    var cStr3 = allocString(externalBaseName);\r\n    try {\r\n      return _BinaryenAddMemoryImport(this.ref, cStr1, cStr2, cStr3);\r\n    } finally {\r\n      free_memory(cStr3);\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  addGlobalImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string,\r\n    globalType: NativeType\r\n  ): ImportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalModuleName);\r\n    var cStr3 = allocString(externalBaseName);\r\n    try {\r\n      return _BinaryenAddGlobalImport(this.ref, cStr1, cStr2, cStr3, globalType);\r\n    } finally {\r\n      free_memory(cStr3);\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  removeImport(internalName: string): void {\r\n    var cStr = allocString(internalName);\r\n    try {\r\n      _BinaryenRemoveImport(this.ref, cStr);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  setMemory(\r\n    initial: Index,\r\n    maximum: Index,\r\n    segments: MemorySegment[],\r\n    target: Target,\r\n    exportName: string | null = null\r\n  ): void {\r\n    var cStr = allocString(exportName);\r\n    var k = segments.length;\r\n    var segs = new Array<usize>(k);\r\n    var offs = new Array<ExpressionRef>(k);\r\n    var sizs = new Array<Index>(k);\r\n    for (let i = 0; i < k; ++i) {\r\n      let buffer = segments[i].buffer;\r\n      let offset = segments[i].offset;\r\n      segs[i] = allocU8Array(buffer);\r\n      offs[i] = target == Target.WASM64\r\n        ? this.createI64(i64_low(offset), i64_high(offset))\r\n        : this.createI32(i64_low(offset));\r\n      sizs[i] = buffer.length;\r\n    }\r\n    var cArr1 = allocI32Array(segs);\r\n    var cArr2 = allocI32Array(offs);\r\n    var cArr3 = allocI32Array(sizs);\r\n    try {\r\n      _BinaryenSetMemory(this.ref, initial, maximum, cStr, cArr1, cArr2, cArr3, k);\r\n    } finally {\r\n      free_memory(cArr3);\r\n      free_memory(cArr2);\r\n      free_memory(cArr1);\r\n      for (let i = k - 1; i >= 0; --i) free_memory(segs[i]);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  setFunctionTable(funcs: FunctionRef[]): void {\r\n    var cArr = allocPtrArray(funcs);\r\n    try {\r\n      _BinaryenSetFunctionTable(this.ref, cArr, funcs.length);\r\n    } finally {\r\n      free_memory(cArr);\r\n    }\r\n  }\r\n\r\n  setStart(func: FunctionRef): void {\r\n    _BinaryenSetStart(this.ref, func);\r\n  }\r\n\r\n  setOptimizeLevel(level: i32 = 2): void {\r\n    _BinaryenSetOptimizeLevel(level);\r\n  }\r\n\r\n  setShrinkLevel(level: i32 = 1): void {\r\n    _BinaryenSetShrinkLevel(level);\r\n  }\r\n\r\n  setDebugInfo(on: bool = false): void {\r\n    _BinaryenSetDebugInfo(on);\r\n  }\r\n\r\n  optimize(func: FunctionRef = 0): void {\r\n    if (func) {\r\n      _BinaryenFunctionOptimize(func, this.ref);\r\n    } else {\r\n      _BinaryenModuleOptimize(this.ref);\r\n    }\r\n  }\r\n\r\n  runPasses(passes: string[], func: FunctionRef = 0): void {\r\n    var numNames = passes.length;\r\n    var names = new Array<usize>(numNames);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      names[i] = allocString(passes[i]);\r\n    }\r\n    var cArr = allocI32Array(names);\r\n    try {\r\n      if (func) {\r\n        _BinaryenFunctionRunPasses(func, this.ref, cArr, numNames);\r\n      } else {\r\n        _BinaryenModuleRunPasses(this.ref, cArr, numNames);\r\n      }\r\n    } finally {\r\n      free_memory(cArr);\r\n      for (let i = numNames; i >= 0; --i) {\r\n        free_memory(names[i]);\r\n      }\r\n    }\r\n  }\r\n\r\n  private cachedPrecomputeName: usize = 0;\r\n  private cachedPrecomputeNames: usize = 0;\r\n\r\n  precomputeFunction(func: FunctionRef): void {\r\n    var names = this.cachedPrecomputeNames;\r\n    if (!names) {\r\n      let name = allocString(\"precompute\");\r\n      this.cachedPrecomputeName = name;\r\n      this.cachedPrecomputeNames = names = allocI32Array([ name ]);\r\n    }\r\n    _BinaryenFunctionRunPasses(func, this.ref, names, 1);\r\n  }\r\n\r\n  validate(): bool {\r\n    return _BinaryenModuleValidate(this.ref) == 1;\r\n  }\r\n\r\n  interpret(): void {\r\n    _BinaryenModuleInterpret(this.ref);\r\n  }\r\n\r\n  toBinary(sourceMapUrl: string | null): BinaryModule {\r\n    var out = this.cachedByValue;\r\n    var cStr = allocString(sourceMapUrl);\r\n    var binaryPtr: usize = 0;\r\n    var sourceMapPtr: usize = 0;\r\n    try {\r\n      _BinaryenModuleAllocateAndWrite(out, this.ref, cStr);\r\n      binaryPtr = readInt(out);\r\n      let binaryBytes = readInt(out + 4);\r\n      sourceMapPtr = readInt(out + 4 * 2);\r\n      let ret = new BinaryModule();\r\n      ret.output = readBuffer(binaryPtr, binaryBytes);\r\n      ret.sourceMap = readString(sourceMapPtr);\r\n      return ret;\r\n    } finally {\r\n      if (cStr) free_memory(cStr);\r\n      if (binaryPtr) free_memory(binaryPtr);\r\n      if (sourceMapPtr) free_memory(sourceMapPtr);\r\n    }\r\n  }\r\n\r\n  toText(): string {\r\n    throw new Error(\"not implemented\"); // JS glue overrides this\r\n  }\r\n\r\n  toAsmjs(): string {\r\n    throw new Error(\"not implemented\"); // JS glue overrides this\r\n  }\r\n\r\n  dispose(): void {\r\n    assert(this.ref);\r\n    free_memory(this.cachedByValue);\r\n    free_memory(this.cachedTemporaryName);\r\n    free_memory(this.cachedPrecomputeName);\r\n    free_memory(this.cachedPrecomputeNames);\r\n    _BinaryenModuleDispose(this.ref);\r\n    this.ref = 0;\r\n  }\r\n\r\n  createRelooper(): Relooper {\r\n    return Relooper.create(this);\r\n  }\r\n\r\n  cloneExpression(\r\n    expr: ExpressionRef,\r\n    noSideEffects: bool = false,\r\n    maxDepth: i32 = i32.MAX_VALUE\r\n  ): ExpressionRef { // currently supports side effect free expressions only\r\n    if (maxDepth < 0) return 0;\r\n    maxDepth -= 1;\r\n\r\n    var nested1: ExpressionRef,\r\n        nested2: ExpressionRef;\r\n\r\n        switch (_BinaryenExpressionGetId(expr)) {\r\n      case ExpressionId.Const: {\r\n        switch (_BinaryenExpressionGetType(expr)) {\r\n          case NativeType.I32: {\r\n            return this.createI32(_BinaryenConstGetValueI32(expr));\r\n          }\r\n          case NativeType.I64: {\r\n            return this.createI64(\r\n              _BinaryenConstGetValueI64Low(expr),\r\n              _BinaryenConstGetValueI64High(expr)\r\n            );\r\n          }\r\n          case NativeType.F32: {\r\n            return this.createF32(_BinaryenConstGetValueF32(expr));\r\n          }\r\n          case NativeType.F64: {\r\n            return this.createF64(_BinaryenConstGetValueF64(expr));\r\n          }\r\n          default: {\r\n            throw new Error(\"concrete type expected\");\r\n          }\r\n        }\r\n      }\r\n      case ExpressionId.GetLocal: {\r\n        return _BinaryenGetLocal(this.ref,\r\n          _BinaryenGetLocalGetIndex(expr),\r\n          _BinaryenExpressionGetType(expr)\r\n        );\r\n      }\r\n      case ExpressionId.GetGlobal: {\r\n        let globalName = _BinaryenGetGlobalGetName(expr);\r\n        if (!globalName) break;\r\n        return _BinaryenGetGlobal(this.ref, globalName, _BinaryenExpressionGetType(expr));\r\n      }\r\n      case ExpressionId.Load: {\r\n        if (!(nested1 = this.cloneExpression(_BinaryenLoadGetPtr(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        return (\r\n          _BinaryenLoadIsAtomic(expr)\r\n            ? _BinaryenAtomicLoad(this.ref,\r\n                _BinaryenLoadGetBytes(expr),\r\n                _BinaryenLoadGetOffset(expr),\r\n                _BinaryenExpressionGetType(expr),\r\n                nested1\r\n              )\r\n            : _BinaryenLoad(this.ref,\r\n                _BinaryenLoadGetBytes(expr),\r\n                _BinaryenLoadIsSigned(expr) ? 1 : 0,\r\n                _BinaryenLoadGetOffset(expr),\r\n                _BinaryenLoadGetAlign(expr),\r\n                _BinaryenExpressionGetType(expr),\r\n                nested1\r\n              )\r\n        );\r\n      }\r\n      case ExpressionId.Unary: {\r\n        if (!(nested1 = this.cloneExpression(_BinaryenUnaryGetValue(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        return _BinaryenUnary(this.ref, _BinaryenUnaryGetOp(expr), nested1);\r\n      }\r\n      case ExpressionId.Binary: {\r\n        if (!(nested1 = this.cloneExpression(_BinaryenBinaryGetLeft(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        if (!(nested2 = this.cloneExpression(_BinaryenBinaryGetRight(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        return _BinaryenBinary(this.ref, _BinaryenBinaryGetOp(expr), nested1, nested2);\r\n      }\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  // source map generation\r\n\r\n  addDebugInfoFile(name: string): Index {\r\n    var cStr = allocString(name);\r\n    try {\r\n      return _BinaryenModuleAddDebugInfoFileName(this.ref, cStr);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  getDebugInfoFile(index: Index): string | null {\r\n    return readString(_BinaryenModuleGetDebugInfoFileName(this.ref, index));\r\n  }\r\n\r\n  setDebugLocation(\r\n    func: FunctionRef,\r\n    expr: ExpressionRef,\r\n    fileIndex: Index,\r\n    lineNumber: Index,\r\n    columnNumber: Index\r\n  ): void {\r\n    _BinaryenFunctionSetDebugLocation(func, expr, fileIndex, lineNumber, columnNumber);\r\n  }\r\n}\r\n\r\n// expressions\r\n\r\nexport function getExpressionId(expr: ExpressionRef): ExpressionId {\r\n  return _BinaryenExpressionGetId(expr);\r\n}\r\n\r\nexport function getExpressionType(expr: ExpressionRef): NativeType {\r\n  return _BinaryenExpressionGetType(expr);\r\n}\r\n\r\nexport function getConstValueI32(expr: ExpressionRef): i32 {\r\n  return _BinaryenConstGetValueI32(expr);\r\n}\r\n\r\nexport function getConstValueI64Low(expr: ExpressionRef): i32 {\r\n  return _BinaryenConstGetValueI64Low(expr);\r\n}\r\n\r\nexport function getConstValueI64High(expr: ExpressionRef): i32 {\r\n  return _BinaryenConstGetValueI64High(expr);\r\n}\r\n\r\nexport function getConstValueF32(expr: ExpressionRef): f32 {\r\n  return _BinaryenConstGetValueF32(expr);\r\n}\r\n\r\nexport function getConstValueF64(expr: ExpressionRef): f32 {\r\n  return _BinaryenConstGetValueF64(expr);\r\n}\r\n\r\nexport function getGetLocalIndex(expr: ExpressionRef): Index {\r\n  return _BinaryenGetLocalGetIndex(expr);\r\n}\r\n\r\nexport function getSetLocalIndex(expr: ExpressionRef): Index {\r\n  return _BinaryenSetLocalGetIndex(expr);\r\n}\r\n\r\nexport function getSetLocalValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenSetLocalGetValue(expr);\r\n}\r\n\r\nexport function isTeeLocal(expr: ExpressionRef): bool {\r\n  return _BinaryenSetLocalIsTee(expr);\r\n}\r\n\r\nexport function getBinaryOp(expr: ExpressionRef): BinaryOp {\r\n  return _BinaryenBinaryGetOp(expr);\r\n}\r\n\r\nexport function getBinaryLeft(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenBinaryGetLeft(expr);\r\n}\r\n\r\nexport function getBinaryRight(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenBinaryGetRight(expr);\r\n}\r\n\r\nexport function getUnaryOp(expr: ExpressionRef): UnaryOp {\r\n  return _BinaryenUnaryGetOp(expr);\r\n}\r\n\r\nexport function getUnaryValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenUnaryGetValue(expr);\r\n}\r\n\r\nexport function getLoadBytes(expr: ExpressionRef): u32 {\r\n  return _BinaryenLoadGetBytes(expr);\r\n}\r\n\r\nexport function getLoadOffset(expr: ExpressionRef): u32 {\r\n  return _BinaryenLoadGetOffset(expr);\r\n}\r\n\r\nexport function getLoadPtr(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenLoadGetPtr(expr);\r\n}\r\n\r\nexport function isLoadSigned(expr: ExpressionRef): bool {\r\n  return _BinaryenLoadIsSigned(expr);\r\n}\r\n\r\nexport function getStoreBytes(expr: ExpressionRef): u32 {\r\n  return _BinaryenStoreGetBytes(expr);\r\n}\r\n\r\nexport function getStoreOffset(expr: ExpressionRef): u32 {\r\n  return _BinaryenStoreGetOffset(expr);\r\n}\r\n\r\nexport function getStorePtr(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenStoreGetPtr(expr);\r\n}\r\n\r\nexport function getStoreValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenStoreGetValue(expr);\r\n}\r\n\r\nexport function getBlockName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenBlockGetName(expr));\r\n}\r\n\r\nexport function getBlockChildCount(expr: ExpressionRef): Index {\r\n  return _BinaryenBlockGetNumChildren(expr);\r\n}\r\n\r\nexport function getBlockChild(expr: ExpressionRef, index: Index): ExpressionRef {\r\n  return _BinaryenBlockGetChild(expr, index);\r\n}\r\n\r\nexport function getIfCondition(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenIfGetCondition(expr);\r\n}\r\n\r\nexport function getIfTrue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenIfGetIfTrue(expr);\r\n}\r\n\r\nexport function getIfFalse(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenIfGetIfFalse(expr);\r\n}\r\n\r\nexport function getLoopName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenLoopGetName(expr));\r\n}\r\n\r\nexport function getLoopBody(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenLoopGetBody(expr);\r\n}\r\n\r\nexport function getBreakName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenBreakGetName(expr));\r\n}\r\n\r\nexport function getBreakCondition(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenBreakGetCondition(expr);\r\n}\r\n\r\nexport function getSelectThen(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenSelectGetIfTrue(expr);\r\n}\r\n\r\nexport function getSelectElse(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenSelectGetIfFalse(expr);\r\n}\r\n\r\nexport function getSelectCondition(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenSelectGetCondition(expr);\r\n}\r\n\r\nexport function getDropValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenDropGetValue(expr);\r\n}\r\n\r\nexport function getReturnValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenReturnGetValue(expr);\r\n}\r\n\r\nexport function getCallTarget(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenCallGetTarget(expr));\r\n}\r\n\r\nexport function getHostOp(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenHostGetOp(expr);\r\n}\r\n\r\nexport function getHostOperandCount(expr: ExpressionRef): Index {\r\n  return _BinaryenHostGetNumOperands(expr);\r\n}\r\n\r\nexport function getHostOperand(expr: ExpressionRef, index: Index): ExpressionRef {\r\n  return _BinaryenHostGetOperand(expr, index);\r\n}\r\n\r\nexport function getHostName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenHostGetNameOperand(expr));\r\n}\r\n\r\n// functions\r\n\r\nexport function getFunctionBody(func: FunctionRef): ExpressionRef {\r\n  return _BinaryenFunctionGetBody(func);\r\n}\r\n\r\nexport function getFunctionName(func: FunctionRef): string | null {\r\n  return readString(_BinaryenFunctionGetName(func));\r\n}\r\n\r\nexport function getFunctionParamCount(func: FunctionRef): Index {\r\n  return _BinaryenFunctionGetNumParams(func);\r\n}\r\n\r\nexport function getFunctionParamType(func: FunctionRef, index: Index): NativeType {\r\n  return _BinaryenFunctionGetParam(func, index);\r\n}\r\n\r\nexport function getFunctionResultType(func: FunctionRef): NativeType {\r\n  return _BinaryenFunctionGetResult(func);\r\n}\r\n\r\nexport class Relooper {\r\n\r\n  module: Module;\r\n  ref: RelooperRef;\r\n\r\n  static create(module: Module): Relooper {\r\n    var relooper = new Relooper();\r\n    relooper.module = module;\r\n    relooper.ref = _RelooperCreate();\r\n    return relooper;\r\n  }\r\n\r\n  private constructor() {}\r\n\r\n  addBlock(code: ExpressionRef): RelooperBlockRef {\r\n    return _RelooperAddBlock(this.ref, code);\r\n  }\r\n\r\n  addBranch(from: RelooperBlockRef, to: RelooperBlockRef, condition: ExpressionRef = 0, code: ExpressionRef = 0): void {\r\n    _RelooperAddBranch(from, to, condition, code);\r\n  }\r\n\r\n  addBlockWithSwitch(code: ExpressionRef, condition: ExpressionRef): RelooperBlockRef {\r\n    return _RelooperAddBlockWithSwitch(this.ref, code, condition);\r\n  }\r\n\r\n  addBranchForSwitch(from: RelooperBlockRef, to: RelooperBlockRef, indexes: i32[], code: ExpressionRef = 0): void {\r\n    var cArr = allocI32Array(indexes);\r\n    try {\r\n      _RelooperAddBranchForSwitch(from, to, cArr, indexes.length, code);\r\n    } finally {\r\n      free_memory(cArr);\r\n    }\r\n  }\r\n\r\n  renderAndDispose(entry: RelooperBlockRef, labelHelper: Index): ExpressionRef {\r\n    return _RelooperRenderAndDispose(this.ref, entry, labelHelper, this.module.ref);\r\n  }\r\n}\r\n\r\n// export function hasSideEffects(expr: ExpressionRef): bool {\r\n//   switch (_BinaryenExpressionGetId(expr = getPtr(expr))) {\r\n//     case ExpressionId.GetLocal:\r\n//     case ExpressionId.GetGlobal:\r\n//     case ExpressionId.Const:\r\n//     case ExpressionId.Nop:\r\n//     case ExpressionId.Unreachable: {\r\n//       return false;\r\n//     }\r\n//     case ExpressionId.Block: {\r\n//       for (let i = 0, k = _BinaryenBlockGetNumChildren(expr); i < k; ++i) {\r\n//         if (hasSideEffects(_BinaryenBlockGetChild(expr, i))) return true;\r\n//       }\r\n//       return false;\r\n//     }\r\n//     case ExpressionId.If: {\r\n//       return hasSideEffects(_BinaryenIfGetCondition(expr))\r\n//           || hasSideEffects(_BinaryenIfGetIfTrue(expr))\r\n//           || hasSideEffects(_BinaryenIfGetIfFalse(expr));\r\n//     }\r\n//     case ExpressionId.Unary: {\r\n//       return hasSideEffects(_BinaryenUnaryGetValue(expr));\r\n//     }\r\n//     case ExpressionId.Binary: {\r\n//       return hasSideEffects(_BinaryenBinaryGetLeft(expr))\r\n//           || hasSideEffects(_BinaryenBinaryGetRight(expr));\r\n//     }\r\n//     case ExpressionId.Drop: {\r\n//       return hasSideEffects(_BinaryenDropGetValue(expr));\r\n//     }\r\n//     case ExpressionId.Select: {\r\n//       return hasSideEffects(_BinaryenSelectGetIfTrue(expr))\r\n//           || hasSideEffects(_BinaryenSelectGetIfFalse(expr))\r\n//           || hasSideEffects(_BinaryenSelectGetCondition(expr));\r\n//     }\r\n//   }\r\n//   return true;\r\n// }\r\n\r\n// helpers\r\n// can't do stack allocation here: STACKTOP is a global in WASM but a hidden variable in asm.js\r\n\r\nfunction allocU8Array(u8s: Uint8Array | null): usize {\r\n  if (!u8s) return 0;\r\n  var numValues = u8s.length;\r\n  var ptr = allocate_memory(numValues);\r\n  var idx = ptr;\r\n  for (let i = 0; i < numValues; ++i) {\r\n    store<u8>(idx++, u8s[i]);\r\n  }\r\n  return ptr;\r\n}\r\n\r\nfunction allocI32Array(i32s: i32[] | null): usize {\r\n  if (!i32s) return 0;\r\n  var ptr = allocate_memory(i32s.length << 2);\r\n  var idx = ptr;\r\n  for (let i = 0, k = i32s.length; i < k; ++i) {\r\n    let val = i32s[i];\r\n    // store<i32>(idx, val) is not portable\r\n    store<u8>(idx    , ( val         & 0xff) as u8);\r\n    store<u8>(idx + 1, ((val >>   8) & 0xff) as u8);\r\n    store<u8>(idx + 2, ((val >>  16) & 0xff) as u8);\r\n    store<u8>(idx + 3, ( val >>> 24        ) as u8);\r\n    idx += 4;\r\n  }\r\n  return ptr;\r\n}\r\n\r\nfunction allocPtrArray(ptrs: usize[] | null): usize {\r\n  return allocI32Array(ptrs); // TODO: WASM64 one day\r\n}\r\n\r\nfunction stringLengthUTF8(str: string): usize {\r\n  var len = 0;\r\n  for (let i = 0, k = str.length; i < k; ++i) {\r\n    let u = str.charCodeAt(i);\r\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\r\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\r\n    }\r\n    if (u <= 0x7F) {\r\n      ++len;\r\n    } else if (u <= 0x7FF) {\r\n      len += 2;\r\n    } else if (u <= 0xFFFF) {\r\n      len += 3;\r\n    } else if (u <= 0x1FFFFF) {\r\n      len += 4;\r\n    } else if (u <= 0x3FFFFFF) {\r\n      len += 5;\r\n    } else {\r\n      len += 6;\r\n    }\r\n  }\r\n  return len;\r\n}\r\n\r\nfunction allocString(str: string | null): usize {\r\n  if (str == null) return 0;\r\n  var ptr = allocate_memory(stringLengthUTF8(str) + 1);\r\n  // the following is based on Emscripten's stringToUTF8Array\r\n  var idx = ptr;\r\n  for (let i = 0, k = str.length; i < k; ++i) {\r\n    let u = str.charCodeAt(i);\r\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\r\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\r\n    }\r\n    if (u <= 0x7F) {\r\n      store<u8>(idx++, u as u8);\r\n    } else if (u <= 0x7FF) {\r\n      store<u8>(idx++, (0xC0 |  (u >>> 6)       ) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else if (u <= 0xFFFF) {\r\n      store<u8>(idx++, (0xE0 |  (u >>> 12)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else if (u <= 0x1FFFFF) {\r\n      store<u8>(idx++, (0xF0 |  (u >>> 18)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else if (u <= 0x3FFFFFF) {\r\n      store<u8>(idx++, (0xF8 |  (u >>> 24)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else {\r\n      store<u8>(idx++, (0xFC |  (u >>> 30)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 24) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    }\r\n  }\r\n  store<u8>(idx, 0);\r\n  return ptr;\r\n}\r\n\r\nfunction readInt(ptr: usize): i32 {\r\n  return (\r\n     load<u8>(ptr    )        |\r\n    (load<u8>(ptr + 1) <<  8) |\r\n    (load<u8>(ptr + 2) << 16) |\r\n    (load<u8>(ptr + 3) << 24)\r\n  );\r\n}\r\n\r\nfunction readBuffer(ptr: usize, length: usize): Uint8Array {\r\n  var ret = new Uint8Array(length);\r\n  for (let i: usize = 0; i < length; ++i) {\r\n    ret[i] = load<u8>(ptr + i);\r\n  }\r\n  return ret;\r\n}\r\n\r\nexport function readString(ptr: usize): string | null {\r\n  if (!ptr) return null;\r\n  var arr = new Array<i32>();\r\n  // the following is based on Emscripten's UTF8ArrayToString\r\n  var cp: u32;\r\n  var u1: u32, u2: u32, u3: u32, u4: u32, u5: u32;\r\n  while (cp = load<u8>(ptr++)) {\r\n    if (!(cp & 0x80)) {\r\n      arr.push(cp);\r\n      continue;\r\n    }\r\n    u1 = load<u8>(ptr++) & 63;\r\n    if ((cp & 0xE0) == 0xC0) {\r\n      arr.push(((cp & 31) << 6) | u1);\r\n      continue;\r\n    }\r\n    u2 = load<u8>(ptr++) & 63;\r\n    if ((cp & 0xF0) == 0xE0) {\r\n      cp = ((cp & 15) << 12) | (u1 << 6) | u2;\r\n    } else {\r\n      u3 = load<u8>(ptr++) & 63;\r\n      if ((cp & 0xF8) == 0xF0) {\r\n        cp = ((cp & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\r\n      } else {\r\n        u4 = load<u8>(ptr++) & 63;\r\n        if ((cp & 0xFC) == 0xF8) {\r\n          cp = ((cp & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;\r\n        } else {\r\n          u5 = load<u8>(ptr++) & 63;\r\n          cp = ((cp & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;\r\n        }\r\n      }\r\n    }\r\n    arr.push(cp);\r\n    // if (cp < 0x10000) {\r\n    //   arr.push(cp);\r\n    // } else {\r\n    //   var ch = cp - 0x10000;\r\n    //   arr.push(0xD800 | (ch >> 10));\r\n    //   arr.push(0xDC00 | (ch & 0x3FF));\r\n    // }\r\n  }\r\n  // return String.fromCharCodes(arr);\r\n  return String.fromCodePoints(arr);\r\n}\r\n\r\n/** Result structure of {@link Module#toBinary}. */\r\nexport class BinaryModule {\r\n  /** WebAssembly binary. */\r\n  output: Uint8Array;\r\n  /** Source map, if generated. */\r\n  sourceMap: string | null;\r\n}\r\n","/**\r\n * Abstract syntax tree representing a source file once parsed.\r\n * @module ast\r\n *//***/\r\n\r\nimport {\r\n  CommonFlags,\r\n  PATH_DELIMITER,\r\n  STATIC_DELIMITER,\r\n  INSTANCE_DELIMITER,\r\n  LIBRARY_PREFIX\r\n} from \"./program\";\r\n\r\nimport {\r\n  Token,\r\n  Tokenizer,\r\n  Range\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  normalizePath,\r\n  resolvePath,\r\n  CharCode\r\n} from \"./util\";\r\n\r\nexport { Token, Range };\r\n\r\n/** Indicates the kind of a node. */\r\nexport enum NodeKind {\r\n\r\n  SOURCE,\r\n\r\n  // types\r\n  TYPE,\r\n  TYPEPARAMETER,\r\n  PARAMETER,\r\n  SIGNATURE,\r\n\r\n  // expressions\r\n  IDENTIFIER,\r\n  ASSERTION,\r\n  BINARY,\r\n  CALL,\r\n  COMMA,\r\n  ELEMENTACCESS,\r\n  FALSE,\r\n  FUNCTION,\r\n  LITERAL,\r\n  NEW,\r\n  NULL,\r\n  PARENTHESIZED,\r\n  PROPERTYACCESS,\r\n  TERNARY,\r\n  SUPER,\r\n  THIS,\r\n  TRUE,\r\n  CONSTRUCTOR,\r\n  UNARYPOSTFIX,\r\n  UNARYPREFIX,\r\n\r\n  // statements\r\n  BLOCK,\r\n  BREAK,\r\n  CONTINUE,\r\n  DO,\r\n  EMPTY,\r\n  EXPORT,\r\n  EXPORTIMPORT,\r\n  EXPRESSION,\r\n  FOR,\r\n  IF,\r\n  IMPORT,\r\n  RETURN,\r\n  SWITCH,\r\n  THROW,\r\n  TRY,\r\n  VARIABLE,\r\n  VOID,\r\n  WHILE,\r\n\r\n  // declaration statements\r\n  CLASSDECLARATION,\r\n  ENUMDECLARATION,\r\n  ENUMVALUEDECLARATION,\r\n  FIELDDECLARATION,\r\n  FUNCTIONDECLARATION,\r\n  IMPORTDECLARATION,\r\n  INTERFACEDECLARATION,\r\n  METHODDECLARATION,\r\n  NAMESPACEDECLARATION,\r\n  TYPEDECLARATION,\r\n  VARIABLEDECLARATION,\r\n\r\n  // special\r\n  DECORATOR,\r\n  EXPORTMEMBER,\r\n  SWITCHCASE,\r\n  COMMENT\r\n}\r\n\r\n/** Base class of all nodes. */\r\nexport abstract class Node {\r\n\r\n  /** Node kind indicator. */\r\n  kind: NodeKind;\r\n  /** Source range. */\r\n  range: Range;\r\n  /** Parent node. */\r\n  parent: Node | null = null;\r\n  /** Common flags indicating specific traits. */\r\n  flags: CommonFlags = CommonFlags.NONE;\r\n\r\n  /** Tests if this node has the specified flag or flags. */\r\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Tests if this node has one of the specified flags. */\r\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\r\n  /** Sets a specific flag or flags. */\r\n  set(flag: CommonFlags): void { this.flags |= flag; }\r\n\r\n  // types\r\n\r\n  static createType(\r\n    name: IdentifierExpression,\r\n    typeArguments: CommonTypeNode[] | null,\r\n    isNullable: bool,\r\n    range: Range\r\n  ): TypeNode {\r\n    var type = new TypeNode();\r\n    type.range = range;\r\n    type.name = name; name.parent = type;\r\n    type.typeArguments = typeArguments; if (typeArguments) setParent(typeArguments, type);\r\n    type.isNullable = isNullable;\r\n    return type;\r\n  }\r\n\r\n  static createOmittedType(\r\n    range: Range\r\n  ): TypeNode {\r\n    return Node.createType(\r\n      Node.createIdentifierExpression(\"\", range),\r\n      null,\r\n      false,\r\n      range\r\n    );\r\n  }\r\n\r\n  static createTypeParameter(\r\n    name: IdentifierExpression,\r\n    extendsType: TypeNode | null,\r\n    range: Range\r\n  ): TypeParameterNode {\r\n    var elem = new TypeParameterNode();\r\n    elem.range = range;\r\n    elem.name = name; name.parent = elem;\r\n    elem.extendsType = extendsType; if (extendsType) extendsType.parent = elem;\r\n    return elem;\r\n  }\r\n\r\n  static createParameter(\r\n    name: IdentifierExpression,\r\n    type: CommonTypeNode,\r\n    initializer: Expression | null,\r\n    kind: ParameterKind,\r\n    range: Range\r\n  ): ParameterNode {\r\n    var elem = new ParameterNode();\r\n    elem.range = range;\r\n    elem.name = name; name.parent = elem;\r\n    elem.type = type; if (type) type.parent = elem;\r\n    elem.initializer = initializer; if (initializer) initializer.parent = elem;\r\n    elem.parameterKind = kind;\r\n    return elem;\r\n  }\r\n\r\n  static createSignature(\r\n    parameters: ParameterNode[],\r\n    returnType: CommonTypeNode,\r\n    explicitThisType: TypeNode | null,\r\n    isNullable: bool,\r\n    range: Range\r\n  ): SignatureNode {\r\n    var sig = new SignatureNode();\r\n    sig.range = range;\r\n    sig.parameters = parameters; setParent(parameters, sig);\r\n    sig.returnType = returnType; returnType.parent = sig;\r\n    sig.explicitThisType = explicitThisType; if (explicitThisType) explicitThisType.parent = sig;\r\n    sig.isNullable = isNullable;\r\n    return sig;\r\n  }\r\n\r\n  // special\r\n\r\n  static createDecorator(\r\n    expression: Expression,\r\n    args: Expression[] | null,\r\n    range: Range\r\n  ): DecoratorNode {\r\n    var stmt = new DecoratorNode();\r\n    stmt.range = range;\r\n    stmt.name = expression; expression.parent = stmt;\r\n    stmt.arguments = args; if (args) setParent(args, stmt);\r\n    stmt.decoratorKind = expression.kind == NodeKind.IDENTIFIER\r\n      ? stringToDecoratorKind((<IdentifierExpression>expression).text)\r\n      : DecoratorKind.CUSTOM;\r\n    return stmt;\r\n  }\r\n\r\n  static createComment(\r\n    text: string,\r\n    kind: CommentKind,\r\n    range: Range\r\n  ): CommentNode {\r\n    var node = new CommentNode();\r\n    node.range = range;\r\n    node.commentKind = kind;\r\n    node.text = text;\r\n    return node;\r\n  }\r\n\r\n  // expressions\r\n\r\n  static createIdentifierExpression(\r\n    name: string,\r\n    range: Range\r\n  ): IdentifierExpression {\r\n    var expr = new IdentifierExpression();\r\n    expr.range = range;\r\n    expr.text = name;\r\n    return expr;\r\n  }\r\n\r\n  static createEmptyIdentifierExpression(\r\n    range: Range\r\n  ): IdentifierExpression {\r\n    var expr = new IdentifierExpression();\r\n    expr.range = range;\r\n    expr.text = \"\";\r\n    return expr;\r\n  }\r\n\r\n  static createArrayLiteralExpression(\r\n    elements: (Expression | null)[],\r\n    range: Range\r\n  ): ArrayLiteralExpression {\r\n    var expr = new ArrayLiteralExpression();\r\n    expr.range = range;\r\n    expr.elementExpressions = elements; setParentIfNotNull(elements, expr);\r\n    return expr;\r\n  }\r\n\r\n  static createAssertionExpression(\r\n    assertionKind: AssertionKind,\r\n    expression: Expression,\r\n    toType: CommonTypeNode,\r\n    range: Range\r\n  ): AssertionExpression {\r\n    var expr = new AssertionExpression();\r\n    expr.range = range;\r\n    expr.assertionKind = assertionKind;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.toType = toType; toType.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createBinaryExpression(\r\n    operator: Token,\r\n    left: Expression,\r\n    right: Expression,\r\n    range: Range\r\n  ): BinaryExpression {\r\n    var expr = new BinaryExpression();\r\n    expr.range = range;\r\n    expr.operator = operator;\r\n    expr.left = left; left.parent = expr;\r\n    expr.right = right; right.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createCallExpression(\r\n    expression: Expression,\r\n    typeArgs: CommonTypeNode[] | null,\r\n    args: Expression[],\r\n    range: Range\r\n  ): CallExpression {\r\n    var expr = new CallExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.typeArguments = typeArgs; if (typeArgs) setParent(typeArgs, expr);\r\n    expr.arguments = args; setParent(args, expr);\r\n    return expr;\r\n  }\r\n\r\n  static createCommaExpression(\r\n    expressions: Expression[],\r\n    range: Range\r\n  ): CommaExpression {\r\n    var expr = new CommaExpression();\r\n    expr.range = range;\r\n    expr.expressions = expressions; setParent(expressions, expr);\r\n    return expr;\r\n  }\r\n\r\n  static createConstructorExpression(\r\n    range: Range\r\n  ): ConstructorExpression {\r\n    var expr = new ConstructorExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createElementAccessExpression(\r\n    expression: Expression,\r\n    element: Expression,\r\n    range: Range\r\n  ): ElementAccessExpression {\r\n    var expr = new ElementAccessExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.elementExpression = element; element.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createFalseExpression(\r\n    range: Range\r\n  ): FalseExpression {\r\n    var expr = new FalseExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createFloatLiteralExpression(\r\n    value: f64,\r\n    range: Range\r\n  ): FloatLiteralExpression {\r\n    var expr = new FloatLiteralExpression();\r\n    expr.range = range;\r\n    expr.value = value;\r\n    return expr;\r\n  }\r\n\r\n  static createFunctionExpression(\r\n    declaration: FunctionDeclaration\r\n  ): FunctionExpression {\r\n    var expr = new FunctionExpression();\r\n    expr.flags = declaration.flags & CommonFlags.ARROW;\r\n    expr.range = declaration.range;\r\n    expr.declaration = declaration;\r\n    return expr;\r\n  }\r\n\r\n  static createIntegerLiteralExpression(\r\n    value: I64,\r\n    range: Range\r\n  ): IntegerLiteralExpression {\r\n    var expr = new IntegerLiteralExpression();\r\n    expr.range = range;\r\n    expr.value = value;\r\n    return expr;\r\n  }\r\n\r\n  static createNewExpression(\r\n    expression: Expression,\r\n    typeArgs: CommonTypeNode[] | null,\r\n    args: Expression[],\r\n    range: Range\r\n  ): NewExpression {\r\n    var expr = new NewExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.typeArguments = typeArgs; if (typeArgs) setParent(typeArgs, expr);\r\n    expr.arguments = args; setParent(args, expr);\r\n    return expr;\r\n  }\r\n\r\n  static createNullExpression(\r\n    range: Range\r\n  ): NullExpression {\r\n    var expr = new NullExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createParenthesizedExpression(\r\n    expression: Expression,\r\n    range: Range\r\n  ): ParenthesizedExpression {\r\n    var expr = new ParenthesizedExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createPropertyAccessExpression(\r\n    expression: Expression,\r\n    property: IdentifierExpression,\r\n    range: Range\r\n  ): PropertyAccessExpression {\r\n    var expr = new PropertyAccessExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.property = property; property.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createRegexpLiteralExpression(\r\n    pattern: string,\r\n    flags: string,\r\n    range: Range\r\n  ): RegexpLiteralExpression {\r\n    var expr = new RegexpLiteralExpression();\r\n    expr.range = range;\r\n    expr.pattern = pattern;\r\n    expr.patternFlags = flags;\r\n    return expr;\r\n  }\r\n\r\n  static createTernaryExpression(\r\n    condition: Expression,\r\n    ifThen: Expression,\r\n    ifElse: Expression,\r\n    range: Range\r\n  ): TernaryExpression {\r\n    var expr = new TernaryExpression();\r\n    expr.range = range;\r\n    expr.condition = condition; condition.parent = expr;\r\n    expr.ifThen = ifThen; ifThen.parent = expr;\r\n    expr.ifElse = ifElse; ifElse.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createStringLiteralExpression(\r\n    value: string,\r\n    range: Range\r\n  ): StringLiteralExpression {\r\n    var expr = new StringLiteralExpression();\r\n    expr.range = range;\r\n    expr.value = value;\r\n    return expr;\r\n  }\r\n\r\n  static createSuperExpression(\r\n    range: Range\r\n  ): SuperExpression {\r\n    var expr = new SuperExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createThisExpression(\r\n    range: Range\r\n  ): ThisExpression {\r\n    var expr = new ThisExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createTrueExpression(\r\n    range: Range\r\n  ): TrueExpression {\r\n    var expr = new TrueExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createUnaryPostfixExpression(\r\n    operator: Token,\r\n    operand: Expression,\r\n    range: Range\r\n  ): UnaryPostfixExpression {\r\n    var expr = new UnaryPostfixExpression();\r\n    expr.range = range;\r\n    expr.operator = operator;\r\n    expr.operand = operand; operand.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createUnaryPrefixExpression(\r\n    operator: Token,\r\n    operand: Expression,\r\n    range: Range\r\n  ): UnaryPrefixExpression {\r\n    var expr = new UnaryPrefixExpression();\r\n    expr.range = range;\r\n    expr.operator = operator;\r\n    expr.operand = operand; operand.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  // statements\r\n\r\n  static createBlockStatement(\r\n    statements: Statement[],\r\n    range: Range\r\n  ): BlockStatement {\r\n    var stmt = new BlockStatement();\r\n    stmt.range = range;\r\n    stmt.statements = statements; setParent(statements, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createBreakStatement(\r\n    label: IdentifierExpression | null,\r\n    range: Range\r\n  ): BreakStatement {\r\n    var stmt = new BreakStatement();\r\n    stmt.range = range;\r\n    stmt.label = label; if (label) label.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createClassDeclaration(\r\n    identifier: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[],\r\n    extendsType: TypeNode | null, // can't be a function\r\n    implementsTypes: TypeNode[] | null, // can't be functions\r\n    members: DeclarationStatement[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): ClassDeclaration {\r\n    var stmt = new ClassDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = identifier; identifier.parent = stmt;\r\n    stmt.typeParameters = typeParameters; setParent(typeParameters, stmt);\r\n    stmt.extendsType = extendsType; if (extendsType) extendsType.parent = stmt;\r\n    stmt.implementsTypes = implementsTypes; if (implementsTypes) setParent(implementsTypes, stmt);\r\n    stmt.members = members; setParent(members, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createContinueStatement(\r\n    label: IdentifierExpression | null,\r\n    range: Range\r\n  ): ContinueStatement {\r\n    var stmt = new ContinueStatement();\r\n    stmt.range = range;\r\n    stmt.label = label; if (label) label.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createDoStatement(\r\n    statement: Statement,\r\n    condition: Expression,\r\n    range: Range\r\n  ): DoStatement {\r\n    var stmt = new DoStatement();\r\n    stmt.range = range;\r\n    stmt.statement = statement; statement.parent = stmt;\r\n    stmt.condition = condition; condition.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createEmptyStatement(\r\n    range: Range\r\n  ): EmptyStatement {\r\n    var stmt = new EmptyStatement();\r\n    stmt.range = range;\r\n    return stmt;\r\n  }\r\n\r\n  static createEnumDeclaration(\r\n    name: IdentifierExpression,\r\n    members: EnumValueDeclaration[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): EnumDeclaration {\r\n    var stmt = new EnumDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.values = members; setParent(members, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createEnumValueDeclaration(\r\n    name: IdentifierExpression,\r\n    value: Expression | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): EnumValueDeclaration {\r\n    var stmt = new EnumValueDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.value = value; if (value) value.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createExportStatement(\r\n    members: ExportMember[],\r\n    path: StringLiteralExpression | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): ExportStatement {\r\n    var stmt = new ExportStatement();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.members = members; setParent(members, stmt);\r\n    stmt.path = path;\r\n    if (path) {\r\n      let normalizedPath = normalizePath(path.value);\r\n      if (path.value.startsWith(\".\")) { // relative\r\n        stmt.normalizedPath = resolvePath(\r\n          normalizedPath,\r\n          range.source.normalizedPath\r\n        );\r\n      } else { // absolute\r\n        stmt.normalizedPath = normalizedPath;\r\n      }\r\n      stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\r\n    } else {\r\n      stmt.normalizedPath = null;\r\n      stmt.internalPath = null;\r\n    }\r\n    return stmt;\r\n  }\r\n\r\n  static createExportImportStatement(\r\n    name: IdentifierExpression,\r\n    externalName: IdentifierExpression,\r\n    range: Range\r\n  ): ExportImportStatement {\r\n    var stmt = new ExportImportStatement();\r\n    stmt.range = range;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.externalName = externalName; externalName.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createExportMember(\r\n    name: IdentifierExpression,\r\n    externalName: IdentifierExpression | null,\r\n    range: Range\r\n  ): ExportMember {\r\n    var elem = new ExportMember();\r\n    elem.range = range;\r\n    elem.name = name; name.parent = elem;\r\n    if (!externalName) {\r\n      externalName = name;\r\n    } else {\r\n      externalName.parent = elem;\r\n    }\r\n    elem.externalName = externalName;\r\n    return elem;\r\n  }\r\n\r\n  static createExpressionStatement(\r\n    expression: Expression\r\n  ): ExpressionStatement {\r\n    var stmt = new ExpressionStatement();\r\n    stmt.range = expression.range;\r\n    stmt.expression = expression; expression.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createIfStatement(\r\n    condition: Expression,\r\n    ifTrue: Statement,\r\n    ifFalse: Statement | null,\r\n    range: Range\r\n  ): IfStatement {\r\n    var stmt = new IfStatement();\r\n    stmt.range = range;\r\n    stmt.condition = condition; condition.parent = stmt;\r\n    stmt.ifTrue = ifTrue; ifTrue.parent = stmt;\r\n    stmt.ifFalse = ifFalse; if (ifFalse) ifFalse.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createImportStatement(\r\n    decls: ImportDeclaration[] | null,\r\n    path: StringLiteralExpression,\r\n    range: Range\r\n  ): ImportStatement {\r\n    var stmt = new ImportStatement();\r\n    stmt.range = range;\r\n    stmt.declarations = decls; if (decls) setParent(decls, stmt);\r\n    stmt.namespaceName = null;\r\n    stmt.path = path;\r\n    var normalizedPath = normalizePath(path.value);\r\n    if (path.value.startsWith(\".\")) { // relative in project\r\n      stmt.normalizedPath = resolvePath(\r\n        normalizedPath,\r\n        range.source.normalizedPath\r\n      );\r\n    } else { // absolute in library\r\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) {\r\n        normalizedPath = LIBRARY_PREFIX + normalizedPath;\r\n      }\r\n      stmt.normalizedPath = normalizedPath;\r\n    }\r\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\r\n    return stmt;\r\n  }\r\n\r\n  static createImportStatementWithWildcard(\r\n    identifier: IdentifierExpression,\r\n    path: StringLiteralExpression,\r\n    range: Range\r\n  ): ImportStatement {\r\n    var stmt = new ImportStatement();\r\n    stmt.range = range;\r\n    stmt.declarations = null;\r\n    stmt.namespaceName = identifier;\r\n    stmt.path = path;\r\n    stmt.normalizedPath = resolvePath(\r\n      normalizePath(path.value),\r\n      range.source.normalizedPath\r\n    );\r\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\r\n    return stmt;\r\n  }\r\n\r\n  static createImportDeclaration(\r\n    externalName: IdentifierExpression,\r\n    name: IdentifierExpression | null,\r\n    range: Range\r\n  ): ImportDeclaration {\r\n    var elem = new ImportDeclaration();\r\n    elem.range = range;\r\n    elem.externalName = externalName; externalName.parent = elem;\r\n    if (!name) {\r\n      name = externalName;\r\n    } else {\r\n      name.parent = elem;\r\n    }\r\n    elem.name = name;\r\n    return elem;\r\n  }\r\n\r\n  static createInterfaceDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[],\r\n    extendsType: TypeNode | null, // can't be a function\r\n    members: DeclarationStatement[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): InterfaceDeclaration {\r\n    var stmt = new InterfaceDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\r\n    stmt.extendsType = extendsType; if (extendsType) extendsType.parent = stmt;\r\n    stmt.members = members; setParent(members, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createFieldDeclaration(\r\n    name: IdentifierExpression,\r\n    type: CommonTypeNode | null,\r\n    initializer: Expression | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): FieldDeclaration {\r\n    var stmt = new FieldDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.type = type; if (type) type.parent = stmt;\r\n    stmt.initializer = initializer; if (initializer) initializer.parent = stmt;\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createForStatement(\r\n    initializer: Statement | null,\r\n    condition: Expression | null,\r\n    incrementor: Expression | null,\r\n    statement: Statement,\r\n    range: Range\r\n  ): ForStatement {\r\n    var stmt = new ForStatement();\r\n    stmt.range = range;\r\n    stmt.initializer = initializer; if (initializer) initializer.parent = stmt;\r\n    stmt.condition = condition; if (condition) condition.parent = stmt;\r\n    stmt.incrementor = incrementor; if (incrementor) incrementor.parent = stmt;\r\n    stmt.statement = statement; statement.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createFunctionDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    signature: SignatureNode,\r\n    body: Statement | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): FunctionDeclaration {\r\n    var stmt = new FunctionDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\r\n    stmt.signature = signature; signature.parent = stmt;\r\n    stmt.body = body; if (body) body.parent = stmt;\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createMethodDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    signature: SignatureNode,\r\n    body: Statement | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): MethodDeclaration {\r\n    var stmt = new MethodDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\r\n    stmt.signature = signature; signature.parent = stmt;\r\n    stmt.body = body; if (body) body.parent = stmt;\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createNamespaceDeclaration(\r\n    name: IdentifierExpression,\r\n    members: Statement[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): NamespaceDeclaration {\r\n    var stmt = new NamespaceDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.members = members; setParent(members, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createReturnStatement(\r\n    value: Expression | null,\r\n    range: Range\r\n  ): ReturnStatement {\r\n    var stmt = new ReturnStatement();\r\n    stmt.range = range;\r\n    stmt.value = value; if (value) value.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createSwitchStatement(\r\n    condition: Expression,\r\n    cases: SwitchCase[],\r\n    range: Range\r\n  ): SwitchStatement {\r\n    var stmt = new SwitchStatement();\r\n    stmt.range = range;\r\n    stmt.condition = condition; condition.parent = stmt;\r\n    stmt.cases = cases; setParent(cases, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createSwitchCase(\r\n    label: Expression | null,\r\n    statements: Statement[],\r\n    range: Range\r\n  ): SwitchCase {\r\n    var elem = new SwitchCase();\r\n    elem.range = range;\r\n    elem.label = label; if (label) label.parent = elem;\r\n    elem.statements = statements; setParent(statements, elem);\r\n    return elem;\r\n  }\r\n\r\n  static createThrowStatement(\r\n    value: Expression,\r\n    range: Range\r\n  ): ThrowStatement {\r\n    var stmt = new ThrowStatement();\r\n    stmt.range = range;\r\n    stmt.value = value; value.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createTryStatement(\r\n    statements: Statement[],\r\n    catchVariable: IdentifierExpression | null,\r\n    catchStatements: Statement[] | null,\r\n    finallyStatements: Statement[] | null,\r\n    range: Range\r\n  ): TryStatement {\r\n    var stmt = new TryStatement();\r\n    stmt.range = range;\r\n    stmt.statements = statements; setParent(statements, stmt);\r\n    stmt.catchVariable = catchVariable;\r\n    if (catchVariable) catchVariable.parent = stmt;\r\n    stmt.catchStatements = catchStatements;\r\n    if (catchStatements) setParent(catchStatements, stmt);\r\n    stmt.finallyStatements = finallyStatements;\r\n    if (finallyStatements) setParent(finallyStatements, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createTypeDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    alias: CommonTypeNode,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): TypeDeclaration {\r\n    var stmt = new TypeDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\r\n    stmt.type = alias; alias.parent = stmt;\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createVariableStatement(\r\n    declarations: VariableDeclaration[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): VariableStatement {\r\n    var stmt = new VariableStatement();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.declarations = declarations; setParent(declarations, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createVariableDeclaration(\r\n    name: IdentifierExpression,\r\n    type: CommonTypeNode | null,\r\n    initializer: Expression | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): VariableDeclaration {\r\n    var elem = new VariableDeclaration();\r\n    elem.range = range;\r\n    elem.flags = flags;\r\n    elem.name = name; name.parent = elem;\r\n    elem.type = type; if (type) type.parent = elem;\r\n    elem.initializer = initializer; if (initializer) initializer.parent = elem;\r\n    elem.decorators = decorators; // inherited\r\n    return elem;\r\n  }\r\n\r\n  static createVoidStatement(\r\n    expression: Expression,\r\n    range: Range\r\n  ): VoidStatement {\r\n    var stmt = new VoidStatement();\r\n    stmt.range = range;\r\n    stmt.expression = expression;\r\n    return stmt;\r\n  }\r\n\r\n  static createWhileStatement(\r\n    condition: Expression,\r\n    statement: Statement,\r\n    range: Range\r\n  ): WhileStatement {\r\n    var stmt = new WhileStatement();\r\n    stmt.range = range;\r\n    stmt.condition = condition; condition.parent = stmt;\r\n    stmt.statement = statement; statement.parent = stmt;\r\n    return stmt;\r\n  }\r\n}\r\n\r\n// types\r\n\r\nexport abstract class CommonTypeNode extends Node {\r\n  // kind varies\r\n\r\n  /** Whether nullable or not. */\r\n  isNullable: bool;\r\n}\r\n\r\n/** Represents a type annotation. */\r\nexport class TypeNode extends CommonTypeNode {\r\n  kind = NodeKind.TYPE;\r\n\r\n  /** Identifier reference. */\r\n  name: IdentifierExpression;\r\n  /** Type argument references. */\r\n  typeArguments: CommonTypeNode[] | null;\r\n}\r\n\r\n/** Represents a type parameter. */\r\nexport class TypeParameterNode extends Node {\r\n  kind = NodeKind.TYPEPARAMETER;\r\n\r\n  /** Identifier reference. */\r\n  name: IdentifierExpression;\r\n  /** Extended type reference, if any. */\r\n  extendsType: TypeNode | null; // can't be a function\r\n}\r\n\r\n/** Represents the kind of a parameter. */\r\nexport enum ParameterKind {\r\n  /** No specific flags. */\r\n  DEFAULT,\r\n  /** Is an optional parameter. */\r\n  OPTIONAL,\r\n  /** Is a rest parameter. */\r\n  REST\r\n}\r\n\r\n/** Represents a function parameter. */\r\nexport class ParameterNode extends Node {\r\n  kind = NodeKind.PARAMETER;\r\n\r\n  /** Parameter kind. */\r\n  parameterKind: ParameterKind;\r\n  /** Parameter name. */\r\n  name: IdentifierExpression;\r\n  /** Parameter type. */\r\n  type: CommonTypeNode;\r\n  /** Initializer expression, if present. */\r\n  initializer: Expression | null;\r\n  /** Implicit field declaration, if applicable. */\r\n  implicitFieldDeclaration: FieldDeclaration | null = null;\r\n}\r\n\r\n/** Represents a function signature. */\r\nexport class SignatureNode extends CommonTypeNode {\r\n  kind = NodeKind.SIGNATURE;\r\n\r\n  /** Accepted parameters. */\r\n  parameters: ParameterNode[];\r\n  /** Return type. */\r\n  returnType: CommonTypeNode;\r\n  /** Explicitly provided this type, if any. */\r\n  explicitThisType: TypeNode | null; // can't be a function\r\n}\r\n\r\n// special\r\n\r\n/** Built-in decorator kinds. */\r\nexport enum DecoratorKind {\r\n  CUSTOM,\r\n  GLOBAL,\r\n  OPERATOR,\r\n  UNMANAGED,\r\n  SEALED,\r\n  INLINE\r\n}\r\n\r\n/** Returns the decorator kind represented by the specified string. */\r\nexport function stringToDecoratorKind(str: string): DecoratorKind {\r\n  assert(str.length);\r\n  switch (str.charCodeAt(0)) {\r\n    case CharCode.g: {\r\n      if (str == \"global\") return DecoratorKind.GLOBAL;\r\n      break;\r\n    }\r\n    case CharCode.i: {\r\n      if (str == \"inline\") return DecoratorKind.INLINE;\r\n      break;\r\n    }\r\n    case CharCode.o: {\r\n      if (str == \"operator\") return DecoratorKind.OPERATOR;\r\n      break;\r\n    }\r\n    case CharCode.s: {\r\n      if (str == \"sealed\") return DecoratorKind.SEALED;\r\n      break;\r\n    }\r\n    case CharCode.u: {\r\n      if (str == \"unmanaged\") return DecoratorKind.UNMANAGED;\r\n      break;\r\n    }\r\n  }\r\n  return DecoratorKind.CUSTOM;\r\n}\r\n\r\n/** Represents a decorator. */\r\nexport class DecoratorNode extends Node {\r\n  kind = NodeKind.DECORATOR;\r\n\r\n  /** Built-in kind, if applicable. */\r\n  decoratorKind: DecoratorKind;\r\n  /** Name expression. */\r\n  name: Expression;\r\n  /** Argument expressions. */\r\n  arguments: Expression[] | null;\r\n}\r\n\r\n/** Comment kinds. */\r\nexport enum CommentKind {\r\n  /** Line comment. */\r\n  LINE,\r\n  /** Triple-slash comment. */\r\n  TRIPLE,\r\n  /** Block comment. */\r\n  BLOCK\r\n}\r\n\r\n/** Represents a comment. */\r\nexport class CommentNode extends Node {\r\n  kind = NodeKind.COMMENT;\r\n\r\n  /** Comment kind. */\r\n  commentKind: CommentKind;\r\n  /** Comment text. */\r\n  text: string;\r\n}\r\n\r\n// expressions\r\n\r\n/** Base class of all expression nodes. */\r\nexport abstract class Expression extends Node { }\r\n\r\n/** Represents an identifier expression. */\r\nexport class IdentifierExpression extends Expression {\r\n  kind = NodeKind.IDENTIFIER;\r\n\r\n  /** Textual name. */\r\n  text: string;\r\n}\r\n\r\n/** Indicates the kind of a literal. */\r\nexport enum LiteralKind {\r\n  FLOAT,\r\n  INTEGER,\r\n  STRING,\r\n  REGEXP,\r\n  ARRAY,\r\n  OBJECT\r\n}\r\n\r\n/** Base class of all literal expressions. */\r\nexport abstract class LiteralExpression extends Expression {\r\n  kind = NodeKind.LITERAL;\r\n\r\n  /** Specific literal kind. */\r\n  literalKind: LiteralKind;\r\n}\r\n\r\n/** Represents an `[]` literal expression. */\r\nexport class ArrayLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.ARRAY;\r\n\r\n  /** Nested element expressions. */\r\n  elementExpressions: (Expression | null)[];\r\n}\r\n\r\n/** Indicates the kind of an assertion. */\r\nexport enum AssertionKind {\r\n  PREFIX,\r\n  AS\r\n}\r\n\r\n/** Represents an assertion expression. */\r\nexport class AssertionExpression extends Expression {\r\n  kind = NodeKind.ASSERTION;\r\n\r\n  /** Specific kind of this assertion. */\r\n  assertionKind: AssertionKind;\r\n  /** Expression being asserted. */\r\n  expression: Expression;\r\n  /** Target type. */\r\n  toType: CommonTypeNode;\r\n}\r\n\r\n/** Represents a binary expression. */\r\nexport class BinaryExpression extends Expression {\r\n  kind = NodeKind.BINARY;\r\n\r\n  /** Operator token. */\r\n  operator: Token;\r\n  /** Left-hand side expression */\r\n  left: Expression;\r\n  /** Right-hand side expression. */\r\n  right: Expression;\r\n}\r\n\r\n/** Represents a call expression. */\r\nexport class CallExpression extends Expression {\r\n  kind = NodeKind.CALL;\r\n\r\n  /** Called expression. Usually an identifier or property access expression. */\r\n  expression: Expression;\r\n  /** Provided type arguments. */\r\n  typeArguments: CommonTypeNode[] | null;\r\n  /** Provided arguments. */\r\n  arguments: Expression[];\r\n}\r\n\r\n/** Represents a comma expression composed of multiple expressions. */\r\nexport class CommaExpression extends Expression {\r\n  kind = NodeKind.COMMA;\r\n\r\n  /** Sequential expressions. */\r\n  expressions: Expression[];\r\n}\r\n\r\n/** Represents a `constructor` expression. */\r\nexport class ConstructorExpression extends IdentifierExpression {\r\n  kind = NodeKind.CONSTRUCTOR;\r\n  text = \"constructor\";\r\n}\r\n\r\n/** Represents an element access expression, e.g., array access. */\r\nexport class ElementAccessExpression extends Expression {\r\n  kind = NodeKind.ELEMENTACCESS;\r\n\r\n  /** Expression being accessed. */\r\n  expression: Expression;\r\n  /** Element of the expression being accessed. */\r\n  elementExpression: Expression;\r\n}\r\n\r\n/** Represents a float literal expression. */\r\nexport class FloatLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.FLOAT;\r\n\r\n  /** Float value. */\r\n  value: f64;\r\n}\r\n\r\n/** Represents a function expression using the 'function' keyword. */\r\nexport class FunctionExpression extends Expression {\r\n  kind = NodeKind.FUNCTION;\r\n\r\n  /** Inline function declaration. */\r\n  declaration: FunctionDeclaration;\r\n}\r\n\r\n/** Represents an integer literal expression. */\r\nexport class IntegerLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.INTEGER;\r\n\r\n  /** Integer value. */\r\n  value: I64;\r\n}\r\n\r\n/** Represents a `new` expression. Like a call but with its own kind. */\r\nexport class NewExpression extends CallExpression {\r\n  kind = NodeKind.NEW;\r\n}\r\n\r\n/** Represents a `null` expression. */\r\nexport class NullExpression extends IdentifierExpression {\r\n  kind = NodeKind.NULL;\r\n  text = \"null\";\r\n}\r\n\r\n/** Represents a parenthesized expression. */\r\nexport class ParenthesizedExpression extends Expression {\r\n  kind = NodeKind.PARENTHESIZED;\r\n\r\n  /** Expression in parenthesis. */\r\n  expression: Expression;\r\n}\r\n\r\n/** Represents a property access expression. */\r\nexport class PropertyAccessExpression extends Expression {\r\n  kind = NodeKind.PROPERTYACCESS;\r\n\r\n  /** Expression being accessed. */\r\n  expression: Expression;\r\n  /** Property of the expression being accessed. */\r\n  property: IdentifierExpression;\r\n}\r\n\r\n/** Represents a regular expression literal expression. */\r\nexport class RegexpLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.REGEXP;\r\n\r\n  /** Regular expression pattern. */\r\n  pattern: string;\r\n  /** Regular expression flags. */\r\n  patternFlags: string;\r\n}\r\n\r\n/** Represents a ternary expression, i.e., short if notation. */\r\nexport class TernaryExpression extends Expression {\r\n  kind = NodeKind.TERNARY;\r\n\r\n  /** Condition expression. */\r\n  condition: Expression;\r\n  /** Expression executed when condition is `true`. */\r\n  ifThen: Expression;\r\n  /** Expression executed when condition is `false`. */\r\n  ifElse: Expression;\r\n}\r\n\r\n/** Represents a string literal expression. */\r\nexport class StringLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.STRING;\r\n\r\n  /** String value without quotes. */\r\n  value: string;\r\n}\r\n\r\n/** Represents a `super` expression. */\r\nexport class SuperExpression extends IdentifierExpression {\r\n  kind = NodeKind.SUPER;\r\n  text = \"super\";\r\n}\r\n\r\n/** Represents a `this` expression. */\r\nexport class ThisExpression extends IdentifierExpression {\r\n  kind = NodeKind.THIS;\r\n  text = \"this\";\r\n}\r\n\r\n/** Represents a `true` expression. */\r\nexport class TrueExpression extends IdentifierExpression {\r\n  kind = NodeKind.TRUE;\r\n  text = \"true\";\r\n}\r\n\r\n/** Represents a `false` expression. */\r\nexport class FalseExpression extends IdentifierExpression {\r\n  kind = NodeKind.FALSE;\r\n  text = \"false\";\r\n}\r\n\r\n/** Base class of all unary expressions. */\r\nexport abstract class UnaryExpression extends Expression {\r\n\r\n  /** Operator token. */\r\n  operator: Token;\r\n  /** Operand expression. */\r\n  operand: Expression;\r\n}\r\n\r\n/** Represents a unary postfix expression, e.g. a postfix increment. */\r\nexport class UnaryPostfixExpression extends UnaryExpression {\r\n  kind = NodeKind.UNARYPOSTFIX;\r\n}\r\n\r\n/** Represents a unary prefix expression, e.g. a negation. */\r\nexport class UnaryPrefixExpression extends UnaryExpression {\r\n  kind = NodeKind.UNARYPREFIX;\r\n}\r\n\r\n// statements\r\n\r\n/** Base class of all statement nodes. */\r\nexport abstract class Statement extends Node { }\r\n\r\n/** Indicates the specific kind of a source. */\r\nexport enum SourceKind {\r\n  /** Default source. Usually imported from an entry file. */\r\n  DEFAULT,\r\n  /** Entry file. */\r\n  ENTRY,\r\n  /** Library file. */\r\n  LIBRARY\r\n}\r\n\r\n/** A top-level source node. */\r\nexport class Source extends Node {\r\n  kind = NodeKind.SOURCE;\r\n  parent = null;\r\n\r\n  /** Source kind. */\r\n  sourceKind: SourceKind;\r\n  /** Normalized path. */\r\n  normalizedPath: string;\r\n  /** Path used internally. */\r\n  internalPath: string;\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n  /** Full source text. */\r\n  text: string;\r\n  /** Tokenizer reference. */\r\n  tokenizer: Tokenizer | null = null;\r\n  /** Source map index. */\r\n  debugInfoIndex: i32 = -1;\r\n\r\n  /** Constructs a new source node. */\r\n  constructor(normalizedPath: string, text: string, kind: SourceKind) {\r\n    super();\r\n    this.sourceKind = kind;\r\n    this.normalizedPath = normalizedPath;\r\n    this.internalPath = mangleInternalPath(this.normalizedPath);\r\n    this.statements = new Array();\r\n    this.range = new Range(this, 0, text.length);\r\n    this.text = text;\r\n  }\r\n\r\n  /** Tests if this source is an entry file. */\r\n  get isEntry(): bool { return this.sourceKind == SourceKind.ENTRY; }\r\n  /** Tests if this source is a stdlib file. */\r\n  get isLibrary(): bool { return this.sourceKind == SourceKind.LIBRARY; }\r\n}\r\n\r\n/** Base class of all declaration statements. */\r\nexport abstract class DeclarationStatement extends Statement {\r\n\r\n  /** Simple name being declared. */\r\n  name: IdentifierExpression;\r\n  /** Array of decorators. */\r\n  decorators: DecoratorNode[] | null = null;\r\n\r\n  protected cachedProgramLevelInternalName: string | null = null;\r\n  protected cachedFileLevelInternalName: string | null = null;\r\n\r\n  /** Gets the mangled program-level internal name of this declaration. */\r\n  get programLevelInternalName(): string {\r\n    if (!this.cachedProgramLevelInternalName) {\r\n      this.cachedProgramLevelInternalName = mangleInternalName(this, true);\r\n    }\r\n    return this.cachedProgramLevelInternalName;\r\n  }\r\n\r\n  /** Gets the mangled file-level internal name of this declaration. */\r\n  get fileLevelInternalName(): string {\r\n    if (!this.cachedFileLevelInternalName) {\r\n      this.cachedFileLevelInternalName = mangleInternalName(this, false);\r\n    }\r\n    return this.cachedFileLevelInternalName;\r\n  }\r\n\r\n  /** Tests if this is a top-level declaration within its source file. */\r\n  get isTopLevel(): bool {\r\n    var parent = this.parent;\r\n    if (!parent) {\r\n      return false;\r\n    }\r\n    if (parent.kind == NodeKind.VARIABLE && !(parent = parent.parent)) {\r\n      return false;\r\n    }\r\n    return parent.kind == NodeKind.SOURCE;\r\n  }\r\n\r\n  /** Tests if this declaration is a top-level export within its source file. */\r\n  get isTopLevelExport(): bool {\r\n    var parent = this.parent;\r\n    if (!parent || (parent.kind == NodeKind.VARIABLE && !(parent = parent.parent))) {\r\n      return false;\r\n    }\r\n    if (parent.kind == NodeKind.NAMESPACEDECLARATION) {\r\n      return this.is(CommonFlags.EXPORT) && (<NamespaceDeclaration>parent).isTopLevelExport;\r\n    }\r\n    if (parent.kind == NodeKind.CLASSDECLARATION) {\r\n      return this.is(CommonFlags.STATIC) && (<ClassDeclaration>parent).isTopLevelExport;\r\n    }\r\n    return parent.kind == NodeKind.SOURCE && this.is(CommonFlags.EXPORT);\r\n  }\r\n\r\n  /** Tests if this declaration needs an explicit export. */\r\n  needsExplicitExport(member: ExportMember): bool {\r\n    // This is necessary because module-level exports are automatically created\r\n    // for top level declarations of all sorts. This function essentially tests\r\n    // that there isn't a otherwise duplicate top-level export already.\r\n    return (\r\n      member.name.text != member.externalName.text || // if aliased\r\n      this.range.source != member.range.source ||     // if a re-export\r\n      !this.isTopLevelExport                          // if not top-level\r\n    );\r\n  }\r\n}\r\n\r\n/** Base class of all variable-like declaration statements. */\r\nexport abstract class VariableLikeDeclarationStatement extends DeclarationStatement {\r\n\r\n  /** Variable type. */\r\n  type: CommonTypeNode | null;\r\n  /** Variable initializer. */\r\n  initializer: Expression | null;\r\n}\r\n\r\n/** Represents a block statement. */\r\nexport class BlockStatement extends Statement {\r\n  kind = NodeKind.BLOCK;\r\n\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n}\r\n\r\n/** Represents a `break` statement. */\r\nexport class BreakStatement extends Statement {\r\n  kind = NodeKind.BREAK;\r\n\r\n  /** Target label, if applicable. */\r\n  label: IdentifierExpression | null;\r\n}\r\n\r\n/** Represents a `class` declaration. */\r\nexport class ClassDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.CLASSDECLARATION;\r\n\r\n  /** Accepted type parameters. */\r\n  typeParameters: TypeParameterNode[];\r\n  /** Base class type being extended, if any. */\r\n  extendsType: TypeNode | null; // can't be a function\r\n  /** Interface types being implemented, if any. */\r\n  implementsTypes: TypeNode[] | null; // can't be functions\r\n  /** Class member declarations. */\r\n  members: DeclarationStatement[];\r\n\r\n  get isGeneric(): bool {\r\n    var typeParameters = this.typeParameters;\r\n    return typeParameters != null && typeParameters.length > 0;\r\n  }\r\n}\r\n\r\n/** Represents a `continue` statement. */\r\nexport class ContinueStatement extends Statement {\r\n  kind = NodeKind.CONTINUE;\r\n\r\n  /** Target label, if applicable. */\r\n  label: IdentifierExpression | null;\r\n}\r\n\r\n/** Represents a `do` statement. */\r\nexport class DoStatement extends Statement {\r\n  kind = NodeKind.DO;\r\n\r\n  /** Statement being looped over. */\r\n  statement: Statement;\r\n  /** Condition when to repeat. */\r\n  condition: Expression;\r\n}\r\n\r\n/** Represents an empty statement, i.e., a semicolon terminating nothing. */\r\nexport class EmptyStatement extends Statement {\r\n  kind = NodeKind.EMPTY;\r\n}\r\n\r\n/** Represents an `enum` declaration. */\r\nexport class EnumDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.ENUMDECLARATION;\r\n\r\n  /** Enum value declarations. */\r\n  values: EnumValueDeclaration[];\r\n}\r\n\r\n/** Represents a value of an `enum` declaration. */\r\nexport class EnumValueDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.ENUMVALUEDECLARATION;\r\n  // name is inherited\r\n\r\n  /** Value expression. */\r\n  value: Expression | null;\r\n}\r\n\r\n/** Represents an `export import` statement of an interface. */\r\nexport class ExportImportStatement extends Node {\r\n  kind = NodeKind.EXPORTIMPORT;\r\n\r\n  /** Identifier being imported. */\r\n  name: IdentifierExpression;\r\n  /** Identifier being exported. */\r\n  externalName: IdentifierExpression;\r\n}\r\n\r\n/** Represents a member of an `export` statement. */\r\nexport class ExportMember extends Node {\r\n  kind = NodeKind.EXPORTMEMBER;\r\n\r\n  /** Identifier being exported. */\r\n  name: IdentifierExpression;\r\n  /** Identifier seen when imported again. */\r\n  externalName: IdentifierExpression;\r\n}\r\n\r\n/** Represents an `export` statement. */\r\nexport class ExportStatement extends Statement {\r\n  kind = NodeKind.EXPORT;\r\n\r\n  /** Array of members. */\r\n  members: ExportMember[];\r\n  /** Path being exported from, if applicable. */\r\n  path: StringLiteralExpression | null;\r\n  /** Normalized path, if `path` is set. */\r\n  normalizedPath: string | null;\r\n  /** Mangled internal path being referenced, if `path` is set. */\r\n  internalPath: string | null;\r\n}\r\n\r\n/** Represents an expression that is used as a statement. */\r\nexport class ExpressionStatement extends Statement {\r\n  kind = NodeKind.EXPRESSION;\r\n\r\n  /** Expression being used as a statement.*/\r\n  expression: Expression;\r\n}\r\n\r\n/** Represents a field declaration within a `class`. */\r\nexport class FieldDeclaration extends VariableLikeDeclarationStatement {\r\n  kind = NodeKind.FIELDDECLARATION;\r\n\r\n  /** Parameter index within the constructor, if applicable. */\r\n  parameterIndex: i32 = -1;\r\n}\r\n\r\n/** Represents a `for` statement. */\r\nexport class ForStatement extends Statement {\r\n  kind = NodeKind.FOR;\r\n\r\n  /**\r\n   * Initializer statement, if present.\r\n   * Either a {@link VariableStatement} or {@link ExpressionStatement}.\r\n   */\r\n  initializer: Statement | null;\r\n  /** Condition expression, if present. */\r\n  condition: Expression | null;\r\n  /** Incrementor expression, if present. */\r\n  incrementor: Expression | null;\r\n  /** Statement being looped over. */\r\n  statement: Statement;\r\n}\r\n\r\n/** Represents a `function` declaration. */\r\nexport class FunctionDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.FUNCTIONDECLARATION;\r\n\r\n  /** Type parameters, if any. */\r\n  typeParameters: TypeParameterNode[] | null;\r\n  /** Function signature. */\r\n  signature: SignatureNode;\r\n  /** Body statement. Usually a block. */\r\n  body: Statement | null;\r\n\r\n  get isGeneric(): bool {\r\n    var typeParameters = this.typeParameters;\r\n    return typeParameters != null && typeParameters.length > 0;\r\n  }\r\n}\r\n\r\n/** Represents an `if` statement. */\r\nexport class IfStatement extends Statement {\r\n  kind = NodeKind.IF;\r\n\r\n  /** Condition. */\r\n  condition: Expression;\r\n  /** Statement executed when condition is `true`. */\r\n  ifTrue: Statement;\r\n  /** Statement executed when condition is `false`. */\r\n  ifFalse: Statement | null;\r\n}\r\n\r\n/** Represents an `import` declaration part of an {@link ImportStatement}. */\r\nexport class ImportDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.IMPORTDECLARATION;\r\n\r\n  /** Identifier being imported. */\r\n  externalName: IdentifierExpression;\r\n}\r\n\r\n/** Represents an `import` statement. */\r\nexport class ImportStatement extends Statement {\r\n  kind = NodeKind.IMPORT;\r\n\r\n  /** Array of member declarations or `null` if an asterisk import. */\r\n  declarations: ImportDeclaration[] | null;\r\n  /** Name of the local namespace, if an asterisk import. */\r\n  namespaceName: IdentifierExpression | null;\r\n  /** Path being imported from. */\r\n  path: StringLiteralExpression;\r\n  /** Normalized path. */\r\n  normalizedPath: string;\r\n  /** Mangled internal path being referenced. */\r\n  internalPath: string;\r\n}\r\n\r\n/** Represents an `interfarce` declaration. */\r\nexport class InterfaceDeclaration extends ClassDeclaration {\r\n  kind = NodeKind.INTERFACEDECLARATION;\r\n}\r\n\r\n/** Represents a method declaration within a `class`. */\r\nexport class MethodDeclaration extends FunctionDeclaration {\r\n  kind = NodeKind.METHODDECLARATION;\r\n}\r\n\r\n/** Represents a `namespace` declaration. */\r\nexport class NamespaceDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.NAMESPACEDECLARATION;\r\n\r\n  /** Array of namespace members. */\r\n  members: Statement[];\r\n}\r\n\r\n/** Represents a `return` statement. */\r\nexport class ReturnStatement extends Statement {\r\n  kind = NodeKind.RETURN;\r\n\r\n  /** Value expression being returned, if present. */\r\n  value: Expression | null;\r\n}\r\n\r\n/** Represents a single `case` within a `switch` statement. */\r\nexport class SwitchCase extends Node {\r\n  kind = NodeKind.SWITCHCASE;\r\n\r\n  /** Label expression. `null` indicates the default case. */\r\n  label: Expression | null;\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n}\r\n\r\n/** Represents a `switch` statement. */\r\nexport class SwitchStatement extends Statement {\r\n  kind = NodeKind.SWITCH;\r\n\r\n  /** Condition expression. */\r\n  condition: Expression;\r\n  /** Contained cases. */\r\n  cases: SwitchCase[];\r\n}\r\n\r\n/** Represents a `throw` statement. */\r\nexport class ThrowStatement extends Statement {\r\n  kind = NodeKind.THROW;\r\n\r\n  /** Value expression being thrown. */\r\n  value: Expression;\r\n}\r\n\r\n/** Represents a `try` statement. */\r\nexport class TryStatement extends Statement {\r\n  kind = NodeKind.TRY;\r\n\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n  /** Exception variable name, if a `catch` clause is present. */\r\n  catchVariable: IdentifierExpression | null;\r\n  /** Statements being executed on catch, if a `catch` clause is present. */\r\n  catchStatements: Statement[] | null;\r\n  /** Statements being executed afterwards, if a `finally` clause is present. */\r\n  finallyStatements: Statement[] | null;\r\n}\r\n\r\n/** Represents a `type` declaration. */\r\nexport class TypeDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.TYPEDECLARATION;\r\n\r\n  /** Type parameters, if any. */\r\n  typeParameters: TypeParameterNode[] | null;\r\n  /** Type being aliased. */\r\n  type: CommonTypeNode;\r\n}\r\n\r\n/** Represents a variable declaration part of a {@link VariableStatement}. */\r\nexport class VariableDeclaration extends VariableLikeDeclarationStatement {\r\n  kind = NodeKind.VARIABLEDECLARATION;\r\n}\r\n\r\n/** Represents a variable statement wrapping {@link VariableDeclaration}s. */\r\nexport class VariableStatement extends Statement {\r\n  kind = NodeKind.VARIABLE;\r\n\r\n  /** Array of decorators. */\r\n  decorators: DecoratorNode[] | null;\r\n  /** Array of member declarations. */\r\n  declarations: VariableDeclaration[];\r\n}\r\n\r\n/** Represents a void statement dropping an expression's value. */\r\nexport class VoidStatement extends Statement {\r\n  kind = NodeKind.VOID;\r\n\r\n  /** Expression being dropped. */\r\n  expression: Expression;\r\n}\r\n\r\n/** Represents a `while` statement. */\r\nexport class WhileStatement extends Statement {\r\n  kind = NodeKind.WHILE;\r\n\r\n  /** Condition expression. */\r\n  condition: Expression;\r\n  /** Statement being looped over. */\r\n  statement: Statement;\r\n}\r\n\r\n/** Tests if a specific decorator is present within the specified decorators. */\r\nexport function hasDecorator(name: string, decorators: DecoratorNode[] | null): bool {\r\n  if (decorators) {\r\n    for (let i = 0, k = decorators.length; i < k; ++i) {\r\n      let expression = decorators[i].name;\r\n      if (expression.kind == NodeKind.IDENTIFIER && (<IdentifierExpression>expression).text == name) {\r\n        return true;\r\n      }\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\n/** Mangles a declaration's name to an internal name. */\r\nexport function mangleInternalName(declaration: DeclarationStatement, asGlobal: bool = false): string {\r\n  var name = declaration.name.text;\r\n  var parent = declaration.parent;\r\n  if (!parent) return name;\r\n  if (\r\n    declaration.kind == NodeKind.VARIABLEDECLARATION &&\r\n    parent.kind == NodeKind.VARIABLE\r\n  ) { // skip over\r\n    if (!(parent = parent.parent)) return name;\r\n  }\r\n  if (parent.kind == NodeKind.CLASSDECLARATION) {\r\n    return mangleInternalName(<ClassDeclaration>parent, asGlobal) + (\r\n      declaration.is(CommonFlags.STATIC)\r\n        ? STATIC_DELIMITER\r\n        : INSTANCE_DELIMITER\r\n    ) + name;\r\n  }\r\n  if (\r\n    parent.kind == NodeKind.NAMESPACEDECLARATION ||\r\n    parent.kind == NodeKind.ENUMDECLARATION\r\n  ) {\r\n    return mangleInternalName(<DeclarationStatement>parent, asGlobal) +\r\n           STATIC_DELIMITER + name;\r\n  }\r\n  return asGlobal\r\n    ? name\r\n    : declaration.range.source.internalPath + PATH_DELIMITER + name;\r\n}\r\n\r\n/** Mangles an external to an internal path. */\r\nexport function mangleInternalPath(path: string): string {\r\n  if (path.endsWith(\".ts\")) path = path.substring(0, path.length - 3);\r\n  return path;\r\n}\r\n\r\n// Helpers\r\n\r\n/** Sets the parent node on an array of nodes. */\r\nfunction setParent(nodes: Node[], parent: Node): void {\r\n  for (let i = 0, k = nodes.length; i < k; ++i) {\r\n    nodes[i].parent = parent;\r\n  }\r\n}\r\n\r\n/** Sets the parent node on an array of nullable nodes. */\r\nfunction setParentIfNotNull(nodes: (Node | null)[], parent: Node): void {\r\n  for (let i = 0, k = nodes.length; i < k; ++i) {\r\n    let node = nodes[i];\r\n    if (node) node.parent = parent;\r\n  }\r\n}\r\n","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\r\n} catch (e) {\r\n\t// This works if the window reference is available\r\n\tif (typeof window === \"object\") g = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n","/**\r\n * A TypeScript tokenizer modified for AssemblyScript.\r\n *\r\n * Skips over trivia and provides a general mark/reset mechanism for the parser to utilize on\r\n * ambiguous tokens.\r\n *\r\n * @module tokenizer\r\n *//***/\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticMessage,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Source,\r\n  CommentKind\r\n} from \"./ast\";\r\n\r\nimport {\r\n  CharCode,\r\n  isLineBreak,\r\n  isWhiteSpace,\r\n  isIdentifierStart,\r\n  isIdentifierPart,\r\n  isDecimalDigit,\r\n  isOctalDigit,\r\n  isKeywordCharacter\r\n} from \"./util\";\r\n\r\n/** Named token types. */\r\nexport enum Token {\r\n\r\n  // keywords\r\n  // discarded: ANY, BOOLEAN, NEVER, NUMBER, STRING, SYMBOL, UNDEFINED, LESSTHAN_SLASH\r\n\r\n  ABSTRACT,\r\n  AS,\r\n  ASYNC,\r\n  AWAIT,        // ES2017\r\n  BREAK,        // ES2017\r\n  CASE,         // ES2017\r\n  CATCH,        // ES2017\r\n  CLASS,        // ES2017\r\n  CONST,        // ES2017\r\n  CONTINUE,     // ES2017\r\n  CONSTRUCTOR,\r\n  DEBUGGER,     // ES2017\r\n  DECLARE,\r\n  DEFAULT,      // ES2017\r\n  DELETE,       // ES2017\r\n  DO,           // ES2017\r\n  ELSE,         // ES2017\r\n  ENUM,         // ES2017 future\r\n  EXPORT,       // ES2017\r\n  EXTENDS,      // ES2017\r\n  FALSE,        // ES\r\n  FINALLY,      // ES2017\r\n  FOR,          // ES2017\r\n  FROM,         // AS possible identifier\r\n  FUNCTION,     // ES2017\r\n  GET,\r\n  IF,           // ES2017\r\n  IMPLEMENTS,   // ES2017 non-lexical\r\n  IMPORT,       // ES2017\r\n  IN,           // ES2017\r\n  INSTANCEOF,   // ES2017\r\n  INTERFACE,    // ES2017 non-lexical\r\n  IS,\r\n  KEYOF,\r\n  LET,          // ES2017 non-lexical\r\n  MODULE,       // AS possible identifier\r\n  NAMESPACE,    // AS possible identifier\r\n  NEW,          // ES2017\r\n  NULL,         // ES\r\n  OF,\r\n  PACKAGE,      // ES2017 non-lexical\r\n  PRIVATE,      // ES2017 non-lexical\r\n  PROTECTED,    // ES2017 non-lexical\r\n  PUBLIC,       // ES2017 non-lexical\r\n  READONLY,\r\n  RETURN,       // ES2017\r\n  SET,\r\n  STATIC,       // ES2017 non-lexical\r\n  SUPER,        // ES2017\r\n  SWITCH,       // ES2017\r\n  THIS,         // ES2017\r\n  THROW,        // ES2017\r\n  TRUE,         // ES\r\n  TRY,          // ES2017\r\n  TYPE,         // AS possible identifier\r\n  TYPEOF,       // ES2017\r\n  VAR,          // ES2017\r\n  VOID,         // ES2017\r\n  WHILE,        // ES2017\r\n  WITH,         // ES2017\r\n  YIELD,        // ES2017\r\n\r\n  // punctuation\r\n\r\n  OPENBRACE,\r\n  CLOSEBRACE,\r\n  OPENPAREN,\r\n  CLOSEPAREN,\r\n  OPENBRACKET,\r\n  CLOSEBRACKET,\r\n  DOT,\r\n  DOT_DOT_DOT,\r\n  SEMICOLON,\r\n  COMMA,\r\n  LESSTHAN,\r\n  GREATERTHAN,\r\n  LESSTHAN_EQUALS,\r\n  GREATERTHAN_EQUALS,\r\n  EQUALS_EQUALS,\r\n  EXCLAMATION_EQUALS,\r\n  EQUALS_EQUALS_EQUALS,\r\n  EXCLAMATION_EQUALS_EQUALS,\r\n  EQUALS_GREATERTHAN,\r\n  PLUS,\r\n  MINUS,\r\n  ASTERISK_ASTERISK,\r\n  ASTERISK,\r\n  SLASH,\r\n  PERCENT,\r\n  PLUS_PLUS,\r\n  MINUS_MINUS,\r\n  LESSTHAN_LESSTHAN,\r\n  GREATERTHAN_GREATERTHAN,\r\n  GREATERTHAN_GREATERTHAN_GREATERTHAN,\r\n  AMPERSAND,\r\n  BAR,\r\n  CARET,\r\n  EXCLAMATION,\r\n  TILDE,\r\n  AMPERSAND_AMPERSAND,\r\n  BAR_BAR,\r\n  QUESTION,\r\n  COLON,\r\n  EQUALS,\r\n  PLUS_EQUALS,\r\n  MINUS_EQUALS,\r\n  ASTERISK_EQUALS,\r\n  ASTERISK_ASTERISK_EQUALS,\r\n  SLASH_EQUALS,\r\n  PERCENT_EQUALS,\r\n  LESSTHAN_LESSTHAN_EQUALS,\r\n  GREATERTHAN_GREATERTHAN_EQUALS,\r\n  GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS,\r\n  AMPERSAND_EQUALS,\r\n  BAR_EQUALS,\r\n  CARET_EQUALS,\r\n  AT,\r\n\r\n  // literals\r\n\r\n  IDENTIFIER,\r\n  STRINGLITERAL,\r\n  INTEGERLITERAL,\r\n  FLOATLITERAL,\r\n\r\n  // meta\r\n\r\n  INVALID,\r\n  ENDOFFILE\r\n}\r\n\r\nexport enum IdentifierHandling {\r\n  DEFAULT,\r\n  PREFER,\r\n  ALWAYS\r\n}\r\n\r\nexport function tokenFromKeyword(text: string): Token {\r\n  assert(text.length);\r\n  switch (text.charCodeAt(0)) {\r\n    case CharCode.a: {\r\n      switch (text) {\r\n        case \"abstract\": return Token.ABSTRACT;\r\n        case \"as\": return Token.AS;\r\n        case \"async\": return Token.ASYNC;\r\n        case \"await\": return Token.AWAIT;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.b: {\r\n      switch (text) {\r\n        case \"break\": return Token.BREAK;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.c: {\r\n      switch (text) {\r\n        case \"case\": return Token.CASE;\r\n        case \"catch\": return Token.CATCH;\r\n        case \"class\": return Token.CLASS;\r\n        case \"continue\": return Token.CONTINUE;\r\n        case \"const\": return Token.CONST;\r\n        case \"constructor\": return Token.CONSTRUCTOR;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.d: {\r\n      switch (text) {\r\n        case \"debugger\": return Token.DEBUGGER;\r\n        case \"declare\": return Token.DECLARE;\r\n        case \"default\": return Token.DEFAULT;\r\n        case \"delete\": return Token.DELETE;\r\n        case \"do\": return Token.DO;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.e: {\r\n      switch (text) {\r\n        case \"else\": return Token.ELSE;\r\n        case \"enum\": return Token.ENUM;\r\n        case \"export\": return Token.EXPORT;\r\n        case \"extends\": return Token.EXTENDS;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.f: {\r\n      switch (text) {\r\n        case \"false\": return Token.FALSE;\r\n        case \"finally\": return Token.FINALLY;\r\n        case \"for\": return Token.FOR;\r\n        case \"from\": return Token.FROM;\r\n        case \"function\": return Token.FUNCTION;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.g: {\r\n      switch (text) {\r\n        case \"get\": return Token.GET;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.i: {\r\n      switch (text) {\r\n        case \"if\": return Token.IF;\r\n        case \"implements\": return Token.IMPLEMENTS;\r\n        case \"import\": return Token.IMPORT;\r\n        case \"in\": return Token.IN;\r\n        case \"instanceof\": return Token.INSTANCEOF;\r\n        case \"interface\": return Token.INTERFACE;\r\n        case \"is\": return Token.IS;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.k: {\r\n      switch (text) {\r\n        case \"keyof\": return Token.KEYOF;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.l: {\r\n      switch (text) {\r\n        case \"let\": return Token.LET;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.m: {\r\n      switch (text) {\r\n        case \"module\": return Token.MODULE;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.n: {\r\n      switch (text) {\r\n        case \"namespace\": return Token.NAMESPACE;\r\n        case \"new\": return Token.NEW;\r\n        case \"null\": return Token.NULL;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.o: {\r\n      switch (text) {\r\n        case \"of\": return Token.OF;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.p: {\r\n      switch (text) {\r\n        case \"package\": return Token.PACKAGE;\r\n        case \"private\": return Token.PRIVATE;\r\n        case \"protected\": return Token.PROTECTED;\r\n        case \"public\": return Token.PUBLIC;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.r: {\r\n      switch (text) {\r\n        case \"readonly\": return Token.READONLY;\r\n        case \"return\": return Token.RETURN;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.s: {\r\n      switch (text) {\r\n        case \"set\": return Token.SET;\r\n        case \"static\": return Token.STATIC;\r\n        case \"super\": return Token.SUPER;\r\n        case \"switch\": return Token.SWITCH;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.t: {\r\n      switch (text) {\r\n        case \"this\": return Token.THIS;\r\n        case \"throw\": return Token.THROW;\r\n        case \"true\": return Token.TRUE;\r\n        case \"try\": return Token.TRY;\r\n        case \"type\": return Token.TYPE;\r\n        case \"typeof\": return Token.TYPEOF;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.v: {\r\n      switch (text) {\r\n        case \"var\": return Token.VAR;\r\n        case \"void\": return Token.VOID;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.w: {\r\n      switch (text) {\r\n        case \"while\": return Token.WHILE;\r\n        case \"with\": return Token.WITH;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.y: {\r\n      switch (text) {\r\n        case \"yield\": return Token.YIELD;\r\n      }\r\n      break;\r\n    }\r\n  }\r\n  return Token.INVALID;\r\n}\r\n\r\nexport function tokenIsAlsoIdentifier(token: Token): bool {\r\n  switch (token) {\r\n    case Token.ABSTRACT:\r\n    case Token.AS:\r\n    case Token.CONSTRUCTOR:\r\n    case Token.DECLARE:\r\n    case Token.DELETE:\r\n    case Token.FROM:\r\n    case Token.GET:\r\n    case Token.IS:\r\n    case Token.KEYOF:\r\n    case Token.MODULE:\r\n    case Token.NAMESPACE:\r\n    case Token.READONLY:\r\n    case Token.SET:\r\n    case Token.TYPE: return true;\r\n    default: return false;\r\n  }\r\n}\r\n\r\nexport function operatorTokenToString(token: Token): string {\r\n  switch (token) {\r\n    case Token.DELETE: return \"delete\";\r\n    case Token.IN: return \"in\";\r\n    case Token.INSTANCEOF: return \"instanceof\";\r\n    case Token.NEW: return \"new\";\r\n    case Token.TYPEOF: return \"typeof\";\r\n    case Token.VOID: return \"void\";\r\n    case Token.YIELD: return \"yield\";\r\n    case Token.DOT_DOT_DOT: return \"...\";\r\n    case Token.COMMA: return \",\";\r\n    case Token.LESSTHAN: return \"<\";\r\n    case Token.GREATERTHAN: return \">\";\r\n    case Token.LESSTHAN_EQUALS: return \"<=\";\r\n    case Token.GREATERTHAN_EQUALS: return \">=\";\r\n    case Token.EQUALS_EQUALS: return \"==\";\r\n    case Token.EXCLAMATION_EQUALS: return \"!=\";\r\n    case Token.EQUALS_EQUALS_EQUALS: return \"===\";\r\n    case Token.EXCLAMATION_EQUALS_EQUALS: return \"!==\";\r\n    case Token.PLUS: return \"+\";\r\n    case Token.MINUS: return \"-\";\r\n    case Token.ASTERISK_ASTERISK: return \"**\";\r\n    case Token.ASTERISK: return \"*\";\r\n    case Token.SLASH: return \"/\";\r\n    case Token.PERCENT: return \"%\";\r\n    case Token.PLUS_PLUS: return \"++\";\r\n    case Token.MINUS_MINUS: return \"--\";\r\n    case Token.LESSTHAN_LESSTHAN: return \"<<\";\r\n    case Token.GREATERTHAN_GREATERTHAN: return \">>\";\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return \">>>\";\r\n    case Token.AMPERSAND: return \"&\";\r\n    case Token.BAR: return \"|\";\r\n    case Token.CARET: return \"^\";\r\n    case Token.EXCLAMATION: return \"!\";\r\n    case Token.TILDE: return \"~\";\r\n    case Token.AMPERSAND_AMPERSAND: return \"&&\";\r\n    case Token.BAR_BAR: return \"||\";\r\n    case Token.EQUALS: return \"=\";\r\n    case Token.PLUS_EQUALS: return \"+=\";\r\n    case Token.MINUS_EQUALS: return \"-=\";\r\n    case Token.ASTERISK_EQUALS: return \"*=\";\r\n    case Token.ASTERISK_ASTERISK_EQUALS: return \"**=\";\r\n    case Token.SLASH_EQUALS: return \"/=\";\r\n    case Token.PERCENT_EQUALS: return \"%=\";\r\n    case Token.LESSTHAN_LESSTHAN_EQUALS: return \"<<=\";\r\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS: return \">>=\";\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return \">>>=\";\r\n    case Token.AMPERSAND_EQUALS: return \"&=\";\r\n    case Token.BAR_EQUALS: return \"|=\";\r\n    case Token.CARET_EQUALS: return \"^=\";\r\n    default: {\r\n      assert(false);\r\n      return \"\";\r\n    }\r\n  }\r\n}\r\n\r\nexport class Range {\r\n\r\n  source: Source;\r\n  start: i32;\r\n  end: i32;\r\n\r\n  // TODO: set these while tokenizing\r\n  // line: i32;\r\n  // column: i32;\r\n\r\n  constructor(source: Source, start: i32, end: i32) {\r\n    this.source = source;\r\n    this.start = start;\r\n    this.end = end;\r\n  }\r\n\r\n  static join(a: Range, b: Range): Range {\r\n    if (a.source != b.source) throw new Error(\"source mismatch\");\r\n    return new Range(a.source,\r\n      a.start < b.start ? a.start : b.start,\r\n      a.end > b.end ? a.end : b.end\r\n    );\r\n  }\r\n\r\n  get atStart(): Range {\r\n    return new Range(this.source, this.start, this.start);\r\n  }\r\n  get atEnd(): Range {\r\n    return new Range(this.source, this.end, this.end);\r\n  }\r\n\r\n  get line(): i32 {\r\n    var text = this.source.text;\r\n    var line = 1;\r\n    for (let pos = this.start; pos >= 0; --pos) {\r\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) line++;\r\n    }\r\n    return line;\r\n  }\r\n\r\n  get column(): i32 {\r\n    var text = this.source.text;\r\n    var column = 0;\r\n    for (let pos = this.start - 1; pos >= 0; --pos) {\r\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) break;\r\n      ++column;\r\n    }\r\n    return column;\r\n  }\r\n\r\n  toString(): string {\r\n    return this.source.text.substring(this.start, this.end);\r\n  }\r\n\r\n  debugInfoRef: usize = 0;\r\n}\r\n\r\ndeclare function parseFloat(str: string): f64;\r\n\r\n/** Handler for intercepting comments while tokenizing. */\r\nexport type CommentHandler = (kind: CommentKind, text: string, range: Range) => void;\r\n\r\n/** Tokenizes a source to individual {@link Token}s. */\r\nexport class Tokenizer extends DiagnosticEmitter {\r\n\r\n  source: Source;\r\n  end: i32 = 0;\r\n\r\n  pos: i32 = 0;\r\n  token: Token = -1;\r\n  tokenPos: i32 = 0;\r\n\r\n  nextToken: Token = -1;\r\n  nextTokenPos: i32 = 0;\r\n  nextTokenOnNewLine: bool = false;\r\n\r\n  onComment: CommentHandler | null = null;\r\n\r\n  /** Constructs a new tokenizer. */\r\n  constructor(source: Source, diagnostics: DiagnosticMessage[] | null = null) {\r\n    super(diagnostics);\r\n    this.source = source;\r\n    this.pos = 0;\r\n    this.end = source.text.length;\r\n    this.diagnostics = diagnostics ? diagnostics : new Array();\r\n\r\n    var text = source.text;\r\n\r\n    // skip bom\r\n    if (\r\n      this.pos < this.end &&\r\n      text.charCodeAt(this.pos) == CharCode.BYTEORDERMARK\r\n    ) {\r\n      ++this.pos;\r\n    }\r\n\r\n    // skip shebang\r\n    if (\r\n      this.pos + 1 < this.end &&\r\n      text.charCodeAt(this.pos) == CharCode.HASH &&\r\n      text.charCodeAt(this.pos + 1) == CharCode.EXCLAMATION\r\n    ) {\r\n      this.pos += 2;\r\n      while (\r\n        this.pos < this.end &&\r\n        text.charCodeAt(this.pos) != CharCode.LINEFEED\r\n      ) {\r\n        ++this.pos;\r\n      }\r\n      // 'next' now starts at lf or eof\r\n    }\r\n  }\r\n\r\n  next(identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): Token {\r\n    this.nextToken = -1;\r\n    return this.token = this.unsafeNext(identifierHandling);\r\n  }\r\n\r\n  private unsafeNext(\r\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\r\n    maxTokenLength: i32 = i32.MAX_VALUE\r\n  ): Token {\r\n    var text = this.source.text;\r\n    while (this.pos < this.end) {\r\n      this.tokenPos = this.pos;\r\n      let c = text.charCodeAt(this.pos);\r\n      switch (c) {\r\n        case CharCode.CARRIAGERETURN: {\r\n          if (\r\n            ++this.pos < this.end &&\r\n            text.charCodeAt(this.pos) == CharCode.LINEFEED\r\n          ) {\r\n            ++this.pos;\r\n          }\r\n          break;\r\n        }\r\n        case CharCode.LINEFEED:\r\n        case CharCode.TAB:\r\n        case CharCode.VERTICALTAB:\r\n        case CharCode.FORMFEED:\r\n        case CharCode.SPACE: {\r\n          ++this.pos;\r\n          break;\r\n        }\r\n        case CharCode.EXCLAMATION: {\r\n          ++this.pos;\r\n          if (\r\n            maxTokenLength > 1 && this.pos < this.end &&\r\n            text.charCodeAt(this.pos) == CharCode.EQUALS\r\n          ) {\r\n            ++this.pos;\r\n            if (\r\n              maxTokenLength > 2 && this.pos < this.end &&\r\n              text.charCodeAt(this.pos) == CharCode.EQUALS\r\n            ) {\r\n              ++this.pos;\r\n              return Token.EXCLAMATION_EQUALS_EQUALS;\r\n            }\r\n            return Token.EXCLAMATION_EQUALS;\r\n          }\r\n          return Token.EXCLAMATION;\r\n        }\r\n        case CharCode.DOUBLEQUOTE:\r\n        case CharCode.SINGLEQUOTE:\r\n        case CharCode.BACKTICK: { // TODO\r\n          return Token.STRINGLITERAL; // expects a call to readString\r\n        }\r\n        case CharCode.PERCENT: {\r\n          ++this.pos;\r\n          if (\r\n            maxTokenLength > 1 && this.pos < this.end &&\r\n            text.charCodeAt(this.pos) == CharCode.EQUALS\r\n          ) {\r\n            ++this.pos;\r\n            return Token.PERCENT_EQUALS;\r\n          }\r\n          return Token.PERCENT;\r\n        }\r\n        case CharCode.AMPERSAND: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.AMPERSAND) {\r\n              ++this.pos;\r\n              return Token.AMPERSAND_AMPERSAND;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.AMPERSAND_EQUALS;\r\n            }\r\n          }\r\n          return Token.AMPERSAND;\r\n        }\r\n        case CharCode.OPENPAREN: {\r\n          ++this.pos;\r\n          return Token.OPENPAREN;\r\n        }\r\n        case CharCode.CLOSEPAREN: {\r\n          ++this.pos;\r\n          return Token.CLOSEPAREN;\r\n        }\r\n        case CharCode.ASTERISK: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.ASTERISK_EQUALS;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.ASTERISK) {\r\n              ++this.pos;\r\n              if (\r\n                maxTokenLength > 2 && this.pos < this.end &&\r\n                text.charCodeAt(this.pos) == CharCode.EQUALS\r\n              ) {\r\n                ++this.pos;\r\n                return Token.ASTERISK_ASTERISK_EQUALS;\r\n              }\r\n              return Token.ASTERISK_ASTERISK;\r\n            }\r\n          }\r\n          return Token.ASTERISK;\r\n        }\r\n        case CharCode.PLUS: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.PLUS) {\r\n              ++this.pos;\r\n              return Token.PLUS_PLUS;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.PLUS_EQUALS;\r\n            }\r\n          }\r\n          return Token.PLUS;\r\n        }\r\n        case CharCode.COMMA: {\r\n          ++this.pos;\r\n          return Token.COMMA;\r\n        }\r\n        case CharCode.MINUS: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.MINUS) {\r\n              ++this.pos;\r\n              return Token.MINUS_MINUS;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.MINUS_EQUALS;\r\n            }\r\n          }\r\n          return Token.MINUS;\r\n        }\r\n        case CharCode.DOT: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (isDecimalDigit(text.charCodeAt(this.pos))) {\r\n              --this.pos;\r\n              return Token.FLOATLITERAL; // expects a call to readFloat\r\n            }\r\n            if (\r\n              maxTokenLength > 2 && this.pos + 1 < this.end &&\r\n              text.charCodeAt(this.pos) == CharCode.DOT &&\r\n              text.charCodeAt(this.pos + 1) == CharCode.DOT\r\n            ) {\r\n              this.pos += 2;\r\n              return Token.DOT_DOT_DOT;\r\n            }\r\n          }\r\n          return Token.DOT;\r\n        }\r\n        case CharCode.SLASH: {\r\n          let commentStartPos = this.pos;\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.SLASH) { // single-line\r\n              let commentKind = CommentKind.LINE;\r\n              if (\r\n                this.pos + 1 < this.end &&\r\n                text.charCodeAt(this.pos + 1) == CharCode.SLASH\r\n              ) {\r\n                ++this.pos;\r\n                commentKind = CommentKind.TRIPLE;\r\n              }\r\n              while (++this.pos < this.end) {\r\n                if (text.charCodeAt(this.pos) == CharCode.LINEFEED) {\r\n                  ++this.pos;\r\n                  break;\r\n                }\r\n              }\r\n              if (this.onComment) {\r\n                this.onComment(\r\n                  commentKind,\r\n                  text.substring(commentStartPos, this.pos),\r\n                  this.range(commentStartPos, this.pos)\r\n                );\r\n              }\r\n              break;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.ASTERISK) { // multi-line\r\n              let closed = false;\r\n              while (++this.pos < this.end) {\r\n                c = text.charCodeAt(this.pos);\r\n                if (\r\n                  c == CharCode.ASTERISK &&\r\n                  this.pos + 1 < this.end &&\r\n                  text.charCodeAt(this.pos + 1) == CharCode.SLASH\r\n                ) {\r\n                  this.pos += 2;\r\n                  closed = true;\r\n                  break;\r\n                }\r\n              }\r\n              if (!closed) {\r\n                this.error(\r\n                  DiagnosticCode._0_expected,\r\n                  this.range(this.pos), \"*/\"\r\n                );\r\n              } else if (this.onComment) {\r\n                this.onComment(\r\n                  CommentKind.BLOCK,\r\n                  text.substring(commentStartPos, this.pos),\r\n                  this.range(commentStartPos, this.pos)\r\n                );\r\n              }\r\n              break;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.SLASH_EQUALS;\r\n            }\r\n          }\r\n          return Token.SLASH;\r\n        }\r\n        case CharCode._0:\r\n        case CharCode._1:\r\n        case CharCode._2:\r\n        case CharCode._3:\r\n        case CharCode._4:\r\n        case CharCode._5:\r\n        case CharCode._6:\r\n        case CharCode._7:\r\n        case CharCode._8:\r\n        case CharCode._9: {\r\n          return this.testInteger()\r\n            ? Token.INTEGERLITERAL // expects a call to readInteger\r\n            : Token.FLOATLITERAL;  // expects a call to readFloat\r\n        }\r\n        case CharCode.COLON: {\r\n          ++this.pos;\r\n          return Token.COLON;\r\n        }\r\n        case CharCode.SEMICOLON: {\r\n          ++this.pos;\r\n          return Token.SEMICOLON;\r\n        }\r\n        case CharCode.LESSTHAN: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.LESSTHAN) {\r\n              ++this.pos;\r\n              if (\r\n                maxTokenLength > 2 &&\r\n                this.pos < this.end &&\r\n                text.charCodeAt(this.pos) == CharCode.EQUALS\r\n              ) {\r\n                ++this.pos;\r\n                return Token.LESSTHAN_LESSTHAN_EQUALS;\r\n              }\r\n              return Token.LESSTHAN_LESSTHAN;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.LESSTHAN_EQUALS;\r\n            }\r\n          }\r\n          return Token.LESSTHAN;\r\n        }\r\n        case CharCode.EQUALS: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              if (\r\n                maxTokenLength > 2 &&\r\n                this.pos < this.end &&\r\n                text.charCodeAt(this.pos) == CharCode.EQUALS\r\n              ) {\r\n                ++this.pos;\r\n                return Token.EQUALS_EQUALS_EQUALS;\r\n              }\r\n              return Token.EQUALS_EQUALS;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\r\n              ++this.pos;\r\n              return Token.EQUALS_GREATERTHAN;\r\n            }\r\n          }\r\n          return Token.EQUALS;\r\n        }\r\n        case CharCode.GREATERTHAN: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\r\n              ++this.pos;\r\n              if (maxTokenLength > 2 && this.pos < this.end) {\r\n                if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\r\n                  ++this.pos;\r\n                  if (\r\n                    maxTokenLength > 3 && this.pos < this.end &&\r\n                    text.charCodeAt(this.pos) == CharCode.EQUALS\r\n                  ) {\r\n                    ++this.pos;\r\n                    return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS;\r\n                  }\r\n                  return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN;\r\n                }\r\n                if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n                  ++this.pos;\r\n                  return Token.GREATERTHAN_GREATERTHAN_EQUALS;\r\n                }\r\n              }\r\n              return Token.GREATERTHAN_GREATERTHAN;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.GREATERTHAN_EQUALS;\r\n            }\r\n          }\r\n          return Token.GREATERTHAN;\r\n        }\r\n        case CharCode.QUESTION: {\r\n          ++this.pos;\r\n          return Token.QUESTION;\r\n        }\r\n        case CharCode.OPENBRACKET: {\r\n          ++this.pos;\r\n          return Token.OPENBRACKET;\r\n        }\r\n        case CharCode.CLOSEBRACKET: {\r\n          ++this.pos;\r\n          return Token.CLOSEBRACKET;\r\n        }\r\n        case CharCode.CARET: {\r\n          ++this.pos;\r\n          if (\r\n            maxTokenLength > 1 && this.pos < this.end &&\r\n            text.charCodeAt(this.pos) == CharCode.EQUALS\r\n          ) {\r\n            ++this.pos;\r\n            return Token.CARET_EQUALS;\r\n          }\r\n          return Token.CARET;\r\n        }\r\n        case CharCode.OPENBRACE: {\r\n          ++this.pos;\r\n          return Token.OPENBRACE;\r\n        }\r\n        case CharCode.BAR: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.BAR) {\r\n              ++this.pos;\r\n              return Token.BAR_BAR;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.BAR_EQUALS;\r\n            }\r\n          }\r\n          return Token.BAR;\r\n        }\r\n        case CharCode.CLOSEBRACE: {\r\n          ++this.pos;\r\n          return Token.CLOSEBRACE;\r\n        }\r\n        case CharCode.TILDE: {\r\n          ++this.pos;\r\n          return Token.TILDE;\r\n        }\r\n        case CharCode.AT: {\r\n          ++this.pos;\r\n          return Token.AT;\r\n        }\r\n        default: {\r\n          if (isIdentifierStart(c)) {\r\n            if (isKeywordCharacter(c)) {\r\n              let posBefore = this.pos;\r\n              while (\r\n                ++this.pos < this.end &&\r\n                isIdentifierPart(c = text.charCodeAt(this.pos))\r\n              ) {\r\n                if (!isKeywordCharacter(c)) {\r\n                  this.pos = posBefore;\r\n                  return Token.IDENTIFIER;\r\n                }\r\n              }\r\n              let keywordText = text.substring(posBefore, this.pos);\r\n              let keywordToken = tokenFromKeyword(keywordText);\r\n              if (\r\n                keywordToken != Token.INVALID &&\r\n                identifierHandling !== IdentifierHandling.ALWAYS &&\r\n                !(\r\n                  identifierHandling === IdentifierHandling.PREFER &&\r\n                  tokenIsAlsoIdentifier(keywordToken)\r\n                )\r\n              ) {\r\n                return keywordToken;\r\n              }\r\n              this.pos = posBefore;\r\n            }\r\n            return Token.IDENTIFIER; // expects a call to readIdentifier\r\n          } else if (isWhiteSpace(c)) {\r\n            ++this.pos;\r\n            break;\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Invalid_character,\r\n            this.range(this.pos, this.pos + 1)\r\n          );\r\n          ++this.pos;\r\n          return Token.INVALID;\r\n        }\r\n      }\r\n    }\r\n    return Token.ENDOFFILE;\r\n  }\r\n\r\n  peek(\r\n    checkOnNewLine: bool = false,\r\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\r\n    maxCompoundLength: i32 = i32.MAX_VALUE\r\n  ): Token {\r\n    var text = this.source.text;\r\n    if (this.nextToken < 0) {\r\n      let posBefore = this.pos;\r\n      let tokenBefore = this.token;\r\n      let tokenPosBefore = this.tokenPos;\r\n      this.nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\r\n      this.nextTokenPos = this.tokenPos;\r\n      if (checkOnNewLine) {\r\n        this.nextTokenOnNewLine = false;\r\n        while (--this.tokenPos > posBefore) {\r\n          if (isLineBreak(text.charCodeAt(this.tokenPos))) {\r\n            this.nextTokenOnNewLine = true;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      this.pos = posBefore;\r\n      this.token = tokenBefore;\r\n      this.tokenPos = tokenPosBefore;\r\n    }\r\n    return this.nextToken;\r\n  }\r\n\r\n  skipIdentifier(): bool {\r\n    return this.skip(Token.IDENTIFIER, IdentifierHandling.PREFER);\r\n  }\r\n\r\n  skipIdentifierName(): bool {\r\n    return this.skip(Token.IDENTIFIER, IdentifierHandling.ALWAYS);\r\n  }\r\n\r\n  skip(token: Token, identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): bool {\r\n    var posBefore = this.pos;\r\n    var tokenBefore = this.token;\r\n    var tokenPosBefore = this.tokenPos;\r\n    var maxCompoundLength = i32.MAX_VALUE;\r\n    switch (token) {\r\n      case Token.GREATERTHAN: { // where parsing type arguments\r\n        maxCompoundLength = 1;\r\n        break;\r\n      }\r\n    }\r\n    this.token = this.unsafeNext(identifierHandling, maxCompoundLength);\r\n    if (this.token == token) {\r\n      this.nextToken = -1;\r\n      return true;\r\n    } else {\r\n      this.pos = posBefore;\r\n      this.token = tokenBefore;\r\n      this.tokenPos = tokenPosBefore;\r\n      return false;\r\n    }\r\n  }\r\n\r\n  mark(): State {\r\n    var state: State;\r\n    if (reusableState) {\r\n      state = reusableState;\r\n      reusableState = null;\r\n    } else {\r\n      state = new State();\r\n    }\r\n    state.pos = this.pos;\r\n    state.token = this.token;\r\n    state.tokenPos = this.tokenPos;\r\n    return state;\r\n  }\r\n\r\n  discard(state: State): void {\r\n    reusableState = state;\r\n  }\r\n\r\n  reset(state: State): void {\r\n    this.pos = state.pos;\r\n    this.token = state.token;\r\n    this.tokenPos = state.tokenPos;\r\n    this.nextToken = -1;\r\n  }\r\n\r\n  range(start: i32 = -1, end: i32 = -1): Range {\r\n    if (start < 0) {\r\n      start = this.tokenPos;\r\n      end = this.pos;\r\n    } else if (end < 0) {\r\n      end = start;\r\n    }\r\n    return new Range(this.source, start, end);\r\n  }\r\n\r\n  readIdentifier(): string {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    while (\r\n      ++this.pos < this.end &&\r\n      isIdentifierPart(text.charCodeAt(this.pos))\r\n    );\r\n    return text.substring(start, this.pos);\r\n  }\r\n\r\n  readString(): string {\r\n    var text = this.source.text;\r\n    var quote = text.charCodeAt(this.pos++);\r\n    var start = this.pos;\r\n    var result = \"\";\r\n    while (true) {\r\n      if (this.pos >= this.end) {\r\n        result += text.substring(start, this.pos);\r\n        this.error(\r\n          DiagnosticCode.Unterminated_string_literal,\r\n          this.range(start - 1, this.end)\r\n        );\r\n        break;\r\n      }\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c == quote) {\r\n        result += text.substring(start, this.pos++);\r\n        break;\r\n      }\r\n      if (c == CharCode.BACKSLASH) {\r\n        result += text.substring(start, this.pos);\r\n        result += this.readEscapeSequence();\r\n        start = this.pos;\r\n        continue;\r\n      }\r\n      if (isLineBreak(c)) {\r\n        result += text.substring(start, this.pos);\r\n        this.error(\r\n          DiagnosticCode.Unterminated_string_literal,\r\n          this.range(start - 1, this.pos)\r\n        );\r\n        break;\r\n      }\r\n      ++this.pos;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  readEscapeSequence(): string {\r\n    if (++this.pos >= this.end) {\r\n      this.error(\r\n        DiagnosticCode.Unexpected_end_of_text,\r\n        this.range(this.end)\r\n      );\r\n      return \"\";\r\n    }\r\n\r\n    var text = this.source.text;\r\n    var c = text.charCodeAt(this.pos++);\r\n    switch (c) {\r\n      case CharCode._0: return \"\\0\";\r\n      case CharCode.b: return \"\\b\";\r\n      case CharCode.t: return \"\\t\";\r\n      case CharCode.n: return \"\\n\";\r\n      case CharCode.v: return \"\\v\";\r\n      case CharCode.f: return \"\\f\";\r\n      case CharCode.r: return \"\\r\";\r\n      case CharCode.SINGLEQUOTE: return \"'\";\r\n      case CharCode.DOUBLEQUOTE: return \"\\\"\";\r\n      case CharCode.u: {\r\n        if (\r\n          this.pos < this.end &&\r\n          text.charCodeAt(this.pos) == CharCode.OPENBRACE\r\n        ) {\r\n          ++this.pos;\r\n          return this.readExtendedUnicodeEscape(); // \\u{DDDDDDDD}\r\n        }\r\n        return this.readUnicodeEscape(); // \\uDDDD\r\n      }\r\n      case CharCode.CARRIAGERETURN: {\r\n        if (\r\n          this.pos < this.end &&\r\n          text.charCodeAt(this.pos) == CharCode.LINEFEED\r\n        ) {\r\n          ++this.pos;\r\n        }\r\n        // fall through\r\n      }\r\n      case CharCode.LINEFEED:\r\n      case CharCode.LINESEPARATOR:\r\n      case CharCode.PARAGRAPHSEPARATOR: return \"\";\r\n      default: return String.fromCharCode(c);\r\n    }\r\n  }\r\n\r\n  readRegexpPattern(): string {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var escaped = false;\r\n    while (true) {\r\n      if (this.pos >= this.end) {\r\n        this.error(\r\n          DiagnosticCode.Unterminated_regular_expression_literal,\r\n          this.range(start, this.end)\r\n        );\r\n        break;\r\n      }\r\n      if (text.charCodeAt(this.pos) == CharCode.BACKSLASH) {\r\n        ++this.pos;\r\n        escaped = true;\r\n        continue;\r\n      }\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c == CharCode.SLASH && !escaped) break;\r\n      if (isLineBreak(c)) {\r\n        this.error(\r\n          DiagnosticCode.Unterminated_regular_expression_literal,\r\n          this.range(start, this.pos)\r\n        );\r\n        break;\r\n      }\r\n      ++this.pos;\r\n      escaped = false;\r\n    }\r\n    return text.substring(start, this.pos);\r\n  }\r\n\r\n  readRegexpFlags(): string {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var flags = 0;\r\n    while (this.pos < this.end) {\r\n      let c: i32 = text.charCodeAt(this.pos);\r\n      if (!isIdentifierPart(c)) break;\r\n      ++this.pos;\r\n\r\n      // make sure each supported flag is unique\r\n      switch (c) {\r\n        case CharCode.g: {\r\n          flags |= flags & 1 ? -1 : 1;\r\n          break;\r\n        }\r\n        case CharCode.i: {\r\n          flags |= flags & 2 ? -1 : 2;\r\n          break;\r\n        }\r\n        case CharCode.m: {\r\n          flags |= flags & 4 ? -1 : 4;\r\n          break;\r\n        }\r\n        default: {\r\n          flags = -1;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    if (flags == -1) {\r\n      this.error(\r\n        DiagnosticCode.Invalid_regular_expression_flags,\r\n        this.range(start, this.pos)\r\n      );\r\n    }\r\n    return text.substring(start, this.pos);\r\n  }\r\n\r\n  testInteger(): bool {\r\n    var text = this.source.text;\r\n    if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 1 < this.end) {\r\n      switch (text.charCodeAt(this.pos + 2)) {\r\n        case CharCode.X:\r\n        case CharCode.x:\r\n        case CharCode.B:\r\n        case CharCode.b:\r\n        case CharCode.O:\r\n        case CharCode.o: return true;\r\n      }\r\n    }\r\n    var pos = this.pos;\r\n    while (pos < this.end) {\r\n      let c = text.charCodeAt(pos);\r\n      if (c == CharCode.DOT || c == CharCode.E || c == CharCode.e) {\r\n        return false;\r\n      }\r\n      if (c < CharCode._0 || c > CharCode._9) break;\r\n      pos++;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  readInteger(): I64 {\r\n    var text = this.source.text;\r\n    if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\r\n      switch (text.charCodeAt(this.pos + 1)) {\r\n        case CharCode.X:\r\n        case CharCode.x: {\r\n          this.pos += 2;\r\n          return this.readHexInteger();\r\n        }\r\n        case CharCode.B:\r\n        case CharCode.b: {\r\n          this.pos += 2;\r\n          return this.readBinaryInteger();\r\n        }\r\n        case CharCode.O:\r\n        case CharCode.o: {\r\n          this.pos += 2;\r\n          return this.readOctalInteger();\r\n        }\r\n      }\r\n      if (isOctalDigit(text.charCodeAt(this.pos + 1))) {\r\n        let start = this.pos;\r\n        ++this.pos;\r\n        let value = this.readOctalInteger();\r\n        this.error(\r\n          DiagnosticCode.Octal_literals_are_not_allowed_in_strict_mode,\r\n          this.range(start, this.pos)\r\n        );\r\n        return value;\r\n      }\r\n    }\r\n    return this.readDecimalInteger();\r\n  }\r\n\r\n  readHexInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0, 0);\r\n    var i64_16 = i64_new(16, 0);\r\n    while (this.pos < this.end) {\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c >= CharCode._0 && c <= CharCode._9) {\r\n        // value = value * 16 + c - CharCode._0;\r\n        value = i64_add(\r\n          i64_mul(value, i64_16),\r\n          i64_new(c - CharCode._0, 0)\r\n        );\r\n       } else if (c >= CharCode.A && c <= CharCode.F) {\r\n        // value = value * 16 + 10 + c - CharCode.A;\r\n        value = i64_add(\r\n          i64_mul(value, i64_16),\r\n          i64_new(10 + c - CharCode.A, 0)\r\n        );\r\n      } else if (c >= CharCode.a && c <= CharCode.f) {\r\n        // value = value * 16 + 10 + c - CharCode.a;\r\n        value = i64_add(\r\n          i64_mul(value, i64_16),\r\n          i64_new(10 + c - CharCode.a, 0)\r\n        );\r\n      } else {\r\n        break;\r\n      }\r\n      ++this.pos;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Hexadecimal_digit_expected,\r\n        this.range(start)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readDecimalInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0, 0);\r\n    var i64_10 = i64_new(10, 0);\r\n    while (this.pos < this.end) {\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c >= CharCode._0 && c <= CharCode._9) {\r\n        // value = value * 10 + c - CharCode._0;\r\n        value = i64_add(\r\n          i64_mul(value, i64_10),\r\n          i64_new(c - CharCode._0, 0)\r\n        );\r\n      } else {\r\n        break;\r\n      }\r\n      ++this.pos;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Digit_expected,\r\n        this.range(start)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readOctalInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0, 0);\r\n    var i64_8 = i64_new(8, 0);\r\n    while (this.pos < this.end) {\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c >= CharCode._0 && c <= CharCode._7) {\r\n        // value = value * 8 + c - CharCode._0;\r\n        value = i64_add(\r\n          i64_mul(value, i64_8),\r\n          i64_new(c - CharCode._0, 0)\r\n        );\r\n      } else {\r\n        break;\r\n      }\r\n      ++this.pos;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Octal_digit_expected,\r\n        this.range(start)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readBinaryInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0, 0);\r\n    var i64_2 = i64_new(2, 0);\r\n    var i64_1 = i64_new(1, 0);\r\n    while (this.pos < this.end) {\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c == CharCode._0) {\r\n        // value = value * 2;\r\n        value = i64_mul(\r\n          value,\r\n          i64_2\r\n        );\r\n      } else if (c == CharCode._1) {\r\n        // value = value * 2 + 1;\r\n        value = i64_add(\r\n          i64_mul(value, i64_2),\r\n          i64_1\r\n        );\r\n      } else {\r\n        break;\r\n      }\r\n      ++this.pos;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Binary_digit_expected,\r\n        this.range(start)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readFloat(): f64 {\r\n    // var text = this.source.text;\r\n    // if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\r\n    //   switch (text.charCodeAt(this.pos + 1)) {\r\n    //     case CharCode.X:\r\n    //     case CharCode.x: {\r\n    //       this.pos += 2;\r\n    //       return this.readHexFloat();\r\n    //     }\r\n    //   }\r\n    // }\r\n    return this.readDecimalFloat();\r\n  }\r\n\r\n  readDecimalFloat(): f64 {\r\n    var start = this.pos;\r\n    var text = this.source.text;\r\n    while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\r\n      ++this.pos;\r\n    }\r\n    if (this.pos < this.end && text.charCodeAt(this.pos) == CharCode.DOT) {\r\n      ++this.pos;\r\n      while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\r\n        ++this.pos;\r\n      }\r\n    }\r\n    if (this.pos < this.end) {\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c == CharCode.E || c == CharCode.e) {\r\n        if (\r\n          ++this.pos < this.end && (\r\n            text.charCodeAt(this.pos) == CharCode.MINUS ||\r\n            text.charCodeAt(this.pos) == CharCode.PLUS\r\n          ) &&\r\n          isDecimalDigit(text.charCodeAt(this.pos + 1))\r\n        ) {\r\n          ++this.pos;\r\n        }\r\n        while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\r\n          ++this.pos;\r\n        }\r\n      }\r\n    }\r\n    return parseFloat(text.substring(start, this.pos));\r\n  }\r\n\r\n  readHexFloat(): f64 {\r\n    throw new Error(\"not implemented\"); // TBD\r\n  }\r\n\r\n  readUnicodeEscape(): string {\r\n    var remain = 4;\r\n    var value = 0;\r\n    var text = this.source.text;\r\n    while (this.pos < this.end) {\r\n      let c = text.charCodeAt(this.pos++);\r\n      if (c >= CharCode._0 && c <= CharCode._9) {\r\n        value = value * 16 + c - CharCode._0;\r\n      } else if (c >= CharCode.A && c <= CharCode.F) {\r\n        value = value * 16 + 10 + c - CharCode.A;\r\n      } else if (c >= CharCode.a && c <= CharCode.f) {\r\n        value = value * 16 + 10 + c - CharCode.a;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Hexadecimal_digit_expected,\r\n          this.range(this.pos - 1, this.pos)\r\n        );\r\n        return \"\";\r\n      }\r\n      if (--remain == 0) break;\r\n    }\r\n    if (remain) {\r\n      this.error(\r\n        DiagnosticCode.Unexpected_end_of_text,\r\n        this.range(this.pos)\r\n      );\r\n      return \"\";\r\n    }\r\n    return String.fromCharCode(value);\r\n  }\r\n\r\n  private readExtendedUnicodeEscape(): string {\r\n    var start = this.pos;\r\n    var value = this.readHexInteger();\r\n    var value32 = i64_low(value);\r\n    var invalid = false;\r\n\r\n    assert(!i64_high(value));\r\n    if (value32 > 0x10FFFF) {\r\n      this.error(\r\n        DiagnosticCode.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive,\r\n        this.range(start, this.pos)\r\n      );\r\n      invalid = true;\r\n    }\r\n\r\n    var text = this.source.text;\r\n    if (this.pos >= this.end) {\r\n      this.error(\r\n        DiagnosticCode.Unexpected_end_of_text,\r\n        this.range(start, this.end)\r\n      );\r\n      invalid = true;\r\n    } else if (text.charCodeAt(this.pos) == CharCode.CLOSEBRACE) {\r\n      ++this.pos;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Unterminated_Unicode_escape_sequence,\r\n        this.range(start, this.pos)\r\n      );\r\n      invalid = true;\r\n    }\r\n\r\n    if (invalid) return \"\";\r\n    return value32 < 65536\r\n      ? String.fromCharCode(value32)\r\n      : String.fromCharCode(\r\n        (((value32 - 65536) / 1024 | 0) + 0xD800) as i32,\r\n        ( (value32 - 65536) % 1024      + 0xDC00) as i32\r\n      );\r\n  }\r\n\r\n  finish(): void {\r\n  }\r\n}\r\n\r\n/** Tokenizer state as returned by {@link Tokenizer#mark} and consumed by {@link Tokenizer#reset}. */\r\nexport class State {\r\n  /** Current position. */\r\n  pos: i32;\r\n  /** Current token. */\r\n  token: Token;\r\n  /** Current token's position. */\r\n  tokenPos: i32;\r\n}\r\n\r\n// Reusable state object to reduce allocations\r\nvar reusableState: State | null = null;\r\n","/**\r\n * Mappings from AssemblyScript types to WebAssembly types.\r\n * @module types\r\n *//***/\r\n\r\nimport {\r\n  Class,\r\n  FunctionTarget\r\n} from \"./program\";\r\n\r\nimport {\r\n  NativeType,\r\n  ExpressionRef,\r\n  Module\r\n} from \"./module\";\r\n\r\n/** Indicates the kind of a type. */\r\nexport const enum TypeKind {\r\n\r\n  // signed integers\r\n\r\n  /** An 8-bit signed integer. */\r\n  I8,\r\n  /** A 16-bit signed integer. */\r\n  I16,\r\n  /** A 32-bit signed integer. */\r\n  I32,\r\n  /** A 64-bit signed integer. */\r\n  I64,\r\n  /** A 32-bit/64-bit signed integer, depending on the target. */\r\n  ISIZE,\r\n\r\n  // unsigned integers\r\n\r\n  /** An 8-bit unsigned integer. */\r\n  U8,\r\n  /** A 16-bit unsigned integer. */\r\n  U16,\r\n  /** A 32-bit unsigned integer. Also the base of function types. */\r\n  U32,\r\n  /** A 64-bit unsigned integer. */\r\n  U64,\r\n  /** A 32-bit/64-bit unsigned integer, depending on the target. Also the base of class types. */\r\n  USIZE,\r\n  /** A 1-bit unsigned integer. */\r\n  BOOL, // sic\r\n\r\n  // floats\r\n\r\n  /** A 32-bit float. */\r\n  F32,\r\n  /** A 64-bit double. */\r\n  F64,\r\n\r\n  // other\r\n\r\n  /** No return type. */\r\n  VOID\r\n}\r\n\r\n/** Indicates capabilities of a type. */\r\nexport const enum TypeFlags {\r\n  NONE = 0,\r\n  /** Is a signed type that can represent negative values. */\r\n  SIGNED = 1 << 0,\r\n  /** Is an unsigned type that cannot represent negative values. */\r\n  UNSIGNED = 1 << 1,\r\n  /** Is an integer type. */\r\n  INTEGER = 1 << 2,\r\n  /** Is a floating point type. */\r\n  FLOAT = 1 << 3,\r\n  /** Is a pointer type. */\r\n  POINTER = 1 << 4,\r\n  /** Is smaller than 32-bits. */\r\n  SHORT = 1 << 5,\r\n  /** Is larger than 32-bits. */\r\n  LONG = 1 << 6,\r\n  /** Is a value type. */\r\n  VALUE = 1 << 7,\r\n  /** Is a reference type. */\r\n  REFERENCE = 1 << 8,\r\n  /** Is a nullable type. */\r\n  NULLABLE = 1 << 9\r\n}\r\n\r\n/** Represents a resolved type. */\r\nexport class Type {\r\n\r\n  /** Type kind. */\r\n  kind: TypeKind;\r\n  /** Type flags. */\r\n  flags: TypeFlags;\r\n  /** Size in bits. */\r\n  size: u32;\r\n  /** Size in bytes. */\r\n  byteSize: i32;\r\n  /** Underlying class reference, if a class type. */\r\n  classReference: Class | null;\r\n  /** Underlying signature reference, if a function type. */\r\n  signatureReference: Signature | null;\r\n  /** Respective non-nullable type, if nullable. */\r\n  nonNullableType: Type;\r\n  /** Cached nullable type, if non-nullable. */\r\n  private cachedNullableType: Type | null = null;\r\n\r\n  /** Constructs a new resolved type. */\r\n  constructor(kind: TypeKind, flags: TypeFlags, size: u32) {\r\n    this.kind = kind;\r\n    this.flags = flags;\r\n    this.size = size;\r\n    this.byteSize = <i32>ceil<f64>(<f64>size / 8);\r\n    this.classReference = null;\r\n    this.signatureReference = null;\r\n    this.nonNullableType = this;\r\n  }\r\n\r\n  /** Returns the int type of this type. Defaults to `Type.i32` if this is not an int type. */\r\n  get intType(): Type {\r\n    switch (this.kind) {\r\n      case TypeKind.I8:\r\n      case TypeKind.I16:\r\n      case TypeKind.I32:\r\n      case TypeKind.I64:\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.U8:\r\n      case TypeKind.U16:\r\n      case TypeKind.U32:\r\n      case TypeKind.U64:\r\n      case TypeKind.USIZE: return this;\r\n      case TypeKind.BOOL:\r\n      default: return Type.i32;\r\n    }\r\n  }\r\n\r\n  /** Computes the sign-extending shift in the target type. */\r\n  computeSmallIntegerShift(targetType: Type): u32 {\r\n    return targetType.size - this.size;\r\n  }\r\n\r\n  /** Computes the truncating mask in the target type. */\r\n  computeSmallIntegerMask(targetType: Type): u32 {\r\n    var size = this.is(TypeFlags.UNSIGNED) ? this.size : this.size - 1;\r\n    return ~0 >>> (targetType.size - size);\r\n  }\r\n\r\n  /** Tests if this type has (all of) the specified flags. */\r\n  is(flags: TypeFlags): bool { return (this.flags & flags) == flags; }\r\n  /** Tests if this type has any of the specified flags. */\r\n  isAny(flags: TypeFlags): bool { return (this.flags & flags) != 0; }\r\n\r\n  /** Composes a class type from this type and a class. */\r\n  asClass(classType: Class): Type {\r\n    assert(this.kind == TypeKind.USIZE && !this.classReference);\r\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\r\n    ret.classReference = classType;\r\n    return ret;\r\n  }\r\n\r\n  /** Composes a function type from this type and a function. */\r\n  asFunction(signature: Signature): Type {\r\n    assert(this.kind == TypeKind.U32 && !this.signatureReference);\r\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\r\n    ret.signatureReference = signature;\r\n    return ret;\r\n  }\r\n\r\n  /** Composes the respective nullable type of this type. */\r\n  asNullable(): Type {\r\n    assert(this.is(TypeFlags.REFERENCE));\r\n    if (!this.cachedNullableType) {\r\n      assert(!this.is(TypeFlags.NULLABLE));\r\n      this.cachedNullableType = new Type(this.kind, this.flags | TypeFlags.NULLABLE, this.size);\r\n      this.cachedNullableType.classReference = this.classReference;       // either a class reference\r\n      this.cachedNullableType.signatureReference = this.signatureReference; // or a function reference\r\n    }\r\n    return this.cachedNullableType;\r\n  }\r\n\r\n  /** Tests if a value of this type is assignable to a target of the specified type. */\r\n  isAssignableTo(target: Type, signednessIsImportant: bool = false): bool {\r\n    var currentClass: Class | null;\r\n    var targetClass: Class | null;\r\n    var currentFunction: Signature | null;\r\n    var targetFunction: Signature | null;\r\n    if (this.is(TypeFlags.REFERENCE)) {\r\n      if (target.is(TypeFlags.REFERENCE)) {\r\n        if (currentClass = this.classReference) {\r\n          if (targetClass = target.classReference) {\r\n            return currentClass.isAssignableTo(targetClass);\r\n          }\r\n        } else if (currentFunction = this.signatureReference) {\r\n          if (targetFunction = target.signatureReference) {\r\n            return currentFunction.isAssignableTo(targetFunction);\r\n          }\r\n        }\r\n      }\r\n    } else if (!target.is(TypeFlags.REFERENCE)) {\r\n      if (this.is(TypeFlags.INTEGER)) {\r\n        if (target.is(TypeFlags.INTEGER)) {\r\n          if (!signednessIsImportant || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)) {\r\n            return this.size <= target.size;\r\n          }\r\n        } else if (target.kind == TypeKind.F32) {\r\n          return this.size <= 23; // mantissa bits\r\n        } else if (target.kind == TypeKind.F64) {\r\n          return this.size <= 52; // ^\r\n        }\r\n      } else if (this.is(TypeFlags.FLOAT)) {\r\n        if (target.is(TypeFlags.FLOAT)) {\r\n          return this.size <= target.size;\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /** Determines the common compatible type of two types, if any. */\r\n  static commonCompatible(left: Type, right: Type, signednessIsImportant: bool): Type | null {\r\n    if (right.isAssignableTo(left, signednessIsImportant)) return left;\r\n    else if (left.isAssignableTo(right, signednessIsImportant)) return right;\r\n    return null;\r\n  }\r\n\r\n  /** Converts this type to its TypeScript representation. */\r\n  toString(kindOnly: bool = false): string {\r\n    switch (this.kind) {\r\n      case TypeKind.I8: return \"i8\";\r\n      case TypeKind.I16: return \"i16\";\r\n      case TypeKind.I32: return \"i32\";\r\n      case TypeKind.I64: return \"i64\";\r\n      case TypeKind.ISIZE: return \"isize\";\r\n      case TypeKind.U8: return \"u8\";\r\n      case TypeKind.U16: return \"u16\";\r\n      case TypeKind.U32: {\r\n        let functionType = this.signatureReference;\r\n        return kindOnly || !functionType ? \"u32\" : functionType.toString(true);\r\n      }\r\n      case TypeKind.U64: return \"u64\";\r\n      case TypeKind.USIZE: {\r\n        let classType = this.classReference;\r\n        return kindOnly || !classType ? \"usize\" : classType.toString();\r\n      }\r\n      case TypeKind.BOOL: return \"bool\";\r\n      case TypeKind.F32: return \"f32\";\r\n      case TypeKind.F64: return \"f64\";\r\n      case TypeKind.VOID: return \"void\";\r\n      default: {\r\n        assert(false);\r\n        return \"\";\r\n      }\r\n    }\r\n  }\r\n\r\n  // Binaryen specific\r\n\r\n  /** Converts this type to its respective native type. */\r\n  toNativeType(): NativeType {\r\n    switch (this.kind) {\r\n      default: return NativeType.I32;\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return NativeType.I64;\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: return this.size == 64 ? NativeType.I64 : NativeType.I32;\r\n      case TypeKind.F32: return NativeType.F32;\r\n      case TypeKind.F64: return NativeType.F64;\r\n      case TypeKind.VOID:  return NativeType.None;\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its native `0` value. */\r\n  toNativeZero(module: Module): ExpressionRef {\r\n    switch (this.kind) {\r\n      case TypeKind.VOID: assert(false);\r\n      default: return module.createI32(0);\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(0);\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return module.createI64(0);\r\n      case TypeKind.F32: return module.createF32(0);\r\n      case TypeKind.F64: return module.createF64(0);\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its native `1` value. */\r\n  toNativeOne(module: Module): ExpressionRef {\r\n    switch (this.kind) {\r\n      case TypeKind.VOID: assert(false);\r\n      default: return module.createI32(1);\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(1);\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return module.createI64(1);\r\n      case TypeKind.F32: return module.createF32(1);\r\n      case TypeKind.F64: return module.createF64(1);\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its native `-1` value. */\r\n  toNativeNegOne(module: Module): ExpressionRef {\r\n    switch (this.kind) {\r\n      case TypeKind.VOID: assert(false);\r\n      default: return module.createI32(-1);\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(-1);\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return module.createI64(-1, -1);\r\n      case TypeKind.F32: return module.createF32(-1);\r\n      case TypeKind.F64: return module.createF64(-1);\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its signature string. */\r\n  toSignatureString(): string {\r\n    switch (this.kind) {\r\n      default: return \"i\";\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return \"I\";\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: return this.size == 64 ? \"I\" : \"i\";\r\n      case TypeKind.F32: return \"f\";\r\n      case TypeKind.F64: return \"F\";\r\n      case TypeKind.VOID: return \"v\";\r\n    }\r\n  }\r\n\r\n  // Types\r\n\r\n  /** An 8-bit signed integer. */\r\n  static readonly i8: Type  = new Type(TypeKind.I8,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,   8\r\n  );\r\n\r\n  /** A 16-bit signed integer. */\r\n  static readonly i16: Type = new Type(TypeKind.I16,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  16\r\n  );\r\n\r\n  /** A 32-bit signed integer. */\r\n  static readonly i32: Type = new Type(TypeKind.I32,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit signed integer. */\r\n  static readonly i64: Type = new Type(TypeKind.I64,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 32-bit signed size. WASM32 only. */\r\n  static readonly isize32: Type = new Type(TypeKind.ISIZE,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.POINTER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit signed size. WASM64 only. */\r\n  static readonly isize64: Type = new Type(TypeKind.ISIZE,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.POINTER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** An 8-bit unsigned integer. */\r\n  static readonly u8: Type = new Type(TypeKind.U8,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,   8\r\n  );\r\n\r\n  /** A 16-bit unsigned integer. */\r\n  static readonly u16: Type = new Type(TypeKind.U16,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  16\r\n  );\r\n\r\n  /** A 32-bit unsigned integer. */\r\n  static readonly u32: Type = new Type(TypeKind.U32,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit unsigned integer. */\r\n  static readonly u64: Type = new Type(TypeKind.U64,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 32-bit unsigned size. WASM32 only. */\r\n  static readonly usize32: Type = new Type(TypeKind.USIZE,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.POINTER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit unsigned size. WASM64 only. */\r\n  static readonly usize64: Type = new Type(TypeKind.USIZE,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.POINTER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 1-bit unsigned integer. */\r\n  static readonly bool: Type = new Type(TypeKind.BOOL,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,   1\r\n  );\r\n\r\n  /** A 32-bit float. */\r\n  static readonly f32: Type = new Type(TypeKind.F32,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.FLOAT    |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit float. */\r\n  static readonly f64: Type = new Type(TypeKind.F64,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.FLOAT    |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** No return type. */\r\n  static readonly void: Type = new Type(TypeKind.VOID, TypeFlags.NONE, 0);\r\n}\r\n\r\n/** Converts an array of types to an array of native types. */\r\nexport function typesToNativeTypes(types: Type[]): NativeType[] {\r\n  var numTypes = types.length;\r\n  var ret = new Array<NativeType>(numTypes);\r\n  for (let i = 0; i < numTypes; ++i) ret[i] = types[i].toNativeType();\r\n  return ret;\r\n}\r\n\r\n/** Converts an array of types to its combined string representation. */\r\nexport function typesToString(types: Type[]): string {\r\n  var numTypes = types.length;\r\n  if (!numTypes) return \"\";\r\n  var sb = new Array<string>(numTypes);\r\n  for (let i = 0; i < numTypes; ++i) sb[i] = types[i].toString();\r\n  return sb.join(\",\");\r\n}\r\n\r\n/** Represents a fully resolved function signature. */\r\nexport class Signature {\r\n\r\n  /** Parameter types, if any, excluding `this`. */\r\n  parameterTypes: Type[];\r\n  /** Parameter names, if known, excluding `this`. */\r\n  parameterNames: string[] | null;\r\n  /** Number of required parameters excluding `this`. Other parameters are considered optional. */\r\n  requiredParameters: i32;\r\n  /** Return type. */\r\n  returnType: Type;\r\n  /** This type, if an instance signature. */\r\n  thisType: Type | null;\r\n  /** Whether the last parameter is a rest parameter. */\r\n  hasRest: bool;\r\n  /** Cached {@link FunctionTarget}. */\r\n  cachedFunctionTarget: FunctionTarget | null = null;\r\n  /** Respective function type. */\r\n  type: Type;\r\n\r\n  /** Constructs a new signature. */\r\n  constructor(\r\n    parameterTypes: Type[] | null = null,\r\n    returnType: Type | null = null,\r\n    thisType: Type | null = null\r\n  ) {\r\n    this.parameterTypes = parameterTypes ? parameterTypes : [];\r\n    this.parameterNames = null;\r\n    this.requiredParameters = 0;\r\n    this.returnType = returnType ? returnType : Type.void;\r\n    this.thisType = thisType;\r\n    this.hasRest = false;\r\n    this.type = Type.u32.asFunction(this);\r\n  }\r\n\r\n  /** Gets the known or, alternatively, generic parameter name at the specified index. */\r\n  getParameterName(index: i32): string {\r\n    var parameterNames = this.parameterNames;\r\n    return parameterNames && parameterNames.length > index\r\n      ? parameterNames[index]\r\n      : getDefaultParameterName(index);\r\n  }\r\n\r\n  /** Tests if a value of this function type is assignable to a target of the specified function type. */\r\n  isAssignableTo(target: Signature): bool {\r\n    // TODO: maybe cache results?\r\n\r\n    // check `this` type\r\n    var thisThisType = this.thisType;\r\n    var targetThisType = target.thisType;\r\n    if (thisThisType) {\r\n      if (!(targetThisType && thisThisType.isAssignableTo(targetThisType))) return false;\r\n    } else if (targetThisType) {\r\n      return false;\r\n    }\r\n\r\n    // check rest parameter\r\n    if (this.hasRest != target.hasRest) return false; // TODO\r\n\r\n    // check parameter types\r\n    var thisParameterTypes = this.parameterTypes;\r\n    var targetParameterTypes = target.parameterTypes;\r\n    var numParameters = thisParameterTypes.length;\r\n    if (numParameters != targetParameterTypes.length) return false;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      let thisParameterType = thisParameterTypes[i];\r\n      let targetParameterType = targetParameterTypes[i];\r\n      if (!thisParameterType.isAssignableTo(targetParameterType)) return false;\r\n    }\r\n\r\n    // check return type\r\n    var thisReturnType = this.returnType;\r\n    var targetReturnType = target.returnType;\r\n    return thisReturnType == targetReturnType || thisReturnType.isAssignableTo(targetReturnType);\r\n  }\r\n\r\n  /** Converts a signature to a function type string. */\r\n  static makeSignatureString(parameterTypes: Type[] | null, returnType: Type, thisType: Type | null = null): string {\r\n    var sb = [];\r\n    if (thisType) sb.push(thisType.toSignatureString());\r\n    if (parameterTypes) {\r\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) sb.push(parameterTypes[i].toSignatureString());\r\n    }\r\n    sb.push(returnType.toSignatureString());\r\n    return sb.join(\"\");\r\n  }\r\n\r\n  /** Converts this signature to a function type string. */\r\n  toSignatureString(): string {\r\n    return Signature.makeSignatureString(this.parameterTypes, this.returnType, this.thisType);\r\n  }\r\n\r\n  /** Converts this signature to a string. */\r\n  toString(includeThis: bool = false): string {\r\n    var sb = new Array<string>();\r\n    sb.push(\"(\");\r\n    var index = 0;\r\n    var thisType = this.thisType;\r\n    if (thisType) {\r\n      if (includeThis) {\r\n        sb.push(\"this: \");\r\n        sb.push(thisType.toString());\r\n        index = 1;\r\n      }\r\n    }\r\n    var parameters = this.parameterTypes;\r\n    var numParameters = parameters.length;\r\n    if (numParameters) {\r\n      let names = this.parameterNames;\r\n      let numNames = names ? names.length : 0;\r\n      let optionalStart = this.requiredParameters;\r\n      let restIndex = this.hasRest ? numParameters - 1 : -1;\r\n      for (let i = 0; i < numParameters; ++i, ++index) {\r\n        if (index) sb.push(\", \");\r\n        if (i == restIndex) sb.push(\"...\");\r\n        if (i < numNames) sb.push((<string[]>names)[i]);\r\n        else sb.push(getDefaultParameterName(i));\r\n        if (i >= optionalStart && i != restIndex) sb.push(\"?: \");\r\n        else sb.push(\": \");\r\n        sb.push(parameters[i].toString());\r\n      }\r\n    }\r\n    sb.push(\") => \");\r\n    sb.push(this.returnType.toString());\r\n    return sb.join(\"\");\r\n  }\r\n}\r\n\r\n// helpers\r\n\r\n// Cached default parameter names used where names are unknown.\r\nvar cachedDefaultParameterNames: string[] | null = null;\r\n\r\n/** Gets the cached default parameter name for the specified index. */\r\nexport function getDefaultParameterName(index: i32): string {\r\n  if (!cachedDefaultParameterNames) cachedDefaultParameterNames = [];\r\n  for (let i = cachedDefaultParameterNames.length; i <= index; ++i) {\r\n    cachedDefaultParameterNames.push(\"arg$\" + i.toString(10));\r\n  }\r\n  return cachedDefaultParameterNames[index - 1];\r\n}\r\n","/**\n * Generated from diagnosticsMessages.json. Do not edit.\n * @module diagnostics\n *//***/\n\n/* tslint:disable:max-line-length */\n\n/** Enum of available diagnostic codes. */\nexport enum DiagnosticCode {\n  Operation_not_supported = 100,\n  Operation_is_unsafe = 101,\n  Conversion_from_type_0_to_1_requires_an_explicit_cast = 200,\n  Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit = 201,\n  Type_0_cannot_be_changed_to_type_1 = 202,\n  Type_0_cannot_be_reinterpreted_as_type_1 = 203,\n  Basic_type_0_cannot_be_nullable = 204,\n  Cannot_export_a_mutable_global = 205,\n  Compiling_constant_with_non_constant_initializer_as_mutable = 206,\n  Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa = 207,\n  Unmanaged_classes_cannot_implement_interfaces = 208,\n  Invalid_regular_expression_flags = 209,\n  Implementation_0_must_match_the_signature_1 = 210,\n  Class_0_is_sealed_and_cannot_be_extended = 211,\n  Decorator_0_is_not_valid_here = 212,\n  Duplicate_decorator = 213,\n  An_allocator_must_be_declared_to_allocate_memory_Try_importing_allocator_arena_or_allocator_tlsf = 214,\n  Optional_parameter_must_have_an_initializer = 215,\n  Unterminated_string_literal = 1002,\n  Identifier_expected = 1003,\n  _0_expected = 1005,\n  A_file_cannot_have_a_reference_to_itself = 1006,\n  Trailing_comma_not_allowed = 1009,\n  Unexpected_token = 1012,\n  A_rest_parameter_must_be_last_in_a_parameter_list = 1014,\n  Parameter_cannot_have_question_mark_and_initializer = 1015,\n  A_required_parameter_cannot_follow_an_optional_parameter = 1016,\n  Enum_member_must_have_initializer = 1061,\n  Statements_are_not_allowed_in_ambient_contexts = 1036,\n  Initializers_are_not_allowed_in_ambient_contexts = 1039,\n  _0_modifier_cannot_be_used_here = 1042,\n  A_rest_parameter_cannot_be_optional = 1047,\n  A_rest_parameter_cannot_have_an_initializer = 1048,\n  A_set_accessor_must_have_exactly_one_parameter = 1049,\n  A_set_accessor_parameter_cannot_have_an_initializer = 1052,\n  A_get_accessor_cannot_have_parameters = 1054,\n  Type_parameters_cannot_appear_on_a_constructor_declaration = 1092,\n  Type_annotation_cannot_appear_on_a_constructor_declaration = 1093,\n  An_accessor_cannot_have_type_parameters = 1094,\n  A_set_accessor_cannot_have_a_return_type_annotation = 1095,\n  Type_parameter_list_cannot_be_empty = 1098,\n  A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement = 1104,\n  A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement = 1105,\n  A_return_statement_can_only_be_used_within_a_function_body = 1108,\n  Expression_expected = 1109,\n  Type_expected = 1110,\n  A_default_clause_cannot_appear_more_than_once_in_a_switch_statement = 1113,\n  Duplicate_label_0 = 1114,\n  Octal_literals_are_not_allowed_in_strict_mode = 1121,\n  Digit_expected = 1124,\n  Hexadecimal_digit_expected = 1125,\n  Unexpected_end_of_text = 1126,\n  Invalid_character = 1127,\n  _case_or_default_expected = 1130,\n  A_declare_modifier_cannot_be_used_in_an_already_ambient_context = 1038,\n  Type_argument_expected = 1140,\n  String_literal_expected = 1141,\n  Line_break_not_permitted_here = 1142,\n  Declaration_expected = 1146,\n  _const_declarations_must_be_initialized = 1155,\n  Unterminated_regular_expression_literal = 1161,\n  Interface_declaration_cannot_have_implements_clause = 1176,\n  Binary_digit_expected = 1177,\n  Octal_digit_expected = 1178,\n  An_implementation_cannot_be_declared_in_ambient_contexts = 1183,\n  An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive = 1198,\n  Unterminated_Unicode_escape_sequence = 1199,\n  Decorators_are_not_valid_here = 1206,\n  _abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration = 1242,\n  A_class_may_only_extend_another_class = 1311,\n  A_parameter_property_cannot_be_declared_using_a_rest_parameter = 1317,\n  Duplicate_identifier_0 = 2300,\n  Cannot_find_name_0 = 2304,\n  Module_0_has_no_exported_member_1 = 2305,\n  Generic_type_0_requires_1_type_argument_s = 2314,\n  Type_0_is_not_generic = 2315,\n  Type_0_is_not_assignable_to_type_1 = 2322,\n  Index_signature_is_missing_in_type_0 = 2329,\n  _this_cannot_be_referenced_in_current_location = 2332,\n  _super_can_only_be_referenced_in_a_derived_class = 2335,\n  Property_0_does_not_exist_on_type_1 = 2339,\n  Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures = 2349,\n  Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature = 2351,\n  A_function_whose_declared_type_is_not_void_must_return_a_value = 2355,\n  The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access = 2357,\n  The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access = 2364,\n  Operator_0_cannot_be_applied_to_types_1_and_2 = 2365,\n  _get_and_set_accessor_must_have_the_same_type = 2380,\n  Constructor_implementation_is_missing = 2390,\n  Function_implementation_is_missing_or_not_immediately_following_the_declaration = 2391,\n  Multiple_constructor_implementations_are_not_allowed = 2392,\n  Duplicate_function_implementation = 2393,\n  Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local = 2395,\n  Type_0_has_no_property_1 = 2460,\n  The_0_operator_cannot_be_applied_to_type_1 = 2469,\n  Export_declaration_conflicts_with_exported_declaration_of_0 = 2484,\n  Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property = 2540,\n  The_target_of_an_assignment_must_be_a_variable_or_a_property_access = 2541,\n  Index_signature_in_type_0_only_permits_reading = 2542,\n  Expected_0_arguments_but_got_1 = 2554,\n  Expected_at_least_0_arguments_but_got_1 = 2555,\n  Expected_0_type_arguments_but_got_1 = 2558,\n  A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums = 2651,\n  Namespace_0_has_no_exported_member_1 = 2694,\n  File_0_not_found = 6054\n}\n\n/** Translates a diagnostic code to its respective string. */\nexport function diagnosticCodeToString(code: DiagnosticCode): string {\n  switch (code) {\n    case 100: return \"Operation not supported.\";\n    case 101: return \"Operation is unsafe.\";\n    case 200: return \"Conversion from type '{0}' to '{1}' requires an explicit cast.\";\n    case 201: return \"Conversion from type '{0}' to '{1}' will require an explicit cast when switching between 32/64-bit.\";\n    case 202: return \"Type '{0}' cannot be changed to type '{1}'.\";\n    case 203: return \"Type '{0}' cannot be reinterpreted as type '{1}'.\";\n    case 204: return \"Basic type '{0}' cannot be nullable.\";\n    case 205: return \"Cannot export a mutable global.\";\n    case 206: return \"Compiling constant with non-constant initializer as mutable.\";\n    case 207: return \"Unmanaged classes cannot extend managed classes and vice-versa.\";\n    case 208: return \"Unmanaged classes cannot implement interfaces.\";\n    case 209: return \"Invalid regular expression flags.\";\n    case 210: return \"Implementation '{0}' must match the signature '{1}'.\";\n    case 211: return \"Class '{0}' is sealed and cannot be extended.\";\n    case 212: return \"Decorator '{0}' is not valid here.\";\n    case 213: return \"Duplicate decorator.\";\n    case 214: return \"An allocator must be declared to allocate memory. Try importing allocator/arena or allocator/tlsf.\";\n    case 215: return \"Optional parameter must have an initializer.\";\n    case 1002: return \"Unterminated string literal.\";\n    case 1003: return \"Identifier expected.\";\n    case 1005: return \"'{0}' expected.\";\n    case 1006: return \"A file cannot have a reference to itself.\";\n    case 1009: return \"Trailing comma not allowed.\";\n    case 1012: return \"Unexpected token.\";\n    case 1014: return \"A rest parameter must be last in a parameter list.\";\n    case 1015: return \"Parameter cannot have question mark and initializer.\";\n    case 1016: return \"A required parameter cannot follow an optional parameter.\";\n    case 1061: return \"Enum member must have initializer.\";\n    case 1036: return \"Statements are not allowed in ambient contexts.\";\n    case 1039: return \"Initializers are not allowed in ambient contexts.\";\n    case 1042: return \"'{0}' modifier cannot be used here.\";\n    case 1047: return \"A rest parameter cannot be optional.\";\n    case 1048: return \"A rest parameter cannot have an initializer.\";\n    case 1049: return \"A 'set' accessor must have exactly one parameter.\";\n    case 1052: return \"A 'set' accessor parameter cannot have an initializer.\";\n    case 1054: return \"A 'get' accessor cannot have parameters.\";\n    case 1092: return \"Type parameters cannot appear on a constructor declaration.\";\n    case 1093: return \"Type annotation cannot appear on a constructor declaration.\";\n    case 1094: return \"An accessor cannot have type parameters.\";\n    case 1095: return \"A 'set' accessor cannot have a return type annotation.\";\n    case 1098: return \"Type parameter list cannot be empty.\";\n    case 1104: return \"A 'continue' statement can only be used within an enclosing iteration statement.\";\n    case 1105: return \"A 'break' statement can only be used within an enclosing iteration or switch statement.\";\n    case 1108: return \"A 'return' statement can only be used within a function body.\";\n    case 1109: return \"Expression expected.\";\n    case 1110: return \"Type expected.\";\n    case 1113: return \"A 'default' clause cannot appear more than once in a 'switch' statement.\";\n    case 1114: return \"Duplicate label '{0}'.\";\n    case 1121: return \"Octal literals are not allowed in strict mode.\";\n    case 1124: return \"Digit expected.\";\n    case 1125: return \"Hexadecimal digit expected.\";\n    case 1126: return \"Unexpected end of text.\";\n    case 1127: return \"Invalid character.\";\n    case 1130: return \"'case' or 'default' expected.\";\n    case 1038: return \"A 'declare' modifier cannot be used in an already ambient context.\";\n    case 1140: return \"Type argument expected.\";\n    case 1141: return \"String literal expected.\";\n    case 1142: return \"Line break not permitted here.\";\n    case 1146: return \"Declaration expected.\";\n    case 1155: return \"'const' declarations must be initialized.\";\n    case 1161: return \"Unterminated regular expression literal.\";\n    case 1176: return \"Interface declaration cannot have 'implements' clause.\";\n    case 1177: return \"Binary digit expected.\";\n    case 1178: return \"Octal digit expected.\";\n    case 1183: return \"An implementation cannot be declared in ambient contexts.\";\n    case 1198: return \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\";\n    case 1199: return \"Unterminated Unicode escape sequence.\";\n    case 1206: return \"Decorators are not valid here.\";\n    case 1242: return \"'abstract' modifier can only appear on a class, method, or property declaration.\";\n    case 1311: return \"A class may only extend another class.\";\n    case 1317: return \"A parameter property cannot be declared using a rest parameter.\";\n    case 2300: return \"Duplicate identifier '{0}'.\";\n    case 2304: return \"Cannot find name '{0}'.\";\n    case 2305: return \"Module '{0}' has no exported member '{1}'.\";\n    case 2314: return \"Generic type '{0}' requires {1} type argument(s).\";\n    case 2315: return \"Type '{0}' is not generic.\";\n    case 2322: return \"Type '{0}' is not assignable to type '{1}'.\";\n    case 2329: return \"Index signature is missing in type '{0}'.\";\n    case 2332: return \"'this' cannot be referenced in current location.\";\n    case 2335: return \"'super' can only be referenced in a derived class.\";\n    case 2339: return \"Property '{0}' does not exist on type '{1}'.\";\n    case 2349: return \"Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.\";\n    case 2351: return \"Cannot use 'new' with an expression whose type lacks a construct signature.\";\n    case 2355: return \"A function whose declared type is not 'void' must return a value.\";\n    case 2357: return \"The operand of an increment or decrement operator must be a variable or a property access.\";\n    case 2364: return \"The left-hand side of an assignment expression must be a variable or a property access.\";\n    case 2365: return \"Operator '{0}' cannot be applied to types '{1}' and '{2}'.\";\n    case 2380: return \"'get' and 'set' accessor must have the same type.\";\n    case 2390: return \"Constructor implementation is missing.\";\n    case 2391: return \"Function implementation is missing or not immediately following the declaration.\";\n    case 2392: return \"Multiple constructor implementations are not allowed.\";\n    case 2393: return \"Duplicate function implementation.\";\n    case 2395: return \"Individual declarations in merged declaration '{0}' must be all exported or all local.\";\n    case 2460: return \"Type '{0}' has no property '{1}'.\";\n    case 2469: return \"The '{0}' operator cannot be applied to type '{1}'.\";\n    case 2484: return \"Export declaration conflicts with exported declaration of '{0}'.\";\n    case 2540: return \"Cannot assign to '{0}' because it is a constant or a read-only property.\";\n    case 2541: return \"The target of an assignment must be a variable or a property access.\";\n    case 2542: return \"Index signature in type '{0}' only permits reading.\";\n    case 2554: return \"Expected {0} arguments, but got {1}.\";\n    case 2555: return \"Expected at least {0} arguments, but got {1}.\";\n    case 2558: return \"Expected {0} type arguments, but got {1}.\";\n    case 2651: return \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\";\n    case 2694: return \"Namespace '{0}' has no exported member '{1}'.\";\n    case 6054: return \"File '{0}' not found.\";\n    default: return \"\";\n  }\n}\n","/**\r\n * The AssemblyScript compiler.\r\n * @module compiler\r\n *//***/\r\n\r\nimport {\r\n  compileCall as compileBuiltinCall,\r\n  compileAllocate as compileBuiltinAllocate,\r\n  compileAbort as compileBuiltinAbort\r\n} from \"./builtins\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Module,\r\n  MemorySegment,\r\n  ExpressionRef,\r\n  UnaryOp,\r\n  BinaryOp,\r\n  NativeType,\r\n  FunctionRef,\r\n  ExpressionId,\r\n  FunctionTypeRef,\r\n  GlobalRef,\r\n  getExpressionId,\r\n  getExpressionType,\r\n  getConstValueI32,\r\n  getConstValueI64Low,\r\n  getConstValueI64High,\r\n  getConstValueF32,\r\n  getConstValueF64,\r\n  getFunctionBody,\r\n  getGetLocalIndex\r\n} from \"./module\";\r\n\r\nimport {\r\n  Program,\r\n  ClassPrototype,\r\n  Class,\r\n  Element,\r\n  ElementKind,\r\n  Enum,\r\n  Field,\r\n  FunctionPrototype,\r\n  Function,\r\n  FunctionTarget,\r\n  Global,\r\n  Local,\r\n  Namespace,\r\n  EnumValue,\r\n  Property,\r\n  VariableLikeElement,\r\n  FlowFlags,\r\n  CommonFlags,\r\n  ConstantValueKind,\r\n  Flow,\r\n  OperatorKind,\r\n  DecoratorFlags,\r\n\r\n  PATH_DELIMITER,\r\n  INNER_DELIMITER,\r\n  INSTANCE_DELIMITER,\r\n  STATIC_DELIMITER,\r\n  GETTER_PREFIX,\r\n  SETTER_PREFIX\r\n} from \"./program\";\r\n\r\nimport {\r\n  Token,\r\n  operatorTokenToString\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  TypeNode,\r\n  Source,\r\n  Range,\r\n\r\n  Statement,\r\n  BlockStatement,\r\n  BreakStatement,\r\n  ClassDeclaration,\r\n  ContinueStatement,\r\n  DoStatement,\r\n  EmptyStatement,\r\n  EnumDeclaration,\r\n  ExportStatement,\r\n  ExpressionStatement,\r\n  FunctionDeclaration,\r\n  ForStatement,\r\n  IfStatement,\r\n  ImportStatement,\r\n  InterfaceDeclaration,\r\n  NamespaceDeclaration,\r\n  ReturnStatement,\r\n  SwitchStatement,\r\n  ThrowStatement,\r\n  TryStatement,\r\n  VariableDeclaration,\r\n  VariableStatement,\r\n  VoidStatement,\r\n  WhileStatement,\r\n\r\n  Expression,\r\n  AssertionExpression,\r\n  BinaryExpression,\r\n  CallExpression,\r\n  CommaExpression,\r\n  ElementAccessExpression,\r\n  FloatLiteralExpression,\r\n  FunctionExpression,\r\n  IdentifierExpression,\r\n  IntegerLiteralExpression,\r\n  LiteralExpression,\r\n  LiteralKind,\r\n  NewExpression,\r\n  ParenthesizedExpression,\r\n  PropertyAccessExpression,\r\n  TernaryExpression,\r\n  ArrayLiteralExpression,\r\n  StringLiteralExpression,\r\n  UnaryPostfixExpression,\r\n  UnaryPrefixExpression,\r\n  FieldDeclaration\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind,\r\n  TypeFlags,\r\n  Signature,\r\n\r\n  typesToNativeTypes\r\n} from \"./types\";\r\n\r\nimport {\r\n  writeI32,\r\n  writeI64,\r\n  writeF32,\r\n  writeF64\r\n} from \"./util\";\r\n\r\n/** Compilation target. */\r\nexport enum Target {\r\n  /** WebAssembly with 32-bit pointers. */\r\n  WASM32,\r\n  /** WebAssembly with 64-bit pointers. Experimental and not supported by any runtime yet. */\r\n  WASM64\r\n}\r\n\r\n/** Compiler options. */\r\nexport class Options {\r\n\r\n  /** WebAssembly target. Defaults to {@link Target.WASM32}. */\r\n  target: Target = Target.WASM32;\r\n  /** If true, compiles everything instead of just reachable code. */\r\n  noTreeShaking: bool = false;\r\n  /** If true, replaces assertions with nops. */\r\n  noAssert: bool = false;\r\n  /** If true, does not set up a memory. */\r\n  noMemory: bool = false;\r\n  /** If true, imports the memory provided by the embedder. */\r\n  importMemory: bool = false;\r\n  /** If true, imports the function table provided by the embedder. */\r\n  importTable: bool = false;\r\n  /** Static memory start offset. */\r\n  memoryBase: u32 = 0;\r\n  /** If true, generates information necessary for source maps. */\r\n  sourceMap: bool = false;\r\n  /** Global aliases. */\r\n  globalAliases: Map<string,string> | null = null;\r\n  /** Additional features to activate. */\r\n  features: Feature = Feature.NONE;\r\n\r\n  /** Tests if the target is WASM64 or, otherwise, WASM32. */\r\n  get isWasm64(): bool {\r\n    return this.target == Target.WASM64;\r\n  }\r\n\r\n  /** Gets the unsigned size type matching the target. */\r\n  get usizeType(): Type {\r\n    return this.target == Target.WASM64 ? Type.usize64 : Type.usize32;\r\n  }\r\n\r\n  /** Gets the signed size type matching the target. */\r\n  get isizeType(): Type {\r\n    return this.target == Target.WASM64 ? Type.isize64 : Type.isize32;\r\n  }\r\n\r\n  /** Gets the native size type matching the target. */\r\n  get nativeSizeType(): NativeType {\r\n    return this.target == Target.WASM64 ? NativeType.I64 : NativeType.I32;\r\n  }\r\n\r\n  /** Tests if a specific feature is activated. */\r\n  hasFeature(feature: Feature): bool {\r\n    return (this.features & feature) != 0;\r\n  }\r\n}\r\n\r\n/** Indicates specific features to activate. */\r\nexport const enum Feature {\r\n  /** No additional features. */\r\n  NONE = 0,\r\n  /** Sign extension operations. */\r\n  SIGN_EXTENSION = 1 << 0, // see: https://github.com/WebAssembly/sign-extension-ops\r\n  /** Mutable global imports and exports. */\r\n  MUTABLE_GLOBAL = 1 << 1  // see: https://github.com/WebAssembly/mutable-global\r\n}\r\n\r\n/** Indicates the desired kind of a conversion. */\r\nexport const enum ConversionKind {\r\n  /** No conversion. */\r\n  NONE,\r\n  /** Implicit conversion. */\r\n  IMPLICIT,\r\n  /** Explicit conversion. */\r\n  EXPLICIT\r\n}\r\n\r\n/** Indicates the desired wrap mode of a conversion. */\r\nexport const enum WrapMode {\r\n  /** No wrapping. */\r\n  NONE,\r\n  /** Wrap small integer values. */\r\n  WRAP\r\n}\r\n\r\n/** Compiler interface. */\r\nexport class Compiler extends DiagnosticEmitter {\r\n\r\n  /** Program reference. */\r\n  program: Program;\r\n  /** Provided options. */\r\n  options: Options;\r\n  /** Module instance being compiled. */\r\n  module: Module;\r\n  /** Current function in compilation. */\r\n  currentFunction: Function;\r\n  /** Outer function in compilation, if compiling a function expression. */\r\n  outerFunction: Function | null = null;\r\n  /** Current enum in compilation. */\r\n  currentEnum: Enum | null = null;\r\n  /** Current type in compilation. */\r\n  currentType: Type = Type.void;\r\n  /** Start function being compiled. */\r\n  startFunction: Function;\r\n  /** Start function statements. */\r\n  startFunctionBody: ExpressionRef[] = [];\r\n  /** Counting memory offset. */\r\n  memoryOffset: I64;\r\n  /** Memory segments being compiled. */\r\n  memorySegments: MemorySegment[] = [];\r\n  /** Map of already compiled static string segments. */\r\n  stringSegments: Map<string,MemorySegment> = new Map();\r\n  /** Function table being compiled. */\r\n  functionTable: Function[] = [];\r\n  /** Argument count helper global. */\r\n  argcVar: GlobalRef = 0;\r\n  /** Argument count helper setter. */\r\n  argcSet: FunctionRef = 0;\r\n\r\n  /** Compiles a {@link Program} to a {@link Module} using the specified options. */\r\n  static compile(program: Program, options: Options | null = null): Module {\r\n    return new Compiler(program, options).compile();\r\n  }\r\n\r\n  /** Constructs a new compiler for a {@link Program} using the specified options. */\r\n  constructor(program: Program, options: Options | null = null) {\r\n    super(program.diagnostics);\r\n    this.program = program;\r\n    if (!options) options = new Options();\r\n    this.options = options;\r\n    this.memoryOffset = i64_new(\r\n      // leave space for `null`. also functions as a sentinel for erroneous stores at offset 0.\r\n      // note that Binaryen's asm.js output utilizes the first 8 bytes for reinterpretations (#1547)\r\n      max(options.memoryBase, 8)\r\n    );\r\n    this.module = Module.create();\r\n  }\r\n\r\n  /** Performs compilation of the underlying {@link Program} to a {@link Module}. */\r\n  compile(): Module {\r\n    var options = this.options;\r\n    var module = this.module;\r\n    var program = this.program;\r\n\r\n    // initialize lookup maps, built-ins, imports, exports, etc.\r\n    program.initialize(options);\r\n\r\n    // set up the start function wrapping top-level statements, of all files.\r\n    var startFunctionPrototype = assert(program.elementsLookup.get(\"start\"));\r\n    assert(startFunctionPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n    var startFunctionInstance = new Function(\r\n      <FunctionPrototype>startFunctionPrototype,\r\n      startFunctionPrototype.internalName,\r\n      new Signature([], Type.void)\r\n    );\r\n    this.startFunction = startFunctionInstance;\r\n    this.currentFunction = startFunctionInstance;\r\n\r\n    // compile entry file(s) while traversing reachable elements\r\n    var sources = program.sources;\r\n    for (let i = 0, k = sources.length; i < k; ++i) {\r\n      if (sources[i].isEntry) this.compileSource(sources[i]);\r\n    }\r\n\r\n    // compile the start function if not empty\r\n    var startFunctionBody = this.startFunctionBody;\r\n    if (startFunctionBody.length) {\r\n      let signature = startFunctionInstance.signature;\r\n      let funcRef = module.addFunction(\r\n        startFunctionInstance.internalName,\r\n        this.ensureFunctionType(\r\n          signature.parameterTypes,\r\n          signature.returnType,\r\n          signature.thisType\r\n        ),\r\n        typesToNativeTypes(startFunctionInstance.additionalLocals),\r\n        module.createBlock(null, startFunctionBody)\r\n      );\r\n      startFunctionInstance.finalize(module, funcRef);\r\n      module.setStart(funcRef);\r\n    }\r\n\r\n    // set up static memory segments and the heap base pointer\r\n    if (!options.noMemory) {\r\n      let memoryOffset = this.memoryOffset;\r\n      memoryOffset = i64_align(memoryOffset, options.usizeType.byteSize);\r\n      this.memoryOffset = memoryOffset;\r\n      if (options.isWasm64) {\r\n        module.addGlobal(\r\n          \"HEAP_BASE\",\r\n          NativeType.I64,\r\n          false,\r\n          module.createI64(i64_low(memoryOffset), i64_high(memoryOffset))\r\n        );\r\n      } else {\r\n        module.addGlobal(\r\n          \"HEAP_BASE\",\r\n          NativeType.I32,\r\n          false,\r\n          module.createI32(i64_low(memoryOffset))\r\n        );\r\n      }\r\n\r\n      // determine initial page size\r\n      let pages = i64_shr_u(i64_align(memoryOffset, 0x10000), i64_new(16, 0));\r\n      module.setMemory(\r\n        i64_low(pages),\r\n        this.options.isWasm64\r\n          ? Module.MAX_MEMORY_WASM64\r\n          : Module.MAX_MEMORY_WASM32,\r\n        this.memorySegments,\r\n        options.target,\r\n        \"memory\"\r\n      );\r\n    }\r\n\r\n    // import memory if requested (default memory is named '0' by Binaryen)\r\n    if (options.importMemory) module.addMemoryImport(\"0\", \"env\", \"memory\");\r\n\r\n    // set up function table\r\n    var functionTable = this.functionTable;\r\n    var functionTableSize = functionTable.length;\r\n    var functionTableExported = false;\r\n    if (functionTableSize) {\r\n      let entries = new Array<FunctionRef>(functionTableSize);\r\n      for (let i = 0; i < functionTableSize; ++i) {\r\n        entries[i] = functionTable[i].ref;\r\n      }\r\n      module.setFunctionTable(entries);\r\n      module.addTableExport(\"0\", \"table\");\r\n      functionTableExported = true;\r\n    }\r\n\r\n    // import table if requested (default table is named '0' by Binaryen)\r\n    if (options.importTable) {\r\n      module.addTableImport(\"0\", \"env\", \"table\");\r\n      if (!functionTableExported) module.addTableExport(\"0\", \"table\");\r\n    }\r\n\r\n    return module;\r\n  }\r\n\r\n  // sources\r\n\r\n  /** Compiles a source by looking it up by path first. */\r\n  compileSourceByPath(normalizedPathWithoutExtension: string, reportNode: Node): void {\r\n    var source = this.program.lookupSourceByPath(normalizedPathWithoutExtension);\r\n    if (source) this.compileSource(source);\r\n    else {\r\n      this.error(\r\n        DiagnosticCode.File_0_not_found,\r\n        reportNode.range, normalizedPathWithoutExtension\r\n      );\r\n    }\r\n  }\r\n\r\n  /** Compiles a source. */\r\n  compileSource(source: Source): void {\r\n    if (source.is(CommonFlags.COMPILED)) return;\r\n    source.set(CommonFlags.COMPILED);\r\n\r\n    // compile top-level statements\r\n    var noTreeShaking = this.options.noTreeShaking;\r\n    var isEntry = source.isEntry;\r\n    var startFunction = this.startFunction;\r\n    var startFunctionBody = this.startFunctionBody;\r\n    var statements = source.statements;\r\n    for (let i = 0, k = statements.length; i < k; ++i) {\r\n      let statement = statements[i];\r\n      switch (statement.kind) {\r\n        case NodeKind.CLASSDECLARATION: {\r\n          if (\r\n            (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) &&\r\n            !(<ClassDeclaration>statement).isGeneric\r\n          ) {\r\n            this.compileClassDeclaration(<ClassDeclaration>statement, []);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.INTERFACEDECLARATION: break;\r\n        case NodeKind.ENUMDECLARATION: {\r\n          if (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) {\r\n            this.compileEnumDeclaration(<EnumDeclaration>statement);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.FUNCTIONDECLARATION: {\r\n          if (\r\n            (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) &&\r\n            !(<FunctionDeclaration>statement).isGeneric\r\n          ) {\r\n            this.compileFunctionDeclaration(<FunctionDeclaration>statement, []);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.IMPORT: {\r\n          this.compileSourceByPath(\r\n            (<ImportStatement>statement).normalizedPath,\r\n            (<ImportStatement>statement).path\r\n          );\r\n          break;\r\n        }\r\n        case NodeKind.NAMESPACEDECLARATION: {\r\n          if (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) {\r\n            this.compileNamespaceDeclaration(<NamespaceDeclaration>statement);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.VARIABLE: { // global, always compiled as initializers might have side effects\r\n          let variableInit = this.compileVariableStatement(<VariableStatement>statement);\r\n          if (variableInit) startFunctionBody.push(variableInit);\r\n          break;\r\n        }\r\n        case NodeKind.EXPORT: {\r\n          if ((<ExportStatement>statement).normalizedPath != null) {\r\n            this.compileSourceByPath(\r\n              <string>(<ExportStatement>statement).normalizedPath,\r\n              <StringLiteralExpression>(<ExportStatement>statement).path\r\n            );\r\n          }\r\n          if (noTreeShaking || isEntry) {\r\n            this.compileExportStatement(<ExportStatement>statement);\r\n          }\r\n          break;\r\n        }\r\n        default: { // otherwise a top-level statement that is part of the start function's body\r\n          let previousFunction = this.currentFunction;\r\n          this.currentFunction = startFunction;\r\n          startFunctionBody.push(this.compileStatement(statement));\r\n          this.currentFunction = previousFunction;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // globals\r\n\r\n  compileGlobalDeclaration(declaration: VariableDeclaration): Global | null {\r\n    // look up the initialized program element\r\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\r\n    assert(element.kind == ElementKind.GLOBAL);\r\n    if (!this.compileGlobal(<Global>element)) return null; // reports\r\n    return <Global>element;\r\n  }\r\n\r\n  compileGlobal(global: Global): bool {\r\n    if (global.is(CommonFlags.COMPILED)) return true;\r\n    global.set(CommonFlags.COMPILED);\r\n\r\n    var module = this.module;\r\n    var declaration = global.declaration;\r\n    var initExpr: ExpressionRef = 0;\r\n\r\n    if (global.type == Type.void) { // type is void if not yet resolved or not annotated\r\n      if (declaration) {\r\n\r\n        // resolve now if annotated\r\n        if (declaration.type) {\r\n          let resolvedType = this.program.resolveType(declaration.type); // reports\r\n          if (!resolvedType) return false;\r\n          if (resolvedType == Type.void) {\r\n            this.error(\r\n              DiagnosticCode.Type_expected,\r\n              declaration.type.range\r\n            );\r\n            return false;\r\n          }\r\n          global.type = resolvedType;\r\n\r\n        // infer from initializer if not annotated\r\n        } else if (declaration.initializer) { // infer type using void/NONE for literal inference\r\n          initExpr = this.compileExpression( // reports\r\n            declaration.initializer,\r\n            Type.void,\r\n            ConversionKind.NONE,\r\n            WrapMode.WRAP\r\n          );\r\n          if (this.currentType == Type.void) {\r\n            this.error(\r\n              DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n              declaration.initializer.range, this.currentType.toString(), \"<auto>\"\r\n            );\r\n            return false;\r\n          }\r\n          global.type = this.currentType;\r\n\r\n        // must either be annotated or have an initializer\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Type_expected,\r\n            declaration.name.range.atEnd\r\n          );\r\n          return false;\r\n        }\r\n      } else {\r\n        assert(false); // must have a declaration if 'void' (and thus resolved later on)\r\n      }\r\n    }\r\n\r\n    // ambient builtins like 'HEAP_BASE' need to be resolved but are added explicitly\r\n    if (global.is(CommonFlags.AMBIENT | CommonFlags.BUILTIN)) return true;\r\n\r\n    var nativeType = global.type.toNativeType();\r\n    var isConstant = global.isAny(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\r\n\r\n    // handle imports\r\n    if (global.is(CommonFlags.AMBIENT)) {\r\n\r\n      // constant global\r\n      if (isConstant || this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\r\n        global.set(CommonFlags.MODULE_IMPORT);\r\n        module.addGlobalImport(\r\n          global.internalName,\r\n          global.parent\r\n            ? global.parent.simpleName\r\n            : \"env\",\r\n          global.simpleName,\r\n          nativeType\r\n        );\r\n        global.set(CommonFlags.COMPILED);\r\n        return true;\r\n\r\n      // importing mutable globals is not supported in the MVP\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          assert(declaration).range\r\n        );\r\n      }\r\n      return false;\r\n    }\r\n\r\n    // the MVP does not yet support initializer expressions other than constant values (and\r\n    // get_globals), hence such initializations must be performed in the start function for now.\r\n    var initializeInStart = false;\r\n\r\n    // inlined constant can be compiled as-is\r\n    if (global.is(CommonFlags.INLINED)) {\r\n      initExpr = this.compileInlineConstant(global, global.type, true);\r\n\r\n    } else {\r\n\r\n      // evaluate initializer if present\r\n      if (declaration && declaration.initializer) {\r\n        if (!initExpr) {\r\n          initExpr = this.compileExpression(\r\n            declaration.initializer,\r\n            global.type,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP\r\n          );\r\n        }\r\n\r\n        // check if the initializer is constant\r\n        if (getExpressionId(initExpr) != ExpressionId.Const) {\r\n\r\n          // if a constant global, check if the initializer becomes constant after precompute\r\n          if (isConstant) {\r\n            initExpr = this.precomputeExpressionRef(initExpr);\r\n            if (getExpressionId(initExpr) != ExpressionId.Const) {\r\n              this.warning(\r\n                DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\r\n                declaration.range\r\n              );\r\n              initializeInStart = true;\r\n            }\r\n          } else {\r\n            initializeInStart = true;\r\n          }\r\n        }\r\n\r\n      // initialize to zero if there's no initializer\r\n      } else {\r\n        initExpr = global.type.toNativeZero(module);\r\n      }\r\n    }\r\n\r\n    var internalName = global.internalName;\r\n\r\n    if (initializeInStart) { // initialize to mutable zero and set the actual value in start\r\n      module.addGlobal(internalName, nativeType, true, global.type.toNativeZero(module));\r\n      this.startFunctionBody.push(module.createSetGlobal(internalName, initExpr));\r\n\r\n    } else { // compile as-is\r\n\r\n      if (isConstant) {\r\n        let exprType = getExpressionType(initExpr);\r\n        switch (exprType) {\r\n          case NativeType.I32: {\r\n            global.constantValueKind = ConstantValueKind.INTEGER;\r\n            global.constantIntegerValue = i64_new(getConstValueI32(initExpr), 0);\r\n            break;\r\n          }\r\n          case NativeType.I64: {\r\n            global.constantValueKind = ConstantValueKind.INTEGER;\r\n            global.constantIntegerValue = i64_new(\r\n              getConstValueI64Low(initExpr),\r\n              getConstValueI64High(initExpr)\r\n            );\r\n            break;\r\n          }\r\n          case NativeType.F32: {\r\n            global.constantValueKind = ConstantValueKind.FLOAT;\r\n            global.constantFloatValue = getConstValueF32(initExpr);\r\n            break;\r\n          }\r\n          case NativeType.F64: {\r\n            global.constantValueKind = ConstantValueKind.FLOAT;\r\n            global.constantFloatValue = getConstValueF64(initExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            return false;\r\n          }\r\n        }\r\n        global.set(CommonFlags.INLINED); // inline the value from now on\r\n        if (global.is(CommonFlags.MODULE_EXPORT)) {\r\n          module.addGlobal(internalName, nativeType, false, initExpr);\r\n          module.addGlobalExport(internalName, mangleExportName(global));\r\n        } else if (declaration && declaration.isTopLevel) { // might become re-exported\r\n          module.addGlobal(internalName, nativeType, false, initExpr);\r\n        }\r\n\r\n      } else /* mutable */ {\r\n        module.addGlobal(internalName, nativeType, !isConstant, initExpr);\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  // enums\r\n\r\n  compileEnumDeclaration(declaration: EnumDeclaration): Enum | null {\r\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\r\n    assert(element.kind == ElementKind.ENUM);\r\n    if (!this.compileEnum(<Enum>element)) return null;\r\n    return <Enum>element;\r\n  }\r\n\r\n  compileEnum(element: Enum): bool {\r\n    if (element.is(CommonFlags.COMPILED)) return true;\r\n    element.set(CommonFlags.COMPILED);\r\n\r\n    var module = this.module;\r\n    this.currentEnum = element;\r\n    var previousValue: EnumValue | null = null;\r\n\r\n    if (element.members) {\r\n      for (let member of element.members.values()) {\r\n        if (member.kind != ElementKind.ENUMVALUE) continue; // happens if an enum is also a namespace\r\n        let initInStart = false;\r\n        let val = <EnumValue>member;\r\n        let valueDeclaration = val.declaration;\r\n        val.set(CommonFlags.COMPILED);\r\n        if (val.is(CommonFlags.INLINED)) {\r\n          if (element.declaration.isTopLevelExport) {\r\n            module.addGlobal(\r\n              val.internalName,\r\n              NativeType.I32,\r\n              false, // constant\r\n              module.createI32(val.constantValue)\r\n            );\r\n          }\r\n        } else {\r\n          let initExpr: ExpressionRef;\r\n          if (valueDeclaration.value) {\r\n            initExpr = this.compileExpression(\r\n              <Expression>valueDeclaration.value,\r\n              Type.i32,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE\r\n            );\r\n            if (getExpressionId(initExpr) != ExpressionId.Const) {\r\n              initExpr = this.precomputeExpressionRef(initExpr);\r\n              if (getExpressionId(initExpr) != ExpressionId.Const) {\r\n                if (element.is(CommonFlags.CONST)) {\r\n                  this.warning(\r\n                    DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\r\n                    valueDeclaration.range\r\n                  );\r\n                }\r\n                initInStart = true;\r\n              }\r\n            }\r\n          } else if (previousValue == null) {\r\n            initExpr = module.createI32(0);\r\n          } else if (previousValue.is(CommonFlags.INLINED)) {\r\n            initExpr = module.createI32(previousValue.constantValue + 1);\r\n          } else {\r\n            // in TypeScript this errors with TS1061, but actually we can do:\r\n            initExpr = module.createBinary(BinaryOp.AddI32,\r\n              module.createGetGlobal(previousValue.internalName, NativeType.I32),\r\n              module.createI32(1)\r\n            );\r\n            if (element.is(CommonFlags.CONST)) {\r\n              this.warning(\r\n                DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\r\n                valueDeclaration.range\r\n              );\r\n            }\r\n            initInStart = true;\r\n          }\r\n          if (initInStart) {\r\n            module.addGlobal(\r\n              val.internalName,\r\n              NativeType.I32,\r\n              true, // mutable\r\n              module.createI32(0)\r\n            );\r\n            this.startFunctionBody.push(module.createSetGlobal(val.internalName, initExpr));\r\n          } else {\r\n            module.addGlobal(val.internalName, NativeType.I32, false, initExpr);\r\n            if (getExpressionType(initExpr) == NativeType.I32) {\r\n              val.constantValue = getConstValueI32(initExpr);\r\n              val.set(CommonFlags.INLINED);\r\n            } else {\r\n              assert(false);\r\n              val.constantValue = 0;\r\n            }\r\n          }\r\n        }\r\n        previousValue = <EnumValue>val;\r\n\r\n        // export values if the enum is exported\r\n        if (element.is(CommonFlags.MODULE_EXPORT)) {\r\n          if (member.is(CommonFlags.INLINED) || this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\r\n            module.addGlobalExport(member.internalName, mangleExportName(member));\r\n          } else if (valueDeclaration) {\r\n            this.warning(\r\n              DiagnosticCode.Cannot_export_a_mutable_global,\r\n              valueDeclaration.range\r\n            );\r\n          }\r\n        }\r\n      }\r\n    }\r\n    this.currentEnum = null;\r\n    return true;\r\n  }\r\n\r\n  // functions\r\n\r\n  /** Compiles a top-level function given its declaration. */\r\n  compileFunctionDeclaration(\r\n    declaration: FunctionDeclaration,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> | null = null\r\n  ): Function | null {\r\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\r\n    assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n    return this.compileFunctionUsingTypeArguments( // reports\r\n      <FunctionPrototype>element,\r\n      typeArguments,\r\n      contextualTypeArguments,\r\n      null, // no outer scope (is top level)\r\n      (<FunctionPrototype>element).declaration.name\r\n    );\r\n  }\r\n\r\n  /** Resolves the specified type arguments prior to compiling the resulting function instance. */\r\n  compileFunctionUsingTypeArguments(\r\n    prototype: FunctionPrototype,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> | null,\r\n    outerScope: Flow | null,\r\n    reportNode: Node\r\n  ): Function | null {\r\n    var instance = prototype.resolveUsingTypeArguments( // reports\r\n      typeArguments,\r\n      contextualTypeArguments,\r\n      reportNode\r\n    );\r\n    if (!instance) return null;\r\n    instance.outerScope = outerScope;\r\n    if (!this.compileFunction(instance)) return null; // reports\r\n    return instance;\r\n  }\r\n\r\n  /** Either reuses or creates the function type matching the specified signature. */\r\n  private ensureFunctionType(\r\n    parameterTypes: Type[] | null,\r\n    returnType: Type,\r\n    thisType: Type | null = null\r\n  ): FunctionTypeRef {\r\n    var numParameters = parameterTypes ? parameterTypes.length : 0;\r\n    var paramTypes: NativeType[];\r\n    var index = 0;\r\n    if (thisType) {\r\n      paramTypes = new Array(1 + numParameters);\r\n      paramTypes[0] = thisType.toNativeType();\r\n      index = 1;\r\n    } else {\r\n      paramTypes = new Array(numParameters);\r\n    }\r\n    if (parameterTypes) {\r\n      for (let i = 0; i < numParameters; ++i, ++index) {\r\n        paramTypes[index] = parameterTypes[i].toNativeType();\r\n      }\r\n    }\r\n    var resultType = returnType.toNativeType();\r\n    var module = this.module;\r\n    var typeRef = module.getFunctionTypeBySignature(resultType, paramTypes);\r\n    if (!typeRef) {\r\n      let name = Signature.makeSignatureString(parameterTypes, returnType, thisType);\r\n      typeRef = module.addFunctionType(name, resultType, paramTypes);\r\n    }\r\n    return typeRef;\r\n  }\r\n\r\n  /** Compiles a readily resolved function instance. */\r\n  compileFunction(instance: Function): bool {\r\n    if (instance.is(CommonFlags.COMPILED)) return true;\r\n    assert(!instance.is(CommonFlags.AMBIENT | CommonFlags.BUILTIN));\r\n    instance.set(CommonFlags.COMPILED);\r\n\r\n    // check that modifiers are matching\r\n    var declaration = instance.prototype.declaration;\r\n    var body = declaration.body;\r\n    if (body) {\r\n      if (instance.is(CommonFlags.AMBIENT)) {\r\n        this.error(\r\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\r\n          declaration.name.range\r\n        );\r\n      }\r\n    } else {\r\n      if (!instance.is(CommonFlags.AMBIENT)) {\r\n        this.error(\r\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n          declaration.name.range\r\n        );\r\n      }\r\n    }\r\n\r\n    var ref: FunctionRef;\r\n    var signature = instance.signature;\r\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\r\n    var module = this.module;\r\n    if (body) {\r\n      let isConstructor = instance.is(CommonFlags.CONSTRUCTOR);\r\n      let returnType = instance.signature.returnType;\r\n\r\n      // compile body\r\n      let previousFunction = this.currentFunction;\r\n      this.currentFunction = instance;\r\n      let flow = instance.flow;\r\n      let stmt: ExpressionRef;\r\n      if (body.kind == NodeKind.EXPRESSION) { // () => expression\r\n        assert(!instance.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.GET | CommonFlags.SET));\r\n        assert(instance.is(CommonFlags.ARROW));\r\n        stmt = this.compileExpression(\r\n          (<ExpressionStatement>body).expression,\r\n          returnType,\r\n          ConversionKind.IMPLICIT,\r\n          WrapMode.NONE\r\n        );\r\n        flow.set(FlowFlags.RETURNS);\r\n        if (!flow.canOverflow(stmt, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\r\n        flow.finalize();\r\n      } else {\r\n        assert(body.kind == NodeKind.BLOCK);\r\n        stmt = this.compileStatement(body);\r\n        flow.finalize();\r\n        if (isConstructor) {\r\n          let nativeSizeType = this.options.nativeSizeType;\r\n          assert(instance.is(CommonFlags.INSTANCE));\r\n\r\n          // implicitly return `this` if the constructor doesn't always return on its own\r\n          if (!flow.is(FlowFlags.RETURNS)) {\r\n\r\n            // if all branches are guaranteed to allocate, skip the final conditional allocation\r\n            if (flow.is(FlowFlags.ALLOCATES)) {\r\n              stmt = module.createBlock(null, [\r\n                stmt,\r\n                module.createGetLocal(0, nativeSizeType)\r\n              ], nativeSizeType);\r\n\r\n            // if not all branches are guaranteed to allocate, also append a conditional allocation\r\n            } else {\r\n              let parent = assert(instance.parent);\r\n              assert(parent.kind == ElementKind.CLASS);\r\n              stmt = module.createBlock(null, [\r\n                stmt,\r\n                module.createTeeLocal(0,\r\n                  this.makeConditionalAllocate(<Class>parent, declaration.name)\r\n                )\r\n              ], nativeSizeType);\r\n            }\r\n          }\r\n\r\n        // make sure all branches return\r\n        } else if (returnType != Type.void && !flow.is(FlowFlags.RETURNS)) {\r\n          this.error(\r\n            DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\r\n            declaration.signature.returnType.range\r\n          );\r\n        }\r\n      }\r\n      this.currentFunction = previousFunction;\r\n\r\n      // create the function\r\n      ref = module.addFunction(\r\n        instance.internalName,\r\n        typeRef,\r\n        typesToNativeTypes(instance.additionalLocals),\r\n        stmt\r\n      );\r\n\r\n    } else {\r\n      instance.set(CommonFlags.MODULE_IMPORT);\r\n\r\n      // create the function import\r\n      let parent = instance.prototype.parent;\r\n      ref = module.addFunctionImport(\r\n        instance.internalName,\r\n        parent\r\n          ? parent.simpleName\r\n          : \"env\",\r\n        instance.simpleName,\r\n        typeRef\r\n      );\r\n    }\r\n\r\n    // check module-level export\r\n    if (instance.is(CommonFlags.MODULE_EXPORT)) {\r\n      if (signature.requiredParameters < signature.parameterTypes.length) {\r\n        // export the trampoline if the function takes optional parameters\r\n        instance = this.ensureTrampoline(instance);\r\n        this.ensureArgcSet();\r\n      }\r\n      module.addFunctionExport(instance.internalName, mangleExportName(instance));\r\n    }\r\n\r\n    instance.finalize(module, ref);\r\n    return true;\r\n  }\r\n\r\n  // namespaces\r\n\r\n  compileNamespaceDeclaration(declaration: NamespaceDeclaration): void {\r\n    var members = declaration.members;\r\n    var noTreeShaking = this.options.noTreeShaking;\r\n    for (let i = 0, k = members.length; i < k; ++i) {\r\n      let member = members[i];\r\n      switch (member.kind) {\r\n        case NodeKind.CLASSDECLARATION: {\r\n          if (\r\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\r\n            !(<ClassDeclaration>member).isGeneric\r\n          ) {\r\n            this.compileClassDeclaration(<ClassDeclaration>member, []);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.INTERFACEDECLARATION: {\r\n          if (\r\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\r\n            !(<InterfaceDeclaration>member).isGeneric\r\n          ) {\r\n            this.compileInterfaceDeclaration(<InterfaceDeclaration>member, []);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.ENUMDECLARATION: {\r\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\r\n            this.compileEnumDeclaration(<EnumDeclaration>member);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.FUNCTIONDECLARATION: {\r\n          if (\r\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\r\n            !(<FunctionDeclaration>member).isGeneric\r\n          ) {\r\n            this.compileFunctionDeclaration(<FunctionDeclaration>member, []);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.NAMESPACEDECLARATION: {\r\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\r\n            this.compileNamespaceDeclaration(<NamespaceDeclaration>member);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.VARIABLE: {\r\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\r\n            let variableInit = this.compileVariableStatement(<VariableStatement>member, true);\r\n            if (variableInit) this.startFunctionBody.push(variableInit);\r\n          }\r\n          break;\r\n        }\r\n        default: assert(false);\r\n      }\r\n    }\r\n  }\r\n\r\n  compileNamespace(ns: Namespace): void {\r\n    if (!ns.members) return;\r\n\r\n    var noTreeShaking = this.options.noTreeShaking;\r\n    for (let element of ns.members.values()) {\r\n      switch (element.kind) {\r\n        case ElementKind.CLASS_PROTOTYPE: {\r\n          if (\r\n            (\r\n              noTreeShaking ||\r\n              (<ClassPrototype>element).is(CommonFlags.EXPORT)\r\n            ) && !(<ClassPrototype>element).is(CommonFlags.GENERIC)\r\n          ) {\r\n            this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.ENUM: {\r\n          this.compileEnum(<Enum>element);\r\n          break;\r\n        }\r\n        case ElementKind.FUNCTION_PROTOTYPE: {\r\n          if (\r\n            (\r\n              noTreeShaking || (<FunctionPrototype>element).is(CommonFlags.EXPORT)\r\n            ) && !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\r\n          ) {\r\n            this.compileFunctionUsingTypeArguments(\r\n              <FunctionPrototype>element,\r\n              [],\r\n              null, // no contextual type arguments\r\n              null, // no outer scope\r\n              (<FunctionPrototype>element).declaration.name\r\n            );\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.GLOBAL: {\r\n          this.compileGlobal(<Global>element);\r\n          break;\r\n        }\r\n        case ElementKind.NAMESPACE: {\r\n          this.compileNamespace(<Namespace>element);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // exports\r\n\r\n  compileExportStatement(statement: ExportStatement): void {\r\n    var module = this.module;\r\n    var exports = this.program.fileLevelExports;\r\n    var members = statement.members;\r\n    for (let i = 0, k = members.length; i < k; ++i) {\r\n      let member = members[i];\r\n      let internalExportName = (\r\n        statement.range.source.internalPath +\r\n        PATH_DELIMITER +\r\n        member.externalName.text\r\n      );\r\n      let element = exports.get(internalExportName);\r\n      if (!element) continue; // reported in Program#initialize\r\n      switch (element.kind) {\r\n        case ElementKind.CLASS_PROTOTYPE: {\r\n          if (!(<ClassPrototype>element).is(CommonFlags.GENERIC)) {\r\n            this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.ENUM: {\r\n          this.compileEnum(<Enum>element);\r\n          break;\r\n        }\r\n        case ElementKind.FUNCTION_PROTOTYPE: {\r\n          if (\r\n            !(<FunctionPrototype>element).is(CommonFlags.GENERIC) &&\r\n            statement.range.source.isEntry\r\n          ) {\r\n            let functionInstance = this.compileFunctionUsingTypeArguments(\r\n              <FunctionPrototype>element,\r\n              [],\r\n              null, // no contextual type arguments\r\n              null, // no outer scope\r\n              (<FunctionPrototype>element).declaration.name\r\n            );\r\n            if (functionInstance) {\r\n              let functionDeclaration = functionInstance.prototype.declaration;\r\n              if (functionDeclaration && functionDeclaration.needsExplicitExport(member)) {\r\n                module.addFunctionExport(functionInstance.internalName, member.externalName.text);\r\n              }\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.GLOBAL: {\r\n          if (this.compileGlobal(<Global>element) && statement.range.source.isEntry) {\r\n            let globalDeclaration = (<Global>element).declaration;\r\n            if (globalDeclaration && globalDeclaration.needsExplicitExport(member)) {\r\n              if ((<Global>element).is(CommonFlags.INLINED)) {\r\n                module.addGlobalExport(element.internalName, member.externalName.text);\r\n              } else {\r\n                this.warning(\r\n                  DiagnosticCode.Cannot_export_a_mutable_global,\r\n                  member.range\r\n                );\r\n              }\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.NAMESPACE: {\r\n          this.compileNamespace(<Namespace>element);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // classes\r\n\r\n  compileClassDeclaration(\r\n    declaration: ClassDeclaration,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    alternativeReportNode: Node | null = null\r\n  ): void {\r\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\r\n    assert(element.kind == ElementKind.CLASS_PROTOTYPE);\r\n    this.compileClassUsingTypeArguments(\r\n      <ClassPrototype>element,\r\n      typeArguments,\r\n      contextualTypeArguments,\r\n      alternativeReportNode\r\n    );\r\n  }\r\n\r\n  compileClassUsingTypeArguments(\r\n    prototype: ClassPrototype,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    alternativeReportNode: Node | null = null\r\n  ): void {\r\n    var instance = prototype.resolveUsingTypeArguments( // reports\r\n      typeArguments,\r\n      contextualTypeArguments,\r\n      alternativeReportNode\r\n    );\r\n    if (!instance) return;\r\n    this.compileClass(instance);\r\n  }\r\n\r\n  compileClass(instance: Class): bool {\r\n    if (instance.is(CommonFlags.COMPILED)) return true;\r\n    instance.set(CommonFlags.COMPILED);\r\n\r\n    var staticMembers = instance.prototype.members;\r\n    if (staticMembers) {\r\n      for (let element of staticMembers.values()) {\r\n        switch (element.kind) {\r\n          case ElementKind.GLOBAL: {\r\n            this.compileGlobal(<Global>element);\r\n            break;\r\n          }\r\n          case ElementKind.FUNCTION_PROTOTYPE: {\r\n            if (\r\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\r\n            ) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                <FunctionPrototype>element,\r\n                [], null, null,\r\n                (<FunctionPrototype>element).declaration.name\r\n              );\r\n            }\r\n            break;\r\n          }\r\n          case ElementKind.PROPERTY: {\r\n            let getter = (<Property>element).getterPrototype;\r\n            if (getter) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                getter,\r\n                [], null, null,\r\n                getter.declaration.name\r\n              );\r\n            }\r\n            let setter = (<Property>element).setterPrototype;\r\n            if (setter) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                setter,\r\n                [], null, null,\r\n                setter.declaration.name\r\n              );\r\n            }\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    var ctorInstance = instance.constructorInstance;\r\n    if (ctorInstance) this.compileFunction(ctorInstance);\r\n    var instanceMembers = instance.members;\r\n    if (instanceMembers) {\r\n      for (let element of instanceMembers.values()) {\r\n        switch (element.kind) {\r\n          case ElementKind.FUNCTION_PROTOTYPE: {\r\n            if (\r\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\r\n            ) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                <FunctionPrototype>element,\r\n                [],\r\n                instance.contextualTypeArguments,\r\n                null, // no outer scope\r\n                (<FunctionPrototype>element).declaration.name\r\n              );\r\n            }\r\n            break;\r\n          }\r\n          case ElementKind.FIELD: {\r\n            element.set(CommonFlags.COMPILED);\r\n            if (!instance.is(CommonFlags.MODULE_EXPORT) || element.is(CommonFlags.PRIVATE)) break;\r\n            let module = this.module;\r\n            let name = (<Field>element).simpleName;\r\n            let type = (<Field>element).type;\r\n            let nativeType = type.toNativeType();\r\n            let offset = (<Field>element).memoryOffset;\r\n            let usizeType = this.options.usizeType;\r\n            let nativeSizeType = this.options.nativeSizeType;\r\n\r\n            // export an implicit getter: get:fieldName(this: usize) -> fieldType\r\n            let getterName = mangleExportName(element, GETTER_PREFIX + name);\r\n            module.addFunction(\r\n              getterName,\r\n              this.ensureFunctionType(null, type, usizeType),\r\n              null,\r\n              module.createLoad(\r\n                type.byteSize,\r\n                type.is(TypeFlags.SIGNED),\r\n                module.createGetLocal(0, nativeSizeType),\r\n                nativeType,\r\n                offset\r\n              )\r\n            );\r\n            module.addFunctionExport(getterName, getterName);\r\n\r\n            // export an implicit setter: set:fieldName(this: usize, value: fieldType) -> void\r\n            if (element.is(CommonFlags.READONLY)) break;\r\n            let setterName = mangleExportName(element, SETTER_PREFIX + name);\r\n            module.addFunction(\r\n              setterName,\r\n              this.ensureFunctionType([ type ], Type.void, usizeType),\r\n              null,\r\n              module.createStore(\r\n                type.byteSize,\r\n                module.createGetLocal(0, nativeSizeType),\r\n                module.createGetLocal(1, nativeType),\r\n                nativeType,\r\n                offset\r\n              )\r\n            );\r\n            module.addFunctionExport(setterName, setterName);\r\n            break;\r\n          }\r\n          case ElementKind.PROPERTY: {\r\n            let getter = (<Property>element).getterPrototype;\r\n            if (getter) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                getter,\r\n                [], instance.contextualTypeArguments, null,\r\n                getter.declaration.name\r\n              );\r\n            }\r\n            let setter = (<Property>element).setterPrototype;\r\n            if (setter) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                setter,\r\n                [], instance.contextualTypeArguments, null,\r\n                setter.declaration.name\r\n              );\r\n            }\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  compileInterfaceDeclaration(\r\n    declaration: InterfaceDeclaration,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    alternativeReportNode: Node | null = null\r\n  ): void {\r\n    // TODO\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      declaration.range\r\n    );\r\n  }\r\n\r\n  // memory\r\n\r\n  /** Adds a static memory segment with the specified data. */\r\n  addMemorySegment(buffer: Uint8Array, alignment: i32 = 8): MemorySegment {\r\n    var memoryOffset = i64_align(this.memoryOffset, alignment);\r\n    var segment = MemorySegment.create(buffer, memoryOffset);\r\n    this.memorySegments.push(segment);\r\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length, 0));\r\n    return segment;\r\n  }\r\n\r\n  // function table\r\n\r\n  /** Ensures that a table entry exists for the specified function and returns its index. */\r\n  ensureFunctionTableEntry(func: Function): i32 {\r\n    assert(func.is(CommonFlags.COMPILED));\r\n    if (func.functionTableIndex >= 0) {\r\n      return func.functionTableIndex;\r\n    }\r\n    var functionTable = this.functionTable;\r\n    var index = functionTable.length;\r\n    if (!func.is(CommonFlags.TRAMPOLINE) && func.signature.requiredParameters < func.signature.parameterTypes.length) {\r\n      // insert the trampoline if the function has optional parameters\r\n      func = this.ensureTrampoline(func);\r\n    }\r\n    functionTable.push(func);\r\n    func.functionTableIndex = index;\r\n    return index;\r\n  }\r\n\r\n  // statements\r\n\r\n  compileStatement(statement: Statement): ExpressionRef {\r\n    var module = this.module;\r\n    var stmt: ExpressionRef;\r\n    switch (statement.kind) {\r\n      case NodeKind.BLOCK: {\r\n        stmt = this.compileBlockStatement(<BlockStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.BREAK: {\r\n        stmt = this.compileBreakStatement(<BreakStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.CONTINUE: {\r\n        stmt = this.compileContinueStatement(<ContinueStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.DO: {\r\n        stmt = this.compileDoStatement(<DoStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.EMPTY: {\r\n        stmt = this.compileEmptyStatement(<EmptyStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.EXPRESSION: {\r\n        stmt = this.compileExpressionStatement(<ExpressionStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.FOR: {\r\n        stmt = this.compileForStatement(<ForStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.IF: {\r\n        stmt = this.compileIfStatement(<IfStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.RETURN: {\r\n        stmt = this.compileReturnStatement(<ReturnStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.SWITCH: {\r\n        stmt = this.compileSwitchStatement(<SwitchStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.THROW: {\r\n        stmt = this.compileThrowStatement(<ThrowStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.TRY: {\r\n        stmt = this.compileTryStatement(<TryStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.VARIABLE: {\r\n        stmt = this.compileVariableStatement(<VariableStatement>statement);\r\n        if (!stmt) stmt = module.createNop();\r\n        break;\r\n      }\r\n      case NodeKind.VOID: {\r\n        stmt = this.compileVoidStatement(<VoidStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.WHILE: {\r\n        stmt = this.compileWhileStatement(<WhileStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.TYPEDECLARATION: {\r\n        // type declarations must be top-level because function bodies are evaluated when\r\n        // reachaable only.\r\n        if (this.currentFunction == this.startFunction) {\r\n          return module.createNop();\r\n        }\r\n        // otherwise fall-through\r\n      }\r\n      default: {\r\n        assert(false);\r\n        stmt = module.createUnreachable();\r\n      }\r\n    }\r\n    if (this.options.sourceMap) this.addDebugLocation(stmt, statement.range);\r\n    return stmt;\r\n  }\r\n\r\n  compileStatements(statements: Statement[]): ExpressionRef[] {\r\n    var numStatements = statements.length;\r\n    var stmts = new Array<ExpressionRef>(numStatements);\r\n    var count = 0;\r\n    var flow = this.currentFunction.flow;\r\n    for (let i = 0; i < numStatements; ++i) {\r\n      let stmt = this.compileStatement(statements[i]);\r\n      if (getExpressionId(stmt) != ExpressionId.Nop) {\r\n        stmts[count++] = stmt;\r\n        if (flow.isAny(FlowFlags.TERMINATED)) break;\r\n      }\r\n    }\r\n    stmts.length = count;\r\n    return stmts;\r\n  }\r\n\r\n  compileBlockStatement(statement: BlockStatement): ExpressionRef {\r\n    var statements = statement.statements;\r\n\r\n    // Not actually a branch, but can contain its own scoped variables.\r\n    var blockFlow = this.currentFunction.flow.enterBranchOrScope();\r\n    this.currentFunction.flow = blockFlow;\r\n\r\n    var stmts = this.compileStatements(statements);\r\n    var stmt = stmts.length == 0\r\n      ? this.module.createNop()\r\n      : stmts.length == 1\r\n        ? stmts[0]\r\n        : this.module.createBlock(null, stmts, NativeType.None);\r\n\r\n    // Switch back to the parent flow\r\n    var parentFlow = blockFlow.leaveBranchOrScope();\r\n    this.currentFunction.flow = parentFlow;\r\n    parentFlow.inherit(blockFlow);\r\n    return stmt;\r\n  }\r\n\r\n  compileBreakStatement(statement: BreakStatement): ExpressionRef {\r\n    var module = this.module;\r\n    if (statement.label) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        statement.label.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    var flow = this.currentFunction.flow;\r\n    var breakLabel = flow.breakLabel;\r\n    if (breakLabel == null) {\r\n      this.error(\r\n        DiagnosticCode.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement,\r\n        statement.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    flow.set(FlowFlags.BREAKS);\r\n    return module.createBreak(breakLabel);\r\n  }\r\n\r\n  compileContinueStatement(statement: ContinueStatement): ExpressionRef {\r\n    var module = this.module;\r\n    var label = statement.label;\r\n    if (label) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        label.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    // Check if 'continue' is allowed here\r\n    var flow = this.currentFunction.flow;\r\n    var continueLabel = flow.continueLabel;\r\n    if (continueLabel == null) {\r\n      this.error(\r\n        DiagnosticCode.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement,\r\n        statement.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    flow.set(FlowFlags.CONTINUES);\r\n    return module.createBreak(continueLabel);\r\n  }\r\n\r\n  compileDoStatement(statement: DoStatement): ExpressionRef {\r\n    var currentFunction = this.currentFunction;\r\n    var module = this.module;\r\n\r\n    var label = currentFunction.enterBreakContext();\r\n    var flow = currentFunction.flow.enterBranchOrScope();\r\n    currentFunction.flow = flow;\r\n    var breakLabel = \"break|\" + label;\r\n    flow.breakLabel = breakLabel;\r\n    var continueLabel = \"continue|\" + label;\r\n    flow.continueLabel = continueLabel;\r\n\r\n    var body = this.compileStatement(statement.statement);\r\n    var condExpr = this.makeIsTrueish(\r\n      this.compileExpression(statement.condition, Type.i32, ConversionKind.NONE, WrapMode.NONE),\r\n      this.currentType\r\n    );\r\n    // TODO: check if condition is always false and if so, omit it?\r\n\r\n    // Switch back to the parent flow\r\n    currentFunction.flow = flow.leaveBranchOrScope();\r\n    currentFunction.leaveBreakContext();\r\n\r\n    return module.createBlock(breakLabel, [\r\n      module.createLoop(continueLabel,\r\n        flow.isAny(FlowFlags.BREAKS | FlowFlags.CONTINUES | FlowFlags.RETURNS)\r\n          ? body // skip trailing continue if unnecessary\r\n          : module.createBlock(null, [\r\n              body,\r\n              module.createBreak(continueLabel, condExpr)\r\n            ], NativeType.None)\r\n      )\r\n    ], NativeType.None);\r\n  }\r\n\r\n  compileEmptyStatement(statement: EmptyStatement): ExpressionRef {\r\n    return this.module.createNop();\r\n  }\r\n\r\n  compileExpressionStatement(statement: ExpressionStatement): ExpressionRef {\r\n    var expr = this.compileExpression(statement.expression, Type.void, ConversionKind.NONE, WrapMode.NONE);\r\n    if (this.currentType != Type.void) {\r\n      expr = this.module.createDrop(expr);\r\n      this.currentType = Type.void;\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  compileForStatement(statement: ForStatement): ExpressionRef {\r\n    // A for statement initiates a new branch with its own scoped variables\r\n    // possibly declared in its initializer, and break context.\r\n    var currentFunction = this.currentFunction;\r\n    var label = currentFunction.enterBreakContext();\r\n    var flow = currentFunction.flow.enterBranchOrScope();\r\n    currentFunction.flow = flow;\r\n    var breakLabel = flow.breakLabel = \"break|\" + label;\r\n    flow.breakLabel = breakLabel;\r\n    var continueLabel = \"continue|\" + label;\r\n    flow.continueLabel = continueLabel;\r\n    var repeatLabel = \"repeat|\" + label;\r\n\r\n    // Compile in correct order\r\n    var module = this.module;\r\n    var initExpr = statement.initializer\r\n      ? this.compileStatement(<Statement>statement.initializer)\r\n      : 0;\r\n    var condExpr: ExpressionRef = 0;\r\n    var alwaysTrue = true;\r\n    if (statement.condition) {\r\n      condExpr = this.makeIsTrueish(\r\n        this.compileExpressionRetainType(<Expression>statement.condition, Type.bool, WrapMode.NONE),\r\n        this.currentType\r\n      );\r\n      // check if the condition is always true\r\n      let condPre = this.precomputeExpressionRef(condExpr);\r\n      if (getExpressionId(condPre) == ExpressionId.Const) {\r\n        assert(getExpressionType(condPre) == NativeType.I32);\r\n        if (getConstValueI32(condPre) != 0) alwaysTrue = true;\r\n        // TODO: could skip compilation if the condition is always false here, but beware that the\r\n        // initializer could still declare new 'var's that are used later on.\r\n      }\r\n      // recompile to original\r\n      condExpr = this.makeIsTrueish(\r\n        this.compileExpressionRetainType(<Expression>statement.condition, Type.bool, WrapMode.NONE),\r\n        this.currentType\r\n      );\r\n    } else {\r\n      // omitted condition is always true\r\n      condExpr = module.createI32(1);\r\n      alwaysTrue = true;\r\n    }\r\n    var incrExpr = statement.incrementor\r\n      ? this.compileExpression(<Expression>statement.incrementor, Type.void, ConversionKind.IMPLICIT, WrapMode.NONE)\r\n      : 0;\r\n    var bodyExpr = this.compileStatement(statement.statement);\r\n\r\n    // Switch back to the parent flow\r\n    var parentFlow = flow.leaveBranchOrScope();\r\n    if (alwaysTrue) parentFlow.inherit(flow);\r\n    currentFunction.flow = parentFlow;\r\n    currentFunction.leaveBreakContext();\r\n\r\n    var breakBlock = new Array<ExpressionRef>(); // outer 'break' block\r\n    if (initExpr) breakBlock.push(initExpr);\r\n\r\n    var repeatBlock = new Array<ExpressionRef>(); // block repeating the loop\r\n    if (parentFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES)) {\r\n      repeatBlock.push(\r\n        module.createBlock(continueLabel, [ // inner 'continue' block\r\n          module.createBreak(breakLabel, module.createUnary(UnaryOp.EqzI32, condExpr)),\r\n          bodyExpr\r\n        ], NativeType.None)\r\n      );\r\n    } else { // can omit the 'continue' block\r\n      repeatBlock.push(\r\n        module.createBreak(breakLabel, module.createUnary(UnaryOp.EqzI32, condExpr))\r\n      );\r\n      repeatBlock.push(bodyExpr);\r\n    }\r\n    if (incrExpr) repeatBlock.push(incrExpr);\r\n    repeatBlock.push(\r\n      module.createBreak(repeatLabel)\r\n    );\r\n\r\n    breakBlock.push(\r\n      module.createLoop(repeatLabel,\r\n        module.createBlock(null, repeatBlock, NativeType.None)\r\n      )\r\n    );\r\n\r\n    var expr = module.createBlock(breakLabel, breakBlock, NativeType.None);\r\n\r\n    // If the loop is guaranteed to run and return, append a hint for Binaryen\r\n    if (flow.isAny(FlowFlags.RETURNS | FlowFlags.THROWS)) {\r\n      expr = module.createBlock(null, [\r\n        expr,\r\n        module.createUnreachable()\r\n      ]);\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  compileIfStatement(statement: IfStatement): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n    var ifTrue = statement.ifTrue;\r\n    var ifFalse = statement.ifFalse;\r\n\r\n    // The condition doesn't initiate a branch yet\r\n    var condExpr = this.makeIsTrueish(\r\n      this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\r\n      this.currentType\r\n    );\r\n\r\n    if (\r\n      !this.options.noTreeShaking ||\r\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT)\r\n    ) {\r\n      // Try to eliminate unnecesssary branches if the condition is constant\r\n      let condExprPrecomp = this.precomputeExpressionRef(condExpr);\r\n      if (\r\n        getExpressionId(condExprPrecomp) == ExpressionId.Const &&\r\n        getExpressionType(condExprPrecomp) == NativeType.I32\r\n      ) {\r\n        return getConstValueI32(condExprPrecomp)\r\n          ? this.compileStatement(ifTrue)\r\n          : ifFalse\r\n            ? this.compileStatement(ifFalse)\r\n            : module.createNop();\r\n\r\n      // Otherwise recompile to the original and let the optimizer decide\r\n      } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\r\n        condExpr = this.makeIsTrueish(\r\n          this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\r\n          this.currentType\r\n        );\r\n      }\r\n    }\r\n\r\n    // Each arm initiates a branch\r\n    var ifTrueFlow = currentFunction.flow.enterBranchOrScope();\r\n    currentFunction.flow = ifTrueFlow;\r\n    var ifTrueExpr = this.compileStatement(ifTrue);\r\n    currentFunction.flow = ifTrueFlow.leaveBranchOrScope();\r\n\r\n    var ifFalseFlow: Flow | null;\r\n    var ifFalseExpr: ExpressionRef = 0;\r\n    if (ifFalse) {\r\n      ifFalseFlow = currentFunction.flow.enterBranchOrScope();\r\n      currentFunction.flow = ifFalseFlow;\r\n      ifFalseExpr = this.compileStatement(ifFalse);\r\n      let parentFlow = ifFalseFlow.leaveBranchOrScope();\r\n      currentFunction.flow = parentFlow;\r\n      parentFlow.inheritMutual(ifTrueFlow, ifFalseFlow);\r\n    }\r\n    return module.createIf(condExpr, ifTrueExpr, ifFalseExpr);\r\n  }\r\n\r\n  compileReturnStatement(statement: ReturnStatement): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n    var expr: ExpressionRef = 0;\r\n    var flow = currentFunction.flow;\r\n\r\n    // Remember that this flow returns\r\n    flow.set(FlowFlags.RETURNS);\r\n\r\n    if (statement.value) {\r\n      let returnType = flow.returnType;\r\n      expr = this.compileExpression(\r\n        statement.value,\r\n        returnType,\r\n        ConversionKind.IMPLICIT,\r\n        currentFunction.is(CommonFlags.MODULE_EXPORT)\r\n          ? WrapMode.WRAP\r\n          : WrapMode.NONE\r\n      );\r\n\r\n      // Remember whether returning a properly wrapped value\r\n      if (!flow.canOverflow(expr, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\r\n    }\r\n\r\n    // When inlining, break to the end of the inlined function's block (no need to wrap)\r\n    return flow.is(FlowFlags.INLINE_CONTEXT)\r\n      ? module.createBreak(assert(flow.returnLabel), 0, expr)\r\n      : module.createReturn(expr);\r\n  }\r\n\r\n  compileSwitchStatement(statement: SwitchStatement): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n\r\n    var cases = statement.cases;\r\n    var numCases = cases.length;\r\n    if (!numCases) {\r\n      return this.compileExpression(statement.condition, Type.void, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n    }\r\n\r\n    // Everything within a switch uses the same break context\r\n    var context = currentFunction.enterBreakContext();\r\n\r\n    // introduce a local for evaluating the condition (exactly once)\r\n    var tempLocal = currentFunction.getTempLocal(Type.u32, false);\r\n    var tempLocalIndex = tempLocal.index;\r\n\r\n    // Prepend initializer to inner block. Does not initiate a new branch, yet.\r\n    var breaks = new Array<ExpressionRef>(1 + numCases);\r\n    breaks[0] = module.createSetLocal( // initializer\r\n      tempLocalIndex,\r\n      this.compileExpression(statement.condition, Type.u32, ConversionKind.IMPLICIT, WrapMode.NONE)\r\n    );\r\n\r\n    // make one br_if per (possibly dynamic) labeled case (binaryen optimizes to br_table where possible)\r\n    var breakIndex = 1;\r\n    var defaultIndex = -1;\r\n    for (let i = 0; i < numCases; ++i) {\r\n      let case_ = cases[i];\r\n      let label = case_.label;\r\n      if (label) {\r\n        breaks[breakIndex++] = module.createBreak(\"case\" + i.toString(10) + \"|\" + context,\r\n          module.createBinary(BinaryOp.EqI32,\r\n            module.createGetLocal(tempLocalIndex, NativeType.I32),\r\n            this.compileExpression(label, Type.u32, ConversionKind.IMPLICIT, WrapMode.NONE)\r\n          )\r\n        );\r\n      } else {\r\n        defaultIndex = i;\r\n      }\r\n    }\r\n\r\n    currentFunction.freeTempLocal(tempLocal);\r\n\r\n    // otherwise br to default respectively out of the switch if there is no default case\r\n    breaks[breakIndex] = module.createBreak((defaultIndex >= 0\r\n        ? \"case\" + defaultIndex.toString(10)\r\n        : \"break\"\r\n      ) + \"|\" + context);\r\n\r\n    // nest blocks in order\r\n    var currentBlock = module.createBlock(\"case0|\" + context, breaks, NativeType.None);\r\n    var alwaysReturns = true;\r\n    var alwaysReturnsWrapped = true;\r\n    var alwaysThrows = true;\r\n    var alwaysAllocates = true;\r\n    for (let i = 0; i < numCases; ++i) {\r\n      let case_ = cases[i];\r\n      let statements = case_.statements;\r\n      let numStatements = statements.length;\r\n\r\n      // Each switch case initiates a new branch\r\n      let flow = currentFunction.flow.enterBranchOrScope();\r\n      currentFunction.flow = flow;\r\n      let breakLabel = \"break|\" + context;\r\n      flow.breakLabel = breakLabel;\r\n\r\n      let isLast = i == numCases - 1;\r\n      let nextLabel = isLast ? breakLabel : \"case\" + (i + 1).toString(10) + \"|\" + context;\r\n      let stmts = new Array<ExpressionRef>(1 + numStatements);\r\n      stmts[0] = currentBlock;\r\n      let count = 1;\r\n      let terminated = false;\r\n      for (let j = 0; j < numStatements; ++j) {\r\n        let stmt = this.compileStatement(statements[j]);\r\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\r\n          stmts[count++] = stmt;\r\n          if (flow.isAny(FlowFlags.TERMINATED)) {\r\n            terminated = true;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      stmts.length = count;\r\n      if (terminated || isLast) {\r\n        if (!flow.is(FlowFlags.RETURNS)) alwaysReturns = false;\r\n        if (!flow.is(FlowFlags.RETURNS_WRAPPED)) alwaysReturnsWrapped = false;\r\n        if (!flow.is(FlowFlags.THROWS)) alwaysThrows = false;\r\n        if (!flow.is(FlowFlags.ALLOCATES)) alwaysAllocates = false;\r\n      }\r\n\r\n      // Switch back to the parent flow\r\n      currentFunction.flow = flow.leaveBranchOrScope(false);\r\n      currentBlock = module.createBlock(nextLabel, stmts, NativeType.None); // must be a labeled block\r\n    }\r\n    currentFunction.leaveBreakContext();\r\n\r\n    // If the switch has a default (guaranteed to handle any value), propagate common flags\r\n    if (defaultIndex >= 0) {\r\n      let flow = currentFunction.flow;\r\n      if (alwaysReturns) flow.set(FlowFlags.RETURNS);\r\n      if (alwaysReturnsWrapped) flow.set(FlowFlags.RETURNS_WRAPPED);\r\n      if (alwaysThrows) flow.set(FlowFlags.THROWS);\r\n      if (alwaysAllocates) flow.set(FlowFlags.ALLOCATES);\r\n    }\r\n    return currentBlock;\r\n  }\r\n\r\n  compileThrowStatement(statement: ThrowStatement): ExpressionRef {\r\n    var flow = this.currentFunction.flow;\r\n\r\n    // Remember that this branch throws\r\n    flow.set(FlowFlags.THROWS);\r\n\r\n    // FIXME: without try-catch it is safe to assume RETURNS as well for now\r\n    flow.set(FlowFlags.RETURNS);\r\n\r\n    // TODO: requires exception-handling spec.\r\n    return compileBuiltinAbort(this, null, statement);\r\n  }\r\n\r\n  compileTryStatement(statement: TryStatement): ExpressionRef {\r\n    // TODO\r\n    // can't yet support something like: try { return ... } finally { ... }\r\n    // worthwhile to investigate lowering returns to block results (here)?\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      statement.range\r\n    );\r\n    return this.module.createUnreachable();\r\n  }\r\n\r\n  /**\r\n   * Compiles a variable statement. Returns `0` if an initializer is not\r\n   * necessary.\r\n   */\r\n  compileVariableStatement(statement: VariableStatement, isKnownGlobal: bool = false): ExpressionRef {\r\n    var program = this.program;\r\n    var currentFunction = this.currentFunction;\r\n    var declarations = statement.declarations;\r\n    var numDeclarations = declarations.length;\r\n\r\n    // top-level variables and constants become globals\r\n    if (isKnownGlobal || (\r\n      currentFunction == this.startFunction &&\r\n      statement.parent && statement.parent.kind == NodeKind.SOURCE\r\n    )) {\r\n      // NOTE that the above condition also covers top-level variables declared with 'let', even\r\n      // though such variables could also become start function locals if, and only if, not used\r\n      // within any function declared in the same source, which is unknown at this point. the only\r\n      // efficient way to deal with this would be to keep track of all occasions it is used and\r\n      // replace these instructions afterwards, dynamically. (TOOD: what about a Binaryen pass?)\r\n      for (let i = 0; i < numDeclarations; ++i) {\r\n        this.compileGlobalDeclaration(declarations[i]);\r\n      }\r\n      return 0;\r\n    }\r\n\r\n    // other variables become locals\r\n    var initializers = new Array<ExpressionRef>();\r\n    var flow = this.currentFunction.flow;\r\n    for (let i = 0; i < numDeclarations; ++i) {\r\n      let declaration = declarations[i];\r\n      let name = declaration.name.text;\r\n      let type: Type | null = null;\r\n      let initExpr: ExpressionRef = 0;\r\n      if (declaration.type) {\r\n        type = program.resolveType( // reports\r\n          declaration.type,\r\n          flow.contextualTypeArguments\r\n        );\r\n        if (!type) continue;\r\n        if (declaration.initializer) {\r\n          initExpr = this.compileExpression( // reports\r\n            declaration.initializer,\r\n            type,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.NONE\r\n          );\r\n        }\r\n      } else if (declaration.initializer) { // infer type using void/NONE for proper literal inference\r\n        initExpr = this.compileExpression( // reports\r\n          declaration.initializer,\r\n          Type.void,\r\n          ConversionKind.NONE,\r\n          WrapMode.NONE\r\n        );\r\n        if (this.currentType == Type.void) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n            declaration.range, this.currentType.toString(), \"<auto>\"\r\n          );\r\n          continue;\r\n        }\r\n        type = this.currentType;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          declaration.name.range.atEnd\r\n        );\r\n        continue;\r\n      }\r\n      let isInlined = false;\r\n      if (declaration.is(CommonFlags.CONST)) {\r\n        if (initExpr) {\r\n          initExpr = this.precomputeExpressionRef(initExpr);\r\n          if (getExpressionId(initExpr) == ExpressionId.Const) {\r\n            let local = new Local(program, name, -1, type);\r\n            switch (getExpressionType(initExpr)) {\r\n              case NativeType.I32: {\r\n                local = local.withConstantIntegerValue(getConstValueI32(initExpr), 0);\r\n                break;\r\n              }\r\n              case NativeType.I64: {\r\n                local = local.withConstantIntegerValue(\r\n                  getConstValueI64Low(initExpr),\r\n                  getConstValueI64High(initExpr)\r\n                );\r\n                break;\r\n              }\r\n              case NativeType.F32: {\r\n                local = local.withConstantFloatValue(<f64>getConstValueF32(initExpr));\r\n                break;\r\n              }\r\n              case NativeType.F64: {\r\n                local = local.withConstantFloatValue(getConstValueF64(initExpr));\r\n                break;\r\n              }\r\n              default: {\r\n                assert(false);\r\n                return this.module.createUnreachable();\r\n              }\r\n            }\r\n            // Create a virtual local that doesn't actually exist in WebAssembly\r\n            let scopedLocals = currentFunction.flow.scopedLocals;\r\n            if (!scopedLocals) currentFunction.flow.scopedLocals = scopedLocals = new Map();\r\n            else if (scopedLocals.has(name)) {\r\n              this.error(\r\n                DiagnosticCode.Duplicate_identifier_0,\r\n                declaration.name.range, name\r\n              );\r\n              return this.module.createUnreachable();\r\n            }\r\n            scopedLocals.set(name, local);\r\n            isInlined = true;\r\n          } else {\r\n            this.warning(\r\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\r\n              declaration.range\r\n            );\r\n          }\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._const_declarations_must_be_initialized,\r\n            declaration.range\r\n          );\r\n        }\r\n      }\r\n      if (!isInlined) {\r\n        let local: Local;\r\n        if (\r\n          declaration.isAny(CommonFlags.LET | CommonFlags.CONST) ||\r\n          flow.is(FlowFlags.INLINE_CONTEXT)\r\n        ) { // here: not top-level\r\n          local = flow.addScopedLocal(type, name, false, declaration); // reports\r\n        } else {\r\n          local = currentFunction.addLocal(type, name, declaration); // reports\r\n        }\r\n        if (initExpr) {\r\n          initializers.push(this.compileAssignmentWithValue(declaration.name, initExpr));\r\n          if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n            flow.setLocalWrapped(local.index, !flow.canOverflow(initExpr, type));\r\n          }\r\n        } else if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n          flow.setLocalWrapped(local.index, true); // zero\r\n        }\r\n      }\r\n    }\r\n    return initializers.length   // we can unwrap these here because the\r\n      ? initializers.length == 1 // source didn't tell us exactly what to do\r\n        ? initializers[0]\r\n        : this.module.createBlock(null, initializers, NativeType.None)\r\n      : 0;\r\n  }\r\n\r\n  compileVoidStatement(statement: VoidStatement): ExpressionRef {\r\n    return this.compileExpression(statement.expression, Type.void, ConversionKind.EXPLICIT, WrapMode.NONE);\r\n  }\r\n\r\n  compileWhileStatement(statement: WhileStatement): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    // The condition does not yet initialize a branch\r\n    var condExpr = this.makeIsTrueish(\r\n      this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\r\n      this.currentType\r\n    );\r\n\r\n    if (\r\n      !this.options.noTreeShaking ||\r\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT)\r\n    ) {\r\n      // Try to eliminate unnecesssary loops if the condition is constant\r\n      let condExprPrecomp = this.precomputeExpressionRef(condExpr);\r\n      if (\r\n        getExpressionId(condExprPrecomp) == ExpressionId.Const &&\r\n        getExpressionType(condExprPrecomp) == NativeType.I32\r\n      ) {\r\n        if (!getConstValueI32(condExprPrecomp)) return module.createNop();\r\n\r\n      // Otherwise recompile to the original and let the optimizer decide\r\n      } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\r\n        condExpr = this.makeIsTrueish(\r\n          this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\r\n          this.currentType\r\n        );\r\n      }\r\n    }\r\n\r\n    // Statements initiate a new branch with its own break context\r\n    var currentFunction = this.currentFunction;\r\n    var label = currentFunction.enterBreakContext();\r\n    var flow = currentFunction.flow.enterBranchOrScope();\r\n    currentFunction.flow = flow;\r\n    var breakLabel = \"break|\" + label;\r\n    flow.breakLabel = breakLabel;\r\n    var continueLabel = \"continue|\" + label;\r\n    flow.continueLabel = continueLabel;\r\n\r\n    var body = this.compileStatement(statement.statement);\r\n    var alwaysReturns = false; // CONDITION_IS_ALWAYS_TRUE && flow.is(FlowFlags.RETURNS);\r\n    // TODO: evaluate if condition is always true\r\n\r\n    // Switch back to the parent flow\r\n    currentFunction.flow = flow.leaveBranchOrScope();\r\n    currentFunction.leaveBreakContext();\r\n\r\n    var expr = module.createBlock(breakLabel, [\r\n      module.createLoop(continueLabel,\r\n        module.createIf(condExpr,\r\n          flow.isAny(FlowFlags.CONTINUES | FlowFlags.BREAKS | FlowFlags.RETURNS)\r\n            ? body // skip trailing continue if unnecessary\r\n            : module.createBlock(null, [\r\n                body,\r\n                module.createBreak(continueLabel)\r\n              ], NativeType.None)\r\n        )\r\n      )\r\n    ], NativeType.None);\r\n\r\n    // If the loop is guaranteed to run and return, propagate that and append a hint\r\n    if (alwaysReturns) {\r\n      expr = module.createBlock(null, [\r\n        expr,\r\n        module.createUnreachable()\r\n      ]);\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  // expressions\r\n\r\n  /**\r\n   * Compiles the value of an inlined constant element.\r\n   * @param retainType If true, the annotated type of the constant is retained. Otherwise, the value\r\n   *  is precomputed according to context.\r\n   */\r\n  compileInlineConstant(\r\n    element: VariableLikeElement,\r\n    contextualType: Type,\r\n    retainType: bool\r\n  ): ExpressionRef {\r\n    assert(element.is(CommonFlags.INLINED));\r\n    var type = element.type;\r\n    switch (\r\n      !retainType &&\r\n      type.is(TypeFlags.INTEGER) &&\r\n      contextualType.is(TypeFlags.INTEGER) &&\r\n      type.size < contextualType.size\r\n        ? (this.currentType = contextualType).kind // essentially precomputes a (sign-)extension\r\n        : (this.currentType = type).kind\r\n    ) {\r\n      case TypeKind.I8:\r\n      case TypeKind.I16: {\r\n        let shift = type.computeSmallIntegerShift(Type.i32);\r\n        return this.module.createI32(\r\n          element.constantValueKind == ConstantValueKind.INTEGER\r\n            ? i64_low(element.constantIntegerValue) << shift >> shift\r\n            : 0\r\n        ); // recognized by canOverflow\r\n      }\r\n      case TypeKind.U8:\r\n      case TypeKind.U16:\r\n      case TypeKind.BOOL: {\r\n        let mask = element.type.computeSmallIntegerMask(Type.i32);\r\n        return this.module.createI32(\r\n          element.constantValueKind == ConstantValueKind.INTEGER\r\n            ? i64_low(element.constantIntegerValue) & mask\r\n            : 0\r\n        ); // recognized by canOverflow\r\n      }\r\n      case TypeKind.I32:\r\n      case TypeKind.U32: {\r\n        return this.module.createI32(\r\n          element.constantValueKind == ConstantValueKind.INTEGER\r\n            ? i64_low(element.constantIntegerValue)\r\n            : 0\r\n        );\r\n      }\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: {\r\n        if (!element.program.options.isWasm64) {\r\n          return this.module.createI32(\r\n            element.constantValueKind == ConstantValueKind.INTEGER\r\n              ? i64_low(element.constantIntegerValue)\r\n              : 0\r\n          );\r\n        }\r\n        // fall-through\r\n      }\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: {\r\n        return element.constantValueKind == ConstantValueKind.INTEGER\r\n          ? this.module.createI64(\r\n              i64_low(element.constantIntegerValue),\r\n              i64_high(element.constantIntegerValue)\r\n            )\r\n          : this.module.createI64(0);\r\n      }\r\n      case TypeKind.F64: {\r\n        if (!(element.is(CommonFlags.BUILTIN) && contextualType == Type.f32)) {\r\n          return this.module.createF64((<VariableLikeElement>element).constantFloatValue);\r\n        }\r\n        // otherwise fall-through: basically precomputes f32.demote/f64 of NaN / Infinity\r\n        this.currentType = Type.f32;\r\n      }\r\n      case TypeKind.F32: {\r\n        return this.module.createF32((<VariableLikeElement>element).constantFloatValue);\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return this.module.createUnreachable();\r\n      }\r\n    }\r\n  }\r\n\r\n  compileExpression(\r\n    expression: Expression,\r\n    contextualType: Type,\r\n    conversionKind: ConversionKind,\r\n    wrapMode: WrapMode\r\n  ): ExpressionRef {\r\n    this.currentType = contextualType;\r\n\r\n    var expr: ExpressionRef;\r\n    switch (expression.kind) {\r\n      case NodeKind.ASSERTION: {\r\n        expr = this.compileAssertionExpression(<AssertionExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.BINARY: {\r\n        expr = this.compileBinaryExpression(<BinaryExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.CALL: {\r\n        expr = this.compileCallExpression(<CallExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.COMMA: {\r\n        expr = this.compileCommaExpression(<CommaExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.ELEMENTACCESS: {\r\n        expr = this.compileElementAccessExpression(<ElementAccessExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.FUNCTION: {\r\n        expr = this.compileFunctionExpression(<FunctionExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.IDENTIFIER:\r\n      case NodeKind.FALSE:\r\n      case NodeKind.NULL:\r\n      case NodeKind.THIS:\r\n      case NodeKind.SUPER:\r\n      case NodeKind.TRUE: {\r\n        expr = this.compileIdentifierExpression(\r\n          <IdentifierExpression>expression,\r\n          contextualType,\r\n          conversionKind == ConversionKind.NONE // retain type of inlined constants\r\n        );\r\n        break;\r\n      }\r\n      case NodeKind.LITERAL: {\r\n        expr = this.compileLiteralExpression(<LiteralExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.NEW: {\r\n        expr = this.compileNewExpression(<NewExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.PARENTHESIZED: {\r\n        expr = this.compileParenthesizedExpression(<ParenthesizedExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.PROPERTYACCESS: {\r\n        expr = this.compilePropertyAccessExpression(\r\n          <PropertyAccessExpression>expression,\r\n          contextualType,\r\n          conversionKind == ConversionKind.NONE // retain type of inlined constants\r\n        );\r\n        break;\r\n      }\r\n      case NodeKind.TERNARY: {\r\n        expr = this.compileTernaryExpression(<TernaryExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.UNARYPOSTFIX: {\r\n        expr = this.compileUnaryPostfixExpression(<UnaryPostfixExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.UNARYPREFIX: {\r\n        expr = this.compileUnaryPrefixExpression(<UnaryPrefixExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        expr = this.module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    var currentType = this.currentType;\r\n    if (conversionKind != ConversionKind.NONE && currentType != contextualType) {\r\n      expr = this.convertExpression(expr, currentType, contextualType, conversionKind, wrapMode, expression);\r\n      this.currentType = contextualType;\r\n    } else if (wrapMode == WrapMode.WRAP) {\r\n      expr = this.ensureSmallIntegerWrap(expr, currentType);\r\n    }\r\n\r\n    if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\r\n    return expr;\r\n  }\r\n\r\n  compileExpressionRetainType(\r\n    expression: Expression,\r\n    contextualType: Type,\r\n    wrapMode: WrapMode\r\n  ): ExpressionRef {\r\n    return this.compileExpression(\r\n      expression,\r\n      contextualType == Type.void\r\n        ? Type.i32\r\n        : contextualType,\r\n      ConversionKind.NONE,\r\n      wrapMode\r\n    );\r\n  }\r\n\r\n  precomputeExpression(\r\n    expression: Expression,\r\n    contextualType: Type,\r\n    conversionKind: ConversionKind,\r\n    wrapMode: WrapMode\r\n  ): ExpressionRef {\r\n    return this.precomputeExpressionRef(\r\n      this.compileExpression(expression, contextualType, conversionKind, wrapMode)\r\n    );\r\n  }\r\n\r\n  precomputeExpressionRef(expr: ExpressionRef): ExpressionRef {\r\n    var module = this.module;\r\n    var type = this.currentType;\r\n    var nativeType = type.toNativeType();\r\n    var funcRef = module.addTemporaryFunction(nativeType, null, expr);\r\n    module.runPasses([ \"precompute\" ], funcRef);\r\n    var ret = getFunctionBody(funcRef);\r\n    module.removeTemporaryFunction();\r\n    return ret;\r\n  }\r\n\r\n  convertExpression(\r\n    expr: ExpressionRef,\r\n    fromType: Type,\r\n    toType: Type,\r\n    conversionKind: ConversionKind,\r\n    wrapMode: WrapMode,\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n    assert(conversionKind != ConversionKind.NONE);\r\n    var module = this.module;\r\n\r\n    // void to any\r\n    if (fromType.kind == TypeKind.VOID) {\r\n      assert(toType.kind != TypeKind.VOID); // convertExpression should not be called with void -> void\r\n      this.error(\r\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n        reportNode.range, fromType.toString(), toType.toString()\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n\r\n    // any to void\r\n    if (toType.kind == TypeKind.VOID) {\r\n      return module.createDrop(expr);\r\n    }\r\n\r\n    if (conversionKind == ConversionKind.IMPLICIT && !fromType.isAssignableTo(toType)) {\r\n      this.error(\r\n        DiagnosticCode.Conversion_from_type_0_to_1_requires_an_explicit_cast,\r\n        reportNode.range, fromType.toString(), toType.toString()\r\n      ); // recoverable\r\n    }\r\n\r\n    // TODO: make this a proper switch?\r\n    if (fromType.is(TypeFlags.FLOAT)) {\r\n\r\n      // float to float\r\n      if (toType.is(TypeFlags.FLOAT)) {\r\n        if (fromType.kind == TypeKind.F32) {\r\n\r\n          // f32 to f64\r\n          if (toType.kind == TypeKind.F64) {\r\n            expr = module.createUnary(UnaryOp.PromoteF32, expr);\r\n          }\r\n\r\n          // otherwise f32 to f32\r\n\r\n        // f64 to f32\r\n        } else if (toType.kind == TypeKind.F32) {\r\n          expr = module.createUnary(UnaryOp.DemoteF64, expr);\r\n        }\r\n\r\n        // otherwise f64 to f64\r\n\r\n      // float to int\r\n      } else if (toType.is(TypeFlags.INTEGER)) {\r\n\r\n        // f32 to int\r\n        if (fromType.kind == TypeKind.F32) {\r\n          if (toType.is(TypeFlags.SIGNED)) {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.createUnary(UnaryOp.TruncF32ToI64, expr);\r\n            } else {\r\n              expr = module.createUnary(UnaryOp.TruncF32ToI32, expr);\r\n            }\r\n          } else {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.createUnary(UnaryOp.TruncF32ToU64, expr);\r\n            } else {\r\n              expr = module.createUnary(UnaryOp.TruncF32ToU32, expr);\r\n            }\r\n          }\r\n\r\n        // f64 to int\r\n        } else {\r\n          if (toType.is(TypeFlags.SIGNED)) {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.createUnary(UnaryOp.TruncF64ToI64, expr);\r\n            } else {\r\n              expr = module.createUnary(UnaryOp.TruncF64ToI32, expr);\r\n            }\r\n          } else {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.createUnary(UnaryOp.TruncF64ToU64, expr);\r\n            } else {\r\n              expr = module.createUnary(UnaryOp.TruncF64ToU32, expr);\r\n            }\r\n          }\r\n        }\r\n\r\n      // float to void\r\n      } else {\r\n        assert(toType.flags == TypeFlags.NONE, \"void type expected\");\r\n        expr = module.createDrop(expr);\r\n      }\r\n\r\n    // int to float\r\n    } else if (fromType.is(TypeFlags.INTEGER) && toType.is(TypeFlags.FLOAT)) {\r\n\r\n      // int to f32\r\n      if (toType.kind == TypeKind.F32) {\r\n        if (fromType.is(TypeFlags.LONG)) {\r\n          expr = module.createUnary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI64ToF32\r\n              : UnaryOp.ConvertU64ToF32,\r\n            expr\r\n          );\r\n        } else {\r\n          expr = module.createUnary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI32ToF32\r\n              : UnaryOp.ConvertU32ToF32,\r\n            expr\r\n          );\r\n        }\r\n\r\n      // int to f64\r\n      } else {\r\n        if (fromType.is(TypeFlags.LONG)) {\r\n          expr = module.createUnary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI64ToF64\r\n              : UnaryOp.ConvertU64ToF64,\r\n            expr\r\n          );\r\n        } else {\r\n          expr = module.createUnary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI32ToF64\r\n              : UnaryOp.ConvertU32ToF64,\r\n            expr\r\n          );\r\n        }\r\n      }\r\n\r\n    // int to int\r\n    } else {\r\n      // i64 to ...\r\n      if (fromType.is(TypeFlags.LONG)) {\r\n\r\n        // i64 to i32 or smaller\r\n        if (!toType.is(TypeFlags.LONG)) {\r\n          expr = module.createUnary(UnaryOp.WrapI64, expr); // discards upper bits\r\n        }\r\n\r\n      // i32 or smaller to i64\r\n      } else if (toType.is(TypeFlags.LONG)) {\r\n        expr = module.createUnary(\r\n          toType.is(TypeFlags.SIGNED) ? UnaryOp.ExtendI32 : UnaryOp.ExtendU32,\r\n          this.ensureSmallIntegerWrap(expr, fromType) // must clear garbage bits\r\n        );\r\n        wrapMode = WrapMode.NONE;\r\n\r\n      // i32 to i32\r\n      } else {\r\n        // small i32 to ...\r\n        if (fromType.is(TypeFlags.SHORT)) {\r\n          // small i32 to larger i32\r\n          if (fromType.size < toType.size) {\r\n            expr = this.ensureSmallIntegerWrap(expr, fromType); // must clear garbage bits\r\n            wrapMode = WrapMode.NONE;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    this.currentType = toType;\r\n    return wrapMode == WrapMode.WRAP\r\n      ? this.ensureSmallIntegerWrap(expr, toType)\r\n      : expr;\r\n  }\r\n\r\n  compileAssertionExpression(expression: AssertionExpression, contextualType: Type): ExpressionRef {\r\n    var toType = this.program.resolveType( // reports\r\n      expression.toType,\r\n      this.currentFunction.flow.contextualTypeArguments\r\n    );\r\n    if (!toType) return this.module.createUnreachable();\r\n    return this.compileExpression(expression.expression, toType, ConversionKind.EXPLICIT, WrapMode.NONE);\r\n  }\r\n\r\n  private f32ModInstance: Function | null = null;\r\n  private f64ModInstance: Function | null = null;\r\n  private f32PowInstance: Function | null = null;\r\n  private f64PowInstance: Function | null = null;\r\n\r\n  compileBinaryExpression(\r\n    expression: BinaryExpression,\r\n    contextualType: Type\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var left = expression.left;\r\n    var right = expression.right;\r\n\r\n    var leftExpr: ExpressionRef;\r\n    var leftType: Type;\r\n    var rightExpr: ExpressionRef;\r\n    var rightType: Type;\r\n    var commonType: Type | null;\r\n\r\n    var expr: ExpressionRef;\r\n    var compound = false;\r\n\r\n    var operator = expression.operator;\r\n    switch (operator) {\r\n      case Token.LESSTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        let classReference = leftType.classReference;\r\n        if (classReference) {\r\n          let overload = classReference.lookupOverload(OperatorKind.LT);\r\n          if (overload) {\r\n            expr = this.compileBinaryOverload(overload, left, right, expression);\r\n            break;\r\n          }\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            leftType,\r\n            leftType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(\r\n            rightExpr,\r\n            rightType,\r\n            rightType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \"<\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.LtI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.LtI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LtI64\r\n                : BinaryOp.LtI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.LtU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LtU64\r\n                : BinaryOp.LtU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.LtU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.LtF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.LtF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        let classReference = leftType.classReference;\r\n        if (classReference) {\r\n          let overload = classReference.lookupOverload(OperatorKind.GT);\r\n          if (overload) {\r\n            expr = this.compileBinaryOverload(overload, left, right, expression);\r\n            break;\r\n          }\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            leftType,\r\n            leftType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(\r\n            rightExpr,\r\n            rightType,\r\n            rightType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \">\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.GtI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GtI64\r\n                : BinaryOp.GtI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.GtI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.GtU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GtU64\r\n                : BinaryOp.GtU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.GtU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.GtF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.GtF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.LESSTHAN_EQUALS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        let classReference = leftType.classReference;\r\n        if (classReference) {\r\n          let overload = classReference.lookupOverload(OperatorKind.LE);\r\n          if (overload) {\r\n            expr = this.compileBinaryOverload(overload, left, right, expression);\r\n            break;\r\n          }\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            leftType,\r\n            leftType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(\r\n            rightExpr,\r\n            rightType,\r\n            rightType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \"<=\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.LeI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LeI64\r\n                : BinaryOp.LeI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.LeI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.LeU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LeU64\r\n                : BinaryOp.LeU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.LeU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.LeF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.LeF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN_EQUALS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        let classReference = leftType.classReference;\r\n        if (classReference) {\r\n          let overload = classReference.lookupOverload(OperatorKind.GE);\r\n          if (overload) {\r\n            expr = this.compileBinaryOverload(overload, left, right, expression);\r\n            break;\r\n          }\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            leftType,\r\n            leftType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(\r\n            rightExpr,\r\n            rightType,\r\n            rightType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \">=\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.GeI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GeI64\r\n                : BinaryOp.GeI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.GeI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.GeU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GeU64\r\n                : BinaryOp.GeU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.GeU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.GeF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.GeF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n\r\n      case Token.EQUALS_EQUALS_EQUALS:\r\n      case Token.EQUALS_EQUALS: {\r\n\r\n        // NOTE that this favors correctness, in terms of emitting a binary expression, over\r\n        // checking for a possible use of unary EQZ. while the most classic of all optimizations,\r\n        // that's not what the source told us to do. for reference, `!left` emits unary EQZ.\r\n\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        if (operator == Token.EQUALS_EQUALS) { // check operator overload\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.EQ);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, right, expression);\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            leftType,\r\n            leftType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(\r\n            rightExpr,\r\n            rightType,\r\n            rightType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.EqI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.EqI64\r\n                : BinaryOp.EqI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.EqI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.EqF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.EqF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.EXCLAMATION_EQUALS_EQUALS:\r\n      case Token.EXCLAMATION_EQUALS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        if (operator == Token.EXCLAMATION_EQUALS) { // check operator overload\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.NE);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, right, expression);\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            leftType,\r\n            leftType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(\r\n            rightExpr,\r\n            rightType,\r\n            rightType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.NeI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.NeI64\r\n                : BinaryOp.NeI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.NeI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.NeF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.NeF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.EQUALS: {\r\n        return this.compileAssignment(left, right, contextualType);\r\n      }\r\n      case Token.PLUS_EQUALS: compound = true;\r\n      case Token.PLUS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        let classReference = leftType.classReference;\r\n        if (classReference) {\r\n          let overload = classReference.lookupOverload(OperatorKind.ADD);\r\n          if (overload) {\r\n            expr = this.compileBinaryOverload(overload, left, right, expression);\r\n            break;\r\n          }\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"+\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:   // addition might overflow\r\n          case TypeKind.I16:  // ^\r\n          case TypeKind.U8:   // ^\r\n          case TypeKind.U16:  // ^\r\n          case TypeKind.BOOL: // ^\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.AddI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.AddI64\r\n                : BinaryOp.AddI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.AddI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.AddF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.AddF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.MINUS_EQUALS: compound = true;\r\n      case Token.MINUS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        let classReference = leftType.classReference;\r\n        if (classReference) {\r\n          let overload = classReference.lookupOverload(OperatorKind.SUB);\r\n          if (overload) {\r\n            expr = this.compileBinaryOverload(overload, left, right, expression);\r\n            break;\r\n          }\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"-\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:   // subtraction might overflow\r\n          case TypeKind.I16:  // ^\r\n          case TypeKind.U8:   // ^\r\n          case TypeKind.U16:  // ^\r\n          case TypeKind.BOOL: // ^\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.SubI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.SubI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.SubF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.SubF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.ASTERISK_EQUALS: compound = true;\r\n      case Token.ASTERISK: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        let classReference = leftType.classReference;\r\n        if (classReference) {\r\n          let overload = classReference.lookupOverload(OperatorKind.MUL);\r\n          if (overload) {\r\n            expr = this.compileBinaryOverload(overload, left, right, expression);\r\n            break;\r\n          }\r\n        }\r\n\r\n        if (compound) {\r\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"*\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL:\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.MulI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.MulI64\r\n                : BinaryOp.MulI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.MulI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.MulF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.MulF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.ASTERISK_ASTERISK_EQUALS: compound = true;\r\n      case Token.ASTERISK_ASTERISK: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        let classReference = leftType.classReference;\r\n        if (classReference) {\r\n          let overload = classReference.lookupOverload(OperatorKind.POW);\r\n          if (overload) {\r\n            expr = this.compileBinaryOverload(overload, left, right, expression);\r\n            break;\r\n          }\r\n        }\r\n\r\n        let instance: Function | null;\r\n\r\n        // Mathf.pow if lhs is f32 (result is f32)\r\n        if (this.currentType.kind == TypeKind.F32) {\r\n          rightExpr = this.compileExpression(right, Type.f32, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (!(instance = this.f32PowInstance)) {\r\n            let namespace = this.program.elementsLookup.get(\"Mathf\");\r\n            if (!namespace) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Mathf\"\r\n              );\r\n              expr = module.createUnreachable();\r\n              break;\r\n            }\r\n            let prototype = namespace.members ? namespace.members.get(\"pow\") : null;\r\n            if (!prototype) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Mathf.pow\"\r\n              );\r\n              expr = module.createUnreachable();\r\n              break;\r\n            }\r\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n            this.f32PowInstance = instance = (<FunctionPrototype>prototype).resolve();\r\n          }\r\n\r\n        // Math.pow otherwise (result is f64)\r\n        // TODO: should the result be converted back?\r\n        } else {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            this.currentType,\r\n            Type.f64,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.NONE,\r\n            left\r\n          );\r\n          leftType = this.currentType;\r\n          rightExpr = this.compileExpression(\r\n            right,\r\n            Type.f64,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.NONE\r\n          );\r\n          rightType = this.currentType;\r\n          if (!(instance = this.f64PowInstance)) {\r\n            let namespace = this.program.elementsLookup.get(\"Math\");\r\n            if (!namespace) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Math\"\r\n              );\r\n              expr = module.createUnreachable();\r\n              break;\r\n            }\r\n            let prototype = namespace.members ? namespace.members.get(\"pow\") : null;\r\n            if (!prototype) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Math.pow\"\r\n              );\r\n              expr = module.createUnreachable();\r\n              break;\r\n            }\r\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n            this.f64PowInstance = instance = (<FunctionPrototype>prototype).resolve();\r\n          }\r\n        }\r\n        if (!(instance && this.compileFunction(instance))) {\r\n          expr = module.createUnreachable();\r\n        } else {\r\n          expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\r\n        }\r\n        break;\r\n      }\r\n      case Token.SLASH_EQUALS: compound = true;\r\n      case Token.SLASH: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        let classReference = leftType.classReference;\r\n        if (classReference) {\r\n          let overload = classReference.lookupOverload(OperatorKind.DIV);\r\n          if (overload) {\r\n            expr = this.compileBinaryOverload(overload, left, right, expression);\r\n            break;\r\n          }\r\n        }\r\n\r\n        if (compound) {\r\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.WRAP, // !\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.WRAP, // !\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"/\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:  // signed div on signed small integers might overflow, e.g. -128/-1\r\n          case TypeKind.I16: // ^\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.DivI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.DivI64\r\n                : BinaryOp.DivI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.DivI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.DivU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.DivU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.DivU64\r\n                : BinaryOp.DivU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.DivU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.DivF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.DivF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.PERCENT_EQUALS: compound = true;\r\n      case Token.PERCENT: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        let classReference = leftType.classReference;\r\n        if (classReference) {\r\n          let overload = classReference.lookupOverload(OperatorKind.REM);\r\n          if (overload) {\r\n            expr = this.compileBinaryOverload(overload, left, right, expression);\r\n            break;\r\n          }\r\n        }\r\n\r\n        if (compound) {\r\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.WRAP, // !\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.WRAP, // !\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"%\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16: {\r\n            expr = module.createBinary(BinaryOp.RemI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.RemI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.RemI64\r\n                : BinaryOp.RemI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.RemI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.RemU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.RemU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.RemU64\r\n                : BinaryOp.RemU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.RemU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            let instance = this.f32ModInstance;\r\n            if (!instance) {\r\n              let namespace = this.program.elementsLookup.get(\"Mathf\");\r\n              if (!namespace) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Mathf\"\r\n                );\r\n                expr = module.createUnreachable();\r\n                break;\r\n              }\r\n              let prototype = namespace.members ? namespace.members.get(\"mod\") : null;\r\n              if (!prototype) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Mathf.mod\"\r\n                );\r\n                expr = module.createUnreachable();\r\n                break;\r\n              }\r\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n              this.f32ModInstance = instance = (<FunctionPrototype>prototype).resolve();\r\n            }\r\n            if (!(instance && this.compileFunction(instance))) {\r\n              expr = module.createUnreachable();\r\n            } else {\r\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\r\n            }\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            let instance = this.f64ModInstance;\r\n            if (!instance) {\r\n              let namespace = this.program.elementsLookup.get(\"Math\");\r\n              if (!namespace) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Math\"\r\n                );\r\n                expr = module.createUnreachable();\r\n                break;\r\n              }\r\n              let prototype = namespace.members ? namespace.members.get(\"mod\") : null;\r\n              if (!prototype) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Math.mod\"\r\n                );\r\n                expr = module.createUnreachable();\r\n                break;\r\n              }\r\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n              this.f64ModInstance = instance = (<FunctionPrototype>prototype).resolve();\r\n            }\r\n            if (!(instance && this.compileFunction(instance))) {\r\n              expr = module.createUnreachable();\r\n            } else {\r\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\r\n            }\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.LESSTHAN_LESSTHAN_EQUALS: compound = true;\r\n      case Token.LESSTHAN_LESSTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL:\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.ShlI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.ShlI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: // TODO: check operator overload\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShlI64\r\n                : BinaryOp.ShlI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\r\n      case Token.GREATERTHAN_GREATERTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.WRAP); // !\r\n        leftType = this.currentType; // ^ must clear garbage bits\r\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n        rightType = this.currentType;\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16: {\r\n            expr = module.createBinary(BinaryOp.ShrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.ShrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.ShrI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShrI64\r\n                : BinaryOp.ShrI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: { // TODO: check operator overload\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShrU64\r\n                : BinaryOp.ShrU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\r\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.WRAP);\r\n        leftType = this.currentType; // ^ clear garbage bits\r\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: { // assumes that unsigned shr on unsigned small integers does not overflow\r\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n          }\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: // TODO: operator overload?\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShrU64\r\n                : BinaryOp.ShrU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.AMPERSAND_EQUALS: compound = true;\r\n      case Token.AMPERSAND: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overloadd\r\n        let classReference = leftType.classReference;\r\n        if (classReference) {\r\n          let overload = classReference.lookupOverload(OperatorKind.AND);\r\n          if (overload) {\r\n            expr = this.compileBinaryOverload(overload, left, right, expression);\r\n            break;\r\n          }\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"&\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.AndI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.AndI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.AndI64\r\n                : BinaryOp.AndI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.BAR_EQUALS: compound = true;\r\n      case Token.BAR: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        let classReference = leftType.classReference;\r\n        if (classReference) {\r\n          let overload = classReference.lookupOverload(OperatorKind.OR);\r\n          if (overload) {\r\n            expr = this.compileBinaryOverload(overload, left, right, expression);\r\n            break;\r\n          }\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"|\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.OrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.OrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.OrI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.OrI64\r\n                : BinaryOp.OrI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.CARET_EQUALS: compound = true;\r\n      case Token.CARET: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        let classReference = leftType.classReference;\r\n        if (classReference) {\r\n          let overload = classReference.lookupOverload(OperatorKind.XOR);\r\n          if (overload) {\r\n            expr = this.compileBinaryOverload(overload, left, right, expression);\r\n            break;\r\n          }\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"^\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.XorI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.XorI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.XorI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.XorI64\r\n                : BinaryOp.XorI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n\r\n      // logical (no overloading)\r\n\r\n      case Token.AMPERSAND_AMPERSAND: { // left && right\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n\r\n        // simplify if cloning left without side effects is possible\r\n        if (expr = module.cloneExpression(leftExpr, true, 0)) {\r\n          this.makeIsTrueish(leftExpr, this.currentType);\r\n          expr = module.createIf(\r\n            this.makeIsTrueish(leftExpr, this.currentType),\r\n            rightExpr,\r\n            expr\r\n          );\r\n\r\n        // if not possible, tee left to a temp. local\r\n        } else {\r\n          let flow = this.currentFunction.flow;\r\n          let tempLocal = this.currentFunction.getAndFreeTempLocal(\r\n            this.currentType,\r\n            !flow.canOverflow(leftExpr, this.currentType)\r\n          );\r\n          expr = module.createIf(\r\n            this.makeIsTrueish(\r\n              module.createTeeLocal(tempLocal.index, leftExpr),\r\n              this.currentType\r\n            ),\r\n            rightExpr,\r\n            module.createGetLocal(\r\n              assert(tempLocal).index, // to be sure\r\n              this.currentType.toNativeType()\r\n            )\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      case Token.BAR_BAR: { // left || right\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n\r\n        // simplify if cloning left without side effects is possible\r\n        if (expr = this.module.cloneExpression(leftExpr, true, 0)) {\r\n          expr = this.module.createIf(\r\n            this.makeIsTrueish(leftExpr, this.currentType),\r\n            expr,\r\n            rightExpr\r\n          );\r\n\r\n        // if not possible, tee left to a temp. local\r\n        } else {\r\n          let flow = this.currentFunction.flow;\r\n          let tempLocal = this.currentFunction.getAndFreeTempLocal(\r\n            this.currentType,\r\n            !flow.canOverflow(leftExpr, this.currentType)\r\n          );\r\n          expr = module.createIf(\r\n            this.makeIsTrueish(\r\n              module.createTeeLocal(tempLocal.index, leftExpr),\r\n              this.currentType\r\n            ),\r\n            module.createGetLocal(\r\n              assert(tempLocal).index, // to be sure\r\n              this.currentType.toNativeType()\r\n            ),\r\n            rightExpr\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        expr = this.module.createUnreachable();\r\n      }\r\n    }\r\n    return compound\r\n      ? this.compileAssignmentWithValue(left, expr, contextualType != Type.void)\r\n      : expr;\r\n  }\r\n\r\n  compileUnaryOverload(\r\n    operatorInstance: Function,\r\n    value: Expression,\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n      // checks and recompiles the argument according to its actual annotated type\r\n      var argumentExpressions: Expression[];\r\n      var thisArg: ExpressionRef = 0;\r\n      if (operatorInstance.is(CommonFlags.INSTANCE)) {\r\n        let parent = assert(operatorInstance.parent);\r\n        assert(parent.kind == ElementKind.CLASS);\r\n        thisArg = this.compileExpression(value, (<Class>parent).type, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n        argumentExpressions = [];\r\n      } else {\r\n        argumentExpressions = [ value ];\r\n      }\r\n      return this.compileCallDirect(\r\n        operatorInstance,\r\n        argumentExpressions,\r\n        reportNode,\r\n        thisArg,\r\n        operatorInstance.hasDecorator(DecoratorFlags.INLINE)\r\n      );\r\n  }\r\n\r\n  compileBinaryOverload(\r\n    operatorInstance: Function,\r\n    left: Expression,\r\n    right: Expression,\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n    // checks and recompiles the arguments according to their actual annotated types\r\n    var argumentExpressions: Expression[];\r\n    var thisArg: ExpressionRef = 0;\r\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\r\n      let parent = assert(operatorInstance.parent);\r\n      assert(parent.kind == ElementKind.CLASS);\r\n      thisArg = this.compileExpression(left, (<Class>parent).type, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      argumentExpressions = [ right ];\r\n    } else {\r\n      argumentExpressions = [ left, right ];\r\n    }\r\n    var ret = this.compileCallDirect(\r\n      operatorInstance,\r\n      argumentExpressions,\r\n      reportNode,\r\n      thisArg,\r\n      operatorInstance.hasDecorator(DecoratorFlags.INLINE)\r\n    );\r\n    return ret;\r\n  }\r\n\r\n  compileAssignment(expression: Expression, valueExpression: Expression, contextualType: Type): ExpressionRef {\r\n    var program = this.program;\r\n    var currentFunction = this.currentFunction;\r\n    var target = program.resolveExpression(expression, currentFunction); // reports\r\n    if (!target) return this.module.createUnreachable();\r\n\r\n    // to compile just the value, we need to know the target's type\r\n    var elementType: Type;\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL: {\r\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field compiled as a global\r\n          return this.module.createUnreachable();\r\n        }\r\n        assert((<Global>target).type != Type.void); // compileGlobal must guarantee this\r\n        // fall-through\r\n      }\r\n      case ElementKind.LOCAL:\r\n      case ElementKind.FIELD: {\r\n        elementType = (<VariableLikeElement>target).type;\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: {\r\n        let prototype = (<Property>target).setterPrototype;\r\n        if (prototype) {\r\n          let instance = prototype.resolve(); // reports\r\n          if (!instance) return this.module.createUnreachable();\r\n          assert(instance.signature.parameterTypes.length == 1); // parser must guarantee this\r\n          elementType = instance.signature.parameterTypes[0];\r\n          break;\r\n        }\r\n        this.error(\r\n          DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n          expression.range, (<Property>target).internalName\r\n        );\r\n        return this.module.createUnreachable();\r\n      }\r\n      case ElementKind.CLASS: {\r\n        if (program.resolvedElementExpression) { // indexed access\r\n          let isUnchecked = currentFunction.flow.is(FlowFlags.UNCHECKED_CONTEXT);\r\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\r\n          if (!indexedSet) {\r\n            let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\r\n            if (!indexedGet) {\r\n              this.error(\r\n                DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n                expression.range, (<Class>target).internalName\r\n              );\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\r\n                expression.range, (<Class>target).internalName\r\n              );\r\n            }\r\n            return this.module.createUnreachable();\r\n          }\r\n          assert(indexedSet.signature.parameterTypes.length == 2); // parser must guarantee this\r\n          elementType = indexedSet.signature.parameterTypes[1];    // 2nd parameter is the element\r\n          break;\r\n        }\r\n        // fall-through\r\n      }\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return this.module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    // compile the value and do the assignment\r\n    var valueExpr = this.compileExpression(valueExpression, elementType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n    return this.compileAssignmentWithValue(\r\n      expression,\r\n      valueExpr,\r\n      contextualType != Type.void\r\n    );\r\n  }\r\n\r\n  compileAssignmentWithValue(\r\n    expression: Expression,\r\n    valueWithCorrectType: ExpressionRef,\r\n    tee: bool = false\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var target = this.program.resolveExpression(expression, this.currentFunction); // reports\r\n    if (!target) return module.createUnreachable();\r\n\r\n    switch (target.kind) {\r\n      case ElementKind.LOCAL: {\r\n        let type = (<Local>target).type;\r\n        this.currentType = tee ? type : Type.void;\r\n        if ((<Local>target).is(CommonFlags.CONST)) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range, target.internalName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        let flow = this.currentFunction.flow;\r\n        if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n          flow.setLocalWrapped((<Local>target).index, !flow.canOverflow(valueWithCorrectType, type));\r\n        }\r\n        return tee\r\n          ? module.createTeeLocal((<Local>target).index, valueWithCorrectType)\r\n          : module.createSetLocal((<Local>target).index, valueWithCorrectType);\r\n      }\r\n      case ElementKind.GLOBAL: {\r\n        if (!this.compileGlobal(<Global>target)) return module.createUnreachable();\r\n        let type = (<Global>target).type;\r\n        assert(type != Type.void);\r\n        this.currentType = tee ? type : Type.void;\r\n        if ((<Local>target).is(CommonFlags.CONST)) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range,\r\n            target.internalName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        valueWithCorrectType = this.ensureSmallIntegerWrap(valueWithCorrectType, type); // guaranteed\r\n        if (tee) {\r\n          let nativeType = type.toNativeType();\r\n          let internalName = target.internalName;\r\n          return module.createBlock(null, [ // emulated teeGlobal\r\n            module.createSetGlobal(internalName, valueWithCorrectType),\r\n            module.createGetGlobal(internalName, nativeType)\r\n          ], nativeType);\r\n        } else {\r\n          return module.createSetGlobal(target.internalName, valueWithCorrectType);\r\n        }\r\n      }\r\n      case ElementKind.FIELD: {\r\n        const declaration = (<Field>target).declaration;\r\n        if (\r\n          (<Field>target).is(CommonFlags.READONLY) &&\r\n          !(\r\n            this.currentFunction.is(CommonFlags.CONSTRUCTOR) ||\r\n            declaration == null ||\r\n            declaration.initializer != null\r\n          )\r\n        ) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range, (<Field>target).internalName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        let thisExpression = assert(this.program.resolvedThisExpression);\r\n        let thisExpr = this.compileExpressionRetainType(\r\n          thisExpression,\r\n          this.options.usizeType,\r\n          WrapMode.NONE\r\n        );\r\n        let type = (<Field>target).type;\r\n        this.currentType = tee ? type : Type.void;\r\n        let nativeType = type.toNativeType();\r\n        if (type.kind == TypeKind.BOOL) {\r\n          // make sure bools are wrapped (usually are) when storing as 8 bits\r\n          valueWithCorrectType = this.ensureSmallIntegerWrap(valueWithCorrectType, type);\r\n        }\r\n        if (tee) {\r\n          let currentFunction = this.currentFunction;\r\n          let flow = currentFunction.flow;\r\n          let tempLocal = currentFunction.getAndFreeTempLocal(\r\n            type,\r\n            !flow.canOverflow(valueWithCorrectType, type)\r\n          );\r\n          let tempLocalIndex = tempLocal.index;\r\n          // TODO: simplify if valueWithCorrectType has no side effects\r\n          return module.createBlock(null, [\r\n            module.createSetLocal(tempLocalIndex, valueWithCorrectType),\r\n            module.createStore(\r\n              type.byteSize,\r\n              thisExpr,\r\n              module.createGetLocal(tempLocalIndex, nativeType),\r\n              nativeType,\r\n              (<Field>target).memoryOffset\r\n            ),\r\n            module.createGetLocal(tempLocalIndex, nativeType)\r\n          ], nativeType);\r\n        } else {\r\n          return module.createStore(\r\n            type.byteSize,\r\n            thisExpr,\r\n            valueWithCorrectType,\r\n            nativeType,\r\n            (<Field>target).memoryOffset\r\n          );\r\n        }\r\n      }\r\n      case ElementKind.PROPERTY: {\r\n        let setterPrototype = (<Property>target).setterPrototype;\r\n        if (setterPrototype) {\r\n          let setterInstance = setterPrototype.resolve(); // reports\r\n          if (!setterInstance) return module.createUnreachable();\r\n\r\n          // call just the setter if the return value isn't of interest\r\n          if (!tee) {\r\n            if (setterInstance.is(CommonFlags.INSTANCE)) {\r\n              let thisExpression = assert(this.program.resolvedThisExpression);\r\n              let thisExpr = this.compileExpressionRetainType(\r\n                thisExpression,\r\n                this.options.usizeType,\r\n                WrapMode.NONE\r\n              );\r\n              return this.makeCallDirect(setterInstance, [ thisExpr, valueWithCorrectType ]);\r\n            } else {\r\n              return this.makeCallDirect(setterInstance, [ valueWithCorrectType ]);\r\n            }\r\n          }\r\n\r\n          // otherwise call the setter first, then the getter\r\n          let getterPrototype = (<Property>target).getterPrototype;\r\n          assert(getterPrototype != null); // must have one if there is a setter\r\n          let getterInstance = (<FunctionPrototype>getterPrototype).resolve(); // reports\r\n          if (!getterInstance) return module.createUnreachable();\r\n          let returnType = getterInstance.signature.returnType;\r\n          let nativeReturnType = returnType.toNativeType();\r\n          if (setterInstance.is(CommonFlags.INSTANCE)) {\r\n            let thisExpression = assert(this.program.resolvedThisExpression);\r\n            let thisExpr = this.compileExpressionRetainType(\r\n              thisExpression,\r\n              this.options.usizeType,\r\n              WrapMode.NONE\r\n            );\r\n            let tempLocal = this.currentFunction.getAndFreeTempLocal(returnType, false);\r\n            let tempLocalIndex = tempLocal.index;\r\n            return module.createBlock(null, [\r\n              this.makeCallDirect(setterInstance, [ // set and remember the target\r\n                module.createTeeLocal(tempLocalIndex, thisExpr),\r\n                valueWithCorrectType\r\n              ]),\r\n              this.makeCallDirect(getterInstance, [ // get from remembered target\r\n                module.createGetLocal(tempLocalIndex, nativeReturnType)\r\n              ])\r\n            ], nativeReturnType);\r\n          } else {\r\n            // note that this must be performed here because `resolved` is shared\r\n            return module.createBlock(null, [\r\n              this.makeCallDirect(setterInstance, [ valueWithCorrectType ]),\r\n              this.makeCallDirect(getterInstance)\r\n            ], nativeReturnType);\r\n          }\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range, target.internalName\r\n          );\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      case ElementKind.CLASS: {\r\n        let elementExpression = this.program.resolvedElementExpression;\r\n        if (elementExpression) {\r\n          let isUnchecked = this.currentFunction.flow.is(FlowFlags.UNCHECKED_CONTEXT);\r\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\r\n          if (!indexedGet) {\r\n            this.error(\r\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n              expression.range, target.internalName\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\r\n          if (!indexedSet) {\r\n            this.error(\r\n              DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\r\n              expression.range, target.internalName\r\n            );\r\n            this.currentType = tee ? indexedGet.signature.returnType : Type.void;\r\n            return module.createUnreachable();\r\n          }\r\n          let targetType = (<Class>target).type;\r\n          let thisExpression = assert(this.program.resolvedThisExpression);\r\n          let thisExpr = this.compileExpressionRetainType(\r\n            thisExpression,\r\n            this.options.usizeType,\r\n            WrapMode.NONE\r\n          );\r\n          let elementExpr = this.compileExpression(\r\n            elementExpression,\r\n            Type.i32,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.NONE\r\n          );\r\n          if (tee) {\r\n            let currentFunction = this.currentFunction;\r\n            let tempLocalTarget = currentFunction.getTempLocal(targetType, false);\r\n            let tempLocalElement = currentFunction.getAndFreeTempLocal(this.currentType, false);\r\n            let returnType = indexedGet.signature.returnType;\r\n            this.currentFunction.freeTempLocal(tempLocalTarget);\r\n            return module.createBlock(null, [\r\n              this.makeCallDirect(indexedSet, [\r\n                module.createTeeLocal(tempLocalTarget.index, thisExpr),\r\n                module.createTeeLocal(tempLocalElement.index, elementExpr),\r\n                valueWithCorrectType\r\n              ]),\r\n              this.makeCallDirect(indexedGet, [\r\n                module.createGetLocal(tempLocalTarget.index, tempLocalTarget.type.toNativeType()),\r\n                module.createGetLocal(tempLocalElement.index, tempLocalElement.type.toNativeType())\r\n              ])\r\n            ], returnType.toNativeType());\r\n          } else {\r\n            return this.makeCallDirect(indexedSet, [\r\n              thisExpr,\r\n              elementExpr,\r\n              valueWithCorrectType\r\n            ]);\r\n          }\r\n        }\r\n        // fall-through\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    return module.createUnreachable();\r\n  }\r\n\r\n  compileCallExpression(expression: CallExpression, contextualType: Type): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n    var target = this.program.resolveExpression(expression.expression, currentFunction); // reports\r\n    if (!target) return module.createUnreachable();\r\n\r\n    var signature: Signature | null;\r\n    var indexArg: ExpressionRef;\r\n    switch (target.kind) {\r\n\r\n      // direct call: concrete function\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        let prototype = <FunctionPrototype>target;\r\n        let typeArguments = expression.typeArguments;\r\n\r\n        // builtins handle present respectively omitted type arguments on their own\r\n        if (prototype.is(CommonFlags.AMBIENT | CommonFlags.BUILTIN)) {\r\n          return this.compileCallExpressionBuiltin(prototype, expression, contextualType);\r\n        }\r\n\r\n        let instance: Function | null = null;\r\n\r\n        // resolve generic call if type arguments have been provided\r\n        if (typeArguments) {\r\n          if (!prototype.is(CommonFlags.GENERIC)) {\r\n            this.error(\r\n              DiagnosticCode.Type_0_is_not_generic,\r\n              expression.expression.range, prototype.internalName\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          instance = prototype.resolveUsingTypeArguments( // reports\r\n            typeArguments,\r\n            this.currentFunction.flow.contextualTypeArguments,\r\n            expression\r\n          );\r\n\r\n        // infer generic call if type arguments have been omitted\r\n        } else if (prototype.is(CommonFlags.GENERIC)) {\r\n          let inferredTypes = new Map<string,Type | null>();\r\n          let typeParameters = assert(prototype.declaration.typeParameters);\r\n          let numTypeParameters = typeParameters.length;\r\n          for (let i = 0; i < numTypeParameters; ++i) {\r\n            inferredTypes.set(typeParameters[i].name.text, null);\r\n          }\r\n          // let numInferred = 0;\r\n          let parameterTypes = prototype.declaration.signature.parameters;\r\n          let numParameterTypes = parameterTypes.length;\r\n          let argumentExpressions = expression.arguments;\r\n          let numArguments = argumentExpressions.length;\r\n          let argumentExprs = new Array<ExpressionRef>(numArguments);\r\n          for (let i = 0; i < numParameterTypes; ++i) {\r\n            let typeNode = parameterTypes[i].type;\r\n            let name = typeNode.kind == NodeKind.TYPE ? (<TypeNode>typeNode).name.text : null;\r\n            let argumentExpression = i < numArguments\r\n              ? argumentExpressions[i]\r\n              : prototype.declaration.signature.parameters[i].initializer;\r\n            if (!argumentExpression) { // missing initializer -> too few arguments\r\n              this.error(\r\n                DiagnosticCode.Expected_0_arguments_but_got_1,\r\n                expression.range, numParameterTypes.toString(10), numArguments.toString(10)\r\n              );\r\n              return module.createUnreachable();\r\n            }\r\n            if (name !== null && inferredTypes.has(name)) {\r\n              let inferredType = inferredTypes.get(name);\r\n              if (inferredType) {\r\n                argumentExprs[i] = this.compileExpressionRetainType(argumentExpression, inferredType, WrapMode.NONE);\r\n                let commonType: Type | null;\r\n                if (!(commonType = Type.commonCompatible(inferredType, this.currentType, true))) {\r\n                  if (!(commonType = Type.commonCompatible(inferredType, this.currentType, false))) {\r\n                    this.error(\r\n                      DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n                      parameterTypes[i].type.range, this.currentType.toString(), inferredType.toString()\r\n                    );\r\n                    return module.createUnreachable();\r\n                  }\r\n                }\r\n                inferredType = commonType;\r\n              } else {\r\n                argumentExprs[i] = this.compileExpressionRetainType(argumentExpression, Type.i32, WrapMode.NONE);\r\n                inferredType = this.currentType;\r\n                // ++numInferred;\r\n              }\r\n              inferredTypes.set(name, inferredType);\r\n            } else {\r\n              let concreteType = this.program.resolveType(\r\n                parameterTypes[i].type,\r\n                this.currentFunction.flow.contextualTypeArguments,\r\n                true\r\n              );\r\n              if (!concreteType) return module.createUnreachable();\r\n              argumentExprs[i] = this.compileExpression(\r\n                argumentExpression,\r\n                concreteType,\r\n                ConversionKind.IMPLICIT,\r\n                WrapMode.NONE\r\n              );\r\n            }\r\n          }\r\n          let resolvedTypeArguments = new Array<Type>(numTypeParameters);\r\n          for (let i = 0; i < numTypeParameters; ++i) {\r\n            let inferredType = assert(inferredTypes.get(typeParameters[i].name.text)); // TODO\r\n            resolvedTypeArguments[i] = inferredType;\r\n          }\r\n          instance = prototype.resolve(\r\n            resolvedTypeArguments,\r\n            this.currentFunction.flow.contextualTypeArguments\r\n          );\r\n          if (!instance) return this.module.createUnreachable();\r\n          return this.makeCallDirect(instance, argumentExprs);\r\n          // TODO: this skips inlining because inlining requires compiling its temporary locals in\r\n          // the scope of the inlined flow. might need another mechanism to lock temp. locals early,\r\n          // so inlining can be performed in `makeCallDirect` instead?\r\n\r\n        // otherwise resolve the non-generic call as usual\r\n        } else {\r\n          instance = prototype.resolve(\r\n            null,\r\n            this.currentFunction.flow.contextualTypeArguments\r\n          );\r\n        }\r\n        if (!instance) return this.module.createUnreachable();\r\n\r\n        // compile 'this' expression if an instance method\r\n        let thisExpr: ExpressionRef = 0;\r\n        if (instance.is(CommonFlags.INSTANCE)) {\r\n          thisExpr = this.compileExpressionRetainType(\r\n            assert(this.program.resolvedThisExpression),\r\n            this.options.usizeType,\r\n            WrapMode.NONE\r\n          );\r\n        }\r\n\r\n        return this.compileCallDirect(\r\n          instance,\r\n          expression.arguments,\r\n          expression,\r\n          thisExpr,\r\n          instance.hasDecorator(DecoratorFlags.INLINE)\r\n        );\r\n      }\r\n\r\n      // indirect call: index argument with signature (non-generic, can't be inlined)\r\n      case ElementKind.LOCAL: {\r\n        if (signature = (<Local>target).type.signatureReference) {\r\n          indexArg = module.createGetLocal((<Local>target).index, NativeType.I32);\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, (<Local>target).type.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      case ElementKind.GLOBAL: {\r\n        if (signature = (<Global>target).type.signatureReference) {\r\n          indexArg = module.createGetGlobal((<Global>target).internalName, (<Global>target).type.toNativeType());\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, (<Global>target).type.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      case ElementKind.FIELD: {\r\n        let type = (<Field>target).type;\r\n        if (signature = type.signatureReference) {\r\n          let thisExpression = assert(this.program.resolvedThisExpression);\r\n          let thisExpr = this.compileExpressionRetainType(\r\n            thisExpression,\r\n            this.options.usizeType,\r\n            WrapMode.NONE\r\n          );\r\n          indexArg = module.createLoad(\r\n            4,\r\n            false,\r\n            thisExpr,\r\n            NativeType.I32,\r\n            (<Field>target).memoryOffset\r\n          );\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, (<Field>target).type.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      case ElementKind.FUNCTION_TARGET: {\r\n        signature = (<FunctionTarget>target).signature;\r\n        indexArg = this.compileExpression(\r\n          expression.expression,\r\n          (<FunctionTarget>target).type,\r\n          ConversionKind.IMPLICIT,\r\n          WrapMode.NONE\r\n        );\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: // TODO\r\n\r\n      // not supported\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n    return this.compileCallIndirect(\r\n      signature,\r\n      indexArg,\r\n      expression.arguments,\r\n      expression\r\n    );\r\n  }\r\n\r\n  private compileCallExpressionBuiltin(\r\n    prototype: FunctionPrototype,\r\n    expression: CallExpression,\r\n    contextualType: Type\r\n  ): ExpressionRef {\r\n    var expr = compileBuiltinCall( // reports\r\n      this,\r\n      prototype,\r\n      prototype.resolveBuiltinTypeArguments(\r\n        expression.typeArguments,\r\n        this.currentFunction.flow.contextualTypeArguments\r\n      ),\r\n      expression.arguments,\r\n      contextualType,\r\n      expression\r\n    );\r\n    if (!expr) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n      return this.module.createUnreachable();\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /**\r\n   * Checks that a call with the given number as arguments can be performed according to the\r\n   * specified signature.\r\n   */\r\n  checkCallSignature(\r\n    signature: Signature,\r\n    numArguments: i32,\r\n    hasThis: bool,\r\n    reportNode: Node\r\n  ): bool {\r\n\r\n    // cannot call an instance method without a `this` argument (TODO: `.call`?)\r\n    var thisType = signature.thisType;\r\n    if (hasThis != (thisType != null)) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported, // TODO: better message?\r\n        reportNode.range\r\n      );\r\n      return false;\r\n    }\r\n\r\n    // not yet implemented (TODO: maybe some sort of an unmanaged/lightweight array?)\r\n    var hasRest = signature.hasRest;\r\n    if (hasRest) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        reportNode.range\r\n      );\r\n      return false;\r\n    }\r\n\r\n    var minimum = signature.requiredParameters;\r\n    var maximum = signature.parameterTypes.length;\r\n\r\n    // must at least be called with required arguments\r\n    if (numArguments < minimum) {\r\n      this.error(\r\n        minimum < maximum\r\n          ? DiagnosticCode.Expected_at_least_0_arguments_but_got_1\r\n          : DiagnosticCode.Expected_0_arguments_but_got_1,\r\n        reportNode.range, minimum.toString(), numArguments.toString()\r\n      );\r\n      return false;\r\n    }\r\n\r\n    // must not be called with more than the maximum arguments\r\n    if (numArguments > maximum && !hasRest) {\r\n      this.error(\r\n        DiagnosticCode.Expected_0_arguments_but_got_1,\r\n        reportNode.range, maximum.toString(), numArguments.toString()\r\n      );\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /** Compiles a direct call to a concrete function. */\r\n  compileCallDirect(\r\n    instance: Function,\r\n    argumentExpressions: Expression[],\r\n    reportNode: Node,\r\n    thisArg: ExpressionRef = 0,\r\n    inline: bool = false\r\n  ): ExpressionRef {\r\n    var numArguments = argumentExpressions.length;\r\n    var signature = instance.signature;\r\n\r\n    if (!this.checkCallSignature( // reports\r\n      signature,\r\n      numArguments,\r\n      thisArg != 0,\r\n      reportNode\r\n    )) {\r\n      return this.module.createUnreachable();\r\n    }\r\n\r\n    // Inline if explicitly requested\r\n    if (inline) {\r\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\r\n      return this.compileCallInlineUnchecked(instance, argumentExpressions, reportNode, thisArg);\r\n    }\r\n\r\n    // Otherwise compile to just a call\r\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\r\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\r\n    var index = 0;\r\n    if (thisArg) {\r\n      operands[0] = thisArg;\r\n      index = 1;\r\n    }\r\n    var parameterTypes = signature.parameterTypes;\r\n    for (let i = 0; i < numArguments; ++i, ++index) {\r\n      operands[index] = this.compileExpression(\r\n        argumentExpressions[i],\r\n        parameterTypes[i],\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    assert(index == numArgumentsInclThis);\r\n    return this.makeCallDirect(instance, operands);\r\n  }\r\n\r\n  // Depends on being pre-checked in compileCallDirect\r\n  private compileCallInlineUnchecked(\r\n    instance: Function,\r\n    argumentExpressions: Expression[],\r\n    reportNode: Node,\r\n    thisArg: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var numArguments = argumentExpressions.length;\r\n    var signature = instance.signature;\r\n    var currentFunction = this.currentFunction;\r\n    var module = this.module;\r\n    var declaration = instance.prototype.declaration;\r\n\r\n    // Create an empty child flow with its own scope and mark it for inlining\r\n    var previousFlow = currentFunction.flow;\r\n    var returnLabel = instance.internalName + \"|inlined.\" + (instance.nextInlineId++).toString(10);\r\n    var returnType = instance.signature.returnType;\r\n    var flow = Flow.create(currentFunction);\r\n    flow.set(FlowFlags.INLINE_CONTEXT);\r\n    flow.returnLabel = returnLabel;\r\n    flow.returnType = returnType;\r\n    flow.contextualTypeArguments = instance.contextualTypeArguments;\r\n\r\n    // Convert provided call arguments to temporary locals. It is important that these are compiled\r\n    // here, with their respective locals being blocked. There is no 'makeCallInline'.\r\n    var body = [];\r\n    if (thisArg) {\r\n      let parent = assert(instance.parent);\r\n      assert(parent.kind == ElementKind.CLASS);\r\n      if (getExpressionId(thisArg) == ExpressionId.GetLocal) {\r\n        flow.addScopedLocalAlias(\r\n          getGetLocalIndex(thisArg),\r\n          (<Class>parent).type,\r\n          \"this\"\r\n        );\r\n      } else {\r\n        let thisLocal = flow.addScopedLocal((<Class>parent).type, \"this\", false);\r\n        body.push(\r\n          module.createSetLocal(thisLocal.index, thisArg)\r\n        );\r\n      }\r\n    }\r\n    var parameterTypes = signature.parameterTypes;\r\n    for (let i = 0; i < numArguments; ++i) {\r\n      let paramExpr = this.compileExpression(\r\n        argumentExpressions[i],\r\n        parameterTypes[i],\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      if (getExpressionId(paramExpr) == ExpressionId.GetLocal) {\r\n        flow.addScopedLocalAlias(\r\n          getGetLocalIndex(paramExpr),\r\n          parameterTypes[i],\r\n          signature.getParameterName(i)\r\n        );\r\n        // inherits wrap status\r\n      } else {\r\n        let argumentLocal = flow.addScopedLocal(\r\n          parameterTypes[i],\r\n          signature.getParameterName(i),\r\n          !flow.canOverflow(paramExpr, parameterTypes[i])\r\n        );\r\n        body.push(\r\n          module.createSetLocal(argumentLocal.index, paramExpr)\r\n        );\r\n      }\r\n    }\r\n\r\n    // Compile optional parameter initializers in the scope of the inlined flow\r\n    currentFunction.flow = flow;\r\n    var numParameters = signature.parameterTypes.length;\r\n    for (let i = numArguments; i < numParameters; ++i) {\r\n      let initExpr = this.compileExpression(\r\n        assert(declaration.signature.parameters[i].initializer),\r\n        parameterTypes[i],\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.WRAP\r\n      );\r\n      let argumentLocal = flow.addScopedLocal(\r\n        parameterTypes[i],\r\n        signature.getParameterName(i),\r\n        !flow.canOverflow(initExpr, parameterTypes[i])\r\n      );\r\n      body.push(\r\n        module.createSetLocal(argumentLocal.index, initExpr)\r\n      );\r\n    }\r\n\r\n    // Compile the called function's body in the scope of the inlined flow\r\n    var bodyStatement = assert(declaration.body);\r\n    if (bodyStatement.kind == NodeKind.BLOCK) {\r\n      let statements = (<BlockStatement>bodyStatement).statements;\r\n      for (let i = 0, k = statements.length; i < k; ++i) {\r\n        let stmt = this.compileStatement(statements[i]);\r\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\r\n          body.push(stmt);\r\n          if (flow.isAny(FlowFlags.TERMINATED)) break;\r\n        }\r\n      }\r\n    } else {\r\n      body.push(this.compileStatement(bodyStatement));\r\n    }\r\n\r\n    // Free any new scoped locals and reset to the original flow\r\n    var scopedLocals = flow.scopedLocals;\r\n    if (scopedLocals) {\r\n      for (let scopedLocal of scopedLocals.values()) {\r\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\r\n          currentFunction.freeTempLocal(scopedLocal);\r\n        }\r\n      }\r\n      flow.scopedLocals = null;\r\n    }\r\n    flow.finalize();\r\n    this.currentFunction.flow = previousFlow;\r\n    this.currentType = returnType;\r\n\r\n    // Check that all branches are terminated\r\n    if (returnType != Type.void && !flow.isAny(FlowFlags.TERMINATED)) {\r\n      this.error(\r\n        DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\r\n        declaration.signature.returnType.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    return module.createBlock(returnLabel, body, returnType.toNativeType());\r\n  }\r\n\r\n  /** Gets the trampoline for the specified function. */\r\n  ensureTrampoline(original: Function): Function {\r\n    // A trampoline is a function that takes a fixed amount of operands with some of them possibly\r\n    // being zeroed. It takes one additional argument denoting the number of actual operands\r\n    // provided to the call, and takes appropriate steps to initialize zeroed operands to their\r\n    // default values using the optional parameter initializers of the original function. Doing so\r\n    // allows calls to functions with optional parameters to circumvent the trampoline when all\r\n    // parameters are provided as a fast route, respectively setting up omitted operands in a proper\r\n    // context otherwise.\r\n    var trampoline = original.trampoline;\r\n    if (trampoline) return trampoline;\r\n\r\n    var originalSignature = original.signature;\r\n    var originalName = original.internalName;\r\n    var originalParameterTypes = originalSignature.parameterTypes;\r\n    var originalParameterDeclarations = original.prototype.declaration.signature.parameters;\r\n    var commonReturnType = originalSignature.returnType;\r\n    var commonThisType = originalSignature.thisType;\r\n    var isInstance = original.is(CommonFlags.INSTANCE);\r\n\r\n    // arguments excl. `this`, operands incl. `this`\r\n    var minArguments = originalSignature.requiredParameters;\r\n    var minOperands = minArguments;\r\n    var maxArguments = originalParameterTypes.length;\r\n    var maxOperands = maxArguments;\r\n    if (isInstance) {\r\n      ++minOperands;\r\n      ++maxOperands;\r\n    }\r\n    var numOptional = assert(maxOperands - minOperands);\r\n\r\n    var forwardedOperands = new Array<ExpressionRef>(minOperands);\r\n    var operandIndex = 0;\r\n\r\n    // forward `this` if applicable\r\n    var module = this.module;\r\n    if (isInstance) {\r\n      forwardedOperands[0] = module.createGetLocal(0, this.options.nativeSizeType);\r\n      operandIndex = 1;\r\n    }\r\n\r\n    // forward required arguments\r\n    for (let i = 0; i < minArguments; ++i, ++operandIndex) {\r\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, originalParameterTypes[i].toNativeType());\r\n    }\r\n    assert(operandIndex == minOperands);\r\n\r\n    // create the trampoline element\r\n    var trampolineSignature = new Signature(originalParameterTypes, commonReturnType, commonThisType);\r\n    var trampolineName = originalName + \"|trampoline\";\r\n    trampolineSignature.requiredParameters = maxArguments;\r\n    trampoline = new Function(\r\n      original.prototype,\r\n      trampolineName,\r\n      trampolineSignature,\r\n      original.parent,\r\n      original.contextualTypeArguments\r\n    );\r\n    trampoline.set(original.flags | CommonFlags.TRAMPOLINE | CommonFlags.COMPILED);\r\n    original.trampoline = trampoline;\r\n\r\n    // compile initializers of omitted arguments in scope of the trampoline function\r\n    // this is necessary because initializers might need additional locals and a proper this context\r\n    var previousFunction = this.currentFunction;\r\n    this.currentFunction = trampoline;\r\n\r\n    // create a br_table switching over the number of optional parameters provided\r\n    var numNames = numOptional + 1; // incl. outer block\r\n    var names = new Array<string>(numNames);\r\n    var ofN = \"of\" + numOptional.toString(10);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      let label = i.toString(10) + ofN;\r\n      names[i] = label;\r\n    }\r\n    var body = module.createBlock(names[0], [\r\n      module.createBlock(\"oob\", [\r\n        module.createSwitch(names, \"oob\",\r\n          // condition is number of provided optional arguments, so subtract required arguments\r\n          minArguments\r\n            ? module.createBinary(\r\n                BinaryOp.SubI32,\r\n                module.createGetGlobal(\"~argc\", NativeType.I32),\r\n                module.createI32(minArguments)\r\n              )\r\n            : module.createGetGlobal(\"~argc\", NativeType.I32)\r\n        )\r\n      ]),\r\n      module.createUnreachable()\r\n    ]);\r\n    for (let i = 0; i < numOptional; ++i, ++operandIndex) {\r\n      let type = originalParameterTypes[minArguments + i];\r\n      let declaration = originalParameterDeclarations[minArguments + i];\r\n      let initializer = declaration.initializer;\r\n      let initExpr: ExpressionRef;\r\n      if (initializer) {\r\n        initExpr = module.createSetLocal(operandIndex,\r\n          this.compileExpression(\r\n            initializer,\r\n            type,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP\r\n          )\r\n        );\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Optional_parameter_must_have_an_initializer,\r\n          declaration.range\r\n        );\r\n        initExpr = module.createUnreachable();\r\n      }\r\n      body = module.createBlock(names[i + 1], [\r\n        body,\r\n        initExpr,\r\n      ]);\r\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, type.toNativeType());\r\n    }\r\n    this.currentFunction = previousFunction;\r\n    assert(operandIndex == maxOperands);\r\n\r\n    var funcRef = module.addFunction(\r\n      trampolineName,\r\n      this.ensureFunctionType(\r\n        trampolineSignature.parameterTypes,\r\n        trampolineSignature.returnType,\r\n        trampolineSignature.thisType\r\n      ),\r\n      typesToNativeTypes(trampoline.additionalLocals),\r\n      module.createBlock(null, [\r\n        body,\r\n        module.createCall(\r\n          originalName,\r\n          forwardedOperands,\r\n          commonReturnType.toNativeType()\r\n        )\r\n      ], commonReturnType.toNativeType())\r\n    );\r\n    trampoline.finalize(module, funcRef);\r\n    return trampoline;\r\n  }\r\n\r\n  /** Makes sure that the argument count helper global is present and returns its name. */\r\n  private ensureArgcVar(): string {\r\n    var internalName = \"~argc\";\r\n    if (!this.argcVar) {\r\n      let module = this.module;\r\n      this.argcVar = module.addGlobal(\r\n        internalName,\r\n        NativeType.I32,\r\n        true,\r\n        module.createI32(0)\r\n      );\r\n    }\r\n    return internalName;\r\n  }\r\n\r\n  /** Makes sure that the argument count helper setter is present and returns its name. */\r\n  private ensureArgcSet(): string {\r\n    var internalName = \"~setargc\";\r\n    if (!this.argcSet) {\r\n      let module = this.module;\r\n      this.argcSet = module.addFunction(internalName,\r\n        this.ensureFunctionType([ Type.u32 ], Type.void),\r\n        null,\r\n        module.createSetGlobal(this.ensureArgcVar(),\r\n          module.createGetLocal(0, NativeType.I32)\r\n        )\r\n      );\r\n      module.addFunctionExport(internalName, \"_setargc\");\r\n    }\r\n    return internalName;\r\n  }\r\n\r\n  /** Creates a direct call to the specified function. */\r\n  makeCallDirect(\r\n    instance: Function,\r\n    operands: ExpressionRef[] | null = null\r\n  ): ExpressionRef {\r\n    var numOperands = operands ? operands.length : 0;\r\n    var numArguments = numOperands;\r\n    var minArguments = instance.signature.requiredParameters;\r\n    var minOperands = minArguments;\r\n    var maxArguments = instance.signature.parameterTypes.length;\r\n    var maxOperands = maxArguments;\r\n    if (instance.is(CommonFlags.INSTANCE)) {\r\n      ++minOperands;\r\n      ++maxOperands;\r\n      --numArguments;\r\n    }\r\n    assert(numOperands >= minOperands);\r\n\r\n    var module = this.module;\r\n    if (!this.compileFunction(instance)) return module.createUnreachable();\r\n    var returnType = instance.signature.returnType;\r\n    var isCallImport = instance.is(CommonFlags.MODULE_IMPORT);\r\n\r\n    // fill up omitted arguments with their initializers, if constant, otherwise with zeroes.\r\n    if (numOperands < maxOperands) {\r\n      if (!operands) {\r\n        operands = new Array(maxOperands);\r\n        operands.length = 0;\r\n      }\r\n      let parameterTypes = instance.signature.parameterTypes;\r\n      let parameterNodes = instance.prototype.declaration.signature.parameters;\r\n      let allOptionalsAreConstant = true;\r\n      for (let i = numArguments; i < maxArguments; ++i) {\r\n        let initializer = parameterNodes[i].initializer;\r\n        if (!(initializer && initializer.kind == NodeKind.LITERAL)) {\r\n          // TODO: other kinds might be constant as well\r\n          // NOTE: if the initializer is missing this is reported in ensureTrampoline below\r\n          allOptionalsAreConstant = false;\r\n          break;\r\n        }\r\n      }\r\n      if (allOptionalsAreConstant) { // inline into the call\r\n        for (let i = numArguments; i < maxArguments; ++i) {\r\n          operands.push(\r\n            this.compileExpression(\r\n              <Expression>parameterNodes[i].initializer,\r\n              parameterTypes[i],\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE\r\n            )\r\n          );\r\n        }\r\n      } else { // otherwise fill up with zeroes and call the trampoline\r\n        for (let i = numArguments; i < maxArguments; ++i) {\r\n          operands.push(parameterTypes[i].toNativeZero(module));\r\n        }\r\n        if (!isCallImport) {\r\n          let original = instance;\r\n          instance = this.ensureTrampoline(instance);\r\n          if (!this.compileFunction(instance)) return module.createUnreachable();\r\n          instance.flow.flags = original.flow.flags;\r\n          this.program.instancesLookup.set(instance.internalName, instance); // so canOverflow can find it\r\n          let nativeReturnType = returnType.toNativeType();\r\n          this.currentType = returnType;\r\n          return module.createBlock(null, [\r\n            module.createSetGlobal(this.ensureArgcVar(), module.createI32(numArguments)),\r\n            module.createCall(instance.internalName, operands, nativeReturnType)\r\n          ], nativeReturnType);\r\n        }\r\n      }\r\n    }\r\n\r\n    // otherwise just call through\r\n    this.currentType = returnType;\r\n    if (isCallImport) return module.createCallImport(instance.internalName, operands, returnType.toNativeType());\r\n    var ret = module.createCall(instance.internalName, operands, returnType.toNativeType());\r\n    return ret;\r\n  }\r\n\r\n  /** Compiles an indirect call using an index argument and a signature. */\r\n  compileCallIndirect(\r\n    signature: Signature,\r\n    indexArg: ExpressionRef,\r\n    argumentExpressions: Expression[],\r\n    reportNode: Node,\r\n    thisArg: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var numArguments = argumentExpressions.length;\r\n\r\n    if (!this.checkCallSignature( // reports\r\n      signature,\r\n      numArguments,\r\n      thisArg != 0,\r\n      reportNode\r\n    )) {\r\n      return this.module.createUnreachable();\r\n    }\r\n\r\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\r\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\r\n    var index = 0;\r\n    if (thisArg) {\r\n      operands[0] = thisArg;\r\n      index = 1;\r\n    }\r\n    var parameterTypes = signature.parameterTypes;\r\n    for (let i = 0; i < numArguments; ++i, ++index) {\r\n      operands[index] = this.compileExpression(\r\n        argumentExpressions[i],\r\n        parameterTypes[i],\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    assert(index == numArgumentsInclThis);\r\n    return this.makeCallIndirect(signature, indexArg, operands);\r\n  }\r\n\r\n  /** Creates an indirect call to the function at `indexArg` in the function table. */\r\n  makeCallIndirect(\r\n    signature: Signature,\r\n    indexArg: ExpressionRef,\r\n    operands: ExpressionRef[] | null = null\r\n  ): ExpressionRef {\r\n    var numOperands = operands ? operands.length : 0;\r\n    var numArguments = numOperands;\r\n    var minArguments = signature.requiredParameters;\r\n    var minOperands = minArguments;\r\n    var maxArguments = signature.parameterTypes.length;\r\n    var maxOperands = maxArguments;\r\n    if (signature.thisType) {\r\n      ++minOperands;\r\n      ++maxOperands;\r\n      --numArguments;\r\n    }\r\n    assert(numOperands >= minOperands);\r\n\r\n    this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\r\n    var module = this.module;\r\n\r\n    // fill up omitted arguments with zeroes\r\n    if (numOperands < maxOperands) {\r\n      if (!operands) {\r\n        operands = new Array(maxOperands);\r\n        operands.length = 0;\r\n      }\r\n      let parameterTypes = signature.parameterTypes;\r\n      for (let i = numArguments; i < maxArguments; ++i) {\r\n        operands.push(parameterTypes[i].toNativeZero(module));\r\n      }\r\n    }\r\n\r\n    var returnType = signature.returnType;\r\n    this.currentType = returnType;\r\n    return module.createBlock(null, [\r\n      module.createSetGlobal(this.ensureArgcVar(), // might still be calling a trampoline\r\n        module.createI32(numArguments)\r\n      ),\r\n      module.createCallIndirect(indexArg, operands, signature.toSignatureString())\r\n    ], returnType.toNativeType()); // not necessarily wrapped\r\n  }\r\n\r\n  compileCommaExpression(expression: CommaExpression, contextualType: Type): ExpressionRef {\r\n    var expressions = expression.expressions;\r\n    var numExpressions = expressions.length;\r\n    var exprs = new Array<ExpressionRef>(numExpressions--);\r\n    for (let i = 0; i < numExpressions; ++i) {\r\n      exprs[i] = this.compileExpression(\r\n        expressions[i],\r\n        Type.void, // drop all\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    exprs[numExpressions] = this.compileExpression(\r\n      expressions[numExpressions],\r\n      contextualType, // except last\r\n      ConversionKind.IMPLICIT,\r\n      WrapMode.NONE\r\n    );\r\n    return this.module.createBlock(null, exprs, this.currentType.toNativeType());\r\n  }\r\n\r\n  compileElementAccessExpression(expression: ElementAccessExpression, contextualType: Type): ExpressionRef {\r\n    var target = this.program.resolveElementAccess(expression, this.currentFunction); // reports\r\n    if (!target) return this.module.createUnreachable();\r\n    switch (target.kind) {\r\n      case ElementKind.CLASS: {\r\n        let isUnchecked = this.currentFunction.flow.is(FlowFlags.UNCHECKED_CONTEXT);\r\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\r\n        if (!indexedGet) {\r\n          this.error(\r\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n            expression.expression.range, (<Class>target).internalName\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n        let thisArg = this.compileExpression(\r\n          expression.expression,\r\n          (<Class>target).type,\r\n          ConversionKind.IMPLICIT,\r\n          WrapMode.NONE\r\n        );\r\n        return this.compileCallDirect(indexedGet, [\r\n          expression.elementExpression\r\n        ], expression, thisArg);\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    return this.module.createUnreachable();\r\n  }\r\n\r\n  compileFunctionExpression(expression: FunctionExpression, contextualType: Type): ExpressionRef {\r\n    var declaration = expression.declaration;\r\n    var name = declaration.name;\r\n    var simpleName = (name.text.length\r\n      ? name.text\r\n      : \"anonymous\") + \"|\" + this.functionTable.length.toString(10);\r\n    var currentFunction = this.currentFunction;\r\n    var prototype = new FunctionPrototype(\r\n      this.program,\r\n      simpleName,\r\n      currentFunction.internalName + INNER_DELIMITER + simpleName,\r\n      declaration,\r\n      null,\r\n      DecoratorFlags.NONE\r\n    );\r\n    var flow = currentFunction.flow;\r\n    var instance = this.compileFunctionUsingTypeArguments(\r\n      prototype,\r\n      [],\r\n      flow.contextualTypeArguments,\r\n      flow,\r\n      declaration\r\n    );\r\n    if (!instance) return this.module.createUnreachable();\r\n    this.currentType = instance.signature.type; // TODO: get cached type?\r\n    // NOTE that, in order to make this work in every case, the function must be represented by a\r\n    // value, so we add it and rely on the optimizer to figure out where it can be called directly.\r\n    var index = this.ensureFunctionTableEntry(instance); // reports\r\n    return index < 0\r\n      ? this.module.createUnreachable()\r\n      : this.module.createI32(index);\r\n  }\r\n\r\n  /**\r\n   * Compiles an identifier in the specified context.\r\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\r\n   *  precomputes them according to context.\r\n   */\r\n  compileIdentifierExpression(\r\n    expression: IdentifierExpression,\r\n    contextualType: Type,\r\n    retainConstantType: bool\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n\r\n    // check special keywords first\r\n    switch (expression.kind) {\r\n      case NodeKind.NULL: {\r\n        let options = this.options;\r\n        if (!contextualType.classReference) {\r\n          this.currentType = options.usizeType;\r\n        }\r\n        return options.isWasm64\r\n          ? module.createI64(0)\r\n          : module.createI32(0);\r\n      }\r\n      case NodeKind.TRUE: {\r\n        this.currentType = Type.bool;\r\n        return module.createI32(1);\r\n      }\r\n      case NodeKind.FALSE: {\r\n        this.currentType = Type.bool;\r\n        return module.createI32(0);\r\n      }\r\n      case NodeKind.THIS: {\r\n        let flow = currentFunction.flow;\r\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\r\n          let scopedThis = flow.getScopedLocal(\"this\");\r\n          if (scopedThis) {\r\n            this.currentType = scopedThis.type;\r\n            return module.createGetLocal(scopedThis.index, scopedThis.type.toNativeType());\r\n          }\r\n        }\r\n        if (currentFunction.is(CommonFlags.INSTANCE)) {\r\n          let parent = assert(currentFunction.parent);\r\n          assert(parent.kind == ElementKind.CLASS);\r\n          let thisType = (<Class>parent).type;\r\n          if (currentFunction.is(CommonFlags.CONSTRUCTOR)) {\r\n            if (!flow.is(FlowFlags.ALLOCATES)) {\r\n              flow.set(FlowFlags.ALLOCATES);\r\n              // must be conditional because `this` could have been provided by a derived class\r\n              this.currentType = thisType;\r\n              return module.createTeeLocal(0,\r\n                this.makeConditionalAllocate(<Class>parent, expression)\r\n              );\r\n            }\r\n          }\r\n          this.currentType = thisType;\r\n          return module.createGetLocal(0, thisType.toNativeType());\r\n        }\r\n        this.error(\r\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\r\n          expression.range\r\n        );\r\n        this.currentType = this.options.usizeType;\r\n        return module.createUnreachable();\r\n      }\r\n      case NodeKind.SUPER: {\r\n        let flow = currentFunction.flow;\r\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\r\n          let scopedThis = flow.getScopedLocal(\"this\");\r\n          if (scopedThis) {\r\n            let scopedThisClass = assert(scopedThis.type.classReference);\r\n            let base = scopedThisClass.base;\r\n            if (base) {\r\n              this.currentType = base.type;\r\n              return module.createGetLocal(scopedThis.index, base.type.toNativeType());\r\n            }\r\n          }\r\n        }\r\n        if (currentFunction.is(CommonFlags.INSTANCE)) {\r\n          let parent = assert(currentFunction.parent);\r\n          assert(parent.kind == ElementKind.CLASS);\r\n          let base = (<Class>parent).base;\r\n          if (base) {\r\n            let superType = base.type;\r\n            this.currentType = superType;\r\n            return module.createGetLocal(0, superType.toNativeType());\r\n          }\r\n        }\r\n        this.error(\r\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\r\n          expression.range\r\n        );\r\n        this.currentType = this.options.usizeType;\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    // otherwise resolve\r\n    var target = this.program.resolveIdentifier( // reports\r\n      expression,\r\n      currentFunction,\r\n      this.currentEnum\r\n    );\r\n    if (!target) return module.createUnreachable();\r\n\r\n    switch (target.kind) {\r\n      case ElementKind.LOCAL: {\r\n        if ((<Local>target).is(CommonFlags.INLINED)) {\r\n          return this.compileInlineConstant(<Local>target, contextualType, retainConstantType);\r\n        }\r\n        let localType = (<Local>target).type;\r\n        let localIndex = (<Local>target).index;\r\n        assert(localIndex >= 0);\r\n        this.currentType = localType;\r\n        return this.module.createGetLocal(localIndex, localType.toNativeType());\r\n      }\r\n      case ElementKind.GLOBAL: {\r\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\r\n          return this.module.createUnreachable();\r\n        }\r\n        let globalType = (<Global>target).type;\r\n        assert(globalType != Type.void);\r\n        if ((<Global>target).is(CommonFlags.INLINED)) {\r\n          return this.compileInlineConstant(<Global>target, contextualType, retainConstantType);\r\n        }\r\n        this.currentType = globalType;\r\n        return this.module.createGetGlobal((<Global>target).internalName, globalType.toNativeType());\r\n      }\r\n      case ElementKind.ENUMVALUE: { // here: if referenced from within the same enum\r\n        if (!target.is(CommonFlags.COMPILED)) {\r\n          this.error(\r\n            DiagnosticCode.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums,\r\n            expression.range\r\n          );\r\n          this.currentType = Type.i32;\r\n          return this.module.createUnreachable();\r\n        }\r\n        this.currentType = Type.i32;\r\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\r\n          return this.module.createI32((<EnumValue>target).constantValue);\r\n        }\r\n        return this.module.createGetGlobal((<EnumValue>target).internalName, NativeType.I32);\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        let instance = (<FunctionPrototype>target).resolve(\r\n          null,\r\n          currentFunction.flow.contextualTypeArguments\r\n        );\r\n        if (!(instance && this.compileFunction(instance))) return module.createUnreachable();\r\n        let index = this.ensureFunctionTableEntry(instance);\r\n        this.currentType = instance.signature.type;\r\n        return this.module.createI32(index);\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    return this.module.createUnreachable();\r\n  }\r\n\r\n  compileLiteralExpression(\r\n    expression: LiteralExpression,\r\n    contextualType: Type,\r\n    implicitNegate: bool = false\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    switch (expression.literalKind) {\r\n      case LiteralKind.ARRAY: {\r\n        assert(!implicitNegate);\r\n        let classType = contextualType.classReference;\r\n        if (\r\n          classType &&\r\n          classType.prototype == this.program.arrayPrototype\r\n        ) {\r\n          return this.compileArrayLiteral(\r\n            assert(classType.typeArguments)[0],\r\n            (<ArrayLiteralExpression>expression).elementExpressions,\r\n            expression\r\n          );\r\n        }\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      case LiteralKind.FLOAT: {\r\n        let floatValue = (<FloatLiteralExpression>expression).value;\r\n        if (implicitNegate) {\r\n          floatValue = -floatValue;\r\n        }\r\n        if (contextualType == Type.f32) {\r\n          return module.createF32(<f32>floatValue);\r\n        }\r\n        this.currentType = Type.f64;\r\n        return module.createF64(floatValue);\r\n      }\r\n      case LiteralKind.INTEGER: {\r\n        let intValue = (<IntegerLiteralExpression>expression).value;\r\n        if (implicitNegate) {\r\n          intValue = i64_sub(\r\n            i64_new(0),\r\n            intValue\r\n          );\r\n        }\r\n        switch (contextualType.kind) {\r\n\r\n          // compile to contextualType if matching\r\n\r\n          case TypeKind.I8: {\r\n            if (i64_is_i8(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.U8: {\r\n            if (i64_is_u8(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.I16: {\r\n            if (i64_is_i16(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.U16: {\r\n            if (i64_is_u16(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            if (i64_is_i32(intValue) || i64_is_u32(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.BOOL: {\r\n            if (i64_is_bool(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            if (!this.options.isWasm64) {\r\n              if (i64_is_i32(intValue) || i64_is_u32(intValue)) return module.createI32(i64_low(intValue));\r\n              break;\r\n            }\r\n            return module.createI64(i64_low(intValue), i64_high(intValue));\r\n          }\r\n          case TypeKind.USIZE: {\r\n            if (!this.options.isWasm64) {\r\n              if (i64_is_i32(intValue) || i64_is_u32(intValue)) return module.createI32(i64_low(intValue));\r\n              break;\r\n            }\r\n            return module.createI64(i64_low(intValue), i64_high(intValue));\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            return module.createI64(i64_low(intValue), i64_high(intValue));\r\n          }\r\n          case TypeKind.F32: {\r\n            if (i64_is_f32(intValue)) return module.createF32(i64_to_f32(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            if (i64_is_f64(intValue)) return module.createF64(i64_to_f64(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            break; // compiles to best fitting type below, being dropped\r\n          }\r\n          default: {\r\n            assert(false);\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n\r\n        // otherwise compile to best fitting native type\r\n\r\n        if (i64_is_i32(intValue)) {\r\n          this.currentType = Type.i32;\r\n          return module.createI32(i64_low(intValue));\r\n        } else {\r\n          this.currentType = Type.i64;\r\n          return module.createI64(i64_low(intValue), i64_high(intValue));\r\n        }\r\n      }\r\n      case LiteralKind.STRING: {\r\n        assert(!implicitNegate);\r\n        return this.compileStaticString((<StringLiteralExpression>expression).value);\r\n      }\r\n      // case LiteralKind.OBJECT:\r\n      // case LiteralKind.REGEXP:\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    this.currentType = contextualType;\r\n    return module.createUnreachable();\r\n  }\r\n\r\n  compileStaticString(stringValue: string): ExpressionRef {\r\n    var module = this.module;\r\n    var options = this.options;\r\n    var stringSegments = this.stringSegments;\r\n\r\n    var stringSegment: MemorySegment | null = stringSegments.get(stringValue);\r\n    if (!stringSegment) {\r\n      let stringLength = stringValue.length;\r\n      let stringBuffer = new Uint8Array(4 + stringLength * 2);\r\n      stringBuffer[0] =  stringLength         & 0xff;\r\n      stringBuffer[1] = (stringLength >>>  8) & 0xff;\r\n      stringBuffer[2] = (stringLength >>> 16) & 0xff;\r\n      stringBuffer[3] = (stringLength >>> 24) & 0xff;\r\n      for (let i = 0; i < stringLength; ++i) {\r\n        stringBuffer[4 + i * 2] =  stringValue.charCodeAt(i)        & 0xff;\r\n        stringBuffer[5 + i * 2] = (stringValue.charCodeAt(i) >>> 8) & 0xff;\r\n      }\r\n      stringSegment = this.addMemorySegment(stringBuffer, options.usizeType.byteSize);\r\n      stringSegments.set(stringValue, stringSegment);\r\n    }\r\n    var stringOffset = stringSegment.offset;\r\n    var stringType = this.program.typesLookup.get(\"string\");\r\n    this.currentType = stringType ? stringType : options.usizeType;\r\n    if (options.isWasm64) {\r\n      return module.createI64(i64_low(stringOffset), i64_high(stringOffset));\r\n    }\r\n    assert(i64_is_i32(stringOffset));\r\n    return module.createI32(i64_low(stringOffset));\r\n  }\r\n\r\n  compileArrayLiteral(elementType: Type, expressions: (Expression | null)[], reportNode: Node): ExpressionRef {\r\n    var isStatic = true;\r\n    var module = this.module;\r\n\r\n    // obtain the array type\r\n    var arrayPrototype = assert(this.program.arrayPrototype);\r\n    if (!arrayPrototype || arrayPrototype.kind != ElementKind.CLASS_PROTOTYPE) return module.createUnreachable();\r\n    var arrayInstance = (<ClassPrototype>arrayPrototype).resolve([ elementType ]);\r\n    if (!arrayInstance) return module.createUnreachable();\r\n    var arrayType = arrayInstance.type;\r\n\r\n    var elementCount = expressions.length;\r\n    if (elementCount) { // non-empty static or dynamic\r\n      let nativeElementType = elementType.toNativeType();\r\n      let values: usize;\r\n      let byteLength: usize;\r\n      switch (nativeElementType) {\r\n        case NativeType.I32: {\r\n          values = changetype<usize>(new Int32Array(elementCount));\r\n          byteLength = elementCount * 4;\r\n          break;\r\n        }\r\n        case NativeType.I64: {\r\n          values = changetype<usize>(new Array<I64>(elementCount));\r\n          byteLength = elementCount * 8;\r\n          break;\r\n        }\r\n        case NativeType.F32: {\r\n          values = changetype<usize>(new Float32Array(elementCount));\r\n          byteLength = elementCount * 4;\r\n          break;\r\n        }\r\n        case NativeType.F64: {\r\n          values = changetype<usize>(new Float64Array(elementCount));\r\n          byteLength = elementCount * 8;\r\n          break;\r\n        }\r\n        default: {\r\n          assert(false);\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n\r\n      // precompute value expressions\r\n      let exprs = new Array<ExpressionRef>(elementCount);\r\n      let expr: BinaryenExpressionRef;\r\n      for (let i = 0; i < elementCount; ++i) {\r\n        exprs[i] = expressions[i]\r\n          ? this.compileExpression(<Expression>expressions[i], elementType, ConversionKind.IMPLICIT, WrapMode.NONE)\r\n          : elementType.toNativeZero(module);\r\n        if (isStatic) {\r\n          expr = this.precomputeExpressionRef(exprs[i]);\r\n          if (getExpressionId(expr) == ExpressionId.Const) {\r\n            assert(getExpressionType(expr) == nativeElementType);\r\n            switch (nativeElementType) {\r\n              case NativeType.I32: {\r\n                changetype<i32[]>(values)[i] = getConstValueI32(expr);\r\n                break;\r\n              }\r\n              case NativeType.I64: {\r\n                changetype<I64[]>(values)[i] = i64_new(\r\n                  getConstValueI64Low(expr),\r\n                  getConstValueI64High(expr)\r\n                );\r\n                break;\r\n              }\r\n              case NativeType.F32: {\r\n                changetype<f32[]>(values)[i] = getConstValueF32(expr);\r\n                break;\r\n              }\r\n              case NativeType.F64: {\r\n                changetype<f64[]>(values)[i] = getConstValueF64(expr);\r\n                break;\r\n              }\r\n              default: assert(false); // checked above\r\n            }\r\n          } else {\r\n            // TODO: emit a warning if declared 'const'\r\n            // if (isConst) {\r\n            //   this.warn(\r\n            //     DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\r\n            //     reportNode.range\r\n            //   );\r\n            // }\r\n            isStatic = false;\r\n          }\r\n        }\r\n      }\r\n\r\n      let usizeTypeSize = this.options.usizeType.byteSize;\r\n      if (isStatic) { // non-empty, all elements can be precomputed\r\n\r\n        // Create a combined static memory segment composed of:\r\n        // Array struct + ArrayBuffer struct + aligned ArrayBuffer data\r\n\r\n        let arraySize = usizeTypeSize + 4; // buffer_ & length_\r\n        let bufferHeaderSize = (4 + 7) & ~7; // aligned byteLength (8)\r\n        let bufferTotalSize = 1 << (32 - clz(byteLength + bufferHeaderSize - 1)); // see internals\r\n        let data = new Uint8Array(arraySize + bufferTotalSize);\r\n        let segment = this.addMemorySegment(data);\r\n        let offset = 0;\r\n\r\n        // write Array struct\r\n        if (usizeTypeSize == 8) {\r\n          writeI64(i64_add(segment.offset, i64_new(arraySize)), data, offset); // buffer_ @ segment[arSize]\r\n          offset += 8;\r\n        } else {\r\n          assert(i64_high(segment.offset) == 0);\r\n          writeI32(i64_low(segment.offset) + arraySize, data, offset); // buffer_ @ segment[arSize]\r\n          offset += 4;\r\n        }\r\n        writeI32(elementCount, data, offset); // length_\r\n        offset += 4;\r\n        assert(offset == arraySize);\r\n\r\n        // write ArrayBuffer struct\r\n        writeI32(byteLength, data, offset);\r\n        offset += bufferHeaderSize; // incl. alignment\r\n\r\n        // write ArrayBuffer data\r\n        switch (nativeElementType) {\r\n          case NativeType.I32: {\r\n            for (let i = 0; i < elementCount; ++i) {\r\n              writeI32(changetype<i32[]>(values)[i], data, offset); offset += 4;\r\n            }\r\n            break;\r\n          }\r\n          case NativeType.I64: {\r\n            for (let i = 0; i < elementCount; ++i) {\r\n              writeI64(changetype<I64[]>(values)[i], data, offset); offset += 8;\r\n            }\r\n            break;\r\n          }\r\n          case NativeType.F32: {\r\n            for (let i = 0; i < elementCount; ++i) {\r\n              writeF32(changetype<f32[]>(values)[i], data, offset); offset += 4;\r\n            }\r\n            break;\r\n          }\r\n          case NativeType.F64: {\r\n            for (let i = 0; i < elementCount; ++i) {\r\n              writeF64(changetype<f64[]>(values)[i], data, offset); offset += 8;\r\n            }\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        assert(offset <= arraySize + bufferTotalSize);\r\n\r\n        this.currentType = arrayType;\r\n        return usizeTypeSize == 8\r\n          ? module.createI64(\r\n              i64_low(segment.offset),\r\n              i64_high(segment.offset)\r\n            )\r\n          : module.createI32(\r\n              i64_low(segment.offset)\r\n            );\r\n\r\n      } else { // non-empty, some elements can't be precomputed\r\n\r\n        this.currentType = arrayType;\r\n        let setter = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\r\n        if (!setter) {\r\n          this.error(\r\n            DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\r\n            reportNode.range, arrayInstance.internalName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        let nativeArrayType = arrayType.toNativeType();\r\n        let currentFunction = this.currentFunction;\r\n        let tempLocal = currentFunction.getTempLocal(arrayType, false);\r\n        let stmts = new Array<ExpressionRef>(2 + elementCount);\r\n        let index = 0;\r\n        stmts[index++] = module.createSetLocal(tempLocal.index,\r\n          this.makeCallDirect(assert(arrayInstance.constructorInstance), [\r\n            module.createI32(0), // this\r\n            module.createI32(elementCount)\r\n          ])\r\n        );\r\n        for (let i = 0; i < elementCount; ++i) {\r\n          stmts[index++] = this.makeCallDirect(setter, [\r\n            module.createGetLocal(tempLocal.index, nativeArrayType), // this\r\n            module.createI32(i),\r\n            exprs[i]\r\n          ]);\r\n        }\r\n        assert(index + 1 == stmts.length);\r\n        stmts[index] = module.createGetLocal(tempLocal.index, nativeArrayType);\r\n        currentFunction.freeTempLocal(tempLocal);\r\n        this.currentType = arrayType;\r\n        return module.createBlock(null, stmts, nativeArrayType);\r\n      }\r\n\r\n    } else { // empty, TBD: cache this somehow?\r\n      this.currentType = arrayType;\r\n      return this.makeCallDirect(assert(arrayInstance.constructorInstance), [\r\n        module.createI32(0), // this\r\n        module.createI32(0)\r\n      ]);\r\n    }\r\n  }\r\n\r\n  compileNewExpression(expression: NewExpression, contextualType: Type): ExpressionRef {\r\n    var module = this.module;\r\n    var options = this.options;\r\n    var currentFunction = this.currentFunction;\r\n\r\n    // obtain the class being instantiated\r\n    var target = this.program.resolveExpression( // reports\r\n      expression.expression,\r\n      currentFunction\r\n    );\r\n    if (!target) return module.createUnreachable();\r\n    if (target.kind != ElementKind.CLASS_PROTOTYPE) {\r\n      this.error(\r\n        DiagnosticCode.Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature,\r\n        expression.expression.range\r\n      );\r\n      return this.module.createUnreachable();\r\n    }\r\n    var classPrototype = <ClassPrototype>target;\r\n    var classInstance = classPrototype.resolveUsingTypeArguments( // reports\r\n      expression.typeArguments,\r\n      currentFunction.flow.contextualTypeArguments,\r\n      expression\r\n    );\r\n    if (!classInstance) return module.createUnreachable();\r\n\r\n    var expr: ExpressionRef;\r\n\r\n    // traverse to the first matching constructor\r\n    var currentClassInstance: Class | null = classInstance;\r\n    var constructorInstance = classInstance.constructorInstance;\r\n    while (!constructorInstance && (currentClassInstance = classInstance.base)) {\r\n      constructorInstance = currentClassInstance.constructorInstance;\r\n    }\r\n\r\n    // if a constructor is present, call it with a zero `this`\r\n    if (constructorInstance) {\r\n      expr = this.compileCallDirect(constructorInstance, expression.arguments, expression,\r\n        options.usizeType.toNativeZero(module)\r\n      );\r\n\r\n    // otherwise simply allocate a new instance and initialize its fields\r\n    } else {\r\n      expr = this.makeAllocate(classInstance, expression);\r\n    }\r\n\r\n    this.currentType = classInstance.type;\r\n    return expr;\r\n  }\r\n\r\n  compileParenthesizedExpression(\r\n    expression: ParenthesizedExpression,\r\n    contextualType: Type\r\n  ): ExpressionRef {\r\n    // does not change types, just order\r\n    return this.compileExpression(\r\n      expression.expression,\r\n      contextualType,\r\n      ConversionKind.NONE,\r\n      WrapMode.NONE\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Compiles a property access in the specified context.\r\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\r\n   *  precomputes them according to context.\r\n   */\r\n  compilePropertyAccessExpression(\r\n    propertyAccess: PropertyAccessExpression,\r\n    contextualType: Type,\r\n    retainConstantType: bool\r\n  ): ExpressionRef {\r\n    var program = this.program;\r\n    var module = this.module;\r\n\r\n    var target = program.resolvePropertyAccess(propertyAccess, this.currentFunction); // reports\r\n    if (!target) return module.createUnreachable();\r\n\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL: { // static property\r\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\r\n          return module.createUnreachable();\r\n        }\r\n        let globalType = (<Global>target).type;\r\n        assert(globalType != Type.void);\r\n        if ((<Global>target).is(CommonFlags.INLINED)) {\r\n          return this.compileInlineConstant(<Global>target, contextualType, retainConstantType);\r\n        }\r\n        this.currentType = globalType;\r\n        return module.createGetGlobal((<Global>target).internalName, globalType.toNativeType());\r\n      }\r\n      case ElementKind.ENUMVALUE: { // enum value\r\n        let parent = (<EnumValue>target).parent;\r\n        assert(parent !== null && parent.kind == ElementKind.ENUM);\r\n        if (!this.compileEnum(<Enum>parent)) {\r\n          return this.module.createUnreachable();\r\n        }\r\n        this.currentType = Type.i32;\r\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\r\n          return module.createI32((<EnumValue>target).constantValue);\r\n        }\r\n        return module.createGetGlobal((<EnumValue>target).internalName, NativeType.I32);\r\n      }\r\n      case ElementKind.FIELD: { // instance field\r\n        let thisExpression = assert(program.resolvedThisExpression);\r\n        assert((<Field>target).memoryOffset >= 0);\r\n        let thisExpr = this.compileExpressionRetainType(\r\n          thisExpression,\r\n          this.options.usizeType,\r\n          WrapMode.NONE\r\n        );\r\n        this.currentType = (<Field>target).type;\r\n        return module.createLoad(\r\n          (<Field>target).type.byteSize,\r\n          (<Field>target).type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\r\n          thisExpr,\r\n          (<Field>target).type.toNativeType(),\r\n          (<Field>target).memoryOffset\r\n        );\r\n      }\r\n      case ElementKind.PROPERTY: { // instance property (here: getter)\r\n        let prototype = (<Property>target).getterPrototype;\r\n        if (prototype) {\r\n          let instance = prototype.resolve(null); // reports\r\n          if (!instance) return module.createUnreachable();\r\n          let signature = instance.signature;\r\n          if (!this.checkCallSignature( // reports\r\n            signature,\r\n            0,\r\n            instance.is(CommonFlags.INSTANCE),\r\n            propertyAccess\r\n          )) {\r\n            return module.createUnreachable();\r\n          }\r\n          if (instance.is(CommonFlags.INSTANCE)) {\r\n            let parent = assert(instance.parent);\r\n            assert(parent.kind == ElementKind.CLASS);\r\n            let thisExpression = assert(program.resolvedThisExpression);\r\n            let thisExpr = this.compileExpressionRetainType(\r\n              thisExpression,\r\n              this.options.usizeType,\r\n              WrapMode.NONE\r\n            );\r\n            this.currentType = signature.returnType;\r\n            return this.compileCallDirect(instance, [], propertyAccess, thisExpr);\r\n          } else {\r\n            this.currentType = signature.returnType;\r\n            return this.compileCallDirect(instance, [], propertyAccess);\r\n          }\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n            propertyAccess.range, (<Property>target).simpleName, (<Property>target).parent.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      propertyAccess.range\r\n    );\r\n    return module.createUnreachable();\r\n  }\r\n\r\n  compileTernaryExpression(expression: TernaryExpression, contextualType: Type): ExpressionRef {\r\n    var ifThen = expression.ifThen;\r\n    var ifElse = expression.ifElse;\r\n    var currentFunction = this.currentFunction;\r\n\r\n    var condExpr = this.makeIsTrueish(\r\n      this.compileExpressionRetainType(expression.condition, Type.bool, WrapMode.NONE),\r\n      this.currentType\r\n    );\r\n\r\n    if (\r\n      !this.options.noTreeShaking ||\r\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT)\r\n    ) {\r\n      // Try to eliminate unnecesssary branches if the condition is constant\r\n      let condExprPrecomp = this.precomputeExpressionRef(condExpr);\r\n      if (\r\n        getExpressionId(condExprPrecomp) == ExpressionId.Const &&\r\n        getExpressionType(condExprPrecomp) == NativeType.I32\r\n      ) {\r\n        return getConstValueI32(condExprPrecomp)\r\n          ? this.compileExpressionRetainType(ifThen, contextualType, WrapMode.NONE)\r\n          : this.compileExpressionRetainType(ifElse, contextualType, WrapMode.NONE);\r\n\r\n      // Otherwise recompile to the original and let the optimizer decide\r\n      } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\r\n        condExpr = this.makeIsTrueish(\r\n          this.compileExpressionRetainType(expression.condition, Type.bool, WrapMode.NONE),\r\n          this.currentType\r\n        );\r\n      }\r\n    }\r\n\r\n    var ifThenExpr: ExpressionRef;\r\n    var ifElseExpr: ExpressionRef;\r\n    var ifThenType: Type;\r\n    var ifElseType: Type;\r\n\r\n    // if part of a constructor, keep track of memory allocations\r\n    if (currentFunction.is(CommonFlags.CONSTRUCTOR)) {\r\n      let flow = currentFunction.flow;\r\n\r\n      flow = flow.enterBranchOrScope();\r\n      currentFunction.flow = flow;\r\n      ifThenExpr = this.compileExpressionRetainType(ifThen, contextualType, WrapMode.NONE);\r\n      ifThenType = this.currentType;\r\n      let ifThenAllocates = flow.is(FlowFlags.ALLOCATES);\r\n      flow = flow.leaveBranchOrScope();\r\n      currentFunction.flow = flow;\r\n\r\n      flow = flow.enterBranchOrScope();\r\n      currentFunction.flow = flow;\r\n      ifElseExpr = this.compileExpressionRetainType(ifElse, contextualType, WrapMode.NONE);\r\n      ifElseType = this.currentType;\r\n      let ifElseAllocates = flow.is(FlowFlags.ALLOCATES);\r\n      flow = flow.leaveBranchOrScope();\r\n      currentFunction.flow = flow;\r\n\r\n      if (ifThenAllocates && ifElseAllocates) flow.set(FlowFlags.ALLOCATES);\r\n\r\n    // otherwise simplify\r\n    } else {\r\n      ifThenExpr = this.compileExpressionRetainType(ifThen, contextualType, WrapMode.NONE);\r\n      ifThenType = this.currentType;\r\n      ifElseExpr = this.compileExpressionRetainType(ifElse, contextualType, WrapMode.NONE);\r\n      ifElseType = this.currentType;\r\n    }\r\n    var commonType = Type.commonCompatible(ifThenType, ifElseType, false);\r\n    if (!commonType) {\r\n      this.error(\r\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n        expression.range, ifThenType.toString(), ifElseType.toString()\r\n      );\r\n      this.currentType = contextualType;\r\n      return this.module.createUnreachable();\r\n    }\r\n    ifThenExpr = this.convertExpression(\r\n      ifThenExpr,\r\n      ifThenType,\r\n      commonType,\r\n      ConversionKind.IMPLICIT,\r\n      WrapMode.NONE,\r\n      ifThen\r\n    );\r\n    ifElseExpr = this.convertExpression(\r\n      ifElseExpr,\r\n      ifElseType,\r\n      commonType,\r\n      ConversionKind.IMPLICIT,\r\n      WrapMode.NONE,\r\n      ifElse\r\n    );\r\n    this.currentType = commonType;\r\n    return this.module.createIf(condExpr, ifThenExpr, ifElseExpr);\r\n  }\r\n\r\n  compileUnaryPostfixExpression(expression: UnaryPostfixExpression, contextualType: Type): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n\r\n    // make a getter for the expression (also obtains the type)\r\n    var getValue = this.compileExpression( // reports\r\n      expression.operand,\r\n      contextualType == Type.void\r\n        ? Type.i32\r\n        : contextualType,\r\n      ConversionKind.NONE,\r\n      WrapMode.NONE\r\n    );\r\n    if (getExpressionId(getValue) == ExpressionId.Unreachable) {\r\n      // shortcut if compiling the getter already failed\r\n      return getValue;\r\n    }\r\n    var currentType = this.currentType;\r\n\r\n    var op: BinaryOp;\r\n    var nativeType: NativeType;\r\n    var nativeOne: ExpressionRef;\r\n\r\n    switch (expression.operator) {\r\n      case Token.PLUS_PLUS: {\r\n        if (currentType.is(TypeFlags.REFERENCE)) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        switch (currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            op = BinaryOp.AddI32;\r\n            nativeType = NativeType.I32;\r\n            nativeOne = module.createI32(1);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: // TODO: check operator overload\r\n          case TypeKind.ISIZE: {\r\n            let options = this.options;\r\n            op = options.isWasm64\r\n              ? BinaryOp.AddI64\r\n              : BinaryOp.AddI32;\r\n            nativeType = options.nativeSizeType;\r\n            nativeOne = currentType.toNativeOne(module);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            op = BinaryOp.AddI64;\r\n            nativeType = NativeType.I64;\r\n            nativeOne = module.createI64(1);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            op = BinaryOp.AddF32;\r\n            nativeType = NativeType.F32;\r\n            nativeOne = module.createF32(1);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            op = BinaryOp.AddF64;\r\n            nativeType = NativeType.F64;\r\n            nativeOne = module.createF64(1);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.MINUS_MINUS: {\r\n        if (currentType.is(TypeFlags.REFERENCE)) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        switch (currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            op = BinaryOp.SubI32;\r\n            nativeType = NativeType.I32;\r\n            nativeOne = module.createI32(1);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: // TODO: check operator overload\r\n          case TypeKind.ISIZE: {\r\n            let options = this.options;\r\n            op = options.isWasm64\r\n              ? BinaryOp.SubI64\r\n              : BinaryOp.SubI32;\r\n            nativeType = options.nativeSizeType;\r\n            nativeOne = currentType.toNativeOne(module);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            op = BinaryOp.SubI64;\r\n            nativeType = NativeType.I64;\r\n            nativeOne = module.createI64(1);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            op = BinaryOp.SubF32;\r\n            nativeType = NativeType.F32;\r\n            nativeOne = module.createF32(1);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            op = BinaryOp.SubF64;\r\n            nativeType = NativeType.F64;\r\n            nativeOne = module.createF64(1);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    // simplify if dropped anyway\r\n    if (contextualType == Type.void) {\r\n      return this.compileAssignmentWithValue(expression.operand,\r\n        module.createBinary(op,\r\n          getValue,\r\n          nativeOne\r\n        ),\r\n        false\r\n      );\r\n    }\r\n\r\n    // otherwise use a temp local for the intermediate value (always possibly overflows)\r\n    var tempLocal = currentFunction.getTempLocal(currentType, false);\r\n    var setValue = this.compileAssignmentWithValue(expression.operand,\r\n      module.createBinary(op,\r\n        this.module.createGetLocal(tempLocal.index, nativeType),\r\n        nativeOne\r\n      ),\r\n      false\r\n    );\r\n    this.currentType = assert(tempLocal).type;\r\n    currentFunction.freeTempLocal(<Local>tempLocal);\r\n\r\n    var localIndex = (<Local>tempLocal).index;\r\n    return module.createBlock(null, [\r\n      module.createSetLocal(localIndex, getValue),\r\n      setValue,\r\n      module.createGetLocal(localIndex, nativeType)\r\n    ], nativeType); // result of 'x++' / 'x--' might overflow\r\n  }\r\n\r\n  compileUnaryPrefixExpression(\r\n    expression: UnaryPrefixExpression,\r\n    contextualType: Type\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var compound = false;\r\n    var expr: ExpressionRef;\r\n\r\n    switch (expression.operator) {\r\n      case Token.PLUS: {\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          WrapMode.NONE\r\n        );\r\n        break;\r\n      }\r\n      case Token.MINUS: {\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        if (expression.operand.kind == NodeKind.LITERAL && (\r\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.INTEGER ||\r\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.FLOAT\r\n        )) {\r\n          // implicitly negate integer and float literals. also enables proper checking of literal ranges.\r\n          expr = this.compileLiteralExpression(<LiteralExpression>expression.operand, contextualType, true);\r\n          // compileExpression normally does this:\r\n          if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\r\n        } else {\r\n          expr = this.compileExpression(\r\n            expression.operand,\r\n            contextualType == Type.void\r\n              ? Type.i32\r\n              : contextualType,\r\n            ConversionKind.NONE,\r\n            WrapMode.NONE\r\n          );\r\n          switch (this.currentType.kind) {\r\n            case TypeKind.I8:\r\n            case TypeKind.I16:\r\n            case TypeKind.I32:\r\n            case TypeKind.U8:\r\n            case TypeKind.U16:\r\n            case TypeKind.U32:\r\n            case TypeKind.BOOL: {\r\n              expr = module.createBinary(BinaryOp.SubI32, module.createI32(0), expr);\r\n              break;\r\n            }\r\n            case TypeKind.USIZE: {\r\n              if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n                this.error(\r\n                  DiagnosticCode.Operation_not_supported,\r\n                  expression.range\r\n                );\r\n                return module.createUnreachable();\r\n              }\r\n              // fall-through\r\n            }\r\n            case TypeKind.ISIZE: {\r\n              expr = module.createBinary(\r\n                this.options.isWasm64\r\n                  ? BinaryOp.SubI64\r\n                  : BinaryOp.SubI32,\r\n                this.currentType.toNativeZero(module),\r\n                expr\r\n              );\r\n              break;\r\n            }\r\n            case TypeKind.I64:\r\n            case TypeKind.U64: {\r\n              expr = module.createBinary(BinaryOp.SubI64, module.createI64(0), expr);\r\n              break;\r\n            }\r\n            case TypeKind.F32: {\r\n              expr = module.createUnary(UnaryOp.NegF32, expr);\r\n              break;\r\n            }\r\n            case TypeKind.F64: {\r\n              expr = module.createUnary(UnaryOp.NegF64, expr);\r\n              break;\r\n            }\r\n            default: {\r\n              assert(false);\r\n              expr = module.createUnreachable();\r\n            }\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.PLUS_PLUS: {\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        compound = true;\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          WrapMode.NONE\r\n        );\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.AddI32, expr, this.module.createI32(1));\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n              this.error(\r\n                DiagnosticCode.Operation_not_supported,\r\n                expression.range\r\n              );\r\n              return module.createUnreachable();\r\n            }\r\n            // fall-through\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.AddI64\r\n                : BinaryOp.AddI32,\r\n              expr,\r\n              this.currentType.toNativeOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.AddI64, expr, module.createI64(1));\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.AddF32, expr, module.createF32(1));\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.AddF64, expr, module.createF64(1));\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.MINUS_MINUS: {\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        compound = true;\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          WrapMode.NONE\r\n        );\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.SubI32, expr, module.createI32(1));\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n              this.error(\r\n                DiagnosticCode.Operation_not_supported,\r\n                expression.range\r\n              );\r\n              return module.createUnreachable();\r\n            }\r\n            // fall-through\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              expr,\r\n              this.currentType.toNativeOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.SubI64, expr, module.createI64(1));\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.SubF32, expr, module.createF32(1));\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.SubF64, expr, module.createF64(1));\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.EXCLAMATION: {\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          WrapMode.NONE\r\n        );\r\n        expr = this.makeIsFalseish(expr, this.currentType);\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.TILDE: {\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType.is(TypeFlags.FLOAT)\r\n              ? Type.i64\r\n              : contextualType,\r\n          contextualType == Type.void\r\n            ? ConversionKind.NONE\r\n            : ConversionKind.IMPLICIT,\r\n          WrapMode.NONE\r\n        );\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.XorI32, expr, module.createI32(-1));\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n              this.error(\r\n                DiagnosticCode.Operation_not_supported,\r\n                expression.range\r\n              );\r\n              return module.createUnreachable();\r\n            }\r\n            // fall-through\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.XorI64\r\n                : BinaryOp.XorI32,\r\n              expr,\r\n              this.currentType.toNativeNegOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.XorI64, expr, module.createI64(-1, -1));\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.TYPEOF: {\r\n        // it might make sense to implement typeof in a way that a generic function can detect\r\n        // whether its type argument is a class type or string. that could then be used, for\r\n        // example, to generate hash codes for sets and maps, depending on the kind of type\r\n        // parameter we have. ideally the comparison would not involve actual string comparison and\r\n        // limit available operations to hard-coded string literals.\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n    return compound\r\n      ? this.compileAssignmentWithValue(expression.operand, expr, contextualType != Type.void)\r\n      : expr;\r\n  }\r\n\r\n  /** Makes sure that a 32-bit integer value is wrapped to a valid value of the specified type. */\r\n  ensureSmallIntegerWrap(expr: ExpressionRef, type: Type): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFunction.flow;\r\n    switch (type.kind) {\r\n      case TypeKind.I8: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\r\n            ? module.createUnary(UnaryOp.ExtendI8ToI32, expr)\r\n            : module.createBinary(BinaryOp.ShrI32,\r\n                module.createBinary(BinaryOp.ShlI32,\r\n                  expr,\r\n                  module.createI32(24)\r\n                ),\r\n                module.createI32(24)\r\n              );\r\n        }\r\n        break;\r\n      }\r\n      case TypeKind.I16: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\r\n            ? module.createUnary(UnaryOp.ExtendI16ToI32, expr)\r\n            : module.createBinary(BinaryOp.ShrI32,\r\n                module.createBinary(BinaryOp.ShlI32,\r\n                  expr,\r\n                  module.createI32(16)\r\n                ),\r\n                module.createI32(16)\r\n              );\r\n        }\r\n        break;\r\n      }\r\n      case TypeKind.U8: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          expr = module.createBinary(BinaryOp.AndI32,\r\n            expr,\r\n            module.createI32(0xff)\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      case TypeKind.U16: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          expr = module.createBinary(BinaryOp.AndI32,\r\n            expr,\r\n            module.createI32(0xffff)\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      case TypeKind.BOOL: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          expr = module.createBinary(BinaryOp.AndI32,\r\n            expr,\r\n            module.createI32(0x1)\r\n          );\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /** Creates a comparison whether an expression is 'false' in a broader sense. */\r\n  makeIsFalseish(expr: ExpressionRef, type: Type): ExpressionRef {\r\n    var module = this.module;\r\n    switch (type.kind) {\r\n      case TypeKind.I8:\r\n      case TypeKind.I16:\r\n      case TypeKind.U8:\r\n      case TypeKind.U16:\r\n      case TypeKind.BOOL: {\r\n        expr = this.ensureSmallIntegerWrap(expr, type);\r\n        // fall-through\r\n      }\r\n      case TypeKind.I32:\r\n      case TypeKind.U32: {\r\n        return module.createUnary(UnaryOp.EqzI32, expr);\r\n      }\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: {\r\n        return module.createUnary(UnaryOp.EqzI64, expr);\r\n      }\r\n      case TypeKind.USIZE: // TODO: strings?\r\n      case TypeKind.ISIZE: {\r\n        return module.createUnary(type.size == 64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32, expr);\r\n      }\r\n      case TypeKind.F32: {\r\n        return module.createBinary(BinaryOp.EqF32, expr, module.createF32(0));\r\n      }\r\n      case TypeKind.F64: {\r\n        return module.createBinary(BinaryOp.EqF64, expr, module.createF64(0));\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return module.createI32(1);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Creates a comparison whether an expression is 'true' in a broader sense. */\r\n  makeIsTrueish(expr: ExpressionRef, type: Type): ExpressionRef {\r\n    var module = this.module;\r\n    switch (type.kind) {\r\n      case TypeKind.I8:\r\n      case TypeKind.I16:\r\n      case TypeKind.U8:\r\n      case TypeKind.U16:\r\n      case TypeKind.BOOL: {\r\n        expr = this.ensureSmallIntegerWrap(expr, type);\r\n        // fall-through\r\n      }\r\n      case TypeKind.I32:\r\n      case TypeKind.U32: {\r\n        return expr;\r\n      }\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: {\r\n        return module.createBinary(BinaryOp.NeI64, expr, module.createI64(0));\r\n      }\r\n      case TypeKind.USIZE: // TODO: strings?\r\n      case TypeKind.ISIZE: {\r\n        return type.size == 64\r\n          ? module.createBinary(BinaryOp.NeI64, expr, module.createI64(0))\r\n          : expr;\r\n      }\r\n      case TypeKind.F32: {\r\n        return module.createBinary(BinaryOp.NeF32, expr, module.createF32(0));\r\n      }\r\n      case TypeKind.F64: {\r\n        return module.createBinary(BinaryOp.NeF64, expr, module.createF64(0));\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return module.createI32(0);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Makes an allocation expression for an instance of the specified class. */\r\n  makeAllocate(classInstance: Class, reportNode: Node): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n    var nativeSizeType = this.options.nativeSizeType;\r\n\r\n    // allocate the necessary memory and tee the pointer to a temp. local for reuse\r\n    var tempLocal = currentFunction.getTempLocal(classInstance.type, false);\r\n    var initializers = new Array<ExpressionRef>();\r\n    initializers.push(\r\n      module.createSetLocal(tempLocal.index,\r\n        compileBuiltinAllocate(this, classInstance, reportNode)\r\n      )\r\n    );\r\n\r\n    // apply field initializers\r\n    if (classInstance.members) {\r\n      for (let member of classInstance.members.values()) {\r\n        if (member.kind == ElementKind.FIELD) {\r\n          let field = <Field>member;\r\n          let fieldType = field.type;\r\n          let nativeFieldType = fieldType.toNativeType();\r\n          let fieldDeclaration = field.prototype.declaration;\r\n          assert(!field.isAny(CommonFlags.CONST));\r\n          if (fieldDeclaration.initializer) { // use initializer\r\n            initializers.push(module.createStore(fieldType.byteSize,\r\n              module.createGetLocal(tempLocal.index, nativeSizeType),\r\n              this.compileExpression( // reports\r\n                fieldDeclaration.initializer,\r\n                fieldType,\r\n                ConversionKind.IMPLICIT,\r\n                WrapMode.NONE\r\n              ),\r\n              nativeFieldType,\r\n              field.memoryOffset\r\n            ));\r\n          } else { // initialize with zero\r\n            // TODO: might be unnecessary if the ctor initializes the field\r\n            let parameterIndex = (<FieldDeclaration>field.prototype.declaration).parameterIndex;\r\n            initializers.push(module.createStore(fieldType.byteSize,\r\n              module.createGetLocal(tempLocal.index, nativeSizeType),\r\n              parameterIndex >= 0 // initialized via parameter\r\n                ? module.createGetLocal(1 + parameterIndex, nativeFieldType)\r\n                : fieldType.toNativeZero(module),\r\n                nativeFieldType,\r\n              field.memoryOffset\r\n            ));\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // return `this`\r\n    initializers.push(\r\n      module.createGetLocal(tempLocal.index, nativeSizeType)\r\n    );\r\n\r\n    currentFunction.freeTempLocal(tempLocal);\r\n    this.currentType = classInstance.type;\r\n    return module.createBlock(null, initializers, nativeSizeType);\r\n  }\r\n\r\n  /** Makes a conditional allocation expression inside of the constructor of the specified class. */\r\n  makeConditionalAllocate(classInstance: Class, reportNode: Node): ExpressionRef {\r\n    // requires that `this` is the first local\r\n    var module = this.module;\r\n    var nativeSizeType = this.options.nativeSizeType;\r\n    this.currentType = classInstance.type;\r\n    return module.createIf(\r\n      nativeSizeType == NativeType.I64\r\n        ? module.createBinary(\r\n            BinaryOp.NeI64,\r\n            module.createGetLocal(0, NativeType.I64),\r\n            module.createI64(0)\r\n          )\r\n        : module.createGetLocal(0, NativeType.I32),\r\n      module.createGetLocal(0, nativeSizeType),\r\n      module.createTeeLocal(0,\r\n        this.makeAllocate(classInstance, reportNode)\r\n      )\r\n    );\r\n  }\r\n\r\n  /** Adds the debug location of the specified expression at the specified range to the source map. */\r\n  addDebugLocation(expr: ExpressionRef, range: Range): void {\r\n    var currentFunction = this.currentFunction;\r\n    var source = range.source;\r\n    if (source.debugInfoIndex < 0) source.debugInfoIndex = this.module.addDebugInfoFile(source.normalizedPath);\r\n    range.debugInfoRef = expr;\r\n    currentFunction.debugLocations.push(range);\r\n  }\r\n}\r\n\r\n// helpers\r\n\r\nfunction mangleExportName(element: Element, simpleName: string = element.simpleName): string {\r\n  switch (element.kind) {\r\n    case ElementKind.FUNCTION: {\r\n      let parent = (<Function>element).parent || (<Function>element).prototype.parent;\r\n      return parent\r\n        ? mangleExportName(parent)\r\n        + (element.is(CommonFlags.INSTANCE) ? INSTANCE_DELIMITER : STATIC_DELIMITER)\r\n        + simpleName\r\n        : simpleName;\r\n    }\r\n    case ElementKind.FIELD: {\r\n      let parent = assert((<Field>element).parent);\r\n      return mangleExportName(parent)\r\n          + (element.is(CommonFlags.INSTANCE) ? INSTANCE_DELIMITER : STATIC_DELIMITER)\r\n          + simpleName;\r\n    }\r\n    case ElementKind.ENUMVALUE: {\r\n      let parent = assert((<EnumValue>element).parent);\r\n      return mangleExportName(parent)\r\n          + (element.is(CommonFlags.INSTANCE) ? INSTANCE_DELIMITER : STATIC_DELIMITER)\r\n          + simpleName;\r\n    }\r\n    case ElementKind.CLASS: {\r\n      let parent = (<Class>element).prototype.parent;\r\n      return parent\r\n        ? mangleExportName(parent)\r\n        + STATIC_DELIMITER\r\n        + simpleName\r\n        : simpleName;\r\n    }\r\n    default: {\r\n      let parent = element.parent;\r\n      return parent\r\n        ? mangleExportName(parent)\r\n        + STATIC_DELIMITER\r\n        + simpleName\r\n        : simpleName;\r\n    }\r\n  }\r\n}\r\n","/**\r\n * A TypeScript parser for the AssemblyScript subset.\r\n * @module parser\r\n *//***/\r\n\r\nimport {\r\n  Program,\r\n  CommonFlags,\r\n  LIBRARY_PREFIX,\r\n  PATH_DELIMITER\r\n} from \"./program\";\r\n\r\nimport {\r\n  Tokenizer,\r\n  Token,\r\n  Range,\r\n  CommentHandler,\r\n  IdentifierHandling\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  normalizePath\r\n} from \"./util\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  Source,\r\n  SourceKind,\r\n  CommonTypeNode,\r\n  TypeNode,\r\n  SignatureNode,\r\n\r\n  Expression,\r\n  AssertionKind,\r\n  CallExpression,\r\n  IdentifierExpression,\r\n  StringLiteralExpression,\r\n\r\n  Statement,\r\n  BlockStatement,\r\n  BreakStatement,\r\n  ClassDeclaration,\r\n  ContinueStatement,\r\n  DeclarationStatement,\r\n  DecoratorNode,\r\n  DoStatement,\r\n  EnumDeclaration,\r\n  EnumValueDeclaration,\r\n  ExportImportStatement,\r\n  ExportMember,\r\n  ExportStatement,\r\n  ExpressionStatement,\r\n  ForStatement,\r\n  FunctionExpression,\r\n  FunctionDeclaration,\r\n  IfStatement,\r\n  ImportDeclaration,\r\n  ImportStatement,\r\n  NamespaceDeclaration,\r\n  ParameterNode,\r\n  ParameterKind,\r\n  ReturnStatement,\r\n  SwitchCase,\r\n  SwitchStatement,\r\n  ThrowStatement,\r\n  TryStatement,\r\n  TypeDeclaration,\r\n  TypeParameterNode,\r\n  VariableStatement,\r\n  VariableDeclaration,\r\n  VoidStatement,\r\n  WhileStatement,\r\n\r\n  mangleInternalPath\r\n} from \"./ast\";\r\n\r\nconst builtinsFile = LIBRARY_PREFIX + \"builtins.ts\";\r\n\r\n/** Parser interface. */\r\nexport class Parser extends DiagnosticEmitter {\r\n\r\n  /** Program being created. */\r\n  program: Program;\r\n  /** Source file names to be requested next. */\r\n  backlog: string[] = new Array();\r\n  /** Source file names already seen, that is processed or backlogged. */\r\n  seenlog: Set<string> = new Set();\r\n  /** Source file names already completely processed. */\r\n  donelog: Set<string> = new Set();\r\n  /** Optional handler to intercept comments while tokenizing. */\r\n  onComment: CommentHandler | null = null;\r\n\r\n  /** Constructs a new parser. */\r\n  constructor() {\r\n    super();\r\n    this.program = new Program(this.diagnostics);\r\n  }\r\n\r\n  /** Parses a file and adds its definitions to the program. */\r\n  parseFile(\r\n    text: string,\r\n    path: string,\r\n    isEntry: bool\r\n  ): void {\r\n    var normalizedPath = normalizePath(path);\r\n    var internalPath = mangleInternalPath(normalizedPath);\r\n\r\n    // check if already processed\r\n    if (this.donelog.has(internalPath)) return;\r\n    this.donelog.add(internalPath); // do not parse again\r\n    this.seenlog.add(internalPath); // do not request again\r\n\r\n    // create the source element\r\n    var source = new Source(\r\n      normalizedPath,\r\n      text,\r\n      isEntry\r\n        ? SourceKind.ENTRY\r\n        : path.startsWith(LIBRARY_PREFIX) && path.indexOf(PATH_DELIMITER, LIBRARY_PREFIX.length) < 0\r\n          ? SourceKind.LIBRARY\r\n          : SourceKind.DEFAULT\r\n    );\r\n    var program = this.program;\r\n    program.sources.push(source);\r\n\r\n    // mark the special builtins library file\r\n    if (source.normalizedPath == builtinsFile) {\r\n      source.set(CommonFlags.BUILTIN);\r\n    }\r\n\r\n    // tokenize and parse\r\n    var tn = new Tokenizer(source, program.diagnostics);\r\n    tn.onComment = this.onComment;\r\n    source.tokenizer = tn;\r\n    var statements = source.statements;\r\n    while (!tn.skip(Token.ENDOFFILE)) {\r\n      let statement = this.parseTopLevelStatement(tn);\r\n      if (statement) {\r\n        statement.parent = source;\r\n        statements.push(statement);\r\n      }\r\n    }\r\n    tn.finish();\r\n  }\r\n\r\n  /** Parses a top-level statement. */\r\n  parseTopLevelStatement(\r\n    tn: Tokenizer,\r\n    namespace: Node | null = null\r\n  ): Statement | null {\r\n    var flags = CommonFlags.NONE;\r\n    var startPos: i32 = -1;\r\n\r\n    // check decorators\r\n    var decorators: DecoratorNode[] | null = null;\r\n    while (tn.skip(Token.AT)) {\r\n      if (startPos < 0) startPos = tn.tokenPos;\r\n      let decorator = this.parseDecorator(tn);\r\n      if (!decorator) {\r\n        this.skipStatement(tn);\r\n        continue;\r\n      }\r\n      if (!decorators) decorators = [];\r\n      decorators.push(decorator);\r\n    }\r\n\r\n    // mark builtins\r\n    flags |= (tn.source.flags & CommonFlags.BUILTIN);\r\n\r\n    // check modifiers\r\n    var exportStart: i32 = 0;\r\n    var exportEnd: i32 = 0;\r\n    if (tn.skip(Token.EXPORT)) {\r\n      if (tn.skip(Token.DEFAULT)) {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          tn.range()\r\n        );\r\n      }\r\n      if (startPos < 0) startPos = tn.tokenPos;\r\n      flags |= CommonFlags.EXPORT;\r\n      exportStart = tn.tokenPos;\r\n      exportEnd = tn.pos;\r\n    }\r\n\r\n    var declareStart: i32 = 0;\r\n    var declareEnd: i32 = 0;\r\n    var contextIsAmbient = namespace != null && namespace.is(CommonFlags.AMBIENT);\r\n    if (tn.skip(Token.DECLARE)) {\r\n      if (startPos < 0) startPos = tn.tokenPos;\r\n      if (contextIsAmbient) {\r\n        this.error(\r\n          DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      flags |= CommonFlags.DECLARE | CommonFlags.AMBIENT;\r\n    } else if (contextIsAmbient) {\r\n      flags |= CommonFlags.AMBIENT;\r\n    }\r\n\r\n    // parse the statement\r\n    var statement: Statement | null = null;\r\n\r\n    // handle declarations\r\n    var first = tn.peek();\r\n    if (startPos < 0) startPos = tn.nextTokenPos;\r\n    switch (first) {\r\n      case Token.CONST: {\r\n        tn.next();\r\n        flags |= CommonFlags.CONST;\r\n        if (tn.skip(Token.ENUM)) {\r\n          statement = this.parseEnum(tn, flags, decorators, startPos);\r\n          break;\r\n        } else {\r\n          statement = this.parseVariable(tn, flags, decorators, startPos);\r\n          decorators = null;\r\n        }\r\n        break;\r\n      }\r\n      case Token.LET: flags |= CommonFlags.LET;\r\n      case Token.VAR: {\r\n        tn.next();\r\n        statement = this.parseVariable(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.ENUM: {\r\n        tn.next();\r\n        statement = this.parseEnum(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.FUNCTION: {\r\n        tn.next();\r\n        statement = this.parseFunction(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.ABSTRACT: {\r\n        let state = tn.mark();\r\n        tn.next();\r\n        if (!tn.skip(Token.CLASS)) {\r\n          tn.reset(state);\r\n          statement = this.parseStatement(tn, true);\r\n          break;\r\n        } else {\r\n          tn.discard(state);\r\n        }\r\n        flags |= CommonFlags.ABSTRACT;\r\n        // fall through\r\n      }\r\n      case Token.CLASS:\r\n      case Token.INTERFACE: {\r\n        tn.next();\r\n        statement = this.parseClassOrInterface(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.NAMESPACE: {\r\n        let state = tn.mark();\r\n        tn.next();\r\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\r\n          tn.discard(state);\r\n          statement = this.parseNamespace(tn, flags, decorators, startPos);\r\n          decorators = null;\r\n        } else {\r\n          tn.reset(state);\r\n          statement = this.parseStatement(tn, true);\r\n        }\r\n        break;\r\n      }\r\n      case Token.IMPORT: {\r\n        tn.next();\r\n        flags |= CommonFlags.IMPORT;\r\n        if (flags & CommonFlags.EXPORT) {\r\n          statement = this.parseExportImport(tn, startPos);\r\n        } else {\r\n          statement = this.parseImport(tn);\r\n        }\r\n        break;\r\n      }\r\n      case Token.TYPE: { // also identifier\r\n        let state = tn.mark();\r\n        tn.next();\r\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\r\n          tn.discard(state);\r\n          statement = this.parseTypeDeclaration(tn, flags, decorators, startPos);\r\n          decorators = null;\r\n        } else {\r\n          tn.reset(state);\r\n          statement = this.parseStatement(tn, true);\r\n        }\r\n        break;\r\n      }\r\n      default: {\r\n\r\n        // handle plain exports\r\n        if (flags & CommonFlags.EXPORT) {\r\n          statement = this.parseExport(tn, flags, startPos);\r\n\r\n        // handle non-declaration statements\r\n        } else {\r\n          if (exportEnd) {\r\n            this.error(\r\n              DiagnosticCode._0_modifier_cannot_be_used_here,\r\n              tn.range(exportStart, exportEnd), \"export\"\r\n            ); // recoverable\r\n          }\r\n          if (declareEnd) {\r\n            this.error(\r\n              DiagnosticCode._0_modifier_cannot_be_used_here,\r\n              tn.range(declareStart, declareEnd), \"declare\"\r\n            ); // recoverable\r\n          }\r\n          if (!namespace) {\r\n            statement = this.parseStatement(tn, true);\r\n          } // TODO: else?\r\n        }\r\n        break;\r\n      }\r\n    }\r\n\r\n    // check for decorators that weren't consumed\r\n    if (decorators) {\r\n      for (let i = 0, k = decorators.length; i < k; ++i) {\r\n        this.error(\r\n          DiagnosticCode.Decorators_are_not_valid_here,\r\n          decorators[i].range\r\n        );\r\n      }\r\n    }\r\n    return statement;\r\n  }\r\n\r\n  /** Obtains the next file to parse. */\r\n  nextFile(): string | null {\r\n    var backlog = this.backlog;\r\n    return backlog.length ? backlog.shift() : null;\r\n  }\r\n\r\n  /** Finishes parsing and returns the program. */\r\n  finish(): Program {\r\n    if (this.backlog.length) throw new Error(\"backlog is not empty\");\r\n    this.backlog = [];\r\n    this.seenlog.clear();\r\n    this.donelog.clear();\r\n    return this.program;\r\n  }\r\n\r\n  /** Parses a type. */\r\n  parseType(\r\n    tn: Tokenizer,\r\n    acceptParenthesized: bool = true,\r\n    suppressErrors: bool = false\r\n  ): CommonTypeNode | null {\r\n\r\n    // NOTE: this parses our limited subset\r\n    var token = tn.next();\r\n    var startPos = tn.tokenPos;\r\n\r\n    var type: CommonTypeNode;\r\n\r\n    // '(' ...\r\n    if (token == Token.OPENPAREN) {\r\n\r\n      // '(' FunctionSignature ')' '|' 'null'?\r\n      let isNullableSignature = tn.skip(Token.OPENPAREN);\r\n      // FunctionSignature?\r\n      let signature = this.tryParseSignature(tn);\r\n      if (signature) {\r\n        if (isNullableSignature) {\r\n          if (!tn.skip(Token.CLOSEPAREN)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \")\"\r\n            );\r\n            return null;\r\n          }\r\n          if (!tn.skip(Token.BAR)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"|\"\r\n            );\r\n            return null;\r\n          }\r\n          if (!tn.skip(Token.NULL)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"null\"\r\n            );\r\n          }\r\n          signature.isNullable = true;\r\n        }\r\n        return signature;\r\n      } else if (isNullableSignature || this.tryParseSignatureIsSignature) {\r\n        this.error(\r\n          DiagnosticCode.Unexpected_token,\r\n          tn.range()\r\n        );\r\n        return null;\r\n      }\r\n\r\n      // Type (',' Type)* ')'\r\n      if (acceptParenthesized) {\r\n        let innerType = this.parseType(tn, false, suppressErrors);\r\n        if (!innerType) return null;\r\n        if (!tn.skip(Token.CLOSEPAREN)) {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(tn.pos), \"}\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n        type = innerType;\r\n        type.range.start = startPos;\r\n        type.range.end = tn.pos;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Unexpected_token,\r\n          tn.range()\r\n        );\r\n        return null;\r\n      }\r\n\r\n    // 'void'\r\n    } else if (token == Token.VOID) {\r\n      type = Node.createType(\r\n        Node.createIdentifierExpression(\"void\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // 'this'\r\n    } else if (token == Token.THIS) {\r\n      type = Node.createType(\r\n        Node.createThisExpression(tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // 'true'\r\n    } else if (token == Token.TRUE || token == Token.FALSE) {\r\n      type = Node.createType(\r\n        Node.createIdentifierExpression(\"bool\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // StringLiteral\r\n    } else if (token == Token.STRINGLITERAL) {\r\n      tn.readString();\r\n      type = Node.createType(\r\n        Node.createIdentifierExpression(\"string\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // Identifier\r\n    } else if (token == Token.IDENTIFIER) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let parameters = new Array<TypeNode>();\r\n      let nullable = false;\r\n\r\n      // Name<T>\r\n      if (tn.skip(Token.LESSTHAN)) {\r\n        do {\r\n          let parameter = this.parseType(tn, true, suppressErrors);\r\n          if (!parameter) return null;\r\n          parameters.push(<TypeNode>parameter);\r\n        } while (tn.skip(Token.COMMA));\r\n        if (!tn.skip(Token.GREATERTHAN)) {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(tn.pos), \">\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n      }\r\n      // ... | null\r\n      if (tn.skip(Token.BAR)) {\r\n        if (tn.skip(Token.NULL)) {\r\n          nullable = true;\r\n        } else {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(tn.pos), \"null\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n      }\r\n      type = Node.createType(identifier, parameters, nullable, tn.range(startPos, tn.pos));\r\n\r\n    } else {\r\n      if (!suppressErrors) {\r\n        this.error(\r\n          DiagnosticCode.Identifier_expected,\r\n          tn.range()\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n    // ... [][]\r\n    while (tn.skip(Token.OPENBRACKET)) {\r\n      let bracketStart = tn.tokenPos;\r\n      if (!tn.skip(Token.CLOSEBRACKET)) {\r\n        if (!suppressErrors) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"]\"\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n      let bracketRange = tn.range(bracketStart, tn.pos);\r\n\r\n      // ...[] | null\r\n      let nullable = false;\r\n      if (tn.skip(Token.BAR)) {\r\n        if (tn.skip(Token.NULL)) {\r\n          nullable = true;\r\n        } else {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"null\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n      }\r\n      type = Node.createType(\r\n        Node.createIdentifierExpression(\"Array\", bracketRange),\r\n        [ type ],\r\n        nullable,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      if (nullable) break;\r\n    }\r\n\r\n    return type;\r\n  }\r\n\r\n  // Indicates whether tryParseSignature determined that it is handling a Signature\r\n  private tryParseSignatureIsSignature: bool = false;\r\n\r\n  /** Parses a function signature, as used in type declarations. */\r\n  tryParseSignature(\r\n    tn: Tokenizer\r\n  ): SignatureNode | null {\r\n\r\n    // at '(': ('...'? Identifier '?'? ':' Type (','  '...'? Identifier '?'? ':' Type)* )? ')' '=>' Type\r\n\r\n    var state = tn.mark();\r\n    var startPos = tn.tokenPos;\r\n    var parameters: ParameterNode[] | null = null;\r\n    var thisType: TypeNode | null = null;\r\n    var isSignature: bool = false;\r\n\r\n    if (tn.skip(Token.CLOSEPAREN)) {\r\n      isSignature = true;\r\n      tn.discard(state);\r\n      parameters = [];\r\n\r\n    } else {\r\n      isSignature = false; // not yet known\r\n      do {\r\n        let kind = ParameterKind.DEFAULT;\r\n        if (tn.skip(Token.DOT_DOT_DOT)) {\r\n          isSignature = true;\r\n          tn.discard(state);\r\n          kind = ParameterKind.REST;\r\n        }\r\n        if (tn.skip(Token.THIS)) {\r\n          if (tn.skip(Token.COLON)) {\r\n            isSignature = true;\r\n            tn.discard(state);\r\n            let t = this.parseType(tn, false);\r\n            if (!t) return null;\r\n            if (t.kind != NodeKind.TYPE) {\r\n              this.error(\r\n                DiagnosticCode.Operation_not_supported,\r\n                t.range\r\n              );\r\n              this.tryParseSignatureIsSignature = true;\r\n              return null;\r\n            }\r\n            thisType = <TypeNode>t;\r\n          } else {\r\n            tn.reset(state);\r\n            this.tryParseSignatureIsSignature = false;\r\n            return null;\r\n          }\r\n        } else if (tn.skipIdentifier()) {\r\n          let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(tn.tokenPos, tn.pos));\r\n          if (tn.skip(Token.QUESTION)) {\r\n            isSignature = true;\r\n            tn.discard(state);\r\n            if (kind == ParameterKind.REST) {\r\n              this.error(\r\n                DiagnosticCode.A_rest_parameter_cannot_be_optional,\r\n                tn.range()\r\n              ); // recoverable\r\n            } else {\r\n              kind = ParameterKind.OPTIONAL;\r\n            }\r\n          }\r\n          if (tn.skip(Token.COLON)) {\r\n            isSignature = true;\r\n            tn.discard(state);\r\n            let type = this.parseType(tn); // not suppressing errors because known\r\n            if (!type) {\r\n              this.tryParseSignatureIsSignature = isSignature;\r\n              return null;\r\n            }\r\n            let param = new ParameterNode();\r\n            param.parameterKind = kind;\r\n            param.name = name;\r\n            param.type = type;\r\n            if (!parameters) parameters = [ param ];\r\n            else parameters.push(param);\r\n          } else {\r\n            if (isSignature) {\r\n              this.error(\r\n                DiagnosticCode.Type_expected,\r\n                tn.range()\r\n              ); // recoverable\r\n            }\r\n          }\r\n        } else {\r\n          if (isSignature) {\r\n            this.error(\r\n              DiagnosticCode.Identifier_expected,\r\n              tn.range()\r\n            );\r\n          } else {\r\n            tn.reset(state);\r\n          }\r\n          this.tryParseSignatureIsSignature = isSignature;\r\n          return null;\r\n        }\r\n      } while (tn.skip(Token.COMMA));\r\n      if (!tn.skip(Token.CLOSEPAREN)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n        this.tryParseSignatureIsSignature = isSignature;\r\n        return null;\r\n      }\r\n    }\r\n\r\n    var returnType: CommonTypeNode | null;\r\n    if (tn.skip(Token.EQUALS_GREATERTHAN)) {\r\n      isSignature = true;\r\n      tn.discard(state);\r\n      returnType = this.parseType(tn);\r\n      if (!returnType) {\r\n        this.tryParseSignatureIsSignature = isSignature;\r\n        return null;\r\n      }\r\n    } else {\r\n      if (isSignature) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"=>\"\r\n        );\r\n      } else {\r\n        tn.reset(state);\r\n      }\r\n      this.tryParseSignatureIsSignature = isSignature;\r\n      return null;\r\n    }\r\n    this.tryParseSignatureIsSignature = true;\r\n    return Node.createSignature(\r\n      parameters || [],\r\n      returnType,\r\n      thisType,\r\n      false,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n  }\r\n\r\n  // statements\r\n\r\n  parseDecorator(\r\n    tn: Tokenizer\r\n  ): DecoratorNode | null {\r\n\r\n    // at '@': Identifier ('.' Identifier)* '(' Arguments\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skipIdentifier()) {\r\n      let name = tn.readIdentifier();\r\n      let expression: Expression = Node.createIdentifierExpression(name, tn.range(startPos, tn.pos));\r\n      while (tn.skip(Token.DOT)) {\r\n        if (tn.skipIdentifier()) {\r\n          name = tn.readIdentifier();\r\n          expression = Node.createPropertyAccessExpression(\r\n            expression,\r\n            Node.createIdentifierExpression(name, tn.range()),\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      let args: Expression[] | null;\r\n      if (tn.skip(Token.OPENPAREN)) {\r\n        args = this.parseArguments(tn);\r\n        if (args) {\r\n          return Node.createDecorator(expression, args, tn.range(startPos, tn.pos));\r\n        }\r\n      } else {\r\n        return Node.createDecorator(expression, null, tn.range(startPos, tn.pos));\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseVariable(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): VariableStatement | null {\r\n\r\n    // at ('const' | 'let' | 'var'): VariableDeclaration (',' VariableDeclaration)* ';'?\r\n\r\n    var members = new Array<VariableDeclaration>();\r\n    do {\r\n      let member = this.parseVariableDeclaration(tn, flags, decorators);\r\n      if (!member) return null;\r\n      members.push(<VariableDeclaration>member);\r\n    } while (tn.skip(Token.COMMA));\r\n\r\n    var ret = Node.createVariableStatement(members, decorators, flags, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseVariableDeclaration(\r\n    tn: Tokenizer,\r\n    parentFlags: CommonFlags,\r\n    parentDecorators: DecoratorNode[] | null\r\n  ): VariableDeclaration | null {\r\n\r\n    // before: Identifier (':' Type)? ('=' Expression)?\r\n\r\n    if (!tn.skipIdentifier()) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var flags = parentFlags;\r\n\r\n    var type: CommonTypeNode | null = null;\r\n    if (tn.skip(Token.COLON)) {\r\n      type = this.parseType(tn);\r\n    }\r\n\r\n    var initializer: Expression | null = null;\r\n    if (tn.skip(Token.EQUALS)) {\r\n      if (flags & CommonFlags.AMBIENT) {\r\n        this.error(\r\n          DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      initializer = this.parseExpression(tn, Precedence.COMMA + 1);\r\n      if (!initializer) return null;\r\n    } else {\r\n      if (flags & CommonFlags.CONST) {\r\n        if (!(flags & CommonFlags.AMBIENT)) {\r\n          this.error(\r\n            DiagnosticCode._const_declarations_must_be_initialized,\r\n            identifier.range\r\n          ); // recoverable\r\n        }\r\n      } else if (!type) { // neither type nor initializer\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          tn.range(tn.pos)\r\n        ); // recoverable\r\n      }\r\n    }\r\n    return Node.createVariableDeclaration(\r\n      identifier,\r\n      type,\r\n      initializer,\r\n      parentDecorators,\r\n      flags,\r\n      Range.join(identifier.range, tn.range())\r\n    );\r\n  }\r\n\r\n  parseEnum(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): EnumDeclaration | null {\r\n\r\n    // at 'enum': Identifier '{' (EnumValueDeclaration (',' EnumValueDeclaration )*)? '}' ';'?\r\n\r\n    if (tn.next() != Token.IDENTIFIER) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    if (tn.next() != Token.OPENBRACE) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n      return null;\r\n    }\r\n    var members = new Array<EnumValueDeclaration>();\r\n    while (!tn.skip(Token.CLOSEBRACE)) {\r\n      let member = this.parseEnumValue(tn, CommonFlags.NONE);\r\n      if (!member) return null;\r\n      members.push(<EnumValueDeclaration>member);\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.CLOSEBRACE)) {\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"}\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n    var ret = Node.createEnumDeclaration(\r\n      identifier,\r\n      members,\r\n      decorators,\r\n      flags,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseEnumValue(\r\n    tn: Tokenizer,\r\n    parentFlags: CommonFlags\r\n  ): EnumValueDeclaration | null {\r\n\r\n    // before: Identifier ('=' Expression)?\r\n\r\n    if (!tn.skipIdentifier()) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var value: Expression | null = null;\r\n    if (tn.skip(Token.EQUALS)) {\r\n      value = this.parseExpression(tn, Precedence.COMMA + 1);\r\n      if (!value) return null;\r\n    }\r\n    return Node.createEnumValueDeclaration(\r\n      identifier,\r\n      value,\r\n      parentFlags,\r\n      Range.join(identifier.range, tn.range())\r\n    );\r\n  }\r\n\r\n  parseReturn(\r\n    tn: Tokenizer\r\n  ): ReturnStatement | null {\r\n\r\n    // at 'return': Expression | (';' | '}' | ...'\\n')\r\n\r\n    var expr: Expression | null = null;\r\n    if (\r\n      tn.peek(true) != Token.SEMICOLON &&\r\n      tn.nextToken != Token.CLOSEBRACE &&\r\n      !tn.nextTokenOnNewLine\r\n    ) {\r\n      if (!(expr = this.parseExpression(tn))) return null;\r\n    }\r\n\r\n    var ret = Node.createReturnStatement(expr, tn.range());\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseTypeParameters(\r\n    tn: Tokenizer\r\n  ): TypeParameterNode[] | null {\r\n\r\n    // at '<': TypeParameter (',' TypeParameter)* '>'\r\n\r\n    var typeParameters = new Array<TypeParameterNode>();\r\n    while (!tn.skip(Token.GREATERTHAN)) {\r\n      let typeParameter = this.parseTypeParameter(tn);\r\n      if (!typeParameter) return null;\r\n      typeParameters.push(<TypeParameterNode>typeParameter);\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.GREATERTHAN)) {\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \">\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n    if (typeParameters.length === 0) {\r\n      this.error(\r\n        DiagnosticCode.Type_parameter_list_cannot_be_empty,\r\n        tn.range()\r\n      ); // recoverable\r\n    }\r\n    return typeParameters;\r\n  }\r\n\r\n  parseTypeParameter(\r\n    tn: Tokenizer\r\n  ): TypeParameterNode | null {\r\n\r\n    // before: Identifier ('extends' Type)?\r\n\r\n    if (tn.next() == Token.IDENTIFIER) {\r\n      let identifier = Node.createIdentifierExpression(\r\n        tn.readIdentifier(),\r\n        tn.range()\r\n      );\r\n      let extendsType: TypeNode | null = null;\r\n      if (tn.skip(Token.EXTENDS)) {\r\n        let t = this.parseType(tn);\r\n        if (!t) return null;\r\n        if (t.kind != NodeKind.TYPE) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            t.range\r\n          );\r\n          return null;\r\n        }\r\n        extendsType = <TypeNode>t;\r\n      }\r\n      return Node.createTypeParameter(\r\n        identifier,\r\n        extendsType,\r\n        Range.join(identifier.range, tn.range())\r\n      );\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private parseParametersThis: TypeNode | null = null;\r\n\r\n  parseParameters(\r\n    tn: Tokenizer,\r\n    isConstructor: bool = false\r\n  ): ParameterNode[] | null {\r\n\r\n    // at '(': (Parameter (',' Parameter)*)? ')'\r\n\r\n    var parameters = new Array<ParameterNode>();\r\n    var seenRest: ParameterNode | null = null;\r\n    var seenOptional = false;\r\n    var reportedRest = false;\r\n    var thisType: CommonTypeNode | null = null;\r\n\r\n    // check if there is a leading `this` parameter\r\n    this.parseParametersThis = null;\r\n    if (tn.skip(Token.THIS)) {\r\n      if (tn.skip(Token.COLON)) {\r\n        thisType = this.parseType(tn); // reports\r\n        if (!thisType) return null;\r\n        if (thisType.kind == NodeKind.TYPE) {\r\n          this.parseParametersThis = <TypeNode>thisType;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            thisType.range\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \":\"\r\n        );\r\n        return null;\r\n      }\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.CLOSEPAREN)) {\r\n          return parameters;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n\r\n    while (!tn.skip(Token.CLOSEPAREN)) {\r\n      let param = this.parseParameter(tn, isConstructor); // reports\r\n      if (!param) return null;\r\n      if (seenRest && !reportedRest) {\r\n        this.error(\r\n          DiagnosticCode.A_rest_parameter_must_be_last_in_a_parameter_list,\r\n          seenRest.name.range\r\n        );\r\n        reportedRest = true;\r\n      }\r\n      switch (param.parameterKind) {\r\n        default: {\r\n          if (seenOptional) {\r\n            this.error(\r\n              DiagnosticCode.A_required_parameter_cannot_follow_an_optional_parameter,\r\n              param.name.range\r\n            );\r\n          }\r\n          break;\r\n        }\r\n        case ParameterKind.OPTIONAL: {\r\n          seenOptional = true;\r\n          break;\r\n        }\r\n        case ParameterKind.REST: {\r\n          seenRest = param;\r\n          break;\r\n        }\r\n      }\r\n      parameters.push(param);\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.CLOSEPAREN)) {\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n    return parameters;\r\n  }\r\n\r\n  parseParameter(\r\n    tn: Tokenizer,\r\n    isConstructor: bool = false\r\n  ): ParameterNode | null {\r\n\r\n    // before: ('public' | 'private' | 'protected' | '...')? Identifier '?'? (':' Type)? ('=' Expression)?\r\n\r\n    var isRest = false;\r\n    var isOptional = false;\r\n    var startRange: Range | null = null;\r\n    var accessFlags: CommonFlags = CommonFlags.NONE;\r\n    if (isConstructor) {\r\n      if (tn.skip(Token.PUBLIC)) {\r\n        startRange = tn.range();\r\n        accessFlags |= CommonFlags.PUBLIC;\r\n      } else if (tn.skip(Token.PROTECTED)) {\r\n        startRange = tn.range();\r\n        accessFlags |= CommonFlags.PROTECTED;\r\n      } else if (tn.skip(Token.PRIVATE)) {\r\n        startRange = tn.range();\r\n        accessFlags |= CommonFlags.PRIVATE;\r\n      }\r\n      if (tn.peek() == Token.READONLY) {\r\n        let state = tn.mark();\r\n        tn.next();\r\n        if (tn.peek() != Token.COLON) { // modifier\r\n          tn.discard(state);\r\n          if (!startRange) startRange = tn.range();\r\n          accessFlags |= CommonFlags.READONLY;\r\n        } else { // identifier\r\n          tn.reset(state);\r\n        }\r\n      }\r\n    }\r\n    if (tn.skip(Token.DOT_DOT_DOT)) {\r\n      if (accessFlags) {\r\n        this.error(\r\n          DiagnosticCode.A_parameter_property_cannot_be_declared_using_a_rest_parameter,\r\n          tn.range()\r\n        );\r\n      } else {\r\n        startRange = tn.range();\r\n      }\r\n      isRest = true;\r\n    }\r\n    if (tn.skipIdentifier()) {\r\n      if (!isRest) startRange = tn.range();\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let type: CommonTypeNode | null = null;\r\n      if (isOptional = tn.skip(Token.QUESTION)) {\r\n        if (isRest) {\r\n          this.error(\r\n            DiagnosticCode.A_rest_parameter_cannot_be_optional,\r\n            identifier.range\r\n          );\r\n        }\r\n      }\r\n      if (tn.skip(Token.COLON)) {\r\n        type = this.parseType(tn);\r\n        if (!type) return null;\r\n      } else {\r\n        type = Node.createOmittedType(tn.range(tn.pos));\r\n      }\r\n      let initializer: Expression | null = null;\r\n      if (tn.skip(Token.EQUALS)) {\r\n        if (isRest) {\r\n          this.error(\r\n            DiagnosticCode.A_rest_parameter_cannot_have_an_initializer,\r\n            identifier.range\r\n          );\r\n        }\r\n        if (isOptional) {\r\n          this.error(\r\n            DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer,\r\n            identifier.range\r\n          );\r\n        } else {\r\n          isOptional = true;\r\n        }\r\n        initializer = this.parseExpression(tn, Precedence.COMMA + 1);\r\n        if (!initializer) return null;\r\n      }\r\n      let param = Node.createParameter(\r\n        identifier,\r\n        type,\r\n        initializer,\r\n        isRest\r\n          ? ParameterKind.REST\r\n          : isOptional\r\n            ? ParameterKind.OPTIONAL\r\n            : ParameterKind.DEFAULT,\r\n        Range.join(<Range>startRange, tn.range())\r\n      );\r\n      param.flags |= accessFlags;\r\n      return param;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseFunction(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): FunctionDeclaration | null {\r\n\r\n    // at 'function':\r\n    //  Identifier\r\n    //  ('<' TypeParameters)?\r\n    //  '(' Parameters (':' Type)?\r\n    //  '{' Statement* '}'\r\n    //  ';'?\r\n\r\n    if (!tn.skipIdentifier()) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range(tn.pos)\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var signatureStart: i32 = -1;\r\n\r\n    var typeParameters: TypeParameterNode[] | null = null;\r\n    if (tn.skip(Token.LESSTHAN)) {\r\n      signatureStart = tn.tokenPos;\r\n      typeParameters = this.parseTypeParameters(tn);\r\n      if (!typeParameters) return null;\r\n      flags |= CommonFlags.GENERIC;\r\n    }\r\n\r\n    if (!tn.skip(Token.OPENPAREN)) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(tn.pos), \"(\"\r\n      );\r\n      return null;\r\n    }\r\n\r\n    if (signatureStart < 0) {\r\n      signatureStart = tn.tokenPos;\r\n    }\r\n\r\n    var parameters = this.parseParameters(tn);\r\n    if (!parameters) return null;\r\n    var thisType = this.parseParametersThis;\r\n\r\n    var isSetter = (flags & CommonFlags.SET) != 0;\r\n    if (isSetter) {\r\n      if (parameters.length != 1) {\r\n        this.error(\r\n          DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\r\n          name.range\r\n        ); // recoverable\r\n      }\r\n      if (parameters.length && parameters[0].initializer) {\r\n        this.error(\r\n          DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\r\n          name.range\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    if (flags & CommonFlags.GET) {\r\n      if (parameters.length) {\r\n        this.error(\r\n          DiagnosticCode.A_get_accessor_cannot_have_parameters,\r\n          name.range\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    var returnType: CommonTypeNode | null = null;\r\n    if (tn.skip(Token.COLON)) {\r\n      returnType = this.parseType(tn, true, isSetter);\r\n      if (!returnType) return null;\r\n    }\r\n\r\n    if (!returnType) {\r\n      returnType = Node.createOmittedType(\r\n        tn.range(tn.pos)\r\n      );\r\n      if (!isSetter) {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          returnType.range\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    var signature = Node.createSignature(\r\n      parameters,\r\n      returnType,\r\n      thisType,\r\n      false,\r\n      tn.range(signatureStart, tn.pos)\r\n    );\r\n\r\n    var body: Statement | null = null;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      if (flags & CommonFlags.AMBIENT) {\r\n        this.error(\r\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n\r\n      body = this.parseBlockStatement(tn, false);\r\n      if (!body) return null;\r\n    } else if (!(flags & CommonFlags.AMBIENT)) {\r\n      this.error(\r\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n        tn.range(tn.pos)\r\n      );\r\n    }\r\n\r\n    var ret = Node.createFunctionDeclaration(\r\n      name,\r\n      typeParameters,\r\n      signature,\r\n      body,\r\n      decorators,\r\n      flags,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseFunctionExpression(tn: Tokenizer): FunctionExpression | null {\r\n    var startPos = tn.tokenPos;\r\n    var name: IdentifierExpression;\r\n    var isArrow = false;\r\n\r\n    // either at 'function':\r\n    //  Identifier?\r\n    //  '(' Parameters (':' Type)?\r\n    //  Statement\r\n\r\n    if (tn.token == Token.FUNCTION) {\r\n      if (tn.skipIdentifier()) {\r\n        name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      } else { // empty name\r\n        name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\r\n      }\r\n      if (!tn.skip(Token.OPENPAREN)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(tn.pos), \"(\"\r\n        );\r\n        return null;\r\n      }\r\n\r\n    // or at '(' of arrow function:\r\n    //  Parameters (':' Type)?\r\n    //  Statement\r\n\r\n    } else {\r\n      isArrow = true;\r\n      assert(tn.token == Token.OPENPAREN);\r\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.tokenPos));\r\n    }\r\n\r\n    // TODO: type parameters? doesn't seem worth it.\r\n\r\n    var signatureStart = tn.pos;\r\n    var parameters = this.parseParameters(tn);\r\n    if (!parameters) return null;\r\n\r\n    return this.parseFunctionExpressionCommon(tn, name, parameters, isArrow, startPos, signatureStart);\r\n  }\r\n\r\n  private parseFunctionExpressionCommon(\r\n    tn: Tokenizer,\r\n    name: IdentifierExpression,\r\n    parameters: ParameterNode[],\r\n    isArrow: bool,\r\n    startPos: i32 = -1,\r\n    signatureStart: i32 = -1\r\n  ): FunctionExpression | null {\r\n    if (startPos < 0) startPos = name.range.start;\r\n    if (signatureStart < 0) signatureStart = startPos;\r\n\r\n    var returnType: CommonTypeNode | null = null;\r\n    if (tn.skip(Token.COLON)) {\r\n      returnType = this.parseType(tn);\r\n      if (!returnType) return null;\r\n    } else {\r\n      returnType = Node.createOmittedType(tn.range(tn.pos));\r\n      this.error(\r\n        DiagnosticCode.Type_expected,\r\n        returnType.range\r\n      ); // recoverable\r\n    }\r\n\r\n    if (isArrow) {\r\n      if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(tn.pos), \"=>\"\r\n        );\r\n        return null;\r\n      }\r\n    }\r\n\r\n    var signature = Node.createSignature(\r\n      parameters,\r\n      returnType,\r\n      null, // TODO?\r\n      false,\r\n      tn.range(signatureStart, tn.pos)\r\n    );\r\n\r\n    var body: Statement | null;\r\n    if (isArrow) {\r\n      body = this.parseStatement(tn, false);\r\n    } else {\r\n      if (!tn.skip(Token.OPENBRACE)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(tn.pos), \"{\"\r\n        );\r\n        return null;\r\n      }\r\n      body = this.parseBlockStatement(tn, false);\r\n    }\r\n    if (!body) return null;\r\n\r\n    var declaration = Node.createFunctionDeclaration(\r\n      name,\r\n      null,\r\n      signature,\r\n      body,\r\n      null,\r\n      isArrow ? CommonFlags.ARROW : CommonFlags.NONE,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    return Node.createFunctionExpression(declaration);\r\n  }\r\n\r\n  parseClassOrInterface(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): ClassDeclaration | null {\r\n\r\n    // at ('class' | 'interface'):\r\n    //   Identifier\r\n    //   ('<' TypeParameters)?\r\n    //   ('extends' Type)?\r\n    //   ('implements' Type (',' Type)*)?\r\n    //   '{' ClassMember* '}'\r\n\r\n    var isInterface = tn.token == Token.INTERFACE;\r\n\r\n    if (!tn.skipIdentifier()) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var identifier = Node.createIdentifierExpression(\r\n      tn.readIdentifier(),\r\n      tn.range()\r\n    );\r\n\r\n    var typeParameters: TypeParameterNode[] | null;\r\n    if (tn.skip(Token.LESSTHAN)) {\r\n      typeParameters = this.parseTypeParameters(tn);\r\n      if (!typeParameters) return null;\r\n      flags |= CommonFlags.GENERIC;\r\n    } else {\r\n      typeParameters = [];\r\n    }\r\n\r\n    var extendsType: TypeNode | null = null;\r\n    if (tn.skip(Token.EXTENDS)) {\r\n      let t = this.parseType(tn);\r\n      if (!t) return null;\r\n      if (t.kind != NodeKind.TYPE) {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          t.range\r\n        );\r\n        return null;\r\n      }\r\n      extendsType = <TypeNode>t;\r\n    }\r\n\r\n    var implementsTypes: TypeNode[] | null = null;\r\n    if (tn.skip(Token.IMPLEMENTS)) {\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode.Interface_declaration_cannot_have_implements_clause,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      do {\r\n        let type = this.parseType(tn);\r\n        if (!type) return null;\r\n        if (!isInterface) {\r\n          if (!implementsTypes) implementsTypes = [];\r\n          implementsTypes.push(<TypeNode>type);\r\n        }\r\n      } while (tn.skip(Token.COMMA));\r\n    }\r\n\r\n    if (!tn.skip(Token.OPENBRACE)) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var members = new Array<DeclarationStatement>();\r\n    var declaration: ClassDeclaration;\r\n    if (isInterface) {\r\n      assert(!implementsTypes);\r\n      declaration = Node.createInterfaceDeclaration(\r\n        identifier,\r\n        typeParameters,\r\n        extendsType,\r\n        members,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n    } else {\r\n      declaration = Node.createClassDeclaration(\r\n        identifier,\r\n        typeParameters,\r\n        extendsType,\r\n        implementsTypes,\r\n        members,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n    }\r\n    if (!tn.skip(Token.CLOSEBRACE)) {\r\n      do {\r\n        let member = this.parseClassMember(tn, declaration);\r\n        if (!member) return null;\r\n        member.parent = declaration;\r\n        members.push(<DeclarationStatement>member);\r\n      } while (!tn.skip(Token.CLOSEBRACE));\r\n    }\r\n    return declaration;\r\n  }\r\n\r\n  parseClassMember(\r\n    tn: Tokenizer,\r\n    parent: ClassDeclaration\r\n  ): DeclarationStatement | null {\r\n\r\n    // before:\r\n    //   ('public' | 'private' | 'protected')?\r\n    //   ('static' | 'abstract')?\r\n    //   'readonly'?\r\n    //   ('get' | 'set')?\r\n    //   Identifier ...\r\n\r\n    var startPos = tn.pos;\r\n\r\n    var decorators = new Array<DecoratorNode>();\r\n    while (tn.skip(Token.AT)) {\r\n      let decorator = this.parseDecorator(tn);\r\n      if (!decorator) break;\r\n      decorators.push(<DecoratorNode>decorator);\r\n    }\r\n\r\n    var flags = parent.flags & CommonFlags.AMBIENT; // inherit\r\n\r\n    if (tn.skip(Token.PUBLIC)) {\r\n      flags |= CommonFlags.PUBLIC;\r\n    } else if (tn.skip(Token.PRIVATE)) {\r\n      flags |= CommonFlags.PRIVATE;\r\n    } else if (tn.skip(Token.PROTECTED)) {\r\n      flags |= CommonFlags.PROTECTED;\r\n    }\r\n\r\n    var staticStart: i32 = 0;\r\n    var staticEnd: i32 = 0;\r\n    var abstractStart: i32 = 0;\r\n    var abstractEnd: i32 = 0;\r\n    if (tn.skip(Token.STATIC)) {\r\n      flags |= CommonFlags.STATIC;\r\n      staticStart = tn.tokenPos;\r\n      staticEnd = tn.pos;\r\n    } else {\r\n      if (tn.skip(Token.ABSTRACT)) {\r\n        flags |= (CommonFlags.ABSTRACT | CommonFlags.INSTANCE);\r\n        abstractStart = tn.tokenPos;\r\n        abstractEnd = tn.pos;\r\n      } else {\r\n        flags |= CommonFlags.INSTANCE;\r\n      }\r\n      if (parent.flags & CommonFlags.GENERIC) {\r\n        flags |= CommonFlags.GENERIC_CONTEXT;\r\n      }\r\n    }\r\n\r\n    var readonlyStart: i32 = 0;\r\n    var readonlyEnd: i32 = 0;\r\n    if (tn.skip(Token.READONLY)) {\r\n      flags |= CommonFlags.READONLY;\r\n      readonlyStart = tn.tokenPos;\r\n      readonlyEnd = tn.pos;\r\n    }\r\n\r\n    // check if accessor: ('get' | 'set') ^\\n Identifier\r\n    var state = tn.mark();\r\n    var isConstructor = false;\r\n    var isGetter = false;\r\n    var getStart: i32 = 0;\r\n    var getEnd: i32 = 0;\r\n    var isSetter = false;\r\n    var setStart: i32 = 0;\r\n    var setEnd: i32 = 0;\r\n    if (tn.skip(Token.GET)) {\r\n      if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n        flags |= CommonFlags.GET;\r\n        isGetter = true;\r\n        setStart = tn.tokenPos;\r\n        setEnd = tn.pos;\r\n        if (flags & CommonFlags.READONLY) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n          ); // recoverable\r\n        }\r\n      } else {\r\n        tn.reset(state);\r\n      }\r\n    } else if (tn.skip(Token.SET)) {\r\n      if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n        flags |= CommonFlags.SET | CommonFlags.SET;\r\n        isSetter = true;\r\n        setStart = tn.tokenPos;\r\n        setEnd = tn.pos;\r\n        if (flags & CommonFlags.READONLY) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n          ); // recoverable\r\n        }\r\n      } else {\r\n        tn.reset(state);\r\n      }\r\n    } else if (tn.skip(Token.CONSTRUCTOR)) {\r\n      flags |= CommonFlags.CONSTRUCTOR;\r\n      isConstructor = true;\r\n      if (flags & CommonFlags.STATIC) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(staticStart, staticEnd), \"static\"\r\n        ); // recoverable\r\n      }\r\n      if (flags & CommonFlags.ABSTRACT) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(abstractStart, abstractEnd), \"abstract\"\r\n        ); // recoverable\r\n      }\r\n      if (flags & CommonFlags.READONLY) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    if (!isConstructor && !tn.skipIdentifier()) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var name = isConstructor\r\n      ? Node.createConstructorExpression(tn.range())\r\n      : Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var typeParameters: TypeParameterNode[] | null = null;\r\n    if (tn.skip(Token.LESSTHAN)) {\r\n      let typeParametersStart = tn.tokenPos;\r\n      typeParameters = this.parseTypeParameters(tn);\r\n      if (!typeParameters) return null;\r\n      if (isConstructor) {\r\n        this.error(\r\n          DiagnosticCode.Type_parameters_cannot_appear_on_a_constructor_declaration,\r\n          tn.range(typeParametersStart, tn.pos)\r\n        ); // recoverable\r\n      } else if (isGetter || isSetter) {\r\n        this.error(\r\n          DiagnosticCode.An_accessor_cannot_have_type_parameters,\r\n          tn.range(typeParametersStart, tn.pos)\r\n        ); // recoverable\r\n      } else {\r\n        flags |= CommonFlags.GENERIC;\r\n      }\r\n    }\r\n\r\n    // method: '(' Parameters (':' Type)? '{' Statement* '}' ';'?\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let signatureStart = tn.tokenPos;\r\n      let parameters = this.parseParameters(tn, isConstructor);\r\n      if (!parameters) return null;\r\n      let thisType = this.parseParametersThis;\r\n      if (isConstructor) {\r\n        for (let i = 0, k = parameters.length; i < k; ++i) {\r\n          let parameter = parameters[i];\r\n          if (parameter.isAny(\r\n            CommonFlags.PUBLIC |\r\n            CommonFlags.PROTECTED |\r\n            CommonFlags.PRIVATE |\r\n            CommonFlags.READONLY\r\n          )) {\r\n            let implicitFieldDeclaration = Node.createFieldDeclaration(\r\n              parameter.name,\r\n              parameter.type,\r\n              null, // initialized via parameter\r\n              null,\r\n              parameter.flags | CommonFlags.INSTANCE,\r\n              parameter.range\r\n            );\r\n            implicitFieldDeclaration.parameterIndex = i;\r\n            implicitFieldDeclaration.parent = parent;\r\n            parameter.implicitFieldDeclaration = implicitFieldDeclaration;\r\n            parent.members.push(implicitFieldDeclaration);\r\n          }\r\n        }\r\n      } else if (isGetter) {\r\n        if (parameters.length) {\r\n          this.error(\r\n            DiagnosticCode.A_get_accessor_cannot_have_parameters,\r\n            name.range\r\n          );\r\n        }\r\n      } else if (isSetter) {\r\n        if (parameters.length != 1) {\r\n          this.error(\r\n            DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\r\n            name.range\r\n          );\r\n        }\r\n        if (parameters.length && parameters[0].initializer) {\r\n          this.error(\r\n            DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\r\n            name.range\r\n          );\r\n        }\r\n      }\r\n\r\n      let returnType: CommonTypeNode | null = null;\r\n      if (tn.skip(Token.COLON)) {\r\n        if (name.kind == NodeKind.CONSTRUCTOR) {\r\n          this.error(\r\n            DiagnosticCode.Type_annotation_cannot_appear_on_a_constructor_declaration,\r\n            tn.range()\r\n          );\r\n        } else if (isSetter) {\r\n          this.error(\r\n            DiagnosticCode.A_set_accessor_cannot_have_a_return_type_annotation,\r\n            tn.range()\r\n          );\r\n        }\r\n        returnType = this.parseType(tn, name.kind == NodeKind.CONSTRUCTOR || isSetter);\r\n        if (!returnType) return null;\r\n      } else {\r\n        returnType = Node.createOmittedType(tn.range(tn.pos));\r\n        if (!isSetter && name.kind != NodeKind.CONSTRUCTOR) {\r\n          this.error(\r\n            DiagnosticCode.Type_expected,\r\n            returnType.range\r\n          ); // recoverable\r\n        }\r\n      }\r\n\r\n      let signature = Node.createSignature(\r\n        parameters,\r\n        returnType,\r\n        thisType,\r\n        false,\r\n        tn.range(signatureStart, tn.pos)\r\n      );\r\n\r\n      let body: Statement | null = null;\r\n      if (tn.skip(Token.OPENBRACE)) {\r\n        if (flags & CommonFlags.AMBIENT) {\r\n          this.error(\r\n            DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\r\n            tn.range()\r\n          ); // recoverable\r\n        }\r\n        body = this.parseBlockStatement(tn, false);\r\n        if (!body) return null;\r\n      } else if (!(flags & CommonFlags.AMBIENT)) {\r\n        this.error(\r\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n\r\n      let retMethod = Node.createMethodDeclaration(\r\n        name,\r\n        typeParameters,\r\n        signature,\r\n        body,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      tn.skip(Token.SEMICOLON);\r\n      return retMethod;\r\n\r\n    } else if (isConstructor) {\r\n      this.error(\r\n        DiagnosticCode.Constructor_implementation_is_missing,\r\n        name.range\r\n      );\r\n\r\n    } else if (isGetter || isSetter) {\r\n      this.error(\r\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n        name.range\r\n      );\r\n\r\n    // field: (':' Type)? ('=' Expression)? ';'?\r\n    } else {\r\n      if (flags & CommonFlags.ABSTRACT) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(abstractStart, abstractEnd), \"abstract\"\r\n        ); // recoverable\r\n      }\r\n\r\n      if (flags & CommonFlags.GET) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(getStart, getEnd), \"get\"\r\n        ); // recoverable\r\n      }\r\n\r\n      if (flags & CommonFlags.SET) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(setStart, setEnd), \"set\"\r\n        ); // recoverable\r\n      }\r\n\r\n      let type: CommonTypeNode | null = null;\r\n      if (tn.skip(Token.COLON)) {\r\n        type = this.parseType(tn);\r\n        if (!type) return null;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      let initializer: Expression | null = null;\r\n      if (tn.skip(Token.EQUALS)) {\r\n        initializer = this.parseExpression(tn);\r\n        if (!initializer) return null;\r\n      }\r\n      let retField = Node.createFieldDeclaration(\r\n        name,\r\n        type,\r\n        initializer,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      tn.skip(Token.SEMICOLON);\r\n      return retField;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseNamespace(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): NamespaceDeclaration | null {\r\n\r\n    // at 'namespace': Identifier '{' (Variable | Function)* '}'\r\n\r\n    if (tn.skipIdentifier()) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      if (tn.skip(Token.OPENBRACE)) {\r\n        let members = new Array<Statement>();\r\n        let ns = Node.createNamespaceDeclaration(\r\n          identifier,\r\n          members,\r\n          decorators,\r\n          flags,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          let member = this.parseTopLevelStatement(tn, ns);\r\n          if (!member) return null;\r\n          member.parent = ns;\r\n          members.push(member);\r\n        }\r\n        tn.skip(Token.SEMICOLON);\r\n        return ns;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"{\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExport(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    startPos: i32\r\n  ): ExportStatement | null {\r\n\r\n    // at 'export': '{' ExportMember (',' ExportMember)* }' ('from' StringLiteral)? ';'?\r\n\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      let members = new Array<ExportMember>();\r\n      while (!tn.skip(Token.CLOSEBRACE)) {\r\n          let member = this.parseExportMember(tn);\r\n          if (!member) return null;\r\n          members.push(member);\r\n        if (!tn.skip(Token.COMMA)) {\r\n          if (tn.skip(Token.CLOSEBRACE)) {\r\n            break;\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"}\"\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n      }\r\n      let path: StringLiteralExpression | null = null;\r\n      if (tn.skip(Token.FROM)) {\r\n        if (tn.skip(Token.STRINGLITERAL)) {\r\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.String_literal_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      let ret = Node.createExportStatement(members, path, flags, tn.range(startPos, tn.pos));\r\n      let internalPath = ret.internalPath;\r\n      if (internalPath !== null && !this.seenlog.has(internalPath)) {\r\n        this.backlog.push(internalPath);\r\n        this.seenlog.add(internalPath);\r\n      }\r\n      tn.skip(Token.SEMICOLON);\r\n      return ret;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExportMember(\r\n    tn: Tokenizer\r\n  ): ExportMember | null {\r\n\r\n    // before: Identifier ('as' Identifier)?\r\n\r\n    if (tn.skipIdentifier()) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let asIdentifier: IdentifierExpression | null = null;\r\n      if (tn.skip(Token.AS)) {\r\n        if (tn.skipIdentifierName()) {\r\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      return Node.createExportMember(\r\n        identifier,\r\n        asIdentifier,\r\n        asIdentifier\r\n          ? Range.join(identifier.range, asIdentifier.range)\r\n          : identifier.range\r\n      );\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseImport(\r\n    tn: Tokenizer\r\n  ): ImportStatement | null {\r\n\r\n    // at 'import':\r\n    //  ('{' (ImportMember (',' ImportMember)* '}') | ('*' 'as' Identifier)?\r\n    //  'from' StringLiteral ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var members: ImportDeclaration[] | null = null;\r\n    var namespaceName: IdentifierExpression | null = null;\r\n    var skipFrom = false;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      members = new Array();\r\n      while (!tn.skip(Token.CLOSEBRACE)) {\r\n        let member = this.parseImportDeclaration(tn);\r\n        if (!member) return null;\r\n        members.push(member);\r\n        if (!tn.skip(Token.COMMA)) {\r\n          if (tn.skip(Token.CLOSEBRACE)) {\r\n            break;\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"}\"\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n      }\r\n    } else if (tn.skip(Token.ASTERISK)) {\r\n      if (tn.skip(Token.AS)) {\r\n        if (tn.skipIdentifier()) {\r\n          namespaceName = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"as\"\r\n        );\r\n        return null;\r\n      }\r\n    } else {\r\n      skipFrom = true;\r\n    }\r\n\r\n    if (skipFrom || tn.skip(Token.FROM)) {\r\n      if (tn.skip(Token.STRINGLITERAL)) {\r\n        let path = Node.createStringLiteralExpression(tn.readString(), tn.range());\r\n        let ret: ImportStatement;\r\n        if (namespaceName) {\r\n          assert(!members);\r\n          ret = Node.createImportStatementWithWildcard(namespaceName, path, tn.range(startPos, tn.pos));\r\n        } else {\r\n          ret = Node.createImportStatement(members, path, tn.range(startPos, tn.pos));\r\n        }\r\n        let internalPath = ret.internalPath;\r\n        if (!this.seenlog.has(internalPath)) {\r\n          this.backlog.push(internalPath);\r\n          this.seenlog.add(internalPath);\r\n        }\r\n        tn.skip(Token.SEMICOLON);\r\n        return ret;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.String_literal_expected,\r\n          tn.range()\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"from\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseImportDeclaration(\r\n    tn: Tokenizer\r\n  ): ImportDeclaration | null {\r\n\r\n    // before: Identifier ('as' Identifier)?\r\n\r\n    if (tn.skipIdentifierName()) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let asIdentifier: IdentifierExpression | null = null;\r\n      if (tn.skip(Token.AS)) {\r\n        if (tn.skipIdentifier()) {\r\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      return Node.createImportDeclaration(\r\n        identifier,\r\n        asIdentifier,\r\n        asIdentifier\r\n          ? Range.join(identifier.range, asIdentifier.range)\r\n          : identifier.range\r\n      );\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExportImport(\r\n    tn: Tokenizer,\r\n    startPos: i32\r\n  ): ExportImportStatement | null {\r\n\r\n    // at 'export' 'import': Identifier ('=' Identifier)? ';'?\r\n\r\n    if (tn.skipIdentifier()) {\r\n      let asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      if (tn.skip(Token.EQUALS)) {\r\n        if (tn.skipIdentifier()) {\r\n          let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n          let ret = Node.createExportImportStatement(identifier, asIdentifier, tn.range(startPos, tn.pos));\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"=\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseStatement(\r\n    tn: Tokenizer,\r\n    topLevel: bool = false\r\n  ): Statement | null {\r\n\r\n    // at previous token\r\n\r\n    var state = tn.mark();\r\n    var token = tn.next();\r\n    var statement: Statement | null = null;\r\n    switch (token) {\r\n      case Token.BREAK: {\r\n        statement = this.parseBreak(tn);\r\n        break;\r\n      }\r\n      case Token.CONST: {\r\n        statement = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.CONTINUE: {\r\n        statement = this.parseContinue(tn);\r\n        break;\r\n      }\r\n      case Token.DO: {\r\n        statement = this.parseDoStatement(tn);\r\n        break;\r\n      }\r\n      case Token.FOR: {\r\n        statement = this.parseForStatement(tn);\r\n        break;\r\n      }\r\n      case Token.IF: {\r\n        statement = this.parseIfStatement(tn);\r\n        break;\r\n      }\r\n      case Token.LET: {\r\n        statement = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.VAR: {\r\n        statement = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.OPENBRACE: {\r\n        statement = this.parseBlockStatement(tn, topLevel);\r\n        break;\r\n      }\r\n      case Token.RETURN: {\r\n        if (topLevel) {\r\n          this.error(\r\n            DiagnosticCode.A_return_statement_can_only_be_used_within_a_function_body,\r\n            tn.range()\r\n          ); // recoverable\r\n        }\r\n        statement = this.parseReturn(tn);\r\n        break;\r\n      }\r\n      case Token.SEMICOLON: {\r\n        return Node.createEmptyStatement(tn.range(tn.tokenPos));\r\n      }\r\n      case Token.SWITCH: {\r\n        statement = this.parseSwitchStatement(tn);\r\n        break;\r\n      }\r\n      case Token.THROW: {\r\n        statement = this.parseThrowStatement(tn);\r\n        break;\r\n      }\r\n      case Token.TRY: {\r\n        statement = this.parseTryStatement(tn);\r\n        break;\r\n      }\r\n      case Token.VOID: {\r\n        statement = this.parseVoidStatement(tn);\r\n        break;\r\n      }\r\n      case Token.WHILE: {\r\n        statement = this.parseWhileStatement(tn);\r\n        break;\r\n      }\r\n      case Token.TYPE: { // also identifier\r\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\r\n          statement = this.parseTypeDeclaration(tn, CommonFlags.NONE, null, tn.tokenPos);\r\n          break;\r\n        }\r\n        // fall-through\r\n      }\r\n      default: {\r\n        tn.reset(state);\r\n        statement = this.parseExpressionStatement(tn);\r\n        break;\r\n      }\r\n    }\r\n    if (!statement) { // has been reported\r\n      tn.reset(state);\r\n      this.skipStatement(tn);\r\n    } else {\r\n      tn.discard(state);\r\n    }\r\n    return statement;\r\n  }\r\n\r\n  parseBlockStatement(\r\n    tn: Tokenizer,\r\n    topLevel: bool\r\n  ): BlockStatement | null {\r\n\r\n    // at '{': Statement* '}' ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var statements = new Array<Statement>();\r\n    while (!tn.skip(Token.CLOSEBRACE)) {\r\n      let state = tn.mark();\r\n      let statement = this.parseStatement(tn, topLevel);\r\n      if (!statement) {\r\n        tn.reset(state);\r\n        this.skipStatement(tn);\r\n      } else {\r\n        tn.discard(state);\r\n        statements.push(statement);\r\n      }\r\n    }\r\n    var ret = Node.createBlockStatement(statements, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseBreak(\r\n    tn: Tokenizer\r\n  ): BreakStatement | null {\r\n\r\n    // at 'break': Identifier? ';'?\r\n\r\n    var identifier: IdentifierExpression | null = null;\r\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n      tn.next(IdentifierHandling.PREFER);\r\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    }\r\n    var ret = Node.createBreakStatement(identifier, tn.range());\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseContinue(\r\n    tn: Tokenizer\r\n  ): ContinueStatement | null {\r\n\r\n    // at 'continue': Identifier? ';'?\r\n\r\n    var identifier: IdentifierExpression | null = null;\r\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n      tn.next(IdentifierHandling.PREFER);\r\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    }\r\n    var ret = Node.createContinueStatement(identifier, tn.range());\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseDoStatement(\r\n    tn: Tokenizer\r\n  ): DoStatement | null {\r\n\r\n    // at 'do': Statement 'while' '(' Expression ')' ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var statement = this.parseStatement(tn);\r\n    if (!statement) return null;\r\n\r\n    if (tn.skip(Token.WHILE)) {\r\n\r\n      if (tn.skip(Token.OPENPAREN)) {\r\n        let condition = this.parseExpression(tn);\r\n        if (!condition) return null;\r\n\r\n        if (tn.skip(Token.CLOSEPAREN)) {\r\n          let ret = Node.createDoStatement(<Statement>statement, <Expression>condition, tn.range(startPos, tn.pos));\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"(\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"while\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExpressionStatement(\r\n    tn: Tokenizer\r\n  ): ExpressionStatement | null {\r\n\r\n    // at previous token\r\n\r\n    var expr = this.parseExpression(tn);\r\n    if (!expr) return null;\r\n\r\n    var ret = Node.createExpressionStatement(expr);\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseForStatement(\r\n    tn: Tokenizer\r\n  ): ForStatement | null {\r\n\r\n    // at 'for': '(' Statement? Expression? ';' Expression? ')' Statement\r\n\r\n    var startPos = tn.tokenPos;\r\n\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let initializer: Statement | null = null;\r\n\r\n      if (tn.skip(Token.CONST)) {\r\n        initializer = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\r\n      } else if (tn.skip(Token.LET)) {\r\n        initializer = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\r\n      } else if (tn.skip(Token.VAR)) {\r\n        initializer = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\r\n\r\n      } else if (!tn.skip(Token.SEMICOLON)) {\r\n        initializer = this.parseExpressionStatement(tn);\r\n        if (!initializer) return null;\r\n      }\r\n\r\n      if (tn.token == Token.SEMICOLON) {\r\n        let condition: ExpressionStatement | null = null;\r\n        if (!tn.skip(Token.SEMICOLON)) {\r\n          condition = this.parseExpressionStatement(tn);\r\n          if (!condition) return null;\r\n        }\r\n\r\n        if (tn.token == Token.SEMICOLON) {\r\n          let incrementor: Expression | null = null;\r\n          if (!tn.skip(Token.CLOSEPAREN)) {\r\n            incrementor = this.parseExpression(tn);\r\n            if (!incrementor) return null;\r\n\r\n            if (!tn.skip(Token.CLOSEPAREN)) {\r\n              this.error(\r\n                DiagnosticCode._0_expected,\r\n                tn.range(), \")\"\r\n              );\r\n              return null;\r\n            }\r\n          }\r\n\r\n          let statement = this.parseStatement(tn);\r\n          if (!statement) return null;\r\n\r\n          return Node.createForStatement(\r\n            initializer,\r\n            condition\r\n              ? condition.expression\r\n              : null,\r\n            incrementor,\r\n            statement,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \";\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \";\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseIfStatement(\r\n    tn: Tokenizer\r\n  ): IfStatement | null {\r\n\r\n    // at 'if': '(' Expression ')' Statement ('else' Statement)?\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let condition = this.parseExpression(tn);\r\n      if (!condition) return null;\r\n      if (tn.skip(Token.CLOSEPAREN)) {\r\n        let statement = this.parseStatement(tn);\r\n        if (!statement) return null;\r\n        let elseStatement: Statement | null = null;\r\n        if (tn.skip(Token.ELSE)) {\r\n          elseStatement = this.parseStatement(tn);\r\n          if (!elseStatement) return null;\r\n        }\r\n        return Node.createIfStatement(\r\n          condition,\r\n          statement,\r\n          elseStatement,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseSwitchStatement(\r\n    tn: Tokenizer\r\n  ): SwitchStatement | null {\r\n\r\n    // at 'switch': '(' Expression ')' '{' SwitchCase* '}' ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let condition = this.parseExpression(tn);\r\n      if (!condition) return null;\r\n      if (tn.skip(Token.CLOSEPAREN)) {\r\n        if (tn.skip(Token.OPENBRACE)) {\r\n          let cases = new Array<SwitchCase>();\r\n          while (!tn.skip(Token.CLOSEBRACE)) {\r\n            let case_ = this.parseSwitchCase(tn);\r\n            if (!case_) return null;\r\n            cases.push(<SwitchCase>case_);\r\n          }\r\n          let ret = Node.createSwitchStatement(condition, cases, tn.range(startPos, tn.pos));\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"{\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseSwitchCase(\r\n    tn: Tokenizer\r\n  ): SwitchCase | null {\r\n\r\n    var startPos = tn.tokenPos;\r\n    var statements: Statement[],\r\n        statement: Statement | null;\r\n\r\n    // 'case' Expression ':' Statement*\r\n\r\n    if (tn.skip(Token.CASE)) {\r\n      let label = this.parseExpression(tn);\r\n      if (!label) return null;\r\n      if (tn.skip(Token.COLON)) {\r\n        statements = new Array<Statement>();\r\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\r\n          statement = this.parseStatement(tn);\r\n          if (!statement) return null;\r\n          statements.push(statement);\r\n        }\r\n        return Node.createSwitchCase(label, statements, tn.range(startPos, tn.pos));\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \":\"\r\n        );\r\n      }\r\n\r\n    // 'default' ':' Statement*\r\n\r\n    } else if (tn.skip(Token.DEFAULT)) {\r\n      if (tn.skip(Token.COLON)) {\r\n        statements = new Array<Statement>();\r\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\r\n          statement = this.parseStatement(tn);\r\n          if (!statement) return null;\r\n          statements.push(statement);\r\n        }\r\n        return Node.createSwitchCase(null, statements, tn.range(startPos, tn.pos));\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \":\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._case_or_default_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseThrowStatement(\r\n    tn: Tokenizer\r\n  ): ThrowStatement | null {\r\n\r\n    // at 'throw': Expression ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var expression = this.parseExpression(tn);\r\n    if (!expression) return null;\r\n    var ret = Node.createThrowStatement(<Expression>expression, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseTryStatement(\r\n    tn: Tokenizer\r\n  ): TryStatement | null {\r\n\r\n    // at 'try':\r\n    //   '{' Statement* '}'\r\n    //   ('catch' '(' VariableMember ')' '{' Statement* '}')?\r\n    //   ('finally' '{' Statement* '}'? ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var stmt: Statement | null;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      let statements = new Array<Statement>();\r\n      while (!tn.skip(Token.CLOSEBRACE)) {\r\n        stmt = this.parseStatement(tn);\r\n        if (!stmt) return null;\r\n        statements.push(<Statement>stmt);\r\n      }\r\n      let catchVariable: IdentifierExpression | null = null;\r\n      let catchStatements: Statement[] | null = null;\r\n      let finallyStatements: Statement[] | null = null;\r\n      if (tn.skip(Token.CATCH)) {\r\n        if (!tn.skip(Token.OPENPAREN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"(\"\r\n          );\r\n          return null;\r\n        }\r\n        if (!tn.skipIdentifier()) {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n        catchVariable = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        if (!tn.skip(Token.CLOSEPAREN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n        if (!tn.skip(Token.OPENBRACE)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"{\"\r\n          );\r\n          return null;\r\n        }\r\n        catchStatements = [];\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          stmt = this.parseStatement(tn);\r\n          if (!stmt) return null;\r\n          catchStatements.push(<Statement>stmt);\r\n        }\r\n      }\r\n      if (tn.skip(Token.FINALLY)) {\r\n        if (!tn.skip(Token.OPENBRACE)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"{\"\r\n          );\r\n          return null;\r\n        }\r\n        finallyStatements = [];\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          stmt = this.parseStatement(tn);\r\n          if (!stmt) return null;\r\n          finallyStatements.push(<Statement>stmt);\r\n        }\r\n      }\r\n      if (!(catchStatements || finallyStatements)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"catch\"\r\n        );\r\n        return null;\r\n      }\r\n      let ret = Node.createTryStatement(\r\n        statements,\r\n        catchVariable,\r\n        catchStatements,\r\n        finallyStatements,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      tn.skip(Token.SEMICOLON);\r\n      return ret;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseTypeDeclaration(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): TypeDeclaration | null {\r\n\r\n    // at 'type': Identifier ('<' TypeParameters '>')? '=' Type ';'?\r\n\r\n    if (tn.skipIdentifier()) {\r\n      let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let typeParameters: TypeParameterNode[] | null = null;\r\n      if (tn.skip(Token.LESSTHAN)) {\r\n        typeParameters = this.parseTypeParameters(tn);\r\n        if (!typeParameters) return null;\r\n        flags |= CommonFlags.GENERIC;\r\n      }\r\n      if (tn.skip(Token.EQUALS)) {\r\n        let type = this.parseType(tn);\r\n        if (!type) return null;\r\n        let ret = Node.createTypeDeclaration(\r\n          name,\r\n          typeParameters,\r\n          type,\r\n          decorators,\r\n          flags,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n        tn.skip(Token.SEMICOLON);\r\n        return ret;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"=\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseVoidStatement(\r\n    tn: Tokenizer\r\n  ): VoidStatement | null {\r\n\r\n    // at 'void': Expression ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var expression = this.parseExpression(tn, Precedence.GROUPING);\r\n    if (!expression) return null;\r\n    var ret = Node.createVoidStatement(expression, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseWhileStatement(\r\n    tn: Tokenizer\r\n  ): WhileStatement | null {\r\n\r\n    // at 'while': '(' Expression ')' Statement ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let expression = this.parseExpression(tn);\r\n      if (!expression) return null;\r\n      if (tn.skip(Token.CLOSEPAREN)) {\r\n        let statement = this.parseStatement(tn);\r\n        if (!statement) return null;\r\n        let ret = Node.createWhileStatement(expression, statement, tn.range(startPos, tn.pos));\r\n        tn.skip(Token.SEMICOLON);\r\n        return ret;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  // expressions\r\n  // see: http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing\r\n\r\n  parseExpressionStart(\r\n    tn: Tokenizer\r\n  ): Expression | null {\r\n\r\n    var token = tn.next(IdentifierHandling.PREFER);\r\n    var startPos = tn.tokenPos;\r\n    var expr: Expression | null = null;\r\n\r\n    if (token == Token.NULL) {\r\n      return Node.createNullExpression(tn.range());\r\n    }\r\n    if (token == Token.TRUE) {\r\n      return Node.createTrueExpression(tn.range());\r\n    }\r\n    if (token == Token.FALSE) {\r\n      return Node.createFalseExpression(tn.range());\r\n    }\r\n\r\n    var p = determinePrecedenceStart(token);\r\n    if (p != Precedence.INVALID) {\r\n      let operand: Expression | null;\r\n\r\n      // TODO: SpreadExpression, YieldExpression (currently become unsupported UnaryPrefixExpressions)\r\n\r\n      // NewExpression\r\n      if (token == Token.NEW) {\r\n        operand = this.parseExpression(tn, Precedence.CALL);\r\n        if (!operand) return null;\r\n        if (operand.kind == NodeKind.CALL) {\r\n          return Node.createNewExpression(\r\n            (<CallExpression>operand).expression,\r\n            (<CallExpression>operand).typeArguments,\r\n            (<CallExpression>operand).arguments,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            tn.range()\r\n          );\r\n        }\r\n        return null;\r\n      } else {\r\n        operand = this.parseExpression(tn, p);\r\n        if (!operand) return null;\r\n      }\r\n\r\n      // UnaryPrefixExpression\r\n      if (token == Token.PLUS_PLUS || token == Token.MINUS_MINUS) {\r\n        if (\r\n          operand.kind != NodeKind.IDENTIFIER &&\r\n          operand.kind != NodeKind.ELEMENTACCESS &&\r\n          operand.kind != NodeKind.PROPERTYACCESS\r\n        ) {\r\n          this.error(\r\n            DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\r\n            operand.range\r\n          );\r\n        }\r\n      }\r\n      return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\r\n    }\r\n\r\n    switch (token) {\r\n\r\n      // ParenthesizedExpression\r\n      // FunctionExpression\r\n      case Token.OPENPAREN: {\r\n\r\n        // determine whether this is a function expression\r\n        if (tn.skip(Token.CLOSEPAREN)) { // must be a function expression (fast route)\r\n          return this.parseFunctionExpressionCommon(\r\n            tn,\r\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\r\n            [],\r\n            true\r\n          );\r\n        }\r\n        let state = tn.mark();\r\n        let again = true;\r\n        do {\r\n          switch (tn.next(IdentifierHandling.PREFER)) {\r\n\r\n            // function expression\r\n            case Token.DOT_DOT_DOT: {\r\n              tn.reset(state);\r\n              return this.parseFunctionExpression(tn);\r\n            }\r\n            // can be both\r\n            case Token.IDENTIFIER: {\r\n              tn.readIdentifier();\r\n              switch (tn.next()) {\r\n\r\n                // if we got here, check for arrow\r\n                case Token.CLOSEPAREN: {\r\n                  if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\r\n                    again = false;\r\n                    break;\r\n                  }\r\n                  // fall-through\r\n                }\r\n                // function expression\r\n                case Token.COLON: {    // type annotation\r\n                  tn.reset(state);\r\n                  return this.parseFunctionExpression(tn);\r\n                }\r\n                // can be both\r\n                case Token.QUESTION:   // optional parameter or ternary\r\n                case Token.COMMA: {\r\n                  break; // continue\r\n                }\r\n                // parenthesized expression\r\n                // case Token.EQUALS:  // missing type annotation for simplicity\r\n                default: {\r\n                  again = false;\r\n                  break;\r\n                }\r\n              }\r\n              break;\r\n            }\r\n            // parenthesized expression\r\n            default: {\r\n              again = false;\r\n              break;\r\n            }\r\n          }\r\n        } while (again);\r\n        tn.reset(state);\r\n\r\n        // parse parenthesized\r\n        expr = this.parseExpression(tn);\r\n        if (!expr) return null;\r\n        if (!tn.skip(Token.CLOSEPAREN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n        return Node.createParenthesizedExpression(expr, tn.range(startPos, tn.pos));\r\n      }\r\n      // ArrayLiteralExpression\r\n      case Token.OPENBRACKET: {\r\n        let elementExpressions = new Array<Expression | null>();\r\n        while (!tn.skip(Token.CLOSEBRACKET)) {\r\n          if (tn.peek() == Token.COMMA) {\r\n            expr = null; // omitted\r\n          } else {\r\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\r\n            if (!expr) return null;\r\n          }\r\n          elementExpressions.push(expr);\r\n          if (!tn.skip(Token.COMMA)) {\r\n            if (tn.skip(Token.CLOSEBRACKET)) {\r\n              break;\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode._0_expected,\r\n                tn.range(), \"]\"\r\n              );\r\n              return null;\r\n            }\r\n          }\r\n        }\r\n        return Node.createArrayLiteralExpression(elementExpressions, tn.range(startPos, tn.pos));\r\n      }\r\n      // AssertionExpression (unary prefix)\r\n      case Token.LESSTHAN: {\r\n        let toType = this.parseType(tn);\r\n        if (!toType) return null;\r\n        if (!tn.skip(Token.GREATERTHAN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \">\"\r\n          );\r\n          return null;\r\n        }\r\n        expr = this.parseExpression(tn, Precedence.CALL);\r\n        if (!expr) return null;\r\n        return Node.createAssertionExpression(\r\n          AssertionKind.PREFIX,\r\n          expr,\r\n          toType,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      }\r\n      case Token.IDENTIFIER: {\r\n        return Node.createIdentifierExpression(tn.readIdentifier(), tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.THIS: {\r\n        return Node.createThisExpression(tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.CONSTRUCTOR: {\r\n        return Node.createConstructorExpression(tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.SUPER: {\r\n        return Node.createSuperExpression(tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.STRINGLITERAL: {\r\n        return Node.createStringLiteralExpression(tn.readString(), tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.INTEGERLITERAL: {\r\n        return Node.createIntegerLiteralExpression(tn.readInteger(), tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.FLOATLITERAL: {\r\n        return Node.createFloatLiteralExpression(tn.readFloat(), tn.range(startPos, tn.pos));\r\n      }\r\n      // RegexpLiteralExpression\r\n      // note that this also continues on invalid ones so the surrounding AST remains intact\r\n      case Token.SLASH: {\r\n        let regexpPattern = tn.readRegexpPattern(); // also reports\r\n        if (!tn.skip(Token.SLASH)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"/\"\r\n          );\r\n          return null;\r\n        }\r\n        return Node.createRegexpLiteralExpression(\r\n          regexpPattern,\r\n          tn.readRegexpFlags(), // also reports\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      }\r\n      case Token.FUNCTION: {\r\n        return this.parseFunctionExpression(tn);\r\n      }\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Expression_expected,\r\n          tn.range()\r\n        );\r\n        return null;\r\n      }\r\n    }\r\n  }\r\n\r\n  tryParseTypeArgumentsBeforeArguments(\r\n    tn: Tokenizer\r\n  ): CommonTypeNode[] | null {\r\n\r\n    // at '<': Type (',' Type)* '>' '('\r\n\r\n    var state = tn.mark();\r\n    if (!tn.skip(Token.LESSTHAN)) return null;\r\n    var typeArguments = new Array<CommonTypeNode>();\r\n    do {\r\n      if (tn.peek() === Token.GREATERTHAN) {\r\n        break;\r\n      }\r\n      let type = this.parseType(tn, true, true);\r\n      if (!type) {\r\n        tn.reset(state);\r\n        return null;\r\n      }\r\n      typeArguments.push(type);\r\n    } while (tn.skip(Token.COMMA));\r\n    if (tn.skip(Token.GREATERTHAN) && tn.skip(Token.OPENPAREN)) {\r\n      return typeArguments;\r\n    }\r\n    tn.reset(state);\r\n    return null;\r\n  }\r\n\r\n  parseArguments(\r\n    tn: Tokenizer\r\n  ): Expression[] | null {\r\n\r\n    // at '(': (Expression (',' Expression)*)? ')'\r\n\r\n    var args = new Array<Expression>();\r\n    while (!tn.skip(Token.CLOSEPAREN)) {\r\n      let expr = this.parseExpression(tn, Precedence.COMMA + 1);\r\n      if (!expr) return null;\r\n      args.push(expr);\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.CLOSEPAREN)) {\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n    return args;\r\n  }\r\n\r\n  parseExpression(\r\n    tn: Tokenizer,\r\n    precedence: Precedence = 0\r\n  ): Expression | null {\r\n\r\n    var expr = this.parseExpressionStart(tn);\r\n    if (!expr) return null;\r\n    var startPos = expr.range.start;\r\n\r\n    // CallExpression with type arguments\r\n    var typeArguments: CommonTypeNode[] | null;\r\n    while (\r\n      // there might be better ways to distinguish a LESSTHAN from a CALL with type arguments\r\n      (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) ||\r\n      tn.skip(Token.OPENPAREN)\r\n    ) {\r\n      let args = this.parseArguments(tn);\r\n      if (!args) return null;\r\n      expr = Node.createCallExpression(expr, typeArguments, args, tn.range(startPos, tn.pos));\r\n    }\r\n\r\n    var token: Token;\r\n    var next: Expression | null = null;\r\n    var nextPrecedence: Precedence;\r\n    while (\r\n      (nextPrecedence = determinePrecedence(token = tn.peek())) >= precedence\r\n    ) { // precedence climbing\r\n      tn.next();\r\n      switch (token) {\r\n        // AssertionExpression\r\n        case Token.AS: {\r\n          let toType = this.parseType(tn);\r\n          if (!toType) return null;\r\n          expr = Node.createAssertionExpression(\r\n            AssertionKind.AS,\r\n            expr,\r\n            toType,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // ElementAccessExpression\r\n        case Token.OPENBRACKET: {\r\n          next = this.parseExpression(tn);\r\n          if (!next) return null;\r\n          if (!tn.skip(Token.CLOSEBRACKET)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"]\"\r\n            );\r\n            return null;\r\n          }\r\n          expr = Node.createElementAccessExpression(\r\n            expr,\r\n            next,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // UnaryPostfixExpression\r\n        case Token.PLUS_PLUS:\r\n        case Token.MINUS_MINUS: {\r\n          if (\r\n            expr.kind != NodeKind.IDENTIFIER &&\r\n            expr.kind != NodeKind.ELEMENTACCESS &&\r\n            expr.kind != NodeKind.PROPERTYACCESS\r\n          ) {\r\n            this.error(\r\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\r\n              expr.range\r\n            );\r\n          }\r\n          expr = Node.createUnaryPostfixExpression(\r\n            token,\r\n            expr,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // TernaryExpression\r\n        case Token.QUESTION: {\r\n          let ifThen = this.parseExpression(tn);\r\n          if (!ifThen) return null;\r\n          if (!tn.skip(Token.COLON)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \":\"\r\n            );\r\n            return null;\r\n          }\r\n          let ifElse = this.parseExpression(tn, precedence > Precedence.COMMA ? Precedence.COMMA + 1 : 0);\r\n          if (!ifElse) return null;\r\n          expr = Node.createTernaryExpression(\r\n            expr,\r\n            ifThen,\r\n            ifElse,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // CommaExpression\r\n        case Token.COMMA: {\r\n          let commaExprs: Expression[] = [ expr ];\r\n          do {\r\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\r\n            if (!expr) return null;\r\n            commaExprs.push(expr);\r\n          } while (tn.skip(Token.COMMA));\r\n          expr = Node.createCommaExpression(commaExprs, tn.range(startPos, tn.pos));\r\n          break;\r\n        }\r\n        default: {\r\n          next = this.parseExpression(tn,\r\n            isRightAssociative(token)\r\n              ? nextPrecedence\r\n              : nextPrecedence + 1\r\n          );\r\n          if (!next) return null;\r\n\r\n          // PropertyAccessExpression\r\n          if (token == Token.DOT) {\r\n            if (next.kind == NodeKind.IDENTIFIER) {\r\n              expr = Node.createPropertyAccessExpression(\r\n                expr,\r\n                <IdentifierExpression>next,\r\n                tn.range(startPos, tn.pos)\r\n              );\r\n            } else if (next.kind == NodeKind.CALL) { // join\r\n              let propertyCall = <CallExpression>next;\r\n              if (propertyCall.expression.kind == NodeKind.IDENTIFIER) {\r\n                propertyCall.expression = Node.createPropertyAccessExpression(\r\n                  expr,\r\n                  <IdentifierExpression>propertyCall.expression,\r\n                  tn.range(startPos, tn.pos)\r\n                );\r\n              } else {\r\n                this.error(\r\n                  DiagnosticCode.Identifier_expected,\r\n                  propertyCall.expression.range\r\n                );\r\n                return null;\r\n              }\r\n              expr = propertyCall;\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.Identifier_expected,\r\n                next.range\r\n              );\r\n              return null;\r\n            }\r\n\r\n          // BinaryExpression\r\n          } else {\r\n            expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\r\n          }\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /** Skips over a statement on errors in an attempt to reduce unnecessary diagnostic noise. */\r\n  skipStatement(tn: Tokenizer): void {\r\n    tn.peek(true);\r\n    if (tn.nextTokenOnNewLine) tn.next(); // if reset() to the previous line\r\n    do {\r\n      let nextToken = tn.peek(true);\r\n      if (\r\n        nextToken == Token.ENDOFFILE ||   // next step should handle this\r\n        nextToken == Token.SEMICOLON      // end of the statement for sure\r\n      ) {\r\n        tn.next();\r\n        break;\r\n      }\r\n      if (tn.nextTokenOnNewLine) break;   // end of the statement maybe\r\n      switch (tn.next()) {\r\n        case Token.IDENTIFIER: {\r\n          tn.readIdentifier();\r\n          break;\r\n        }\r\n        case Token.STRINGLITERAL: {\r\n          tn.readString();\r\n          break;\r\n        }\r\n        case Token.INTEGERLITERAL: {\r\n          tn.readInteger();\r\n          break;\r\n        }\r\n        case Token.FLOATLITERAL: {\r\n          tn.readFloat();\r\n          break;\r\n        }\r\n      }\r\n    } while (true);\r\n  }\r\n\r\n  /** Skips over a block on errors in an attempt to reduce unnecessary diagnostic noise. */\r\n  // skipBlock(tn: Tokenizer): void {\r\n  //   var depth = 0;\r\n  //   var token: Token;\r\n  //   do {\r\n  //     token = tn.next();\r\n  //     if (token == Token.OPENBRACE) {\r\n  //       ++depth;\r\n  //     } else if (token == Token.CLOSEBRACE) {\r\n  //       if (depth) --depth;\r\n  //       if (!depth) break; // done\r\n  //     }\r\n  //   } while (token != Token.ENDOFFILE);\r\n  // }\r\n}\r\n\r\n/** Operator precedence from least to largest. */\r\nexport const enum Precedence {\r\n  COMMA,\r\n  SPREAD,\r\n  YIELD,\r\n  ASSIGNMENT,\r\n  CONDITIONAL,\r\n  LOGICAL_OR,\r\n  LOGICAL_AND,\r\n  BITWISE_OR,\r\n  BITWISE_XOR,\r\n  BITWISE_AND,\r\n  EQUALITY,\r\n  RELATIONAL,\r\n  SHIFT,\r\n  ADDITIVE,\r\n  MULTIPLICATIVE,\r\n  EXPONENTIATED,\r\n  UNARY_PREFIX,\r\n  UNARY_POSTFIX,\r\n  CALL,\r\n  MEMBERACCESS,\r\n  GROUPING,\r\n  INVALID = -1\r\n}\r\n\r\n/** Determines the precedence of a starting token. */\r\nfunction determinePrecedenceStart(kind: Token): i32 {\r\n  switch (kind) {\r\n    case Token.DOT_DOT_DOT: return Precedence.SPREAD;\r\n    case Token.YIELD: return Precedence.YIELD;\r\n    case Token.EXCLAMATION:\r\n    case Token.TILDE:\r\n    case Token.PLUS:\r\n    case Token.MINUS:\r\n    case Token.PLUS_PLUS:\r\n    case Token.MINUS_MINUS:\r\n    case Token.TYPEOF:\r\n    case Token.VOID:\r\n    case Token.DELETE: return Precedence.UNARY_PREFIX;\r\n    case Token.NEW: return Precedence.MEMBERACCESS;\r\n    default: return Precedence.INVALID;\r\n  }\r\n}\r\n\r\n/** Determines the precende of a non-starting token. */\r\nfunction determinePrecedence(kind: Token): i32 {\r\n  switch (kind) {\r\n    case Token.COMMA: return Precedence.COMMA;\r\n    case Token.EQUALS:\r\n    case Token.PLUS_EQUALS:\r\n    case Token.MINUS_EQUALS:\r\n    case Token.ASTERISK_ASTERISK_EQUALS:\r\n    case Token.ASTERISK_EQUALS:\r\n    case Token.SLASH_EQUALS:\r\n    case Token.PERCENT_EQUALS:\r\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.AMPERSAND_EQUALS:\r\n    case Token.CARET_EQUALS:\r\n    case Token.BAR_EQUALS: return Precedence.ASSIGNMENT;\r\n    case Token.QUESTION: return Precedence.CONDITIONAL;\r\n    case Token.BAR_BAR: return Precedence.LOGICAL_OR;\r\n    case Token.AMPERSAND_AMPERSAND: return Precedence.LOGICAL_AND;\r\n    case Token.BAR: return Precedence.BITWISE_OR;\r\n    case Token.CARET: return Precedence.BITWISE_XOR;\r\n    case Token.AMPERSAND: return Precedence.BITWISE_AND;\r\n    case Token.EQUALS_EQUALS:\r\n    case Token.EXCLAMATION_EQUALS:\r\n    case Token.EQUALS_EQUALS_EQUALS:\r\n    case Token.EXCLAMATION_EQUALS_EQUALS: return Precedence.EQUALITY;\r\n    case Token.AS:\r\n    case Token.IN:\r\n    case Token.INSTANCEOF:\r\n    case Token.LESSTHAN:\r\n    case Token.GREATERTHAN:\r\n    case Token.LESSTHAN_EQUALS:\r\n    case Token.GREATERTHAN_EQUALS: return Precedence.RELATIONAL;\r\n    case Token.LESSTHAN_LESSTHAN:\r\n    case Token.GREATERTHAN_GREATERTHAN:\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return Precedence.SHIFT;\r\n    case Token.PLUS:\r\n    case Token.MINUS: return Precedence.ADDITIVE;\r\n    case Token.ASTERISK:\r\n    case Token.SLASH:\r\n    case Token.PERCENT: return Precedence.MULTIPLICATIVE;\r\n    case Token.ASTERISK_ASTERISK: return Precedence.EXPONENTIATED;\r\n    case Token.PLUS_PLUS:\r\n    case Token.MINUS_MINUS: return Precedence.UNARY_POSTFIX;\r\n    case Token.DOT:\r\n    case Token.NEW:\r\n    case Token.OPENBRACKET: return Precedence.MEMBERACCESS;\r\n    default: return Precedence.INVALID;\r\n  }\r\n}\r\n\r\n/** Determines whether a non-starting token is right associative. */\r\nfunction isRightAssociative(kind: Token): bool {\r\n  switch (kind) {\r\n    case Token.EQUALS:\r\n    case Token.PLUS_EQUALS:\r\n    case Token.MINUS_EQUALS:\r\n    case Token.ASTERISK_ASTERISK_EQUALS:\r\n    case Token.ASTERISK_EQUALS:\r\n    case Token.SLASH_EQUALS:\r\n    case Token.PERCENT_EQUALS:\r\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.AMPERSAND_EQUALS:\r\n    case Token.CARET_EQUALS:\r\n    case Token.BAR_EQUALS:\r\n    case Token.QUESTION:\r\n    case Token.ASTERISK_ASTERISK: return true;\r\n    default: return false;\r\n  }\r\n}\r\n","/**\r\n * Definition builders for WebIDL and TypeScript.\r\n * @module definitions\r\n *//***/\r\n\r\nimport {\r\n  Program,\r\n  Element,\r\n  CommonFlags,\r\n  ElementKind,\r\n  Global,\r\n  Enum,\r\n  EnumValue,\r\n  Field,\r\n  Function,\r\n  FunctionPrototype,\r\n  Class,\r\n  ClassPrototype,\r\n  Namespace,\r\n  ConstantValueKind,\r\n  Interface,\r\n  Property\r\n} from \"./program\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind\r\n} from \"./types\";\r\n\r\nimport {\r\n  indent\r\n} from \"./util\";\r\n\r\n/** Walker base class. */\r\nabstract class ExportsWalker {\r\n\r\n  /** Program reference. */\r\n  program: Program;\r\n  /** Whether to include private members */\r\n  includePrivate: bool;\r\n  /** Elements still to do. */\r\n  todo: Element[] = [];\r\n  /** Already seen elements. */\r\n  seen: Set<Element> = new Set();\r\n\r\n  /** Constructs a new Element walker. */\r\n  constructor(program: Program, includePrivate: bool = false) {\r\n    this.program = program;\r\n    this.includePrivate;\r\n  }\r\n\r\n  /** Walks all exports and calls the respective handlers. */\r\n  walk(): void {\r\n    for (let element of this.program.moduleLevelExports.values()) this.visitElement(element);\r\n    var todo = this.todo;\r\n    for (let i = 0; i < todo.length; ) this.visitElement(todo[i]);\r\n  }\r\n\r\n  /** Visits an element.*/\r\n  visitElement(element: Element): void {\r\n    if (element.is(CommonFlags.PRIVATE) && !this.includePrivate) return;\r\n    if (this.seen.has(element)) return;\r\n    this.seen.add(element);\r\n    switch (element.kind) {\r\n      case ElementKind.GLOBAL: {\r\n        if (element.is(CommonFlags.COMPILED)) this.visitGlobal(<Global>element);\r\n        break;\r\n      }\r\n      case ElementKind.ENUM: {\r\n        if (element.is(CommonFlags.COMPILED)) this.visitEnum(<Enum>element);\r\n        break;\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        this.visitFunctionInstances(<FunctionPrototype>element);\r\n        break;\r\n      }\r\n      case ElementKind.CLASS_PROTOTYPE: {\r\n        this.visitClassInstances(<ClassPrototype>element);\r\n        break;\r\n      }\r\n      case ElementKind.FIELD: {\r\n        if ((<Field>element).is(CommonFlags.COMPILED)) this.visitField(<Field>element);\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: {\r\n        let prop = <Property>element;\r\n        let getter = prop.getterPrototype;\r\n        if (getter) this.visitFunctionInstances(getter);\r\n        let setter = prop.setterPrototype;\r\n        if (setter) this.visitFunctionInstances(setter);\r\n        break;\r\n      }\r\n      case ElementKind.NAMESPACE: {\r\n        if (hasCompiledMember(element)) this.visitNamespace(element);\r\n        break;\r\n      }\r\n      default: assert(false);\r\n    }\r\n  }\r\n\r\n  private visitFunctionInstances(element: FunctionPrototype): void {\r\n    for (let instance of element.instances.values()) {\r\n      if (instance.is(CommonFlags.COMPILED)) this.visitFunction(<Function>instance);\r\n    }\r\n  }\r\n\r\n  private visitClassInstances(element: ClassPrototype): void {\r\n    for (let instance of element.instances.values()) {\r\n      if (instance.is(CommonFlags.COMPILED)) this.visitClass(<Class>instance);\r\n    }\r\n  }\r\n\r\n  abstract visitGlobal(element: Global): void;\r\n  abstract visitEnum(element: Enum): void;\r\n  abstract visitFunction(element: Function): void;\r\n  abstract visitClass(element: Class): void;\r\n  abstract visitInterface(element: Interface): void;\r\n  abstract visitField(element: Field): void;\r\n  abstract visitNamespace(element: Element): void;\r\n}\r\n\r\n/** A WebIDL definitions builder. */\r\nexport class IDLBuilder extends ExportsWalker {\r\n\r\n  /** Builds WebIDL definitions for the specified program. */\r\n  static build(program: Program): string {\r\n    return new IDLBuilder(program).build();\r\n  }\r\n\r\n  private sb: string[] = [];\r\n  private indentLevel: i32 = 0;\r\n\r\n  /** Constructs a new WebIDL builder. */\r\n  constructor(program: Program, includePrivate: bool = false) {\r\n    super(program, includePrivate);\r\n  }\r\n\r\n  visitGlobal(element: Global): void {\r\n    var sb = this.sb;\r\n    var isConst = element.is(CommonFlags.INLINED);\r\n    indent(sb, this.indentLevel);\r\n    if (isConst) sb.push(\"const \");\r\n    sb.push(this.typeToString(element.type));\r\n    sb.push(\" \");\r\n    sb.push(element.simpleName);\r\n    if (isConst) {\r\n      switch (element.constantValueKind) {\r\n        case ConstantValueKind.INTEGER: {\r\n          sb.push(\" = \");\r\n          sb.push(i64_to_string(element.constantIntegerValue));\r\n          break;\r\n        }\r\n        case ConstantValueKind.FLOAT: {\r\n          sb.push(\" = \");\r\n          sb.push(element.constantFloatValue.toString());\r\n          break;\r\n        }\r\n        default: assert(false);\r\n      }\r\n    }\r\n    sb.push(\";\\n\");\r\n  }\r\n\r\n  visitEnum(element: Enum): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"interface \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\" {\\n\");\r\n    var members = element.members;\r\n    if (members) {\r\n      for (let [name, member] of members) {\r\n        if (member.kind == ElementKind.ENUMVALUE) {\r\n          let isConst = (<EnumValue>member).is(CommonFlags.INLINED);\r\n          indent(sb, this.indentLevel);\r\n          if (isConst) sb.push(\"const \");\r\n          else sb.push(\"readonly \");\r\n          sb.push(\"unsigned long \");\r\n          sb.push(name);\r\n          if (isConst) {\r\n            sb.push(\" = \");\r\n            sb.push((<EnumValue>member).constantValue.toString(10));\r\n          }\r\n          sb.push(\";\\n\");\r\n        }\r\n      }\r\n      for (let member of members.values()) {\r\n        if (member.kind != ElementKind.ENUMVALUE) this.visitElement(member);\r\n      }\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitFunction(element: Function): void {\r\n    var sb = this.sb;\r\n    var signature = element.signature;\r\n    indent(sb, this.indentLevel);\r\n    sb.push(this.typeToString(signature.returnType));\r\n    sb.push(\" \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\"(\");\r\n    var parameters = signature.parameterTypes;\r\n    var numParameters = parameters.length;\r\n    // var requiredParameters = signature.requiredParameters;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      if (i) sb.push(\", \");\r\n      // if (i >= requiredParameters) sb.push(\"optional \");\r\n      sb.push(this.typeToString(parameters[i]));\r\n      sb.push(\" \");\r\n      sb.push(signature.getParameterName(i));\r\n    }\r\n    sb.push(\");\\n\");\r\n    var members = element.members;\r\n    if (members && members.size) {\r\n      indent(sb, this.indentLevel);\r\n      sb.push(\"interface \");\r\n      sb.push(element.simpleName);\r\n      sb.push(\" {\\n\");\r\n      for (let member of members.values()) this.visitElement(member);\r\n      indent(sb, --this.indentLevel);\r\n      sb.push(\"}\\n\");\r\n    }\r\n  }\r\n\r\n  visitClass(element: Class): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"interface \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\" {\\n\");\r\n    // TODO\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitInterface(element: Interface): void {\r\n    this.visitClass(element);\r\n  }\r\n\r\n  visitField(element: Field): void {\r\n    // TODO\r\n  }\r\n\r\n  visitNamespace(element: Namespace): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"interface \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\" {\\n\");\r\n    var members = element.members;\r\n    if (members) {\r\n      for (let member of members.values()) this.visitElement(member);\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  typeToString(type: Type): string {\r\n    switch (type.kind) {\r\n      case TypeKind.I8: return \"byte\";\r\n      case TypeKind.I16: return \"short\";\r\n      case TypeKind.I32: return \"long\";\r\n      case TypeKind.I64: return \"long long\";\r\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"long long\" : \"long\";\r\n      case TypeKind.U8: return \"octet\";\r\n      case TypeKind.U16: return \"unsigned short\";\r\n      case TypeKind.U32: return \"unsigned long\";\r\n        // ^ TODO: function types\r\n      case TypeKind.U64: return \"unsigned long long\";\r\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"unsigned long long\" : \"unsigned long\";\r\n        // ^ TODO: class types\r\n      case TypeKind.BOOL: return \"boolean\";\r\n      case TypeKind.F32: return \"unrestricted float\";\r\n      case TypeKind.F64: return \"unrestricted double\";\r\n      case TypeKind.VOID: return \"void\";\r\n      default: {\r\n        assert(false);\r\n        return \"\";\r\n      }\r\n    }\r\n  }\r\n\r\n  build(): string {\r\n    var sb = this.sb;\r\n    sb.push(\"interface ASModule {\\n\");\r\n    ++this.indentLevel;\r\n    this.walk();\r\n    --this.indentLevel;\r\n    sb.push(\"}\\n\");\r\n    return sb.join(\"\");\r\n  }\r\n}\r\n\r\n/** A TypeScript definitions builder. */\r\nexport class TSDBuilder extends ExportsWalker {\r\n\r\n  /** Builds TypeScript definitions for the specified program. */\r\n  static build(program: Program): string {\r\n    return new TSDBuilder(program).build();\r\n  }\r\n\r\n  private sb: string[] = [];\r\n  private indentLevel: i32 = 0;\r\n\r\n  /** Constructs a new WebIDL builder. */\r\n  constructor(program: Program, includePrivate: bool = false) {\r\n    super(program, includePrivate);\r\n  }\r\n\r\n  visitGlobal(element: Global): void {\r\n    var sb = this.sb;\r\n    var isConst = element.is(CommonFlags.INLINED);\r\n    indent(sb, this.indentLevel);\r\n    if (element.is(CommonFlags.STATIC)) {\r\n      if (isConst) sb.push(\"static readonly \");\r\n      else sb.push(\"static \");\r\n    } else {\r\n      if (isConst) sb.push(\"const \");\r\n      else sb.push(\"var \");\r\n    }\r\n    sb.push(element.simpleName);\r\n    sb.push(\": \");\r\n    sb.push(this.typeToString(element.type));\r\n    sb.push(\";\\n\");\r\n    this.visitNamespace(element);\r\n  }\r\n\r\n  visitEnum(element: Enum): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"enum \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\" {\\n\");\r\n    var members = element.members;\r\n    if (members) {\r\n      let numMembers = members.size;\r\n      for (let [name, member] of members) {\r\n        if (member.kind == ElementKind.ENUMVALUE) {\r\n          indent(sb, this.indentLevel);\r\n          sb.push(name);\r\n          if (member.is(CommonFlags.INLINED)) {\r\n            sb.push(\" = \");\r\n            sb.push((<EnumValue>member).constantValue.toString(10));\r\n          }\r\n          sb.push(\",\\n\");\r\n          --numMembers;\r\n        }\r\n      }\r\n      if (numMembers) this.visitNamespace(element);\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitFunction(element: Function): void {\r\n    if (element.isAny(CommonFlags.PRIVATE | CommonFlags.SET)) return;\r\n    var sb = this.sb;\r\n    var signature = element.signature;\r\n    indent(sb, this.indentLevel);\r\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\r\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\r\n    if (element.is(CommonFlags.GET)) {\r\n      sb.push(element.prototype.declaration.name.text); // 'get:funcName' internally\r\n      sb.push(\": \");\r\n      sb.push(this.typeToString(signature.returnType));\r\n      sb.push(\";\\n\");\r\n      return;\r\n    } else {\r\n      if (!element.isAny(CommonFlags.STATIC | CommonFlags.INSTANCE)) sb.push(\"function \");\r\n      sb.push(element.simpleName);\r\n    }\r\n    sb.push(\"(\");\r\n    var parameters = signature.parameterTypes;\r\n    var numParameters = parameters.length;\r\n    // var requiredParameters = signature.requiredParameters;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      if (i) sb.push(\", \");\r\n      // if (i >= requiredParameters) sb.push(\"optional \");\r\n      sb.push(signature.getParameterName(i));\r\n      sb.push(\": \");\r\n      sb.push(this.typeToString(parameters[i]));\r\n    }\r\n    if (element.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.SET)) {\r\n      sb.push(\")\");\r\n    } else {\r\n      sb.push(\"): \");\r\n      sb.push(this.typeToString(signature.returnType));\r\n    }\r\n    sb.push(\";\\n\");\r\n    this.visitNamespace(element);\r\n  }\r\n\r\n  visitClass(element: Class): void {\r\n    var sb = this.sb;\r\n    var isInterface = element.kind == ElementKind.INTERFACE;\r\n    indent(sb, this.indentLevel++);\r\n    if (isInterface) {\r\n      sb.push(\"interface \");\r\n    } else {\r\n      if (element.is(CommonFlags.ABSTRACT)) sb.push(\"abstract \");\r\n      sb.push(\"class \");\r\n    }\r\n    sb.push(element.simpleName);\r\n    var base = element.base;\r\n    if (base && base.is(CommonFlags.COMPILED | CommonFlags.MODULE_EXPORT)) {\r\n      sb.push(\" extends \");\r\n      sb.push(base.simpleName); // TODO: fqn\r\n    }\r\n    sb.push(\" {\\n\");\r\n    var members = element.prototype.members; // static\r\n    if (members) {\r\n      for (let member of members.values()) {\r\n        this.visitElement(member);\r\n      }\r\n    }\r\n    var ctor = element.constructorInstance;\r\n    if (ctor) this.visitFunction(ctor);\r\n    members = element.members; // instance\r\n    if (members) {\r\n      for (let member of members.values()) this.visitElement(member);\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitInterface(element: Interface): void {\r\n    this.visitClass(element);\r\n  }\r\n\r\n  visitField(element: Field): void {\r\n    if (element.is(CommonFlags.PRIVATE)) return;\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel);\r\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\r\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\r\n    if (element.is(CommonFlags.READONLY)) sb.push(\"readonly \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\": \");\r\n    sb.push(this.typeToString(element.type));\r\n    sb.push(\";\\n\");\r\n  }\r\n\r\n  visitNamespace(element: Element): void {\r\n    var members = element.members;\r\n    if (members && members.size) {\r\n      let sb = this.sb;\r\n      indent(sb, this.indentLevel++);\r\n      sb.push(\"namespace \");\r\n      sb.push(element.simpleName);\r\n      sb.push(\" {\\n\");\r\n      for (let member of members.values()) this.visitElement(member);\r\n      indent(sb, --this.indentLevel);\r\n      sb.push(\"}\\n\");\r\n    }\r\n  }\r\n\r\n  typeToString(type: Type): string {\r\n    switch (type.kind) {\r\n      case TypeKind.I8: return \"i8\";\r\n      case TypeKind.I16: return \"i16\";\r\n      case TypeKind.I32: return \"i32\";\r\n      case TypeKind.I64: return \"I64\";\r\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"I64\" : \"i32\";\r\n      case TypeKind.U8: return \"u8\";\r\n      case TypeKind.U16: return \"u16\";\r\n      case TypeKind.U32: return \"u32\";\r\n        // ^ TODO: function types\r\n      case TypeKind.U64: return \"U64\";\r\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"U64\" : \"u32\";\r\n        // ^ TODO: class types\r\n      case TypeKind.BOOL: return \"bool\";\r\n      case TypeKind.F32: return \"f32\";\r\n      case TypeKind.F64: return \"f64\";\r\n      case TypeKind.VOID: return \"void\";\r\n      default: {\r\n        assert(false);\r\n        return \"\";\r\n      }\r\n    }\r\n  }\r\n\r\n  build(): string {\r\n    var sb = this.sb;\r\n    sb.push(\"declare module ASModule {\\n\");\r\n    sb.push(\"  type i8 = number;\\n\");\r\n    sb.push(\"  type i16 = number;\\n\");\r\n    sb.push(\"  type i32 = number;\\n\");\r\n    sb.push(\"  type u8 = number;\\n\");\r\n    sb.push(\"  type u16 = number;\\n\");\r\n    sb.push(\"  type u32 = number;\\n\");\r\n    sb.push(\"  type f32 = number;\\n\");\r\n    sb.push(\"  type f64 = number;\\n\");\r\n    sb.push(\"  type bool = any;\\n\");\r\n    ++this.indentLevel;\r\n    this.walk();\r\n    --this.indentLevel;\r\n    sb.push(\"}\\n\");\r\n    sb.push(\"export default ASModule;\\n\");\r\n    return this.sb.join(\"\");\r\n  }\r\n}\r\n\r\n// helpers\r\n\r\n/** Tests if a namespace-like element has at least one compiled member. */\r\nfunction hasCompiledMember(element: Element): bool {\r\n  var members = element.members;\r\n  if (members) {\r\n    for (let member of members.values()) {\r\n      switch (member.kind) {\r\n        case ElementKind.FUNCTION_PROTOTYPE: {\r\n          for (let instance of (<FunctionPrototype>member).instances.values()) {\r\n            if (instance.is(CommonFlags.COMPILED)) return true;\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.CLASS_PROTOTYPE: {\r\n          for (let instance of (<ClassPrototype>member).instances.values()) {\r\n            if (instance.is(CommonFlags.COMPILED)) return true;\r\n          }\r\n          break;\r\n        }\r\n        default: {\r\n          if (member.is(CommonFlags.COMPILED) || hasCompiledMember(member)) return true;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return false;\r\n}\r\n","/**\r\n * A decompiler that generates low-level AssemblyScript from WebAssembly binaries.\r\n * @module decompiler\r\n *//***/\r\n\r\nimport {\r\n  Module,\r\n  NativeType,\r\n  ExpressionId,\r\n  UnaryOp,\r\n  BinaryOp,\r\n  HostOp,\r\n  FunctionRef,\r\n  ExpressionRef,\r\n  Index,\r\n  getFunctionName,\r\n  getFunctionBody,\r\n  getFunctionParamCount,\r\n  getFunctionParamType,\r\n  getFunctionResultType,\r\n  getExpressionId,\r\n  getExpressionType,\r\n  getBlockName,\r\n  getBlockChildCount,\r\n  getBlockChild,\r\n  getIfCondition,\r\n  getIfTrue,\r\n  getIfFalse,\r\n  getLoopName,\r\n  getLoopBody,\r\n  getBreakName,\r\n  getBreakCondition,\r\n  getGetLocalIndex,\r\n  getSetLocalIndex,\r\n  getSetLocalValue,\r\n  getLoadOffset,\r\n  getLoadPtr,\r\n  getStoreOffset,\r\n  getStorePtr,\r\n  getStoreValue,\r\n  getConstValueI32,\r\n  getConstValueI64Low,\r\n  getConstValueI64High,\r\n  getConstValueF32,\r\n  getConstValueF64,\r\n  getUnaryOp,\r\n  getUnaryValue,\r\n  getBinaryOp,\r\n  getBinaryLeft,\r\n  getBinaryRight,\r\n  getSelectThen,\r\n  getSelectElse,\r\n  getSelectCondition,\r\n  getDropValue,\r\n  getReturnValue,\r\n  getHostOp,\r\n  getHostOperand\r\n} from \"./module\";\r\n\r\n// TODO :-)\r\n\r\nexport class Decompiler {\r\n\r\n  static decompile(module: Module): string {\r\n    var decompiler = new Decompiler();\r\n    decompiler.decompile(module);\r\n    return decompiler.finish();\r\n  }\r\n\r\n  text: string[] = [];\r\n  functionId: i32 = 0;\r\n\r\n  constructor() { }\r\n\r\n  /** Decompiles a module to an AST that can then be serialized. */\r\n  decompile(module: Module): void {\r\n    throw new Error(\"not implemented\");\r\n  }\r\n\r\n  decompileFunction(func: FunctionRef): void {\r\n    var name = getFunctionName(func) || \"$\" + this.functionId.toString(10);\r\n    var body = getFunctionBody(func);\r\n    this.push(\"function \");\r\n    this.push(name);\r\n    this.push(\"(\");\r\n     for (let i: Index = 0, k: Index = getFunctionParamCount(func); i < k; ++i) {\r\n      if (i > 0) this.push(\", \");\r\n      this.push(\"$\");\r\n      this.push(i.toString(10));\r\n      this.push(\": \");\r\n      this.push(nativeTypeToType(getFunctionParamType(func, i)));\r\n    }\r\n    this.push(\"): \");\r\n    this.push(nativeTypeToType(getFunctionResultType(func)));\r\n    this.push(\" \");\r\n    if (getExpressionId(body) != ExpressionId.Block) {\r\n      this.push(\"{\\n\");\r\n    }\r\n    this.decompileExpression(body);\r\n    if (getExpressionId(body) != ExpressionId.Block) {\r\n      this.push(\"\\n}\\n\");\r\n    }\r\n    ++this.functionId;\r\n  }\r\n\r\n  decompileExpression(expr: ExpressionRef): void {\r\n    var id = getExpressionId(expr);\r\n    var type = getExpressionType(expr);\r\n\r\n    var nested: ExpressionRef;\r\n    var string: string | null;\r\n    var i: Index, k: Index;\r\n\r\n    switch (id) {\r\n      case ExpressionId.Block: { // TODO: magic\r\n        if ((string = getBlockName(expr)) != null) {\r\n          this.push(string);\r\n          this.push(\": \");\r\n        }\r\n        this.push(\"{\\n\");\r\n        k = getBlockChildCount(expr);\r\n        for (i = 0; i < k; ++i) {\r\n          this.decompileExpression(getBlockChild(expr, i));\r\n        }\r\n        this.push(\"}\\n\");\r\n        return;\r\n      }\r\n      case ExpressionId.If: {\r\n        if (type == NativeType.None) {\r\n          this.push(\"if (\");\r\n          this.decompileExpression(getIfCondition(expr));\r\n          this.push(\") \");\r\n          this.decompileExpression(getIfTrue(expr));\r\n          if (nested = getIfFalse(expr)) {\r\n            this.push(\" else \");\r\n            this.decompileExpression(nested);\r\n          }\r\n        } else {\r\n          this.decompileExpression(getIfCondition(expr));\r\n          this.push(\" ? \");\r\n          this.decompileExpression(getIfTrue(expr));\r\n          this.push(\" : \");\r\n          this.decompileExpression(getIfFalse(expr));\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Loop: {\r\n        if ((string = getLoopName(expr)) != null) {\r\n          this.push(string);\r\n          this.push(\": \");\r\n        }\r\n        this.push(\"do \");\r\n        this.decompileExpression(getLoopBody(expr));\r\n        this.push(\"while (0);\\n\");\r\n      }\r\n      case ExpressionId.Break: {\r\n        if (nested = getBreakCondition(expr)) {\r\n          this.push(\"if (\");\r\n          this.decompileExpression(nested);\r\n          this.push(\") \");\r\n        }\r\n        if ((string = getBreakName(expr)) != null) {\r\n          this.push(\"break \");\r\n          this.push(string);\r\n          this.push(\";\\n\");\r\n        } else {\r\n          this.push(\"break;\\n\");\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Switch:\r\n      case ExpressionId.Call:\r\n      case ExpressionId.CallImport:\r\n      case ExpressionId.CallIndirect: {\r\n        throw new Error(\"not implemented\");\r\n      }\r\n      case ExpressionId.GetLocal: {\r\n        this.push(\"$\");\r\n        this.push(getGetLocalIndex(expr).toString(10));\r\n        return;\r\n      }\r\n      case ExpressionId.SetLocal: {\r\n        this.push(\"$\");\r\n        this.push(getSetLocalIndex(expr).toString(10));\r\n        this.push(\" = \");\r\n        this.decompileExpression(getSetLocalValue(expr));\r\n        return;\r\n      }\r\n      case ExpressionId.GetGlobal:\r\n      case ExpressionId.SetGlobal: {\r\n        throw new Error(\"not implemented\");\r\n      }\r\n      case ExpressionId.Load: {\r\n        this.push(\"load<\");\r\n        this.push(nativeTypeToType(type));\r\n        this.push(\">(\");\r\n        this.push(getLoadOffset(expr).toString(10));\r\n        this.push(\" + \");\r\n        this.decompileExpression(getLoadPtr(expr));\r\n        this.push(\")\");\r\n        return;\r\n      }\r\n      case ExpressionId.Store: {\r\n        this.push(\"store<\");\r\n        this.push(nativeTypeToType(type));\r\n        this.push(\">(\");\r\n        this.push(getStoreOffset(expr).toString(10));\r\n        this.push(\" + \");\r\n        this.decompileExpression(getStorePtr(expr));\r\n        this.push(\", \");\r\n        this.decompileExpression(getStoreValue(expr));\r\n        this.push(\")\");\r\n        return;\r\n      }\r\n      case ExpressionId.Const: {\r\n        switch (type) {\r\n          case NativeType.I32: {\r\n            this.push(getConstValueI32(expr).toString(10));\r\n            return;\r\n          }\r\n          case NativeType.I64: {\r\n            this.push(\r\n              i64_to_string(\r\n                i64_new(\r\n                  getConstValueI64Low(expr),\r\n                  getConstValueI64High(expr)\r\n                )\r\n              )\r\n            );\r\n            return;\r\n          }\r\n          case NativeType.F32: {\r\n            this.push(getConstValueF32(expr).toString(10));\r\n            return;\r\n          }\r\n          case NativeType.F64: {\r\n            this.push(getConstValueF64(expr).toString(10));\r\n            return;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Unary: {\r\n        switch (getUnaryOp(expr)) {\r\n          case UnaryOp.ClzI32: {\r\n            this.push(\"clz<i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CtzI32: {\r\n            this.push(\"ctz<i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.PopcntI32: {\r\n            this.push(\"popcnt<i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.NegF32:\r\n          case UnaryOp.NegF64: {\r\n            this.push(\"-\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.AbsF32: {\r\n            this.push(\"abs<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CeilF32: {\r\n            this.push(\"ceil<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.FloorF32: {\r\n            this.push(\"floor<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32: {\r\n            this.push(\"trunc<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.NearestF32: {\r\n            this.push(\"nearest<i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.SqrtF32: {\r\n            this.push(\"sqrt<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.EqzI32:\r\n          case UnaryOp.EqzI64: {\r\n            this.push(\"!\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ClzI64: {\r\n            this.push(\"clz<i64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CtzI64: {\r\n            this.push(\"ctz<i64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.PopcntI64: {\r\n            this.push(\"popcnt<i64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.AbsF64: {\r\n            this.push(\"abs<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CeilF64: {\r\n            this.push(\"ceil<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.FloorF64: {\r\n            this.push(\"floor<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64: {\r\n            this.push(\"trunc<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.NearestF64: {\r\n            this.push(\"nearest<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.SqrtF64: {\r\n            this.push(\"sqrt<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ExtendI32: {\r\n            this.push(\"<i64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ExtendU32: {\r\n            this.push(\"<i64><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.WrapI64: {\r\n            this.push(\"<i32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToI32: {\r\n            this.push(\"<i32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToI64: {\r\n            this.push(\"<i64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToU32: {\r\n            this.push(\"<i32><u32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToU64: {\r\n            this.push(\"<i64><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToI32: {\r\n            this.push(\"<i32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToI64: {\r\n            this.push(\"<i64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToU32: {\r\n            this.push(\"<i32><u32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToU64: {\r\n            this.push(\"<i64><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretF32: {\r\n            this.push(\"reinterpret<f32,i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretF64: {\r\n            this.push(\"reinterpret<f64,i64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI32ToF32: {\r\n            this.push(\"<f32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI32ToF64: {\r\n            this.push(\"<f64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU32ToF32: {\r\n            this.push(\"<f32><u32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU32ToF64: {\r\n            this.push(\"<f64><u32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI64ToF32: {\r\n            this.push(\"<f32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI64ToF64: {\r\n            this.push(\"<f64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU64ToF32: {\r\n            this.push(\"<f32><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU64ToF64: {\r\n            this.push(\"<f64><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.PromoteF32: {\r\n            this.push(\"<f64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.DemoteF64: {\r\n            this.push(\"<f32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretI32: {\r\n            this.push(\"reinterpret<i32,f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretI64: {\r\n            this.push(\"reinterpret<i64,f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Binary: { // TODO: precedence\r\n        switch (getBinaryOp(expr)) {\r\n          case BinaryOp.AddI32:\r\n          case BinaryOp.AddI64:\r\n          case BinaryOp.AddF32:\r\n          case BinaryOp.AddF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" + \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.SubI32:\r\n          case BinaryOp.SubI64:\r\n          case BinaryOp.SubF32:\r\n          case BinaryOp.SubF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" - \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.MulI32:\r\n          case BinaryOp.MulI64:\r\n          case BinaryOp.MulF32:\r\n          case BinaryOp.MulF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" * \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.DivI32:\r\n          case BinaryOp.DivI64:\r\n          case BinaryOp.DivF32:\r\n          case BinaryOp.DivF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" / \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.DivU32: {\r\n            this.push(\"<i32>(<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" / <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.RemI32:\r\n          case BinaryOp.RemI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" % \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RemU32: {\r\n            this.push(\"<i32>(<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" / <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.AndI32:\r\n          case BinaryOp.AndI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" & \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.OrI32:\r\n          case BinaryOp.OrI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" | \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.XorI32:\r\n          case BinaryOp.XorI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" ^ \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.ShlI32:\r\n          case BinaryOp.ShlI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" << \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.ShrU32:\r\n          case BinaryOp.ShrU64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >>> \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.ShrI32:\r\n          case BinaryOp.ShrI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >> \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RotlI32: {\r\n            this.push(\"rotl<i32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.RotrI32: {\r\n            this.push(\"rotr<i32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.EqI32:\r\n          case BinaryOp.EqI64:\r\n          case BinaryOp.EqF32:\r\n          case BinaryOp.EqF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" == \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.NeI32:\r\n          case BinaryOp.NeI64:\r\n          case BinaryOp.NeF32:\r\n          case BinaryOp.NeF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" != \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LtI32:\r\n          case BinaryOp.LtI64:\r\n          case BinaryOp.LtF32:\r\n          case BinaryOp.LtF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" < \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LtU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" < <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LeI32:\r\n          case BinaryOp.LeI64:\r\n          case BinaryOp.LeF32:\r\n          case BinaryOp.LeF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" <= \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LeU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" <= <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GtI32:\r\n          case BinaryOp.GtI64:\r\n          case BinaryOp.GtF32:\r\n          case BinaryOp.GtF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" > \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GtU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" > <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GeI32:\r\n          case BinaryOp.GeI64:\r\n          case BinaryOp.GeF32:\r\n          case BinaryOp.GeF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >= \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GeU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >= <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.DivU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" / <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RemU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" % <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RotlI64: {\r\n            this.push(\"rotl<i64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.RotrI64: {\r\n            this.push(\"rotr<i64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.LtU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" < <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LeU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" <= <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GtU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" > <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GeU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >= <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.CopysignF32: {\r\n            this.push(\"copysign<f32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MinF32: {\r\n            this.push(\"min<f32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MaxF32: {\r\n            this.push(\"max<f32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.CopysignF64: {\r\n            this.push(\"copysign<f64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MinF64: {\r\n            this.push(\"min<f64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MaxF64: {\r\n            this.push(\"max<f64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Select: {\r\n        this.push(\"select<\");\r\n        this.push(nativeTypeToType(type));\r\n        this.push(\">(\");\r\n        this.decompileExpression(getSelectThen(expr));\r\n        this.push(\", \");\r\n        this.decompileExpression(getSelectElse(expr));\r\n        this.push(\", \");\r\n        this.decompileExpression(getSelectCondition(expr));\r\n        this.push(\")\");\r\n        return;\r\n      }\r\n      case ExpressionId.Drop: {\r\n        this.decompileExpression(getDropValue(expr));\r\n        this.push(\";\\n\");\r\n        return;\r\n      }\r\n      case ExpressionId.Return: {\r\n        if (nested = getReturnValue(expr)) {\r\n          this.push(\"return \");\r\n          this.decompileExpression(nested);\r\n          this.push(\";\\n\");\r\n        } else {\r\n          this.push(\"return;\\n\");\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Host: {\r\n        switch (getHostOp(expr)) {\r\n          case HostOp.CurrentMemory: {\r\n            this.push(\"current_memory()\");\r\n            return;\r\n          }\r\n          case HostOp.GrowMemory: {\r\n            this.push(\"grow_memory(\");\r\n            this.decompileExpression(getHostOperand(expr, 0));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Nop: {\r\n        this.push(\";\\n\");\r\n        return;\r\n      }\r\n      case ExpressionId.Unreachable: {\r\n        this.push(\"unreachable()\");\r\n        return;\r\n      }\r\n      case ExpressionId.AtomicCmpxchg:\r\n      case ExpressionId.AtomicRMW:\r\n      case ExpressionId.AtomicWait:\r\n      case ExpressionId.AtomicWake:\r\n    }\r\n    throw new Error(\"not implemented\");\r\n  }\r\n\r\n  private push(text: string): void {\r\n    // mostly here so we can add debugging if necessary\r\n    this.text.push(text);\r\n  }\r\n\r\n  finish(): string {\r\n    var ret = this.text.join(\"\");\r\n    this.text = [];\r\n    return ret;\r\n  }\r\n}\r\n\r\nfunction nativeTypeToType(type: NativeType): string {\r\n  switch (type) {\r\n    case NativeType.None: return \"void\";\r\n    case NativeType.I32: return \"i32\";\r\n    case NativeType.I64: return \"i64\";\r\n    case NativeType.F32: return \"f32\";\r\n    case NativeType.F64: return \"f64\";\r\n    case NativeType.Unreachable: throw new Error(\"unreachable type\");\r\n    case NativeType.Auto: throw new Error(\"auto type\");\r\n    default: throw new Error(\"unexpected type\");\r\n  }\r\n}\r\n","/**\r\n * Low-level C-like compiler API.\r\n * @module index\r\n *//***/\r\n\r\nimport {\r\n  Compiler,\r\n  Options,\r\n  Target,\r\n  Feature\r\n} from \"./compiler\";\r\n\r\nimport {\r\n  Decompiler\r\n} from \"./decompiler\";\r\n\r\nimport {\r\n  IDLBuilder,\r\n  TSDBuilder\r\n} from \"./definitions\";\r\n\r\nimport {\r\n  DiagnosticMessage,\r\n  DiagnosticCategory,\r\n  formatDiagnosticMessage\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Module\r\n} from \"./module\";\r\n\r\nimport {\r\n  Parser\r\n} from \"./parser\";\r\n\r\nimport {\r\n  Program,\r\n  LIBRARY_PREFIX\r\n} from \"./program\";\r\n\r\n/** Parses a source file. If `parser` has been omitted a new one is created. */\r\nexport function parseFile(text: string, path: string, isEntry: bool = false,\r\n  parser: Parser | null = null\r\n): Parser {\r\n  if (!parser) parser = new Parser();\r\n  parser.parseFile(text, path, isEntry);\r\n  return parser;\r\n}\r\n\r\n/** Obtains the next required file's path. Returns `null` once complete. */\r\nexport function nextFile(parser: Parser): string | null {\r\n  return parser.nextFile();\r\n}\r\n\r\n/** Obtains the next diagnostic message. Returns `null` once complete. */\r\nexport function nextDiagnostic(parser: Parser): DiagnosticMessage | null {\r\n  var program = parser.program;\r\n  return program.diagnosticsOffset < program.diagnostics.length\r\n    ? program.diagnostics[program.diagnosticsOffset++]\r\n    : null;\r\n}\r\n\r\n/** Formats a diagnostic message to a string. */\r\nexport { formatDiagnosticMessage as formatDiagnostic };\r\n\r\n/** Tests whether a diagnostic is informatory. */\r\nexport function isInfo(message: DiagnosticMessage): bool {\r\n  return message.category == DiagnosticCategory.INFO;\r\n}\r\n\r\n/** Tests whether a diagnostic is a warning. */\r\nexport function isWarning(message: DiagnosticMessage): bool {\r\n  return message.category == DiagnosticCategory.WARNING;\r\n}\r\n\r\n/** Tests whether a diagnostic is an error. */\r\nexport function isError(message: DiagnosticMessage): bool {\r\n  return message.category == DiagnosticCategory.ERROR;\r\n}\r\n\r\n/** Creates a new set of compiler options. */\r\nexport function createOptions(): Options {\r\n  return new Options();\r\n}\r\n\r\n/** Sets the `target` option. */\r\nexport function setTarget(options: Options, target: Target): void {\r\n  options.target = target;\r\n}\r\n\r\n/** Sets the `noTreeShaking` option. */\r\nexport function setNoTreeShaking(options: Options, noTreeShaking: bool): void {\r\n  options.noTreeShaking = noTreeShaking;\r\n}\r\n\r\n/** Sets the `noAssert` option. */\r\nexport function setNoAssert(options: Options, noAssert: bool): void {\r\n  options.noAssert = noAssert;\r\n}\r\n\r\n/** Sets the `noMemory` option. */\r\nexport function setNoMemory(options: Options, noMemory: bool): void {\r\n  options.noMemory = noMemory;\r\n}\r\n\r\n/** Sets the `importMemory` option. */\r\nexport function setImportMemory(options: Options, importMemory: bool): void {\r\n  options.importMemory = importMemory;\r\n}\r\n\r\n/** Sets the `importTable` option. */\r\nexport function setImportTable(options: Options, importTable: bool): void {\r\n  options.importTable = importTable;\r\n}\r\n\r\n/** Sets the `sourceMap` option. */\r\nexport function setSourceMap(options: Options, sourceMap: bool): void {\r\n  options.sourceMap = sourceMap;\r\n}\r\n\r\n/** Sets the `memoryBase` option. */\r\nexport function setMemoryBase(options: Options, memoryBase: u32): void {\r\n  options.memoryBase = memoryBase;\r\n}\r\n\r\n/** Sets a 'globalAliases' value. */\r\nexport function setGlobalAlias(options: Options, name: string, alias: string): void {\r\n  var globalAliases = options.globalAliases;\r\n  if (!globalAliases) options.globalAliases = globalAliases = new Map();\r\n  globalAliases.set(name, alias);\r\n}\r\n\r\n/** Sign extension operations. */\r\nexport const FEATURE_SIGN_EXTENSION = Feature.SIGN_EXTENSION;\r\n/** Mutable global imports and exports. */\r\nexport const FEATURE_MUTABLE_GLOBAL = Feature.MUTABLE_GLOBAL;\r\n\r\n/** Enables a specific feature. */\r\nexport function enableFeature(options: Options, feature: Feature): void {\r\n  options.features |= feature;\r\n}\r\n\r\n/** Finishes parsing. */\r\nexport function finishParsing(parser: Parser): Program {\r\n  return parser.finish();\r\n}\r\n\r\n/** Compiles the sources computed by the parser to a module. */\r\nexport function compileProgram(program: Program, options: Options | null = null): Module {\r\n  return new Compiler(program, options).compile();\r\n}\r\n\r\n/** Decompiles a module to its (low level) source. */\r\nexport function decompileModule(module: Module): string {\r\n  var decompiler = new Decompiler();\r\n  decompiler.decompile(module);\r\n  return decompiler.finish();\r\n}\r\n\r\n/** Builds WebIDL definitions for the specified program. */\r\nexport function buildIDL(program: Program): string {\r\n  return IDLBuilder.build(program);\r\n}\r\n\r\n/** Builds TypeScript definitions for the specified program. */\r\nexport function buildTSD(program: Program): string {\r\n  return TSDBuilder.build(program);\r\n}\r\n\r\n/** Prefix indicating a library file. */\r\nexport { LIBRARY_PREFIX };\r\n","const F64 = new Float64Array(1);\r\nconst F32 = new Float32Array(F64.buffer);\r\nconst I32 = new Int32Array(F64.buffer);\r\n\r\nglobal.f32_as_i32 = function(value) {\r\n  F32[0] = value;\r\n  return I32[0];\r\n};\r\n\r\nglobal.i32_as_f32 = function(value) {\r\n  I32[0] = value;\r\n  return F32[0];\r\n};\r\n\r\nglobal.f64_as_i64 = function(value) {\r\n  F64[0] = value;\r\n  return i64_new(I32[0], I32[1]);\r\n};\r\n\r\nglobal.i64_as_f64 = function(value) {\r\n  I32[0] = i64_low(value);\r\n  I32[1] = i64_high(value);\r\n  return F64[0];\r\n};\r\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","const Long = global.Long || require(\"long\");\r\n\r\nglobal.i64_zero = Long.ZERO;\r\n\r\nglobal.i64_one = Long.ONE;\r\n\r\nglobal.i64_new = function(lo, hi) {\r\n  return Long.fromBits(lo, hi);\r\n};\r\n\r\nglobal.i64_low = function(value) {\r\n  return value.low;\r\n};\r\n\r\nglobal.i64_high = function(value) {\r\n  return value.high;\r\n};\r\n\r\nglobal.i64_add = function(left, right) {\r\n  return left.add(right);\r\n};\r\n\r\nglobal.i64_sub = function(left, right) {\r\n  return left.sub(right);\r\n};\r\n\r\nglobal.i64_mul = function(left, right) {\r\n  return left.mul(right);\r\n};\r\n\r\nglobal.i64_div = function(left, right) {\r\n  return left.div(right);\r\n};\r\n\r\nglobal.i64_div_u = function(left, right) {\r\n  return left.toUnsigned().div(right.toUnsigned()).toSigned();\r\n};\r\n\r\nglobal.i64_rem = function(left, right) {\r\n  return left.mod(right);\r\n};\r\n\r\nglobal.i64_rem_u = function(left, right) {\r\n  return left.toUnsigned().mod(right.toUnsigned()).toSigned();\r\n};\r\n\r\nglobal.i64_and = function(left, right) {\r\n  return left.and(right);\r\n};\r\n\r\nglobal.i64_or = function(left, right) {\r\n  return left.or(right);\r\n};\r\n\r\nglobal.i64_xor = function(left, right) {\r\n  return left.xor(right);\r\n};\r\n\r\nglobal.i64_shl = function(left, right) {\r\n  return left.shl(right);\r\n};\r\n\r\nglobal.i64_shr = function(left, right) {\r\n  return left.shr(right);\r\n};\r\n\r\nglobal.i64_shr_u = function(left, right) {\r\n  return left.shru(right);\r\n};\r\n\r\nglobal.i64_not = function(value) {\r\n  return value.not();\r\n};\r\n\r\nglobal.i64_eq = function(left, right) {\r\n  return left.eq(right);\r\n};\r\n\r\nglobal.i64_ne = function(left, right) {\r\n  return left.ne(right);\r\n};\r\n\r\nglobal.i64_align = function(value, alignment) {\r\n  assert(alignment && (alignment & (alignment - 1)) == 0);\r\n  var mask = Long.fromInt(alignment - 1);\r\n  return value.add(mask).and(mask.not());\r\n};\r\n\r\nglobal.i64_is_i8 = function(value) {\r\n  return value.high === 0 && (value.low >= 0 && value.low <= i8.MAX_VALUE)\r\n      || value.high === -1 && (value.low >= i8.MIN_VALUE && value.low < 0);\r\n};\r\n\r\nglobal.i64_is_i16 = function(value) {\r\n  return value.high === 0 && (value.low >= 0 && value.low <= i16.MAX_VALUE)\r\n      || value.high === -1 && (value.low >= i16.MIN_VALUE && value.low < 0);\r\n};\r\n\r\nglobal.i64_is_i32 = function(value) {\r\n  return (value.high === 0 && value.low >= 0)\r\n      || (value.high === -1 && value.low < 0);\r\n};\r\n\r\nglobal.i64_is_u8 = function(value) {\r\n  return value.high === 0 && value.low >= 0 && value.low <= u8.MAX_VALUE;\r\n};\r\n\r\nglobal.i64_is_u16 = function(value) {\r\n  return value.high === 0 && value.low >= 0 && value.low <= u16.MAX_VALUE;\r\n};\r\n\r\nglobal.i64_is_u32 = function(value) {\r\n  return value.high === 0;\r\n};\r\n\r\nglobal.i64_is_bool = function(value) {\r\n  return value.high === 0 && (value.low === 0 || value.low === 1);\r\n};\r\n\r\nconst minSafeF32 = Long.fromNumber(f32.MIN_SAFE_INTEGER);\r\nconst maxSafeF32 = Long.fromNumber(f32.MAX_SAFE_INTEGER);\r\n\r\nglobal.i64_is_f32 = function(value) {\r\n  return value.gte(minSafeF32) && value.lte(maxSafeF32);\r\n};\r\n\r\nconst minSafeF64 = Long.fromNumber(f64.MIN_SAFE_INTEGER);\r\nconst maxSafeF64 = Long.fromNumber(f64.MAX_SAFE_INTEGER);\r\n\r\nglobal.i64_is_f64 = function(value) {\r\n  return value.gte(minSafeF64) && value.lte(maxSafeF64);\r\n};\r\n\r\nglobal.i64_to_f32 = function(value) {\r\n  return global.Math.fround(value.toNumber());\r\n};\r\n\r\nglobal.i64_to_f64 = function(value) {\r\n  return value.toNumber();\r\n};\r\n\r\nglobal.i64_to_string = function(value, unsigned) {\r\n  return (unsigned ? value.toUnsigned() : value).toString(10);\r\n};\r\n","/** @module util *//***/\r\n\r\n/** Reads a 32-bit integer from the specified buffer. */\r\nexport function readI32(buffer: Uint8Array, offset: i32): i32 {\r\n  return buffer[offset    ]\r\n       | buffer[offset + 1] << 8\r\n       | buffer[offset + 2] << 16\r\n       | buffer[offset + 3] << 24;\r\n}\r\n\r\n/** Writes a 32-bit integer to the specified buffer. */\r\nexport function writeI32(value: i32, buffer: Uint8Array, offset: i32): void {\r\n  buffer[offset    ] = value;\r\n  buffer[offset + 1] = value >>> 8;\r\n  buffer[offset + 2] = value >>> 16;\r\n  buffer[offset + 3] = value >>> 24;\r\n}\r\n\r\n/** Reads a 64-bit integer from the specified buffer. */\r\nexport function readI64(buffer: Uint8Array, offset: i32): I64 {\r\n  var lo = readI32(buffer, offset);\r\n  var hi = readI32(buffer, offset + 4);\r\n  return i64_new(lo, hi);\r\n}\r\n\r\n/** Writes a 64-bit integer to the specified buffer. */\r\nexport function writeI64(value: I64, buffer: Uint8Array, offset: i32): void {\r\n  writeI32(i64_low(value), buffer, offset);\r\n  writeI32(i64_high(value), buffer, offset + 4);\r\n}\r\n\r\n/** Reads a 32-bit float from the specified buffer. */\r\nexport function readF32(buffer: Uint8Array, offset: i32): f32 {\r\n  return i32_as_f32(readI32(buffer, offset));\r\n}\r\n\r\n/** Writes a 32-bit float to the specified buffer. */\r\nexport function writeF32(value: f32, buffer: Uint8Array, offset: i32): void {\r\n  writeI32(f32_as_i32(value), buffer, offset);\r\n}\r\n\r\n/** Reads a 64-bit float from the specified buffer. */\r\nexport function readF64(buffer: Uint8Array, offset: i32): f64 {\r\n  return i64_as_f64(readI64(buffer, offset));\r\n}\r\n\r\n/** Writes a 64-bit float to the specified buffer. */\r\nexport function writeF64(value: f64, buffer: Uint8Array, offset: i32): void {\r\n  var valueI64 = f64_as_i64(value);\r\n  writeI32(i64_low(valueI64), buffer, offset);\r\n  writeI32(i64_high(valueI64), buffer, offset + 4);\r\n}\r\n","/** @module util *//***/\r\n\r\nconst indentX1 = \"  \";\r\nconst indentX2 = \"    \";\r\nconst indentX4 = \"        \";\r\n\r\n/** Creates an indentation matching the number of specified levels. */\r\nexport function indent(sb: string[], level: i32): void {\r\n  while (level >= 4) {\r\n    sb.push(indentX4);\r\n    level -= 4;\r\n  }\r\n  if (level >= 2) {\r\n    sb.push(indentX2);\r\n    level -= 2;\r\n  }\r\n  if (level) {\r\n    sb.push(indentX1);\r\n  }\r\n}\r\n","/** @module util *//***/\r\n\r\nimport {\r\n  CharCode\r\n} from \"./charcode\";\r\n\r\nconst separator = CharCode.SLASH;\r\n\r\n/**\r\n * Normalizes the specified path, removing interior placeholders.\r\n * Expects a posix-compatible relative path (not Windows compatible).\r\n */\r\nexport function normalizePath(path: string): string {\r\n  var pos = 0;\r\n  var len = path.length;\r\n\r\n  // trim leading './'\r\n  while (pos + 1 < len &&\r\n    path.charCodeAt(pos) == CharCode.DOT &&\r\n    path.charCodeAt(pos + 1) == separator\r\n  ) {\r\n    pos += 2;\r\n  }\r\n\r\n  if (pos > 0 || len < path.length) {\r\n    path = path.substring(pos, len);\r\n    len -= pos;\r\n    pos = 0;\r\n  }\r\n\r\n  var atEnd: bool;\r\n  while (pos + 1 < len) {\r\n    atEnd = false;\r\n\r\n    // we are only interested in '/.' sequences ...\r\n    if (\r\n      path.charCodeAt(pos) == separator &&\r\n      path.charCodeAt(pos + 1) == CharCode.DOT\r\n    ) {\r\n      // '/.' ( '/' | $ )\r\n      atEnd = pos + 2 == len;\r\n      if (atEnd ||\r\n        pos + 2 < len &&\r\n        path.charCodeAt(pos + 2) == separator\r\n      ) {\r\n        path = atEnd\r\n          ? path.substring(0, pos)\r\n          : path.substring(0, pos) + path.substring(pos + 2);\r\n        len -= 2;\r\n        continue;\r\n      }\r\n\r\n      // '/.' ( './' | '.' $ )\r\n      atEnd = pos + 3 == len;\r\n      if (atEnd && path.charCodeAt(pos + 2) == CharCode.DOT ||\r\n        pos + 3 < len &&\r\n        path.charCodeAt(pos + 2) == CharCode.DOT &&\r\n        path.charCodeAt(pos + 3) == separator\r\n      ) {\r\n        // find preceeding '/'\r\n        let ipos = pos;\r\n        while (--ipos >= 0) {\r\n          if (path.charCodeAt(ipos) == separator) {\r\n            if (pos - ipos != 3 ||\r\n              path.charCodeAt(ipos + 1) != CharCode.DOT ||\r\n              path.charCodeAt(ipos + 2) != CharCode.DOT\r\n            ) { // exclude '..' itself\r\n              path = atEnd\r\n                ? path.substring(0, ipos)\r\n                : path.substring(0, ipos) + path.substring(pos + 3);\r\n              len -= pos + 3 - ipos;\r\n              pos = ipos - 1; // incremented again at end of loop\r\n            }\r\n            break;\r\n          }\r\n        }\r\n\r\n        // if there's no preceeding '/', trim start if non-empty\r\n        if (ipos < 0 && pos > 0) {\r\n          if (pos != 2 ||\r\n            path.charCodeAt(0) != CharCode.DOT ||\r\n            path.charCodeAt(1) != CharCode.DOT\r\n          ) { // exclude '..' itself\r\n            path = path.substring(pos + 4);\r\n            len = path.length;\r\n            continue;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    pos++;\r\n  }\r\n  return len > 0 ? path : \".\";\r\n}\r\n\r\n/** Resolves the specified path relative to the specified origin. */\r\nexport function resolvePath(normalizedPath: string, origin: string): string {\r\n  if (normalizedPath.startsWith(\"std/\")) {\r\n    return normalizedPath;\r\n  }\r\n  return normalizePath(\r\n    dirname(origin) + String.fromCharCode(separator) + normalizedPath\r\n  );\r\n}\r\n\r\n/** Obtains the directory portion of a normalized path. */\r\nexport function dirname(normalizedPath: string): string {\r\n  var pos = normalizedPath.length;\r\n  while (--pos > 0) {\r\n    if (normalizedPath.charCodeAt(pos) == separator) {\r\n      return normalizedPath.substring(0, pos);\r\n    }\r\n  }\r\n  return \".\";\r\n}\r\n","/** @module util *//***/\r\n\r\n/** An enum of named character codes. */\r\nexport const enum CharCode {\r\n\r\n  NULL = 0,\r\n  LINEFEED = 0x0A,\r\n  CARRIAGERETURN = 0x0D,\r\n  LINESEPARATOR = 0x2028,\r\n  PARAGRAPHSEPARATOR = 0x2029,\r\n  NEXTLINE = 0x0085,\r\n\r\n  SPACE = 0x20,\r\n  NONBREAKINGSPACE = 0xA0,\r\n  ENQUAD = 0x2000,\r\n  EMQUAD = 0x2001,\r\n  ENSPACE = 0x2002,\r\n  EMSPACE = 0x2003,\r\n  THREEPEREMSPACE = 0x2004,\r\n  FOURPEREMSPACE = 0x2005,\r\n  SIXPEREMSPACE = 0x2006,\r\n  FIGURESPACE = 0x2007,\r\n  PUNCTUATIONSPACE = 0x2008,\r\n  THINSPACE = 0x2009,\r\n  HAIRSPACE = 0x200A,\r\n  ZEROWIDTHSPACE = 0x200B,\r\n  NARROWNOBREAKSPACE = 0x202F,\r\n  IDEOGRAPHICSPACE = 0x3000,\r\n  MATHEMATICALSPACE = 0x205F,\r\n  OGHAM = 0x1680,\r\n\r\n  _ = 0x5F,\r\n\r\n  _0 = 0x30,\r\n  _1 = 0x31,\r\n  _2 = 0x32,\r\n  _3 = 0x33,\r\n  _4 = 0x34,\r\n  _5 = 0x35,\r\n  _6 = 0x36,\r\n  _7 = 0x37,\r\n  _8 = 0x38,\r\n  _9 = 0x39,\r\n\r\n  a = 0x61,\r\n  b = 0x62,\r\n  c = 0x63,\r\n  d = 0x64,\r\n  e = 0x65,\r\n  f = 0x66,\r\n  g = 0x67,\r\n  h = 0x68,\r\n  i = 0x69,\r\n  j = 0x6A,\r\n  k = 0x6B,\r\n  l = 0x6C,\r\n  m = 0x6D,\r\n  n = 0x6E,\r\n  o = 0x6F,\r\n  p = 0x70,\r\n  q = 0x71,\r\n  r = 0x72,\r\n  s = 0x73,\r\n  t = 0x74,\r\n  u = 0x75,\r\n  v = 0x76,\r\n  w = 0x77,\r\n  x = 0x78,\r\n  y = 0x79,\r\n  z = 0x7A,\r\n\r\n  A = 0x41,\r\n  B = 0x42,\r\n  C = 0x43,\r\n  D = 0x44,\r\n  E = 0x45,\r\n  F = 0x46,\r\n  G = 0x47,\r\n  H = 0x48,\r\n  I = 0x49,\r\n  J = 0x4A,\r\n  K = 0x4B,\r\n  L = 0x4C,\r\n  M = 0x4D,\r\n  N = 0x4E,\r\n  O = 0x4F,\r\n  P = 0x50,\r\n  Q = 0x51,\r\n  R = 0x52,\r\n  S = 0x53,\r\n  T = 0x54,\r\n  U = 0x55,\r\n  V = 0x56,\r\n  W = 0x57,\r\n  X = 0x58,\r\n  Y = 0x59,\r\n  Z = 0x5a,\r\n\r\n  AMPERSAND = 0x26,\r\n  ASTERISK = 0x2A,\r\n  AT = 0x40,\r\n  BACKSLASH = 0x5C,\r\n  BACKTICK = 0x60,\r\n  BAR = 0x7C,\r\n  CARET = 0x5E,\r\n  CLOSEBRACE = 0x7D,\r\n  CLOSEBRACKET = 0x5D,\r\n  CLOSEPAREN = 0x29,\r\n  COLON = 0x3A,\r\n  COMMA = 0x2C,\r\n  DOLLAR = 0x24,\r\n  DOT = 0x2E,\r\n  DOUBLEQUOTE = 0x22,\r\n  EQUALS = 0x3D,\r\n  EXCLAMATION = 0x21,\r\n  GREATERTHAN = 0x3E,\r\n  HASH = 0x23,\r\n  LESSTHAN = 0x3C,\r\n  MINUS = 0x2D,\r\n  OPENBRACE = 0x7B,\r\n  OPENBRACKET = 0x5B,\r\n  OPENPAREN = 0x28,\r\n  PERCENT = 0x25,\r\n  PLUS = 0x2B,\r\n  QUESTION = 0x3F,\r\n  SEMICOLON = 0x3B,\r\n  SINGLEQUOTE = 0x27,\r\n  SLASH = 0x2F,\r\n  TILDE = 0x7E,\r\n\r\n  BACKSPACE = 0x08,\r\n  FORMFEED = 0x0C,\r\n  BYTEORDERMARK = 0xFEFF,\r\n  TAB = 0x09,\r\n  VERTICALTAB = 0x0B\r\n}\r\n\r\n/** Tests if the specified character code is some sort of line break. */\r\nexport function isLineBreak(c: CharCode): bool {\r\n  switch (c) {\r\n    case CharCode.LINEFEED:\r\n    case CharCode.CARRIAGERETURN:\r\n    case CharCode.LINESEPARATOR:\r\n    case CharCode.PARAGRAPHSEPARATOR: {\r\n      return true;\r\n    }\r\n    default: {\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\n/** Tests if the specified character code is some sort of white space. */\r\nexport function isWhiteSpace(c: i32): bool {\r\n  switch (c) {\r\n    case CharCode.SPACE:\r\n    case CharCode.TAB:\r\n    case CharCode.VERTICALTAB:\r\n    case CharCode.FORMFEED:\r\n    case CharCode.NONBREAKINGSPACE:\r\n    case CharCode.NEXTLINE:\r\n    case CharCode.OGHAM:\r\n    case CharCode.NARROWNOBREAKSPACE:\r\n    case CharCode.MATHEMATICALSPACE:\r\n    case CharCode.IDEOGRAPHICSPACE:\r\n    case CharCode.BYTEORDERMARK: {\r\n      return true;\r\n    }\r\n    default: {\r\n      return c >= CharCode.ENQUAD && c <= CharCode.ZEROWIDTHSPACE;\r\n    }\r\n  }\r\n}\r\n\r\n/** Tests if the specified character code is a valid decimal digit. */\r\nexport function isDecimalDigit(c: i32): bool {\r\n  return c >= CharCode._0 && c <= CharCode._9;\r\n}\r\n\r\n/** Tests if the specified character code is a valid octal digit. */\r\nexport function isOctalDigit(c: i32): bool {\r\n  return c >= CharCode._0 && c <= CharCode._7;\r\n}\r\n\r\n/** Tests if the specified character code is a valid start of an identifier. */\r\nexport function isIdentifierStart(c: i32): bool {\r\n  return c >= CharCode.A && c <= CharCode.Z\r\n      || c >= CharCode.a && c <= CharCode.z\r\n      || c == CharCode.DOLLAR\r\n      || c == CharCode._\r\n      || c > 0x7f && isUnicodeIdentifierStart(c);\r\n}\r\n\r\n/** Tests if the specified character code is a valid keyword character. */\r\nexport function isKeywordCharacter(c: i32): bool {\r\n  return c >= CharCode.a && c <= CharCode.z;\r\n}\r\n\r\n/** Tests if the specified character code is a valid part of an identifier. */\r\nexport function isIdentifierPart(c: i32): bool {\r\n  return c >= CharCode.A && c <= CharCode.Z\r\n      || c >= CharCode.a && c <= CharCode.z\r\n      || c >= CharCode._0 && c <= CharCode._9\r\n      || c == CharCode.DOLLAR\r\n      || c == CharCode._\r\n      || c > 0x7f && isUnicodeIdentifierPart(c);\r\n}\r\n\r\n// storing as u16 to save memory\r\nconst unicodeIdentifierStart: u16[] = [\r\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\r\n  740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906,\r\n  908, 908, 910, 929, 931,\r\n  1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\r\n  1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774,\r\n  1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,\r\n  1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088,\r\n  2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384,\r\n  2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474,\r\n  2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\r\n  2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613,\r\n  2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705,\r\n  2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,\r\n  2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,\r\n  2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958,\r\n  2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,\r\n  2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,\r\n  3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\r\n  3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333,\r\n  3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\r\n  3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\r\n  3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725,\r\n  3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\r\n  3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,\r\n  3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,\r\n  4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293,\r\n  4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696,\r\n  4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798,\r\n  4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\r\n  5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872,\r\n  5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016,\r\n  6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389,\r\n  6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688,\r\n  6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141,\r\n  7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424,\r\n  7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025,\r\n  8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,\r\n  8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\r\n  8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469,\r\n  8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,\r\n  8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584,\r\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520,\r\n  11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670,\r\n  11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,\r\n  11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329,\r\n  12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540,\r\n  12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893,\r\n  19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538,\r\n  42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888,\r\n  42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015,\r\n  43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\r\n  43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520,\r\n  43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695,\r\n  43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739,\r\n  43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798,\r\n  43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243,\r\n  55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285,\r\n  64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323,\r\n  64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\r\n  65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\r\n  65479, 65482, 65487, 65490, 65495, 65498, 65500,\r\n];\r\nconst unicodeIdentifierPart: u16[] = [\r\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\r\n  740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906,\r\n  908, 908, 910, 929, 931,\r\n  1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415,\r\n  1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520,\r\n  1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,\r\n  1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112,\r\n  2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423,\r\n  2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,\r\n  2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,\r\n  2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602,\r\n  2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632,\r\n  2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693,\r\n  2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757,\r\n  2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821,\r\n  2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884,\r\n  2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,\r\n  2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972,\r\n  2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018,\r\n  3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088,\r\n  3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157,\r\n  3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216,\r\n  3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285,\r\n  3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,\r\n  3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,\r\n  3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515,\r\n  3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570,\r\n  3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720,\r\n  3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,\r\n  3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789,\r\n  3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895,\r\n  3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028,\r\n  4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304,\r\n  4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744,\r\n  4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\r\n  4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108,\r\n  5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902,\r\n  5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099,\r\n  6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272,\r\n  6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,\r\n  6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783,\r\n  6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155,\r\n  7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676,\r\n  7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\r\n  8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134,\r\n  8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205,\r\n  8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417,\r\n  8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477,\r\n  8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,\r\n  8521, 8526, 8526, 8544, 8584,\r\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,\r\n  11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686,\r\n  11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728,\r\n  11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335,\r\n  12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449,\r\n  12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799,\r\n  13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512,\r\n  42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783,\r\n  42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072,\r\n  43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309,\r\n  43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584,\r\n  43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741,\r\n  43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808,\r\n  43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,\r\n  55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275,\r\n  64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,\r\n  64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,\r\n  65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140,\r\n  65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382,\r\n  65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\r\n];\r\n\r\nfunction lookupInUnicodeMap(code: u16, map: u16[]): bool {\r\n  if (code < map[0]) return false;\r\n\r\n  var lo = 0;\r\n  var hi = map.length;\r\n  var mid: i32;\r\n\r\n  while (lo + 1 < hi) {\r\n    mid = lo + (hi - lo) / 2;\r\n    mid -= mid % 2;\r\n    if (map[mid] <= code && code <= map[mid + 1]) {\r\n      return true;\r\n    }\r\n    if (code < map[mid]) {\r\n      hi = mid;\r\n    } else {\r\n      lo = mid + 2;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction isUnicodeIdentifierStart(code: i32): bool {\r\n  return code < 0 || code > 0xffff ? false\r\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierStart);\r\n}\r\n\r\nfunction isUnicodeIdentifierPart(code: i32): bool {\r\n  return code < 0 || code > 0xffff ? false\r\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierPart);\r\n}\r\n","/**\r\n * Built-in elements providing WebAssembly core functionality.\r\n * @module builtins\r\n *//***/\r\n\r\n import {\r\n  Compiler,\r\n  ConversionKind,\r\n  WrapMode\r\n} from \"./compiler\";\r\n\r\nimport {\r\n  DiagnosticCode\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  Expression,\r\n  LiteralKind,\r\n  LiteralExpression,\r\n  StringLiteralExpression\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind,\r\n  TypeFlags\r\n} from \"./types\";\r\n\r\nimport {\r\n  BinaryOp,\r\n  UnaryOp,\r\n  HostOp,\r\n  NativeType,\r\n  ExpressionRef,\r\n  ExpressionId,\r\n  getExpressionId,\r\n  getExpressionType,\r\n  getConstValueI64High,\r\n  getConstValueI64Low,\r\n  getConstValueI32\r\n} from \"./module\";\r\n\r\nimport {\r\n  ElementKind,\r\n  FunctionPrototype,\r\n  Class,\r\n  Field,\r\n  OperatorKind,\r\n  FlowFlags\r\n} from \"./program\";\r\n\r\n/** Compiles a call to a built-in function. */\r\nexport function compileCall(\r\n  compiler: Compiler,\r\n  prototype: FunctionPrototype,\r\n  typeArguments: Type[] | null,\r\n  operands: Expression[],\r\n  contextualType: Type,\r\n  reportNode: Node\r\n): ExpressionRef {\r\n  var module = compiler.module;\r\n\r\n  var arg0: ExpressionRef,\r\n      arg1: ExpressionRef,\r\n      arg2: ExpressionRef,\r\n      ret: ExpressionRef;\r\n\r\n  // NOTE that some implementations below make use of the select expression where straight-forward.\r\n  // whether worth or not should probably be tested once/ it's known if/how embedders handle it.\r\n  // search: createSelect\r\n\r\n  switch (prototype.internalName) {\r\n\r\n    // types\r\n\r\n    case \"isInteger\": { // isInteger<T!>() / isInteger<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      return type.is(TypeFlags.INTEGER) && !type.is(TypeFlags.REFERENCE)\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n    case \"isFloat\": { // isFloat<T!>() / isFloat<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      return type.is(TypeFlags.FLOAT)\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n    case \"isSigned\": { // isSigned<T!>() / isSigned<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      return type.is(TypeFlags.SIGNED)\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n    case \"isReference\": { // isReference<T!>() / isReference<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      compiler.currentType = Type.bool;\r\n      return type.is(TypeFlags.REFERENCE)\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n    case \"isString\": { // isString<T!>() / isString<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      let classType = type.classReference;\r\n      if (classType) {\r\n        let stringInstance = compiler.program.stringInstance;\r\n        if (stringInstance && classType.isAssignableTo(stringInstance)) return module.createI32(1);\r\n      }\r\n      return module.createI32(0);\r\n    }\r\n    case \"isArray\": { // isArray<T!>() / isArray<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      let classType = type.classReference;\r\n      return classType != null && classType.lookupOverload(OperatorKind.INDEXED_GET) != null\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n\r\n    // math\r\n\r\n    case \"clz\": { // clz<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16: {\r\n          ret = module.createUnary(UnaryOp.ClzI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.BOOL: // usually overflows\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          ret = module.createUnary(UnaryOp.ClzI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createUnary(\r\n            compiler.options.isWasm64\r\n              ? UnaryOp.ClzI64\r\n              : UnaryOp.ClzI32,\r\n            arg0\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createUnary(UnaryOp.ClzI64, arg0);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"ctz\": { // ctz<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.NONE, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16: {\r\n          ret = module.createUnary(UnaryOp.CtzI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.BOOL: // usually overflows\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          ret = module.createUnary(UnaryOp.CtzI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createUnary(\r\n            compiler.options.isWasm64\r\n              ? UnaryOp.CtzI64\r\n              : UnaryOp.CtzI32,\r\n            arg0\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createUnary(UnaryOp.CtzI64, arg0);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"popcnt\": { // popcnt<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16: {\r\n          ret = module.createUnary(UnaryOp.PopcntI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.BOOL: // usually overflows\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          ret = module.createUnary(UnaryOp.PopcntI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createUnary(\r\n            compiler.options.isWasm64\r\n              ? UnaryOp.PopcntI64\r\n              : UnaryOp.PopcntI32,\r\n            arg0\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createUnary(UnaryOp.PopcntI64, arg0);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"rotl\": { // rotl<T?>(value: T, shift: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.BOOL: {\r\n          ret = compiler.ensureSmallIntegerWrap(\r\n            module.createBinary(BinaryOp.RotlI32, arg0, arg1),\r\n            compiler.currentType\r\n          );\r\n          // fall-through\r\n        }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          ret = module.createBinary(BinaryOp.RotlI32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createBinary(\r\n            compiler.options.isWasm64\r\n              ? BinaryOp.RotlI64\r\n              : BinaryOp.RotlI32,\r\n            arg0,\r\n            arg1\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createBinary(BinaryOp.RotlI64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret; // possibly overflows\r\n    }\r\n    case \"rotr\": { // rotr<T?>(value: T, shift: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.BOOL: {\r\n          ret = compiler.ensureSmallIntegerWrap(\r\n            module.createBinary(BinaryOp.RotrI32, arg0, arg1),\r\n            compiler.currentType\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          ret = module.createBinary(BinaryOp.RotrI32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createBinary(\r\n            compiler.options.isWasm64\r\n              ? BinaryOp.RotrI64\r\n              : BinaryOp.RotrI32,\r\n            arg0,\r\n            arg1\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createBinary(BinaryOp.RotrI64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret; // possibly overflowws\r\n    }\r\n    case \"abs\": { // abs<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32: {\r\n          // possibly overflows, e.g. abs<i8>(-128) == 128\r\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i32, false);\r\n          ret = module.createSelect( // x > 0 ? x : 0-x\r\n            module.createTeeLocal(tempLocal.index, arg0),\r\n            module.createBinary(BinaryOp.SubI32, // ifFalse\r\n              module.createI32(0),\r\n              module.createGetLocal(tempLocal.index, NativeType.I32)\r\n            ),\r\n            module.createBinary(BinaryOp.GtI32,\r\n              module.createGetLocal(tempLocal.index, NativeType.I32),\r\n              module.createI32(0)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal.index, arg0),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              compiler.options.usizeType.toNativeZero(module),\r\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType)\r\n            ),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.GtI64\r\n                : BinaryOp.GtI32,\r\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType),\r\n              compiler.options.usizeType.toNativeZero(module)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64: {\r\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal.index, arg0),\r\n            module.createBinary(BinaryOp.SubI64,\r\n              module.createI64(0, 0),\r\n              module.createGetLocal(tempLocal.index, NativeType.I64),\r\n            ),\r\n            module.createBinary(BinaryOp.GtI64,\r\n              module.createGetLocal(tempLocal.index, NativeType.I64),\r\n              module.createI64(0, 0)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.U64:\r\n        case TypeKind.BOOL: {\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.AbsF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.AbsF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n        default: { // void\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"max\": { // max<T?>(left: T, right: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32: {\r\n          let flow = compiler.currentFunction.flow;\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\r\n            compiler.currentType,\r\n            !flow.canOverflow(arg0, compiler.currentType)\r\n          );\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\r\n            compiler.currentType,\r\n            !flow.canOverflow(arg1, compiler.currentType)\r\n          );\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.GtI32,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.BOOL: {\r\n          let flow = compiler.currentFunction.flow;\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\r\n            compiler.currentType,\r\n            !flow.canOverflow(arg0, compiler.currentType)\r\n          );\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\r\n            compiler.currentType,\r\n            !flow.canOverflow(arg1, compiler.currentType)\r\n          );\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.GtU32,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.GtI64,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.U64: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.GtU64,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.GtI64\r\n                : BinaryOp.GtI32,\r\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\r\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.GtU64\r\n                : BinaryOp.GtU32,\r\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\r\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createBinary(BinaryOp.MaxF32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createBinary(BinaryOp.MaxF64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: { // void\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"min\": { // min<T?>(left: T, right: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32: {\r\n          let flow = compiler.currentFunction.flow;\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\r\n            compiler.currentType,\r\n            !flow.canOverflow(arg0, compiler.currentType)\r\n          );\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\r\n            compiler.currentType,\r\n            !flow.canOverflow(arg1, compiler.currentType)\r\n          );\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.LtI32,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.BOOL: {\r\n          let flow = compiler.currentFunction.flow;\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\r\n            compiler.currentType,\r\n            !flow.canOverflow(arg0, compiler.currentType)\r\n          );\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\r\n            compiler.currentType,\r\n            !flow.canOverflow(arg1, compiler.currentType)\r\n          );\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.LtU32,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.LtI64,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.U64: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.LtU64,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.LtI64\r\n                : BinaryOp.LtI32,\r\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\r\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.LtU64\r\n                : BinaryOp.LtU32,\r\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\r\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createBinary(BinaryOp.MinF32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createBinary(BinaryOp.MinF64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: { // void\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"ceil\": { // ceil<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: { // any integer\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.CeilF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.CeilF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"floor\": { // floor<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: { // any integer\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.FloorF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.FloorF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"copysign\": { // copysign<T?>(left: T, right: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      switch (compiler.currentType.kind) { // TODO: does an integer version make sense?\r\n        case TypeKind.F32: {\r\n          ret = module.createBinary(BinaryOp.CopysignF32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createBinary(BinaryOp.CopysignF64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"nearest\": { // nearest<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: { // any integer\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.NearestF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.NearestF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"reinterpret\": { // reinterpret<T!>(value: *) -> T\r\n      if (operands.length != 1) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      switch (typeArguments[0].kind) {\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          arg0 = compiler.compileExpression(operands[0], Type.f32, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          ret = module.createUnary(UnaryOp.ReinterpretF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          ret = module.createUnary(UnaryOp.ReinterpretF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (typeArguments[0].is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            compiler.currentType = typeArguments[0];\r\n            return module.createUnreachable();\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          arg0 = compiler.compileExpression(\r\n            operands[0],\r\n            compiler.options.isWasm64\r\n              ? Type.f64\r\n              : Type.f32,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.NONE\r\n          );\r\n          ret = module.createUnary(\r\n            compiler.options.isWasm64\r\n              ? UnaryOp.ReinterpretF64\r\n              : UnaryOp.ReinterpretF32,\r\n            arg0\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          ret = module.createUnary(UnaryOp.ReinterpretI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          arg0 = compiler.compileExpression(operands[0], Type.i64, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          ret = module.createUnary(UnaryOp.ReinterpretI64, arg0);\r\n          break;\r\n        }\r\n        default: { // small integers and void\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      compiler.currentType = typeArguments[0];\r\n      return ret;\r\n    }\r\n    case \"sqrt\": { // sqrt<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) { // TODO: integer versions (that return f64 or convert)?\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.SqrtF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.SqrtF64, arg0);\r\n          break;\r\n        }\r\n        // case TypeKind.VOID:\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"trunc\": { // trunc<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments && typeArguments.length) {\r\n        compiler.currentType = typeArguments[0];\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: { // any integer\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        // TODO: truncate to contextual type directly (if not void etc.)?\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.TruncF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.TruncF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n\r\n    // memory access\r\n\r\n    case \"load\": { // load<T!>(offset: usize, constantOffset?: usize) -> *\r\n      if (operands.length < 1 || operands.length > 2) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        if (operands.length < 1) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n            reportNode.range, \"1\", operands.length.toString(10)\r\n          );\r\n        } else {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_arguments_but_got_1,\r\n            reportNode.range, \"2\", operands.length.toString(10)\r\n          );\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      let offset = operands.length == 2 ? evaluateConstantOffset(compiler, operands[1]) : 0; // reports\r\n      if (offset < 0) { // reported in evaluateConstantOffset\r\n        return module.createUnreachable();\r\n      }\r\n      compiler.currentType = typeArguments[0];\r\n      return module.createLoad(\r\n        typeArguments[0].byteSize,\r\n        typeArguments[0].is(TypeFlags.SIGNED | TypeFlags.INTEGER),\r\n        arg0,\r\n        typeArguments[0].is(TypeFlags.INTEGER) &&\r\n        contextualType.is(TypeFlags.INTEGER) &&\r\n        contextualType.size > typeArguments[0].size\r\n          ? (compiler.currentType = contextualType).toNativeType()\r\n          : (compiler.currentType = typeArguments[0]).toNativeType(),\r\n        offset\r\n      );\r\n    }\r\n    case \"store\": { // store<T!>(offset: usize, value: *, constantOffset?: usize) -> void\r\n      compiler.currentType = Type.void;\r\n      if (operands.length < 2 || operands.length > 3) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        if (operands.length < 2) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n            reportNode.range, \"2\", operands.length.toString(10)\r\n          );\r\n        } else {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_arguments_but_got_1,\r\n            reportNode.range, \"3\", operands.length.toString(10)\r\n          );\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      arg1 = compiler.compileExpression(\r\n        operands[1],\r\n        typeArguments[0],\r\n        typeArguments[0].is(TypeFlags.INTEGER)\r\n          ? ConversionKind.NONE // no need to convert to small int (but now might result in a float)\r\n          : ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      let type: Type;\r\n      if (\r\n        typeArguments[0].is(TypeFlags.INTEGER) &&\r\n        (\r\n          !compiler.currentType.is(TypeFlags.INTEGER) ||    // float to int\r\n          compiler.currentType.size < typeArguments[0].size // int to larger int (clear garbage bits)\r\n        )\r\n      ) {\r\n        arg1 = compiler.convertExpression(\r\n          arg1,\r\n          compiler.currentType, typeArguments[0],\r\n          ConversionKind.IMPLICIT,\r\n          WrapMode.NONE, // still clears garbage bits\r\n          operands[1]\r\n        );\r\n        type = typeArguments[0];\r\n      } else {\r\n        type = compiler.currentType;\r\n      }\r\n      let offset = operands.length == 3 ? evaluateConstantOffset(compiler, operands[2]) : 0; // reports\r\n      if (offset < 0) { // reported in evaluateConstantOffset\r\n        return module.createUnreachable();\r\n      }\r\n      compiler.currentType = Type.void;\r\n      return module.createStore(typeArguments[0].byteSize, arg0, arg1, type.toNativeType(), offset);\r\n    }\r\n    case \"sizeof\": { // sizeof<T!>() -> usize\r\n      compiler.currentType = compiler.options.usizeType;\r\n      if (operands.length != 0) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n      }\r\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\r\n      if (compiler.options.isWasm64) {\r\n        // implicitly wrap if contextual type is a 32-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\r\n          compiler.currentType = Type.u32;\r\n          ret = module.createI32(byteSize);\r\n        } else {\r\n          ret = module.createI64(byteSize, 0);\r\n        }\r\n      } else {\r\n        // implicitly extend if contextual type is a 64-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\r\n          compiler.currentType = Type.u64;\r\n          ret = module.createI64(byteSize, 0);\r\n        } else {\r\n          ret = module.createI32(byteSize);\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"alignof\": { // alignof<T!>() -> usize\r\n      compiler.currentType = compiler.options.usizeType;\r\n      if (operands.length != 0) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\r\n      let alignLog2: i32;\r\n      switch (byteSize) {\r\n        case 1: { alignLog2 = 0; break; }\r\n        case 2: { alignLog2 = 1; break; }\r\n        case 4: { alignLog2 = 2; break; }\r\n        case 8: { alignLog2 = 3; break; }\r\n        default: { assert(false); return module.createUnreachable(); }\r\n      }\r\n      if (compiler.options.isWasm64) {\r\n        // implicitly wrap if contextual type is a 32-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\r\n          compiler.currentType = Type.u32;\r\n          ret = module.createI32(alignLog2);\r\n        } else {\r\n          ret = module.createI64(alignLog2, 0);\r\n        }\r\n      } else {\r\n        // implicitly extend if contextual type is a 64-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\r\n          compiler.currentType = Type.u64;\r\n          ret = module.createI64(alignLog2, 0);\r\n        } else {\r\n          ret = module.createI32(alignLog2);\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"offsetof\": { // offsetof<T!>(fieldName?: string) -> usize\r\n      compiler.currentType = compiler.options.usizeType;\r\n      if (operands.length > 1) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let classType = typeArguments[0].classReference;\r\n      if (!classType) {\r\n        compiler.error( // TODO: better error\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let offset: i32;\r\n      if (operands.length) {\r\n        if (\r\n          operands[0].kind != NodeKind.LITERAL ||\r\n          (<LiteralExpression>operands[0]).literalKind != LiteralKind.STRING\r\n        ) {\r\n          compiler.error(\r\n            DiagnosticCode.String_literal_expected,\r\n            operands[0].range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        let fieldName = (<StringLiteralExpression>operands[0]).value;\r\n        let field = classType.members ? classType.members.get(fieldName) : null;\r\n        if (!(field && field.kind == ElementKind.FIELD)) {\r\n          compiler.error(\r\n            DiagnosticCode.Type_0_has_no_property_1,\r\n            operands[0].range, classType.internalName, fieldName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        offset = (<Field>field).memoryOffset;\r\n      } else {\r\n        offset = classType.currentMemoryOffset;\r\n      }\r\n      if (compiler.options.isWasm64) {\r\n        // implicitly wrap if contextual type is a 32-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\r\n          compiler.currentType = Type.u32;\r\n          return module.createI32(offset);\r\n        } else {\r\n          return module.createI64(offset);\r\n        }\r\n      } else {\r\n        // implicitly extend if contextual type is a 64-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\r\n          compiler.currentType = Type.u64;\r\n          return module.createI64(offset);\r\n        } else {\r\n          return module.createI32(offset);\r\n        }\r\n      }\r\n    }\r\n\r\n    // control flow\r\n\r\n    case \"select\": { // select<T?>(ifTrue: T, ifFalse: T, condition: bool) -> T\r\n      if (operands.length != 3) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"3\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        arg0 = compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\r\n      }\r\n      let type = compiler.currentType;\r\n      arg1 = compiler.compileExpression(operands[1], type, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      arg2 = compiler.makeIsTrueish(\r\n        compiler.compileExpressionRetainType(operands[2], Type.bool, WrapMode.NONE),\r\n        compiler.currentType\r\n      );\r\n      compiler.currentType = type;\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.BOOL: {\r\n          ret = module.createSelect(arg0, arg1, arg2);\r\n          break;\r\n        }\r\n        default: { // any other value type\r\n          ret = module.createSelect(arg0, arg1, arg2);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"unreachable\": { // unreachable() -> *\r\n      if (operands.length != 0) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n      }\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      return module.createUnreachable();\r\n    }\r\n\r\n    // host operations\r\n\r\n    case \"current_memory\": { // current_memory() -> i32\r\n      compiler.currentType = Type.i32;\r\n      if (operands.length != 0) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n      }\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      return module.createHost(HostOp.CurrentMemory);\r\n    }\r\n    case \"grow_memory\": { // grow_memory(pages: i32) -> i32\r\n      compiler.currentType = Type.i32;\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n        arg0 = module.createUnreachable();\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      }\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      return module.createHost(HostOp.GrowMemory, null, [ arg0 ]);\r\n    }\r\n    // see: https://github.com/WebAssembly/bulk-memory-operations\r\n    case \"move_memory\": { // move_memory(dest: usize, src: usize: n: usize) -> void\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 3) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"3\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.void;\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      arg1 = compiler.compileExpression(\r\n        operands[1],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      arg2 = compiler.compileExpression(\r\n        operands[2],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      compiler.currentType = Type.void;\r\n      throw new Error(\"not implemented\");\r\n      // return module.createHost(HostOp.MoveMemory, null, [ arg0, arg1, arg2 ]);\r\n    }\r\n    case \"set_memory\": { // set_memory(dest: usize, value: u8, n: usize) -> void\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 3) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"3\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.void;\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      arg1 = compiler.compileExpression(\r\n        operands[1],\r\n        Type.u32,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      arg2 = compiler.compileExpression(\r\n        operands[2],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      compiler.currentType = Type.void;\r\n      throw new Error(\"not implemented\");\r\n      // return module.createHost(HostOp.SetMemory, null, [ arg0, arg1, arg2 ]);\r\n    }\r\n\r\n    // other\r\n\r\n    case \"changetype\": { // changetype<T!>(value: *) -> T\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = typeArguments[0];\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpressionRetainType(\r\n        operands[0],\r\n        typeArguments[0],\r\n        WrapMode.NONE\r\n      );\r\n      compiler.currentType = typeArguments[0];\r\n      if (compiler.currentType.size != typeArguments[0].size) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      // if (reportNode.range.source.sourceKind != SourceKind.STDLIB)\r\n      //  compiler.warning(DiagnosticCode.Operation_is_unsafe, reportNode.range);\r\n      return arg0; // any usize to any usize\r\n    }\r\n    case \"assert\": { // assert<T?>(isTrueish: T, message?: string) -> T with T != null\r\n      if (operands.length < 1 || operands.length > 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0].nonNullableType;\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        if (operands.length < 1) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n            reportNode.range, \"1\", operands.length.toString(10)\r\n          );\r\n        } else if (operands.length > 2) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_arguments_but_got_1,\r\n            reportNode.range, \"2\", operands.length.toString(10)\r\n          );\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length) compiler.currentType = typeArguments[0].nonNullableType;\r\n        if (typeArguments.length != 1) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpressionRetainType(operands[0], Type.bool, WrapMode.WRAP);\r\n      }\r\n\r\n      let type = compiler.currentType;\r\n      compiler.currentType = type.nonNullableType;\r\n\r\n      // just return ifTrueish if assertions are disabled, or simplify if dropped anyway\r\n      if (compiler.options.noAssert) {\r\n        if (contextualType == Type.void) {\r\n          compiler.currentType = Type.void;\r\n          return module.createNop();\r\n        }\r\n        return arg0;\r\n      }\r\n\r\n      let abort = compileAbort(compiler, operands.length == 2 ? operands[1] : null, reportNode);\r\n\r\n      compiler.currentType = type.nonNullableType;\r\n\r\n      if (contextualType == Type.void) { // simplify if dropped anyway\r\n        switch (compiler.currentType.kind) {\r\n          default: { // any integer up to 32-bits incl. bool\r\n            ret = module.createIf(\r\n              module.createUnary(UnaryOp.EqzI32,\r\n                arg0\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            ret = module.createIf(\r\n              module.createUnary(UnaryOp.EqzI64,\r\n                arg0\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE:\r\n          case TypeKind.USIZE: {\r\n            ret = module.createIf(\r\n              module.createUnary(\r\n                compiler.options.isWasm64\r\n                  ? UnaryOp.EqzI64\r\n                  : UnaryOp.EqzI32,\r\n                arg0\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          // TODO: also check for NaN in float assertions, as in `Boolean(NaN) -> false`?\r\n          case TypeKind.F32: {\r\n            ret = module.createIf(\r\n              module.createBinary(BinaryOp.EqF32,\r\n                arg0,\r\n                module.createF32(0)\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            ret = module.createIf(\r\n              module.createBinary(BinaryOp.EqF64,\r\n                arg0,\r\n                module.createF64(0)\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = abort;\r\n            break;\r\n          }\r\n        }\r\n        compiler.currentType = Type.void;\r\n      } else {\r\n        switch (compiler.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            let flow = compiler.currentFunction.flow;\r\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(\r\n              compiler.currentType,\r\n              !flow.canOverflow(arg0, compiler.currentType)\r\n            );\r\n            ret = module.createIf(\r\n              module.createTeeLocal(tempLocal.index, arg0),\r\n              module.createGetLocal(tempLocal.index, NativeType.I32),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I32:\r\n          case TypeKind.U32:\r\n          default: {\r\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i32, false);\r\n            ret = module.createIf(\r\n              module.createTeeLocal(tempLocal.index, arg0),\r\n              module.createGetLocal(tempLocal.index, NativeType.I32),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\r\n            ret = module.createIf(\r\n              module.createUnary(UnaryOp.EqzI64,\r\n                module.createTeeLocal(tempLocal.index, arg0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal.index, NativeType.I64)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE:\r\n          case TypeKind.USIZE: {\r\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\r\n            ret = module.createIf(\r\n              module.createUnary(\r\n                compiler.options.isWasm64\r\n                  ? UnaryOp.EqzI64\r\n                  : UnaryOp.EqzI32,\r\n                module.createTeeLocal(tempLocal.index, arg0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.f32, false);\r\n            ret = module.createIf(\r\n              module.createBinary(BinaryOp.EqF32,\r\n                module.createTeeLocal(tempLocal.index, arg0),\r\n                module.createF32(0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal.index, NativeType.F32)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.f64, false);\r\n            ret = module.createIf(\r\n              module.createBinary(BinaryOp.EqF64,\r\n                module.createTeeLocal(tempLocal.index, arg0),\r\n                module.createF64(0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal.index, NativeType.F64)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = abort;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"unchecked\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let flow = compiler.currentFunction.flow;\r\n      flow.set(FlowFlags.UNCHECKED_CONTEXT);\r\n      ret = compiler.compileExpressionRetainType(operands[0], contextualType, WrapMode.NONE);\r\n      flow.unset(FlowFlags.UNCHECKED_CONTEXT);\r\n      return ret;\r\n    }\r\n    case \"call_indirect\": { // call_indirect<T?>(target: Function | u32, ...args: *[]) -> T\r\n      if (operands.length < 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let returnType: Type;\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        returnType = typeArguments[0];\r\n      } else {\r\n        returnType = contextualType;\r\n      }\r\n      arg0 = compiler.compileExpressionRetainType(operands[0], Type.u32, WrapMode.NONE);\r\n      if (compiler.currentType.kind != TypeKind.U32) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          operands[0].range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let numOperands = operands.length - 1;\r\n      let operandExprs = new Array<ExpressionRef>(numOperands);\r\n      let signatureParts = new Array<string>(numOperands + 1);\r\n      let nativeReturnType = returnType.toNativeType();\r\n      let nativeParamTypes = new Array<NativeType>(numOperands);\r\n      for (let i = 0; i < numOperands; ++i) {\r\n        operandExprs[i] = compiler.compileExpressionRetainType(operands[1 + i], Type.i32, WrapMode.NONE);\r\n        let operandType = compiler.currentType;\r\n        signatureParts[i] = operandType.toSignatureString();\r\n        nativeParamTypes[i] = operandType.toNativeType();\r\n      }\r\n      signatureParts[numOperands] = returnType.toSignatureString();\r\n      let typeName = signatureParts.join(\"\");\r\n      let typeRef = module.getFunctionTypeBySignature(nativeReturnType, nativeParamTypes);\r\n      if (!typeRef) typeRef = module.addFunctionType(typeName, nativeReturnType, nativeParamTypes);\r\n      compiler.currentType = returnType;\r\n      // of course this can easily result in a 'RuntimeError: function signature mismatch' trap and\r\n      // thus must be used with care. it exists because it *might* be useful in specific scenarios.\r\n      return module.createCallIndirect(arg0, operandExprs, typeName);\r\n    }\r\n\r\n    // conversions\r\n\r\n    case \"i8\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.i8;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.i8,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"i16\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.i16;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.i16,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"i32\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.i32;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.i32,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"i64\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.i64;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.i64,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"isize\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = compiler.options.isWasm64\r\n          ? Type.isize64\r\n          : Type.isize32;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.isWasm64\r\n          ? Type.isize64\r\n          : Type.isize32,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"u8\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.u8;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.u8,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"u16\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.u16;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.u16,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"u32\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.u32;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.u32,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"u64\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.u64;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.u64,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"usize\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = compiler.options.usizeType;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"bool\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.bool;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.bool,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"f32\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.f32;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.f32,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"f64\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.f64;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.f64,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n  }\r\n  var expr = deferASMCall(compiler, prototype, operands, contextualType, reportNode);\r\n  if (expr) {\r\n    if (typeArguments && typeArguments.length) {\r\n      compiler.error(\r\n        DiagnosticCode.Type_0_is_not_generic,\r\n        reportNode.range, prototype.internalName\r\n      );\r\n    }\r\n    return expr;\r\n  }\r\n  compiler.error(\r\n    DiagnosticCode.Operation_not_supported,\r\n    reportNode.range\r\n  );\r\n  return module.createUnreachable();\r\n}\r\n\r\n/** Defers an inline-assembler-like call to a built-in function. */\r\nfunction deferASMCall(\r\n  compiler: Compiler,\r\n  prototype: FunctionPrototype,\r\n  operands: Expression[],\r\n  contextualType: Type,\r\n  reportNode: Node\r\n): ExpressionRef {\r\n  switch (prototype.internalName) {\r\n\r\n    // TODO: Operators can't be just deferred (don't have a corresponding generic built-in)\r\n    //   add, sub, mul, div_s, div_u, rem_s, rem_u\r\n    //   and, or, xor, shl, shr_u, shr_s\r\n    //   eq, eqz, ne, lt_s, lt_u, le_s, le_u, gt_s, gt_u, ge_s, ge_u\r\n\r\n    case \"i32.clz\": return deferASM(\"clz\", compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case \"i64.clz\": return deferASM(\"clz\", compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n    case \"i32.ctz\": return deferASM(\"ctz\", compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case \"i64.ctz\": return deferASM(\"ctz\", compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n    case \"i32.popcnt\": return deferASM(\"popcnt\", compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case \"i64.popcnt\": return deferASM(\"popcnt\", compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n    case \"i32.rotl\": return deferASM(\"rotl\", compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case \"i64.rotl\": return deferASM(\"rotl\", compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n    case \"i32.rotr\": return deferASM(\"rotr\", compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case \"i64.rotr\": return deferASM(\"rotr\", compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n    case \"f32.abs\": return deferASM(\"abs\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.abs\": return deferASM(\"abs\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"f32.max\": return deferASM(\"max\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.max\": return deferASM(\"max\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"f32.min\": return deferASM(\"min\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.min\": return deferASM(\"min\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"f32.ceil\": return deferASM(\"ceil\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.ceil\": return deferASM(\"ceil\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"f32.floor\": return deferASM(\"floor\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.floor\": return deferASM(\"floor\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"f32.copysign\": return deferASM(\"copysign\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.copysign\": return deferASM(\"copysign\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"f32.nearest\": return deferASM(\"nearest\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.nearest\": return deferASM(\"nearest\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"i32.reinterpret_f32\": return deferASM(\"reinterpret\", compiler, Type.i32, operands, Type.f32, reportNode);\r\n    case \"i64.reinterpret_f64\": return deferASM(\"reinterpret\", compiler, Type.i64, operands, Type.f64, reportNode);\r\n    case \"f32.reinterpret_i32\": return deferASM(\"reinterpret\", compiler, Type.f32, operands, Type.i32, reportNode);\r\n    case \"f64.reinterpret_i64\": return deferASM(\"reinterpret\", compiler, Type.f64, operands, Type.i64, reportNode);\r\n\r\n    case \"f32.sqrt\": return deferASM(\"sqrt\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.sqrt\": return deferASM(\"sqrt\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"f32.trunc\": return deferASM(\"trunc\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.trunc\": return deferASM(\"trunc\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"i32.load8_s\": return deferASM(\"load\", compiler, Type.i8, operands, Type.i32, reportNode);\r\n    case \"i32.load8_u\": return deferASM(\"load\", compiler, Type.u8, operands, Type.u32, reportNode);\r\n    case \"i32.load16_s\": return deferASM(\"load\", compiler, Type.i16, operands, Type.i32, reportNode);\r\n    case \"i32.load16_u\": return deferASM(\"load\", compiler, Type.u16, operands, Type.u32, reportNode);\r\n    case \"i32.load\": return deferASM(\"load\", compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case \"i64.load8_s\": return deferASM(\"load\", compiler, Type.i8, operands, Type.i64, reportNode);\r\n    case \"i64.load8_u\": return deferASM(\"load\", compiler, Type.u8, operands, Type.u64, reportNode);\r\n    case \"i64.load16_s\": return deferASM(\"load\", compiler, Type.i16, operands, Type.i64, reportNode);\r\n    case \"i64.load16_u\": return deferASM(\"load\", compiler, Type.u16, operands, Type.u64, reportNode);\r\n    case \"i64.load32_s\": return deferASM(\"load\", compiler, Type.i32, operands, Type.i64, reportNode);\r\n    case \"i64.load32_u\": return deferASM(\"load\", compiler, Type.u32, operands, Type.u64, reportNode);\r\n    case \"i64.load\": return deferASM(\"load\", compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case \"f32.load\": return deferASM(\"load\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.load\": return deferASM(\"load\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"i32.store8\": return deferASM(\"store\", compiler, Type.i8, operands, Type.i32, reportNode);\r\n    case \"i32.store16\": return deferASM(\"store\", compiler, Type.i16, operands, Type.i32, reportNode);\r\n    case \"i32.store\": return deferASM(\"store\", compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case \"i64.store8\": return deferASM(\"store\", compiler, Type.i8, operands, Type.i64, reportNode);\r\n    case \"i64.store16\": return deferASM(\"store\", compiler, Type.i16, operands, Type.i64, reportNode);\r\n    case \"i64.store32\": return deferASM(\"store\", compiler, Type.i32, operands, Type.i64, reportNode);\r\n    case \"i64.store\": return deferASM(\"store\", compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case \"f32.store\": return deferASM(\"store\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.store\": return deferASM(\"store\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n  }\r\n  return 0;\r\n}\r\n\r\n/** A helper for deferring inline-assembler-like calls to built-in functions. */\r\nfunction deferASM(\r\n  name: string,\r\n  compiler: Compiler,\r\n  typeArgument: Type,\r\n  operands: Expression[],\r\n  valueType: Type,\r\n  reportNode: Node\r\n): ExpressionRef {\r\n  var prototype = assert(compiler.program.elementsLookup.get(name));\r\n  assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n  return compileCall(compiler, <FunctionPrototype>prototype, [ typeArgument ], operands, valueType, reportNode);\r\n}\r\n\r\n/** Evaluates the constant type of a type argument *or* expression. */\r\nfunction evaluateConstantType(\r\n  compiler: Compiler,\r\n  typeArguments: Type[] | null,\r\n  operands: Expression[],\r\n  reportNode: Node\r\n): Type | null {\r\n  if (operands.length == 0) { // requires type argument\r\n    if (!typeArguments || typeArguments.length != 1) {\r\n      compiler.error(\r\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n        reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n      );\r\n      return null;\r\n    }\r\n    return typeArguments[0];\r\n  }\r\n  if (operands.length == 1) { // optional type argument\r\n    if (typeArguments) {\r\n      if (typeArguments.length == 1) {\r\n        compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        if (typeArguments.length) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return null;\r\n        }\r\n        compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\r\n      }\r\n    } else {\r\n      compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\r\n    }\r\n    return compiler.currentType;\r\n  }\r\n  if (typeArguments && typeArguments.length > 1) {\r\n    compiler.error(\r\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n      reportNode.range, \"1\", typeArguments.length.toString(10)\r\n    );\r\n  }\r\n  compiler.error(\r\n    DiagnosticCode.Expected_0_arguments_but_got_1,\r\n    reportNode.range, \"1\", operands.length.toString(10)\r\n  );\r\n  return null;\r\n}\r\n\r\n/** Evaluates a `constantOffset` argument.*/\r\nfunction evaluateConstantOffset(compiler: Compiler, expression: Expression): i32 {\r\n  var expr: ExpressionRef;\r\n  var value: i32;\r\n  if (compiler.options.isWasm64) {\r\n    expr = compiler.precomputeExpression(expression, Type.usize64, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n    if (\r\n      getExpressionId(expr) != ExpressionId.Const ||\r\n      getExpressionType(expr) != NativeType.I64 ||\r\n      getConstValueI64High(expr) != 0 ||\r\n      (value = getConstValueI64Low(expr)) < 0\r\n    ) {\r\n      compiler.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n      value = -1;\r\n    }\r\n  } else {\r\n    expr = compiler.precomputeExpression(expression, Type.usize32, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n    if (\r\n      getExpressionId(expr) != ExpressionId.Const ||\r\n      getExpressionType(expr) != NativeType.I32 ||\r\n      (value = getConstValueI32(expr)) < 0\r\n    ) {\r\n      compiler.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n      value = -1;\r\n    }\r\n  }\r\n  return value;\r\n}\r\n\r\nconst allocateInternalName = \"allocate_memory\";\r\n\r\n/** Compiles a memory allocation for an instance of the specified class. */\r\nexport function compileAllocate(\r\n  compiler: Compiler,\r\n  classInstance: Class,\r\n  reportNode: Node\r\n): ExpressionRef {\r\n  var program = compiler.program;\r\n  assert(classInstance.program == program);\r\n  var module = compiler.module;\r\n  var options = compiler.options;\r\n\r\n  var allocatePrototype = program.elementsLookup.get(allocateInternalName);\r\n  if (!allocatePrototype) {\r\n    program.error(\r\n      DiagnosticCode.Cannot_find_name_0,\r\n      reportNode.range, allocateInternalName\r\n    );\r\n    program.info(\r\n      DiagnosticCode.An_allocator_must_be_declared_to_allocate_memory_Try_importing_allocator_arena_or_allocator_tlsf,\r\n      reportNode.range\r\n    );\r\n    return module.createUnreachable();\r\n  }\r\n  if (allocatePrototype.kind != ElementKind.FUNCTION_PROTOTYPE) {\r\n    program.error(\r\n      DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n      reportNode.range, allocatePrototype.internalName\r\n    );\r\n    return module.createUnreachable();\r\n  }\r\n\r\n  var allocateInstance = (<FunctionPrototype>allocatePrototype).resolve(); // reports\r\n  if (!(allocateInstance && compiler.compileFunction(allocateInstance))) return module.createUnreachable();\r\n\r\n  compiler.currentType = classInstance.type;\r\n  return module.createCall(\r\n    allocateInstance.internalName, [\r\n      options.isWasm64\r\n        ? module.createI64(classInstance.currentMemoryOffset)\r\n        : module.createI32(classInstance.currentMemoryOffset)\r\n    ],\r\n    options.nativeSizeType\r\n  );\r\n}\r\n\r\nconst abortInternalName = \"abort\";\r\n\r\n/** Compiles an abort wired to the conditionally imported 'abort' function. */\r\nexport function compileAbort(\r\n  compiler: Compiler,\r\n  message: Expression | null,\r\n  reportNode: Node\r\n): ExpressionRef {\r\n  var program = compiler.program;\r\n  var module = compiler.module;\r\n\r\n  var stringType = program.typesLookup.get(\"string\"); // might be intended\r\n  if (!stringType) return module.createUnreachable();\r\n\r\n  var abortPrototype = program.elementsLookup.get(abortInternalName); // might be intended\r\n  if (!abortPrototype || abortPrototype.kind != ElementKind.FUNCTION_PROTOTYPE) return module.createUnreachable();\r\n\r\n  var abortInstance = (<FunctionPrototype>abortPrototype).resolve(); // reports\r\n  if (!(abortInstance && compiler.compileFunction(abortInstance))) return module.createUnreachable();\r\n\r\n  var messageArg = message != null\r\n    ? compiler.compileExpression(message, stringType, ConversionKind.IMPLICIT, WrapMode.NONE)\r\n    : stringType.toNativeZero(module);\r\n\r\n  var filenameArg = compiler.compileStaticString(reportNode.range.source.normalizedPath);\r\n\r\n  compiler.currentType = Type.void;\r\n  return module.createBlock(null, [\r\n    module.createCallImport(\r\n      abortInstance.internalName, [\r\n        messageArg,\r\n        filenameArg,\r\n        module.createI32(reportNode.range.line),\r\n        module.createI32(reportNode.range.column)\r\n      ],\r\n      NativeType.None\r\n    ),\r\n    module.createUnreachable()\r\n  ]);\r\n}\r\n","module.exports = __WEBPACK_EXTERNAL_MODULE__22__;","// Copy Binaryen exports to global scope\r\n\r\nconst binaryen = global.Binaryen || require(\"binaryen\");\r\n\r\nfor (var key in binaryen)\r\n  if (key.startsWith(\"_Binaryen\") || key.startsWith(\"_Relooper\"))\r\n    global[key] = binaryen[key];\r\n\r\n// Utilize Binaryen's heap\r\n\r\nglobal.allocate_memory = function(size) {\r\n  if (!size) return 0; // should be safe in our case\r\n  return binaryen._malloc(size);\r\n};\r\n\r\nglobal.free_memory = function(ptr) {\r\n  if (ptr) binaryen._free(ptr);\r\n};\r\n\r\nglobal.move_memory = function(dest, src, n) {\r\n  return binaryen._memmove(dest, src, n);\r\n};\r\n\r\nglobal.store = function(ptr, val) {\r\n  binaryen.HEAPU8[ptr] = val;\r\n};\r\n\r\nglobal.load = function(ptr) {\r\n  return binaryen.HEAPU8[ptr];\r\n};\r\n\r\n// Implement module stubs\r\n\r\nconst Module = require(\"../../module\").Module;\r\n\r\nModule.prototype.toText = function toText() {\r\n  var previousPrint = binaryen.print;\r\n  var ret = \"\";\r\n  binaryen.print = function(x) { ret += x + \"\\n\" };\r\n  _BinaryenModulePrint(this.ref);\r\n  binaryen.print = previousPrint;\r\n  return ret;\r\n};\r\n\r\nModule.prototype.toAsmjs = function toAsmjs() {\r\n  var previousPrint = binaryen.print;\r\n  var ret = \"\";\r\n  binaryen.print = function(x) { ret += x + \"\\n\" };\r\n  _BinaryenModulePrintAsmjs(this.ref);\r\n  binaryen.print = previousPrint;\r\n  return ret;\r\n};\r\n","module.exports = globalScope => {\r\n  var HEAP = new Uint8Array(0);\r\n  var HEAP_OFFSET = 0;\r\n\r\n  globalScope[\"allocate_memory\"] = function allocate_memory(size) {\r\n    if (!(size >>>= 0)) return 0;\r\n\r\n    if (HEAP_OFFSET + size > HEAP.length) {\r\n      var oldHeap = HEAP;\r\n      HEAP = new Uint8Array(Math.max(65536, HEAP.length + size, HEAP.length * 2));\r\n      HEAP.set(oldHeap);\r\n    }\r\n\r\n    var ptr = HEAP_OFFSET;\r\n    if ((HEAP_OFFSET += size) & 7)\r\n      HEAP_OFFSET = (HEAP_OFFSET | 7) + 1;\r\n\r\n    return ptr;\r\n  };\r\n\r\n  globalScope[\"free_memory\"] = function free_memory(ptr) {\r\n    // TODO\r\n  };\r\n\r\n  globalScope[\"move_memory\"] = function move_memory(dest, src, size) {\r\n    HEAP.copyWithin(dest, src, src + size);\r\n  };\r\n\r\n  globalScope[\"store\"] = function store(ptr, value, offset) {\r\n    HEAP[ptr + (offset | 0)] = value;\r\n  };\r\n\r\n  globalScope[\"load\"] = function load(ptr, offset) {\r\n    return HEAP[ptr + (offset | 0)];\r\n  };\r\n};\r\n","module.exports = globalScope => {\r\n  globalScope[\"JSMath\"] = Math;\r\n};\r\n","/** @module std/portable *//***/\r\n\r\nvar globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\r\n\r\nObject.defineProperties(\r\n  globalScope[\"i8\"] = function i8(value) { return value << 24 >> 24; }\r\n, {\r\n  \"MIN_VALUE\": { value: -128, writable: false },\r\n  \"MAX_VALUE\": { value: 127, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"i16\"] = function i16(value) { return value << 16 >> 16; }\r\n, {\r\n  \"MIN_VALUE\": { value: -32768, writable: false },\r\n  \"MAX_VALUE\": { value: 32767, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"i32\"] = globalScope[\"isize\"] = function i32(value) { return value | 0; }\r\n, {\r\n  \"MIN_VALUE\": { value: -2147483648, writable: false },\r\n  \"MAX_VALUE\": { value: 2147483647, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"u8\"] = function u8(value) { return value & 0xff; }\r\n, {\r\n  \"MIN_VALUE\": { value: 0, writable: false },\r\n  \"MAX_VALUE\": { value: 255, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"u16\"] = function u16(value) { return value & 0xffff; }\r\n, {\r\n  \"MIN_VALUE\": { value: 0, writable: false },\r\n  \"MAX_VALUE\": { value: 65535, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"u32\"] = globalScope[\"usize\"] = function u32(value) { return value >>> 0; }\r\n, {\r\n  \"MIN_VALUE\": { value: 0, writable: false },\r\n  \"MAX_VALUE\": { value: 4294967295, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"bool\"] = function bool(value) { return !!value; }\r\n, {\r\n  \"MIN_VALUE\": { value: 0, writable: false },\r\n  \"MAX_VALUE\": { value: 1, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"f32\"] = function f32(value) { return Math.fround(value); }\r\n, {\r\n  \"MIN_VALUE\": { value: Math.fround(-3.40282347e+38), writable: false },\r\n  \"MAX_VALUE\": { value: Math.fround(3.40282347e+38), writable: false },\r\n  \"MIN_POSITIVE_VALUE\": { value: Math.fround(1.175494351e-38), writable: false },\r\n  \"MIN_SAFE_INTEGER\": { value: -16777215, writable: false },\r\n  \"MAX_SAFE_INTEGER\": { value: 16777215, writable: false },\r\n  \"EPSILON\": { value: Math.fround(1.19209290e-07), writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"f64\"] = function f64(value) { return +value; }\r\n, {\r\n  \"MIN_VALUE\": { value: -1.7976931348623157e+308, writable: false },\r\n  \"MAX_VALUE\": { value: 1.7976931348623157e+308, writable: false },\r\n  \"MIN_POSITIVE_VALUE\": { value: 2.2250738585072014e-308 , writable: false },\r\n  \"MIN_SAFE_INTEGER\": { value: -9007199254740991, writable: false },\r\n  \"MAX_SAFE_INTEGER\": { value: 9007199254740991, writable: false },\r\n  \"EPSILON\": { value: 2.2204460492503131e-16, writable: false }\r\n});\r\n\r\nglobalScope[\"clz\"] = Math.clz32;\r\n\r\nglobalScope[\"ctz\"] = function ctz(value) {\r\n  var c = Math.clz32(value & -value);\r\n  return value ? 31 - c : c;\r\n};\r\n\r\nglobalScope[\"popcnt\"] = function popcnt(value) {\r\n  value -= value >>> 1 & 0x55555555;\r\n  value = (value & 0x33333333) + (value >>> 2 & 0x33333333);\r\n  return (((value + (value >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\r\n};\r\n\r\nglobalScope[\"rotl\"] = function rotl(value, shift) {\r\n  shift &= 31;\r\n  return (value << shift) | (value >>> (32 - shift));\r\n};\r\n\r\nglobalScope[\"rotr\"] = function rotr(value, shift) {\r\n  shift &= 31;\r\n  return (value >>> shift) | (value << (32 - shift));\r\n};\r\n\r\nglobalScope[\"abs\"] = Math.abs;\r\n\r\nglobalScope[\"max\"] = Math.max;\r\n\r\nglobalScope[\"min\"] = Math.min;\r\n\r\nglobalScope[\"ceil\"] = Math.ceil;\r\n\r\nglobalScope[\"floor\"] = Math.floor;\r\n\r\n// Adopt code from https://github.com/rfk/wasm-polyfill\r\nglobalScope[\"nearest\"] = function nearest(value) {\r\n  if (Math.abs(value - Math.trunc(value)) === 0.5) {\r\n    return 2.0 * Math.round(value * 0.5);\r\n  }\r\n  return Math.round(value);\r\n};\r\n\r\nglobalScope[\"select\"] = function select(ifTrue, ifFalse, condition) {\r\n  return condition ? ifTrue : ifFalse;\r\n};\r\n\r\nglobalScope[\"sqrt\"] = Math.sqrt;\r\n\r\nglobalScope[\"trunc\"] = Math.trunc;\r\n\r\nglobalScope[\"copysign\"] = function copysign(x, y) {\r\n  return Math.abs(x) * Math.sign(y);\r\n};\r\n\r\nglobalScope[\"bswap\"] = function bswap(value) {\r\n  var a = value >> 8 & 0x00FF00FF;\r\n  var b = (value & 0x00FF00FF) << 8;\r\n  value = a | b;\r\n  a = value >> 16 & 0x0000FFFF;\r\n  b = (value & 0x0000FFFF) << 16;\r\n  return a | b;\r\n};\r\n\r\nglobalScope[\"bswap16\"] = function bswap16(value) {\r\n  return ((value << 8) & 0xFF00) | ((value >> 8) & 0x00FF) | (value & 0xFFFF0000);\r\n};\r\n\r\nfunction UnreachableError() {\r\n  if (Error.captureStackTrace) {\r\n    Error.captureStackTrace(this, UnreachableError);\r\n  } else {\r\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\r\n  }\r\n}\r\nUnreachableError.prototype = Object.create(Error.prototype);\r\nUnreachableError.prototype.name = \"UnreachableError\";\r\nUnreachableError.prototype.message = \"unreachable\";\r\n\r\nglobalScope[\"unreachable\"] = function unreachable() {\r\n  throw new UnreachableError();\r\n};\r\n\r\nfunction AssertionError(message) {\r\n  this.message = message || \"assertion failed\";\r\n  if (Error.captureStackTrace) {\r\n    Error.captureStackTrace(this, AssertionError);\r\n  } else {\r\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\r\n  }\r\n}\r\nAssertionError.prototype = Object.create(Error.prototype);\r\nAssertionError.prototype.name = \"AssertionError\";\r\n\r\nglobalScope[\"assert\"] = function assert(isTrueish, message) {\r\n  if (isTrueish) return isTrueish;\r\n  throw new AssertionError(message);\r\n};\r\n\r\nglobalScope[\"changetype\"] = function changetype(value) {\r\n  return value;\r\n};\r\n\r\nglobalScope[\"parseI32\"] = function parseI32(str, radix) {\r\n  return parseInt(str, undefined) | 0;\r\n};\r\n\r\nString[\"fromCharCodes\"] = function fromCharCodes(arr) {\r\n  return String.fromCharCode.apply(String, arr);\r\n};\r\n\r\nString[\"fromCodePoints\"] = function fromCodePoints(arr) {\r\n  return String.fromCodePoint.apply(String, arr);\r\n};\r\n\r\nglobalScope[\"isInteger\"] = Number.isInteger;\r\n\r\nglobalScope[\"isFloat\"] = function isFloat(arg) {\r\n  return typeof arg === \"number\";\r\n};\r\n\r\nglobalScope[\"isReference\"] = function isClass(arg) {\r\n  return typeof arg === \"object\" || typeof arg === \"string\";\r\n};\r\n\r\nglobalScope[\"isString\"] = function isString(arg) {\r\n  return typeof arg === \"string\" || arg instanceof String;\r\n};\r\n\r\nglobalScope[\"isArray\"] = Array.isArray;\r\n\r\nglobalScope[\"unchecked\"] = function(expr) {\r\n  return expr;\r\n};\r\n\r\nglobalScope[\"fmod\"] = function fmod(x, y) {\r\n  return x % y;\r\n};\r\n\r\nglobalScope[\"fmodf\"] = function fmodf(x, y) {\r\n  return Math.fround(x % y);\r\n};\r\n\r\nrequire(\"./portable/math\")(globalScope);\r\nrequire(\"./portable/memory\")(globalScope);\r\n","/**\r\n * JavaScript glue code.\r\n * @module glue/js\r\n * @preferred\r\n *//***/\r\n\r\nimport \"../../../std/portable\";\r\nimport \"./binaryen\";\r\nimport \"./i64\";\r\nimport \"./float\";\r\n"],"sourceRoot":""}